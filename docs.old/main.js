var app = (function (exports) {
    'use strict';

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
        const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function exclude_internal_props(props) {
        const result = {};
        for (const k in props)
            if (k[0] !== '$')
                result[k] = props[k];
        return result;
    }
    function set_store_value(store, ret, value = ret) {
        store.set(value);
        return ret;
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function get_binding_group_value(group, __value, checked) {
        const value = new Set();
        for (let i = 0; i < group.length; i += 1) {
            if (group[i].checked)
                value.add(group[i].__value);
        }
        if (!checked) {
            value.delete(__value);
        }
        return Array.from(value);
    }
    function to_number(value) {
        return value === '' ? undefined : +value;
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    // unfortunately this can't be a constant as that wouldn't be tree-shakeable
    // so we cache the result instead
    let crossorigin;
    function is_crossorigin() {
        if (crossorigin === undefined) {
            crossorigin = false;
            try {
                if (typeof window !== 'undefined' && window.parent) {
                    void window.parent.document;
                }
            }
            catch (error) {
                crossorigin = true;
            }
        }
        return crossorigin;
    }
    function add_resize_listener(node, fn) {
        const computed_style = getComputedStyle(node);
        const z_index = (parseInt(computed_style.zIndex) || 0) - 1;
        if (computed_style.position === 'static') {
            node.style.position = 'relative';
        }
        const iframe = element('iframe');
        iframe.setAttribute('style', `display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ` +
            `overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: ${z_index};`);
        iframe.setAttribute('aria-hidden', 'true');
        iframe.tabIndex = -1;
        const crossorigin = is_crossorigin();
        let unsubscribe;
        if (crossorigin) {
            iframe.src = `data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>`;
            unsubscribe = listen(window, 'message', (event) => {
                if (event.source === iframe.contentWindow)
                    fn();
            });
        }
        else {
            iframe.src = 'about:blank';
            iframe.onload = () => {
                unsubscribe = listen(iframe.contentWindow, 'resize', fn);
            };
        }
        append(node, iframe);
        return () => {
            if (crossorigin) {
                unsubscribe();
            }
            else if (unsubscribe && iframe.contentWindow) {
                unsubscribe();
            }
            detach(iframe);
        };
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error(`Function called outside component initialization`);
        return current_component;
    }
    function beforeUpdate(fn) {
        get_current_component().$$.before_update.push(fn);
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail);
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
            }
        };
    }
    function setContext(key, context) {
        get_current_component().$$.context.set(key, context);
    }
    function getContext(key) {
        return get_current_component().$$.context.get(key);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    function add_flush_callback(fn) {
        flush_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);

    function bind(component, name, callback) {
        const index = component.$$.props[name];
        if (index !== undefined) {
            component.$$.bound[index] = callback;
            callback(component.$$.ctx[index]);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const prop_values = options.props || {};
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : []),
            // everything else
            callbacks: blank_object(),
            dirty
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, prop_values, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if ($$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor);
            flush();
        }
        set_current_component(parent_component);
    }
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set() {
            // overridden by instance, if it has props
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.24.0' }, detail)));
    }
    function append_dev(target, node) {
        dispatch_dev("SvelteDOMInsert", { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev("SvelteDOMInsert", { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev("SvelteDOMRemove", { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ["capture"] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev("SvelteDOMAddEventListener", { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev("SvelteDOMRemoveEventListener", { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev("SvelteDOMRemoveAttribute", { node, attribute });
        else
            dispatch_dev("SvelteDOMSetAttribute", { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev("SvelteDOMSetProperty", { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev("SvelteDOMSetData", { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error(`'target' is a required option`);
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn(`Component was already destroyed`); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    /* src/apps/App.svelte generated by Svelte v3.24.0 */
    const file = "src/apps/App.svelte";

    function create_fragment(ctx) {
    	let div;
    	let canvas_1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			canvas_1 = element("canvas");
    			attr_dev(canvas_1, "id", "cv");
    			attr_dev(canvas_1, "width", /*width*/ ctx[1]);
    			attr_dev(canvas_1, "height", /*height*/ ctx[2]);
    			set_style(canvas_1, "image-rendering", "optimizespeed ! important");
    			attr_dev(canvas_1, "class", "svelte-10c35ml");
    			add_location(canvas_1, file, 686, 1, 21099);
    			attr_dev(div, "id", "view");
    			attr_dev(div, "class", "svelte-10c35ml");
    			add_location(div, file, 684, 0, 21050);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, canvas_1);
    			/*canvas_1_binding*/ ctx[4](canvas_1);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*canvas_1_binding*/ ctx[4](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { greeting } = $$props;
    	let pin;
    	let view;
    	view = pin ? pin.replace(/\d(?!$)/g, "*") : "enter your pin";

    	function handleSubmit() {
    		alert(`submitted ${pin}`);
    	}

    	let canvas;
    	const width = () => !!canvas && !!canvas.width ? canvas.width : 32;
    	const height = () => !!canvas && !!canvas.height ? canvas.height : 32;
    	window.sBuffer = [];
    	window.fftReady = false;
    	window.fftProgress = -1;
    	window.fftLoader = 0;
    	window.appStarted = false;
    	window.appDelay = 0;
    	const statsBox = document.createElement("div");
    	statsBox.id = "statBox";
    	statsBox.style.display = "flex";
    	statsBox.style.flexDirection = "column";
    	statsBox.style.top = "50%";
    	statsBox.style.alignItems = "center";
    	statsBox.style.width = statsBox.style.height = "100%";
    	statsBox.style.position = "fixed";
    	statsBox.style.marginTop = "auto";
    	statsBox.style.marginLeft = "auto";
    	statsBox.style.marginRight = "auto";
    	statsBox.style.color = "#FFFFFF";
    	statsBox.style.textAlign = "center";
    	statsBox.style.left = 0;

    	statsBox.innerHTML = location.pathname.match(/(\.html)/) !== null
    	? "<img src=\"images/bw-loader.gif\" /><br />Loading... "
    	: "<img src=\"images/bw-loader.gif\" /><br />Loading... ";

    	function canvasApp(cv) {
    		window.canvasApp = canvasApp;

    		/* START Global Vars */
    		window.audio = window.aud1;

    		window.audioLoad = false;
    		window.audioReady = false;
    		window.audioName = audio.children[0].src.match(/[\/|\\]*([\w|\-|]+)\.\w\w\w$/)[1];

    		window.audio.onloadstart = typeof audio.onloadstart === "object"
    		? function () {
    				audioLoad = true;
    				return audioLoad;
    			}
    		: (function () {
    				audioLoad = true;
    				return { audioLoad: true };
    			})();

    		window.audio.oncanplaythrough = typeof audio.oncanplaythrough === "object"
    		? function () {
    				Debugger.log("audio is ready");
    				audioReady = true;
    				return audioReady;
    			}
    		: (function () {
    				/*
                        Debugger.log( "Inline video is not supported\n" );
                        return false;
                        */
    				audioReady = true;

    				return { audioReady: true };
    			})();

    		window.addEventListener("keydown", function (event) {
    			if (!event) var event = window.event; // cross-browser shenanigans

    			if (event.keyCode === 32) {
    				// this is the spacebar
    				if (window.audio.paused) window.audio.play(); else window.audio.pause();

    				event.preventDefault();
    			}

    			return true; // treat all other keys normally;
    		});

    		/* END Global Vars */
    		canvasApp.canDrawVideo = true;

    		/* Get canvas properties */
    		var canvas = canvasApp.cv = typeof canvasApp.cv === "object" ? canvasApp.cv : cv;

    		Debugger.log("Using canvas '" + canvas.id + "'\n");
    		canvas.id = "layer1";
    		canvas.alt = "Interactive Audio Visualizer";

    		canvas.src = location.pathname.match(/(\.html)/) !== null
    		? "visualizer.png"
    		: "http://" + window.location.host + "/js-demos/visualizer.png";

    		canvas.width = canvas.width || "1024";
    		canvas.height = canvas.height || "576";
    		canvas.setAttribute("onmouseover", "canvasApp.mouseOver=true;");
    		canvas.setAttribute("onmouseout", "clearInterval(canvasApp.mouseEvent);canvasAppmouseOver=false;");
    		canvas.setAttribute("onmousemove", "canvasApp.colorChange(event);");
    		canvasApp.mouseOver = false;
    		canvasApp.mouseEvent = 0;
    		canvasApp.tx = 0;

    		canvasApp.strokeStyle = window["foreground01"]
    		? window["foreground01"].style.color
    		: "rgb(127,255,127)";

    		canvasApp.blockStyle = "hsla(150,100%,100%,1.0)";

    		canvasApp.colorChange = function (evt) {
    			clearInterval(this.mouseEvent);

    			var strokeR = window["foreground02"]
    				? window["foreground02"].style.color.match(/rgb\((\d+)/)[1]
    				: canvasApp.blockStyle && canvasApp.blockStyle.match(/rgb\((\d+)/) !== null
    					? canvasApp.blockStyle.match(/rgb\((\d+)/)[1]
    					: "hsl(180, 100%, 100%)",
    				strokeB = window["foreground03"]
    				? window["foreground03"].style.color.match(/rgb\(\d+,[\s|\d]+,([\s|\d]+)/)[1]
    				: canvasApp.blockStyle && canvasApp.blockStyle.match(/rgb\((\d+)/) !== null
    					? canvasApp.blockStyle.match(/rgb\((\d+)/)[1]
    					: "hsl(180, 100%, 100%)";

    			if (canvasApp.mouseOver) window.mouseEvent = setTimeout(
    				function (evt) {
    					var width = window.innerWidth; //		 	Debugger.log( canvasApp.strokeStyle );

    					//		 	Debugger.log( "width: "+ width +" mouse x: "+ evt.clientX );
    					if (!strokeR) {
    						strokeR = 127;
    						strokeB = 255;
    					} else {
    						strokeR = parseInt(strokeR / 2);
    						if (strokeR > 127) strokeR--;
    						if (strokeR < 1) strokeR++;
    						strokeB = parseInt(strokeB);
    						if (strokeB > 255) strokeB--;
    						if (strokeB < 1) strokeB++;
    					}

    					if (evt.clientX > width / 2) {
    						canvasApp.blockStyle = "rgb(" + strokeR++ + ",127," + strokeB++ + ")";
    					} else {
    						canvasApp.blockStyle = "rgb(" + strokeR-- + ",127," + strokeB-- + ")";
    					}
    				},
    				33,
    				evt
    			); //		 	Debugger.log( canvasApp.strokeStyle );

    			return true;
    		};

    		/* Insert loader just after the canvas */
    		if (document.getElementById("statBox") === null) canvas.parentNode.appendChild(statsBox);

    		/* Track fft amplitudes */
    		var amp1 = 0, amp2 = 0;

    		if (!fftReady) {
    			Debugger.log("Progress " + fftProgress.length + "%");
    			statsBox.innerHTML = statsBox.innerHTML.match(/.+\.\.\./)[0] + fftProgress.length + "%";

    			if (fftProgress < 0) {
    				for (var p = fftProgress, z = 10; p < z; p++) {
    					canvasApp.fftLoad(audioName, p, true);
    				}

    				return appDelay = setTimeout(canvasApp, 333, canvasApp.cv);
    			} else if (fftProgress.length > 9) {
    				fftReady = true;
    				statsBox.parentNode.removeChild(statsBox);

    				if (!!window.userTriggered) {
    					window.audio.play();
    					window.audio.currentTime = 0;
    					window.audio.muted = false;
    				}
    			} else {
    				return appDelay = setTimeout(canvasApp, 333, canvasApp.cv);
    			}
    		} else if (!audioReady) {
    			//Debugger.log( audioReady );
    			if (audioLoad === false) audio.load();

    			return appDelay = setTimeout(canvasApp, 333, canvasApp.cv);
    		} else clearTimeout(appDelay);

    		if (appStarted) return appStarted;
    		let time = 0;

    		/* Textual stuff */
    		var announcement = document.title;

    		var title = window.text_title
    		? window.text_title.innerHTML
    		: "Real~Currents";

    		//Debugger.log( title );
    		var copy = window.text_copy
    		? window.text_copy.innerHTML.split(/[\n|\r]/)
    		: "";

    		//Debugger.log( copy );
    		/* Audio visualization stuff */
    		var aidx = canvasApp.aidx = 0;

    		var aBuffer = canvasApp.aBuffer = [];
    		var fBuffer = canvasApp.fBuffer = [];
    		var vBuffer = canvasApp.vBuffer = [];
    		var w = canvas.width, h = canvas.height;
    		var hcorrect = h / 2;

    		if (sBuffer.length > 0) {
    			for (var i = 1, z = sBuffer.length; i < z; i++) {
    				var a = [], f = [], v = [];

    				if (typeof sBuffer[i] !== "object") {
    					Debugger.log("sBuffer has hole at " + i + "\n");

    					for (var p = 0, z = 11, buf = true; p < z; p++) {
    						if (p < 10 && !fftProgress[p]) {
    							buf = false;
    							canvasApp.fftLoad(audioName, p, true);
    						} else if (!buf) {
    							fftReady = false;
    							appStarted = false;
    							canvas.parentNode.appendChild(statsBox);
    							return appDelay = setTimeout(canvasApp, 333, canvasApp.cv);
    						}
    					}

    					continue;
    				}

    				for (var j = 0, n = sBuffer[i].length; j < n; j++) {
    					var afv = sBuffer[i][j].split(",");

    					/* Draw a curve of the amplitude data */
    					var curveh = -afv[0] * hcorrect + hcorrect;

    					a[j] = curveh;
    					f[j] = afv[1];
    					v[j] = afv[2];
    				}

    				aBuffer.push(a);
    				fBuffer.push(f);
    				vBuffer.push(v);
    			} //Debugger.log( "V*h="+ aBuffer[i-1]*canvas.height +" w="+ canvas.width +" h="+ canvas.height +" \n" );

    			canvasApp.fftLoad(audioName, 10);
    		} else for (var i = 0, z = 2000; i < z; i++) aBuffer.push(0.5); //Debugger.log( "Total frames: "+ (aBuffer.length) );

    		var aCanvas = document.createElement("canvas");
    		var bCanvas = document.createElement("canvas");
    		aCanvas.width = bCanvas.width = w >> 2; //aBuffer[0].length;
    		aCanvas.height = bCanvas.height = canvas.height;
    		var actx = canvasApp.actx = aCanvas.getContext("2d");
    		var bctx = canvasApp.bctx = bCanvas.getContext("2d");

    		/* Draw main function */
    		function draw(ctx, w, h) {
    			var actx = canvasApp.actx, bctx = canvasApp.bctx;

    			function drawPictures(context, pictures) {
    				var pidx = 0, change = 223;
    				if (aidx > change) pidx = parseInt(aidx / change) % pictures.length;

    				if (aidx < 10) {
    					context.globalCompositeOperation = "source-out";
    					context.globalAlpha = 0.05;
    				} else if (aidx % change < 3 || change - 3 < aidx % change) {
    					context.globalCompositeOperation = "source-out";
    					context.globalAlpha = 0.25;
    				} else if (aidx % change < 6 || change - 6 < aidx % change) {
    					context.globalCompositeOperation = "screen";
    					context.globalAlpha = 0.5;
    				} else {
    					context.globalCompositeOperation = "source-in";
    					context.globalAlpha = 1;
    				}

    				context.drawImage(pictures[pidx], canvas.width / 2 - pictures[pidx].width, -40, pictures[pidx].width * 2, pictures[pidx].height * 2);
    			}

    			function drawVideo(context, video) {
    				var change = 223;

    				if (aidx < 10) {
    					context.globalCompositeOperation = "source-out";
    					context.globalAlpha = 0.05;
    				} else if (aidx % change < 3 || change - 3 < aidx % change) {
    					context.globalCompositeOperation = "source-out";
    					context.globalAlpha = 0.25;
    				} else if (aidx % change < 6 || change - 6 < aidx % change) {
    					context.globalCompositeOperation = "screen";
    					context.globalAlpha = 0.5;
    				} else {
    					context.globalCompositeOperation = "source-in";
    					context.globalAlpha = 1;
    				}

    				/* Draw video input, if any */
    				if (window.canvasApp.canDrawVideo === true) try {
    					var cCanvas = document.createElement("canvas");
    					var cctx = cCanvas.getContext("2d");
    					cCanvas.width = canvas.width / 2;
    					cCanvas.height = canvas.height;
    					cctx.globalAlpha = 1;
    					var vx = cCanvas.width - video.videoWidth / 2;
    					var vw = 3 * (video.videoHeight / canvas.height * canvas.width) / 2;
    					var vh = cCanvas.height;
    					if (video != null && video.readyState > 2 && !video.paused) cctx.drawImage(video, vx / 2, 0, vw, vh);
    					ctx.globalAlpha = 1;
    					ctx.save();
    					ctx.drawImage(cCanvas, 0, 0, cCanvas.width, canvas.height);

    					//            setTimeout(function () {
    					ctx.translate(w, 0);

    					ctx.scale(-1, 1);
    					ctx.drawImage(cCanvas, 0, 0, cCanvas.width, canvas.height);
    					ctx.restore();
    				} catch(err) {
    					Debugger.on = true; //            }, 1);
    					Debugger.log("Failed to draw " + video.id + ": " + err.stack);
    					window.canvasApp.canDrawVideo = false;
    					Debugger.on = false;
    				}
    			} // Debugger.log( "time: "+ time );

    			ctx.globalCompositeOperation = "source-over";
    			ctx.globalAlpha = 1;

    			try {
    				if (time % 2) {
    					//Debugger.on = true;
    					bctx.clearRect(0, 0, w, h);

    					context.globalCompositeOperation = "source-over";
    					context.globalAlpha = 1;

    					if (window.pictures && window.pictures.children.length > 0) {
    						drawPictures(ctx, window.pictures.children);
    						ctx.globalCompositeOperation = "multiply";
    						ctx.globalAlpha = 0.05;
    					} else if (window.canvasApp.canDrawVideo === true) {
    						drawVideo(actx, audio);
    						ctx.globalCompositeOperation = "multiply";
    						ctx.globalAlpha = 0.5;
    					}

    					for (var o = 6; o > 0; o--) {
    						aidx = canvasApp.aidx = graphSamples(actx, audio, aBuffer, fBuffer, vBuffer, aidx, w, h, o);
    					}

    					ctx.globalAlpha = 1;
    					ctx.drawImage(aCanvas, 0, 0, w >> 1, h);
    					ctx.save();
    					ctx.translate(w, 0);
    					ctx.scale(-1, 1);
    					ctx.drawImage(aCanvas, 0, 0, w >> 1, h);
    					ctx.restore();
    					bctx.drawImage(aCanvas, 1, 2, (w >> 2) - 1, h - 4);
    					bctx.fillStyle = "rgba(0%,0%,0%,0.005)";
    					bctx.fillRect(0, 0, w, h);
    				} else {
    					actx.clearRect(0, 0, w, h);
    					actx.drawImage(bCanvas, 1, 2, (w >> 2) - 1, h - 4);

    					actx.fillStyle = window["background02"]
    					? window["background02"].style.color
    					: "rgba(0%,0%,0%,0.025)";

    					actx.fillRect(0, 0, w, h);
    				}
    			} catch(err) {
    				ctx.globalCompositeOperation = "source-over";
    				ctx.globalAlpha = 1;
    				Debugger.on = true;
    				Debugger.log("Failed to draw: " + err.stack);
    				window.canvasApp.canDrawVideo = false;
    				Debugger.on = false;
    			}

    			ctx.globalCompositeOperation = "source-over";
    			ctx.globalAlpha = 1;

    			/* Text */
    			ctx.lineWidth = 2;

    			ctx.fillStyle = window["foreground01"]
    			? window["foreground01"].style.color
    			: "hsl(180, 100%, 100%)";

    			ctx.strokeStyle = window["foreground02"]
    			? window["foreground02"].style.color
    			: "#fff";

    			//Debugger.log( "aBuffer index: "+ aidx );
    			if (aidx < 100) {
    				ctx.font = "bold " + aidx * 2 + "px Comfortaa";

    				if (aidx % 2 === 0) {
    					ctx.fillText(announcement, 320 - aidx * 4, h >> 1);
    				} else ctx.strokeText(announcement, 320 - aidx * 4, h >> 1);
    			} else if (aidx > 300) {
    				ctx.font = "bold 12px Verdana";
    				ctx.fillText(title, 64, 128);
    				if (aidx > 1500 && aidx < 3500) for (var i = 0, z = copy.length; i < z; i++) ctx.fillText(copy[i], w >> 1, 2500 - aidx + i * 20);
    			}

    			time++;

    			if (time == "undefined") {
    				time = 0;
    			}
    		} //Debugger.log( "time: "+ time );

    		/* Graph samples */
    		function graphSamples(ctx, audio, abuf, fbuf, vbuf, aidx, w, h, o) {
    			try {
    				if (abuf.length < 1) return aidx;
    				if (audio.paused) return aidx;
    				if (!(audio.readyState > 3)) return aidx;
    				var idx = Math.floor(audio.currentTime * 15.03) - 6;

    				if (!abuf[parseInt(idx + o)]) {
    					Debugger.log("abuf[" + idx + "] has not been recieved\n");
    					return aidx;
    				}

    				//Debugger.log( "aBuffer index: "+ idx );
    				/* Reset canvas ctx properties */
    				ctx.globalCompositeOperation = "source-over";

    				ctx.globalAlpha = 1;
    				ctx.font = "bold 10px Verdana";
    				var hcorrect = h / 2;

    				/* Plot each sample on line that moves from left to right
                     * until we reach the end of the screen or the end of the sample
                     */
    				if (idx < 1) {
    					ctx.moveTo(0, hcorrect);
    				} else ctx.moveTo(0, -(abuf[parseInt(idx + o)][0] * 2 * hcorrect) + hcorrect);

    				var verts = 6, hidx = parseInt(idx + o);
    				ctx.beginPath();

    				if (aidx % 6) canvasApp.blockStyle = window["foreground02"]
    				? window["foreground02"].style.color
    				: "hsl(180, 100%, 100%)"; else canvasApp.blockStyle = window["foreground03"]
    				? window["foreground03"].style.color
    				: "hsl(180, 100%, 100%)";

    				ctx.fillStyle = canvasApp.blockStyle.replace(/,\s?0\.\d+\)/, ",1.0)");

    				for (var i = 0, z = abuf[hidx].length, n = z; i < z; i++) {
    					/* Draw a curve of the amplitude data */
    					if (i > 0) {
    						ctx.strokeStyle = canvasApp.strokeStyle;
    						ctx.strokeWidth = canvasApp.strokeWidth;
    						ctx.quadraticCurveTo((i - 1) * 4, abuf[hidx][i] + o, i * 4, abuf[hidx][i] + o);
    					}

    					/* Draw bars for the eq levels (fft) data */
    					var barh = h - vbuf[hidx][i] * h;

    					amp2 = amp1;
    					amp1 = i === 3 && vbuf[hidx][i] > 0.05 ? vbuf[hidx][i] : amp1;
    					verts = amp2 !== amp1 ? parseInt(Math.random() * 10) : verts;

    					if (i <= n) {
    						var freq = Math.floor(fbuf[hidx][i]);

    						//ctx.fillStyle = "hsl("+ (200 - vbuf[parseInt(idx + o)][i]*180) +", 100%, 50%)";
    						ctx.fillStyle = canvasApp.blockStyle.replace(/,\s?0\.\d+\)/, ",1.0)").replace(/hsla\((150),\s?(100)\%,\s?(70)\%/, "hsla($1, " + vbuf[parseInt(idx + o)][i] * 50 + "%, $3%");

    						ctx.fillRect(i * 4, barh, 4, h);
    					}
    				}

    				polygon(ctx, verts, idx % w - (w >> 3), idx % h, parseFloat(amp2 + amp1) / 2 * w, idx, 0);
    				ctx.stroke();
    				return ++idx;
    			} catch(e) {
    				Debugger.log("graphSamples failed: " + e.message + " at frame " + aidx + "\n" + e.stack);
    				return aidx;
    			}
    		}

    		/* Draw polygons */
    		function polygon(c, n, x, y, r, angle, counterclockwise, order) {
    			var order = order || null;

    			if (order === ( "first")) {
    				c.beginPath();
    			}

    			var angle = angle || 0;
    			var counterclockwise = counterclockwise || false;

    			//Compute vertex position and begin a subpath there
    			c.moveTo(x + r * Math.sin(angle), y - r * Math.cos(angle));

    			var delta = 2 * Math.PI / n;

    			//For remaining verts,
    			for (var i = 1; i < n; i++) {
    				//compute angle of this vertex,
    				angle += counterclockwise ? -delta : delta;

    				//then compute position of vertex and add line
    				c.lineTo(x + r * Math.sin(angle), y - r * Math.cos(angle));
    			}

    			//Connect last vertex back to first
    			c.closePath();

    			if (order === ( "last")) {
    				//Fill the poly
    				c.fill();

    				//Outline the poly
    				c.stroke();
    			}
    		}

    		/* Begin draw loop */
    		try {
    			var context = canvas.getContext("2d");
    			time = 0;
    			drawLoop = setInterval(draw, 31, context, canvas.width, canvas.height);
    			Debugger.log("Draw loop started");
    			appStarted = true;
    			return appStarted;
    		} catch(e) {
    			Debugger.log("drawLoop failed to start");
    		}
    	}

    	canvasApp.fftLoad = function (aname, pr, single) {
    		//audio.load();
    		var part;

    		if (pr < 0) {
    			fftProgress = [];
    			part = fftProgress.length;
    		} else {
    			part = pr;
    		}

    		if (pr > 99 || part > 99) {
    			clearTimeout(fftLoader);
    			return true;
    		} else {
    			var sr = document.createElement("script");

    			sr.src = part < 10
    			? "https://s3-us-west-1.amazonaws.com/real-currents/js-demos/data/" + aname + "-0" + part + ".js"
    			: "https://s3-us-west-1.amazonaws.com/real-currents/js-demos/data/" + aname + "-" + part + ".js";

    			document.body.appendChild(sr);
    			if (part < 99 && !single) fftLoader = setTimeout(canvasApp.fftLoad, 99, aname, ++part);
    		}

    		return true;
    	};

    	canvasApp.updateFFT = function (prog) {
    		setTimeout(
    			function (prog) {
    				fftProgress[prog] = true;
    				Debugger.log(fftProgress[prog]);
    				var aidx = canvasApp.aidx;
    				var aBuffer = canvasApp.aBuffer;
    				var fBuffer = canvasApp.fBuffer;
    				var vBuffer = canvasApp.vBuffer;
    				var firstBreak = false;
    				var w = canvasApp.cv.width, h = canvasApp.cv.height;
    				var hcorrect = h / 2;
    				if (typeof sBuffer !== "object" || typeof aBuffer !== "object" || typeof fBuffer !== "object" || typeof vBuffer !== "object") return Debugger.log("canvas Buffers are undefined");
    				Debugger.log("Progress " + fftProgress.length + "%");
    				if (fftProgress.length < 10) return;

    				if (sBuffer.length > 0) {
    					var idx = aidx > aBuffer.length ? aidx : aBuffer.length - 1;

    					for (var i = 0, z = aBuffer.length; i < z; i++) {
    						if (!aBuffer[i]) {
    							idx = i;
    							break;
    						}
    					}

    					for (var i = idx, z = sBuffer.length; i < z; i++) {
    						var a = [], f = [], v = [];

    						if (typeof sBuffer[i] !== "object") {
    							if (!firstBreak) {
    								Debugger.log("sBuffer has hole at " + i + "\n");

    								for (var p in fftProgress) {
    									if (p < prog && !fftProgress[p]) canvasApp.fftLoad(audioName, p, true);
    								}

    								firstBreak = true;
    							}

    							continue;
    						}

    						for (var j = 0, n = sBuffer[i].length; j < n; j++) {
    							var afv = sBuffer[i][j].split(",");

    							/* Draw a curve of the amplitude data */
    							var curveh = -afv[0] * hcorrect + hcorrect;

    							a[j] = curveh;
    							f[j] = afv[1];
    							v[j] = afv[2];
    						}

    						aBuffer.push(a);
    						fBuffer.push(f);
    						vBuffer.push(v);
    					}

    					Debugger.log("Total frames: " + aBuffer.length);
    				}
    			},
    			66,
    			prog
    		);
    	};

    	onMount(() => {
    		const ctx = canvas.getContext("2d");
    		ctx.fillStyle = "#00f";
    		ctx.fillRect(0, 0, canvas.width, canvas.height);
    		ctx.fillStyle = "#fff";
    		ctx.font = "20px Arial";
    		ctx.fillText("2d Canvas works, too", 10, 100);
    		let frame = null;

    		(function loop() {
    			if (!!window.userTriggered) {
    				$$invalidate(0, canvas.width = 640, canvas);
    				$$invalidate(0, canvas.height = 320, canvas);

    				if (frame !== null) {
    					cancelAnimationFrame(frame);
    					canvasApp(canvas);
    				}
    			} else {
    				frame = requestAnimationFrame(loop);
    				const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);

    				for (let p = 0; p < imageData.data.length; p += 4) {
    					const i = p / 4;
    					const x = i % canvas.width;
    					const y = i / canvas.height >>> 0;
    					const t = window.performance.now();
    					const r = 64 + 128 * x / canvas.width + 64 * Math.sin(t / 1000);
    					const g = 64 + 128 * y / canvas.height + 64 * Math.cos(t / 1000);
    					const b = 128;
    					imageData.data[p + 0] = r;
    					imageData.data[p + 1] = g;
    					imageData.data[p + 2] = b;
    					imageData.data[p + 3] = 255;
    				}

    				ctx.putImageData(imageData, 0, 0);
    			}
    		})();

    		return () => {
    			cancelAnimationFrame(frame);
    		};
    	});

    	const writable_props = ["greeting"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("App", $$slots, []);

    	function canvas_1_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			canvas = $$value;
    			$$invalidate(0, canvas);
    		});
    	}

    	$$self.$set = $$props => {
    		if ("greeting" in $$props) $$invalidate(3, greeting = $$props.greeting);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		greeting,
    		pin,
    		view,
    		handleSubmit,
    		canvas,
    		width,
    		height,
    		statsBox,
    		canvasApp
    	});

    	$$self.$inject_state = $$props => {
    		if ("greeting" in $$props) $$invalidate(3, greeting = $$props.greeting);
    		if ("pin" in $$props) pin = $$props.pin;
    		if ("view" in $$props) view = $$props.view;
    		if ("canvas" in $$props) $$invalidate(0, canvas = $$props.canvas);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [canvas, width, height, greeting, canvas_1_binding];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, { greeting: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*greeting*/ ctx[3] === undefined && !("greeting" in props)) {
    			console.warn("<App> was created without expected prop 'greeting'");
    		}
    	}

    	get greeting() {
    		throw new Error("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set greeting(value) {
    		throw new Error("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const subscriber_queue = [];
    /**
     * Creates a `Readable` store that allows reading by subscription.
     * @param value initial value
     * @param {StartStopNotifier}start start and stop notifications for subscriptions
     */
    function readable(value, start) {
        return {
            subscribe: writable(value, start).subscribe,
        };
    }
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = [];
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (let i = 0; i < subscribers.length; i += 1) {
                        const s = subscribers[i];
                        s[1]();
                        subscriber_queue.push(s, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.push(subscriber);
            if (subscribers.length === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                const index = subscribers.indexOf(subscriber);
                if (index !== -1) {
                    subscribers.splice(index, 1);
                }
                if (subscribers.length === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    const RENDERER = {};
    const LAYER = {};
    const PARENT = {};
    const CAMERA = {};

    function get_scene() {
    	return getContext(RENDERER);
    }

    function get_layer() {
    	return getContext(LAYER);
    }

    function get_parent() {
    	return getContext(PARENT);
    }

    function get_camera() {
    	return getContext(CAMERA);
    }

    function set_layer(layer) {
    	setContext(LAYER, layer);
    }

    function set_parent(parent) {
    	setContext(PARENT, parent);
    }

    function remove_index(array, index) {
    	array[index] = array[array.length - 1];
    	array.pop();
    }

    function remove_item(array, item) {
    	const index = array.indexOf(item);
    	if (~index) remove_index(array, index);
    }

    function create_layer(index, invalidate) {
    	let child_index = 0;

    	const meshes = [];
    	const transparent_meshes = [];
    	const child_layers = [];

    	const layer = {
    		index: 0,
    		meshes,
    		transparent_meshes,
    		child_layers,
    		needs_sort: false,
    		needs_transparency_sort: true,
    		add_mesh: (mesh, existing) => {
    			if (existing) {
    				remove_item(mesh.transparent ? meshes : transparent_meshes, mesh);
    			}

    			if (mesh.transparent) {
    				transparent_meshes.push(mesh);
    				layer.needs_transparency_sort = true;
    			} else {
    				meshes.push(mesh);
    			}

    			onDestroy(() => {
    				remove_item(meshes, mesh);
    				remove_item(transparent_meshes, mesh);
    				invalidate();
    			});
    		},
    		add_child: (index = child_index++) => {
    			const child_layer = create_layer(index, invalidate);
    			child_layers.push(child_layer);

    			layer.needs_sort = true;

    			onDestroy(() => {
    				remove_item(child_layers, child_layer);

    				layer.needs_sort = true;
    				invalidate();
    			});

    			return child_layer;
    		}
    	};

    	return layer;
    }

    function process_color(color) {
    	if (typeof color === 'number') {
    		const r = (color & 0xff0000) >> 16;
    		const g = (color & 0x00ff00) >> 8;
    		const b = (color & 0x0000ff);

    		return new Float32Array([
    			r / 255,
    			g / 255,
    			b / 255
    		]);
    	}

    	return color;
    }

    function normalize(out, vector = out) {
    	let total = 0;
    	for (let i = 0; i < vector.length; i += 1) {
    		total += vector[i] * vector[i];
    	}

    	const mag = Math.sqrt(total);

    	out[0] = vector[0] / mag;
    	out[1] = vector[1] / mag;
    	out[2] = vector[2] / mag;

    	return out;
    }

    function create_worker(url, fn) {
    	const worker = new Worker(url);
    	const code = fn.toString().replace(/^(function.+?|.+?=>\s*)\{/g, '').slice(0, -1);

    	worker.postMessage(code);

    	return worker;
    }

    function memoize(fn) {
    	const cache = new Map();
    	return (...args) => {
    		const hash = JSON.stringify(args);
    		if (!cache.has(hash)) cache.set(hash, fn(...args));
    		return cache.get(hash);
    	};
    }

    /**
     * Common utilities
     * @module glMatrix
     */
    // Configuration Constants
    var EPSILON = 0.000001;
    var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
    var RANDOM = Math.random;
    if (!Math.hypot) Math.hypot = function () {
      var y = 0,
          i = arguments.length;

      while (i--) {
        y += arguments[i] * arguments[i];
      }

      return Math.sqrt(y);
    };

    /**
     * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.
     * @module mat4
     */

    /**
     * Creates a new identity mat4
     *
     * @returns {mat4} a new 4x4 matrix
     */

    function create() {
      var out = new ARRAY_TYPE(16);

      if (ARRAY_TYPE != Float32Array) {
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
      }

      out[0] = 1;
      out[5] = 1;
      out[10] = 1;
      out[15] = 1;
      return out;
    }
    /**
     * Creates a new mat4 initialized with values from an existing matrix
     *
     * @param {ReadonlyMat4} a matrix to clone
     * @returns {mat4} a new 4x4 matrix
     */

    function clone(a) {
      var out = new ARRAY_TYPE(16);
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      out[4] = a[4];
      out[5] = a[5];
      out[6] = a[6];
      out[7] = a[7];
      out[8] = a[8];
      out[9] = a[9];
      out[10] = a[10];
      out[11] = a[11];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
      return out;
    }
    /**
     * Copy the values from one mat4 to another
     *
     * @param {mat4} out the receiving matrix
     * @param {ReadonlyMat4} a the source matrix
     * @returns {mat4} out
     */

    function copy(out, a) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      out[4] = a[4];
      out[5] = a[5];
      out[6] = a[6];
      out[7] = a[7];
      out[8] = a[8];
      out[9] = a[9];
      out[10] = a[10];
      out[11] = a[11];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
      return out;
    }
    /**
     * Create a new mat4 with the given values
     *
     * @param {Number} m00 Component in column 0, row 0 position (index 0)
     * @param {Number} m01 Component in column 0, row 1 position (index 1)
     * @param {Number} m02 Component in column 0, row 2 position (index 2)
     * @param {Number} m03 Component in column 0, row 3 position (index 3)
     * @param {Number} m10 Component in column 1, row 0 position (index 4)
     * @param {Number} m11 Component in column 1, row 1 position (index 5)
     * @param {Number} m12 Component in column 1, row 2 position (index 6)
     * @param {Number} m13 Component in column 1, row 3 position (index 7)
     * @param {Number} m20 Component in column 2, row 0 position (index 8)
     * @param {Number} m21 Component in column 2, row 1 position (index 9)
     * @param {Number} m22 Component in column 2, row 2 position (index 10)
     * @param {Number} m23 Component in column 2, row 3 position (index 11)
     * @param {Number} m30 Component in column 3, row 0 position (index 12)
     * @param {Number} m31 Component in column 3, row 1 position (index 13)
     * @param {Number} m32 Component in column 3, row 2 position (index 14)
     * @param {Number} m33 Component in column 3, row 3 position (index 15)
     * @returns {mat4} A new mat4
     */

    function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
      var out = new ARRAY_TYPE(16);
      out[0] = m00;
      out[1] = m01;
      out[2] = m02;
      out[3] = m03;
      out[4] = m10;
      out[5] = m11;
      out[6] = m12;
      out[7] = m13;
      out[8] = m20;
      out[9] = m21;
      out[10] = m22;
      out[11] = m23;
      out[12] = m30;
      out[13] = m31;
      out[14] = m32;
      out[15] = m33;
      return out;
    }
    /**
     * Set the components of a mat4 to the given values
     *
     * @param {mat4} out the receiving matrix
     * @param {Number} m00 Component in column 0, row 0 position (index 0)
     * @param {Number} m01 Component in column 0, row 1 position (index 1)
     * @param {Number} m02 Component in column 0, row 2 position (index 2)
     * @param {Number} m03 Component in column 0, row 3 position (index 3)
     * @param {Number} m10 Component in column 1, row 0 position (index 4)
     * @param {Number} m11 Component in column 1, row 1 position (index 5)
     * @param {Number} m12 Component in column 1, row 2 position (index 6)
     * @param {Number} m13 Component in column 1, row 3 position (index 7)
     * @param {Number} m20 Component in column 2, row 0 position (index 8)
     * @param {Number} m21 Component in column 2, row 1 position (index 9)
     * @param {Number} m22 Component in column 2, row 2 position (index 10)
     * @param {Number} m23 Component in column 2, row 3 position (index 11)
     * @param {Number} m30 Component in column 3, row 0 position (index 12)
     * @param {Number} m31 Component in column 3, row 1 position (index 13)
     * @param {Number} m32 Component in column 3, row 2 position (index 14)
     * @param {Number} m33 Component in column 3, row 3 position (index 15)
     * @returns {mat4} out
     */

    function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
      out[0] = m00;
      out[1] = m01;
      out[2] = m02;
      out[3] = m03;
      out[4] = m10;
      out[5] = m11;
      out[6] = m12;
      out[7] = m13;
      out[8] = m20;
      out[9] = m21;
      out[10] = m22;
      out[11] = m23;
      out[12] = m30;
      out[13] = m31;
      out[14] = m32;
      out[15] = m33;
      return out;
    }
    /**
     * Set a mat4 to the identity matrix
     *
     * @param {mat4} out the receiving matrix
     * @returns {mat4} out
     */

    function identity(out) {
      out[0] = 1;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[5] = 1;
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[10] = 1;
      out[11] = 0;
      out[12] = 0;
      out[13] = 0;
      out[14] = 0;
      out[15] = 1;
      return out;
    }
    /**
     * Transpose the values of a mat4
     *
     * @param {mat4} out the receiving matrix
     * @param {ReadonlyMat4} a the source matrix
     * @returns {mat4} out
     */

    function transpose(out, a) {
      // If we are transposing ourselves we can skip a few steps but have to cache some values
      if (out === a) {
        var a01 = a[1],
            a02 = a[2],
            a03 = a[3];
        var a12 = a[6],
            a13 = a[7];
        var a23 = a[11];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a01;
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a02;
        out[9] = a12;
        out[11] = a[14];
        out[12] = a03;
        out[13] = a13;
        out[14] = a23;
      } else {
        out[0] = a[0];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a[1];
        out[5] = a[5];
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a[2];
        out[9] = a[6];
        out[10] = a[10];
        out[11] = a[14];
        out[12] = a[3];
        out[13] = a[7];
        out[14] = a[11];
        out[15] = a[15];
      }

      return out;
    }
    /**
     * Inverts a mat4
     *
     * @param {mat4} out the receiving matrix
     * @param {ReadonlyMat4} a the source matrix
     * @returns {mat4} out
     */

    function invert(out, a) {
      var a00 = a[0],
          a01 = a[1],
          a02 = a[2],
          a03 = a[3];
      var a10 = a[4],
          a11 = a[5],
          a12 = a[6],
          a13 = a[7];
      var a20 = a[8],
          a21 = a[9],
          a22 = a[10],
          a23 = a[11];
      var a30 = a[12],
          a31 = a[13],
          a32 = a[14],
          a33 = a[15];
      var b00 = a00 * a11 - a01 * a10;
      var b01 = a00 * a12 - a02 * a10;
      var b02 = a00 * a13 - a03 * a10;
      var b03 = a01 * a12 - a02 * a11;
      var b04 = a01 * a13 - a03 * a11;
      var b05 = a02 * a13 - a03 * a12;
      var b06 = a20 * a31 - a21 * a30;
      var b07 = a20 * a32 - a22 * a30;
      var b08 = a20 * a33 - a23 * a30;
      var b09 = a21 * a32 - a22 * a31;
      var b10 = a21 * a33 - a23 * a31;
      var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

      var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

      if (!det) {
        return null;
      }

      det = 1.0 / det;
      out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
      out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
      out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
      out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
      out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
      out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
      out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
      out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
      out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
      out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
      out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
      out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
      out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
      out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
      out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
      out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
      return out;
    }
    /**
     * Calculates the adjugate of a mat4
     *
     * @param {mat4} out the receiving matrix
     * @param {ReadonlyMat4} a the source matrix
     * @returns {mat4} out
     */

    function adjoint(out, a) {
      var a00 = a[0],
          a01 = a[1],
          a02 = a[2],
          a03 = a[3];
      var a10 = a[4],
          a11 = a[5],
          a12 = a[6],
          a13 = a[7];
      var a20 = a[8],
          a21 = a[9],
          a22 = a[10],
          a23 = a[11];
      var a30 = a[12],
          a31 = a[13],
          a32 = a[14],
          a33 = a[15];
      out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
      out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
      out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
      out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
      out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
      out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
      out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
      out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
      out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
      out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
      out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
      out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
      out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
      out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
      out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
      out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
      return out;
    }
    /**
     * Calculates the determinant of a mat4
     *
     * @param {ReadonlyMat4} a the source matrix
     * @returns {Number} determinant of a
     */

    function determinant(a) {
      var a00 = a[0],
          a01 = a[1],
          a02 = a[2],
          a03 = a[3];
      var a10 = a[4],
          a11 = a[5],
          a12 = a[6],
          a13 = a[7];
      var a20 = a[8],
          a21 = a[9],
          a22 = a[10],
          a23 = a[11];
      var a30 = a[12],
          a31 = a[13],
          a32 = a[14],
          a33 = a[15];
      var b00 = a00 * a11 - a01 * a10;
      var b01 = a00 * a12 - a02 * a10;
      var b02 = a00 * a13 - a03 * a10;
      var b03 = a01 * a12 - a02 * a11;
      var b04 = a01 * a13 - a03 * a11;
      var b05 = a02 * a13 - a03 * a12;
      var b06 = a20 * a31 - a21 * a30;
      var b07 = a20 * a32 - a22 * a30;
      var b08 = a20 * a33 - a23 * a30;
      var b09 = a21 * a32 - a22 * a31;
      var b10 = a21 * a33 - a23 * a31;
      var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

      return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    }
    /**
     * Multiplies two mat4s
     *
     * @param {mat4} out the receiving matrix
     * @param {ReadonlyMat4} a the first operand
     * @param {ReadonlyMat4} b the second operand
     * @returns {mat4} out
     */

    function multiply(out, a, b) {
      var a00 = a[0],
          a01 = a[1],
          a02 = a[2],
          a03 = a[3];
      var a10 = a[4],
          a11 = a[5],
          a12 = a[6],
          a13 = a[7];
      var a20 = a[8],
          a21 = a[9],
          a22 = a[10],
          a23 = a[11];
      var a30 = a[12],
          a31 = a[13],
          a32 = a[14],
          a33 = a[15]; // Cache only the current line of the second matrix

      var b0 = b[0],
          b1 = b[1],
          b2 = b[2],
          b3 = b[3];
      out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[4];
      b1 = b[5];
      b2 = b[6];
      b3 = b[7];
      out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[8];
      b1 = b[9];
      b2 = b[10];
      b3 = b[11];
      out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[12];
      b1 = b[13];
      b2 = b[14];
      b3 = b[15];
      out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      return out;
    }
    /**
     * Translate a mat4 by the given vector
     *
     * @param {mat4} out the receiving matrix
     * @param {ReadonlyMat4} a the matrix to translate
     * @param {ReadonlyVec3} v vector to translate by
     * @returns {mat4} out
     */

    function translate(out, a, v) {
      var x = v[0],
          y = v[1],
          z = v[2];
      var a00, a01, a02, a03;
      var a10, a11, a12, a13;
      var a20, a21, a22, a23;

      if (a === out) {
        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
      } else {
        a00 = a[0];
        a01 = a[1];
        a02 = a[2];
        a03 = a[3];
        a10 = a[4];
        a11 = a[5];
        a12 = a[6];
        a13 = a[7];
        a20 = a[8];
        a21 = a[9];
        a22 = a[10];
        a23 = a[11];
        out[0] = a00;
        out[1] = a01;
        out[2] = a02;
        out[3] = a03;
        out[4] = a10;
        out[5] = a11;
        out[6] = a12;
        out[7] = a13;
        out[8] = a20;
        out[9] = a21;
        out[10] = a22;
        out[11] = a23;
        out[12] = a00 * x + a10 * y + a20 * z + a[12];
        out[13] = a01 * x + a11 * y + a21 * z + a[13];
        out[14] = a02 * x + a12 * y + a22 * z + a[14];
        out[15] = a03 * x + a13 * y + a23 * z + a[15];
      }

      return out;
    }
    /**
     * Scales the mat4 by the dimensions in the given vec3 not using vectorization
     *
     * @param {mat4} out the receiving matrix
     * @param {ReadonlyMat4} a the matrix to scale
     * @param {ReadonlyVec3} v the vec3 to scale the matrix by
     * @returns {mat4} out
     **/

    function scale(out, a, v) {
      var x = v[0],
          y = v[1],
          z = v[2];
      out[0] = a[0] * x;
      out[1] = a[1] * x;
      out[2] = a[2] * x;
      out[3] = a[3] * x;
      out[4] = a[4] * y;
      out[5] = a[5] * y;
      out[6] = a[6] * y;
      out[7] = a[7] * y;
      out[8] = a[8] * z;
      out[9] = a[9] * z;
      out[10] = a[10] * z;
      out[11] = a[11] * z;
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
      return out;
    }
    /**
     * Rotates a mat4 by the given angle around the given axis
     *
     * @param {mat4} out the receiving matrix
     * @param {ReadonlyMat4} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @param {ReadonlyVec3} axis the axis to rotate around
     * @returns {mat4} out
     */

    function rotate(out, a, rad, axis) {
      var x = axis[0],
          y = axis[1],
          z = axis[2];
      var len = Math.hypot(x, y, z);
      var s, c, t;
      var a00, a01, a02, a03;
      var a10, a11, a12, a13;
      var a20, a21, a22, a23;
      var b00, b01, b02;
      var b10, b11, b12;
      var b20, b21, b22;

      if (len < EPSILON) {
        return null;
      }

      len = 1 / len;
      x *= len;
      y *= len;
      z *= len;
      s = Math.sin(rad);
      c = Math.cos(rad);
      t = 1 - c;
      a00 = a[0];
      a01 = a[1];
      a02 = a[2];
      a03 = a[3];
      a10 = a[4];
      a11 = a[5];
      a12 = a[6];
      a13 = a[7];
      a20 = a[8];
      a21 = a[9];
      a22 = a[10];
      a23 = a[11]; // Construct the elements of the rotation matrix

      b00 = x * x * t + c;
      b01 = y * x * t + z * s;
      b02 = z * x * t - y * s;
      b10 = x * y * t - z * s;
      b11 = y * y * t + c;
      b12 = z * y * t + x * s;
      b20 = x * z * t + y * s;
      b21 = y * z * t - x * s;
      b22 = z * z * t + c; // Perform rotation-specific matrix multiplication

      out[0] = a00 * b00 + a10 * b01 + a20 * b02;
      out[1] = a01 * b00 + a11 * b01 + a21 * b02;
      out[2] = a02 * b00 + a12 * b01 + a22 * b02;
      out[3] = a03 * b00 + a13 * b01 + a23 * b02;
      out[4] = a00 * b10 + a10 * b11 + a20 * b12;
      out[5] = a01 * b10 + a11 * b11 + a21 * b12;
      out[6] = a02 * b10 + a12 * b11 + a22 * b12;
      out[7] = a03 * b10 + a13 * b11 + a23 * b12;
      out[8] = a00 * b20 + a10 * b21 + a20 * b22;
      out[9] = a01 * b20 + a11 * b21 + a21 * b22;
      out[10] = a02 * b20 + a12 * b21 + a22 * b22;
      out[11] = a03 * b20 + a13 * b21 + a23 * b22;

      if (a !== out) {
        // If the source and destination differ, copy the unchanged last row
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
      }

      return out;
    }
    /**
     * Rotates a matrix by the given angle around the X axis
     *
     * @param {mat4} out the receiving matrix
     * @param {ReadonlyMat4} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */

    function rotateX(out, a, rad) {
      var s = Math.sin(rad);
      var c = Math.cos(rad);
      var a10 = a[4];
      var a11 = a[5];
      var a12 = a[6];
      var a13 = a[7];
      var a20 = a[8];
      var a21 = a[9];
      var a22 = a[10];
      var a23 = a[11];

      if (a !== out) {
        // If the source and destination differ, copy the unchanged rows
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
      } // Perform axis-specific matrix multiplication


      out[4] = a10 * c + a20 * s;
      out[5] = a11 * c + a21 * s;
      out[6] = a12 * c + a22 * s;
      out[7] = a13 * c + a23 * s;
      out[8] = a20 * c - a10 * s;
      out[9] = a21 * c - a11 * s;
      out[10] = a22 * c - a12 * s;
      out[11] = a23 * c - a13 * s;
      return out;
    }
    /**
     * Rotates a matrix by the given angle around the Y axis
     *
     * @param {mat4} out the receiving matrix
     * @param {ReadonlyMat4} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */

    function rotateY(out, a, rad) {
      var s = Math.sin(rad);
      var c = Math.cos(rad);
      var a00 = a[0];
      var a01 = a[1];
      var a02 = a[2];
      var a03 = a[3];
      var a20 = a[8];
      var a21 = a[9];
      var a22 = a[10];
      var a23 = a[11];

      if (a !== out) {
        // If the source and destination differ, copy the unchanged rows
        out[4] = a[4];
        out[5] = a[5];
        out[6] = a[6];
        out[7] = a[7];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
      } // Perform axis-specific matrix multiplication


      out[0] = a00 * c - a20 * s;
      out[1] = a01 * c - a21 * s;
      out[2] = a02 * c - a22 * s;
      out[3] = a03 * c - a23 * s;
      out[8] = a00 * s + a20 * c;
      out[9] = a01 * s + a21 * c;
      out[10] = a02 * s + a22 * c;
      out[11] = a03 * s + a23 * c;
      return out;
    }
    /**
     * Rotates a matrix by the given angle around the Z axis
     *
     * @param {mat4} out the receiving matrix
     * @param {ReadonlyMat4} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */

    function rotateZ(out, a, rad) {
      var s = Math.sin(rad);
      var c = Math.cos(rad);
      var a00 = a[0];
      var a01 = a[1];
      var a02 = a[2];
      var a03 = a[3];
      var a10 = a[4];
      var a11 = a[5];
      var a12 = a[6];
      var a13 = a[7];

      if (a !== out) {
        // If the source and destination differ, copy the unchanged last row
        out[8] = a[8];
        out[9] = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
      } // Perform axis-specific matrix multiplication


      out[0] = a00 * c + a10 * s;
      out[1] = a01 * c + a11 * s;
      out[2] = a02 * c + a12 * s;
      out[3] = a03 * c + a13 * s;
      out[4] = a10 * c - a00 * s;
      out[5] = a11 * c - a01 * s;
      out[6] = a12 * c - a02 * s;
      out[7] = a13 * c - a03 * s;
      return out;
    }
    /**
     * Creates a matrix from a vector translation
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.translate(dest, dest, vec);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {ReadonlyVec3} v Translation vector
     * @returns {mat4} out
     */

    function fromTranslation(out, v) {
      out[0] = 1;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[5] = 1;
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[10] = 1;
      out[11] = 0;
      out[12] = v[0];
      out[13] = v[1];
      out[14] = v[2];
      out[15] = 1;
      return out;
    }
    /**
     * Creates a matrix from a vector scaling
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.scale(dest, dest, vec);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {ReadonlyVec3} v Scaling vector
     * @returns {mat4} out
     */

    function fromScaling(out, v) {
      out[0] = v[0];
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[5] = v[1];
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[10] = v[2];
      out[11] = 0;
      out[12] = 0;
      out[13] = 0;
      out[14] = 0;
      out[15] = 1;
      return out;
    }
    /**
     * Creates a matrix from a given angle around a given axis
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.rotate(dest, dest, rad, axis);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @param {ReadonlyVec3} axis the axis to rotate around
     * @returns {mat4} out
     */

    function fromRotation(out, rad, axis) {
      var x = axis[0],
          y = axis[1],
          z = axis[2];
      var len = Math.hypot(x, y, z);
      var s, c, t;

      if (len < EPSILON) {
        return null;
      }

      len = 1 / len;
      x *= len;
      y *= len;
      z *= len;
      s = Math.sin(rad);
      c = Math.cos(rad);
      t = 1 - c; // Perform rotation-specific matrix multiplication

      out[0] = x * x * t + c;
      out[1] = y * x * t + z * s;
      out[2] = z * x * t - y * s;
      out[3] = 0;
      out[4] = x * y * t - z * s;
      out[5] = y * y * t + c;
      out[6] = z * y * t + x * s;
      out[7] = 0;
      out[8] = x * z * t + y * s;
      out[9] = y * z * t - x * s;
      out[10] = z * z * t + c;
      out[11] = 0;
      out[12] = 0;
      out[13] = 0;
      out[14] = 0;
      out[15] = 1;
      return out;
    }
    /**
     * Creates a matrix from the given angle around the X axis
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.rotateX(dest, dest, rad);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */

    function fromXRotation(out, rad) {
      var s = Math.sin(rad);
      var c = Math.cos(rad); // Perform axis-specific matrix multiplication

      out[0] = 1;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[5] = c;
      out[6] = s;
      out[7] = 0;
      out[8] = 0;
      out[9] = -s;
      out[10] = c;
      out[11] = 0;
      out[12] = 0;
      out[13] = 0;
      out[14] = 0;
      out[15] = 1;
      return out;
    }
    /**
     * Creates a matrix from the given angle around the Y axis
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.rotateY(dest, dest, rad);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */

    function fromYRotation(out, rad) {
      var s = Math.sin(rad);
      var c = Math.cos(rad); // Perform axis-specific matrix multiplication

      out[0] = c;
      out[1] = 0;
      out[2] = -s;
      out[3] = 0;
      out[4] = 0;
      out[5] = 1;
      out[6] = 0;
      out[7] = 0;
      out[8] = s;
      out[9] = 0;
      out[10] = c;
      out[11] = 0;
      out[12] = 0;
      out[13] = 0;
      out[14] = 0;
      out[15] = 1;
      return out;
    }
    /**
     * Creates a matrix from the given angle around the Z axis
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.rotateZ(dest, dest, rad);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */

    function fromZRotation(out, rad) {
      var s = Math.sin(rad);
      var c = Math.cos(rad); // Perform axis-specific matrix multiplication

      out[0] = c;
      out[1] = s;
      out[2] = 0;
      out[3] = 0;
      out[4] = -s;
      out[5] = c;
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[10] = 1;
      out[11] = 0;
      out[12] = 0;
      out[13] = 0;
      out[14] = 0;
      out[15] = 1;
      return out;
    }
    /**
     * Creates a matrix from a quaternion rotation and vector translation
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.translate(dest, vec);
     *     let quatMat = mat4.create();
     *     quat4.toMat4(quat, quatMat);
     *     mat4.multiply(dest, quatMat);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {quat4} q Rotation quaternion
     * @param {ReadonlyVec3} v Translation vector
     * @returns {mat4} out
     */

    function fromRotationTranslation(out, q, v) {
      // Quaternion math
      var x = q[0],
          y = q[1],
          z = q[2],
          w = q[3];
      var x2 = x + x;
      var y2 = y + y;
      var z2 = z + z;
      var xx = x * x2;
      var xy = x * y2;
      var xz = x * z2;
      var yy = y * y2;
      var yz = y * z2;
      var zz = z * z2;
      var wx = w * x2;
      var wy = w * y2;
      var wz = w * z2;
      out[0] = 1 - (yy + zz);
      out[1] = xy + wz;
      out[2] = xz - wy;
      out[3] = 0;
      out[4] = xy - wz;
      out[5] = 1 - (xx + zz);
      out[6] = yz + wx;
      out[7] = 0;
      out[8] = xz + wy;
      out[9] = yz - wx;
      out[10] = 1 - (xx + yy);
      out[11] = 0;
      out[12] = v[0];
      out[13] = v[1];
      out[14] = v[2];
      out[15] = 1;
      return out;
    }
    /**
     * Creates a new mat4 from a dual quat.
     *
     * @param {mat4} out Matrix
     * @param {ReadonlyQuat2} a Dual Quaternion
     * @returns {mat4} mat4 receiving operation result
     */

    function fromQuat2(out, a) {
      var translation = new ARRAY_TYPE(3);
      var bx = -a[0],
          by = -a[1],
          bz = -a[2],
          bw = a[3],
          ax = a[4],
          ay = a[5],
          az = a[6],
          aw = a[7];
      var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense

      if (magnitude > 0) {
        translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
        translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
        translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
      } else {
        translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
        translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
        translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
      }

      fromRotationTranslation(out, a, translation);
      return out;
    }
    /**
     * Returns the translation vector component of a transformation
     *  matrix. If a matrix is built with fromRotationTranslation,
     *  the returned vector will be the same as the translation vector
     *  originally supplied.
     * @param  {vec3} out Vector to receive translation component
     * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)
     * @return {vec3} out
     */

    function getTranslation(out, mat) {
      out[0] = mat[12];
      out[1] = mat[13];
      out[2] = mat[14];
      return out;
    }
    /**
     * Returns the scaling factor component of a transformation
     *  matrix. If a matrix is built with fromRotationTranslationScale
     *  with a normalized Quaternion paramter, the returned vector will be
     *  the same as the scaling vector
     *  originally supplied.
     * @param  {vec3} out Vector to receive scaling factor component
     * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)
     * @return {vec3} out
     */

    function getScaling(out, mat) {
      var m11 = mat[0];
      var m12 = mat[1];
      var m13 = mat[2];
      var m21 = mat[4];
      var m22 = mat[5];
      var m23 = mat[6];
      var m31 = mat[8];
      var m32 = mat[9];
      var m33 = mat[10];
      out[0] = Math.hypot(m11, m12, m13);
      out[1] = Math.hypot(m21, m22, m23);
      out[2] = Math.hypot(m31, m32, m33);
      return out;
    }
    /**
     * Returns a quaternion representing the rotational component
     *  of a transformation matrix. If a matrix is built with
     *  fromRotationTranslation, the returned quaternion will be the
     *  same as the quaternion originally supplied.
     * @param {quat} out Quaternion to receive the rotation component
     * @param {ReadonlyMat4} mat Matrix to be decomposed (input)
     * @return {quat} out
     */

    function getRotation(out, mat) {
      var scaling = new ARRAY_TYPE(3);
      getScaling(scaling, mat);
      var is1 = 1 / scaling[0];
      var is2 = 1 / scaling[1];
      var is3 = 1 / scaling[2];
      var sm11 = mat[0] * is1;
      var sm12 = mat[1] * is2;
      var sm13 = mat[2] * is3;
      var sm21 = mat[4] * is1;
      var sm22 = mat[5] * is2;
      var sm23 = mat[6] * is3;
      var sm31 = mat[8] * is1;
      var sm32 = mat[9] * is2;
      var sm33 = mat[10] * is3;
      var trace = sm11 + sm22 + sm33;
      var S = 0;

      if (trace > 0) {
        S = Math.sqrt(trace + 1.0) * 2;
        out[3] = 0.25 * S;
        out[0] = (sm23 - sm32) / S;
        out[1] = (sm31 - sm13) / S;
        out[2] = (sm12 - sm21) / S;
      } else if (sm11 > sm22 && sm11 > sm33) {
        S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;
        out[3] = (sm23 - sm32) / S;
        out[0] = 0.25 * S;
        out[1] = (sm12 + sm21) / S;
        out[2] = (sm31 + sm13) / S;
      } else if (sm22 > sm33) {
        S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;
        out[3] = (sm31 - sm13) / S;
        out[0] = (sm12 + sm21) / S;
        out[1] = 0.25 * S;
        out[2] = (sm23 + sm32) / S;
      } else {
        S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;
        out[3] = (sm12 - sm21) / S;
        out[0] = (sm31 + sm13) / S;
        out[1] = (sm23 + sm32) / S;
        out[2] = 0.25 * S;
      }

      return out;
    }
    /**
     * Creates a matrix from a quaternion rotation, vector translation and vector scale
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.translate(dest, vec);
     *     let quatMat = mat4.create();
     *     quat4.toMat4(quat, quatMat);
     *     mat4.multiply(dest, quatMat);
     *     mat4.scale(dest, scale)
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {quat4} q Rotation quaternion
     * @param {ReadonlyVec3} v Translation vector
     * @param {ReadonlyVec3} s Scaling vector
     * @returns {mat4} out
     */

    function fromRotationTranslationScale(out, q, v, s) {
      // Quaternion math
      var x = q[0],
          y = q[1],
          z = q[2],
          w = q[3];
      var x2 = x + x;
      var y2 = y + y;
      var z2 = z + z;
      var xx = x * x2;
      var xy = x * y2;
      var xz = x * z2;
      var yy = y * y2;
      var yz = y * z2;
      var zz = z * z2;
      var wx = w * x2;
      var wy = w * y2;
      var wz = w * z2;
      var sx = s[0];
      var sy = s[1];
      var sz = s[2];
      out[0] = (1 - (yy + zz)) * sx;
      out[1] = (xy + wz) * sx;
      out[2] = (xz - wy) * sx;
      out[3] = 0;
      out[4] = (xy - wz) * sy;
      out[5] = (1 - (xx + zz)) * sy;
      out[6] = (yz + wx) * sy;
      out[7] = 0;
      out[8] = (xz + wy) * sz;
      out[9] = (yz - wx) * sz;
      out[10] = (1 - (xx + yy)) * sz;
      out[11] = 0;
      out[12] = v[0];
      out[13] = v[1];
      out[14] = v[2];
      out[15] = 1;
      return out;
    }
    /**
     * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.translate(dest, vec);
     *     mat4.translate(dest, origin);
     *     let quatMat = mat4.create();
     *     quat4.toMat4(quat, quatMat);
     *     mat4.multiply(dest, quatMat);
     *     mat4.scale(dest, scale)
     *     mat4.translate(dest, negativeOrigin);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {quat4} q Rotation quaternion
     * @param {ReadonlyVec3} v Translation vector
     * @param {ReadonlyVec3} s Scaling vector
     * @param {ReadonlyVec3} o The origin vector around which to scale and rotate
     * @returns {mat4} out
     */

    function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
      // Quaternion math
      var x = q[0],
          y = q[1],
          z = q[2],
          w = q[3];
      var x2 = x + x;
      var y2 = y + y;
      var z2 = z + z;
      var xx = x * x2;
      var xy = x * y2;
      var xz = x * z2;
      var yy = y * y2;
      var yz = y * z2;
      var zz = z * z2;
      var wx = w * x2;
      var wy = w * y2;
      var wz = w * z2;
      var sx = s[0];
      var sy = s[1];
      var sz = s[2];
      var ox = o[0];
      var oy = o[1];
      var oz = o[2];
      var out0 = (1 - (yy + zz)) * sx;
      var out1 = (xy + wz) * sx;
      var out2 = (xz - wy) * sx;
      var out4 = (xy - wz) * sy;
      var out5 = (1 - (xx + zz)) * sy;
      var out6 = (yz + wx) * sy;
      var out8 = (xz + wy) * sz;
      var out9 = (yz - wx) * sz;
      var out10 = (1 - (xx + yy)) * sz;
      out[0] = out0;
      out[1] = out1;
      out[2] = out2;
      out[3] = 0;
      out[4] = out4;
      out[5] = out5;
      out[6] = out6;
      out[7] = 0;
      out[8] = out8;
      out[9] = out9;
      out[10] = out10;
      out[11] = 0;
      out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
      out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
      out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
      out[15] = 1;
      return out;
    }
    /**
     * Calculates a 4x4 matrix from the given quaternion
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {ReadonlyQuat} q Quaternion to create matrix from
     *
     * @returns {mat4} out
     */

    function fromQuat(out, q) {
      var x = q[0],
          y = q[1],
          z = q[2],
          w = q[3];
      var x2 = x + x;
      var y2 = y + y;
      var z2 = z + z;
      var xx = x * x2;
      var yx = y * x2;
      var yy = y * y2;
      var zx = z * x2;
      var zy = z * y2;
      var zz = z * z2;
      var wx = w * x2;
      var wy = w * y2;
      var wz = w * z2;
      out[0] = 1 - yy - zz;
      out[1] = yx + wz;
      out[2] = zx - wy;
      out[3] = 0;
      out[4] = yx - wz;
      out[5] = 1 - xx - zz;
      out[6] = zy + wx;
      out[7] = 0;
      out[8] = zx + wy;
      out[9] = zy - wx;
      out[10] = 1 - xx - yy;
      out[11] = 0;
      out[12] = 0;
      out[13] = 0;
      out[14] = 0;
      out[15] = 1;
      return out;
    }
    /**
     * Generates a frustum matrix with the given bounds
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {Number} left Left bound of the frustum
     * @param {Number} right Right bound of the frustum
     * @param {Number} bottom Bottom bound of the frustum
     * @param {Number} top Top bound of the frustum
     * @param {Number} near Near bound of the frustum
     * @param {Number} far Far bound of the frustum
     * @returns {mat4} out
     */

    function frustum(out, left, right, bottom, top, near, far) {
      var rl = 1 / (right - left);
      var tb = 1 / (top - bottom);
      var nf = 1 / (near - far);
      out[0] = near * 2 * rl;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[5] = near * 2 * tb;
      out[6] = 0;
      out[7] = 0;
      out[8] = (right + left) * rl;
      out[9] = (top + bottom) * tb;
      out[10] = (far + near) * nf;
      out[11] = -1;
      out[12] = 0;
      out[13] = 0;
      out[14] = far * near * 2 * nf;
      out[15] = 0;
      return out;
    }
    /**
     * Generates a perspective projection matrix with the given bounds.
     * Passing null/undefined/no value for far will generate infinite projection matrix.
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {number} fovy Vertical field of view in radians
     * @param {number} aspect Aspect ratio. typically viewport width/height
     * @param {number} near Near bound of the frustum
     * @param {number} far Far bound of the frustum, can be null or Infinity
     * @returns {mat4} out
     */

    function perspective(out, fovy, aspect, near, far) {
      var f = 1.0 / Math.tan(fovy / 2),
          nf;
      out[0] = f / aspect;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[5] = f;
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[11] = -1;
      out[12] = 0;
      out[13] = 0;
      out[15] = 0;

      if (far != null && far !== Infinity) {
        nf = 1 / (near - far);
        out[10] = (far + near) * nf;
        out[14] = 2 * far * near * nf;
      } else {
        out[10] = -1;
        out[14] = -2 * near;
      }

      return out;
    }
    /**
     * Generates a perspective projection matrix with the given field of view.
     * This is primarily useful for generating projection matrices to be used
     * with the still experiemental WebVR API.
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
     * @param {number} near Near bound of the frustum
     * @param {number} far Far bound of the frustum
     * @returns {mat4} out
     */

    function perspectiveFromFieldOfView(out, fov, near, far) {
      var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);
      var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);
      var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);
      var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);
      var xScale = 2.0 / (leftTan + rightTan);
      var yScale = 2.0 / (upTan + downTan);
      out[0] = xScale;
      out[1] = 0.0;
      out[2] = 0.0;
      out[3] = 0.0;
      out[4] = 0.0;
      out[5] = yScale;
      out[6] = 0.0;
      out[7] = 0.0;
      out[8] = -((leftTan - rightTan) * xScale * 0.5);
      out[9] = (upTan - downTan) * yScale * 0.5;
      out[10] = far / (near - far);
      out[11] = -1.0;
      out[12] = 0.0;
      out[13] = 0.0;
      out[14] = far * near / (near - far);
      out[15] = 0.0;
      return out;
    }
    /**
     * Generates a orthogonal projection matrix with the given bounds
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {number} left Left bound of the frustum
     * @param {number} right Right bound of the frustum
     * @param {number} bottom Bottom bound of the frustum
     * @param {number} top Top bound of the frustum
     * @param {number} near Near bound of the frustum
     * @param {number} far Far bound of the frustum
     * @returns {mat4} out
     */

    function ortho(out, left, right, bottom, top, near, far) {
      var lr = 1 / (left - right);
      var bt = 1 / (bottom - top);
      var nf = 1 / (near - far);
      out[0] = -2 * lr;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[5] = -2 * bt;
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[10] = 2 * nf;
      out[11] = 0;
      out[12] = (left + right) * lr;
      out[13] = (top + bottom) * bt;
      out[14] = (far + near) * nf;
      out[15] = 1;
      return out;
    }
    /**
     * Generates a look-at matrix with the given eye position, focal point, and up axis.
     * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {ReadonlyVec3} eye Position of the viewer
     * @param {ReadonlyVec3} center Point the viewer is looking at
     * @param {ReadonlyVec3} up vec3 pointing up
     * @returns {mat4} out
     */

    function lookAt(out, eye, center, up) {
      var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
      var eyex = eye[0];
      var eyey = eye[1];
      var eyez = eye[2];
      var upx = up[0];
      var upy = up[1];
      var upz = up[2];
      var centerx = center[0];
      var centery = center[1];
      var centerz = center[2];

      if (Math.abs(eyex - centerx) < EPSILON && Math.abs(eyey - centery) < EPSILON && Math.abs(eyez - centerz) < EPSILON) {
        return identity(out);
      }

      z0 = eyex - centerx;
      z1 = eyey - centery;
      z2 = eyez - centerz;
      len = 1 / Math.hypot(z0, z1, z2);
      z0 *= len;
      z1 *= len;
      z2 *= len;
      x0 = upy * z2 - upz * z1;
      x1 = upz * z0 - upx * z2;
      x2 = upx * z1 - upy * z0;
      len = Math.hypot(x0, x1, x2);

      if (!len) {
        x0 = 0;
        x1 = 0;
        x2 = 0;
      } else {
        len = 1 / len;
        x0 *= len;
        x1 *= len;
        x2 *= len;
      }

      y0 = z1 * x2 - z2 * x1;
      y1 = z2 * x0 - z0 * x2;
      y2 = z0 * x1 - z1 * x0;
      len = Math.hypot(y0, y1, y2);

      if (!len) {
        y0 = 0;
        y1 = 0;
        y2 = 0;
      } else {
        len = 1 / len;
        y0 *= len;
        y1 *= len;
        y2 *= len;
      }

      out[0] = x0;
      out[1] = y0;
      out[2] = z0;
      out[3] = 0;
      out[4] = x1;
      out[5] = y1;
      out[6] = z1;
      out[7] = 0;
      out[8] = x2;
      out[9] = y2;
      out[10] = z2;
      out[11] = 0;
      out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
      out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
      out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
      out[15] = 1;
      return out;
    }
    /**
     * Generates a matrix that makes something look at something else.
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {ReadonlyVec3} eye Position of the viewer
     * @param {ReadonlyVec3} center Point the viewer is looking at
     * @param {ReadonlyVec3} up vec3 pointing up
     * @returns {mat4} out
     */

    function targetTo(out, eye, target, up) {
      var eyex = eye[0],
          eyey = eye[1],
          eyez = eye[2],
          upx = up[0],
          upy = up[1],
          upz = up[2];
      var z0 = eyex - target[0],
          z1 = eyey - target[1],
          z2 = eyez - target[2];
      var len = z0 * z0 + z1 * z1 + z2 * z2;

      if (len > 0) {
        len = 1 / Math.sqrt(len);
        z0 *= len;
        z1 *= len;
        z2 *= len;
      }

      var x0 = upy * z2 - upz * z1,
          x1 = upz * z0 - upx * z2,
          x2 = upx * z1 - upy * z0;
      len = x0 * x0 + x1 * x1 + x2 * x2;

      if (len > 0) {
        len = 1 / Math.sqrt(len);
        x0 *= len;
        x1 *= len;
        x2 *= len;
      }

      out[0] = x0;
      out[1] = x1;
      out[2] = x2;
      out[3] = 0;
      out[4] = z1 * x2 - z2 * x1;
      out[5] = z2 * x0 - z0 * x2;
      out[6] = z0 * x1 - z1 * x0;
      out[7] = 0;
      out[8] = z0;
      out[9] = z1;
      out[10] = z2;
      out[11] = 0;
      out[12] = eyex;
      out[13] = eyey;
      out[14] = eyez;
      out[15] = 1;
      return out;
    }
    /**
     * Returns a string representation of a mat4
     *
     * @param {ReadonlyMat4} a matrix to represent as a string
     * @returns {String} string representation of the matrix
     */

    function str(a) {
      return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")";
    }
    /**
     * Returns Frobenius norm of a mat4
     *
     * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of
     * @returns {Number} Frobenius norm
     */

    function frob(a) {
      return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
    }
    /**
     * Adds two mat4's
     *
     * @param {mat4} out the receiving matrix
     * @param {ReadonlyMat4} a the first operand
     * @param {ReadonlyMat4} b the second operand
     * @returns {mat4} out
     */

    function add(out, a, b) {
      out[0] = a[0] + b[0];
      out[1] = a[1] + b[1];
      out[2] = a[2] + b[2];
      out[3] = a[3] + b[3];
      out[4] = a[4] + b[4];
      out[5] = a[5] + b[5];
      out[6] = a[6] + b[6];
      out[7] = a[7] + b[7];
      out[8] = a[8] + b[8];
      out[9] = a[9] + b[9];
      out[10] = a[10] + b[10];
      out[11] = a[11] + b[11];
      out[12] = a[12] + b[12];
      out[13] = a[13] + b[13];
      out[14] = a[14] + b[14];
      out[15] = a[15] + b[15];
      return out;
    }
    /**
     * Subtracts matrix b from matrix a
     *
     * @param {mat4} out the receiving matrix
     * @param {ReadonlyMat4} a the first operand
     * @param {ReadonlyMat4} b the second operand
     * @returns {mat4} out
     */

    function subtract(out, a, b) {
      out[0] = a[0] - b[0];
      out[1] = a[1] - b[1];
      out[2] = a[2] - b[2];
      out[3] = a[3] - b[3];
      out[4] = a[4] - b[4];
      out[5] = a[5] - b[5];
      out[6] = a[6] - b[6];
      out[7] = a[7] - b[7];
      out[8] = a[8] - b[8];
      out[9] = a[9] - b[9];
      out[10] = a[10] - b[10];
      out[11] = a[11] - b[11];
      out[12] = a[12] - b[12];
      out[13] = a[13] - b[13];
      out[14] = a[14] - b[14];
      out[15] = a[15] - b[15];
      return out;
    }
    /**
     * Multiply each element of the matrix by a scalar.
     *
     * @param {mat4} out the receiving matrix
     * @param {ReadonlyMat4} a the matrix to scale
     * @param {Number} b amount to scale the matrix's elements by
     * @returns {mat4} out
     */

    function multiplyScalar(out, a, b) {
      out[0] = a[0] * b;
      out[1] = a[1] * b;
      out[2] = a[2] * b;
      out[3] = a[3] * b;
      out[4] = a[4] * b;
      out[5] = a[5] * b;
      out[6] = a[6] * b;
      out[7] = a[7] * b;
      out[8] = a[8] * b;
      out[9] = a[9] * b;
      out[10] = a[10] * b;
      out[11] = a[11] * b;
      out[12] = a[12] * b;
      out[13] = a[13] * b;
      out[14] = a[14] * b;
      out[15] = a[15] * b;
      return out;
    }
    /**
     * Adds two mat4's after multiplying each element of the second operand by a scalar value.
     *
     * @param {mat4} out the receiving vector
     * @param {ReadonlyMat4} a the first operand
     * @param {ReadonlyMat4} b the second operand
     * @param {Number} scale the amount to scale b's elements by before adding
     * @returns {mat4} out
     */

    function multiplyScalarAndAdd(out, a, b, scale) {
      out[0] = a[0] + b[0] * scale;
      out[1] = a[1] + b[1] * scale;
      out[2] = a[2] + b[2] * scale;
      out[3] = a[3] + b[3] * scale;
      out[4] = a[4] + b[4] * scale;
      out[5] = a[5] + b[5] * scale;
      out[6] = a[6] + b[6] * scale;
      out[7] = a[7] + b[7] * scale;
      out[8] = a[8] + b[8] * scale;
      out[9] = a[9] + b[9] * scale;
      out[10] = a[10] + b[10] * scale;
      out[11] = a[11] + b[11] * scale;
      out[12] = a[12] + b[12] * scale;
      out[13] = a[13] + b[13] * scale;
      out[14] = a[14] + b[14] * scale;
      out[15] = a[15] + b[15] * scale;
      return out;
    }
    /**
     * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
     *
     * @param {ReadonlyMat4} a The first matrix.
     * @param {ReadonlyMat4} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */

    function exactEquals(a, b) {
      return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
    }
    /**
     * Returns whether or not the matrices have approximately the same elements in the same position.
     *
     * @param {ReadonlyMat4} a The first matrix.
     * @param {ReadonlyMat4} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */

    function equals(a, b) {
      var a0 = a[0],
          a1 = a[1],
          a2 = a[2],
          a3 = a[3];
      var a4 = a[4],
          a5 = a[5],
          a6 = a[6],
          a7 = a[7];
      var a8 = a[8],
          a9 = a[9],
          a10 = a[10],
          a11 = a[11];
      var a12 = a[12],
          a13 = a[13],
          a14 = a[14],
          a15 = a[15];
      var b0 = b[0],
          b1 = b[1],
          b2 = b[2],
          b3 = b[3];
      var b4 = b[4],
          b5 = b[5],
          b6 = b[6],
          b7 = b[7];
      var b8 = b[8],
          b9 = b[9],
          b10 = b[10],
          b11 = b[11];
      var b12 = b[12],
          b13 = b[13],
          b14 = b[14],
          b15 = b[15];
      return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));
    }
    /**
     * Alias for {@link mat4.multiply}
     * @function
     */

    var mul = multiply;
    /**
     * Alias for {@link mat4.subtract}
     * @function
     */

    var sub = subtract;

    var mat4 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        create: create,
        clone: clone,
        copy: copy,
        fromValues: fromValues,
        set: set,
        identity: identity,
        transpose: transpose,
        invert: invert,
        adjoint: adjoint,
        determinant: determinant,
        multiply: multiply,
        translate: translate,
        scale: scale,
        rotate: rotate,
        rotateX: rotateX,
        rotateY: rotateY,
        rotateZ: rotateZ,
        fromTranslation: fromTranslation,
        fromScaling: fromScaling,
        fromRotation: fromRotation,
        fromXRotation: fromXRotation,
        fromYRotation: fromYRotation,
        fromZRotation: fromZRotation,
        fromRotationTranslation: fromRotationTranslation,
        fromQuat2: fromQuat2,
        getTranslation: getTranslation,
        getScaling: getScaling,
        getRotation: getRotation,
        fromRotationTranslationScale: fromRotationTranslationScale,
        fromRotationTranslationScaleOrigin: fromRotationTranslationScaleOrigin,
        fromQuat: fromQuat,
        frustum: frustum,
        perspective: perspective,
        perspectiveFromFieldOfView: perspectiveFromFieldOfView,
        ortho: ortho,
        lookAt: lookAt,
        targetTo: targetTo,
        str: str,
        frob: frob,
        add: add,
        subtract: subtract,
        multiplyScalar: multiplyScalar,
        multiplyScalarAndAdd: multiplyScalarAndAdd,
        exactEquals: exactEquals,
        equals: equals,
        mul: mul,
        sub: sub
    });

    /**
     * 3 Dimensional Vector
     * @module vec3
     */

    /**
     * Creates a new, empty vec3
     *
     * @returns {vec3} a new 3D vector
     */

    function create$1() {
      var out = new ARRAY_TYPE(3);

      if (ARRAY_TYPE != Float32Array) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
      }

      return out;
    }
    /**
     * Creates a new vec3 initialized with values from an existing vector
     *
     * @param {ReadonlyVec3} a vector to clone
     * @returns {vec3} a new 3D vector
     */

    function clone$1(a) {
      var out = new ARRAY_TYPE(3);
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      return out;
    }
    /**
     * Calculates the length of a vec3
     *
     * @param {ReadonlyVec3} a vector to calculate length of
     * @returns {Number} length of a
     */

    function length(a) {
      var x = a[0];
      var y = a[1];
      var z = a[2];
      return Math.hypot(x, y, z);
    }
    /**
     * Creates a new vec3 initialized with the given values
     *
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @returns {vec3} a new 3D vector
     */

    function fromValues$1(x, y, z) {
      var out = new ARRAY_TYPE(3);
      out[0] = x;
      out[1] = y;
      out[2] = z;
      return out;
    }
    /**
     * Copy the values from one vec3 to another
     *
     * @param {vec3} out the receiving vector
     * @param {ReadonlyVec3} a the source vector
     * @returns {vec3} out
     */

    function copy$1(out, a) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      return out;
    }
    /**
     * Set the components of a vec3 to the given values
     *
     * @param {vec3} out the receiving vector
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @returns {vec3} out
     */

    function set$1(out, x, y, z) {
      out[0] = x;
      out[1] = y;
      out[2] = z;
      return out;
    }
    /**
     * Adds two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {ReadonlyVec3} a the first operand
     * @param {ReadonlyVec3} b the second operand
     * @returns {vec3} out
     */

    function add$1(out, a, b) {
      out[0] = a[0] + b[0];
      out[1] = a[1] + b[1];
      out[2] = a[2] + b[2];
      return out;
    }
    /**
     * Subtracts vector b from vector a
     *
     * @param {vec3} out the receiving vector
     * @param {ReadonlyVec3} a the first operand
     * @param {ReadonlyVec3} b the second operand
     * @returns {vec3} out
     */

    function subtract$1(out, a, b) {
      out[0] = a[0] - b[0];
      out[1] = a[1] - b[1];
      out[2] = a[2] - b[2];
      return out;
    }
    /**
     * Multiplies two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {ReadonlyVec3} a the first operand
     * @param {ReadonlyVec3} b the second operand
     * @returns {vec3} out
     */

    function multiply$1(out, a, b) {
      out[0] = a[0] * b[0];
      out[1] = a[1] * b[1];
      out[2] = a[2] * b[2];
      return out;
    }
    /**
     * Divides two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {ReadonlyVec3} a the first operand
     * @param {ReadonlyVec3} b the second operand
     * @returns {vec3} out
     */

    function divide(out, a, b) {
      out[0] = a[0] / b[0];
      out[1] = a[1] / b[1];
      out[2] = a[2] / b[2];
      return out;
    }
    /**
     * Math.ceil the components of a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {ReadonlyVec3} a vector to ceil
     * @returns {vec3} out
     */

    function ceil(out, a) {
      out[0] = Math.ceil(a[0]);
      out[1] = Math.ceil(a[1]);
      out[2] = Math.ceil(a[2]);
      return out;
    }
    /**
     * Math.floor the components of a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {ReadonlyVec3} a vector to floor
     * @returns {vec3} out
     */

    function floor(out, a) {
      out[0] = Math.floor(a[0]);
      out[1] = Math.floor(a[1]);
      out[2] = Math.floor(a[2]);
      return out;
    }
    /**
     * Returns the minimum of two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {ReadonlyVec3} a the first operand
     * @param {ReadonlyVec3} b the second operand
     * @returns {vec3} out
     */

    function min(out, a, b) {
      out[0] = Math.min(a[0], b[0]);
      out[1] = Math.min(a[1], b[1]);
      out[2] = Math.min(a[2], b[2]);
      return out;
    }
    /**
     * Returns the maximum of two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {ReadonlyVec3} a the first operand
     * @param {ReadonlyVec3} b the second operand
     * @returns {vec3} out
     */

    function max(out, a, b) {
      out[0] = Math.max(a[0], b[0]);
      out[1] = Math.max(a[1], b[1]);
      out[2] = Math.max(a[2], b[2]);
      return out;
    }
    /**
     * Math.round the components of a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {ReadonlyVec3} a vector to round
     * @returns {vec3} out
     */

    function round(out, a) {
      out[0] = Math.round(a[0]);
      out[1] = Math.round(a[1]);
      out[2] = Math.round(a[2]);
      return out;
    }
    /**
     * Scales a vec3 by a scalar number
     *
     * @param {vec3} out the receiving vector
     * @param {ReadonlyVec3} a the vector to scale
     * @param {Number} b amount to scale the vector by
     * @returns {vec3} out
     */

    function scale$1(out, a, b) {
      out[0] = a[0] * b;
      out[1] = a[1] * b;
      out[2] = a[2] * b;
      return out;
    }
    /**
     * Adds two vec3's after scaling the second operand by a scalar value
     *
     * @param {vec3} out the receiving vector
     * @param {ReadonlyVec3} a the first operand
     * @param {ReadonlyVec3} b the second operand
     * @param {Number} scale the amount to scale b by before adding
     * @returns {vec3} out
     */

    function scaleAndAdd(out, a, b, scale) {
      out[0] = a[0] + b[0] * scale;
      out[1] = a[1] + b[1] * scale;
      out[2] = a[2] + b[2] * scale;
      return out;
    }
    /**
     * Calculates the euclidian distance between two vec3's
     *
     * @param {ReadonlyVec3} a the first operand
     * @param {ReadonlyVec3} b the second operand
     * @returns {Number} distance between a and b
     */

    function distance(a, b) {
      var x = b[0] - a[0];
      var y = b[1] - a[1];
      var z = b[2] - a[2];
      return Math.hypot(x, y, z);
    }
    /**
     * Calculates the squared euclidian distance between two vec3's
     *
     * @param {ReadonlyVec3} a the first operand
     * @param {ReadonlyVec3} b the second operand
     * @returns {Number} squared distance between a and b
     */

    function squaredDistance(a, b) {
      var x = b[0] - a[0];
      var y = b[1] - a[1];
      var z = b[2] - a[2];
      return x * x + y * y + z * z;
    }
    /**
     * Calculates the squared length of a vec3
     *
     * @param {ReadonlyVec3} a vector to calculate squared length of
     * @returns {Number} squared length of a
     */

    function squaredLength(a) {
      var x = a[0];
      var y = a[1];
      var z = a[2];
      return x * x + y * y + z * z;
    }
    /**
     * Negates the components of a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {ReadonlyVec3} a vector to negate
     * @returns {vec3} out
     */

    function negate(out, a) {
      out[0] = -a[0];
      out[1] = -a[1];
      out[2] = -a[2];
      return out;
    }
    /**
     * Returns the inverse of the components of a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {ReadonlyVec3} a vector to invert
     * @returns {vec3} out
     */

    function inverse(out, a) {
      out[0] = 1.0 / a[0];
      out[1] = 1.0 / a[1];
      out[2] = 1.0 / a[2];
      return out;
    }
    /**
     * Normalize a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {ReadonlyVec3} a vector to normalize
     * @returns {vec3} out
     */

    function normalize$1(out, a) {
      var x = a[0];
      var y = a[1];
      var z = a[2];
      var len = x * x + y * y + z * z;

      if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len);
      }

      out[0] = a[0] * len;
      out[1] = a[1] * len;
      out[2] = a[2] * len;
      return out;
    }
    /**
     * Calculates the dot product of two vec3's
     *
     * @param {ReadonlyVec3} a the first operand
     * @param {ReadonlyVec3} b the second operand
     * @returns {Number} dot product of a and b
     */

    function dot(a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    }
    /**
     * Computes the cross product of two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {ReadonlyVec3} a the first operand
     * @param {ReadonlyVec3} b the second operand
     * @returns {vec3} out
     */

    function cross(out, a, b) {
      var ax = a[0],
          ay = a[1],
          az = a[2];
      var bx = b[0],
          by = b[1],
          bz = b[2];
      out[0] = ay * bz - az * by;
      out[1] = az * bx - ax * bz;
      out[2] = ax * by - ay * bx;
      return out;
    }
    /**
     * Performs a linear interpolation between two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {ReadonlyVec3} a the first operand
     * @param {ReadonlyVec3} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {vec3} out
     */

    function lerp(out, a, b, t) {
      var ax = a[0];
      var ay = a[1];
      var az = a[2];
      out[0] = ax + t * (b[0] - ax);
      out[1] = ay + t * (b[1] - ay);
      out[2] = az + t * (b[2] - az);
      return out;
    }
    /**
     * Performs a hermite interpolation with two control points
     *
     * @param {vec3} out the receiving vector
     * @param {ReadonlyVec3} a the first operand
     * @param {ReadonlyVec3} b the second operand
     * @param {ReadonlyVec3} c the third operand
     * @param {ReadonlyVec3} d the fourth operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {vec3} out
     */

    function hermite(out, a, b, c, d, t) {
      var factorTimes2 = t * t;
      var factor1 = factorTimes2 * (2 * t - 3) + 1;
      var factor2 = factorTimes2 * (t - 2) + t;
      var factor3 = factorTimes2 * (t - 1);
      var factor4 = factorTimes2 * (3 - 2 * t);
      out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
      out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
      out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
      return out;
    }
    /**
     * Performs a bezier interpolation with two control points
     *
     * @param {vec3} out the receiving vector
     * @param {ReadonlyVec3} a the first operand
     * @param {ReadonlyVec3} b the second operand
     * @param {ReadonlyVec3} c the third operand
     * @param {ReadonlyVec3} d the fourth operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {vec3} out
     */

    function bezier(out, a, b, c, d, t) {
      var inverseFactor = 1 - t;
      var inverseFactorTimesTwo = inverseFactor * inverseFactor;
      var factorTimes2 = t * t;
      var factor1 = inverseFactorTimesTwo * inverseFactor;
      var factor2 = 3 * t * inverseFactorTimesTwo;
      var factor3 = 3 * factorTimes2 * inverseFactor;
      var factor4 = factorTimes2 * t;
      out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
      out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
      out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
      return out;
    }
    /**
     * Generates a random vector with the given scale
     *
     * @param {vec3} out the receiving vector
     * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
     * @returns {vec3} out
     */

    function random(out, scale) {
      scale = scale || 1.0;
      var r = RANDOM() * 2.0 * Math.PI;
      var z = RANDOM() * 2.0 - 1.0;
      var zScale = Math.sqrt(1.0 - z * z) * scale;
      out[0] = Math.cos(r) * zScale;
      out[1] = Math.sin(r) * zScale;
      out[2] = z * scale;
      return out;
    }
    /**
     * Transforms the vec3 with a mat4.
     * 4th vector component is implicitly '1'
     *
     * @param {vec3} out the receiving vector
     * @param {ReadonlyVec3} a the vector to transform
     * @param {ReadonlyMat4} m matrix to transform with
     * @returns {vec3} out
     */

    function transformMat4(out, a, m) {
      var x = a[0],
          y = a[1],
          z = a[2];
      var w = m[3] * x + m[7] * y + m[11] * z + m[15];
      w = w || 1.0;
      out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
      out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
      out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
      return out;
    }
    /**
     * Transforms the vec3 with a mat3.
     *
     * @param {vec3} out the receiving vector
     * @param {ReadonlyVec3} a the vector to transform
     * @param {ReadonlyMat3} m the 3x3 matrix to transform with
     * @returns {vec3} out
     */

    function transformMat3(out, a, m) {
      var x = a[0],
          y = a[1],
          z = a[2];
      out[0] = x * m[0] + y * m[3] + z * m[6];
      out[1] = x * m[1] + y * m[4] + z * m[7];
      out[2] = x * m[2] + y * m[5] + z * m[8];
      return out;
    }
    /**
     * Transforms the vec3 with a quat
     * Can also be used for dual quaternions. (Multiply it with the real part)
     *
     * @param {vec3} out the receiving vector
     * @param {ReadonlyVec3} a the vector to transform
     * @param {ReadonlyQuat} q quaternion to transform with
     * @returns {vec3} out
     */

    function transformQuat(out, a, q) {
      // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed
      var qx = q[0],
          qy = q[1],
          qz = q[2],
          qw = q[3];
      var x = a[0],
          y = a[1],
          z = a[2]; // var qvec = [qx, qy, qz];
      // var uv = vec3.cross([], qvec, a);

      var uvx = qy * z - qz * y,
          uvy = qz * x - qx * z,
          uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);

      var uuvx = qy * uvz - qz * uvy,
          uuvy = qz * uvx - qx * uvz,
          uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);

      var w2 = qw * 2;
      uvx *= w2;
      uvy *= w2;
      uvz *= w2; // vec3.scale(uuv, uuv, 2);

      uuvx *= 2;
      uuvy *= 2;
      uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));

      out[0] = x + uvx + uuvx;
      out[1] = y + uvy + uuvy;
      out[2] = z + uvz + uuvz;
      return out;
    }
    /**
     * Rotate a 3D vector around the x-axis
     * @param {vec3} out The receiving vec3
     * @param {ReadonlyVec3} a The vec3 point to rotate
     * @param {ReadonlyVec3} b The origin of the rotation
     * @param {Number} rad The angle of rotation in radians
     * @returns {vec3} out
     */

    function rotateX$1(out, a, b, rad) {
      var p = [],
          r = []; //Translate point to the origin

      p[0] = a[0] - b[0];
      p[1] = a[1] - b[1];
      p[2] = a[2] - b[2]; //perform rotation

      r[0] = p[0];
      r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);
      r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position

      out[0] = r[0] + b[0];
      out[1] = r[1] + b[1];
      out[2] = r[2] + b[2];
      return out;
    }
    /**
     * Rotate a 3D vector around the y-axis
     * @param {vec3} out The receiving vec3
     * @param {ReadonlyVec3} a The vec3 point to rotate
     * @param {ReadonlyVec3} b The origin of the rotation
     * @param {Number} rad The angle of rotation in radians
     * @returns {vec3} out
     */

    function rotateY$1(out, a, b, rad) {
      var p = [],
          r = []; //Translate point to the origin

      p[0] = a[0] - b[0];
      p[1] = a[1] - b[1];
      p[2] = a[2] - b[2]; //perform rotation

      r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);
      r[1] = p[1];
      r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position

      out[0] = r[0] + b[0];
      out[1] = r[1] + b[1];
      out[2] = r[2] + b[2];
      return out;
    }
    /**
     * Rotate a 3D vector around the z-axis
     * @param {vec3} out The receiving vec3
     * @param {ReadonlyVec3} a The vec3 point to rotate
     * @param {ReadonlyVec3} b The origin of the rotation
     * @param {Number} rad The angle of rotation in radians
     * @returns {vec3} out
     */

    function rotateZ$1(out, a, b, rad) {
      var p = [],
          r = []; //Translate point to the origin

      p[0] = a[0] - b[0];
      p[1] = a[1] - b[1];
      p[2] = a[2] - b[2]; //perform rotation

      r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);
      r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);
      r[2] = p[2]; //translate to correct position

      out[0] = r[0] + b[0];
      out[1] = r[1] + b[1];
      out[2] = r[2] + b[2];
      return out;
    }
    /**
     * Get the angle between two 3D vectors
     * @param {ReadonlyVec3} a The first operand
     * @param {ReadonlyVec3} b The second operand
     * @returns {Number} The angle in radians
     */

    function angle(a, b) {
      var ax = a[0],
          ay = a[1],
          az = a[2],
          bx = b[0],
          by = b[1],
          bz = b[2],
          mag1 = Math.sqrt(ax * ax + ay * ay + az * az),
          mag2 = Math.sqrt(bx * bx + by * by + bz * bz),
          mag = mag1 * mag2,
          cosine = mag && dot(a, b) / mag;
      return Math.acos(Math.min(Math.max(cosine, -1), 1));
    }
    /**
     * Set the components of a vec3 to zero
     *
     * @param {vec3} out the receiving vector
     * @returns {vec3} out
     */

    function zero(out) {
      out[0] = 0.0;
      out[1] = 0.0;
      out[2] = 0.0;
      return out;
    }
    /**
     * Returns a string representation of a vector
     *
     * @param {ReadonlyVec3} a vector to represent as a string
     * @returns {String} string representation of the vector
     */

    function str$1(a) {
      return "vec3(" + a[0] + ", " + a[1] + ", " + a[2] + ")";
    }
    /**
     * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
     *
     * @param {ReadonlyVec3} a The first vector.
     * @param {ReadonlyVec3} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */

    function exactEquals$1(a, b) {
      return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
    }
    /**
     * Returns whether or not the vectors have approximately the same elements in the same position.
     *
     * @param {ReadonlyVec3} a The first vector.
     * @param {ReadonlyVec3} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */

    function equals$1(a, b) {
      var a0 = a[0],
          a1 = a[1],
          a2 = a[2];
      var b0 = b[0],
          b1 = b[1],
          b2 = b[2];
      return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));
    }
    /**
     * Alias for {@link vec3.subtract}
     * @function
     */

    var sub$1 = subtract$1;
    /**
     * Alias for {@link vec3.multiply}
     * @function
     */

    var mul$1 = multiply$1;
    /**
     * Alias for {@link vec3.divide}
     * @function
     */

    var div = divide;
    /**
     * Alias for {@link vec3.distance}
     * @function
     */

    var dist = distance;
    /**
     * Alias for {@link vec3.squaredDistance}
     * @function
     */

    var sqrDist = squaredDistance;
    /**
     * Alias for {@link vec3.length}
     * @function
     */

    var len = length;
    /**
     * Alias for {@link vec3.squaredLength}
     * @function
     */

    var sqrLen = squaredLength;
    /**
     * Perform some operation over an array of vec3s.
     *
     * @param {Array} a the array of vectors to iterate over
     * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
     * @param {Number} offset Number of elements to skip at the beginning of the array
     * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
     * @param {Function} fn Function to call for each vector in the array
     * @param {Object} [arg] additional argument to pass to fn
     * @returns {Array} a
     * @function
     */

    var forEach = function () {
      var vec = create$1();
      return function (a, stride, offset, count, fn, arg) {
        var i, l;

        if (!stride) {
          stride = 3;
        }

        if (!offset) {
          offset = 0;
        }

        if (count) {
          l = Math.min(count * stride + offset, a.length);
        } else {
          l = a.length;
        }

        for (i = offset; i < l; i += stride) {
          vec[0] = a[i];
          vec[1] = a[i + 1];
          vec[2] = a[i + 2];
          fn(vec, vec, arg);
          a[i] = vec[0];
          a[i + 1] = vec[1];
          a[i + 2] = vec[2];
        }

        return a;
      };
    }();

    var vec3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        create: create$1,
        clone: clone$1,
        length: length,
        fromValues: fromValues$1,
        copy: copy$1,
        set: set$1,
        add: add$1,
        subtract: subtract$1,
        multiply: multiply$1,
        divide: divide,
        ceil: ceil,
        floor: floor,
        min: min,
        max: max,
        round: round,
        scale: scale$1,
        scaleAndAdd: scaleAndAdd,
        distance: distance,
        squaredDistance: squaredDistance,
        squaredLength: squaredLength,
        negate: negate,
        inverse: inverse,
        normalize: normalize$1,
        dot: dot,
        cross: cross,
        lerp: lerp,
        hermite: hermite,
        bezier: bezier,
        random: random,
        transformMat4: transformMat4,
        transformMat3: transformMat3,
        transformQuat: transformQuat,
        rotateX: rotateX$1,
        rotateY: rotateY$1,
        rotateZ: rotateZ$1,
        angle: angle,
        zero: zero,
        str: str$1,
        exactEquals: exactEquals$1,
        equals: equals$1,
        sub: sub$1,
        mul: mul$1,
        div: div,
        dist: dist,
        sqrDist: sqrDist,
        len: len,
        sqrLen: sqrLen,
        forEach: forEach
    });

    /* node_modules/@sveltejs/gl/scene/Scene.svelte generated by Svelte v3.24.0 */

    const { Error: Error_1 } = globals;
    const file$1 = "node_modules/@sveltejs/gl/scene/Scene.svelte";

    const get_default_slot_changes = dirty => ({
    	width: dirty[0] & /*$width*/ 8,
    	height: dirty[0] & /*$height*/ 16
    });

    const get_default_slot_context = ctx => ({
    	width: /*$width*/ ctx[3],
    	height: /*$height*/ ctx[4]
    });

    // (444:1) {#if gl}
    function create_if_block(ctx) {
    	let current;
    	const default_slot_template = /*$$slots*/ ctx[13].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], get_default_slot_context);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && dirty[0] & /*$$scope, $width, $height*/ 4120) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[12], dirty, get_default_slot_changes, get_default_slot_context);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(444:1) {#if gl}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let div;
    	let canvas_1;
    	let t;
    	let div_resize_listener;
    	let current;
    	let if_block = /*gl*/ ctx[0] && create_if_block(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			canvas_1 = element("canvas");
    			t = space();
    			if (if_block) if_block.c();
    			attr_dev(canvas_1, "class", "svelte-6pzapg");
    			add_location(canvas_1, file$1, 441, 1, 11656);
    			attr_dev(div, "class", "container svelte-6pzapg");
    			add_render_callback(() => /*div_elementresize_handler*/ ctx[15].call(div));
    			add_location(div, file$1, 440, 0, 11577);
    		},
    		l: function claim(nodes) {
    			throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, canvas_1);
    			/*canvas_1_binding*/ ctx[14](canvas_1);
    			append_dev(div, t);
    			if (if_block) if_block.m(div, null);
    			div_resize_listener = add_resize_listener(div, /*div_elementresize_handler*/ ctx[15].bind(div));
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*gl*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*gl*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*canvas_1_binding*/ ctx[14](null);
    			if (if_block) if_block.d();
    			div_resize_listener();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function is_intersecting(el) {
    	// TODO this shouldn't be necessary. But the initial value
    	// of entry.isIntersecting in an IO can be incorrect, it
    	// turns out? need to investigate further
    	const bcr = el.getBoundingClientRect();

    	return bcr.bottom > 0 && bcr.right > 0 && bcr.top < window.innerHeight && bcr.left < window.innerWidth;
    }

    function get_visibility(node) {
    	return readable(false, set => {
    		if (typeof IntersectionObserver !== "undefined") {
    			const observer = new IntersectionObserver(entries => {
    					// set(entries[0].isIntersecting);
    					set(is_intersecting(node));
    				});

    			observer.observe(node);
    			return () => observer.unobserve(node);
    		}

    		if (typeof window !== "undefined") {
    			function handler() {
    				const { top, bottom } = node.getBoundingClientRect();
    				set(bottom > 0 && top < window.innerHeight);
    			}

    			window.addEventListener("scroll", handler);
    			window.addEventListener("resize", handler);

    			return () => {
    				window.removeEventListener("scroll", handler);
    				window.removeEventListener("resize", handler);
    			};
    		}
    	});
    }

    const num_lights = 8;

    function instance$1($$self, $$props, $$invalidate) {
    	let $width;
    	let $height;

    	let $visible,
    		$$unsubscribe_visible = noop,
    		$$subscribe_visible = () => ($$unsubscribe_visible(), $$unsubscribe_visible = subscribe(visible, $$value => $$invalidate(24, $visible = $$value)), visible);

    	$$self.$$.on_destroy.push(() => $$unsubscribe_visible());
    	let { background = [1, 1, 1] } = $$props;
    	let { backgroundOpacity = 1 } = $$props;
    	let { fog = undefined } = $$props;
    	let { pixelRatio = undefined } = $$props;
    	const use_fog = "fog" in $$props;
    	let canvas;
    	let visible = writable(false);
    	validate_store(visible, "visible");
    	$$subscribe_visible();
    	let pending = false;
    	let update_scheduled = false;
    	let w;
    	let h;
    	let { gl } = $$props; // WebGL2RenderingContext
    	let { process_extra_shader_components } = $$props; // (gl, material) => {}

    	let draw = () => {

    	};

    	let camera_stores = {
    		camera_matrix: writable(),
    		view: writable(),
    		projection: writable()
    	};

    	const invalidate = typeof window !== "undefined"
    	? () => {
    			if (!update_scheduled) {
    				update_scheduled = true;
    				requestAnimationFrame(draw);
    			}
    		}
    	: () => {

    		};

    	const width = writable(1);
    	validate_store(width, "width");
    	component_subscribe($$self, width, value => $$invalidate(3, $width = value));
    	const height = writable(1);
    	validate_store(height, "height");
    	component_subscribe($$self, height, value => $$invalidate(4, $height = value));
    	const root_layer = create_layer(0, invalidate);
    	const default_camera = {}; /* TODO */
    	let camera = default_camera;
    	const meshes = [];

    	// lights
    	const lights = { ambient: [], directional: [], point: [] };

    	function add_to(array) {
    		return fn => {
    			array.push(fn);
    			invalidate();

    			onDestroy(() => {
    				const i = array.indexOf(fn);
    				if (~i) array.splice(i, 1);
    				invalidate();
    			});
    		};
    	}

    	const targets = new Map();
    	let camera_position_changed_since_last_render = true;

    	const scene = {
    		defines: [
    			`#define NUM_LIGHTS 2\n` + // TODO configure this
    			`#define USE_FOG ${use_fog}\n`
    		].join(""),
    		add_camera: _camera => {
    			if (camera && camera !== default_camera) {
    				throw new Error(`A scene can only have one camera`);
    			}

    			camera = _camera;
    			invalidate();

    			// TODO this is garbage
    			camera_stores.camera_matrix.set(camera.matrix);

    			camera_stores.projection.set(camera.projection);
    			camera_stores.view.set(camera.view);

    			onDestroy(() => {
    				camera = default_camera;
    				invalidate();
    			});
    		},
    		update_camera: camera => {
    			// for overlays
    			camera_stores.camera_matrix.set(camera.matrix);

    			camera_stores.view.set(camera.view);
    			camera_stores.projection.set(camera.projection);
    			camera_position_changed_since_last_render = true;
    			invalidate();
    		},
    		add_directional_light: add_to(lights.directional),
    		add_point_light: add_to(lights.point),
    		add_ambient_light: add_to(lights.ambient),
    		get_target(id) {
    			if (!targets.has(id)) targets.set(id, writable(null));
    			return targets.get(id);
    		},
    		invalidate,
    		...camera_stores,
    		width,
    		height
    	};

    	setContext(RENDERER, scene);
    	setContext(LAYER, root_layer);
    	const origin = identity(create());
    	const ctm = writable(origin);

    	setContext(PARENT, {
    		get_matrix_world: () => origin,
    		ctm: { subscribe: ctm.subscribe }
    	});

    	onMount(() => {
    		$$invalidate(21, scene.canvas = canvas, scene);
    		$$invalidate(0, gl = $$invalidate(21, scene.gl = canvas.getContext("webgl2"), scene));
    		$$subscribe_visible($$invalidate(2, visible = get_visibility(canvas)));
    		gl.clearColor(0, 0, 0, 0);

    		// const extensions = [
    		// 	'OES_element_index_uint',
    		// 	'OES_standard_derivatives'
    		// ];
    		//
    		// extensions.forEach(name => {
    		// 	const ext = gl.getExtension(name);
    		// 	if (!ext) {
    		// 		throw new Error(`Unsupported extension: ${name}`);
    		// 	}
    		// });
    		draw = force => {
    			if (!camera) return; // TODO make this `!ready` or something instead

    			if (dimensions_need_update) {
    				const DPR = pixelRatio || window.devicePixelRatio || 1;
    				$$invalidate(1, canvas.width = $width * DPR, canvas);
    				$$invalidate(1, canvas.height = $height * DPR, canvas);
    				gl.viewport(0, 0, $width * DPR, $height * DPR);
    				dimensions_need_update = false;
    			}

    			update_scheduled = false;

    			if (!$visible && !force) {
    				$$invalidate(16, pending = true);
    				return;
    			}


    			$$invalidate(16, pending = false);

    			// gl.clearColor(...bg, backgroundOpacity);
    			// gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    			gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);

    			gl.enable(gl.BLEND);
    			gl.enable(gl.CULL_FACE);
    			gl.enable(gl.DEPTH_TEST); // Enable depth testing
    			gl.depthFunc(gl.LEQUAL); // Near things obscure far things

    			// Clear the canvas before we start drawing on it.
    			gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

    			// calculate total ambient light
    			const ambient_light = lights.ambient.reduce(
    				(total, { color, intensity }) => {
    					return [
    						Math.min(total[0] + color[0] * intensity, 1),
    						Math.min(total[1] + color[1] * intensity, 1),
    						Math.min(total[2] + color[2] * intensity, 1)
    					];
    				},
    				new Float32Array([0, 0, 0])
    			);

    			let previous_program;

    			let previous_state = {
    				[gl.DEPTH_TEST]: null,
    				[gl.CULL_FACE]: null
    			};

    			const enable = (key, enabled) => {
    				if (previous_state[key] !== enabled) {
    					if (enabled) gl.enable(key); else gl.disable(key);
    					previous_state[key] = enabled;
    				}
    			};

    			function render_mesh(
    				{ model, model_inverse_transpose, geometry, material, depthTest, doubleSided }
    			) {
    				// TODO should this even be possible?
    				if (!material) return;

    				enable(gl.DEPTH_TEST, depthTest !== false);
    				enable(gl.CULL_FACE, doubleSided !== true);

    				gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.SRC_ALPHA, gl.ONE); // source rgb
    				// dest rgb
    				// source alpha
    				// dest alpha

    				// set attributes
    				geometry.set_attributes(gl);

    				if (material.program !== previous_program) {
    					previous_program = material.program;

    					// TODO move logic to the mesh/material?
    					gl.useProgram(material.program);

    					// set built-ins
    					gl.uniform3fv(material.uniform_locations.AMBIENT_LIGHT, ambient_light);

    					if (use_fog) {
    						gl.uniform3fv(material.uniform_locations.FOG_COLOR, bg);
    						gl.uniform1f(material.uniform_locations.FOG_DENSITY, fog);
    					}

    					if (material.uniform_locations.DIRECTIONAL_LIGHTS) {
    						for (let i = 0; i < num_lights; i += 1) {
    							const light = lights.directional[i];
    							if (!light) break;
    							gl.uniform3fv(material.uniform_locations.DIRECTIONAL_LIGHTS[i].direction, light.direction);
    							gl.uniform3fv(material.uniform_locations.DIRECTIONAL_LIGHTS[i].color, light.color);
    							gl.uniform1f(material.uniform_locations.DIRECTIONAL_LIGHTS[i].intensity, light.intensity);
    						}
    					}

    					if (material.uniform_locations.POINT_LIGHTS) {
    						for (let i = 0; i < num_lights; i += 1) {
    							const light = lights.point[i];
    							if (!light) break;
    							gl.uniform3fv(material.uniform_locations.POINT_LIGHTS[i].location, light.location);
    							gl.uniform3fv(material.uniform_locations.POINT_LIGHTS[i].color, light.color);
    							gl.uniform1f(material.uniform_locations.POINT_LIGHTS[i].intensity, light.intensity);
    						}
    					}

    					gl.uniform3fv(material.uniform_locations.CAMERA_WORLD_POSITION, camera.world_position);
    					gl.uniformMatrix4fv(material.uniform_locations.VIEW, false, camera.view);
    					gl.uniformMatrix4fv(material.uniform_locations.PROJECTION, false, camera.projection);
    				}

    				// set mesh-specific built-in uniforms
    				gl.uniformMatrix4fv(material.uniform_locations.MODEL, false, model);

    				gl.uniformMatrix4fv(material.uniform_locations.MODEL_INVERSE_TRANSPOSE, false, model_inverse_transpose);

    				if (typeof process_extra_shader_components == "function") {
    					// set material-specific built-in uniforms
    					material.apply_uniforms(gl, null, model, process_extra_shader_components);
    				} else {
    					// set material-specific built-in uniforms
    					material.apply_uniforms(gl);
    				}

    				// draw
    				if (geometry.index) {
    					gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, geometry.buffers.__index);
    					gl.drawElements(gl[geometry.primitive], geometry.index.length, gl.UNSIGNED_INT, 0);
    				} else {
    					// if (geometry.primitive === 'POINTS') {
    					// 	console.log("If ", (gl[geometry.primitive] === gl.POINTS));
    					// 	console.log("Draw gl.POINTS for " + geometry.count + " point(s)" );
    					// }
    					const primitiveType = gl[geometry.primitive];

    					gl.drawArrays(primitiveType, 0, geometry.count);
    				}
    			}

    			function render_layer(layer) {
    				if (layer.needs_sort) {
    					layer.child_layers.sort((a, b) => a.index - b.index);
    					layer.needs_sort = false;
    				}

    				gl.depthMask(true);
    				gl.clearDepth(1);
    				gl.clear(gl.DEPTH_BUFFER_BIT);

    				for (let i = 0; i < layer.meshes.length; i += 1) {
    					render_mesh(layer.meshes[i]);
    				}

    				// TODO sort transparent meshes, furthest to closest
    				gl.depthMask(false);

    				if (camera_position_changed_since_last_render || layer.needs_transparency_sort) {
    					sort_transparent_meshes(layer.transparent_meshes);
    					layer.needs_transparency_sort = false;
    				}

    				for (let i = 0; i < layer.transparent_meshes.length; i += 1) {
    					render_mesh(layer.transparent_meshes[i]);
    				}

    				for (let i = 0; i < layer.child_layers.length; i += 1) {
    					render_layer(layer.child_layers[i]);
    				}
    			}

    			render_layer(root_layer);
    			camera_position_changed_since_last_render = false;
    		};

    		// for some wacky reason, Adblock Plus seems to prevent the
    		// initial dimensions from being correctly reported
    		const timeout = setTimeout(() => {
    			set_store_value(width, $width = canvas.clientWidth);
    			set_store_value(height, $height = canvas.clientHeight);
    		});

    		tick().then(() => draw(true));

    		return () => {
    			gl.getExtension("WEBGL_lose_context").loseContext();
    			clearTimeout(timeout);
    		};
    	});

    	const sort_transparent_meshes = meshes => {
    		if (meshes.length < 2) return;
    		const lookup = new Map();
    		const out = new Float32Array(16);

    		meshes.forEach(mesh => {
    			const z = multiply(out, camera.view, mesh.model)[14];
    			lookup.set(mesh, z);
    		});

    		meshes.sort((a, b) => lookup.get(a) - lookup.get(b));
    	};

    	let dimensions_need_update = true;

    	const update_dimensions = () => {
    		dimensions_need_update = true;
    		invalidate();
    	};

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Scene", $$slots, ['default']);

    	function canvas_1_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			canvas = $$value;
    			$$invalidate(1, canvas);
    		});
    	}

    	function div_elementresize_handler() {
    		$width = this.clientWidth;
    		width.set($width);
    		$height = this.clientHeight;
    		height.set($height);
    	}

    	$$self.$set = $$new_props => {
    		$$invalidate(40, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ("background" in $$new_props) $$invalidate(7, background = $$new_props.background);
    		if ("backgroundOpacity" in $$new_props) $$invalidate(8, backgroundOpacity = $$new_props.backgroundOpacity);
    		if ("fog" in $$new_props) $$invalidate(9, fog = $$new_props.fog);
    		if ("pixelRatio" in $$new_props) $$invalidate(10, pixelRatio = $$new_props.pixelRatio);
    		if ("gl" in $$new_props) $$invalidate(0, gl = $$new_props.gl);
    		if ("process_extra_shader_components" in $$new_props) $$invalidate(11, process_extra_shader_components = $$new_props.process_extra_shader_components);
    		if ("$$scope" in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		readable,
    		is_intersecting,
    		get_visibility,
    		setContext,
    		onMount,
    		onDestroy,
    		tick,
    		writable,
    		RENDERER,
    		LAYER,
    		PARENT,
    		CAMERA,
    		create_layer,
    		create_worker,
    		process_color,
    		mat4,
    		vec3,
    		background,
    		backgroundOpacity,
    		fog,
    		pixelRatio,
    		use_fog,
    		canvas,
    		visible,
    		pending,
    		update_scheduled,
    		w,
    		h,
    		gl,
    		process_extra_shader_components,
    		draw,
    		camera_stores,
    		invalidate,
    		width,
    		height,
    		root_layer,
    		default_camera,
    		camera,
    		num_lights,
    		meshes,
    		lights,
    		add_to,
    		targets,
    		camera_position_changed_since_last_render,
    		scene,
    		origin,
    		ctm,
    		sort_transparent_meshes,
    		dimensions_need_update,
    		update_dimensions,
    		bg,
    		$width,
    		$height,
    		$visible
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(40, $$props = assign(assign({}, $$props), $$new_props));
    		if ("background" in $$props) $$invalidate(7, background = $$new_props.background);
    		if ("backgroundOpacity" in $$props) $$invalidate(8, backgroundOpacity = $$new_props.backgroundOpacity);
    		if ("fog" in $$props) $$invalidate(9, fog = $$new_props.fog);
    		if ("pixelRatio" in $$props) $$invalidate(10, pixelRatio = $$new_props.pixelRatio);
    		if ("canvas" in $$props) $$invalidate(1, canvas = $$new_props.canvas);
    		if ("visible" in $$props) $$subscribe_visible($$invalidate(2, visible = $$new_props.visible));
    		if ("pending" in $$props) $$invalidate(16, pending = $$new_props.pending);
    		if ("update_scheduled" in $$props) update_scheduled = $$new_props.update_scheduled;
    		if ("w" in $$props) w = $$new_props.w;
    		if ("h" in $$props) h = $$new_props.h;
    		if ("gl" in $$props) $$invalidate(0, gl = $$new_props.gl);
    		if ("process_extra_shader_components" in $$props) $$invalidate(11, process_extra_shader_components = $$new_props.process_extra_shader_components);
    		if ("draw" in $$props) draw = $$new_props.draw;
    		if ("camera_stores" in $$props) camera_stores = $$new_props.camera_stores;
    		if ("camera" in $$props) camera = $$new_props.camera;
    		if ("camera_position_changed_since_last_render" in $$props) camera_position_changed_since_last_render = $$new_props.camera_position_changed_since_last_render;
    		if ("dimensions_need_update" in $$props) dimensions_need_update = $$new_props.dimensions_need_update;
    		if ("bg" in $$props) bg = $$new_props.bg;
    	};

    	let bg;

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*background*/ 128) {
    			 bg = process_color(background);
    		}

    		if ($$self.$$.dirty[0] & /*$width, $height*/ 24) {
    			 (update_dimensions());
    		}

    		if ($$self.$$.dirty[0] & /*background, backgroundOpacity, fog, scene*/ 2098048) {
    			 (scene.invalidate());
    		}

    		if ($$self.$$.dirty[0] & /*$visible, pending, scene*/ 18939904) {
    			 if ($visible && pending) scene.invalidate();
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		gl,
    		canvas,
    		visible,
    		$width,
    		$height,
    		width,
    		height,
    		background,
    		backgroundOpacity,
    		fog,
    		pixelRatio,
    		process_extra_shader_components,
    		$$scope,
    		$$slots,
    		canvas_1_binding,
    		div_elementresize_handler
    	];
    }

    class Scene extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$1,
    			create_fragment$1,
    			safe_not_equal,
    			{
    				background: 7,
    				backgroundOpacity: 8,
    				fog: 9,
    				pixelRatio: 10,
    				gl: 0,
    				process_extra_shader_components: 11
    			},
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Scene",
    			options,
    			id: create_fragment$1.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*gl*/ ctx[0] === undefined && !("gl" in props)) {
    			console.warn("<Scene> was created without expected prop 'gl'");
    		}

    		if (/*process_extra_shader_components*/ ctx[11] === undefined && !("process_extra_shader_components" in props)) {
    			console.warn("<Scene> was created without expected prop 'process_extra_shader_components'");
    		}
    	}

    	get background() {
    		throw new Error_1("<Scene>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set background(value) {
    		throw new Error_1("<Scene>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get backgroundOpacity() {
    		throw new Error_1("<Scene>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set backgroundOpacity(value) {
    		throw new Error_1("<Scene>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fog() {
    		throw new Error_1("<Scene>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fog(value) {
    		throw new Error_1("<Scene>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pixelRatio() {
    		throw new Error_1("<Scene>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pixelRatio(value) {
    		throw new Error_1("<Scene>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get gl() {
    		throw new Error_1("<Scene>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set gl(value) {
    		throw new Error_1("<Scene>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get process_extra_shader_components() {
    		throw new Error_1("<Scene>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set process_extra_shader_components(value) {
    		throw new Error_1("<Scene>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /**
     * 3x3 Matrix
     * @module mat3
     */

    /**
     * Creates a new identity mat3
     *
     * @returns {mat3} a new 3x3 matrix
     */

    function create$2() {
      var out = new ARRAY_TYPE(9);

      if (ARRAY_TYPE != Float32Array) {
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[5] = 0;
        out[6] = 0;
        out[7] = 0;
      }

      out[0] = 1;
      out[4] = 1;
      out[8] = 1;
      return out;
    }

    /**
     * 4 Dimensional Vector
     * @module vec4
     */

    /**
     * Creates a new, empty vec4
     *
     * @returns {vec4} a new 4D vector
     */

    function create$3() {
      var out = new ARRAY_TYPE(4);

      if (ARRAY_TYPE != Float32Array) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
      }

      return out;
    }
    /**
     * Creates a new vec4 initialized with values from an existing vector
     *
     * @param {ReadonlyVec4} a vector to clone
     * @returns {vec4} a new 4D vector
     */

    function clone$2(a) {
      var out = new ARRAY_TYPE(4);
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      return out;
    }
    /**
     * Creates a new vec4 initialized with the given values
     *
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @param {Number} w W component
     * @returns {vec4} a new 4D vector
     */

    function fromValues$2(x, y, z, w) {
      var out = new ARRAY_TYPE(4);
      out[0] = x;
      out[1] = y;
      out[2] = z;
      out[3] = w;
      return out;
    }
    /**
     * Copy the values from one vec4 to another
     *
     * @param {vec4} out the receiving vector
     * @param {ReadonlyVec4} a the source vector
     * @returns {vec4} out
     */

    function copy$2(out, a) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      return out;
    }
    /**
     * Set the components of a vec4 to the given values
     *
     * @param {vec4} out the receiving vector
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @param {Number} w W component
     * @returns {vec4} out
     */

    function set$2(out, x, y, z, w) {
      out[0] = x;
      out[1] = y;
      out[2] = z;
      out[3] = w;
      return out;
    }
    /**
     * Adds two vec4's
     *
     * @param {vec4} out the receiving vector
     * @param {ReadonlyVec4} a the first operand
     * @param {ReadonlyVec4} b the second operand
     * @returns {vec4} out
     */

    function add$2(out, a, b) {
      out[0] = a[0] + b[0];
      out[1] = a[1] + b[1];
      out[2] = a[2] + b[2];
      out[3] = a[3] + b[3];
      return out;
    }
    /**
     * Scales a vec4 by a scalar number
     *
     * @param {vec4} out the receiving vector
     * @param {ReadonlyVec4} a the vector to scale
     * @param {Number} b amount to scale the vector by
     * @returns {vec4} out
     */

    function scale$2(out, a, b) {
      out[0] = a[0] * b;
      out[1] = a[1] * b;
      out[2] = a[2] * b;
      out[3] = a[3] * b;
      return out;
    }
    /**
     * Calculates the length of a vec4
     *
     * @param {ReadonlyVec4} a vector to calculate length of
     * @returns {Number} length of a
     */

    function length$1(a) {
      var x = a[0];
      var y = a[1];
      var z = a[2];
      var w = a[3];
      return Math.hypot(x, y, z, w);
    }
    /**
     * Calculates the squared length of a vec4
     *
     * @param {ReadonlyVec4} a vector to calculate squared length of
     * @returns {Number} squared length of a
     */

    function squaredLength$1(a) {
      var x = a[0];
      var y = a[1];
      var z = a[2];
      var w = a[3];
      return x * x + y * y + z * z + w * w;
    }
    /**
     * Normalize a vec4
     *
     * @param {vec4} out the receiving vector
     * @param {ReadonlyVec4} a vector to normalize
     * @returns {vec4} out
     */

    function normalize$2(out, a) {
      var x = a[0];
      var y = a[1];
      var z = a[2];
      var w = a[3];
      var len = x * x + y * y + z * z + w * w;

      if (len > 0) {
        len = 1 / Math.sqrt(len);
      }

      out[0] = x * len;
      out[1] = y * len;
      out[2] = z * len;
      out[3] = w * len;
      return out;
    }
    /**
     * Calculates the dot product of two vec4's
     *
     * @param {ReadonlyVec4} a the first operand
     * @param {ReadonlyVec4} b the second operand
     * @returns {Number} dot product of a and b
     */

    function dot$1(a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
    }
    /**
     * Performs a linear interpolation between two vec4's
     *
     * @param {vec4} out the receiving vector
     * @param {ReadonlyVec4} a the first operand
     * @param {ReadonlyVec4} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {vec4} out
     */

    function lerp$1(out, a, b, t) {
      var ax = a[0];
      var ay = a[1];
      var az = a[2];
      var aw = a[3];
      out[0] = ax + t * (b[0] - ax);
      out[1] = ay + t * (b[1] - ay);
      out[2] = az + t * (b[2] - az);
      out[3] = aw + t * (b[3] - aw);
      return out;
    }
    /**
     * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
     *
     * @param {ReadonlyVec4} a The first vector.
     * @param {ReadonlyVec4} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */

    function exactEquals$2(a, b) {
      return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
    }
    /**
     * Returns whether or not the vectors have approximately the same elements in the same position.
     *
     * @param {ReadonlyVec4} a The first vector.
     * @param {ReadonlyVec4} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */

    function equals$2(a, b) {
      var a0 = a[0],
          a1 = a[1],
          a2 = a[2],
          a3 = a[3];
      var b0 = b[0],
          b1 = b[1],
          b2 = b[2],
          b3 = b[3];
      return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));
    }
    /**
     * Perform some operation over an array of vec4s.
     *
     * @param {Array} a the array of vectors to iterate over
     * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
     * @param {Number} offset Number of elements to skip at the beginning of the array
     * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
     * @param {Function} fn Function to call for each vector in the array
     * @param {Object} [arg] additional argument to pass to fn
     * @returns {Array} a
     * @function
     */

    var forEach$1 = function () {
      var vec = create$3();
      return function (a, stride, offset, count, fn, arg) {
        var i, l;

        if (!stride) {
          stride = 4;
        }

        if (!offset) {
          offset = 0;
        }

        if (count) {
          l = Math.min(count * stride + offset, a.length);
        } else {
          l = a.length;
        }

        for (i = offset; i < l; i += stride) {
          vec[0] = a[i];
          vec[1] = a[i + 1];
          vec[2] = a[i + 2];
          vec[3] = a[i + 3];
          fn(vec, vec, arg);
          a[i] = vec[0];
          a[i + 1] = vec[1];
          a[i + 2] = vec[2];
          a[i + 3] = vec[3];
        }

        return a;
      };
    }();

    /**
     * Quaternion
     * @module quat
     */

    /**
     * Creates a new identity quat
     *
     * @returns {quat} a new quaternion
     */

    function create$4() {
      var out = new ARRAY_TYPE(4);

      if (ARRAY_TYPE != Float32Array) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
      }

      out[3] = 1;
      return out;
    }
    /**
     * Set a quat to the identity quaternion
     *
     * @param {quat} out the receiving quaternion
     * @returns {quat} out
     */

    function identity$1(out) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
    }
    /**
     * Sets a quat from the given angle and rotation axis,
     * then returns it.
     *
     * @param {quat} out the receiving quaternion
     * @param {ReadonlyVec3} axis the axis around which to rotate
     * @param {Number} rad the angle in radians
     * @returns {quat} out
     **/

    function setAxisAngle(out, axis, rad) {
      rad = rad * 0.5;
      var s = Math.sin(rad);
      out[0] = s * axis[0];
      out[1] = s * axis[1];
      out[2] = s * axis[2];
      out[3] = Math.cos(rad);
      return out;
    }
    /**
     * Gets the rotation axis and angle for a given
     *  quaternion. If a quaternion is created with
     *  setAxisAngle, this method will return the same
     *  values as providied in the original parameter list
     *  OR functionally equivalent values.
     * Example: The quaternion formed by axis [0, 0, 1] and
     *  angle -90 is the same as the quaternion formed by
     *  [0, 0, 1] and 270. This method favors the latter.
     * @param  {vec3} out_axis  Vector receiving the axis of rotation
     * @param  {ReadonlyQuat} q     Quaternion to be decomposed
     * @return {Number}     Angle, in radians, of the rotation
     */

    function getAxisAngle(out_axis, q) {
      var rad = Math.acos(q[3]) * 2.0;
      var s = Math.sin(rad / 2.0);

      if (s > EPSILON) {
        out_axis[0] = q[0] / s;
        out_axis[1] = q[1] / s;
        out_axis[2] = q[2] / s;
      } else {
        // If s is zero, return any axis (no rotation - axis does not matter)
        out_axis[0] = 1;
        out_axis[1] = 0;
        out_axis[2] = 0;
      }

      return rad;
    }
    /**
     * Gets the angular distance between two unit quaternions
     *
     * @param  {ReadonlyQuat} a     Origin unit quaternion
     * @param  {ReadonlyQuat} b     Destination unit quaternion
     * @return {Number}     Angle, in radians, between the two quaternions
     */

    function getAngle(a, b) {
      var dotproduct = dot$2(a, b);
      return Math.acos(2 * dotproduct * dotproduct - 1);
    }
    /**
     * Multiplies two quat's
     *
     * @param {quat} out the receiving quaternion
     * @param {ReadonlyQuat} a the first operand
     * @param {ReadonlyQuat} b the second operand
     * @returns {quat} out
     */

    function multiply$2(out, a, b) {
      var ax = a[0],
          ay = a[1],
          az = a[2],
          aw = a[3];
      var bx = b[0],
          by = b[1],
          bz = b[2],
          bw = b[3];
      out[0] = ax * bw + aw * bx + ay * bz - az * by;
      out[1] = ay * bw + aw * by + az * bx - ax * bz;
      out[2] = az * bw + aw * bz + ax * by - ay * bx;
      out[3] = aw * bw - ax * bx - ay * by - az * bz;
      return out;
    }
    /**
     * Rotates a quaternion by the given angle about the X axis
     *
     * @param {quat} out quat receiving operation result
     * @param {ReadonlyQuat} a quat to rotate
     * @param {number} rad angle (in radians) to rotate
     * @returns {quat} out
     */

    function rotateX$2(out, a, rad) {
      rad *= 0.5;
      var ax = a[0],
          ay = a[1],
          az = a[2],
          aw = a[3];
      var bx = Math.sin(rad),
          bw = Math.cos(rad);
      out[0] = ax * bw + aw * bx;
      out[1] = ay * bw + az * bx;
      out[2] = az * bw - ay * bx;
      out[3] = aw * bw - ax * bx;
      return out;
    }
    /**
     * Rotates a quaternion by the given angle about the Y axis
     *
     * @param {quat} out quat receiving operation result
     * @param {ReadonlyQuat} a quat to rotate
     * @param {number} rad angle (in radians) to rotate
     * @returns {quat} out
     */

    function rotateY$2(out, a, rad) {
      rad *= 0.5;
      var ax = a[0],
          ay = a[1],
          az = a[2],
          aw = a[3];
      var by = Math.sin(rad),
          bw = Math.cos(rad);
      out[0] = ax * bw - az * by;
      out[1] = ay * bw + aw * by;
      out[2] = az * bw + ax * by;
      out[3] = aw * bw - ay * by;
      return out;
    }
    /**
     * Rotates a quaternion by the given angle about the Z axis
     *
     * @param {quat} out quat receiving operation result
     * @param {ReadonlyQuat} a quat to rotate
     * @param {number} rad angle (in radians) to rotate
     * @returns {quat} out
     */

    function rotateZ$2(out, a, rad) {
      rad *= 0.5;
      var ax = a[0],
          ay = a[1],
          az = a[2],
          aw = a[3];
      var bz = Math.sin(rad),
          bw = Math.cos(rad);
      out[0] = ax * bw + ay * bz;
      out[1] = ay * bw - ax * bz;
      out[2] = az * bw + aw * bz;
      out[3] = aw * bw - az * bz;
      return out;
    }
    /**
     * Calculates the W component of a quat from the X, Y, and Z components.
     * Assumes that quaternion is 1 unit in length.
     * Any existing W component will be ignored.
     *
     * @param {quat} out the receiving quaternion
     * @param {ReadonlyQuat} a quat to calculate W component of
     * @returns {quat} out
     */

    function calculateW(out, a) {
      var x = a[0],
          y = a[1],
          z = a[2];
      out[0] = x;
      out[1] = y;
      out[2] = z;
      out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
      return out;
    }
    /**
     * Calculate the exponential of a unit quaternion.
     *
     * @param {quat} out the receiving quaternion
     * @param {ReadonlyQuat} a quat to calculate the exponential of
     * @returns {quat} out
     */

    function exp(out, a) {
      var x = a[0],
          y = a[1],
          z = a[2],
          w = a[3];
      var r = Math.sqrt(x * x + y * y + z * z);
      var et = Math.exp(w);
      var s = r > 0 ? et * Math.sin(r) / r : 0;
      out[0] = x * s;
      out[1] = y * s;
      out[2] = z * s;
      out[3] = et * Math.cos(r);
      return out;
    }
    /**
     * Calculate the natural logarithm of a unit quaternion.
     *
     * @param {quat} out the receiving quaternion
     * @param {ReadonlyQuat} a quat to calculate the exponential of
     * @returns {quat} out
     */

    function ln(out, a) {
      var x = a[0],
          y = a[1],
          z = a[2],
          w = a[3];
      var r = Math.sqrt(x * x + y * y + z * z);
      var t = r > 0 ? Math.atan2(r, w) / r : 0;
      out[0] = x * t;
      out[1] = y * t;
      out[2] = z * t;
      out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);
      return out;
    }
    /**
     * Calculate the scalar power of a unit quaternion.
     *
     * @param {quat} out the receiving quaternion
     * @param {ReadonlyQuat} a quat to calculate the exponential of
     * @param {Number} b amount to scale the quaternion by
     * @returns {quat} out
     */

    function pow(out, a, b) {
      ln(out, a);
      scale$3(out, out, b);
      exp(out, out);
      return out;
    }
    /**
     * Performs a spherical linear interpolation between two quat
     *
     * @param {quat} out the receiving quaternion
     * @param {ReadonlyQuat} a the first operand
     * @param {ReadonlyQuat} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {quat} out
     */

    function slerp(out, a, b, t) {
      // benchmarks:
      //    http://jsperf.com/quaternion-slerp-implementations
      var ax = a[0],
          ay = a[1],
          az = a[2],
          aw = a[3];
      var bx = b[0],
          by = b[1],
          bz = b[2],
          bw = b[3];
      var omega, cosom, sinom, scale0, scale1; // calc cosine

      cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)

      if (cosom < 0.0) {
        cosom = -cosom;
        bx = -bx;
        by = -by;
        bz = -bz;
        bw = -bw;
      } // calculate coefficients


      if (1.0 - cosom > EPSILON) {
        // standard case (slerp)
        omega = Math.acos(cosom);
        sinom = Math.sin(omega);
        scale0 = Math.sin((1.0 - t) * omega) / sinom;
        scale1 = Math.sin(t * omega) / sinom;
      } else {
        // "from" and "to" quaternions are very close
        //  ... so we can do a linear interpolation
        scale0 = 1.0 - t;
        scale1 = t;
      } // calculate final values


      out[0] = scale0 * ax + scale1 * bx;
      out[1] = scale0 * ay + scale1 * by;
      out[2] = scale0 * az + scale1 * bz;
      out[3] = scale0 * aw + scale1 * bw;
      return out;
    }
    /**
     * Generates a random unit quaternion
     *
     * @param {quat} out the receiving quaternion
     * @returns {quat} out
     */

    function random$1(out) {
      // Implementation of http://planning.cs.uiuc.edu/node198.html
      // TODO: Calling random 3 times is probably not the fastest solution
      var u1 = RANDOM();
      var u2 = RANDOM();
      var u3 = RANDOM();
      var sqrt1MinusU1 = Math.sqrt(1 - u1);
      var sqrtU1 = Math.sqrt(u1);
      out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);
      out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);
      out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);
      out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);
      return out;
    }
    /**
     * Calculates the inverse of a quat
     *
     * @param {quat} out the receiving quaternion
     * @param {ReadonlyQuat} a quat to calculate inverse of
     * @returns {quat} out
     */

    function invert$1(out, a) {
      var a0 = a[0],
          a1 = a[1],
          a2 = a[2],
          a3 = a[3];
      var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;
      var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

      out[0] = -a0 * invDot;
      out[1] = -a1 * invDot;
      out[2] = -a2 * invDot;
      out[3] = a3 * invDot;
      return out;
    }
    /**
     * Calculates the conjugate of a quat
     * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
     *
     * @param {quat} out the receiving quaternion
     * @param {ReadonlyQuat} a quat to calculate conjugate of
     * @returns {quat} out
     */

    function conjugate(out, a) {
      out[0] = -a[0];
      out[1] = -a[1];
      out[2] = -a[2];
      out[3] = a[3];
      return out;
    }
    /**
     * Creates a quaternion from the given 3x3 rotation matrix.
     *
     * NOTE: The resultant quaternion is not normalized, so you should be sure
     * to renormalize the quaternion yourself where necessary.
     *
     * @param {quat} out the receiving quaternion
     * @param {ReadonlyMat3} m rotation matrix
     * @returns {quat} out
     * @function
     */

    function fromMat3(out, m) {
      // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
      // article "Quaternion Calculus and Fast Animation".
      var fTrace = m[0] + m[4] + m[8];
      var fRoot;

      if (fTrace > 0.0) {
        // |w| > 1/2, may as well choose w > 1/2
        fRoot = Math.sqrt(fTrace + 1.0); // 2w

        out[3] = 0.5 * fRoot;
        fRoot = 0.5 / fRoot; // 1/(4w)

        out[0] = (m[5] - m[7]) * fRoot;
        out[1] = (m[6] - m[2]) * fRoot;
        out[2] = (m[1] - m[3]) * fRoot;
      } else {
        // |w| <= 1/2
        var i = 0;
        if (m[4] > m[0]) i = 1;
        if (m[8] > m[i * 3 + i]) i = 2;
        var j = (i + 1) % 3;
        var k = (i + 2) % 3;
        fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
        out[i] = 0.5 * fRoot;
        fRoot = 0.5 / fRoot;
        out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
        out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
        out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
      }

      return out;
    }
    /**
     * Creates a quaternion from the given euler angle x, y, z.
     *
     * @param {quat} out the receiving quaternion
     * @param {x} Angle to rotate around X axis in degrees.
     * @param {y} Angle to rotate around Y axis in degrees.
     * @param {z} Angle to rotate around Z axis in degrees.
     * @returns {quat} out
     * @function
     */

    function fromEuler(out, x, y, z) {
      var halfToRad = 0.5 * Math.PI / 180.0;
      x *= halfToRad;
      y *= halfToRad;
      z *= halfToRad;
      var sx = Math.sin(x);
      var cx = Math.cos(x);
      var sy = Math.sin(y);
      var cy = Math.cos(y);
      var sz = Math.sin(z);
      var cz = Math.cos(z);
      out[0] = sx * cy * cz - cx * sy * sz;
      out[1] = cx * sy * cz + sx * cy * sz;
      out[2] = cx * cy * sz - sx * sy * cz;
      out[3] = cx * cy * cz + sx * sy * sz;
      return out;
    }
    /**
     * Returns a string representation of a quatenion
     *
     * @param {ReadonlyQuat} a vector to represent as a string
     * @returns {String} string representation of the vector
     */

    function str$2(a) {
      return "quat(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
    }
    /**
     * Creates a new quat initialized with values from an existing quaternion
     *
     * @param {ReadonlyQuat} a quaternion to clone
     * @returns {quat} a new quaternion
     * @function
     */

    var clone$3 = clone$2;
    /**
     * Creates a new quat initialized with the given values
     *
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @param {Number} w W component
     * @returns {quat} a new quaternion
     * @function
     */

    var fromValues$3 = fromValues$2;
    /**
     * Copy the values from one quat to another
     *
     * @param {quat} out the receiving quaternion
     * @param {ReadonlyQuat} a the source quaternion
     * @returns {quat} out
     * @function
     */

    var copy$3 = copy$2;
    /**
     * Set the components of a quat to the given values
     *
     * @param {quat} out the receiving quaternion
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @param {Number} w W component
     * @returns {quat} out
     * @function
     */

    var set$3 = set$2;
    /**
     * Adds two quat's
     *
     * @param {quat} out the receiving quaternion
     * @param {ReadonlyQuat} a the first operand
     * @param {ReadonlyQuat} b the second operand
     * @returns {quat} out
     * @function
     */

    var add$3 = add$2;
    /**
     * Alias for {@link quat.multiply}
     * @function
     */

    var mul$2 = multiply$2;
    /**
     * Scales a quat by a scalar number
     *
     * @param {quat} out the receiving vector
     * @param {ReadonlyQuat} a the vector to scale
     * @param {Number} b amount to scale the vector by
     * @returns {quat} out
     * @function
     */

    var scale$3 = scale$2;
    /**
     * Calculates the dot product of two quat's
     *
     * @param {ReadonlyQuat} a the first operand
     * @param {ReadonlyQuat} b the second operand
     * @returns {Number} dot product of a and b
     * @function
     */

    var dot$2 = dot$1;
    /**
     * Performs a linear interpolation between two quat's
     *
     * @param {quat} out the receiving quaternion
     * @param {ReadonlyQuat} a the first operand
     * @param {ReadonlyQuat} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {quat} out
     * @function
     */

    var lerp$2 = lerp$1;
    /**
     * Calculates the length of a quat
     *
     * @param {ReadonlyQuat} a vector to calculate length of
     * @returns {Number} length of a
     */

    var length$2 = length$1;
    /**
     * Alias for {@link quat.length}
     * @function
     */

    var len$1 = length$2;
    /**
     * Calculates the squared length of a quat
     *
     * @param {ReadonlyQuat} a vector to calculate squared length of
     * @returns {Number} squared length of a
     * @function
     */

    var squaredLength$2 = squaredLength$1;
    /**
     * Alias for {@link quat.squaredLength}
     * @function
     */

    var sqrLen$1 = squaredLength$2;
    /**
     * Normalize a quat
     *
     * @param {quat} out the receiving quaternion
     * @param {ReadonlyQuat} a quaternion to normalize
     * @returns {quat} out
     * @function
     */

    var normalize$3 = normalize$2;
    /**
     * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)
     *
     * @param {ReadonlyQuat} a The first quaternion.
     * @param {ReadonlyQuat} b The second quaternion.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */

    var exactEquals$3 = exactEquals$2;
    /**
     * Returns whether or not the quaternions have approximately the same elements in the same position.
     *
     * @param {ReadonlyQuat} a The first vector.
     * @param {ReadonlyQuat} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */

    var equals$3 = equals$2;
    /**
     * Sets a quaternion to represent the shortest rotation from one
     * vector to another.
     *
     * Both vectors are assumed to be unit length.
     *
     * @param {quat} out the receiving quaternion.
     * @param {ReadonlyVec3} a the initial vector
     * @param {ReadonlyVec3} b the destination vector
     * @returns {quat} out
     */

    var rotationTo = function () {
      var tmpvec3 = create$1();
      var xUnitVec3 = fromValues$1(1, 0, 0);
      var yUnitVec3 = fromValues$1(0, 1, 0);
      return function (out, a, b) {
        var dot$1 = dot(a, b);

        if (dot$1 < -0.999999) {
          cross(tmpvec3, xUnitVec3, a);
          if (len(tmpvec3) < 0.000001) cross(tmpvec3, yUnitVec3, a);
          normalize$1(tmpvec3, tmpvec3);
          setAxisAngle(out, tmpvec3, Math.PI);
          return out;
        } else if (dot$1 > 0.999999) {
          out[0] = 0;
          out[1] = 0;
          out[2] = 0;
          out[3] = 1;
          return out;
        } else {
          cross(tmpvec3, a, b);
          out[0] = tmpvec3[0];
          out[1] = tmpvec3[1];
          out[2] = tmpvec3[2];
          out[3] = 1 + dot$1;
          return normalize$3(out, out);
        }
      };
    }();
    /**
     * Performs a spherical linear interpolation with two control points
     *
     * @param {quat} out the receiving quaternion
     * @param {ReadonlyQuat} a the first operand
     * @param {ReadonlyQuat} b the second operand
     * @param {ReadonlyQuat} c the third operand
     * @param {ReadonlyQuat} d the fourth operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {quat} out
     */

    var sqlerp = function () {
      var temp1 = create$4();
      var temp2 = create$4();
      return function (out, a, b, c, d, t) {
        slerp(temp1, a, d, t);
        slerp(temp2, b, c, t);
        slerp(out, temp1, temp2, 2 * t * (1 - t));
        return out;
      };
    }();
    /**
     * Sets the specified quaternion with values corresponding to the given
     * axes. Each axis is a vec3 and is expected to be unit length and
     * perpendicular to all other specified axes.
     *
     * @param {ReadonlyVec3} view  the vector representing the viewing direction
     * @param {ReadonlyVec3} right the vector representing the local "right" direction
     * @param {ReadonlyVec3} up    the vector representing the local "up" direction
     * @returns {quat} out
     */

    var setAxes = function () {
      var matr = create$2();
      return function (out, view, right, up) {
        matr[0] = right[0];
        matr[3] = right[1];
        matr[6] = right[2];
        matr[1] = up[0];
        matr[4] = up[1];
        matr[7] = up[2];
        matr[2] = -view[0];
        matr[5] = -view[1];
        matr[8] = -view[2];
        return normalize$3(out, fromMat3(out, matr));
      };
    }();

    var quat = /*#__PURE__*/Object.freeze({
        __proto__: null,
        create: create$4,
        identity: identity$1,
        setAxisAngle: setAxisAngle,
        getAxisAngle: getAxisAngle,
        getAngle: getAngle,
        multiply: multiply$2,
        rotateX: rotateX$2,
        rotateY: rotateY$2,
        rotateZ: rotateZ$2,
        calculateW: calculateW,
        exp: exp,
        ln: ln,
        pow: pow,
        slerp: slerp,
        random: random$1,
        invert: invert$1,
        conjugate: conjugate,
        fromMat3: fromMat3,
        fromEuler: fromEuler,
        str: str$2,
        clone: clone$3,
        fromValues: fromValues$3,
        copy: copy$3,
        set: set$3,
        add: add$3,
        mul: mul$2,
        scale: scale$3,
        dot: dot$2,
        lerp: lerp$2,
        length: length$2,
        len: len$1,
        squaredLength: squaredLength$2,
        sqrLen: sqrLen$1,
        normalize: normalize$3,
        exactEquals: exactEquals$3,
        equals: equals$3,
        rotationTo: rotationTo,
        sqlerp: sqlerp,
        setAxes: setAxes
    });

    /* node_modules/@sveltejs/gl/scene/Group.svelte generated by Svelte v3.24.0 */

    function create_fragment$2(ctx) {
    	let current;
    	const default_slot_template = /*$$slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 256) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[8], dirty, null, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let $target,
    		$$unsubscribe_target = noop,
    		$$subscribe_target = () => ($$unsubscribe_target(), $$unsubscribe_target = subscribe(target, $$value => $$invalidate(13, $target = $$value)), target);

    	let $parent_ctm;
    	let $ctm;
    	$$self.$$.on_destroy.push(() => $$unsubscribe_target());
    	let { location = [0, 0, 0] } = $$props;
    	let { lookAt = undefined } = $$props;
    	let { up = [0, 1, 0] } = $$props;
    	let { rotation = [0, 0, 0] } = $$props; // TODO make it possible to set a quaternion as a prop?
    	let { scale: scale$1 = 1 } = $$props;
    	const scene = get_scene();
    	const parent = get_parent();
    	const { ctm: parent_ctm } = parent;
    	validate_store(parent_ctm, "parent_ctm");
    	component_subscribe($$self, parent_ctm, value => $$invalidate(14, $parent_ctm = value));
    	const ctm = writable(null);
    	validate_store(ctm, "ctm");
    	component_subscribe($$self, ctm, value => $$invalidate(15, $ctm = value));
    	let matrix = create();
    	let quaternion = create$4();
    	const world_position = new Float32Array(matrix.buffer, 12 * 4, 3);
    	set_parent({ ctm });
    	const writable_props = ["location", "lookAt", "up", "rotation", "scale"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Group> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Group", $$slots, ['default']);

    	$$self.$set = $$props => {
    		if ("location" in $$props) $$invalidate(3, location = $$props.location);
    		if ("lookAt" in $$props) $$invalidate(4, lookAt = $$props.lookAt);
    		if ("up" in $$props) $$invalidate(5, up = $$props.up);
    		if ("rotation" in $$props) $$invalidate(6, rotation = $$props.rotation);
    		if ("scale" in $$props) $$invalidate(7, scale$1 = $$props.scale);
    		if ("$$scope" in $$props) $$invalidate(8, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		writable,
    		get_scene,
    		get_parent,
    		set_parent,
    		mat4,
    		quat,
    		location,
    		lookAt,
    		up,
    		rotation,
    		scale: scale$1,
    		scene,
    		parent,
    		parent_ctm,
    		ctm,
    		matrix,
    		quaternion,
    		world_position,
    		scale_array,
    		target,
    		$target,
    		$parent_ctm,
    		$ctm
    	});

    	$$self.$inject_state = $$props => {
    		if ("location" in $$props) $$invalidate(3, location = $$props.location);
    		if ("lookAt" in $$props) $$invalidate(4, lookAt = $$props.lookAt);
    		if ("up" in $$props) $$invalidate(5, up = $$props.up);
    		if ("rotation" in $$props) $$invalidate(6, rotation = $$props.rotation);
    		if ("scale" in $$props) $$invalidate(7, scale$1 = $$props.scale);
    		if ("matrix" in $$props) $$invalidate(10, matrix = $$props.matrix);
    		if ("quaternion" in $$props) $$invalidate(11, quaternion = $$props.quaternion);
    		if ("scale_array" in $$props) $$invalidate(12, scale_array = $$props.scale_array);
    		if ("target" in $$props) $$subscribe_target($$invalidate(0, target = $$props.target));
    	};

    	let scale_array;
    	let target;

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*scale*/ 128) {
    			 $$invalidate(12, scale_array = typeof scale$1 === "number"
    			? [scale$1, scale$1, scale$1]
    			: scale$1);
    		}

    		if ($$self.$$.dirty & /*lookAt*/ 16) {
    			 $$subscribe_target($$invalidate(0, target = lookAt ? scene.get_target(lookAt) : writable(null)));
    		}

    		if ($$self.$$.dirty & /*$target, matrix, $parent_ctm, location, up, scale_array, quaternion, rotation, $ctm*/ 64616) {
    			 if ($target) {
    				translate(matrix, $parent_ctm, location);
    				targetTo(matrix, world_position, $target, up);
    				scale(matrix, matrix, scale_array);
    				set_store_value(ctm, $ctm = matrix);
    			} else {
    				$$invalidate(11, quaternion = fromEuler(quaternion || create$4(), ...rotation));
    				$$invalidate(10, matrix = fromRotationTranslationScale(matrix, quaternion, location, scale_array));
    				set_store_value(ctm, $ctm = multiply($ctm || create(), $parent_ctm, matrix));
    			}
    		}

    		if ($$self.$$.dirty & /*$ctm*/ 32768) {
    			// $: quaternion = quat.fromEuler(quaternion || quat.create(), ...rotation);
    			// $: matrix = mat4.fromRotationTranslationScale(matrix || mat4.create(), quaternion, location, scale_array);
    			// $: $ctm = mat4.multiply($ctm || mat4.create(), $parent_ctm, matrix);
    			 (scene.invalidate());
    		}
    	};

    	return [
    		target,
    		parent_ctm,
    		ctm,
    		location,
    		lookAt,
    		up,
    		rotation,
    		scale$1,
    		$$scope,
    		$$slots
    	];
    }

    class Group extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
    			location: 3,
    			lookAt: 4,
    			up: 5,
    			rotation: 6,
    			scale: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Group",
    			options,
    			id: create_fragment$2.name
    		});
    	}

    	get location() {
    		throw new Error("<Group>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set location(value) {
    		throw new Error("<Group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get lookAt() {
    		throw new Error("<Group>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set lookAt(value) {
    		throw new Error("<Group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get up() {
    		throw new Error("<Group>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set up(value) {
    		throw new Error("<Group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotation() {
    		throw new Error("<Group>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotation(value) {
    		throw new Error("<Group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get scale() {
    		throw new Error("<Group>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set scale(value) {
    		throw new Error("<Group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@sveltejs/gl/scene/Layer.svelte generated by Svelte v3.24.0 */
    const file$2 = "node_modules/@sveltejs/gl/scene/Layer.svelte";

    function create_fragment$3(ctx) {
    	let div;
    	let current;
    	const default_slot_template = /*$$slots*/ ctx[2].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", "layer svelte-qsggnw");
    			add_location(div, file$2, 8, 0, 158);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope*/ 2) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[1], dirty, null, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { index = undefined } = $$props;
    	set_layer(get_layer().add_child(index));
    	const writable_props = ["index"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Layer> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Layer", $$slots, ['default']);

    	$$self.$set = $$props => {
    		if ("index" in $$props) $$invalidate(0, index = $$props.index);
    		if ("$$scope" in $$props) $$invalidate(1, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ get_layer, set_layer, index });

    	$$self.$inject_state = $$props => {
    		if ("index" in $$props) $$invalidate(0, index = $$props.index);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [index, $$scope, $$slots];
    }

    class Layer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, { index: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Layer",
    			options,
    			id: create_fragment$3.name
    		});
    	}

    	get index() {
    		throw new Error("<Layer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<Layer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var vert_builtin = "\nprecision highp float;\nuniform mat4 MODEL;\nuniform mat4 PROJECTION;\nuniform mat4 VIEW;\nuniform mat4 MODEL_INVERSE_TRANSPOSE;\nuniform vec3 CAMERA_WORLD_POSITION;\nstruct PointLight {\n\tvec3 location;\n\tvec3 color;\n\tfloat intensity;\n};\nuniform PointLight POINT_LIGHTS[NUM_LIGHTS];\n";

    var frag_builtin = "#extension GL_OES_standard_derivatives : enable\nprecision highp float;\nstruct DirectionalLight {\n\tvec3 direction;\n\tvec3 color;\n\tfloat intensity;\n};\nstruct PointLight {\n\tvec3 location;\n\tvec3 color;\n\tfloat intensity;\n};\nuniform vec3 AMBIENT_LIGHT;\nuniform DirectionalLight DIRECTIONAL_LIGHTS[NUM_LIGHTS];\nuniform PointLight POINT_LIGHTS[NUM_LIGHTS];\n";

    const caches = new Map();

    const setters = {
    	[5126]:  (gl, loc, data) => gl.uniform1f(loc, data),
    	[35664]: (gl, loc, data) => gl.uniform2fv(loc, data),
    	[35665]: (gl, loc, data) => gl.uniform3fv(loc, data),
    	[35666]: (gl, loc, data) => gl.uniform4fv(loc, data),

    	[35674]: (gl, loc, data) => gl.uniformMatrix2fv(loc, false, data),
    	[35675]: (gl, loc, data) => gl.uniformMatrix3fv(loc, false, data),
    	[35676]: (gl, loc, data) => gl.uniformMatrix4fv(loc, false, data),

    	[35678]: (gl, loc, data) => {
    		gl.activeTexture(gl[`TEXTURE${data.index}`]);
    		gl.bindTexture(gl.TEXTURE_2D, data.texture);
    		gl.uniform1i(loc, data.index);
    	}
    	//,
    	// TEXTURE_CUBE_MAP
    	// [35680]: (gl, loc, data) => {
    	// 	gl.bindTexture(gl.TEXTURE_CUBE_MAP, data.texture);
    	// 	gl.uniform1i(loc, data.index);
    	// }
    };

    function compile(gl, vert, frag) {
    	if (!caches.has(gl)) caches.set(gl, new Map());
    	const cache = caches.get(gl);

    	const hash = vert + frag;
    	if (!cache.has(hash)) {
    		const program = create_program(gl, vert, frag);
    		const uniforms = get_uniforms(gl, program);
    		const attributes = get_attributes(gl, program);

    		cache.set(hash, { program, uniforms, attributes });
    	}

    	return cache.get(hash);
    }

    function pad(num, len = 4) {
    	num = String(num);
    	while (num.length < len) num = ` ${num}`;
    	return num;
    }

    function repeat(str, i) {
    	let result = '';
    	while (i--) result += str;
    	return result;
    }

    function create_shader(gl, type, source, label) {
    	const shader = gl.createShader(type);
    	gl.shaderSource(shader, source);
    	gl.compileShader(shader);

    	if (gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
    		return shader;
    	}

    	const log = gl.getShaderInfoLog(shader);
    	const match = /ERROR: (\d+):(\d+): (.+)/.exec(log);

    	if (match) {
    		const c = +match[1];
    		const l = +match[2] - 1;

    		console.log('%c' + match[3], 'font-weight: bold; color: red');

    		const lines = source.split('\n');
    		for (let i = 0; i < lines.length; i += 1) {
    			if (Math.abs(l - i) > 5) continue;

    			const line = lines[i].replace(/^\t+/gm, tabs => repeat(' ', tabs.length * 4));
    			const indent = /^\s+/.exec(line);

    			const str = `${pad(i)}: ${line}`;

    			if (i === l) {
    				console.log('%c' + str, 'font-weight: bold; color: red');
    				console.log('%c' + (indent && indent[0] || '') + repeat(' ', c + 6) + '^', 'color: red');
    			} else {
    				console.log(str);
    			}
    		}

    		throw new Error(`Failed to compile ${label} shader`);
    	}

    	throw new Error(`Failed to compile ${label} shader:\n${log}`);
    }

    function create_program(gl, vert, frag) {
    	const program = gl.createProgram();

    	gl.attachShader(program, create_shader(gl, gl.VERTEX_SHADER, vert, 'vertex'));
    	gl.attachShader(program, create_shader(gl, gl.FRAGMENT_SHADER, frag, 'fragment'));
    	gl.linkProgram(program);

    	const success = gl.getProgramParameter(program, gl.LINK_STATUS);
    	if (!success) {
    		console.log(gl.getProgramInfoLog(program));
    		throw new Error(`Failed to compile program:\n${gl.getProgramInfoLog(program)}`);
    	}

    	return program;
    }

    function get_uniforms(gl, program) {
    	const uniforms = [];

    	const n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);

    	for (let i = 0; i < n; i += 1) {
    		let { size, type, name } = gl.getActiveUniform(program, i);
    		const loc = gl.getUniformLocation(program, name);
    		const setter = setters[type];

    		// if (!setter) {
    		// 	throw new Error(`not implemented ${type} (${name})`);
    		// }

    		uniforms.push({ size, type, name, setter, loc });
    	}

    	return uniforms;
    }

    function get_attributes(gl, program) {
    	const attributes = [];

    	const n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);

    	for (let i = 0; i < n; i += 1) {
    		let { size, type, name } = gl.getActiveAttrib(program, i);
    		name = name.replace('[0]', '');
    		const loc = gl.getAttribLocation(program, name);

    		attributes.push({ size, type, name, loc });
    	}

    	return attributes;
    }

    function deep_set(obj, path, value) {
    	const parts = path.replace(/\]$/, '').split(/\[|\]\.|\./);

    	while (parts.length > 1) {
    		const part = parts.shift();
    		const next = parts[0];

    		if (!obj[part]) obj[part] = /^\d+$/.test(next) ? [] : {};
    		obj = obj[part];
    	}

    	obj[parts[0]] = value;
    }

    class Material {
    	constructor(scene, vert, frag, defines) {
    		this.scene = scene;

    		const gl = scene.gl;
    		this.gl = gl;

    		const { program, uniforms, attributes } = compile(
    			gl,
    			'#version 300 es' + '\n\n' + scene.defines + defines + '\n\n' + vert_builtin + '\n\n' + vert,
    			'#version 300 es' + '\n\n' + scene.defines + defines + '\n\n' + frag_builtin + '\n\n' + frag
    		);

    		// console.log(vert.match(/(?:NAME\s)(.+)/g));

    		this.vertName = (vert.match(/(?:NAME\s)(.+)/g) !== null) ?
    			vert.match(/(?:NAME\s)(.+)/g)[0].substr(5) :
    			"default";

    		this.fragName = (frag.match(/(?:NAME\s)(.+)/g) !== null) ?
    			frag.match(/(?:NAME\s)(.+)/g)[0].substr(5) :
    			"default";

    		this.program = program;
    		this.uniforms = uniforms;
    		this.attributes = attributes;

    		this.uniform_locations = {};
    		this.uniforms.forEach(uniform => {
    			deep_set(this.uniform_locations, uniform.name, gl.getUniformLocation(this.program, uniform.name));
    		});

    		this.attribute_locations = {};
    		this.attributes.forEach(attribute => {
    			this.attribute_locations[attribute.name] = gl.getAttribLocation(this.program, attribute.name);
    		});

    		this.raw_values = {};
    		this.values = {};
    	}

    	set_uniforms(raw_values) {
    		let texture_index = 0;

    		this.uniforms.forEach(({ name, type, loc, setter, processor }) => {
    			if (name in raw_values) {
    				let data = raw_values[name];

    				if (data === this.raw_values[name]) return;

    				if (type === 35678) {
    					// texture
    					this.values[name] = {
    						texture: data.instantiate(this.scene)._,
    						index: texture_index++
    					};

    					return;
    				}

    				if (typeof data === 'number' && type !== 5126) {
    					// data provided was a number like 0x123456,
    					// but it needs to be an array. for now,
    					// assume it's a color, i.e. vec3
    					data = process_color(data);
    				}

    				this.values[name] = data;
    			}
    		});

    		this.raw_values = raw_values;
    	}

    	apply_uniforms(gl, builtins, model, process_extra_shader_components) {
    		// TODO if this is the only program, maybe
    		// we don't need to re-run this each time
    		this.uniforms.forEach(uniform => {
    			if (uniform.name in this.values) {
    				uniform.setter(gl, uniform.loc, this.values[uniform.name]);
    			}
    		});

    		if (typeof process_extra_shader_components === 'function') {
    			process_extra_shader_components(gl, this, model);
    		}
    	}

    	destroy() {
    		// TODO
    	}
    }

    var vert_default = "in vec3 position;\nin vec3 normal;\nout vec3 v_normal;\n#if defined(has_colormap) || defined(has_specularitymap) || defined(has_normalmap) || defined(has_bumpmap)\n#define has_textures true\n#endif\n#ifdef has_textures\nin vec2 uv;\nout vec2 v_uv;\n#endif\n#if defined(has_normalmap) || defined(has_bumpmap)\nout vec3 v_view_position;\n#endif\nout vec3 v_surface_to_light[NUM_LIGHTS];\n#ifdef has_specularity\nout vec3 v_surface_to_view[NUM_LIGHTS];\n#endif\n#ifdef USE_FOG\nout float v_fog_depth;\n#endif\nvoid main() {\n\tvec4 pos = vec4(position, 1.0);\n\tvec4 model_view_pos = VIEW * MODEL * pos;\n\tv_normal = (MODEL_INVERSE_TRANSPOSE * vec4(normal, 0.0)).xyz;\n\t#ifdef has_textures\n\tv_uv = uv;\n\t#endif\n\t#if defined(has_normalmap) || defined(has_bumpmap)\n\tv_view_position = model_view_pos.xyz;\n\t#endif\n\t#ifdef USE_FOG\n\tv_fog_depth = -model_view_pos.z;\n\t#endif\n\tfor (int i = 0; i < NUM_LIGHTS; i += 1) {\n\t\tPointLight light = POINT_LIGHTS[i];\n\t\tvec3 surface_world_position = (MODEL * pos).xyz;\n\t\tv_surface_to_light[i] = light.location - surface_world_position;\n\t\t#ifdef has_specularity\n\t\tv_surface_to_view[i] = CAMERA_WORLD_POSITION - surface_world_position;\n\t\t#endif\n\t}\n\tgl_Position = PROJECTION * model_view_pos;\n}\n";

    var frag_default = "#if defined(has_colormap) || defined(has_specularitymap) || defined(has_normalmap) || defined(has_bumpmap) || defined(has_emissivemap)\n#define has_textures true\n#endif\n#ifdef has_textures\nin vec2 v_uv;\n#endif\n#ifdef has_specularity\nuniform float specularity;\n#endif\n#ifdef has_colormap\nuniform sampler2D colormap;\n#endif\n#ifdef has_emissivemap\nuniform sampler2D emissivemap;\n#endif\n#ifdef has_specularitymap\nuniform sampler2D specularitymap;\n#endif\n#ifdef has_bumpmap\nuniform sampler2D bumpmap;\nvec2 dHdxy_fwd() {\n\tvec2 dSTdx = dFdx(v_uv);\n\tvec2 dSTdy = dFdy(v_uv);\n\tfloat Hll = texture(bumpmap, v_uv).x;\n\tfloat dBx = texture(bumpmap, v_uv + dSTdx).x - Hll;\n\tfloat dBy = texture(bumpmap, v_uv + dSTdy).x - Hll;\n\t#ifdef has_bumpscale\n\tHll *= bumpscale;\n\tdBx *= bumpscale;\n\tdBy *= bumpscale;\n\t#endif\n\treturn vec2(dBx, dBy);\n}\nvec3 perturbNormalArb(vec3 surf_pos, vec3 surface_normal, vec2 dHdxy) {\n\tvec3 vSigmaX = vec3(dFdx(surf_pos.x), dFdx(surf_pos.y), dFdx(surf_pos.z));\n\tvec3 vSigmaY = vec3(dFdy(surf_pos.x), dFdy(surf_pos.y), dFdy(surf_pos.z));\n\tvec3 vN = surface_normal;\n\tvec3 R1 = cross(vSigmaY, vN);\n\tvec3 R2 = cross(vN, vSigmaX);\n\tfloat fDet = dot(vSigmaX, R1);\n\tfDet *= (float(gl_FrontFacing) * 2.0 - 1.0);\n\tvec3 vGrad = sign(fDet) * (dHdxy.x * R1 + dHdxy.y * R2);\n\treturn normalize(abs(fDet) * surface_normal - vGrad);\n}\n#endif\n#ifdef has_bumpscale\nuniform float bumpscale;\n#endif\n#ifdef has_normalmap\nuniform sampler2D normalmap;\nvec3 perturbNormal2Arb(vec3 eye_pos, vec3 surface_normal) {\n\tvec3 q0 = vec3(dFdx(eye_pos.x), dFdx(eye_pos.y), dFdx(eye_pos.z));\n\tvec3 q1 = vec3(dFdy(eye_pos.x), dFdy(eye_pos.y), dFdy(eye_pos.z));\n\tvec2 st0 = dFdx(v_uv.st);\n\tvec2 st1 = dFdy(v_uv.st);\n\tif (length(q0) == 0.0) {\n\t\treturn surface_normal;\n\t}\n\tfloat scale = sign(st1.t * st0.s - st0.t * st1.s);\n\tvec3 S = normalize((q0 * st1.t - q1 * st0.t) * scale);\n\tvec3 T = normalize((-q0 * st1.s + q1 * st0.s) * scale);\n\tvec3 N = normalize(surface_normal);\n\tmat3 tsn = mat3(S, T, N);\n\tvec3 mapN = texture(normalmap, v_uv).xyz * 2.0 - 1.0;\n\tmapN.xy *= (float(gl_FrontFacing) * 2.0 - 1.0);\n\treturn normalize(tsn * mapN);\n}\n#endif\n#ifdef has_color\nuniform vec3 color;\n#endif\n#ifdef has_emissive\nuniform vec3 emissive;\n#endif\n#ifdef has_alpha\nuniform float alpha;\n#endif\n#ifdef USE_FOG\nuniform vec3 FOG_COLOR;\nuniform float FOG_DENSITY;\nin float v_fog_depth;\n#endif\nin vec3 v_normal;\n#if defined(has_normalmap) || defined(has_bumpmap)\nin vec3 v_view_position;\n#endif\nin vec3 v_surface_to_light[NUM_LIGHTS];\nin vec3 v_surface_to_view[NUM_LIGHTS];\nout mediump vec4 fragColor;\nvoid main () {\n\tvec3 normal = normalize(v_normal);\n\t#ifdef has_bumpmap\n\t\tnormal = perturbNormalArb(-v_view_position, normal, dHdxy_fwd());\n\t#elif defined(has_normalmap)\n\t\tnormal = perturbNormal2Arb(-v_view_position, normal);\n\t#endif\n\tvec3 lighting = vec3(0.0);\n\tvec3 spec_amount = vec3(0.0);\n\tfor (int i = 0; i < NUM_LIGHTS; i += 1) {\n\t\tDirectionalLight light = DIRECTIONAL_LIGHTS[i];\n\t\tfloat multiplier = clamp(dot(normal, -light.direction), 0.0, 1.0);\n\t\tlighting += multiplier * light.color * light.intensity;\n\t}\n\tfor (int i = 0; i < NUM_LIGHTS; i += 1) {\n\t\tPointLight light = POINT_LIGHTS[i];\n\t\tvec3 surface_to_light = normalize(v_surface_to_light[i]);\n\t\tfloat multiplier = clamp(dot(normal, surface_to_light), 0.0, 1.0);\t\tlighting += multiplier * light.color * light.intensity;\n\t\t#ifdef has_specularity\n\t\t\tvec3 surface_to_view = normalize(v_surface_to_view[i]);\n\t\t\tvec3 half_vector = normalize(surface_to_light + surface_to_view);\n\t\t\tfloat spec = clamp(dot(normal, half_vector), 0.0, 1.0);\n\t\t\t#ifdef has_specularitymap\n\t\t\tspec *= texture(specularitymap, v_uv).r;\n\t\t\t#endif\n\t\t\tspec_amount += specularity * spec * light.color * light.intensity;\n\t\t#endif\n\t}\n\t#if defined(has_colormap)\n\tfragColor = texture(colormap, v_uv);\n\t#elif defined(has_color)\n\tfragColor = vec4(color, 1.0);\n\t#endif\n\t#ifdef has_alpha\n\tfragColor.a *= alpha;\n\t#endif\n\tfragColor.rgb *= mix(AMBIENT_LIGHT, vec3(1.0, 1.0, 1.0), lighting);\n\tfragColor.rgb += spec_amount;\n\t#if defined(has_emissivemap)\n\tfragColor.rgb += texture(emissivemap, v_uv);\n\t#elif defined(has_emissive)\n\tfragColor.rgb += emissive;\n\t#endif\n\t#ifdef USE_FOG\n\tfragColor.rgb = mix(\n\t\tfragColor.rgb,\n\t\tFOG_COLOR,\n\t\t1.0 - exp(-FOG_DENSITY * FOG_DENSITY * v_fog_depth * v_fog_depth)\n\t);\n\t#endif\n}\n";

    /* node_modules/@sveltejs/gl/scene/Mesh/index.svelte generated by Svelte v3.24.0 */

    const { Object: Object_1 } = globals;

    function create_fragment$4(ctx) {
    	const block = {
    		c: noop,
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: noop,
    		p: noop,
    		i: noop,
    		o: noop,
    		d: noop
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let $ctm;
    	let { location = [0, 0, 0] } = $$props;
    	let { rotation = [0, 0, 0] } = $$props; // TODO make it possible to set a quaternion as a prop?
    	let { scale = 1 } = $$props;
    	let { geometry } = $$props;
    	let { vert = vert_default } = $$props;
    	let { frag = frag_default } = $$props;
    	let { uniforms = {} } = $$props;
    	let { depthTest = undefined } = $$props;
    	let { doubleSided = undefined } = $$props;
    	let { transparent = false } = $$props;
    	const scene = get_scene();
    	const layer = get_layer();
    	const { ctm } = get_parent();
    	validate_store(ctm, "ctm");
    	component_subscribe($$self, ctm, value => $$invalidate(18, $ctm = value));
    	const out = create();
    	const out2 = create();
    	const mesh = {};
    	let existing = true; // track if we've previously added this mesh

    	const add_mesh = () => {
    		layer.add_mesh(mesh, existing);
    		existing = false;
    	};

    	onDestroy(() => {
    		if (mesh.material) mesh.material.destroy();
    	});

    	const writable_props = [
    		"location",
    		"rotation",
    		"scale",
    		"geometry",
    		"vert",
    		"frag",
    		"uniforms",
    		"depthTest",
    		"doubleSided",
    		"transparent"
    	];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Mesh> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Mesh", $$slots, []);

    	$$self.$set = $$props => {
    		if ("location" in $$props) $$invalidate(1, location = $$props.location);
    		if ("rotation" in $$props) $$invalidate(2, rotation = $$props.rotation);
    		if ("scale" in $$props) $$invalidate(3, scale = $$props.scale);
    		if ("geometry" in $$props) $$invalidate(4, geometry = $$props.geometry);
    		if ("vert" in $$props) $$invalidate(5, vert = $$props.vert);
    		if ("frag" in $$props) $$invalidate(6, frag = $$props.frag);
    		if ("uniforms" in $$props) $$invalidate(7, uniforms = $$props.uniforms);
    		if ("depthTest" in $$props) $$invalidate(8, depthTest = $$props.depthTest);
    		if ("doubleSided" in $$props) $$invalidate(9, doubleSided = $$props.doubleSided);
    		if ("transparent" in $$props) $$invalidate(10, transparent = $$props.transparent);
    	};

    	$$self.$capture_state = () => ({
    		onDestroy,
    		beforeUpdate,
    		writable,
    		get_scene,
    		get_layer,
    		get_parent,
    		process_color,
    		Material,
    		vert_default,
    		frag_default,
    		mat4,
    		quat,
    		location,
    		rotation,
    		scale,
    		geometry,
    		vert,
    		frag,
    		uniforms,
    		depthTest,
    		doubleSided,
    		transparent,
    		scene,
    		layer,
    		ctm,
    		out,
    		out2,
    		mesh,
    		existing,
    		add_mesh,
    		scale_array,
    		quaternion,
    		matrix,
    		model,
    		$ctm,
    		defines,
    		material_instance,
    		geometry_instance
    	});

    	$$self.$inject_state = $$props => {
    		if ("location" in $$props) $$invalidate(1, location = $$props.location);
    		if ("rotation" in $$props) $$invalidate(2, rotation = $$props.rotation);
    		if ("scale" in $$props) $$invalidate(3, scale = $$props.scale);
    		if ("geometry" in $$props) $$invalidate(4, geometry = $$props.geometry);
    		if ("vert" in $$props) $$invalidate(5, vert = $$props.vert);
    		if ("frag" in $$props) $$invalidate(6, frag = $$props.frag);
    		if ("uniforms" in $$props) $$invalidate(7, uniforms = $$props.uniforms);
    		if ("depthTest" in $$props) $$invalidate(8, depthTest = $$props.depthTest);
    		if ("doubleSided" in $$props) $$invalidate(9, doubleSided = $$props.doubleSided);
    		if ("transparent" in $$props) $$invalidate(10, transparent = $$props.transparent);
    		if ("existing" in $$props) existing = $$props.existing;
    		if ("scale_array" in $$props) $$invalidate(14, scale_array = $$props.scale_array);
    		if ("quaternion" in $$props) $$invalidate(15, quaternion = $$props.quaternion);
    		if ("matrix" in $$props) $$invalidate(16, matrix = $$props.matrix);
    		if ("model" in $$props) $$invalidate(17, model = $$props.model);
    		if ("defines" in $$props) $$invalidate(19, defines = $$props.defines);
    		if ("material_instance" in $$props) $$invalidate(20, material_instance = $$props.material_instance);
    		if ("geometry_instance" in $$props) $$invalidate(21, geometry_instance = $$props.geometry_instance);
    	};

    	let scale_array;
    	let quaternion;
    	let matrix;
    	let model;
    	let defines;
    	let material_instance;
    	let geometry_instance;

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*scale*/ 8) {
    			 $$invalidate(14, scale_array = typeof scale === "number"
    			? [scale, scale, scale]
    			: scale);
    		}

    		if ($$self.$$.dirty & /*quaternion, rotation*/ 32772) {
    			 $$invalidate(15, quaternion = fromEuler(quaternion || create$4(), ...rotation));
    		}

    		if ($$self.$$.dirty & /*matrix, quaternion, location, scale_array*/ 114690) {
    			 $$invalidate(16, matrix = fromRotationTranslationScale(matrix || create(), quaternion, location, scale_array));
    		}

    		if ($$self.$$.dirty & /*model, $ctm, matrix*/ 458752) {
    			 $$invalidate(17, model = multiply(model || create(), $ctm, matrix));
    		}

    		if ($$self.$$.dirty & /*uniforms*/ 128) {
    			 $$invalidate(19, defines = Object.keys(uniforms).filter(k => uniforms[k] != null).map(k => `#define has_${k} true\n`).join(""));
    		}

    		if ($$self.$$.dirty & /*vert, frag, defines*/ 524384) {
    			 $$invalidate(20, material_instance = new Material(scene, vert, frag, defines));
    		}

    		if ($$self.$$.dirty & /*material_instance, uniforms*/ 1048704) {
    			 material_instance.set_uniforms(uniforms);
    		}

    		if ($$self.$$.dirty & /*geometry, material_instance*/ 1048592) {
    			 $$invalidate(21, geometry_instance = geometry.instantiate(scene, material_instance.program));
    		}

    		if ($$self.$$.dirty & /*model*/ 131072) {
    			 mesh.model = model;
    		}

    		if ($$self.$$.dirty & /*model*/ 131072) {
    			 mesh.model_inverse_transpose = (invert(out2, model), transpose(out2, out2));
    		}

    		if ($$self.$$.dirty & /*material_instance*/ 1048576) {
    			 mesh.material = material_instance;
    		}

    		if ($$self.$$.dirty & /*geometry_instance*/ 2097152) {
    			 mesh.geometry = geometry_instance;
    		}

    		if ($$self.$$.dirty & /*depthTest*/ 256) {
    			 mesh.depthTest = depthTest;
    		}

    		if ($$self.$$.dirty & /*doubleSided*/ 512) {
    			 mesh.doubleSided = doubleSided;
    		}

    		if ($$self.$$.dirty & /*transparent*/ 1024) {
    			 mesh.transparent = transparent;
    		}

    		if ($$self.$$.dirty & /*transparent*/ 1024) {
    			 (add_mesh());
    		}

    		if ($$self.$$.dirty & /*model, transparent*/ 132096) {
    			 (transparent && (layer.needs_transparency_sort = true));
    		}

    		if ($$self.$$.dirty & /*geometry_instance, model, uniforms*/ 2228352) {
    			 (scene.invalidate());
    		}
    	};

    	return [
    		ctm,
    		location,
    		rotation,
    		scale,
    		geometry,
    		vert,
    		frag,
    		uniforms,
    		depthTest,
    		doubleSided,
    		transparent
    	];
    }

    class Mesh extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
    			location: 1,
    			rotation: 2,
    			scale: 3,
    			geometry: 4,
    			vert: 5,
    			frag: 6,
    			uniforms: 7,
    			depthTest: 8,
    			doubleSided: 9,
    			transparent: 10
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Mesh",
    			options,
    			id: create_fragment$4.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*geometry*/ ctx[4] === undefined && !("geometry" in props)) {
    			console.warn("<Mesh> was created without expected prop 'geometry'");
    		}
    	}

    	get location() {
    		throw new Error("<Mesh>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set location(value) {
    		throw new Error("<Mesh>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotation() {
    		throw new Error("<Mesh>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotation(value) {
    		throw new Error("<Mesh>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get scale() {
    		throw new Error("<Mesh>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set scale(value) {
    		throw new Error("<Mesh>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get geometry() {
    		throw new Error("<Mesh>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set geometry(value) {
    		throw new Error("<Mesh>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get vert() {
    		throw new Error("<Mesh>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set vert(value) {
    		throw new Error("<Mesh>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get frag() {
    		throw new Error("<Mesh>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set frag(value) {
    		throw new Error("<Mesh>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get uniforms() {
    		throw new Error("<Mesh>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set uniforms(value) {
    		throw new Error("<Mesh>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get depthTest() {
    		throw new Error("<Mesh>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set depthTest(value) {
    		throw new Error("<Mesh>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get doubleSided() {
    		throw new Error("<Mesh>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set doubleSided(value) {
    		throw new Error("<Mesh>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transparent() {
    		throw new Error("<Mesh>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transparent(value) {
    		throw new Error("<Mesh>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@sveltejs/gl/scene/Point.svelte generated by Svelte v3.24.0 */

    const get_default_slot_changes$1 = dirty => ({
    	x: dirty & /*x*/ 1,
    	y: dirty & /*y*/ 2,
    	vector: dirty & /*vector*/ 4
    });

    const get_default_slot_context$1 = ctx => ({
    	x: /*x*/ ctx[0],
    	y: /*y*/ ctx[1],
    	vector: /*vector*/ ctx[2]
    });

    function create_fragment$5(ctx) {
    	let current;
    	const default_slot_template = /*$$slots*/ ctx[11].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], get_default_slot_context$1);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope, x, y, vector*/ 1031) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, get_default_slot_changes$1, get_default_slot_context$1);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let $ctm;
    	let $projection;
    	let $view;
    	let $width;
    	let $height;
    	let { location = [0, 0, 0] } = $$props;
    	let { direction = [0, 0, 0] } = $$props;
    	let { x = 0 } = $$props;
    	let { y = 0 } = $$props;
    	let { vector = new Float32Array(3) } = $$props;
    	const { width, height, camera_matrix, view, projection } = get_scene();
    	validate_store(width, "width");
    	component_subscribe($$self, width, value => $$invalidate(18, $width = value));
    	validate_store(height, "height");
    	component_subscribe($$self, height, value => $$invalidate(19, $height = value));
    	validate_store(view, "view");
    	component_subscribe($$self, view, value => $$invalidate(17, $view = value));
    	validate_store(projection, "projection");
    	component_subscribe($$self, projection, value => $$invalidate(16, $projection = value));
    	const { ctm } = get_parent();
    	validate_store(ctm, "ctm");
    	component_subscribe($$self, ctm, value => $$invalidate(14, $ctm = value));
    	let projected = new Float32Array(3);
    	const writable_props = ["location", "direction", "x", "y", "vector"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Point> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Point", $$slots, ['default']);

    	$$self.$set = $$props => {
    		if ("location" in $$props) $$invalidate(8, location = $$props.location);
    		if ("direction" in $$props) $$invalidate(9, direction = $$props.direction);
    		if ("x" in $$props) $$invalidate(0, x = $$props.x);
    		if ("y" in $$props) $$invalidate(1, y = $$props.y);
    		if ("vector" in $$props) $$invalidate(2, vector = $$props.vector);
    		if ("$$scope" in $$props) $$invalidate(10, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		get_scene,
    		get_parent,
    		get_camera,
    		vec3,
    		mat4,
    		quat,
    		location,
    		direction,
    		x,
    		y,
    		vector,
    		width,
    		height,
    		camera_matrix,
    		view,
    		projection,
    		ctm,
    		projected,
    		world_position,
    		$ctm,
    		model_view_projection,
    		$projection,
    		$view,
    		$width,
    		$height
    	});

    	$$self.$inject_state = $$props => {
    		if ("location" in $$props) $$invalidate(8, location = $$props.location);
    		if ("direction" in $$props) $$invalidate(9, direction = $$props.direction);
    		if ("x" in $$props) $$invalidate(0, x = $$props.x);
    		if ("y" in $$props) $$invalidate(1, y = $$props.y);
    		if ("vector" in $$props) $$invalidate(2, vector = $$props.vector);
    		if ("projected" in $$props) $$invalidate(12, projected = $$props.projected);
    		if ("world_position" in $$props) $$invalidate(13, world_position = $$props.world_position);
    		if ("model_view_projection" in $$props) $$invalidate(15, model_view_projection = $$props.model_view_projection);
    	};

    	let world_position;
    	let model_view_projection;

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*world_position, location, $ctm*/ 24832) {
    			 $$invalidate(13, world_position = transformMat4(world_position || create$1(), location, $ctm));
    		}

    		if ($$self.$$.dirty & /*$projection, $view, $ctm*/ 212992) {
    			 $$invalidate(15, model_view_projection = multiply(create(), multiply(create(), $projection, $view), $ctm));
    		}

    		if ($$self.$$.dirty & /*projected, location, model_view_projection*/ 37120) {
    			 $$invalidate(12, projected = transformMat4(projected, location, model_view_projection));
    		}

    		if ($$self.$$.dirty & /*location, direction, world_position, vector, $ctm, $view*/ 156420) {
    			 {

    				const b_model = [
    					location[0] + direction[0],
    					location[1] + direction[1],
    					location[2] + direction[2]
    				];

    				const a_world = world_position;
    				const b_world = transformMat4(vector, b_model, $ctm);
    				const a_view = transformMat4(create$1(), a_world, $view);
    				const b_view = transformMat4(create$1(), b_world, $view);
    				$$invalidate(2, vector[0] = b_view[0] - a_view[0], vector);
    				$$invalidate(2, vector[1] = b_view[1] - a_view[1], vector);
    				$$invalidate(2, vector[2] = b_view[2] - a_view[2], vector);
    				const mag = Math.sqrt(vector[0] * vector[0] + vector[1] * vector[1] + vector[2] * vector[2]);
    				$$invalidate(2, vector[0] /= mag, vector);
    				$$invalidate(2, vector[1] /= mag, vector);
    				$$invalidate(2, vector[2] /= mag, vector);
    			}
    		}

    		if ($$self.$$.dirty & /*$width, projected*/ 266240) {
    			 $$invalidate(0, x = $width * (projected[0] + 1) / 2);
    		}

    		if ($$self.$$.dirty & /*$height, projected*/ 528384) {
    			 $$invalidate(1, y = $height * (1 - (projected[1] + 1) / 2));
    		}
    	};

    	return [
    		x,
    		y,
    		vector,
    		width,
    		height,
    		view,
    		projection,
    		ctm,
    		location,
    		direction,
    		$$scope,
    		$$slots
    	];
    }

    class Point extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {
    			location: 8,
    			direction: 9,
    			x: 0,
    			y: 1,
    			vector: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Point",
    			options,
    			id: create_fragment$5.name
    		});
    	}

    	get location() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set location(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get direction() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set direction(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get x() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set x(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get y() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set y(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get vector() {
    		throw new Error("<Point>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set vector(value) {
    		throw new Error("<Point>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@sveltejs/gl/scene/Overlay.svelte generated by Svelte v3.24.0 */
    const file$3 = "node_modules/@sveltejs/gl/scene/Overlay.svelte";
    const get_default_slot_changes$2 = dirty => ({ vector: dirty & /*vector*/ 256 });
    const get_default_slot_context$2 = ctx => ({ vector: /*vector*/ ctx[8] });

    // (11:0) <Point {location} {direction} let:x let:y let:vector>
    function create_default_slot(ctx) {
    	let span;
    	let current;
    	const default_slot_template = /*$$slots*/ ctx[4].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], get_default_slot_context$2);

    	const block = {
    		c: function create() {
    			span = element("span");
    			if (default_slot) default_slot.c();
    			attr_dev(span, "class", "overlay svelte-1l5epy8");
    			set_style(span, "transform", "translate3d(" + /*px*/ ctx[2](/*x*/ ctx[6]) + ", " + /*px*/ ctx[2](/*y*/ ctx[7]) + ", 0)");
    			add_location(span, file$3, 11, 1, 244);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);

    			if (default_slot) {
    				default_slot.m(span, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope, vector*/ 288) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], dirty, get_default_slot_changes$2, get_default_slot_context$2);
    				}
    			}

    			if (!current || dirty & /*px, x, y*/ 196) {
    				set_style(span, "transform", "translate3d(" + /*px*/ ctx[2](/*x*/ ctx[6]) + ", " + /*px*/ ctx[2](/*y*/ ctx[7]) + ", 0)");
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(11:0) <Point {location} {direction} let:x let:y let:vector>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let point;
    	let current;

    	point = new Point({
    			props: {
    				location: /*location*/ ctx[0],
    				direction: /*direction*/ ctx[1],
    				$$slots: {
    					default: [
    						create_default_slot,
    						({ x, y, vector }) => ({ 6: x, 7: y, 8: vector }),
    						({ x, y, vector }) => (x ? 64 : 0) | (y ? 128 : 0) | (vector ? 256 : 0)
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(point.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(point, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const point_changes = {};
    			if (dirty & /*location*/ 1) point_changes.location = /*location*/ ctx[0];
    			if (dirty & /*direction*/ 2) point_changes.direction = /*direction*/ ctx[1];

    			if (dirty & /*$$scope, px, x, y, vector*/ 484) {
    				point_changes.$$scope = { dirty, ctx };
    			}

    			point.$set(point_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(point.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(point.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(point, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { location } = $$props;
    	let { direction = undefined } = $$props;
    	let { snap = false } = $$props;
    	const writable_props = ["location", "direction", "snap"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Overlay> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Overlay", $$slots, ['default']);

    	$$self.$set = $$props => {
    		if ("location" in $$props) $$invalidate(0, location = $$props.location);
    		if ("direction" in $$props) $$invalidate(1, direction = $$props.direction);
    		if ("snap" in $$props) $$invalidate(3, snap = $$props.snap);
    		if ("$$scope" in $$props) $$invalidate(5, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ Point, location, direction, snap, px });

    	$$self.$inject_state = $$props => {
    		if ("location" in $$props) $$invalidate(0, location = $$props.location);
    		if ("direction" in $$props) $$invalidate(1, direction = $$props.direction);
    		if ("snap" in $$props) $$invalidate(3, snap = $$props.snap);
    		if ("px" in $$props) $$invalidate(2, px = $$props.px);
    	};

    	let px;

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*snap*/ 8) {
    			 $$invalidate(2, px = n => `${snap ? Math.round(n) : n}px`);
    		}
    	};

    	return [location, direction, px, snap, $$slots, $$scope];
    }

    class Overlay extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, { location: 0, direction: 1, snap: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Overlay",
    			options,
    			id: create_fragment$6.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*location*/ ctx[0] === undefined && !("location" in props)) {
    			console.warn("<Overlay> was created without expected prop 'location'");
    		}
    	}

    	get location() {
    		throw new Error("<Overlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set location(value) {
    		throw new Error("<Overlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get direction() {
    		throw new Error("<Overlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set direction(value) {
    		throw new Error("<Overlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get snap() {
    		throw new Error("<Overlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set snap(value) {
    		throw new Error("<Overlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@sveltejs/gl/scene/Target.svelte generated by Svelte v3.24.0 */

    function create_fragment$7(ctx) {
    	const block = {
    		c: noop,
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: noop,
    		p: noop,
    		i: noop,
    		o: noop,
    		d: noop
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let $ctm;
    	let { id } = $$props;
    	let { location = [0, 0, 0] } = $$props;
    	const { get_target } = get_scene();
    	const { ctm } = get_parent();
    	validate_store(ctm, "ctm");
    	component_subscribe($$self, ctm, value => $$invalidate(8, $ctm = value));
    	let model = create();
    	const world_position = new Float32Array(model.buffer, 12 * 4, 3);
    	const loc = new Float32Array(3);
    	const writable_props = ["id", "location"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Target> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Target", $$slots, []);

    	$$self.$set = $$props => {
    		if ("id" in $$props) $$invalidate(1, id = $$props.id);
    		if ("location" in $$props) $$invalidate(2, location = $$props.location);
    	};

    	$$self.$capture_state = () => ({
    		writable,
    		get_scene,
    		get_parent,
    		mat4,
    		id,
    		location,
    		get_target,
    		ctm,
    		model,
    		world_position,
    		loc,
    		x,
    		y,
    		z,
    		$ctm
    	});

    	$$self.$inject_state = $$props => {
    		if ("id" in $$props) $$invalidate(1, id = $$props.id);
    		if ("location" in $$props) $$invalidate(2, location = $$props.location);
    		if ("model" in $$props) $$invalidate(3, model = $$props.model);
    		if ("x" in $$props) $$invalidate(5, x = $$props.x);
    		if ("y" in $$props) $$invalidate(6, y = $$props.y);
    		if ("z" in $$props) $$invalidate(7, z = $$props.z);
    	};

    	let x;
    	let y;
    	let z;

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*location*/ 4) {
    			// break `location` out into its components, so that we can
    			// skip downstream computations. TODO would be nice if there
    			// was a neater way to achieve this
    			 $$invalidate(5, x = location[0]);
    		}

    		if ($$self.$$.dirty & /*location*/ 4) {
    			 $$invalidate(6, y = location[1]);
    		}

    		if ($$self.$$.dirty & /*location*/ 4) {
    			 $$invalidate(7, z = location[2]);
    		}

    		if ($$self.$$.dirty & /*x, y, z*/ 224) {
    			 ($$invalidate(4, loc[0] = x, loc), $$invalidate(4, loc[1] = y, loc), $$invalidate(4, loc[2] = z, loc));
    		}

    		if ($$self.$$.dirty & /*model, $ctm, loc*/ 280) {
    			 $$invalidate(3, model = translate(model, $ctm, loc));
    		}

    		if ($$self.$$.dirty & /*model, id*/ 10) {
    			 (get_target(id).set(world_position));
    		}
    	};

    	return [ctm, id, location];
    }

    class Target extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, { id: 1, location: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Target",
    			options,
    			id: create_fragment$7.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*id*/ ctx[1] === undefined && !("id" in props)) {
    			console.warn("<Target> was created without expected prop 'id'");
    		}
    	}

    	get id() {
    		throw new Error("<Target>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<Target>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get location() {
    		throw new Error("<Target>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set location(value) {
    		throw new Error("<Target>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@sveltejs/gl/scene/lights/AmbientLight.svelte generated by Svelte v3.24.0 */

    function create_fragment$8(ctx) {
    	const block = {
    		c: noop,
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: noop,
    		p: noop,
    		i: noop,
    		o: noop,
    		d: noop
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { color = [1, 1, 1] } = $$props;
    	let { intensity = 0.2 } = $$props;
    	const scene = get_scene();
    	const light = {};
    	scene.add_ambient_light(light);
    	const writable_props = ["color", "intensity"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<AmbientLight> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("AmbientLight", $$slots, []);

    	$$self.$set = $$props => {
    		if ("color" in $$props) $$invalidate(0, color = $$props.color);
    		if ("intensity" in $$props) $$invalidate(1, intensity = $$props.intensity);
    	};

    	$$self.$capture_state = () => ({
    		get_scene,
    		process_color,
    		color,
    		intensity,
    		scene,
    		light
    	});

    	$$self.$inject_state = $$props => {
    		if ("color" in $$props) $$invalidate(0, color = $$props.color);
    		if ("intensity" in $$props) $$invalidate(1, intensity = $$props.intensity);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*color*/ 1) {
    			 $$invalidate(2, light.color = process_color(color), light);
    		}

    		if ($$self.$$.dirty & /*intensity*/ 2) {
    			 $$invalidate(2, light.intensity = intensity, light);
    		}

    		if ($$self.$$.dirty & /*light*/ 4) {
    			 (scene.invalidate());
    		}
    	};

    	return [color, intensity];
    }

    class AmbientLight extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, { color: 0, intensity: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AmbientLight",
    			options,
    			id: create_fragment$8.name
    		});
    	}

    	get color() {
    		throw new Error("<AmbientLight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<AmbientLight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get intensity() {
    		throw new Error("<AmbientLight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set intensity(value) {
    		throw new Error("<AmbientLight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@sveltejs/gl/scene/lights/DirectionalLight.svelte generated by Svelte v3.24.0 */

    function create_fragment$9(ctx) {
    	const block = {
    		c: noop,
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: noop,
    		p: noop,
    		i: noop,
    		o: noop,
    		d: noop
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let $ctm;
    	let { direction = new Float32Array([-1, -1, -1]) } = $$props;
    	let { color = new Float32Array([1, 1, 1]) } = $$props;
    	let { intensity = 1 } = $$props;
    	const scene = get_scene();
    	const { ctm } = get_parent();
    	validate_store(ctm, "ctm");
    	component_subscribe($$self, ctm, value => $$invalidate(6, $ctm = value));
    	const light = {};
    	scene.add_directional_light(light);
    	const writable_props = ["direction", "color", "intensity"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<DirectionalLight> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("DirectionalLight", $$slots, []);

    	$$self.$set = $$props => {
    		if ("direction" in $$props) $$invalidate(1, direction = $$props.direction);
    		if ("color" in $$props) $$invalidate(2, color = $$props.color);
    		if ("intensity" in $$props) $$invalidate(3, intensity = $$props.intensity);
    	};

    	$$self.$capture_state = () => ({
    		get_scene,
    		get_parent,
    		process_color,
    		mat4,
    		vec3,
    		direction,
    		color,
    		intensity,
    		scene,
    		ctm,
    		light,
    		multiplied,
    		$ctm
    	});

    	$$self.$inject_state = $$props => {
    		if ("direction" in $$props) $$invalidate(1, direction = $$props.direction);
    		if ("color" in $$props) $$invalidate(2, color = $$props.color);
    		if ("intensity" in $$props) $$invalidate(3, intensity = $$props.intensity);
    		if ("multiplied" in $$props) $$invalidate(5, multiplied = $$props.multiplied);
    	};

    	let multiplied;

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*multiplied, direction, $ctm*/ 98) {
    			 $$invalidate(5, multiplied = transformMat4(multiplied || create$1(), direction, $ctm));
    		}

    		if ($$self.$$.dirty & /*light, multiplied*/ 48) {
    			 $$invalidate(4, light.direction = normalize$1(light.direction || create$1(), multiplied), light);
    		}

    		if ($$self.$$.dirty & /*color*/ 4) {
    			 $$invalidate(4, light.color = process_color(color), light);
    		}

    		if ($$self.$$.dirty & /*intensity*/ 8) {
    			 $$invalidate(4, light.intensity = intensity, light);
    		}

    		if ($$self.$$.dirty & /*light*/ 16) {
    			 (scene.invalidate());
    		}
    	};

    	return [ctm, direction, color, intensity];
    }

    class DirectionalLight extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, { direction: 1, color: 2, intensity: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "DirectionalLight",
    			options,
    			id: create_fragment$9.name
    		});
    	}

    	get direction() {
    		throw new Error("<DirectionalLight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set direction(value) {
    		throw new Error("<DirectionalLight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<DirectionalLight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<DirectionalLight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get intensity() {
    		throw new Error("<DirectionalLight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set intensity(value) {
    		throw new Error("<DirectionalLight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@sveltejs/gl/scene/lights/PointLight.svelte generated by Svelte v3.24.0 */

    function create_fragment$a(ctx) {
    	const block = {
    		c: noop,
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: noop,
    		p: noop,
    		i: noop,
    		o: noop,
    		d: noop
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let $ctm;
    	let { location = new Float32Array([-1, -1, -1]) } = $$props;
    	let { color = new Float32Array([1, 1, 1]) } = $$props;
    	let { intensity = 1 } = $$props;
    	const scene = get_scene();
    	const { ctm } = get_parent();
    	validate_store(ctm, "ctm");
    	component_subscribe($$self, ctm, value => $$invalidate(5, $ctm = value));

    	let light = {
    		// TODO change to a const once bug is fixed
    		location: create$1(),
    		color: null,
    		intensity: null
    	};

    	scene.add_point_light(light);
    	const writable_props = ["location", "color", "intensity"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PointLight> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("PointLight", $$slots, []);

    	$$self.$set = $$props => {
    		if ("location" in $$props) $$invalidate(1, location = $$props.location);
    		if ("color" in $$props) $$invalidate(2, color = $$props.color);
    		if ("intensity" in $$props) $$invalidate(3, intensity = $$props.intensity);
    	};

    	$$self.$capture_state = () => ({
    		get_scene,
    		get_parent,
    		process_color,
    		mat4,
    		vec3,
    		location,
    		color,
    		intensity,
    		scene,
    		ctm,
    		light,
    		$ctm
    	});

    	$$self.$inject_state = $$props => {
    		if ("location" in $$props) $$invalidate(1, location = $$props.location);
    		if ("color" in $$props) $$invalidate(2, color = $$props.color);
    		if ("intensity" in $$props) $$invalidate(3, intensity = $$props.intensity);
    		if ("light" in $$props) $$invalidate(4, light = $$props.light);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*light, location, $ctm*/ 50) {
    			 $$invalidate(4, light.location = transformMat4(light.location, location, $ctm), light);
    		}

    		if ($$self.$$.dirty & /*color*/ 4) {
    			 $$invalidate(4, light.color = process_color(color), light);
    		}

    		if ($$self.$$.dirty & /*intensity*/ 8) {
    			 $$invalidate(4, light.intensity = intensity, light);
    		}

    		if ($$self.$$.dirty & /*light*/ 16) {
    			 (scene.invalidate());
    		}
    	};

    	return [ctm, location, color, intensity];
    }

    class PointLight extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, { location: 1, color: 2, intensity: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PointLight",
    			options,
    			id: create_fragment$a.name
    		});
    	}

    	get location() {
    		throw new Error("<PointLight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set location(value) {
    		throw new Error("<PointLight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<PointLight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<PointLight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get intensity() {
    		throw new Error("<PointLight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set intensity(value) {
    		throw new Error("<PointLight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var default_sort = function (item, needle) { return item - needle; };
    function binarySearch(array, search, fn) {
        if (fn === void 0) { fn = default_sort; }
        var low = 0;
        var high = array.length - 1;
        var sort = fn.length === 1
            ? function (item, needle) { return fn(item) - search; }
            : fn;
        while (low <= high) {
            var i = (high + low) >> 1;
            var d = sort(array[i], search);
            if (d < 0) {
                low = i + 1;
            }
            else if (d > 0) {
                high = i - 1;
            }
            else {
                return i;
            }
        }
        return -low - 1;
    }

    function pickRandom(array) {
        var i = ~~(Math.random() * array.length);
        return array[i];
    }

    // http://bost.ocks.org/mike/shuffle/
    function shuffle(array) {
        var m = array.length;
        // While there remain elements to shuffle…
        while (m > 0) {
            // Pick a remaining element…
            var i = Math.floor(Math.random() * m--);
            // And swap it with the current element.
            var t = array[m];
            array[m] = array[i];
            array[i] = t;
        }
        return array;
    }

    function queue(max) {
        if (max === void 0) { max = 4; }
        var items = []; // TODO
        var pending = 0;
        var closed = false;
        var fulfil_closed;
        function dequeue() {
            if (pending === 0 && items.length === 0) {
                if (fulfil_closed)
                    fulfil_closed();
            }
            if (pending >= max)
                return;
            if (items.length === 0)
                return;
            pending += 1;
            var _a = items.shift(), fn = _a.fn, fulfil = _a.fulfil, reject = _a.reject;
            var promise = fn();
            try {
                promise.then(fulfil, reject).then(function () {
                    pending -= 1;
                    dequeue();
                });
            }
            catch (err) {
                reject(err);
                pending -= 1;
                dequeue();
            }
            dequeue();
        }
        return {
            add: function (fn) {
                if (closed) {
                    throw new Error("Cannot add to a closed queue");
                }
                return new Promise(function (fulfil, reject) {
                    items.push({ fn: fn, fulfil: fulfil, reject: reject });
                    dequeue();
                });
            },
            close: function () {
                closed = true;
                return new Promise(function (fulfil, reject) {
                    if (pending === 0) {
                        fulfil();
                    }
                    else {
                        fulfil_closed = fulfil;
                    }
                });
            }
        };
    }

    function createSprite(width, height, fn) {
        var canvas = document.createElement('canvas');
        canvas.width = width;
        canvas.height = height;
        var ctx = canvas.getContext('2d');
        fn(ctx, canvas);
        return canvas;
    }

    function clamp(num, min, max) {
        return num < min ? min : num > max ? max : num;
    }

    function random$2(a, b) {
        if (b === undefined)
            return Math.random() * a;
        return a + Math.random() * (b - a);
    }

    function linear(domain, range) {
        var d0 = domain[0];
        var r0 = range[0];
        var m = (range[1] - r0) / (domain[1] - d0);
        return Object.assign(function (num) {
            return r0 + (num - d0) * m;
        }, {
            inverse: function () { return linear(range, domain); }
        });
    }

    // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript
    function commas(num) {
        var parts = String(num).split('.');
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ',');
        return parts.join('.');
    }

    var yootils = /*#__PURE__*/Object.freeze({
        __proto__: null,
        binarySearch: binarySearch,
        pickRandom: pickRandom,
        shuffle: shuffle,
        queue: queue,
        createSprite: createSprite,
        clamp: clamp,
        random: random$2,
        linearScale: linear,
        commas: commas
    });

    function debounce(fn) {
    	let scheduled = false;
    	let event;

    	function release() {
    		fn(event);
    		scheduled = false;
    	}

    	return function(e) {
    		if (!scheduled) {
    			requestAnimationFrame(release);
    			scheduled = true;
    		}

    		event = e;
    	};
    }

    /* node_modules/@sveltejs/gl/controls/OrbitControls.svelte generated by Svelte v3.24.0 */

    const get_default_slot_changes$3 = dirty => ({
    	location: dirty & /*location*/ 1,
    	target: dirty & /*target*/ 2
    });

    const get_default_slot_context$3 = ctx => ({
    	location: /*location*/ ctx[0],
    	target: /*target*/ ctx[1]
    });

    function create_fragment$b(ctx) {
    	let current;
    	const default_slot_template = /*$$slots*/ ctx[7].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], get_default_slot_context$3);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && dirty & /*$$scope, location, target*/ 67) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[6], dirty, get_default_slot_changes$3, get_default_slot_context$3);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const EPSILON$1 = 0.000001;

    function pythag(a, b) {
    	return Math.sqrt(a * a + b * b);
    }

    function instance$b($$self, $$props, $$invalidate) {
    	const scene = get_scene();
    	let { location = new Float32Array([1, 3, 1]) } = $$props;
    	let { target = new Float32Array([0, 1, 0]) } = $$props;
    	let { minDistance = 0 } = $$props;
    	let { maxDistance = Infinity } = $$props;
    	let { minPolarAngle = 0 } = $$props; // radians
    	let { maxPolarAngle = Math.PI } = $$props; // radians

    	function rotate(x, y) {
    		// TODO handle the up vector. for now, just assume [0,1,0]
    		const vx = location[0] - target[0];

    		const vy = location[1] - target[1];
    		const vz = location[2] - target[2];
    		const radius = Math.sqrt(vx * vx + vy * vy + vz * vz);
    		let theta = Math.atan2(vx, vz);
    		theta -= x;
    		let phi = Math.acos(clamp(vy / radius, -1, 1));
    		phi = clamp(phi - y, EPSILON$1, Math.PI - EPSILON$1);
    		phi = clamp(phi, minPolarAngle, maxPolarAngle);
    		const sin_phi_radius = Math.sin(phi) * radius;
    		const nx = sin_phi_radius * Math.sin(theta);
    		const ny = Math.cos(phi) * radius;
    		const nz = sin_phi_radius * Math.cos(theta);
    		$$invalidate(0, location[0] = target[0] + nx, location);
    		$$invalidate(0, location[1] = target[1] + ny, location);
    		$$invalidate(0, location[2] = target[2] + nz, location);
    	}

    	function pan(dx, dy) {
    		// TODO handle the up vector. for now, just assume [0,1,0]
    		const vx = location[0] - target[0];

    		const vy = location[1] - target[1];
    		const vz = location[2] - target[2];

    		// delta y = along xz
    		{
    			const direction = normalize([vx, vz]);
    			const x = -direction[0] * dy;
    			const z = -direction[1] * dy;
    			$$invalidate(0, location[0] += x, location);
    			$$invalidate(0, location[2] += z, location);
    			$$invalidate(1, target[0] += x, target);
    			$$invalidate(1, target[2] += z, target);
    		}

    		// delta x = tangent to xz
    		{
    			const tangent = normalize([-vz, vx]);
    			const x = tangent[0] * dx;
    			const z = tangent[1] * dx;
    			$$invalidate(0, location[0] += x, location);
    			$$invalidate(0, location[2] += z, location);
    			$$invalidate(1, target[0] += x, target);
    			$$invalidate(1, target[2] += z, target);
    		}
    	}

    	function zoom(amount) {
    		let vx = location[0] - target[0];
    		let vy = location[1] - target[1];
    		let vz = location[2] - target[2];
    		const mag = Math.sqrt(vx * vx + vy * vy + vz * vz);
    		amount = clamp(amount, mag / maxDistance, minDistance ? mag / minDistance : Infinity);
    		vx /= amount;
    		vy /= amount;
    		vz /= amount;
    		$$invalidate(0, location[0] = target[0] + vx, location);
    		$$invalidate(0, location[1] = target[1] + vy, location);
    		$$invalidate(0, location[2] = target[2] + vz, location);
    	}

    	function handle_mousedown(event) {
    		let last_x = event.clientX;
    		let last_y = event.clientY;

    		const handle_mousemove = debounce(event => {
    			const x = event.clientX;
    			const y = event.clientY;
    			const dx = x - last_x;
    			const dy = y - last_y;

    			if (event.shiftKey || event.which === 2) {
    				pan(dx * 0.01, dy * 0.01);
    			} else {
    				rotate(dx * 0.005, dy * 0.005);
    			}

    			last_x = x;
    			last_y = y;
    		});

    		function handle_mouseup(event) {
    			window.removeEventListener("mousemove", handle_mousemove);
    			window.removeEventListener("mouseup", handle_mouseup);
    		}

    		window.addEventListener("mousemove", handle_mousemove);
    		window.addEventListener("mouseup", handle_mouseup);
    	}

    	const mousewheel_zoom = debounce(event => {
    		zoom(Math.pow(1.004, event.wheelDeltaY));
    	});

    	function handle_mousewheel(event) {
    		event.preventDefault();
    		mousewheel_zoom(event);
    	}

    	function start_rotate(event) {
    		event.preventDefault();
    		const touch = event.touches[0];
    		const finger = touch.identifier;
    		let last_x = touch.clientX;
    		let last_y = touch.clientY;

    		const handle_touchmove = debounce(event => {
    			if (event.touches.length > 1) return;
    			const touch = event.touches[0];
    			if (touch.identifier !== finger) return;
    			const dx = touch.clientX - last_x;
    			const dy = touch.clientY - last_y;
    			rotate(dx * 0.003, dy * 0.003);
    			last_x = touch.clientX;
    			last_y = touch.clientY;

    		});

    		function handle_touchend(event) {
    			let i = event.changedTouches.length;

    			while (i--) {
    				const touch = event.changedTouches[i];

    				if (touch.identifier === finger) {
    					window.removeEventListener("touchmove", handle_touchmove);
    					window.removeEventListener("touchend", handle_touchend);
    					return;
    				}
    			}
    		}

    		window.addEventListener("touchmove", handle_touchmove);
    		window.addEventListener("touchend", handle_touchend);
    	}

    	function start_pan_zoom(event) {
    		event.preventDefault();
    		const touch_a = event.touches[0];
    		const touch_b = event.touches[1];
    		const finger_a = touch_a.identifier;
    		const finger_b = touch_b.identifier;
    		let last_cx = (touch_a.clientX + touch_b.clientX) / 2;
    		let last_cy = (touch_a.clientY + touch_b.clientY) / 2;
    		let last_d = pythag(touch_b.clientX - touch_a.clientX, touch_b.clientY - touch_a.clientY);

    		const handle_touchmove = debounce(event => {
    			if (event.touches.length !== 2) {
    				alert(`${event.touches.length} touches`);
    				return;
    			}

    			const touch_a = event.touches[0];
    			const touch_b = event.touches[1];
    			if (touch_a.identifier !== finger_a && touch_a.identifier !== finger_b) return;
    			if (touch_b.identifier !== finger_a && touch_b.identifier !== finger_b) return;
    			const cx = (touch_a.clientX + touch_b.clientX) / 2;
    			const cy = (touch_a.clientY + touch_b.clientY) / 2;
    			const d = pythag(touch_b.clientX - touch_a.clientX, touch_b.clientY - touch_a.clientY);
    			const dx = cx - last_cx;
    			const dy = cy - last_cy;
    			pan(dx * 0.01, dy * 0.01);
    			zoom(d / last_d);
    			last_cx = cx;
    			last_cy = cy;
    			last_d = d;
    		});

    		function handle_touchend(event) {
    			let i = event.changedTouches.length;

    			while (i--) {
    				const touch = event.changedTouches[i];

    				if (touch.identifier === finger_a || touch.identifier === finger_b) {
    					window.removeEventListener("touchmove", handle_touchmove);
    					window.removeEventListener("touchend", handle_touchend);
    					return;
    				}
    			}
    		}

    		window.addEventListener("touchmove", handle_touchmove);
    		window.addEventListener("touchend", handle_touchend);
    	}

    	function handle_touchstart(event) {
    		if (event.touches.length === 1) {
    			start_rotate(event);
    		}

    		if (event.touches.length === 2) {
    			start_pan_zoom(event);
    		}
    	}

    	scene.canvas.addEventListener("mousedown", handle_mousedown);
    	scene.canvas.addEventListener("mousewheel", handle_mousewheel);
    	scene.canvas.addEventListener("touchstart", handle_touchstart);

    	onDestroy(() => {
    		scene.canvas.removeEventListener("mousedown", handle_mousedown);
    		scene.canvas.removeEventListener("mousewheel", handle_mousewheel);
    		scene.canvas.removeEventListener("touchstart", handle_touchstart);
    	});

    	const writable_props = [
    		"location",
    		"target",
    		"minDistance",
    		"maxDistance",
    		"minPolarAngle",
    		"maxPolarAngle"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<OrbitControls> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("OrbitControls", $$slots, ['default']);

    	$$self.$set = $$props => {
    		if ("location" in $$props) $$invalidate(0, location = $$props.location);
    		if ("target" in $$props) $$invalidate(1, target = $$props.target);
    		if ("minDistance" in $$props) $$invalidate(2, minDistance = $$props.minDistance);
    		if ("maxDistance" in $$props) $$invalidate(3, maxDistance = $$props.maxDistance);
    		if ("minPolarAngle" in $$props) $$invalidate(4, minPolarAngle = $$props.minPolarAngle);
    		if ("maxPolarAngle" in $$props) $$invalidate(5, maxPolarAngle = $$props.maxPolarAngle);
    		if ("$$scope" in $$props) $$invalidate(6, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		yootils,
    		debounce,
    		onDestroy,
    		get_scene,
    		normalize,
    		scene,
    		location,
    		target,
    		minDistance,
    		maxDistance,
    		minPolarAngle,
    		maxPolarAngle,
    		EPSILON: EPSILON$1,
    		rotate,
    		pan,
    		zoom,
    		handle_mousedown,
    		mousewheel_zoom,
    		handle_mousewheel,
    		start_rotate,
    		pythag,
    		start_pan_zoom,
    		handle_touchstart
    	});

    	$$self.$inject_state = $$props => {
    		if ("location" in $$props) $$invalidate(0, location = $$props.location);
    		if ("target" in $$props) $$invalidate(1, target = $$props.target);
    		if ("minDistance" in $$props) $$invalidate(2, minDistance = $$props.minDistance);
    		if ("maxDistance" in $$props) $$invalidate(3, maxDistance = $$props.maxDistance);
    		if ("minPolarAngle" in $$props) $$invalidate(4, minPolarAngle = $$props.minPolarAngle);
    		if ("maxPolarAngle" in $$props) $$invalidate(5, maxPolarAngle = $$props.maxPolarAngle);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		location,
    		target,
    		minDistance,
    		maxDistance,
    		minPolarAngle,
    		maxPolarAngle,
    		$$scope,
    		$$slots
    	];
    }

    class OrbitControls extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {
    			location: 0,
    			target: 1,
    			minDistance: 2,
    			maxDistance: 3,
    			minPolarAngle: 4,
    			maxPolarAngle: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "OrbitControls",
    			options,
    			id: create_fragment$b.name
    		});
    	}

    	get location() {
    		throw new Error("<OrbitControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set location(value) {
    		throw new Error("<OrbitControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get target() {
    		throw new Error("<OrbitControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set target(value) {
    		throw new Error("<OrbitControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get minDistance() {
    		throw new Error("<OrbitControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set minDistance(value) {
    		throw new Error("<OrbitControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get maxDistance() {
    		throw new Error("<OrbitControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set maxDistance(value) {
    		throw new Error("<OrbitControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get minPolarAngle() {
    		throw new Error("<OrbitControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set minPolarAngle(value) {
    		throw new Error("<OrbitControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get maxPolarAngle() {
    		throw new Error("<OrbitControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set maxPolarAngle(value) {
    		throw new Error("<OrbitControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@sveltejs/gl/scene/cameras/PerspectiveCamera.svelte generated by Svelte v3.24.0 */

    function create_fragment$c(ctx) {
    	const block = {
    		c: noop,
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: noop,
    		p: noop,
    		i: noop,
    		o: noop,
    		d: noop
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let $ctm;

    	let $target,
    		$$unsubscribe_target = noop,
    		$$subscribe_target = () => ($$unsubscribe_target(), $$unsubscribe_target = subscribe(target, $$value => $$invalidate(12, $target = $$value)), target);

    	let $width;
    	let $height;
    	$$self.$$.on_destroy.push(() => $$unsubscribe_target());
    	let { location = [0, 0, 0] } = $$props;
    	let { lookAt = null } = $$props;
    	let { up = [0, 1, 0] } = $$props;
    	let { fov = 60 } = $$props;
    	let { near = 1 } = $$props;
    	let { far = 20000 } = $$props;
    	const { add_camera, update_camera, width, height, get_target } = get_scene();
    	validate_store(width, "width");
    	component_subscribe($$self, width, value => $$invalidate(13, $width = value));
    	validate_store(height, "height");
    	component_subscribe($$self, height, value => $$invalidate(14, $height = value));
    	const { ctm } = get_parent();
    	validate_store(ctm, "ctm");
    	component_subscribe($$self, ctm, value => $$invalidate(11, $ctm = value));
    	const matrix = create();
    	const world_position = new Float32Array(matrix.buffer, 12 * 4, 3);

    	// should be a const, pending https://github.com/sveltejs/svelte/issues/2728
    	let camera = {
    		matrix,
    		world_position,
    		view: create(),
    		projection: create()
    	};

    	let target = writable(null);
    	validate_store(target, "target");
    	$$subscribe_target();
    	add_camera(camera);
    	const writable_props = ["location", "lookAt", "up", "fov", "near", "far"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<PerspectiveCamera> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("PerspectiveCamera", $$slots, []);

    	$$self.$set = $$props => {
    		if ("location" in $$props) $$invalidate(4, location = $$props.location);
    		if ("lookAt" in $$props) $$invalidate(5, lookAt = $$props.lookAt);
    		if ("up" in $$props) $$invalidate(6, up = $$props.up);
    		if ("fov" in $$props) $$invalidate(7, fov = $$props.fov);
    		if ("near" in $$props) $$invalidate(8, near = $$props.near);
    		if ("far" in $$props) $$invalidate(9, far = $$props.far);
    	};

    	$$self.$capture_state = () => ({
    		writable,
    		get_scene,
    		get_parent,
    		mat4,
    		location,
    		lookAt,
    		up,
    		fov,
    		near,
    		far,
    		add_camera,
    		update_camera,
    		width,
    		height,
    		get_target,
    		ctm,
    		matrix,
    		world_position,
    		camera,
    		target,
    		$ctm,
    		$target,
    		$width,
    		$height
    	});

    	$$self.$inject_state = $$props => {
    		if ("location" in $$props) $$invalidate(4, location = $$props.location);
    		if ("lookAt" in $$props) $$invalidate(5, lookAt = $$props.lookAt);
    		if ("up" in $$props) $$invalidate(6, up = $$props.up);
    		if ("fov" in $$props) $$invalidate(7, fov = $$props.fov);
    		if ("near" in $$props) $$invalidate(8, near = $$props.near);
    		if ("far" in $$props) $$invalidate(9, far = $$props.far);
    		if ("camera" in $$props) $$invalidate(10, camera = $$props.camera);
    		if ("target" in $$props) $$subscribe_target($$invalidate(0, target = $$props.target));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*lookAt, target*/ 33) {
    			 if (typeof lookAt === "string") {
    				$$subscribe_target($$invalidate(0, target = get_target(lookAt)));
    			} else {
    				target.set(lookAt);
    			}
    		}

    		if ($$self.$$.dirty & /*camera, $ctm, location, $target, up*/ 7248) {
    			 $$invalidate(10, camera.matrix = (translate(camera.matrix, $ctm, location), $target && targetTo(camera.matrix, world_position, $target, up), camera.matrix), camera);
    		}

    		if ($$self.$$.dirty & /*camera*/ 1024) {
    			 $$invalidate(10, camera.view = invert(camera.view, camera.matrix), camera);
    		}

    		if ($$self.$$.dirty & /*camera, fov, $width, $height, near, far*/ 26496) {
    			 $$invalidate(10, camera.projection = perspective(camera.projection, fov / 180 * Math.PI, $width / $height, near, far), camera);
    		}

    		if ($$self.$$.dirty & /*camera*/ 1024) {
    			 update_camera(camera);
    		}
    	};

    	return [target, width, height, ctm, location, lookAt, up, fov, near, far];
    }

    class PerspectiveCamera extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$c, create_fragment$c, safe_not_equal, {
    			location: 4,
    			lookAt: 5,
    			up: 6,
    			fov: 7,
    			near: 8,
    			far: 9
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PerspectiveCamera",
    			options,
    			id: create_fragment$c.name
    		});
    	}

    	get location() {
    		throw new Error("<PerspectiveCamera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set location(value) {
    		throw new Error("<PerspectiveCamera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get lookAt() {
    		throw new Error("<PerspectiveCamera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set lookAt(value) {
    		throw new Error("<PerspectiveCamera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get up() {
    		throw new Error("<PerspectiveCamera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set up(value) {
    		throw new Error("<PerspectiveCamera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fov() {
    		throw new Error("<PerspectiveCamera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fov(value) {
    		throw new Error("<PerspectiveCamera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get near() {
    		throw new Error("<PerspectiveCamera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set near(value) {
    		throw new Error("<PerspectiveCamera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get far() {
    		throw new Error("<PerspectiveCamera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set far(value) {
    		throw new Error("<PerspectiveCamera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@sveltejs/gl/scene/cameras/OrthoCamera.svelte generated by Svelte v3.24.0 */

    function create_fragment$d(ctx) {
    	const block = {
    		c: noop,
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: noop,
    		p: noop,
    		i: noop,
    		o: noop,
    		d: noop
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let $ctm;

    	let $target,
    		$$unsubscribe_target = noop,
    		$$subscribe_target = () => ($$unsubscribe_target(), $$unsubscribe_target = subscribe(target, $$value => $$invalidate(11, $target = $$value)), target);

    	let $width;
    	let $height;
    	$$self.$$.on_destroy.push(() => $$unsubscribe_target());
    	let { location = [0, 0, 0] } = $$props;
    	let { lookAt = null } = $$props;
    	let { up = [0, 1, 0] } = $$props;
    	let { near = 1 } = $$props;
    	let { far = 20000 } = $$props;
    	const { add_camera, update_camera, width, height, get_target } = get_scene();
    	validate_store(width, "width");
    	component_subscribe($$self, width, value => $$invalidate(12, $width = value));
    	validate_store(height, "height");
    	component_subscribe($$self, height, value => $$invalidate(13, $height = value));
    	const { ctm } = get_parent();
    	validate_store(ctm, "ctm");
    	component_subscribe($$self, ctm, value => $$invalidate(10, $ctm = value));
    	const matrix = create();
    	const world_position = new Float32Array(matrix.buffer, 12 * 4, 3);

    	// should be a const, pending https://github.com/sveltejs/svelte/issues/2728
    	let camera = {
    		matrix,
    		world_position,
    		view: create(),
    		projection: create()
    	};

    	let target = writable(null);
    	validate_store(target, "target");
    	$$subscribe_target();
    	add_camera(camera);
    	const writable_props = ["location", "lookAt", "up", "near", "far"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<OrthoCamera> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("OrthoCamera", $$slots, []);

    	$$self.$set = $$props => {
    		if ("location" in $$props) $$invalidate(4, location = $$props.location);
    		if ("lookAt" in $$props) $$invalidate(5, lookAt = $$props.lookAt);
    		if ("up" in $$props) $$invalidate(6, up = $$props.up);
    		if ("near" in $$props) $$invalidate(7, near = $$props.near);
    		if ("far" in $$props) $$invalidate(8, far = $$props.far);
    	};

    	$$self.$capture_state = () => ({
    		writable,
    		get_scene,
    		get_parent,
    		mat4,
    		location,
    		lookAt,
    		up,
    		near,
    		far,
    		add_camera,
    		update_camera,
    		width,
    		height,
    		get_target,
    		ctm,
    		matrix,
    		world_position,
    		camera,
    		target,
    		$ctm,
    		$target,
    		$width,
    		$height
    	});

    	$$self.$inject_state = $$props => {
    		if ("location" in $$props) $$invalidate(4, location = $$props.location);
    		if ("lookAt" in $$props) $$invalidate(5, lookAt = $$props.lookAt);
    		if ("up" in $$props) $$invalidate(6, up = $$props.up);
    		if ("near" in $$props) $$invalidate(7, near = $$props.near);
    		if ("far" in $$props) $$invalidate(8, far = $$props.far);
    		if ("camera" in $$props) $$invalidate(9, camera = $$props.camera);
    		if ("target" in $$props) $$subscribe_target($$invalidate(0, target = $$props.target));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*lookAt, target*/ 33) {
    			 if (typeof lookAt === "string") {
    				$$subscribe_target($$invalidate(0, target = get_target(lookAt)));
    			} else {
    				target.set(lookAt);
    			}
    		}

    		if ($$self.$$.dirty & /*camera, $ctm, location, $target, up*/ 3664) {
    			 $$invalidate(9, camera.matrix = (translate(camera.matrix, $ctm, location), $target && targetTo(camera.matrix, world_position, $target, up), camera.matrix), camera);
    		}

    		if ($$self.$$.dirty & /*camera*/ 512) {
    			 $$invalidate(9, camera.view = invert(camera.view, camera.matrix), camera);
    		}

    		if ($$self.$$.dirty & /*camera, $width, $height, near, far*/ 13184) {
    			 $$invalidate(9, camera.projection = ortho(camera.projection, 0, $width, $height, 0, near, far), camera);
    		}

    		if ($$self.$$.dirty & /*camera*/ 512) {
    			 update_camera(camera);
    		}
    	};

    	return [target, width, height, ctm, location, lookAt, up, near, far];
    }

    class OrthoCamera extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$d, create_fragment$d, safe_not_equal, {
    			location: 4,
    			lookAt: 5,
    			up: 6,
    			near: 7,
    			far: 8
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "OrthoCamera",
    			options,
    			id: create_fragment$d.name
    		});
    	}

    	get location() {
    		throw new Error("<OrthoCamera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set location(value) {
    		throw new Error("<OrthoCamera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get lookAt() {
    		throw new Error("<OrthoCamera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set lookAt(value) {
    		throw new Error("<OrthoCamera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get up() {
    		throw new Error("<OrthoCamera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set up(value) {
    		throw new Error("<OrthoCamera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get near() {
    		throw new Error("<OrthoCamera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set near(value) {
    		throw new Error("<OrthoCamera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get far() {
    		throw new Error("<OrthoCamera>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set far(value) {
    		throw new Error("<OrthoCamera>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    class GeometryInstance {
    	constructor(scene, program, attributes, index, primitive, count) {
    		this.scene = scene;
    		const gl = scene.gl;

    		this.attributes = attributes;
    		this.index = index;
    		this.primitive = primitive;
    		this.count = count;

    		this.locations = {};
    		this.buffers = {};

    		for (const key in attributes) {
    			const attribute = attributes[key];

    			this.locations[key] = gl.getAttribLocation(program, key);
    			if (this.primitive === 'POINTS') console.log(key, ":", attribute);

    			const buffer = gl.createBuffer();

    			gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
    			gl.bufferData(gl.ARRAY_BUFFER, attribute.data, attribute.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW);
    			this.buffers[key] = buffer;
    		}

    		if (index) {
    			const buffer = gl.createBuffer();
    			gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);
    			gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, index, gl.STATIC_DRAW);
    			this.buffers.__index = buffer;
    		}

    		// Un-bind buffers
    		gl.bindBuffer(gl.ARRAY_BUFFER, null);
    		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
    	}

    	set_attributes(gl) {
    		for (const key in this.attributes) {
    			const attribute = this.attributes[key];

    			const loc = this.locations[key];
    			if (loc < 0) continue; // attribute is unused by current program

    			const {
    				size = 3,
    				type = gl.FLOAT,
    				normalized = false,
    				stride = 0,
    				offset = 0
    			} = attribute;

    			// Bind the position buffer.
    			const buffer = this.buffers[key];

    			// if (this.primitive = 'POINTS') console.log("enableVertexAttribArray on location ", key);

    			gl.bindBuffer(gl.ARRAY_BUFFER, buffer);

    			// Turn on the attribute
    			gl.enableVertexAttribArray(loc);

    			gl.vertexAttribPointer(
    				loc,
    				size,
    				type,
    				normalized,
    				stride,
    				offset
    			);
    		}
    	}

    	update(k, data, count) {
    		const scene = this.scene;
    		const { gl } = scene;

    		const attribute = this.attributes[k];
    		const buffer = this.buffers[k];

    		gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
    		gl.bufferData(gl.ARRAY_BUFFER, attribute.data = data, attribute.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW);

    		this.count = count;

    		if (count === Infinity) {
    			throw new Error(`GL.Geometry must be instantiated with one or more { data, size } attributes`);
    		}

    		scene.invalidate();
    	}
    }

    class Geometry {
    	constructor(attributes = {}, opts = {}) {
    		this.attributes = attributes;

    		const { index, primitive = 'TRIANGLES' } = opts;
    		this.index = index;
    		this.primitive = primitive.toUpperCase();
    		this.count = get_count(attributes);

    		this.instances = new Map();
    	}

    	instantiate(scene, program) {
    		if (!this.instances.has(program)) {
    			this.instances.set(program, new GeometryInstance(
    				scene,
    				program,
    				this.attributes,
    				this.index,
    				this.primitive,
    				this.count
    			));
    		}

    		return this.instances.get(program);
    	}

    	update(k, data) {
    		this.attributes[k].data = data;
    		this.count = get_count(this.attributes);

    		this.instances.forEach(instance => {
    			instance.update(k, data, this.count);
    		});
    	}
    }

    function get_count(attributes) {
    	let min = Infinity;

    	for (const k in attributes) {
    		const count = attributes[k].data.length / attributes[k].size;
    		if (count < min) min = count;
    	}

    	return min;
    }

    var box = memoize((obj = {}) => {
        const def = { // default box dimensions
            x:-0.5, y:-0.5, z:-0.5, w:1.0, h:1.0, d:1.0
        };
        for (const p in def) {
            if (!(p in obj)) {
                obj[p] = def[p];
            }
        }
        // console.log(obj.x, obj.y, obj.z, obj.w, obj.h, obj.d);

        const verts = [
            [ (obj.x + obj.w), 	(obj.y + obj.h), 	  (obj.z + obj.d) ], 	// 0
            [ obj.x, 				    (obj.y + obj.h), 	  (obj.z + obj.d) ], 	// 1
            [ (obj.x + obj.w), 	obj.y, 			        (obj.z + obj.d) ], 	// 2
            [ obj.x, 			      obj.y, 				      (obj.z + obj.d) ], 	// 3
            [ obj.x, 			      (obj.y + obj.h), 	  obj.z ], 			// 4
            [ (obj.x + obj.w), 	(obj.y + obj.h), 	  obj.z ], 			// 5
            [ obj.x, 			      obj.y, 				      obj.z ], 			// 6
            [ (obj.x + obj.w), 	obj.y, 				      obj.z ] 			// 7
        ];

        // console.log(verts);

        const vertices = [

            // front: 0 1 2 3
            verts[0],
            verts[1],
            verts[2],
            verts[3],

            // left: 1 4 3 6
            verts[1],
            verts[4],
            verts[3],
            verts[6],

            // back: 4 5 6 7
            verts[4],
            verts[5],
            verts[6],
            verts[7],

            // right: 5 0 7 2
            verts[5],
            verts[0],
            verts[7],
            verts[2],

            // top: 4 1 5 0
            verts[4],
            verts[1],
            verts[5],
            verts[0],

            // bottom: 3 6 2 7
            verts[3],
            verts[6],
            verts[2],
            verts[7]

        ].flat(Infinity);

        // console.log("box vertices: ", vertices);

        return new Geometry({
            position: {
                data: new Float32Array(vertices),
                size: 3
            },

            normal: {
                data: new Float32Array([
                    // front
                    0, 0, 1,
                    0, 0, 1,
                    0, 0, 1,
                    0, 0, 1,

                    // left
                    -1, 0, 0,
                    -1, 0, 0,
                    -1, 0, 0,
                    -1, 0, 0,

                    // back
                    0, 0, -1,
                    0, 0, -1,
                    0, 0, -1,
                    0, 0, -1,

                    // right
                    1, 0, 0,
                    1, 0, 0,
                    1, 0, 0,
                    1, 0, 0,

                    // top
                    0, 1, 0,
                    0, 1, 0,
                    0, 1, 0,
                    0, 1, 0,

                    // bottom
                    0, -1, 0,
                    0, -1, 0,
                    0, -1, 0,
                    0, -1, 0
                ]),
                size: 3
            },

            uv: {
                data: new Float32Array([
                    // front
                    2/4, 1/4,
                    1/4, 1/4,
                    2/4, 2/4,
                    1/4, 2/4,

                    // left
                    1/4, 1/4,
                    0/4, 1/4,
                    1/4, 2/4,
                    0/4, 2/4,

                    // back
                    4/4, 1/4,
                    3/4, 1/4,
                    4/4, 2/4,
                    3/4, 2/4,

                    // right
                    3/4, 1/4,
                    2/4, 1/4,
                    3/4, 2/4,
                    2/4, 2/4,

                    // top
                    1/4, 0/4,
                    1/4, 1/4,
                    2/4, 0/4,
                    2/4, 1/4,

                    // bottom
                    1/4, 2/4,
                    1/4, 3/4,
                    2/4, 2/4,
                    2/4, 3/4
                ]),
                size: 2
            }
        }, {
            index: new Uint32Array([
                // front
                0, 1, 2,
                3, 2, 1,

                // left
                4, 5, 6,
                6, 5, 7,

                // back
                8, 9, 10,
                11, 10, 9,

                // right
                12, 13, 14,
                15, 14, 13,

                // top
                16, 17, 18,
                19, 18, 17,

                // bottom
                20, 21, 22,
                23, 22, 21
            ])
        });
    });

    function create_flat_geometry(radius, height, sides) {
    	const num_vertices = sides * 3;

    	const position_data = new Float32Array(num_vertices * 3 * 2);
    	const normal_data = new Float32Array(num_vertices * 3 * 2);

    	const ny = radius / height;

    	for (let i = 0; i < sides; i += 1) {
    		const start_angle = (i / sides) * Math.PI * 2;
    		const end_angle = ((i + 1) / sides) * Math.PI * 2;
    		const half_angle = (start_angle + end_angle) / 2;

    		let o = i * 3 * 3 * 2;

    		const x1 = Math.sin(start_angle) * radius;
    		const z1 = Math.cos(start_angle) * radius;
    		const x2 = Math.sin(end_angle) * radius;
    		const z2 = Math.cos(end_angle) * radius;

    		// top face
    		position_data[o + 0] = x1;
    		position_data[o + 1] = 0;
    		position_data[o + 2] = z1;

    		position_data[o + 3] = x2;
    		position_data[o + 4] = 0;
    		position_data[o + 5] = z2;

    		position_data[o + 6] = 0;
    		position_data[o + 7] = height;
    		position_data[o + 8] = 0;

    		const nx = Math.sin(half_angle);
    		const nz = Math.cos(half_angle);

    		const mag = Math.sqrt(nx * nx + ny * ny + nz * nz);

    		const nnx = nx / mag;
    		const nny = ny / mag;
    		const nnz = nz / mag;

    		normal_data[o + 0] = normal_data[o + 3] = normal_data[o + 6] = nnx;
    		normal_data[o + 1] = normal_data[o + 4] = normal_data[o + 7] = nny;
    		normal_data[o + 2] = normal_data[o + 5] = normal_data[o + 8] = nnz;

    		o += 9;

    		// bottom face
    		position_data[o + 0] = x2;
    		position_data[o + 1] = 0;
    		position_data[o + 2] = z2;

    		position_data[o + 3] = x1;
    		position_data[o + 4] = 0;
    		position_data[o + 5] = z1;

    		position_data[o + 6] = 0;
    		position_data[o + 7] = 0;
    		position_data[o + 8] = 0;

    		normal_data[o + 0] = normal_data[o + 3] = normal_data[o + 6] = 0;
    		normal_data[o + 1] = normal_data[o + 4] = normal_data[o + 7] = -1;
    		normal_data[o + 2] = normal_data[o + 5] = normal_data[o + 8] = 0;
    	}

    	return new Geometry({
    		position: {
    			data: position_data,
    			size: 3
    		},

    		normal: {
    			data: normal_data,
    			size: 3
    		}
    	});
    }

    function create_smooth_geometry(radius, height, sides) {
    	throw new Error('TODO');
    }

    var cone = memoize(({ radius = 1, height = 1, sides = 12, shading = 'flat' } = {}) => {
    	return shading === 'flat'
    		? create_flat_geometry(radius, height, sides)
    		: create_smooth_geometry();
    });

    // adapted from https://github.com/mrdoob/three.js/blob/master/src/geometries/PolyhedronGeometry.js
    // MIT licensed https://github.com/mrdoob/three.js/blob/dev/LICENSE

    function lerp$3(a, b, t) {
    	return a.map((aa, i) => {
    		const bb = b[i];
    		return aa + (bb - aa) * t;
    	});
    }

    function set2(vector, a, b) {
    	vector[0] = a;
    	vector[1] = b;
    }

    function set3(vector, a, b, c) {
    	vector[0] = a;
    	vector[1] = b;
    	vector[2] = c;
    }

    function correct_uvs(vertex_buffer, uv_buffer) {
    	const a = new Float32Array(3);
    	const b = new Float32Array(3);
    	const c = new Float32Array(3);

    	const centroid = new Float32Array(3);

    	const uv_a = new Float32Array(2);
    	const uv_b = new Float32Array(2);
    	const uv_c = new Float32Array(2);

    	for (let i = 0, j = 0; i < vertex_buffer.length; i += 9, j += 6) {
    		set3(a, vertex_buffer[i + 0], vertex_buffer[i + 1], vertex_buffer[i + 2]);
    		set3(b, vertex_buffer[i + 3], vertex_buffer[i + 4], vertex_buffer[i + 5]);
    		set3(c, vertex_buffer[i + 6], vertex_buffer[i + 7], vertex_buffer[i + 8]);

    		set2(uv_a, uv_buffer[j + 0], uv_buffer[j + 1]);
    		set2(uv_b, uv_buffer[j + 2], uv_buffer[j + 3]);
    		set2(uv_c, uv_buffer[j + 4], uv_buffer[j + 5]);

    		centroid[0] = (a[0] + b[0] + c[0]) / 3;
    		centroid[1] = (a[1] + b[1] + c[1]) / 3;
    		centroid[2] = (a[2] + b[2] + c[2]) / 3;

    		const azi = azimuth(centroid);

    		correct_uv(uv_buffer, uv_a, j + 0, a, azi);
    		correct_uv(uv_buffer, uv_b, j + 2, b, azi);
    		correct_uv(uv_buffer, uv_c, j + 4, c, azi);
    	}
    }

    function correct_uv(uv_buffer, uv, stride, vector, azimuth) {
    	if ((azimuth < 0) && (uv[0] === 1)) {
    		uv_buffer[stride] = uv[0] - 1;
    	}

    	if ((vector[0] === 0) && (vector[2] === 0)) {
    		uv_buffer[stride] = azimuth / 2 / Math.PI + 0.5;
    	}
    }

    function correct_seam(uv_buffer) {
    	// handle case when face straddles the seam
    	for (var i = 0; i < uv_buffer.length; i += 6) {
    		// uv data of a single face
    		var x0 = uv_buffer[i + 0];
    		var x1 = uv_buffer[i + 2];
    		var x2 = uv_buffer[i + 4];

    		var max = Math.max(x0, x1, x2);
    		var min = Math.min(x0, x1, x2);

    		// 0.9 is somewhat arbitrary
    		if (max > 0.9 && min < 0.1) {
    			if (x0 < 0.2) uv_buffer[i + 0] += 1;
    			if (x1 < 0.2) uv_buffer[i + 2] += 1;
    			if (x2 < 0.2) uv_buffer[i + 4] += 1;
    		}
    	}
    }

    // Angle around the Y axis, counter-clockwise when looking from above.
    function azimuth(vector) {
    	return Math.atan2(vector[2], - vector[0]);
    }

    // Angle above the XZ plane.
    function inclination(vector) {
    	return Math.atan2(-vector[1], Math.sqrt((vector[0] * vector[0]) + (vector[2] * vector[2])));
    }

    function compute_vertex_normals(position) {
    	const cb = new Float32Array(3);
    	const ab = new Float32Array(3);

    	const normals = new Float32Array(position.length);

    	for (let i = 0; i < position.length; i += 9 ) {
    		const pa = position.subarray(i + 0, i + 3);
    		const pb = position.subarray(i + 3, i + 6);
    		const pc = position.subarray(i + 6, i + 9);

    		set3(cb, pc[0] - pb[0], pc[1] - pb[1], pc[2] - pb[2]);
    		set3(ab, pa[0] - pb[0], pa[1] - pb[1], pa[2] - pb[2]);

    		// cb x ab
    		const x = cb[1] * ab[2] - cb[2] * ab[1];
    		const y = cb[2] * ab[0] - cb[0] * ab[2];
    		const z = cb[0] * ab[1] - cb[1] * ab[0];

    		normals[i + 0] = normals[i + 3] = normals[i + 6] = x;
    		normals[i + 1] = normals[i + 4] = normals[i + 7] = y;
    		normals[i + 2] = normals[i + 5] = normals[i + 8] = z;
    	}

    	return normals;
    }

    function create_vertex_buffer(vertices, indices, subdivisions) {
    	const vertex_buffer = [];

    	const a = new Float32Array(3);
    	const b = new Float32Array(3);
    	const c = new Float32Array(3);

    	for (let i = 0; i < indices.length; i += 3) {
    		// get the vertices of the face
    		get_vertex_data(indices[i + 0], a);
    		get_vertex_data(indices[i + 1], b);
    		get_vertex_data(indices[i + 2], c);

    		// perform subdivision
    		subdivide_face(a, b, c, subdivisions);
    	}

    	function get_vertex_data(index, out) {
    		const offset = index * 3;

    		out[0] = vertices[offset + 0];
    		out[1] = vertices[offset + 1];
    		out[2] = vertices[offset + 2];
    	}

    	function push_vertex(vertex) {
    		vertex_buffer.push(vertex[0], vertex[1], vertex[2]);
    	}

    	function subdivide_face(a, b, c, subdivisions) {
    		const cols = Math.pow(2, subdivisions);

    		// we use this multidimensional array as a data structure for creating the subdivision
    		const v = [];

    		// construct all of the vertices for this subdivision
    		for (let i = 0; i <= cols; i++) {
    			v[i] = [];

    			const aj = lerp$3(a, c, i / cols);
    			const bj = lerp$3(b, c, i / cols);

    			const rows = cols - i;

    			for (let j = 0; j <= rows; j++) {
    				if (j === 0 && i === cols) {
    					v[i][j] = aj;
    				} else {
    					v[i][j] = lerp$3(aj, bj, j / rows);
    				}
    			}
    		}

    		// construct all of the faces
    		for (let i = 0; i < cols; i++) {
    			for (let j = 0; j < 2 * (cols - i) - 1; j++) {
    				const k = Math.floor(j / 2);

    				if (j % 2 === 0) {
    					push_vertex(v[i][k + 1]);
    					push_vertex(v[i + 1][k]);
    					push_vertex(v[i][k]);
    				} else {
    					push_vertex(v[i][k + 1]);
    					push_vertex(v[i + 1][k + 1]);
    					push_vertex(v[i + 1][k]);
    				}
    			}
    		}
    	}

    	return new Float32Array(vertex_buffer);
    }

    var polyhedron = memoize((vertices, indices, subdivisions = 0, shading = 'flat') => {
    	var uv_buffer = [];

    	// the subdivision creates the vertex buffer data
    	const vertex_buffer = create_vertex_buffer(vertices, indices, subdivisions);

    	for (let i = 0; i < vertex_buffer.length; i += 3) {
    		const vertex = new Float32Array(vertex_buffer.buffer, i * 4, 3);

    		// all vertices should lie on a conceptual sphere with a given radius
    		normalize(vertex);

    		var u = azimuth(vertex) / 2 / Math.PI + 0.5;
    		var v = inclination(vertex) / Math.PI + 0.5;
    		uv_buffer.push(u, 1 - v);
    	}

    	correct_uvs(vertex_buffer, uv_buffer);
    	correct_seam(uv_buffer);

    	const position_buffer = new Float32Array(vertex_buffer);

    	return new Geometry({
    		position: {
    			data: position_buffer,
    			size: 3
    		},

    		normal: {
    			data: shading === 'smooth' ? position_buffer : compute_vertex_normals(position_buffer),
    			size: 3
    		},

    		uv: {
    			data: new Float32Array(uv_buffer),
    			size: 2
    		}
    	});
    });

    // adapted from https://github.com/mrdoob/three.js/blob/master/src/geometries/DodecahedronGeometry.js
    // MIT licensed https://github.com/mrdoob/three.js/blob/dev/LICENSE

    const t = ( 1 + Math.sqrt( 5 ) ) / 2;
    const r = 1 / t;

    const vertices = [
    	// (±1, ±1, ±1)
    	-1, -1, -1, -1, -1, +1,
    	-1, +1, -1, -1, +1, +1,
    	+1, -1, -1, +1, -1, +1,
    	+1, +1, -1, +1, +1, +1,

    	// (0, ±1/φ, ±φ)
    	0, -r, -t, 0, -r, +t,
    	0, +r, -t, 0, +r, +t,

    	// (±1/φ, ±φ, 0)
    	-r, -t, 0, -r, +t, 0,
    	+r, -t, 0, +r, +t, 0,

    	// (±φ, 0, ±1/φ)
    	-t, 0, -r, +t, 0, -r,
    	-t, 0, +r, +t, 0, +r
    ];

    const indices = [
    	3, 11, 7, 	3, 7, 15, 	3, 15, 13,
    	7, 19, 17, 	7, 17, 6, 	7, 6, 15,
    	17, 4, 8, 	17, 8, 10, 	17, 10, 6,
    	8, 0, 16, 	8, 16, 2, 	8, 2, 10,
    	0, 12, 1, 	0, 1, 18, 	0, 18, 16,
    	6, 10, 2, 	6, 2, 13, 	6, 13, 15,
    	2, 16, 18, 	2, 18, 3, 	2, 3, 13,
    	18, 1, 9, 	18, 9, 11, 	18, 11, 3,
    	4, 14, 12, 	4, 12, 0, 	4, 0, 8,
    	11, 9, 5, 	11, 5, 19, 	11, 19, 7,
    	19, 5, 14, 	19, 14, 4, 	19, 4, 17,
    	1, 12, 14, 	1, 14, 5, 	1, 5, 9
    ];

    function dodecahedron({ subdivisions, shading } = {}) {
    	return polyhedron(vertices, indices, subdivisions, shading);
    }

    var plane = memoize(() => {
    	return new Geometry({
    		position: {
    			data: new Float32Array([
    				 1,  1, 0,
    				-1,  1, 0,
    				 1, -1, 0,
    				-1, -1, 0,
    			]),
    			size: 3
    		},

    		normal: {
    			data: new Float32Array([
    				0, 0, 1,
    				0, 0, 1,
    				0, 0, 1,
    				0, 0, 1
    			]),
    			size: 3
    		},

    		uv: {
    			data: new Float32Array([
    				1, 0,
    				0, 0,
    				1, 1,
    				0, 1
    			]),
    			size: 2
    		}
    	}, {
    		index: new Uint32Array([
    			0, 1, 2,
    			3, 2, 1
    		])
    	});
    });

    var sprite = memoize(() => {
    	return new Geometry({
    		position: {
    			data: new Float32Array([
    				 0, 0, 0
    			]),
    			size: 3
    		},

    		normal: {
    			data: new Float32Array([
    				0, 0, 1
    			]),
    			size: 3
    		},

    		uv: {
    			data: new Float32Array([
    				1, 1
    			]),
    			size: 2
    		}
    	}, {
    		primitive: "POINTS"
    	});
    });

    var terrain = memoize(() => {
    	return new Geometry({
    		position: {
    			data: new Float32Array(
    [[-1,-1,0],[-1,-0.9844,0],[-1,-0.9688,0],[-1,-0.9532,0],[-1,-0.9376,0],[-1,-0.9218,0],[-1,-0.9062,0],[-1,-0.8906,0],[-1,-0.875,0],[-1,-0.8594,0],[-1,-0.8438,0],[-1,-0.8282,0],[-1,-0.8124,0],[-1,-0.7968,0],[-1,-0.7812,0],[-1,-0.7656,0],[-1,-0.75,0],[-1,-0.7344,0],[-1,-0.7188,0],[-1,-0.7032,0],[-1,-0.6876,0],[-1,-0.6718,0],[-1,-0.6562,0],[-1,-0.6406,0],[-1,-0.625,0],[-1,-0.6094,0],[-1,-0.5938,0],[-1,-0.5782,0],[-1,-0.5624,0],[-1,-0.5468,0],[-1,-0.5312,0],[-1,-0.5156,0],[-1,-0.5,0],[-1,-0.4844,0],[-1,-0.4688,0],[-1,-0.4532,0],[-1,-0.4376,0],[-1,-0.4218,0],[-1,-0.4062,0],[-1,-0.3906,0],[-1,-0.375,0],[-1,-0.3594,0],[-1,-0.3438,0],[-1,-0.3282,0],[-1,-0.3124,0],[-1,-0.2968,0],[-1,-0.2812,0],[-1,-0.2656,0],[-1,-0.25,0],[-1,-0.2344,0],[-1,-0.2188,0],[-1,-0.2032,0],[-1,-0.1876,0],[-1,-0.1718,0],[-1,-0.1562,0],[-1,-0.1406,0],[-1,-0.125,0],[-1,-0.1094,0],[-1,-0.0938,0],[-1,-0.0782,0],[-1,-0.0624,0],[-1,-0.0468,0],[-1,-0.0312,0],[-1,-0.0156,0],[-1,0,0],[-1,0.0156,0],[-1,0.0312,0],[-1,0.0468,0],[-1,0.0624,0],[-1,0.0782,0],[-1,0.0938,0],[-1,0.1094,0],[-1,0.125,0],[-1,0.1406,0],[-1,0.1562,0],[-1,0.1718,0],[-1,0.1876,0],[-1,0.2032,0],[-1,0.2188,0],[-1,0.2344,0],[-1,0.25,0],[-1,0.2656,0],[-1,0.2812,0],[-1,0.2968,0],[-1,0.3124,0],[-1,0.3282,0],[-1,0.3438,0],[-1,0.3594,0],[-1,0.375,0],[-1,0.3906,0],[-1,0.4062,0],[-1,0.4218,0],[-1,0.4376,0],[-1,0.4532,0],[-1,0.4688,0],[-1,0.4844,0],[-1,0.5,0],[-1,0.5156,0],[-1,0.5312,0],[-1,0.5468,0],[-1,0.5624,0],[-1,0.5782,0],[-1,0.5938,0],[-1,0.6094,0],[-1,0.625,0],[-1,0.6406,0],[-1,0.6562,0],[-1,0.6718,0],[-1,0.6876,0],[-1,0.7032,0],[-1,0.7188,0],[-1,0.7344,0],[-1,0.75,0],[-1,0.7656,0],[-1,0.7812,0],[-1,0.7968,0],[-1,0.8124,0],[-1,0.8282,0],[-1,0.8438,0],[-1,0.8594,0],[-1,0.875,0],[-1,0.8906,0],[-1,0.9062,0],[-1,0.9218,0],[-1,0.9376,0],[-1,0.9532,0],[-1,0.9688,0],[-1,0.9844,0],[-0.9844,-1,0],[-0.9844,-0.9844,0],[-0.9844,-0.9688,0],[-0.9844,-0.9532,0],[-0.9844,-0.9376,0],[-0.9844,-0.9218,0],[-0.9844,-0.9062,0],[-0.9844,-0.8906,0],[-0.9844,-0.875,0],[-0.9844,-0.8594,0],[-0.9844,-0.8438,0],[-0.9844,-0.8282,0],[-0.9844,-0.8124,0],[-0.9844,-0.7968,0],[-0.9844,-0.7812,0],[-0.9844,-0.7656,0],[-0.9844,-0.75,0],[-0.9844,-0.7344,0],[-0.9844,-0.7188,0],[-0.9844,-0.7032,0],[-0.9844,-0.6876,0],[-0.9844,-0.6718,0],[-0.9844,-0.6562,0],[-0.9844,-0.6406,0],[-0.9844,-0.625,0],[-0.9844,-0.6094,0],[-0.9844,-0.5938,0],[-0.9844,-0.5782,0],[-0.9844,-0.5624,0],[-0.9844,-0.5468,0],[-0.9844,-0.5312,0],[-0.9844,-0.5156,0],[-0.9844,-0.5,0],[-0.9844,-0.4844,0],[-0.9844,-0.4688,0],[-0.9844,-0.4532,0],[-0.9844,-0.4376,0],[-0.9844,-0.4218,0],[-0.9844,-0.4062,0],[-0.9844,-0.3906,0],[-0.9844,-0.375,0],[-0.9844,-0.3594,0],[-0.9844,-0.3438,0],[-0.9844,-0.3282,0],[-0.9844,-0.3124,0],[-0.9844,-0.2968,0],[-0.9844,-0.2812,0],[-0.9844,-0.2656,0],[-0.9844,-0.25,0],[-0.9844,-0.2344,0],[-0.9844,-0.2188,0],[-0.9844,-0.2032,0],[-0.9844,-0.1876,0],[-0.9844,-0.1718,0],[-0.9844,-0.1562,0],[-0.9844,-0.1406,0],[-0.9844,-0.125,0],[-0.9844,-0.1094,0],[-0.9844,-0.0938,0],[-0.9844,-0.0782,0],[-0.9844,-0.0624,0],[-0.9844,-0.0468,0],[-0.9844,-0.0312,0],[-0.9844,-0.0156,0],[-0.9844,0,0],[-0.9844,0.0156,0],[-0.9844,0.0312,0],[-0.9844,0.0468,0],[-0.9844,0.0624,0],[-0.9844,0.0782,0],[-0.9844,0.0938,0],[-0.9844,0.1094,0],[-0.9844,0.125,0],[-0.9844,0.1406,0],[-0.9844,0.1562,0],[-0.9844,0.1718,0],[-0.9844,0.1876,0],[-0.9844,0.2032,0],[-0.9844,0.2188,0],[-0.9844,0.2344,0],[-0.9844,0.25,0],[-0.9844,0.2656,0],[-0.9844,0.2812,0],[-0.9844,0.2968,0],[-0.9844,0.3124,0],[-0.9844,0.3282,0],[-0.9844,0.3438,0],[-0.9844,0.3594,0],[-0.9844,0.375,0],[-0.9844,0.3906,0],[-0.9844,0.4062,0],[-0.9844,0.4218,0],[-0.9844,0.4376,0],[-0.9844,0.4532,0],[-0.9844,0.4688,0],[-0.9844,0.4844,0],[-0.9844,0.5,0],[-0.9844,0.5156,0],[-0.9844,0.5312,0],[-0.9844,0.5468,0],[-0.9844,0.5624,0],[-0.9844,0.5782,0],[-0.9844,0.5938,0],[-0.9844,0.6094,0],[-0.9844,0.625,0],[-0.9844,0.6406,0],[-0.9844,0.6562,0],[-0.9844,0.6718,0],[-0.9844,0.6876,0],[-0.9844,0.7032,0],[-0.9844,0.7188,0],[-0.9844,0.7344,0],[-0.9844,0.75,0],[-0.9844,0.7656,0],[-0.9844,0.7812,0],[-0.9844,0.7968,0],[-0.9844,0.8124,0],[-0.9844,0.8282,0],[-0.9844,0.8438,0],[-0.9844,0.8594,0],[-0.9844,0.875,0],[-0.9844,0.8906,0],[-0.9844,0.9062,0],[-0.9844,0.9218,0],[-0.9844,0.9376,0],[-0.9844,0.9532,0],[-0.9844,0.9688,0],[-0.9844,0.9844,0],[-0.9688,-1,0],[-0.9688,-0.9844,0],[-0.9688,-0.9688,0],[-0.9688,-0.9532,0],[-0.9688,-0.9376,0],[-0.9688,-0.9218,0],[-0.9688,-0.9062,0],[-0.9688,-0.8906,0],[-0.9688,-0.875,0],[-0.9688,-0.8594,0],[-0.9688,-0.8438,0],[-0.9688,-0.8282,0],[-0.9688,-0.8124,0],[-0.9688,-0.7968,0],[-0.9688,-0.7812,0],[-0.9688,-0.7656,0],[-0.9688,-0.75,0],[-0.9688,-0.7344,0],[-0.9688,-0.7188,0],[-0.9688,-0.7032,0],[-0.9688,-0.6876,0],[-0.9688,-0.6718,0],[-0.9688,-0.6562,0],[-0.9688,-0.6406,0],[-0.9688,-0.625,0],[-0.9688,-0.6094,0],[-0.9688,-0.5938,0],[-0.9688,-0.5782,0],[-0.9688,-0.5624,0],[-0.9688,-0.5468,0],[-0.9688,-0.5312,0],[-0.9688,-0.5156,0],[-0.9688,-0.5,0],[-0.9688,-0.4844,0],[-0.9688,-0.4688,0],[-0.9688,-0.4532,0],[-0.9688,-0.4376,0],[-0.9688,-0.4218,0],[-0.9688,-0.4062,0],[-0.9688,-0.3906,0],[-0.9688,-0.375,0],[-0.9688,-0.3594,0],[-0.9688,-0.3438,0],[-0.9688,-0.3282,0],[-0.9688,-0.3124,0],[-0.9688,-0.2968,0],[-0.9688,-0.2812,0],[-0.9688,-0.2656,0],[-0.9688,-0.25,0],[-0.9688,-0.2344,0],[-0.9688,-0.2188,0],[-0.9688,-0.2032,0],[-0.9688,-0.1876,0],[-0.9688,-0.1718,0],[-0.9688,-0.1562,0],[-0.9688,-0.1406,0],[-0.9688,-0.125,0],[-0.9688,-0.1094,0],[-0.9688,-0.0938,0],[-0.9688,-0.0782,0],[-0.9688,-0.0624,0],[-0.9688,-0.0468,0],[-0.9688,-0.0312,0],[-0.9688,-0.0156,0],[-0.9688,0,0],[-0.9688,0.0156,0],[-0.9688,0.0312,0],[-0.9688,0.0468,0],[-0.9688,0.0624,0],[-0.9688,0.0782,0],[-0.9688,0.0938,0],[-0.9688,0.1094,0],[-0.9688,0.125,0],[-0.9688,0.1406,0],[-0.9688,0.1562,0],[-0.9688,0.1718,0],[-0.9688,0.1876,0],[-0.9688,0.2032,0],[-0.9688,0.2188,0],[-0.9688,0.2344,0],[-0.9688,0.25,0],[-0.9688,0.2656,0],[-0.9688,0.2812,0],[-0.9688,0.2968,0],[-0.9688,0.3124,0],[-0.9688,0.3282,0],[-0.9688,0.3438,0],[-0.9688,0.3594,0],[-0.9688,0.375,0],[-0.9688,0.3906,0],[-0.9688,0.4062,0],[-0.9688,0.4218,0],[-0.9688,0.4376,0],[-0.9688,0.4532,0],[-0.9688,0.4688,0],[-0.9688,0.4844,0],[-0.9688,0.5,0],[-0.9688,0.5156,0],[-0.9688,0.5312,0],[-0.9688,0.5468,0],[-0.9688,0.5624,0],[-0.9688,0.5782,0],[-0.9688,0.5938,0],[-0.9688,0.6094,0],[-0.9688,0.625,0],[-0.9688,0.6406,0],[-0.9688,0.6562,0],[-0.9688,0.6718,0],[-0.9688,0.6876,0],[-0.9688,0.7032,0],[-0.9688,0.7188,0],[-0.9688,0.7344,0],[-0.9688,0.75,0],[-0.9688,0.7656,0],[-0.9688,0.7812,0],[-0.9688,0.7968,0],[-0.9688,0.8124,0],[-0.9688,0.8282,0],[-0.9688,0.8438,0],[-0.9688,0.8594,0],[-0.9688,0.875,0],[-0.9688,0.8906,0],[-0.9688,0.9062,0],[-0.9688,0.9218,0],[-0.9688,0.9376,0],[-0.9688,0.9532,0],[-0.9688,0.9688,0],[-0.9688,0.9844,0],[-0.9532,-1,0],[-0.9532,-0.9844,0],[-0.9532,-0.9688,0],[-0.9532,-0.9532,0],[-0.9532,-0.9376,0],[-0.9532,-0.9218,0],[-0.9532,-0.9062,0],[-0.9532,-0.8906,0],[-0.9532,-0.875,0],[-0.9532,-0.8594,0],[-0.9532,-0.8438,0],[-0.9532,-0.8282,0],[-0.9532,-0.8124,0],[-0.9532,-0.7968,0],[-0.9532,-0.7812,0],[-0.9532,-0.7656,0],[-0.9532,-0.75,0],[-0.9532,-0.7344,0],[-0.9532,-0.7188,0],[-0.9532,-0.7032,0],[-0.9532,-0.6876,0],[-0.9532,-0.6718,0],[-0.9532,-0.6562,0],[-0.9532,-0.6406,0],[-0.9532,-0.625,0],[-0.9532,-0.6094,0],[-0.9532,-0.5938,0],[-0.9532,-0.5782,0],[-0.9532,-0.5624,0],[-0.9532,-0.5468,0],[-0.9532,-0.5312,0],[-0.9532,-0.5156,0],[-0.9532,-0.5,0],[-0.9532,-0.4844,0],[-0.9532,-0.4688,0],[-0.9532,-0.4532,0],[-0.9532,-0.4376,0],[-0.9532,-0.4218,0],[-0.9532,-0.4062,0],[-0.9532,-0.3906,0],[-0.9532,-0.375,0],[-0.9532,-0.3594,0],[-0.9532,-0.3438,0],[-0.9532,-0.3282,0],[-0.9532,-0.3124,0],[-0.9532,-0.2968,0],[-0.9532,-0.2812,0],[-0.9532,-0.2656,0],[-0.9532,-0.25,0],[-0.9532,-0.2344,0],[-0.9532,-0.2188,0],[-0.9532,-0.2032,0],[-0.9532,-0.1876,0],[-0.9532,-0.1718,0],[-0.9532,-0.1562,0],[-0.9532,-0.1406,0],[-0.9532,-0.125,0],[-0.9532,-0.1094,0],[-0.9532,-0.0938,0],[-0.9532,-0.0782,0],[-0.9532,-0.0624,0],[-0.9532,-0.0468,0],[-0.9532,-0.0312,0],[-0.9532,-0.0156,0],[-0.9532,0,0],[-0.9532,0.0156,0],[-0.9532,0.0312,0],[-0.9532,0.0468,0],[-0.9532,0.0624,0],[-0.9532,0.0782,0],[-0.9532,0.0938,0],[-0.9532,0.1094,0],[-0.9532,0.125,0],[-0.9532,0.1406,0],[-0.9532,0.1562,0],[-0.9532,0.1718,0],[-0.9532,0.1876,0],[-0.9532,0.2032,0],[-0.9532,0.2188,0],[-0.9532,0.2344,0],[-0.9532,0.25,0],[-0.9532,0.2656,0],[-0.9532,0.2812,0],[-0.9532,0.2968,0],[-0.9532,0.3124,0],[-0.9532,0.3282,0],[-0.9532,0.3438,0],[-0.9532,0.3594,0],[-0.9532,0.375,0],[-0.9532,0.3906,0],[-0.9532,0.4062,0],[-0.9532,0.4218,0],[-0.9532,0.4376,0],[-0.9532,0.4532,0],[-0.9532,0.4688,0],[-0.9532,0.4844,0],[-0.9532,0.5,0],[-0.9532,0.5156,0],[-0.9532,0.5312,0],[-0.9532,0.5468,0],[-0.9532,0.5624,0],[-0.9532,0.5782,0],[-0.9532,0.5938,0],[-0.9532,0.6094,0],[-0.9532,0.625,0],[-0.9532,0.6406,0],[-0.9532,0.6562,0],[-0.9532,0.6718,0],[-0.9532,0.6876,0],[-0.9532,0.7032,0],[-0.9532,0.7188,0],[-0.9532,0.7344,0],[-0.9532,0.75,0],[-0.9532,0.7656,0],[-0.9532,0.7812,0],[-0.9532,0.7968,0],[-0.9532,0.8124,0],[-0.9532,0.8282,0],[-0.9532,0.8438,0],[-0.9532,0.8594,0],[-0.9532,0.875,0],[-0.9532,0.8906,0],[-0.9532,0.9062,0],[-0.9532,0.9218,0],[-0.9532,0.9376,0],[-0.9532,0.9532,0],[-0.9532,0.9688,0],[-0.9532,0.9844,0],[-0.9376,-1,0],[-0.9376,-0.9844,0],[-0.9376,-0.9688,0],[-0.9376,-0.9532,0],[-0.9376,-0.9376,0],[-0.9376,-0.9218,0],[-0.9376,-0.9062,0],[-0.9376,-0.8906,0],[-0.9376,-0.875,0],[-0.9376,-0.8594,0],[-0.9376,-0.8438,0],[-0.9376,-0.8282,0],[-0.9376,-0.8124,0],[-0.9376,-0.7968,0],[-0.9376,-0.7812,0],[-0.9376,-0.7656,0],[-0.9376,-0.75,0],[-0.9376,-0.7344,0],[-0.9376,-0.7188,0],[-0.9376,-0.7032,0],[-0.9376,-0.6876,0],[-0.9376,-0.6718,0],[-0.9376,-0.6562,0],[-0.9376,-0.6406,0],[-0.9376,-0.625,0],[-0.9376,-0.6094,0],[-0.9376,-0.5938,0],[-0.9376,-0.5782,0],[-0.9376,-0.5624,0],[-0.9376,-0.5468,0],[-0.9376,-0.5312,0],[-0.9376,-0.5156,0],[-0.9376,-0.5,0],[-0.9376,-0.4844,0],[-0.9376,-0.4688,0],[-0.9376,-0.4532,0],[-0.9376,-0.4376,0],[-0.9376,-0.4218,0],[-0.9376,-0.4062,0],[-0.9376,-0.3906,0],[-0.9376,-0.375,0],[-0.9376,-0.3594,0],[-0.9376,-0.3438,0],[-0.9376,-0.3282,0],[-0.9376,-0.3124,0],[-0.9376,-0.2968,0],[-0.9376,-0.2812,0],[-0.9376,-0.2656,0],[-0.9376,-0.25,0],[-0.9376,-0.2344,0],[-0.9376,-0.2188,0],[-0.9376,-0.2032,0],[-0.9376,-0.1876,0],[-0.9376,-0.1718,0],[-0.9376,-0.1562,0],[-0.9376,-0.1406,0],[-0.9376,-0.125,0],[-0.9376,-0.1094,0],[-0.9376,-0.0938,0],[-0.9376,-0.0782,0],[-0.9376,-0.0624,0],[-0.9376,-0.0468,0],[-0.9376,-0.0312,0],[-0.9376,-0.0156,0],[-0.9376,0,0],[-0.9376,0.0156,0],[-0.9376,0.0312,0],[-0.9376,0.0468,0],[-0.9376,0.0624,0],[-0.9376,0.0782,0],[-0.9376,0.0938,0],[-0.9376,0.1094,0],[-0.9376,0.125,0],[-0.9376,0.1406,0],[-0.9376,0.1562,0],[-0.9376,0.1718,0],[-0.9376,0.1876,0],[-0.9376,0.2032,0],[-0.9376,0.2188,0],[-0.9376,0.2344,0],[-0.9376,0.25,0],[-0.9376,0.2656,0],[-0.9376,0.2812,0],[-0.9376,0.2968,0],[-0.9376,0.3124,0],[-0.9376,0.3282,0],[-0.9376,0.3438,0],[-0.9376,0.3594,0],[-0.9376,0.375,0],[-0.9376,0.3906,0],[-0.9376,0.4062,0],[-0.9376,0.4218,0],[-0.9376,0.4376,0],[-0.9376,0.4532,0],[-0.9376,0.4688,0],[-0.9376,0.4844,0],[-0.9376,0.5,0],[-0.9376,0.5156,0],[-0.9376,0.5312,0],[-0.9376,0.5468,0],[-0.9376,0.5624,0],[-0.9376,0.5782,0],[-0.9376,0.5938,0],[-0.9376,0.6094,0],[-0.9376,0.625,0],[-0.9376,0.6406,0],[-0.9376,0.6562,0],[-0.9376,0.6718,0],[-0.9376,0.6876,0],[-0.9376,0.7032,0],[-0.9376,0.7188,0],[-0.9376,0.7344,0],[-0.9376,0.75,0],[-0.9376,0.7656,0],[-0.9376,0.7812,0],[-0.9376,0.7968,0],[-0.9376,0.8124,0],[-0.9376,0.8282,0],[-0.9376,0.8438,0],[-0.9376,0.8594,0],[-0.9376,0.875,0],[-0.9376,0.8906,0],[-0.9376,0.9062,0],[-0.9376,0.9218,0],[-0.9376,0.9376,0],[-0.9376,0.9532,0],[-0.9376,0.9688,0],[-0.9376,0.9844,0],[-0.9218,-1,0],[-0.9218,-0.9844,0],[-0.9218,-0.9688,0],[-0.9218,-0.9532,0],[-0.9218,-0.9376,0],[-0.9218,-0.9218,0],[-0.9218,-0.9062,0],[-0.9218,-0.8906,0],[-0.9218,-0.875,0],[-0.9218,-0.8594,0],[-0.9218,-0.8438,0],[-0.9218,-0.8282,0],[-0.9218,-0.8124,0],[-0.9218,-0.7968,0],[-0.9218,-0.7812,0],[-0.9218,-0.7656,0],[-0.9218,-0.75,0],[-0.9218,-0.7344,0],[-0.9218,-0.7188,0],[-0.9218,-0.7032,0],[-0.9218,-0.6876,0],[-0.9218,-0.6718,0],[-0.9218,-0.6562,0],[-0.9218,-0.6406,0],[-0.9218,-0.625,0],[-0.9218,-0.6094,0],[-0.9218,-0.5938,0],[-0.9218,-0.5782,0],[-0.9218,-0.5624,0],[-0.9218,-0.5468,0],[-0.9218,-0.5312,0],[-0.9218,-0.5156,0],[-0.9218,-0.5,0],[-0.9218,-0.4844,0],[-0.9218,-0.4688,0],[-0.9218,-0.4532,0],[-0.9218,-0.4376,0],[-0.9218,-0.4218,0],[-0.9218,-0.4062,0],[-0.9218,-0.3906,0],[-0.9218,-0.375,0],[-0.9218,-0.3594,0],[-0.9218,-0.3438,0],[-0.9218,-0.3282,0],[-0.9218,-0.3124,0],[-0.9218,-0.2968,0],[-0.9218,-0.2812,0],[-0.9218,-0.2656,0],[-0.9218,-0.25,0],[-0.9218,-0.2344,0],[-0.9218,-0.2188,0],[-0.9218,-0.2032,0],[-0.9218,-0.1876,0],[-0.9218,-0.1718,0],[-0.9218,-0.1562,0],[-0.9218,-0.1406,0],[-0.9218,-0.125,0],[-0.9218,-0.1094,0],[-0.9218,-0.0938,0],[-0.9218,-0.0782,0],[-0.9218,-0.0624,0],[-0.9218,-0.0468,0],[-0.9218,-0.0312,0],[-0.9218,-0.0156,0],[-0.9218,0,0],[-0.9218,0.0156,0],[-0.9218,0.0312,0],[-0.9218,0.0468,0],[-0.9218,0.0624,0],[-0.9218,0.0782,0],[-0.9218,0.0938,0],[-0.9218,0.1094,0],[-0.9218,0.125,0],[-0.9218,0.1406,0],[-0.9218,0.1562,0],[-0.9218,0.1718,0],[-0.9218,0.1876,0],[-0.9218,0.2032,0],[-0.9218,0.2188,0],[-0.9218,0.2344,0],[-0.9218,0.25,0],[-0.9218,0.2656,0],[-0.9218,0.2812,0],[-0.9218,0.2968,0],[-0.9218,0.3124,0],[-0.9218,0.3282,0],[-0.9218,0.3438,0],[-0.9218,0.3594,0],[-0.9218,0.375,0],[-0.9218,0.3906,0],[-0.9218,0.4062,0],[-0.9218,0.4218,0],[-0.9218,0.4376,0],[-0.9218,0.4532,0],[-0.9218,0.4688,0],[-0.9218,0.4844,0],[-0.9218,0.5,0],[-0.9218,0.5156,0],[-0.9218,0.5312,0],[-0.9218,0.5468,0],[-0.9218,0.5624,0],[-0.9218,0.5782,0],[-0.9218,0.5938,0],[-0.9218,0.6094,0],[-0.9218,0.625,0],[-0.9218,0.6406,0],[-0.9218,0.6562,0],[-0.9218,0.6718,0],[-0.9218,0.6876,0],[-0.9218,0.7032,0],[-0.9218,0.7188,0],[-0.9218,0.7344,0],[-0.9218,0.75,0],[-0.9218,0.7656,0],[-0.9218,0.7812,0],[-0.9218,0.7968,0],[-0.9218,0.8124,0],[-0.9218,0.8282,0],[-0.9218,0.8438,0],[-0.9218,0.8594,0],[-0.9218,0.875,0],[-0.9218,0.8906,0],[-0.9218,0.9062,0],[-0.9218,0.9218,0],[-0.9218,0.9376,0],[-0.9218,0.9532,0],[-0.9218,0.9688,0],[-0.9218,0.9844,0],[-0.9062,-1,0],[-0.9062,-0.9844,0],[-0.9062,-0.9688,0],[-0.9062,-0.9532,0],[-0.9062,-0.9376,0],[-0.9062,-0.9218,0],[-0.9062,-0.9062,0],[-0.9062,-0.8906,0],[-0.9062,-0.875,0],[-0.9062,-0.8594,0],[-0.9062,-0.8438,0],[-0.9062,-0.8282,0],[-0.9062,-0.8124,0],[-0.9062,-0.7968,0],[-0.9062,-0.7812,0],[-0.9062,-0.7656,0],[-0.9062,-0.75,0],[-0.9062,-0.7344,0],[-0.9062,-0.7188,0],[-0.9062,-0.7032,0],[-0.9062,-0.6876,0],[-0.9062,-0.6718,0],[-0.9062,-0.6562,0],[-0.9062,-0.6406,0],[-0.9062,-0.625,0],[-0.9062,-0.6094,0],[-0.9062,-0.5938,0],[-0.9062,-0.5782,0],[-0.9062,-0.5624,0],[-0.9062,-0.5468,0],[-0.9062,-0.5312,0],[-0.9062,-0.5156,0],[-0.9062,-0.5,0],[-0.9062,-0.4844,0],[-0.9062,-0.4688,0],[-0.9062,-0.4532,0],[-0.9062,-0.4376,0],[-0.9062,-0.4218,0],[-0.9062,-0.4062,0],[-0.9062,-0.3906,0],[-0.9062,-0.375,0],[-0.9062,-0.3594,0],[-0.9062,-0.3438,0],[-0.9062,-0.3282,0],[-0.9062,-0.3124,0],[-0.9062,-0.2968,0],[-0.9062,-0.2812,0],[-0.9062,-0.2656,0],[-0.9062,-0.25,0],[-0.9062,-0.2344,0],[-0.9062,-0.2188,0],[-0.9062,-0.2032,0],[-0.9062,-0.1876,0],[-0.9062,-0.1718,0],[-0.9062,-0.1562,0],[-0.9062,-0.1406,0],[-0.9062,-0.125,0],[-0.9062,-0.1094,0],[-0.9062,-0.0938,0],[-0.9062,-0.0782,0],[-0.9062,-0.0624,0],[-0.9062,-0.0468,0],[-0.9062,-0.0312,0],[-0.9062,-0.0156,0],[-0.9062,0,0],[-0.9062,0.0156,0],[-0.9062,0.0312,0],[-0.9062,0.0468,0],[-0.9062,0.0624,0],[-0.9062,0.0782,0],[-0.9062,0.0938,0],[-0.9062,0.1094,0],[-0.9062,0.125,0],[-0.9062,0.1406,0],[-0.9062,0.1562,0],[-0.9062,0.1718,0],[-0.9062,0.1876,0],[-0.9062,0.2032,0],[-0.9062,0.2188,0],[-0.9062,0.2344,0],[-0.9062,0.25,0],[-0.9062,0.2656,0],[-0.9062,0.2812,0],[-0.9062,0.2968,0],[-0.9062,0.3124,0],[-0.9062,0.3282,0],[-0.9062,0.3438,0],[-0.9062,0.3594,0],[-0.9062,0.375,0],[-0.9062,0.3906,0],[-0.9062,0.4062,0],[-0.9062,0.4218,0],[-0.9062,0.4376,0],[-0.9062,0.4532,0],[-0.9062,0.4688,0],[-0.9062,0.4844,0],[-0.9062,0.5,0],[-0.9062,0.5156,0],[-0.9062,0.5312,0],[-0.9062,0.5468,0],[-0.9062,0.5624,0],[-0.9062,0.5782,0],[-0.9062,0.5938,0],[-0.9062,0.6094,0],[-0.9062,0.625,0],[-0.9062,0.6406,0],[-0.9062,0.6562,0],[-0.9062,0.6718,0],[-0.9062,0.6876,0],[-0.9062,0.7032,0],[-0.9062,0.7188,0],[-0.9062,0.7344,0],[-0.9062,0.75,0],[-0.9062,0.7656,0],[-0.9062,0.7812,0],[-0.9062,0.7968,0],[-0.9062,0.8124,0],[-0.9062,0.8282,0],[-0.9062,0.8438,0],[-0.9062,0.8594,0],[-0.9062,0.875,0],[-0.9062,0.8906,0],[-0.9062,0.9062,0],[-0.9062,0.9218,0],[-0.9062,0.9376,0],[-0.9062,0.9532,0],[-0.9062,0.9688,0],[-0.9062,0.9844,0],[-0.8906,-1,0],[-0.8906,-0.9844,0],[-0.8906,-0.9688,0],[-0.8906,-0.9532,0],[-0.8906,-0.9376,0],[-0.8906,-0.9218,0],[-0.8906,-0.9062,0],[-0.8906,-0.8906,0],[-0.8906,-0.875,0],[-0.8906,-0.8594,0],[-0.8906,-0.8438,0],[-0.8906,-0.8282,0],[-0.8906,-0.8124,0],[-0.8906,-0.7968,0],[-0.8906,-0.7812,0],[-0.8906,-0.7656,0],[-0.8906,-0.75,0],[-0.8906,-0.7344,0],[-0.8906,-0.7188,0],[-0.8906,-0.7032,0],[-0.8906,-0.6876,0],[-0.8906,-0.6718,0],[-0.8906,-0.6562,0],[-0.8906,-0.6406,0],[-0.8906,-0.625,0],[-0.8906,-0.6094,0],[-0.8906,-0.5938,0],[-0.8906,-0.5782,0],[-0.8906,-0.5624,0],[-0.8906,-0.5468,0],[-0.8906,-0.5312,0],[-0.8906,-0.5156,0],[-0.8906,-0.5,0],[-0.8906,-0.4844,0],[-0.8906,-0.4688,0],[-0.8906,-0.4532,0],[-0.8906,-0.4376,0],[-0.8906,-0.4218,0],[-0.8906,-0.4062,0],[-0.8906,-0.3906,0],[-0.8906,-0.375,0],[-0.8906,-0.3594,0],[-0.8906,-0.3438,0],[-0.8906,-0.3282,0],[-0.8906,-0.3124,0],[-0.8906,-0.2968,0],[-0.8906,-0.2812,0],[-0.8906,-0.2656,0],[-0.8906,-0.25,0],[-0.8906,-0.2344,0],[-0.8906,-0.2188,0],[-0.8906,-0.2032,0],[-0.8906,-0.1876,0],[-0.8906,-0.1718,0],[-0.8906,-0.1562,0],[-0.8906,-0.1406,0],[-0.8906,-0.125,0],[-0.8906,-0.1094,0],[-0.8906,-0.0938,0],[-0.8906,-0.0782,0],[-0.8906,-0.0624,0],[-0.8906,-0.0468,0],[-0.8906,-0.0312,0],[-0.8906,-0.0156,0],[-0.8906,0,0],[-0.8906,0.0156,0],[-0.8906,0.0312,0],[-0.8906,0.0468,0],[-0.8906,0.0624,0],[-0.8906,0.0782,0],[-0.8906,0.0938,0],[-0.8906,0.1094,0],[-0.8906,0.125,0],[-0.8906,0.1406,0],[-0.8906,0.1562,0],[-0.8906,0.1718,0],[-0.8906,0.1876,0],[-0.8906,0.2032,0],[-0.8906,0.2188,0],[-0.8906,0.2344,0],[-0.8906,0.25,0],[-0.8906,0.2656,0],[-0.8906,0.2812,0],[-0.8906,0.2968,0],[-0.8906,0.3124,0],[-0.8906,0.3282,0],[-0.8906,0.3438,0],[-0.8906,0.3594,0],[-0.8906,0.375,0],[-0.8906,0.3906,0],[-0.8906,0.4062,0],[-0.8906,0.4218,0],[-0.8906,0.4376,0],[-0.8906,0.4532,0],[-0.8906,0.4688,0],[-0.8906,0.4844,0],[-0.8906,0.5,0],[-0.8906,0.5156,0],[-0.8906,0.5312,0],[-0.8906,0.5468,0],[-0.8906,0.5624,0],[-0.8906,0.5782,0],[-0.8906,0.5938,0],[-0.8906,0.6094,0],[-0.8906,0.625,0],[-0.8906,0.6406,0],[-0.8906,0.6562,0],[-0.8906,0.6718,0],[-0.8906,0.6876,0],[-0.8906,0.7032,0],[-0.8906,0.7188,0],[-0.8906,0.7344,0],[-0.8906,0.75,0],[-0.8906,0.7656,0],[-0.8906,0.7812,0],[-0.8906,0.7968,0],[-0.8906,0.8124,0],[-0.8906,0.8282,0],[-0.8906,0.8438,0],[-0.8906,0.8594,0],[-0.8906,0.875,0],[-0.8906,0.8906,0],[-0.8906,0.9062,0],[-0.8906,0.9218,0],[-0.8906,0.9376,0],[-0.8906,0.9532,0],[-0.8906,0.9688,0],[-0.8906,0.9844,0],[-0.875,-1,0],[-0.875,-0.9844,0],[-0.875,-0.9688,0],[-0.875,-0.9532,0],[-0.875,-0.9376,0],[-0.875,-0.9218,0],[-0.875,-0.9062,0],[-0.875,-0.8906,0],[-0.875,-0.875,0],[-0.875,-0.8594,0],[-0.875,-0.8438,0],[-0.875,-0.8282,0],[-0.875,-0.8124,0],[-0.875,-0.7968,0],[-0.875,-0.7812,0],[-0.875,-0.7656,0],[-0.875,-0.75,0],[-0.875,-0.7344,0],[-0.875,-0.7188,0],[-0.875,-0.7032,0],[-0.875,-0.6876,0],[-0.875,-0.6718,0],[-0.875,-0.6562,0],[-0.875,-0.6406,0],[-0.875,-0.625,0],[-0.875,-0.6094,0],[-0.875,-0.5938,0],[-0.875,-0.5782,0],[-0.875,-0.5624,0],[-0.875,-0.5468,0],[-0.875,-0.5312,0],[-0.875,-0.5156,0],[-0.875,-0.5,0],[-0.875,-0.4844,0],[-0.875,-0.4688,0],[-0.875,-0.4532,0],[-0.875,-0.4376,0],[-0.875,-0.4218,0],[-0.875,-0.4062,0],[-0.875,-0.3906,0],[-0.875,-0.375,0],[-0.875,-0.3594,0],[-0.875,-0.3438,0],[-0.875,-0.3282,0],[-0.875,-0.3124,0],[-0.875,-0.2968,0],[-0.875,-0.2812,0],[-0.875,-0.2656,0],[-0.875,-0.25,0],[-0.875,-0.2344,0],[-0.875,-0.2188,0],[-0.875,-0.2032,0],[-0.875,-0.1876,0],[-0.875,-0.1718,0],[-0.875,-0.1562,0],[-0.875,-0.1406,0],[-0.875,-0.125,0],[-0.875,-0.1094,0],[-0.875,-0.0938,0],[-0.875,-0.0782,0],[-0.875,-0.0624,0],[-0.875,-0.0468,0],[-0.875,-0.0312,0],[-0.875,-0.0156,0],[-0.875,0,0],[-0.875,0.0156,0],[-0.875,0.0312,0],[-0.875,0.0468,0],[-0.875,0.0624,0],[-0.875,0.0782,0],[-0.875,0.0938,0],[-0.875,0.1094,0],[-0.875,0.125,0],[-0.875,0.1406,0],[-0.875,0.1562,0],[-0.875,0.1718,0],[-0.875,0.1876,0],[-0.875,0.2032,0],[-0.875,0.2188,0],[-0.875,0.2344,0],[-0.875,0.25,0],[-0.875,0.2656,0],[-0.875,0.2812,0],[-0.875,0.2968,0],[-0.875,0.3124,0],[-0.875,0.3282,0],[-0.875,0.3438,0],[-0.875,0.3594,0],[-0.875,0.375,0],[-0.875,0.3906,0],[-0.875,0.4062,0],[-0.875,0.4218,0],[-0.875,0.4376,0],[-0.875,0.4532,0],[-0.875,0.4688,0],[-0.875,0.4844,0],[-0.875,0.5,0],[-0.875,0.5156,0],[-0.875,0.5312,0],[-0.875,0.5468,0],[-0.875,0.5624,0],[-0.875,0.5782,0],[-0.875,0.5938,0],[-0.875,0.6094,0],[-0.875,0.625,0],[-0.875,0.6406,0],[-0.875,0.6562,0],[-0.875,0.6718,0],[-0.875,0.6876,0],[-0.875,0.7032,0],[-0.875,0.7188,0],[-0.875,0.7344,0],[-0.875,0.75,0],[-0.875,0.7656,0],[-0.875,0.7812,0],[-0.875,0.7968,0],[-0.875,0.8124,0],[-0.875,0.8282,0],[-0.875,0.8438,0],[-0.875,0.8594,0],[-0.875,0.875,0],[-0.875,0.8906,0],[-0.875,0.9062,0],[-0.875,0.9218,0],[-0.875,0.9376,0],[-0.875,0.9532,0],[-0.875,0.9688,0],[-0.875,0.9844,0],[-0.8594,-1,0],[-0.8594,-0.9844,0],[-0.8594,-0.9688,0],[-0.8594,-0.9532,0],[-0.8594,-0.9376,0],[-0.8594,-0.9218,0],[-0.8594,-0.9062,0],[-0.8594,-0.8906,0],[-0.8594,-0.875,0],[-0.8594,-0.8594,0],[-0.8594,-0.8438,0],[-0.8594,-0.8282,0],[-0.8594,-0.8124,0],[-0.8594,-0.7968,0],[-0.8594,-0.7812,0],[-0.8594,-0.7656,0],[-0.8594,-0.75,0],[-0.8594,-0.7344,0],[-0.8594,-0.7188,0],[-0.8594,-0.7032,0],[-0.8594,-0.6876,0],[-0.8594,-0.6718,0],[-0.8594,-0.6562,0],[-0.8594,-0.6406,0],[-0.8594,-0.625,0],[-0.8594,-0.6094,0],[-0.8594,-0.5938,0],[-0.8594,-0.5782,0],[-0.8594,-0.5624,0],[-0.8594,-0.5468,0],[-0.8594,-0.5312,0],[-0.8594,-0.5156,0],[-0.8594,-0.5,0],[-0.8594,-0.4844,0],[-0.8594,-0.4688,0],[-0.8594,-0.4532,0],[-0.8594,-0.4376,0],[-0.8594,-0.4218,0],[-0.8594,-0.4062,0],[-0.8594,-0.3906,0],[-0.8594,-0.375,0],[-0.8594,-0.3594,0],[-0.8594,-0.3438,0],[-0.8594,-0.3282,0],[-0.8594,-0.3124,0],[-0.8594,-0.2968,0],[-0.8594,-0.2812,0],[-0.8594,-0.2656,0],[-0.8594,-0.25,0],[-0.8594,-0.2344,0],[-0.8594,-0.2188,0],[-0.8594,-0.2032,0],[-0.8594,-0.1876,0],[-0.8594,-0.1718,0],[-0.8594,-0.1562,0],[-0.8594,-0.1406,0],[-0.8594,-0.125,0],[-0.8594,-0.1094,0],[-0.8594,-0.0938,0],[-0.8594,-0.0782,0],[-0.8594,-0.0624,0],[-0.8594,-0.0468,0],[-0.8594,-0.0312,0],[-0.8594,-0.0156,0],[-0.8594,0,0],[-0.8594,0.0156,0],[-0.8594,0.0312,0],[-0.8594,0.0468,0],[-0.8594,0.0624,0],[-0.8594,0.0782,0],[-0.8594,0.0938,0],[-0.8594,0.1094,0],[-0.8594,0.125,0],[-0.8594,0.1406,0],[-0.8594,0.1562,0],[-0.8594,0.1718,0],[-0.8594,0.1876,0],[-0.8594,0.2032,0],[-0.8594,0.2188,0],[-0.8594,0.2344,0],[-0.8594,0.25,0],[-0.8594,0.2656,0],[-0.8594,0.2812,0],[-0.8594,0.2968,0],[-0.8594,0.3124,0],[-0.8594,0.3282,0],[-0.8594,0.3438,0],[-0.8594,0.3594,0],[-0.8594,0.375,0],[-0.8594,0.3906,0],[-0.8594,0.4062,0],[-0.8594,0.4218,0],[-0.8594,0.4376,0],[-0.8594,0.4532,0],[-0.8594,0.4688,0],[-0.8594,0.4844,0],[-0.8594,0.5,0],[-0.8594,0.5156,0],[-0.8594,0.5312,0],[-0.8594,0.5468,0],[-0.8594,0.5624,0],[-0.8594,0.5782,0],[-0.8594,0.5938,0],[-0.8594,0.6094,0],[-0.8594,0.625,0],[-0.8594,0.6406,0],[-0.8594,0.6562,0],[-0.8594,0.6718,0],[-0.8594,0.6876,0],[-0.8594,0.7032,0],[-0.8594,0.7188,0],[-0.8594,0.7344,0],[-0.8594,0.75,0],[-0.8594,0.7656,0],[-0.8594,0.7812,0],[-0.8594,0.7968,0],[-0.8594,0.8124,0],[-0.8594,0.8282,0],[-0.8594,0.8438,0],[-0.8594,0.8594,0],[-0.8594,0.875,0],[-0.8594,0.8906,0],[-0.8594,0.9062,0],[-0.8594,0.9218,0],[-0.8594,0.9376,0],[-0.8594,0.9532,0],[-0.8594,0.9688,0],[-0.8594,0.9844,0],[-0.8438,-1,0],[-0.8438,-0.9844,0],[-0.8438,-0.9688,0],[-0.8438,-0.9532,0],[-0.8438,-0.9376,0],[-0.8438,-0.9218,0],[-0.8438,-0.9062,0],[-0.8438,-0.8906,0],[-0.8438,-0.875,0],[-0.8438,-0.8594,0],[-0.8438,-0.8438,0],[-0.8438,-0.8282,0],[-0.8438,-0.8124,0],[-0.8438,-0.7968,0],[-0.8438,-0.7812,0],[-0.8438,-0.7656,0],[-0.8438,-0.75,0],[-0.8438,-0.7344,0],[-0.8438,-0.7188,0],[-0.8438,-0.7032,0],[-0.8438,-0.6876,0],[-0.8438,-0.6718,0],[-0.8438,-0.6562,0],[-0.8438,-0.6406,0],[-0.8438,-0.625,0],[-0.8438,-0.6094,0],[-0.8438,-0.5938,0],[-0.8438,-0.5782,0],[-0.8438,-0.5624,0],[-0.8438,-0.5468,0],[-0.8438,-0.5312,0],[-0.8438,-0.5156,0],[-0.8438,-0.5,0],[-0.8438,-0.4844,0],[-0.8438,-0.4688,0],[-0.8438,-0.4532,0],[-0.8438,-0.4376,0],[-0.8438,-0.4218,0],[-0.8438,-0.4062,0],[-0.8438,-0.3906,0],[-0.8438,-0.375,0],[-0.8438,-0.3594,0],[-0.8438,-0.3438,0],[-0.8438,-0.3282,0],[-0.8438,-0.3124,0],[-0.8438,-0.2968,0],[-0.8438,-0.2812,0],[-0.8438,-0.2656,0],[-0.8438,-0.25,0],[-0.8438,-0.2344,0],[-0.8438,-0.2188,0],[-0.8438,-0.2032,0],[-0.8438,-0.1876,0],[-0.8438,-0.1718,0],[-0.8438,-0.1562,0],[-0.8438,-0.1406,0],[-0.8438,-0.125,0],[-0.8438,-0.1094,0],[-0.8438,-0.0938,0],[-0.8438,-0.0782,0],[-0.8438,-0.0624,0],[-0.8438,-0.0468,0],[-0.8438,-0.0312,0],[-0.8438,-0.0156,0],[-0.8438,0,0],[-0.8438,0.0156,0],[-0.8438,0.0312,0],[-0.8438,0.0468,0],[-0.8438,0.0624,0],[-0.8438,0.0782,0],[-0.8438,0.0938,0],[-0.8438,0.1094,0],[-0.8438,0.125,0],[-0.8438,0.1406,0],[-0.8438,0.1562,0],[-0.8438,0.1718,0],[-0.8438,0.1876,0],[-0.8438,0.2032,0],[-0.8438,0.2188,0],[-0.8438,0.2344,0],[-0.8438,0.25,0],[-0.8438,0.2656,0],[-0.8438,0.2812,0],[-0.8438,0.2968,0],[-0.8438,0.3124,0],[-0.8438,0.3282,0],[-0.8438,0.3438,0],[-0.8438,0.3594,0],[-0.8438,0.375,0],[-0.8438,0.3906,0],[-0.8438,0.4062,0],[-0.8438,0.4218,0],[-0.8438,0.4376,0],[-0.8438,0.4532,0],[-0.8438,0.4688,0],[-0.8438,0.4844,0],[-0.8438,0.5,0],[-0.8438,0.5156,0],[-0.8438,0.5312,0],[-0.8438,0.5468,0],[-0.8438,0.5624,0],[-0.8438,0.5782,0],[-0.8438,0.5938,0],[-0.8438,0.6094,0],[-0.8438,0.625,0],[-0.8438,0.6406,0],[-0.8438,0.6562,0],[-0.8438,0.6718,0],[-0.8438,0.6876,0],[-0.8438,0.7032,0],[-0.8438,0.7188,0],[-0.8438,0.7344,0],[-0.8438,0.75,0],[-0.8438,0.7656,0],[-0.8438,0.7812,0],[-0.8438,0.7968,0],[-0.8438,0.8124,0],[-0.8438,0.8282,0],[-0.8438,0.8438,0],[-0.8438,0.8594,0],[-0.8438,0.875,0],[-0.8438,0.8906,0],[-0.8438,0.9062,0],[-0.8438,0.9218,0],[-0.8438,0.9376,0],[-0.8438,0.9532,0],[-0.8438,0.9688,0],[-0.8438,0.9844,0],[-0.8282,-1,0],[-0.8282,-0.9844,0],[-0.8282,-0.9688,0],[-0.8282,-0.9532,0],[-0.8282,-0.9376,0],[-0.8282,-0.9218,0],[-0.8282,-0.9062,0],[-0.8282,-0.8906,0],[-0.8282,-0.875,0],[-0.8282,-0.8594,0],[-0.8282,-0.8438,0],[-0.8282,-0.8282,0],[-0.8282,-0.8124,0],[-0.8282,-0.7968,0],[-0.8282,-0.7812,0],[-0.8282,-0.7656,0],[-0.8282,-0.75,0],[-0.8282,-0.7344,0],[-0.8282,-0.7188,0],[-0.8282,-0.7032,0],[-0.8282,-0.6876,0],[-0.8282,-0.6718,0],[-0.8282,-0.6562,0],[-0.8282,-0.6406,0],[-0.8282,-0.625,0],[-0.8282,-0.6094,0],[-0.8282,-0.5938,0],[-0.8282,-0.5782,0],[-0.8282,-0.5624,0],[-0.8282,-0.5468,0],[-0.8282,-0.5312,0],[-0.8282,-0.5156,0],[-0.8282,-0.5,0],[-0.8282,-0.4844,0],[-0.8282,-0.4688,0],[-0.8282,-0.4532,0],[-0.8282,-0.4376,0],[-0.8282,-0.4218,0],[-0.8282,-0.4062,0],[-0.8282,-0.3906,0],[-0.8282,-0.375,0],[-0.8282,-0.3594,0],[-0.8282,-0.3438,0],[-0.8282,-0.3282,0],[-0.8282,-0.3124,0],[-0.8282,-0.2968,0],[-0.8282,-0.2812,0],[-0.8282,-0.2656,0],[-0.8282,-0.25,0],[-0.8282,-0.2344,0],[-0.8282,-0.2188,0],[-0.8282,-0.2032,0],[-0.8282,-0.1876,0],[-0.8282,-0.1718,0],[-0.8282,-0.1562,0],[-0.8282,-0.1406,0],[-0.8282,-0.125,0],[-0.8282,-0.1094,0],[-0.8282,-0.0938,0],[-0.8282,-0.0782,0],[-0.8282,-0.0624,0],[-0.8282,-0.0468,0],[-0.8282,-0.0312,0],[-0.8282,-0.0156,0],[-0.8282,0,0],[-0.8282,0.0156,0],[-0.8282,0.0312,0],[-0.8282,0.0468,0],[-0.8282,0.0624,0],[-0.8282,0.0782,0],[-0.8282,0.0938,0],[-0.8282,0.1094,0],[-0.8282,0.125,0],[-0.8282,0.1406,0],[-0.8282,0.1562,0],[-0.8282,0.1718,0],[-0.8282,0.1876,0],[-0.8282,0.2032,0],[-0.8282,0.2188,0],[-0.8282,0.2344,0],[-0.8282,0.25,0],[-0.8282,0.2656,0],[-0.8282,0.2812,0],[-0.8282,0.2968,0],[-0.8282,0.3124,0],[-0.8282,0.3282,0],[-0.8282,0.3438,0],[-0.8282,0.3594,0],[-0.8282,0.375,0],[-0.8282,0.3906,0],[-0.8282,0.4062,0],[-0.8282,0.4218,0],[-0.8282,0.4376,0],[-0.8282,0.4532,0],[-0.8282,0.4688,0],[-0.8282,0.4844,0],[-0.8282,0.5,0],[-0.8282,0.5156,0],[-0.8282,0.5312,0],[-0.8282,0.5468,0],[-0.8282,0.5624,0],[-0.8282,0.5782,0],[-0.8282,0.5938,0],[-0.8282,0.6094,0],[-0.8282,0.625,0],[-0.8282,0.6406,0],[-0.8282,0.6562,0],[-0.8282,0.6718,0],[-0.8282,0.6876,0],[-0.8282,0.7032,0],[-0.8282,0.7188,0],[-0.8282,0.7344,0],[-0.8282,0.75,0],[-0.8282,0.7656,0],[-0.8282,0.7812,0],[-0.8282,0.7968,0],[-0.8282,0.8124,0],[-0.8282,0.8282,0],[-0.8282,0.8438,0],[-0.8282,0.8594,0],[-0.8282,0.875,0],[-0.8282,0.8906,0],[-0.8282,0.9062,0],[-0.8282,0.9218,0],[-0.8282,0.9376,0],[-0.8282,0.9532,0],[-0.8282,0.9688,0],[-0.8282,0.9844,0],[-0.8124,-1,0],[-0.8124,-0.9844,0],[-0.8124,-0.9688,0],[-0.8124,-0.9532,0],[-0.8124,-0.9376,0],[-0.8124,-0.9218,0],[-0.8124,-0.9062,0],[-0.8124,-0.8906,0],[-0.8124,-0.875,0],[-0.8124,-0.8594,0],[-0.8124,-0.8438,0],[-0.8124,-0.8282,0],[-0.8124,-0.8124,0],[-0.8124,-0.7968,0],[-0.8124,-0.7812,0],[-0.8124,-0.7656,0],[-0.8124,-0.75,0],[-0.8124,-0.7344,0],[-0.8124,-0.7188,0],[-0.8124,-0.7032,0],[-0.8124,-0.6876,0],[-0.8124,-0.6718,0],[-0.8124,-0.6562,0],[-0.8124,-0.6406,0],[-0.8124,-0.625,0],[-0.8124,-0.6094,0],[-0.8124,-0.5938,0],[-0.8124,-0.5782,0],[-0.8124,-0.5624,0],[-0.8124,-0.5468,0],[-0.8124,-0.5312,0],[-0.8124,-0.5156,0],[-0.8124,-0.5,0],[-0.8124,-0.4844,0],[-0.8124,-0.4688,0],[-0.8124,-0.4532,0],[-0.8124,-0.4376,0],[-0.8124,-0.4218,0],[-0.8124,-0.4062,0],[-0.8124,-0.3906,0],[-0.8124,-0.375,0],[-0.8124,-0.3594,0],[-0.8124,-0.3438,0],[-0.8124,-0.3282,0],[-0.8124,-0.3124,0],[-0.8124,-0.2968,0],[-0.8124,-0.2812,0],[-0.8124,-0.2656,0],[-0.8124,-0.25,0],[-0.8124,-0.2344,0],[-0.8124,-0.2188,0],[-0.8124,-0.2032,0],[-0.8124,-0.1876,0],[-0.8124,-0.1718,0],[-0.8124,-0.1562,0],[-0.8124,-0.1406,0],[-0.8124,-0.125,0],[-0.8124,-0.1094,0],[-0.8124,-0.0938,0],[-0.8124,-0.0782,0],[-0.8124,-0.0624,0],[-0.8124,-0.0468,0],[-0.8124,-0.0312,0],[-0.8124,-0.0156,0],[-0.8124,0,0],[-0.8124,0.0156,0],[-0.8124,0.0312,0],[-0.8124,0.0468,0],[-0.8124,0.0624,0],[-0.8124,0.0782,0],[-0.8124,0.0938,0],[-0.8124,0.1094,0],[-0.8124,0.125,0],[-0.8124,0.1406,0],[-0.8124,0.1562,0],[-0.8124,0.1718,0],[-0.8124,0.1876,0],[-0.8124,0.2032,0],[-0.8124,0.2188,0],[-0.8124,0.2344,0],[-0.8124,0.25,0],[-0.8124,0.2656,0],[-0.8124,0.2812,0],[-0.8124,0.2968,0],[-0.8124,0.3124,0],[-0.8124,0.3282,0],[-0.8124,0.3438,0],[-0.8124,0.3594,0],[-0.8124,0.375,0],[-0.8124,0.3906,0],[-0.8124,0.4062,0],[-0.8124,0.4218,0],[-0.8124,0.4376,0],[-0.8124,0.4532,0],[-0.8124,0.4688,0],[-0.8124,0.4844,0],[-0.8124,0.5,0],[-0.8124,0.5156,0],[-0.8124,0.5312,0],[-0.8124,0.5468,0],[-0.8124,0.5624,0],[-0.8124,0.5782,0],[-0.8124,0.5938,0],[-0.8124,0.6094,0],[-0.8124,0.625,0],[-0.8124,0.6406,0],[-0.8124,0.6562,0],[-0.8124,0.6718,0],[-0.8124,0.6876,0],[-0.8124,0.7032,0],[-0.8124,0.7188,0],[-0.8124,0.7344,0],[-0.8124,0.75,0],[-0.8124,0.7656,0],[-0.8124,0.7812,0],[-0.8124,0.7968,0],[-0.8124,0.8124,0],[-0.8124,0.8282,0],[-0.8124,0.8438,0],[-0.8124,0.8594,0],[-0.8124,0.875,0],[-0.8124,0.8906,0],[-0.8124,0.9062,0],[-0.8124,0.9218,0],[-0.8124,0.9376,0],[-0.8124,0.9532,0],[-0.8124,0.9688,0],[-0.8124,0.9844,0],[-0.7968,-1,0],[-0.7968,-0.9844,0],[-0.7968,-0.9688,0],[-0.7968,-0.9532,0],[-0.7968,-0.9376,0],[-0.7968,-0.9218,0],[-0.7968,-0.9062,0],[-0.7968,-0.8906,0],[-0.7968,-0.875,0],[-0.7968,-0.8594,0],[-0.7968,-0.8438,0],[-0.7968,-0.8282,0],[-0.7968,-0.8124,0],[-0.7968,-0.7968,0],[-0.7968,-0.7812,0],[-0.7968,-0.7656,0],[-0.7968,-0.75,0],[-0.7968,-0.7344,0],[-0.7968,-0.7188,0],[-0.7968,-0.7032,0],[-0.7968,-0.6876,0],[-0.7968,-0.6718,0],[-0.7968,-0.6562,0],[-0.7968,-0.6406,0],[-0.7968,-0.625,0],[-0.7968,-0.6094,0],[-0.7968,-0.5938,0],[-0.7968,-0.5782,0],[-0.7968,-0.5624,0],[-0.7968,-0.5468,0],[-0.7968,-0.5312,0],[-0.7968,-0.5156,0],[-0.7968,-0.5,0],[-0.7968,-0.4844,0],[-0.7968,-0.4688,0],[-0.7968,-0.4532,0],[-0.7968,-0.4376,0],[-0.7968,-0.4218,0],[-0.7968,-0.4062,0],[-0.7968,-0.3906,0],[-0.7968,-0.375,0],[-0.7968,-0.3594,0],[-0.7968,-0.3438,0],[-0.7968,-0.3282,0],[-0.7968,-0.3124,0],[-0.7968,-0.2968,0],[-0.7968,-0.2812,0],[-0.7968,-0.2656,0],[-0.7968,-0.25,0],[-0.7968,-0.2344,0],[-0.7968,-0.2188,0],[-0.7968,-0.2032,0],[-0.7968,-0.1876,0],[-0.7968,-0.1718,0],[-0.7968,-0.1562,0],[-0.7968,-0.1406,0],[-0.7968,-0.125,0],[-0.7968,-0.1094,0],[-0.7968,-0.0938,0],[-0.7968,-0.0782,0],[-0.7968,-0.0624,0],[-0.7968,-0.0468,0],[-0.7968,-0.0312,0],[-0.7968,-0.0156,0],[-0.7968,0,0],[-0.7968,0.0156,0],[-0.7968,0.0312,0],[-0.7968,0.0468,0],[-0.7968,0.0624,0],[-0.7968,0.0782,0],[-0.7968,0.0938,0],[-0.7968,0.1094,0],[-0.7968,0.125,0],[-0.7968,0.1406,0],[-0.7968,0.1562,0],[-0.7968,0.1718,0],[-0.7968,0.1876,0],[-0.7968,0.2032,0],[-0.7968,0.2188,0],[-0.7968,0.2344,0],[-0.7968,0.25,0],[-0.7968,0.2656,0],[-0.7968,0.2812,0],[-0.7968,0.2968,0],[-0.7968,0.3124,0],[-0.7968,0.3282,0],[-0.7968,0.3438,0],[-0.7968,0.3594,0],[-0.7968,0.375,0],[-0.7968,0.3906,0],[-0.7968,0.4062,0],[-0.7968,0.4218,0],[-0.7968,0.4376,0],[-0.7968,0.4532,0],[-0.7968,0.4688,0],[-0.7968,0.4844,0],[-0.7968,0.5,0],[-0.7968,0.5156,0],[-0.7968,0.5312,0],[-0.7968,0.5468,0],[-0.7968,0.5624,0],[-0.7968,0.5782,0],[-0.7968,0.5938,0],[-0.7968,0.6094,0],[-0.7968,0.625,0],[-0.7968,0.6406,0],[-0.7968,0.6562,0],[-0.7968,0.6718,0],[-0.7968,0.6876,0],[-0.7968,0.7032,0],[-0.7968,0.7188,0],[-0.7968,0.7344,0],[-0.7968,0.75,0],[-0.7968,0.7656,0],[-0.7968,0.7812,0],[-0.7968,0.7968,0],[-0.7968,0.8124,0],[-0.7968,0.8282,0],[-0.7968,0.8438,0],[-0.7968,0.8594,0],[-0.7968,0.875,0],[-0.7968,0.8906,0],[-0.7968,0.9062,0],[-0.7968,0.9218,0],[-0.7968,0.9376,0],[-0.7968,0.9532,0],[-0.7968,0.9688,0],[-0.7968,0.9844,0],[-0.7812,-1,0],[-0.7812,-0.9844,0],[-0.7812,-0.9688,0],[-0.7812,-0.9532,0],[-0.7812,-0.9376,0],[-0.7812,-0.9218,0],[-0.7812,-0.9062,0],[-0.7812,-0.8906,0],[-0.7812,-0.875,0],[-0.7812,-0.8594,0],[-0.7812,-0.8438,0],[-0.7812,-0.8282,0],[-0.7812,-0.8124,0],[-0.7812,-0.7968,0],[-0.7812,-0.7812,0],[-0.7812,-0.7656,0],[-0.7812,-0.75,0],[-0.7812,-0.7344,0],[-0.7812,-0.7188,0],[-0.7812,-0.7032,0],[-0.7812,-0.6876,0],[-0.7812,-0.6718,0],[-0.7812,-0.6562,0],[-0.7812,-0.6406,0],[-0.7812,-0.625,0],[-0.7812,-0.6094,0],[-0.7812,-0.5938,0],[-0.7812,-0.5782,0],[-0.7812,-0.5624,0],[-0.7812,-0.5468,0],[-0.7812,-0.5312,0],[-0.7812,-0.5156,0],[-0.7812,-0.5,0],[-0.7812,-0.4844,0],[-0.7812,-0.4688,0],[-0.7812,-0.4532,0],[-0.7812,-0.4376,0],[-0.7812,-0.4218,0],[-0.7812,-0.4062,0],[-0.7812,-0.3906,0],[-0.7812,-0.375,0],[-0.7812,-0.3594,0],[-0.7812,-0.3438,0],[-0.7812,-0.3282,0],[-0.7812,-0.3124,0],[-0.7812,-0.2968,0],[-0.7812,-0.2812,0],[-0.7812,-0.2656,0],[-0.7812,-0.25,0],[-0.7812,-0.2344,0],[-0.7812,-0.2188,0],[-0.7812,-0.2032,0],[-0.7812,-0.1876,0],[-0.7812,-0.1718,0],[-0.7812,-0.1562,0],[-0.7812,-0.1406,0],[-0.7812,-0.125,0],[-0.7812,-0.1094,0],[-0.7812,-0.0938,0],[-0.7812,-0.0782,0],[-0.7812,-0.0624,0],[-0.7812,-0.0468,0],[-0.7812,-0.0312,0],[-0.7812,-0.0156,0],[-0.7812,0,0],[-0.7812,0.0156,0],[-0.7812,0.0312,0],[-0.7812,0.0468,0],[-0.7812,0.0624,0],[-0.7812,0.0782,0],[-0.7812,0.0938,0],[-0.7812,0.1094,0],[-0.7812,0.125,0],[-0.7812,0.1406,0],[-0.7812,0.1562,0],[-0.7812,0.1718,0],[-0.7812,0.1876,0],[-0.7812,0.2032,0],[-0.7812,0.2188,0],[-0.7812,0.2344,0],[-0.7812,0.25,0],[-0.7812,0.2656,0],[-0.7812,0.2812,0],[-0.7812,0.2968,0],[-0.7812,0.3124,0],[-0.7812,0.3282,0],[-0.7812,0.3438,0],[-0.7812,0.3594,0],[-0.7812,0.375,0],[-0.7812,0.3906,0],[-0.7812,0.4062,0],[-0.7812,0.4218,0],[-0.7812,0.4376,0],[-0.7812,0.4532,0],[-0.7812,0.4688,0],[-0.7812,0.4844,0],[-0.7812,0.5,0],[-0.7812,0.5156,0],[-0.7812,0.5312,0],[-0.7812,0.5468,0],[-0.7812,0.5624,0],[-0.7812,0.5782,0],[-0.7812,0.5938,0],[-0.7812,0.6094,0],[-0.7812,0.625,0],[-0.7812,0.6406,0],[-0.7812,0.6562,0],[-0.7812,0.6718,0],[-0.7812,0.6876,0],[-0.7812,0.7032,0],[-0.7812,0.7188,0],[-0.7812,0.7344,0],[-0.7812,0.75,0],[-0.7812,0.7656,0],[-0.7812,0.7812,0],[-0.7812,0.7968,0],[-0.7812,0.8124,0],[-0.7812,0.8282,0],[-0.7812,0.8438,0],[-0.7812,0.8594,0],[-0.7812,0.875,0],[-0.7812,0.8906,0],[-0.7812,0.9062,0],[-0.7812,0.9218,0],[-0.7812,0.9376,0],[-0.7812,0.9532,0],[-0.7812,0.9688,0],[-0.7812,0.9844,0],[-0.7656,-1,0],[-0.7656,-0.9844,0],[-0.7656,-0.9688,0],[-0.7656,-0.9532,0],[-0.7656,-0.9376,0],[-0.7656,-0.9218,0],[-0.7656,-0.9062,0],[-0.7656,-0.8906,0],[-0.7656,-0.875,0],[-0.7656,-0.8594,0],[-0.7656,-0.8438,0],[-0.7656,-0.8282,0],[-0.7656,-0.8124,0],[-0.7656,-0.7968,0],[-0.7656,-0.7812,0],[-0.7656,-0.7656,0],[-0.7656,-0.75,0],[-0.7656,-0.7344,0],[-0.7656,-0.7188,0],[-0.7656,-0.7032,0],[-0.7656,-0.6876,0],[-0.7656,-0.6718,0],[-0.7656,-0.6562,0],[-0.7656,-0.6406,0],[-0.7656,-0.625,0],[-0.7656,-0.6094,0],[-0.7656,-0.5938,0],[-0.7656,-0.5782,0],[-0.7656,-0.5624,0],[-0.7656,-0.5468,0],[-0.7656,-0.5312,0],[-0.7656,-0.5156,0],[-0.7656,-0.5,0],[-0.7656,-0.4844,0],[-0.7656,-0.4688,0],[-0.7656,-0.4532,0],[-0.7656,-0.4376,0],[-0.7656,-0.4218,0],[-0.7656,-0.4062,0],[-0.7656,-0.3906,0],[-0.7656,-0.375,0],[-0.7656,-0.3594,0],[-0.7656,-0.3438,0],[-0.7656,-0.3282,0],[-0.7656,-0.3124,0],[-0.7656,-0.2968,0],[-0.7656,-0.2812,0],[-0.7656,-0.2656,0],[-0.7656,-0.25,0],[-0.7656,-0.2344,0],[-0.7656,-0.2188,0],[-0.7656,-0.2032,0],[-0.7656,-0.1876,0],[-0.7656,-0.1718,0],[-0.7656,-0.1562,0],[-0.7656,-0.1406,0],[-0.7656,-0.125,0],[-0.7656,-0.1094,0],[-0.7656,-0.0938,0],[-0.7656,-0.0782,0],[-0.7656,-0.0624,0],[-0.7656,-0.0468,0],[-0.7656,-0.0312,0],[-0.7656,-0.0156,0],[-0.7656,0,0],[-0.7656,0.0156,0],[-0.7656,0.0312,0],[-0.7656,0.0468,0],[-0.7656,0.0624,0],[-0.7656,0.0782,0],[-0.7656,0.0938,0],[-0.7656,0.1094,0],[-0.7656,0.125,0],[-0.7656,0.1406,0],[-0.7656,0.1562,0],[-0.7656,0.1718,0],[-0.7656,0.1876,0],[-0.7656,0.2032,0],[-0.7656,0.2188,0],[-0.7656,0.2344,0],[-0.7656,0.25,0],[-0.7656,0.2656,0],[-0.7656,0.2812,0],[-0.7656,0.2968,0],[-0.7656,0.3124,0],[-0.7656,0.3282,0],[-0.7656,0.3438,0],[-0.7656,0.3594,0],[-0.7656,0.375,0],[-0.7656,0.3906,0],[-0.7656,0.4062,0],[-0.7656,0.4218,0],[-0.7656,0.4376,0],[-0.7656,0.4532,0],[-0.7656,0.4688,0],[-0.7656,0.4844,0],[-0.7656,0.5,0],[-0.7656,0.5156,0],[-0.7656,0.5312,0],[-0.7656,0.5468,0],[-0.7656,0.5624,0],[-0.7656,0.5782,0],[-0.7656,0.5938,0],[-0.7656,0.6094,0],[-0.7656,0.625,0],[-0.7656,0.6406,0],[-0.7656,0.6562,0],[-0.7656,0.6718,0],[-0.7656,0.6876,0],[-0.7656,0.7032,0],[-0.7656,0.7188,0],[-0.7656,0.7344,0],[-0.7656,0.75,0],[-0.7656,0.7656,0],[-0.7656,0.7812,0],[-0.7656,0.7968,0],[-0.7656,0.8124,0],[-0.7656,0.8282,0],[-0.7656,0.8438,0],[-0.7656,0.8594,0],[-0.7656,0.875,0],[-0.7656,0.8906,0],[-0.7656,0.9062,0],[-0.7656,0.9218,0],[-0.7656,0.9376,0],[-0.7656,0.9532,0],[-0.7656,0.9688,0],[-0.7656,0.9844,0],[-0.75,-1,0],[-0.75,-0.9844,0],[-0.75,-0.9688,0],[-0.75,-0.9532,0],[-0.75,-0.9376,0],[-0.75,-0.9218,0],[-0.75,-0.9062,0],[-0.75,-0.8906,0],[-0.75,-0.875,0],[-0.75,-0.8594,0],[-0.75,-0.8438,0],[-0.75,-0.8282,0],[-0.75,-0.8124,0],[-0.75,-0.7968,0],[-0.75,-0.7812,0],[-0.75,-0.7656,0],[-0.75,-0.75,0],[-0.75,-0.7344,0],[-0.75,-0.7188,0],[-0.75,-0.7032,0],[-0.75,-0.6876,0],[-0.75,-0.6718,0],[-0.75,-0.6562,0],[-0.75,-0.6406,0],[-0.75,-0.625,0],[-0.75,-0.6094,0],[-0.75,-0.5938,0],[-0.75,-0.5782,0],[-0.75,-0.5624,0],[-0.75,-0.5468,0],[-0.75,-0.5312,0],[-0.75,-0.5156,0],[-0.75,-0.5,0],[-0.75,-0.4844,0],[-0.75,-0.4688,0],[-0.75,-0.4532,0],[-0.75,-0.4376,0],[-0.75,-0.4218,0],[-0.75,-0.4062,0],[-0.75,-0.3906,0],[-0.75,-0.375,0],[-0.75,-0.3594,0],[-0.75,-0.3438,0],[-0.75,-0.3282,0],[-0.75,-0.3124,0],[-0.75,-0.2968,0],[-0.75,-0.2812,0],[-0.75,-0.2656,0],[-0.75,-0.25,0],[-0.75,-0.2344,0],[-0.75,-0.2188,0],[-0.75,-0.2032,0],[-0.75,-0.1876,0],[-0.75,-0.1718,0],[-0.75,-0.1562,0],[-0.75,-0.1406,0],[-0.75,-0.125,0],[-0.75,-0.1094,0],[-0.75,-0.0938,0],[-0.75,-0.0782,0],[-0.75,-0.0624,0],[-0.75,-0.0468,0],[-0.75,-0.0312,0],[-0.75,-0.0156,0],[-0.75,0,0],[-0.75,0.0156,0],[-0.75,0.0312,0],[-0.75,0.0468,0],[-0.75,0.0624,0],[-0.75,0.0782,0],[-0.75,0.0938,0],[-0.75,0.1094,0],[-0.75,0.125,0],[-0.75,0.1406,0],[-0.75,0.1562,0],[-0.75,0.1718,0],[-0.75,0.1876,0],[-0.75,0.2032,0],[-0.75,0.2188,0],[-0.75,0.2344,0],[-0.75,0.25,0],[-0.75,0.2656,0],[-0.75,0.2812,0],[-0.75,0.2968,0],[-0.75,0.3124,0],[-0.75,0.3282,0],[-0.75,0.3438,0],[-0.75,0.3594,0],[-0.75,0.375,0],[-0.75,0.3906,0],[-0.75,0.4062,0],[-0.75,0.4218,0],[-0.75,0.4376,0],[-0.75,0.4532,0],[-0.75,0.4688,0],[-0.75,0.4844,0],[-0.75,0.5,0],[-0.75,0.5156,0],[-0.75,0.5312,0],[-0.75,0.5468,0],[-0.75,0.5624,0],[-0.75,0.5782,0],[-0.75,0.5938,0],[-0.75,0.6094,0],[-0.75,0.625,0],[-0.75,0.6406,0],[-0.75,0.6562,0],[-0.75,0.6718,0],[-0.75,0.6876,0],[-0.75,0.7032,0],[-0.75,0.7188,0],[-0.75,0.7344,0],[-0.75,0.75,0],[-0.75,0.7656,0],[-0.75,0.7812,0],[-0.75,0.7968,0],[-0.75,0.8124,0],[-0.75,0.8282,0],[-0.75,0.8438,0],[-0.75,0.8594,0],[-0.75,0.875,0],[-0.75,0.8906,0],[-0.75,0.9062,0],[-0.75,0.9218,0],[-0.75,0.9376,0],[-0.75,0.9532,0],[-0.75,0.9688,0],[-0.75,0.9844,0],[-0.7344,-1,0],[-0.7344,-0.9844,0],[-0.7344,-0.9688,0],[-0.7344,-0.9532,0],[-0.7344,-0.9376,0],[-0.7344,-0.9218,0],[-0.7344,-0.9062,0],[-0.7344,-0.8906,0],[-0.7344,-0.875,0],[-0.7344,-0.8594,0],[-0.7344,-0.8438,0],[-0.7344,-0.8282,0],[-0.7344,-0.8124,0],[-0.7344,-0.7968,0],[-0.7344,-0.7812,0],[-0.7344,-0.7656,0],[-0.7344,-0.75,0],[-0.7344,-0.7344,0],[-0.7344,-0.7188,0],[-0.7344,-0.7032,0],[-0.7344,-0.6876,0],[-0.7344,-0.6718,0],[-0.7344,-0.6562,0],[-0.7344,-0.6406,0],[-0.7344,-0.625,0],[-0.7344,-0.6094,0],[-0.7344,-0.5938,0],[-0.7344,-0.5782,0],[-0.7344,-0.5624,0],[-0.7344,-0.5468,0],[-0.7344,-0.5312,0],[-0.7344,-0.5156,0],[-0.7344,-0.5,0],[-0.7344,-0.4844,0],[-0.7344,-0.4688,0],[-0.7344,-0.4532,0],[-0.7344,-0.4376,0],[-0.7344,-0.4218,0],[-0.7344,-0.4062,0],[-0.7344,-0.3906,0],[-0.7344,-0.375,0],[-0.7344,-0.3594,0],[-0.7344,-0.3438,0],[-0.7344,-0.3282,0],[-0.7344,-0.3124,0],[-0.7344,-0.2968,0],[-0.7344,-0.2812,0],[-0.7344,-0.2656,0],[-0.7344,-0.25,0],[-0.7344,-0.2344,0],[-0.7344,-0.2188,0],[-0.7344,-0.2032,0],[-0.7344,-0.1876,0],[-0.7344,-0.1718,0],[-0.7344,-0.1562,0],[-0.7344,-0.1406,0],[-0.7344,-0.125,0],[-0.7344,-0.1094,0],[-0.7344,-0.0938,0],[-0.7344,-0.0782,0],[-0.7344,-0.0624,0],[-0.7344,-0.0468,0],[-0.7344,-0.0312,0],[-0.7344,-0.0156,0],[-0.7344,0,0],[-0.7344,0.0156,0],[-0.7344,0.0312,0],[-0.7344,0.0468,0],[-0.7344,0.0624,0],[-0.7344,0.0782,0],[-0.7344,0.0938,0],[-0.7344,0.1094,0],[-0.7344,0.125,0],[-0.7344,0.1406,0],[-0.7344,0.1562,0],[-0.7344,0.1718,0],[-0.7344,0.1876,0],[-0.7344,0.2032,0],[-0.7344,0.2188,0],[-0.7344,0.2344,0],[-0.7344,0.25,0],[-0.7344,0.2656,0],[-0.7344,0.2812,0],[-0.7344,0.2968,0],[-0.7344,0.3124,0],[-0.7344,0.3282,0],[-0.7344,0.3438,0],[-0.7344,0.3594,0],[-0.7344,0.375,0],[-0.7344,0.3906,0],[-0.7344,0.4062,0],[-0.7344,0.4218,0],[-0.7344,0.4376,0],[-0.7344,0.4532,0],[-0.7344,0.4688,0],[-0.7344,0.4844,0],[-0.7344,0.5,0],[-0.7344,0.5156,0],[-0.7344,0.5312,0],[-0.7344,0.5468,0],[-0.7344,0.5624,0],[-0.7344,0.5782,0],[-0.7344,0.5938,0],[-0.7344,0.6094,0],[-0.7344,0.625,0],[-0.7344,0.6406,0],[-0.7344,0.6562,0],[-0.7344,0.6718,0],[-0.7344,0.6876,0],[-0.7344,0.7032,0],[-0.7344,0.7188,0],[-0.7344,0.7344,0],[-0.7344,0.75,0],[-0.7344,0.7656,0],[-0.7344,0.7812,0],[-0.7344,0.7968,0],[-0.7344,0.8124,0],[-0.7344,0.8282,0],[-0.7344,0.8438,0],[-0.7344,0.8594,0],[-0.7344,0.875,0],[-0.7344,0.8906,0],[-0.7344,0.9062,0],[-0.7344,0.9218,0],[-0.7344,0.9376,0],[-0.7344,0.9532,0],[-0.7344,0.9688,0],[-0.7344,0.9844,0],[-0.7188,-1,0],[-0.7188,-0.9844,0],[-0.7188,-0.9688,0],[-0.7188,-0.9532,0],[-0.7188,-0.9376,0],[-0.7188,-0.9218,0],[-0.7188,-0.9062,0],[-0.7188,-0.8906,0],[-0.7188,-0.875,0],[-0.7188,-0.8594,0],[-0.7188,-0.8438,0],[-0.7188,-0.8282,0],[-0.7188,-0.8124,0],[-0.7188,-0.7968,0],[-0.7188,-0.7812,0],[-0.7188,-0.7656,0],[-0.7188,-0.75,0],[-0.7188,-0.7344,0],[-0.7188,-0.7188,0],[-0.7188,-0.7032,0],[-0.7188,-0.6876,0],[-0.7188,-0.6718,0],[-0.7188,-0.6562,0],[-0.7188,-0.6406,0],[-0.7188,-0.625,0],[-0.7188,-0.6094,0],[-0.7188,-0.5938,0],[-0.7188,-0.5782,0],[-0.7188,-0.5624,0],[-0.7188,-0.5468,0],[-0.7188,-0.5312,0],[-0.7188,-0.5156,0],[-0.7188,-0.5,0],[-0.7188,-0.4844,0],[-0.7188,-0.4688,0],[-0.7188,-0.4532,0],[-0.7188,-0.4376,0],[-0.7188,-0.4218,0],[-0.7188,-0.4062,0],[-0.7188,-0.3906,0],[-0.7188,-0.375,0],[-0.7188,-0.3594,0],[-0.7188,-0.3438,0],[-0.7188,-0.3282,0],[-0.7188,-0.3124,0],[-0.7188,-0.2968,0],[-0.7188,-0.2812,0],[-0.7188,-0.2656,0],[-0.7188,-0.25,0],[-0.7188,-0.2344,0],[-0.7188,-0.2188,0],[-0.7188,-0.2032,0],[-0.7188,-0.1876,0],[-0.7188,-0.1718,0],[-0.7188,-0.1562,0],[-0.7188,-0.1406,0],[-0.7188,-0.125,0],[-0.7188,-0.1094,0],[-0.7188,-0.0938,0],[-0.7188,-0.0782,0],[-0.7188,-0.0624,0],[-0.7188,-0.0468,0],[-0.7188,-0.0312,0],[-0.7188,-0.0156,0],[-0.7188,0,0],[-0.7188,0.0156,0],[-0.7188,0.0312,0],[-0.7188,0.0468,0],[-0.7188,0.0624,0],[-0.7188,0.0782,0],[-0.7188,0.0938,0],[-0.7188,0.1094,0],[-0.7188,0.125,0],[-0.7188,0.1406,0],[-0.7188,0.1562,0],[-0.7188,0.1718,0],[-0.7188,0.1876,0],[-0.7188,0.2032,0],[-0.7188,0.2188,0],[-0.7188,0.2344,0],[-0.7188,0.25,0],[-0.7188,0.2656,0],[-0.7188,0.2812,0],[-0.7188,0.2968,0],[-0.7188,0.3124,0],[-0.7188,0.3282,0],[-0.7188,0.3438,0],[-0.7188,0.3594,0],[-0.7188,0.375,0],[-0.7188,0.3906,0],[-0.7188,0.4062,0],[-0.7188,0.4218,0],[-0.7188,0.4376,0],[-0.7188,0.4532,0],[-0.7188,0.4688,0],[-0.7188,0.4844,0],[-0.7188,0.5,0],[-0.7188,0.5156,0],[-0.7188,0.5312,0],[-0.7188,0.5468,0],[-0.7188,0.5624,0],[-0.7188,0.5782,0],[-0.7188,0.5938,0],[-0.7188,0.6094,0],[-0.7188,0.625,0],[-0.7188,0.6406,0],[-0.7188,0.6562,0],[-0.7188,0.6718,0],[-0.7188,0.6876,0],[-0.7188,0.7032,0],[-0.7188,0.7188,0],[-0.7188,0.7344,0],[-0.7188,0.75,0],[-0.7188,0.7656,0],[-0.7188,0.7812,0],[-0.7188,0.7968,0],[-0.7188,0.8124,0],[-0.7188,0.8282,0],[-0.7188,0.8438,0],[-0.7188,0.8594,0],[-0.7188,0.875,0],[-0.7188,0.8906,0],[-0.7188,0.9062,0],[-0.7188,0.9218,0],[-0.7188,0.9376,0],[-0.7188,0.9532,0],[-0.7188,0.9688,0],[-0.7188,0.9844,0],[-0.7032,-1,0],[-0.7032,-0.9844,0],[-0.7032,-0.9688,0],[-0.7032,-0.9532,0],[-0.7032,-0.9376,0],[-0.7032,-0.9218,0],[-0.7032,-0.9062,0],[-0.7032,-0.8906,0],[-0.7032,-0.875,0],[-0.7032,-0.8594,0],[-0.7032,-0.8438,0],[-0.7032,-0.8282,0],[-0.7032,-0.8124,0],[-0.7032,-0.7968,0],[-0.7032,-0.7812,0],[-0.7032,-0.7656,0],[-0.7032,-0.75,0],[-0.7032,-0.7344,0],[-0.7032,-0.7188,0],[-0.7032,-0.7032,0],[-0.7032,-0.6876,0],[-0.7032,-0.6718,0],[-0.7032,-0.6562,0],[-0.7032,-0.6406,0],[-0.7032,-0.625,0],[-0.7032,-0.6094,0],[-0.7032,-0.5938,0],[-0.7032,-0.5782,0],[-0.7032,-0.5624,0],[-0.7032,-0.5468,0],[-0.7032,-0.5312,0],[-0.7032,-0.5156,0],[-0.7032,-0.5,0],[-0.7032,-0.4844,0],[-0.7032,-0.4688,0],[-0.7032,-0.4532,0],[-0.7032,-0.4376,0],[-0.7032,-0.4218,0],[-0.7032,-0.4062,0],[-0.7032,-0.3906,0],[-0.7032,-0.375,0],[-0.7032,-0.3594,0],[-0.7032,-0.3438,0],[-0.7032,-0.3282,0],[-0.7032,-0.3124,0],[-0.7032,-0.2968,0],[-0.7032,-0.2812,0],[-0.7032,-0.2656,0],[-0.7032,-0.25,0],[-0.7032,-0.2344,0],[-0.7032,-0.2188,0],[-0.7032,-0.2032,0],[-0.7032,-0.1876,0],[-0.7032,-0.1718,0],[-0.7032,-0.1562,0],[-0.7032,-0.1406,0],[-0.7032,-0.125,0],[-0.7032,-0.1094,0],[-0.7032,-0.0938,0],[-0.7032,-0.0782,0],[-0.7032,-0.0624,0],[-0.7032,-0.0468,0],[-0.7032,-0.0312,0],[-0.7032,-0.0156,0],[-0.7032,0,0],[-0.7032,0.0156,0],[-0.7032,0.0312,0],[-0.7032,0.0468,0],[-0.7032,0.0624,0],[-0.7032,0.0782,0],[-0.7032,0.0938,0],[-0.7032,0.1094,0],[-0.7032,0.125,0],[-0.7032,0.1406,0],[-0.7032,0.1562,0],[-0.7032,0.1718,0],[-0.7032,0.1876,0],[-0.7032,0.2032,0],[-0.7032,0.2188,0],[-0.7032,0.2344,0],[-0.7032,0.25,0],[-0.7032,0.2656,0],[-0.7032,0.2812,0],[-0.7032,0.2968,0],[-0.7032,0.3124,0],[-0.7032,0.3282,0],[-0.7032,0.3438,0],[-0.7032,0.3594,0],[-0.7032,0.375,0],[-0.7032,0.3906,0],[-0.7032,0.4062,0],[-0.7032,0.4218,0],[-0.7032,0.4376,0],[-0.7032,0.4532,0],[-0.7032,0.4688,0],[-0.7032,0.4844,0],[-0.7032,0.5,0],[-0.7032,0.5156,0],[-0.7032,0.5312,0],[-0.7032,0.5468,0],[-0.7032,0.5624,0],[-0.7032,0.5782,0],[-0.7032,0.5938,0],[-0.7032,0.6094,0],[-0.7032,0.625,0],[-0.7032,0.6406,0],[-0.7032,0.6562,0],[-0.7032,0.6718,0],[-0.7032,0.6876,0],[-0.7032,0.7032,0],[-0.7032,0.7188,0],[-0.7032,0.7344,0],[-0.7032,0.75,0],[-0.7032,0.7656,0],[-0.7032,0.7812,0],[-0.7032,0.7968,0],[-0.7032,0.8124,0],[-0.7032,0.8282,0],[-0.7032,0.8438,0],[-0.7032,0.8594,0],[-0.7032,0.875,0],[-0.7032,0.8906,0],[-0.7032,0.9062,0],[-0.7032,0.9218,0],[-0.7032,0.9376,0],[-0.7032,0.9532,0],[-0.7032,0.9688,0],[-0.7032,0.9844,0],[-0.6876,-1,0],[-0.6876,-0.9844,0],[-0.6876,-0.9688,0],[-0.6876,-0.9532,0],[-0.6876,-0.9376,0],[-0.6876,-0.9218,0],[-0.6876,-0.9062,0],[-0.6876,-0.8906,0],[-0.6876,-0.875,0],[-0.6876,-0.8594,0],[-0.6876,-0.8438,0],[-0.6876,-0.8282,0],[-0.6876,-0.8124,0],[-0.6876,-0.7968,0],[-0.6876,-0.7812,0],[-0.6876,-0.7656,0],[-0.6876,-0.75,0],[-0.6876,-0.7344,0],[-0.6876,-0.7188,0],[-0.6876,-0.7032,0],[-0.6876,-0.6876,0],[-0.6876,-0.6718,0],[-0.6876,-0.6562,0],[-0.6876,-0.6406,0],[-0.6876,-0.625,0],[-0.6876,-0.6094,0],[-0.6876,-0.5938,0],[-0.6876,-0.5782,0],[-0.6876,-0.5624,0],[-0.6876,-0.5468,0],[-0.6876,-0.5312,0],[-0.6876,-0.5156,0],[-0.6876,-0.5,0],[-0.6876,-0.4844,0],[-0.6876,-0.4688,0],[-0.6876,-0.4532,0],[-0.6876,-0.4376,0],[-0.6876,-0.4218,0],[-0.6876,-0.4062,0],[-0.6876,-0.3906,0],[-0.6876,-0.375,0],[-0.6876,-0.3594,0],[-0.6876,-0.3438,0],[-0.6876,-0.3282,0],[-0.6876,-0.3124,0],[-0.6876,-0.2968,0],[-0.6876,-0.2812,0],[-0.6876,-0.2656,0],[-0.6876,-0.25,0],[-0.6876,-0.2344,0],[-0.6876,-0.2188,0],[-0.6876,-0.2032,0],[-0.6876,-0.1876,0],[-0.6876,-0.1718,0],[-0.6876,-0.1562,0],[-0.6876,-0.1406,0],[-0.6876,-0.125,0],[-0.6876,-0.1094,0],[-0.6876,-0.0938,0],[-0.6876,-0.0782,0],[-0.6876,-0.0624,0],[-0.6876,-0.0468,0],[-0.6876,-0.0312,0],[-0.6876,-0.0156,0],[-0.6876,0,0],[-0.6876,0.0156,0],[-0.6876,0.0312,0],[-0.6876,0.0468,0],[-0.6876,0.0624,0],[-0.6876,0.0782,0],[-0.6876,0.0938,0],[-0.6876,0.1094,0],[-0.6876,0.125,0],[-0.6876,0.1406,0],[-0.6876,0.1562,0],[-0.6876,0.1718,0],[-0.6876,0.1876,0],[-0.6876,0.2032,0],[-0.6876,0.2188,0],[-0.6876,0.2344,0],[-0.6876,0.25,0],[-0.6876,0.2656,0],[-0.6876,0.2812,0],[-0.6876,0.2968,0],[-0.6876,0.3124,0],[-0.6876,0.3282,0],[-0.6876,0.3438,0],[-0.6876,0.3594,0],[-0.6876,0.375,0],[-0.6876,0.3906,0],[-0.6876,0.4062,0],[-0.6876,0.4218,0],[-0.6876,0.4376,0],[-0.6876,0.4532,0],[-0.6876,0.4688,0],[-0.6876,0.4844,0],[-0.6876,0.5,0],[-0.6876,0.5156,0],[-0.6876,0.5312,0],[-0.6876,0.5468,0],[-0.6876,0.5624,0],[-0.6876,0.5782,0],[-0.6876,0.5938,0],[-0.6876,0.6094,0],[-0.6876,0.625,0],[-0.6876,0.6406,0],[-0.6876,0.6562,0],[-0.6876,0.6718,0],[-0.6876,0.6876,0],[-0.6876,0.7032,0],[-0.6876,0.7188,0],[-0.6876,0.7344,0],[-0.6876,0.75,0],[-0.6876,0.7656,0],[-0.6876,0.7812,0],[-0.6876,0.7968,0],[-0.6876,0.8124,0],[-0.6876,0.8282,0],[-0.6876,0.8438,0],[-0.6876,0.8594,0],[-0.6876,0.875,0],[-0.6876,0.8906,0],[-0.6876,0.9062,0],[-0.6876,0.9218,0],[-0.6876,0.9376,0],[-0.6876,0.9532,0],[-0.6876,0.9688,0],[-0.6876,0.9844,0],[-0.6718,-1,0],[-0.6718,-0.9844,0],[-0.6718,-0.9688,0],[-0.6718,-0.9532,0],[-0.6718,-0.9376,0],[-0.6718,-0.9218,0],[-0.6718,-0.9062,0],[-0.6718,-0.8906,0],[-0.6718,-0.875,0],[-0.6718,-0.8594,0],[-0.6718,-0.8438,0],[-0.6718,-0.8282,0],[-0.6718,-0.8124,0],[-0.6718,-0.7968,0],[-0.6718,-0.7812,0],[-0.6718,-0.7656,0],[-0.6718,-0.75,0],[-0.6718,-0.7344,0],[-0.6718,-0.7188,0],[-0.6718,-0.7032,0],[-0.6718,-0.6876,0],[-0.6718,-0.6718,0],[-0.6718,-0.6562,0],[-0.6718,-0.6406,0],[-0.6718,-0.625,0],[-0.6718,-0.6094,0],[-0.6718,-0.5938,0],[-0.6718,-0.5782,0],[-0.6718,-0.5624,0],[-0.6718,-0.5468,0],[-0.6718,-0.5312,0],[-0.6718,-0.5156,0],[-0.6718,-0.5,0],[-0.6718,-0.4844,0],[-0.6718,-0.4688,0],[-0.6718,-0.4532,0],[-0.6718,-0.4376,0],[-0.6718,-0.4218,0],[-0.6718,-0.4062,0],[-0.6718,-0.3906,0],[-0.6718,-0.375,0],[-0.6718,-0.3594,0],[-0.6718,-0.3438,0],[-0.6718,-0.3282,0],[-0.6718,-0.3124,0],[-0.6718,-0.2968,0],[-0.6718,-0.2812,0],[-0.6718,-0.2656,0],[-0.6718,-0.25,0],[-0.6718,-0.2344,0],[-0.6718,-0.2188,0],[-0.6718,-0.2032,0],[-0.6718,-0.1876,0],[-0.6718,-0.1718,0],[-0.6718,-0.1562,0],[-0.6718,-0.1406,0],[-0.6718,-0.125,0],[-0.6718,-0.1094,0],[-0.6718,-0.0938,0],[-0.6718,-0.0782,0],[-0.6718,-0.0624,0],[-0.6718,-0.0468,0],[-0.6718,-0.0312,0],[-0.6718,-0.0156,0],[-0.6718,0,0],[-0.6718,0.0156,0],[-0.6718,0.0312,0],[-0.6718,0.0468,0],[-0.6718,0.0624,0],[-0.6718,0.0782,0],[-0.6718,0.0938,0],[-0.6718,0.1094,0],[-0.6718,0.125,0],[-0.6718,0.1406,0],[-0.6718,0.1562,0],[-0.6718,0.1718,0],[-0.6718,0.1876,0],[-0.6718,0.2032,0],[-0.6718,0.2188,0],[-0.6718,0.2344,0],[-0.6718,0.25,0],[-0.6718,0.2656,0],[-0.6718,0.2812,0],[-0.6718,0.2968,0],[-0.6718,0.3124,0],[-0.6718,0.3282,0],[-0.6718,0.3438,0],[-0.6718,0.3594,0],[-0.6718,0.375,0],[-0.6718,0.3906,0],[-0.6718,0.4062,0],[-0.6718,0.4218,0],[-0.6718,0.4376,0],[-0.6718,0.4532,0],[-0.6718,0.4688,0],[-0.6718,0.4844,0],[-0.6718,0.5,0],[-0.6718,0.5156,0],[-0.6718,0.5312,0],[-0.6718,0.5468,0],[-0.6718,0.5624,0],[-0.6718,0.5782,0],[-0.6718,0.5938,0],[-0.6718,0.6094,0],[-0.6718,0.625,0],[-0.6718,0.6406,0],[-0.6718,0.6562,0],[-0.6718,0.6718,0],[-0.6718,0.6876,0],[-0.6718,0.7032,0],[-0.6718,0.7188,0],[-0.6718,0.7344,0],[-0.6718,0.75,0],[-0.6718,0.7656,0],[-0.6718,0.7812,0],[-0.6718,0.7968,0],[-0.6718,0.8124,0],[-0.6718,0.8282,0],[-0.6718,0.8438,0],[-0.6718,0.8594,0],[-0.6718,0.875,0],[-0.6718,0.8906,0],[-0.6718,0.9062,0],[-0.6718,0.9218,0],[-0.6718,0.9376,0],[-0.6718,0.9532,0],[-0.6718,0.9688,0],[-0.6718,0.9844,0],[-0.6562,-1,0],[-0.6562,-0.9844,0],[-0.6562,-0.9688,0],[-0.6562,-0.9532,0],[-0.6562,-0.9376,0],[-0.6562,-0.9218,0],[-0.6562,-0.9062,0],[-0.6562,-0.8906,0],[-0.6562,-0.875,0],[-0.6562,-0.8594,0],[-0.6562,-0.8438,0],[-0.6562,-0.8282,0],[-0.6562,-0.8124,0],[-0.6562,-0.7968,0],[-0.6562,-0.7812,0],[-0.6562,-0.7656,0],[-0.6562,-0.75,0],[-0.6562,-0.7344,0],[-0.6562,-0.7188,0],[-0.6562,-0.7032,0],[-0.6562,-0.6876,0],[-0.6562,-0.6718,0],[-0.6562,-0.6562,0],[-0.6562,-0.6406,0],[-0.6562,-0.625,0],[-0.6562,-0.6094,0],[-0.6562,-0.5938,0],[-0.6562,-0.5782,0],[-0.6562,-0.5624,0],[-0.6562,-0.5468,0],[-0.6562,-0.5312,0],[-0.6562,-0.5156,0],[-0.6562,-0.5,0],[-0.6562,-0.4844,0],[-0.6562,-0.4688,0],[-0.6562,-0.4532,0],[-0.6562,-0.4376,0],[-0.6562,-0.4218,0],[-0.6562,-0.4062,0],[-0.6562,-0.3906,0],[-0.6562,-0.375,0],[-0.6562,-0.3594,0],[-0.6562,-0.3438,0],[-0.6562,-0.3282,0],[-0.6562,-0.3124,0],[-0.6562,-0.2968,0],[-0.6562,-0.2812,0],[-0.6562,-0.2656,0],[-0.6562,-0.25,0],[-0.6562,-0.2344,0],[-0.6562,-0.2188,0],[-0.6562,-0.2032,0],[-0.6562,-0.1876,0],[-0.6562,-0.1718,0],[-0.6562,-0.1562,0],[-0.6562,-0.1406,0],[-0.6562,-0.125,0],[-0.6562,-0.1094,0],[-0.6562,-0.0938,0],[-0.6562,-0.0782,0],[-0.6562,-0.0624,0],[-0.6562,-0.0468,0],[-0.6562,-0.0312,0],[-0.6562,-0.0156,0],[-0.6562,0,0],[-0.6562,0.0156,0],[-0.6562,0.0312,0],[-0.6562,0.0468,0],[-0.6562,0.0624,0],[-0.6562,0.0782,0],[-0.6562,0.0938,0],[-0.6562,0.1094,0],[-0.6562,0.125,0],[-0.6562,0.1406,0],[-0.6562,0.1562,0],[-0.6562,0.1718,0],[-0.6562,0.1876,0],[-0.6562,0.2032,0],[-0.6562,0.2188,0],[-0.6562,0.2344,0],[-0.6562,0.25,0],[-0.6562,0.2656,0],[-0.6562,0.2812,0],[-0.6562,0.2968,0],[-0.6562,0.3124,0],[-0.6562,0.3282,0],[-0.6562,0.3438,0],[-0.6562,0.3594,0],[-0.6562,0.375,0],[-0.6562,0.3906,0],[-0.6562,0.4062,0],[-0.6562,0.4218,0],[-0.6562,0.4376,0],[-0.6562,0.4532,0],[-0.6562,0.4688,0],[-0.6562,0.4844,0],[-0.6562,0.5,0],[-0.6562,0.5156,0],[-0.6562,0.5312,0],[-0.6562,0.5468,0],[-0.6562,0.5624,0],[-0.6562,0.5782,0],[-0.6562,0.5938,0],[-0.6562,0.6094,0],[-0.6562,0.625,0],[-0.6562,0.6406,0],[-0.6562,0.6562,0],[-0.6562,0.6718,0],[-0.6562,0.6876,0],[-0.6562,0.7032,0],[-0.6562,0.7188,0],[-0.6562,0.7344,0],[-0.6562,0.75,0],[-0.6562,0.7656,0],[-0.6562,0.7812,0],[-0.6562,0.7968,0],[-0.6562,0.8124,0],[-0.6562,0.8282,0],[-0.6562,0.8438,0],[-0.6562,0.8594,0],[-0.6562,0.875,0],[-0.6562,0.8906,0],[-0.6562,0.9062,0],[-0.6562,0.9218,0],[-0.6562,0.9376,0],[-0.6562,0.9532,0],[-0.6562,0.9688,0],[-0.6562,0.9844,0],[-0.6406,-1,0],[-0.6406,-0.9844,0],[-0.6406,-0.9688,0],[-0.6406,-0.9532,0],[-0.6406,-0.9376,0],[-0.6406,-0.9218,0],[-0.6406,-0.9062,0],[-0.6406,-0.8906,0],[-0.6406,-0.875,0],[-0.6406,-0.8594,0],[-0.6406,-0.8438,0],[-0.6406,-0.8282,0],[-0.6406,-0.8124,0],[-0.6406,-0.7968,0],[-0.6406,-0.7812,0],[-0.6406,-0.7656,0],[-0.6406,-0.75,0],[-0.6406,-0.7344,0],[-0.6406,-0.7188,0],[-0.6406,-0.7032,0],[-0.6406,-0.6876,0],[-0.6406,-0.6718,0],[-0.6406,-0.6562,0],[-0.6406,-0.6406,0],[-0.6406,-0.625,0],[-0.6406,-0.6094,0],[-0.6406,-0.5938,0],[-0.6406,-0.5782,0],[-0.6406,-0.5624,0],[-0.6406,-0.5468,0],[-0.6406,-0.5312,0],[-0.6406,-0.5156,0],[-0.6406,-0.5,0],[-0.6406,-0.4844,0],[-0.6406,-0.4688,0],[-0.6406,-0.4532,0],[-0.6406,-0.4376,0],[-0.6406,-0.4218,0],[-0.6406,-0.4062,0],[-0.6406,-0.3906,0],[-0.6406,-0.375,0],[-0.6406,-0.3594,0],[-0.6406,-0.3438,0],[-0.6406,-0.3282,0],[-0.6406,-0.3124,0],[-0.6406,-0.2968,0],[-0.6406,-0.2812,0],[-0.6406,-0.2656,0],[-0.6406,-0.25,0],[-0.6406,-0.2344,0],[-0.6406,-0.2188,0],[-0.6406,-0.2032,0],[-0.6406,-0.1876,0],[-0.6406,-0.1718,0],[-0.6406,-0.1562,0],[-0.6406,-0.1406,0],[-0.6406,-0.125,0],[-0.6406,-0.1094,0],[-0.6406,-0.0938,0],[-0.6406,-0.0782,0],[-0.6406,-0.0624,0],[-0.6406,-0.0468,0],[-0.6406,-0.0312,0],[-0.6406,-0.0156,0],[-0.6406,0,0],[-0.6406,0.0156,0],[-0.6406,0.0312,0],[-0.6406,0.0468,0],[-0.6406,0.0624,0],[-0.6406,0.0782,0],[-0.6406,0.0938,0],[-0.6406,0.1094,0],[-0.6406,0.125,0],[-0.6406,0.1406,0],[-0.6406,0.1562,0],[-0.6406,0.1718,0],[-0.6406,0.1876,0],[-0.6406,0.2032,0],[-0.6406,0.2188,0],[-0.6406,0.2344,0],[-0.6406,0.25,0],[-0.6406,0.2656,0],[-0.6406,0.2812,0],[-0.6406,0.2968,0],[-0.6406,0.3124,0],[-0.6406,0.3282,0],[-0.6406,0.3438,0],[-0.6406,0.3594,0],[-0.6406,0.375,0],[-0.6406,0.3906,0],[-0.6406,0.4062,0],[-0.6406,0.4218,0],[-0.6406,0.4376,0],[-0.6406,0.4532,0],[-0.6406,0.4688,0],[-0.6406,0.4844,0],[-0.6406,0.5,0],[-0.6406,0.5156,0],[-0.6406,0.5312,0],[-0.6406,0.5468,0],[-0.6406,0.5624,0],[-0.6406,0.5782,0],[-0.6406,0.5938,0],[-0.6406,0.6094,0],[-0.6406,0.625,0],[-0.6406,0.6406,0],[-0.6406,0.6562,0],[-0.6406,0.6718,0],[-0.6406,0.6876,0],[-0.6406,0.7032,0],[-0.6406,0.7188,0],[-0.6406,0.7344,0],[-0.6406,0.75,0],[-0.6406,0.7656,0],[-0.6406,0.7812,0],[-0.6406,0.7968,0],[-0.6406,0.8124,0],[-0.6406,0.8282,0],[-0.6406,0.8438,0],[-0.6406,0.8594,0],[-0.6406,0.875,0],[-0.6406,0.8906,0],[-0.6406,0.9062,0],[-0.6406,0.9218,0],[-0.6406,0.9376,0],[-0.6406,0.9532,0],[-0.6406,0.9688,0],[-0.6406,0.9844,0],[-0.625,-1,0],[-0.625,-0.9844,0],[-0.625,-0.9688,0],[-0.625,-0.9532,0],[-0.625,-0.9376,0],[-0.625,-0.9218,0],[-0.625,-0.9062,0],[-0.625,-0.8906,0],[-0.625,-0.875,0],[-0.625,-0.8594,0],[-0.625,-0.8438,0],[-0.625,-0.8282,0],[-0.625,-0.8124,0],[-0.625,-0.7968,0],[-0.625,-0.7812,0],[-0.625,-0.7656,0],[-0.625,-0.75,0],[-0.625,-0.7344,0],[-0.625,-0.7188,0],[-0.625,-0.7032,0],[-0.625,-0.6876,0],[-0.625,-0.6718,0],[-0.625,-0.6562,0],[-0.625,-0.6406,0],[-0.625,-0.625,0],[-0.625,-0.6094,0],[-0.625,-0.5938,0],[-0.625,-0.5782,0],[-0.625,-0.5624,0],[-0.625,-0.5468,0],[-0.625,-0.5312,0],[-0.625,-0.5156,0],[-0.625,-0.5,0],[-0.625,-0.4844,0],[-0.625,-0.4688,0],[-0.625,-0.4532,0],[-0.625,-0.4376,0],[-0.625,-0.4218,0],[-0.625,-0.4062,0],[-0.625,-0.3906,0],[-0.625,-0.375,0],[-0.625,-0.3594,0],[-0.625,-0.3438,0],[-0.625,-0.3282,0],[-0.625,-0.3124,0],[-0.625,-0.2968,0],[-0.625,-0.2812,0],[-0.625,-0.2656,0],[-0.625,-0.25,0],[-0.625,-0.2344,0],[-0.625,-0.2188,0],[-0.625,-0.2032,0],[-0.625,-0.1876,0],[-0.625,-0.1718,0],[-0.625,-0.1562,0],[-0.625,-0.1406,0],[-0.625,-0.125,0],[-0.625,-0.1094,0],[-0.625,-0.0938,0],[-0.625,-0.0782,0],[-0.625,-0.0624,0],[-0.625,-0.0468,0],[-0.625,-0.0312,0],[-0.625,-0.0156,0],[-0.625,0,0],[-0.625,0.0156,0],[-0.625,0.0312,0],[-0.625,0.0468,0],[-0.625,0.0624,0],[-0.625,0.0782,0],[-0.625,0.0938,0],[-0.625,0.1094,0],[-0.625,0.125,0],[-0.625,0.1406,0],[-0.625,0.1562,0],[-0.625,0.1718,0],[-0.625,0.1876,0],[-0.625,0.2032,0],[-0.625,0.2188,0],[-0.625,0.2344,0],[-0.625,0.25,0],[-0.625,0.2656,0],[-0.625,0.2812,0],[-0.625,0.2968,0],[-0.625,0.3124,0],[-0.625,0.3282,0],[-0.625,0.3438,0],[-0.625,0.3594,0],[-0.625,0.375,0],[-0.625,0.3906,0],[-0.625,0.4062,0],[-0.625,0.4218,0],[-0.625,0.4376,0],[-0.625,0.4532,0],[-0.625,0.4688,0],[-0.625,0.4844,0],[-0.625,0.5,0],[-0.625,0.5156,0],[-0.625,0.5312,0],[-0.625,0.5468,0],[-0.625,0.5624,0],[-0.625,0.5782,0],[-0.625,0.5938,0],[-0.625,0.6094,0],[-0.625,0.625,0],[-0.625,0.6406,0],[-0.625,0.6562,0],[-0.625,0.6718,0],[-0.625,0.6876,0],[-0.625,0.7032,0],[-0.625,0.7188,0],[-0.625,0.7344,0],[-0.625,0.75,0],[-0.625,0.7656,0],[-0.625,0.7812,0],[-0.625,0.7968,0],[-0.625,0.8124,0],[-0.625,0.8282,0],[-0.625,0.8438,0],[-0.625,0.8594,0],[-0.625,0.875,0],[-0.625,0.8906,0],[-0.625,0.9062,0],[-0.625,0.9218,0],[-0.625,0.9376,0],[-0.625,0.9532,0],[-0.625,0.9688,0],[-0.625,0.9844,0],[-0.6094,-1,0],[-0.6094,-0.9844,0],[-0.6094,-0.9688,0],[-0.6094,-0.9532,0],[-0.6094,-0.9376,0],[-0.6094,-0.9218,0],[-0.6094,-0.9062,0],[-0.6094,-0.8906,0],[-0.6094,-0.875,0],[-0.6094,-0.8594,0],[-0.6094,-0.8438,0],[-0.6094,-0.8282,0],[-0.6094,-0.8124,0],[-0.6094,-0.7968,0],[-0.6094,-0.7812,0],[-0.6094,-0.7656,0],[-0.6094,-0.75,0],[-0.6094,-0.7344,0],[-0.6094,-0.7188,0],[-0.6094,-0.7032,0],[-0.6094,-0.6876,0],[-0.6094,-0.6718,0],[-0.6094,-0.6562,0],[-0.6094,-0.6406,0],[-0.6094,-0.625,0],[-0.6094,-0.6094,0],[-0.6094,-0.5938,0],[-0.6094,-0.5782,0],[-0.6094,-0.5624,0],[-0.6094,-0.5468,0],[-0.6094,-0.5312,0],[-0.6094,-0.5156,0],[-0.6094,-0.5,0],[-0.6094,-0.4844,0],[-0.6094,-0.4688,0],[-0.6094,-0.4532,0],[-0.6094,-0.4376,0],[-0.6094,-0.4218,0],[-0.6094,-0.4062,0],[-0.6094,-0.3906,0],[-0.6094,-0.375,0],[-0.6094,-0.3594,0],[-0.6094,-0.3438,0],[-0.6094,-0.3282,0],[-0.6094,-0.3124,0],[-0.6094,-0.2968,0],[-0.6094,-0.2812,0],[-0.6094,-0.2656,0],[-0.6094,-0.25,0],[-0.6094,-0.2344,0],[-0.6094,-0.2188,0],[-0.6094,-0.2032,0],[-0.6094,-0.1876,0],[-0.6094,-0.1718,0],[-0.6094,-0.1562,0],[-0.6094,-0.1406,0],[-0.6094,-0.125,0],[-0.6094,-0.1094,0],[-0.6094,-0.0938,0],[-0.6094,-0.0782,0],[-0.6094,-0.0624,0],[-0.6094,-0.0468,0],[-0.6094,-0.0312,0],[-0.6094,-0.0156,0],[-0.6094,0,0],[-0.6094,0.0156,0],[-0.6094,0.0312,0],[-0.6094,0.0468,0],[-0.6094,0.0624,0],[-0.6094,0.0782,0],[-0.6094,0.0938,0],[-0.6094,0.1094,0],[-0.6094,0.125,0],[-0.6094,0.1406,0],[-0.6094,0.1562,0],[-0.6094,0.1718,0],[-0.6094,0.1876,0],[-0.6094,0.2032,0],[-0.6094,0.2188,0],[-0.6094,0.2344,0],[-0.6094,0.25,0],[-0.6094,0.2656,0],[-0.6094,0.2812,0],[-0.6094,0.2968,0],[-0.6094,0.3124,0],[-0.6094,0.3282,0],[-0.6094,0.3438,0],[-0.6094,0.3594,0],[-0.6094,0.375,0],[-0.6094,0.3906,0],[-0.6094,0.4062,0],[-0.6094,0.4218,0],[-0.6094,0.4376,0],[-0.6094,0.4532,0],[-0.6094,0.4688,0],[-0.6094,0.4844,0],[-0.6094,0.5,0],[-0.6094,0.5156,0],[-0.6094,0.5312,0],[-0.6094,0.5468,0],[-0.6094,0.5624,0],[-0.6094,0.5782,0],[-0.6094,0.5938,0],[-0.6094,0.6094,0],[-0.6094,0.625,0],[-0.6094,0.6406,0],[-0.6094,0.6562,0],[-0.6094,0.6718,0],[-0.6094,0.6876,0],[-0.6094,0.7032,0],[-0.6094,0.7188,0],[-0.6094,0.7344,0],[-0.6094,0.75,0],[-0.6094,0.7656,0],[-0.6094,0.7812,0],[-0.6094,0.7968,0],[-0.6094,0.8124,0],[-0.6094,0.8282,0],[-0.6094,0.8438,0],[-0.6094,0.8594,0],[-0.6094,0.875,0],[-0.6094,0.8906,0],[-0.6094,0.9062,0],[-0.6094,0.9218,0],[-0.6094,0.9376,0],[-0.6094,0.9532,0],[-0.6094,0.9688,0],[-0.6094,0.9844,0],[-0.5938,-1,0],[-0.5938,-0.9844,0],[-0.5938,-0.9688,0],[-0.5938,-0.9532,0],[-0.5938,-0.9376,0],[-0.5938,-0.9218,0],[-0.5938,-0.9062,0],[-0.5938,-0.8906,0],[-0.5938,-0.875,0],[-0.5938,-0.8594,0],[-0.5938,-0.8438,0],[-0.5938,-0.8282,0],[-0.5938,-0.8124,0],[-0.5938,-0.7968,0],[-0.5938,-0.7812,0],[-0.5938,-0.7656,0],[-0.5938,-0.75,0],[-0.5938,-0.7344,0],[-0.5938,-0.7188,0],[-0.5938,-0.7032,0],[-0.5938,-0.6876,0],[-0.5938,-0.6718,0],[-0.5938,-0.6562,0],[-0.5938,-0.6406,0],[-0.5938,-0.625,0],[-0.5938,-0.6094,0],[-0.5938,-0.5938,0],[-0.5938,-0.5782,0],[-0.5938,-0.5624,0],[-0.5938,-0.5468,0],[-0.5938,-0.5312,0],[-0.5938,-0.5156,0],[-0.5938,-0.5,0],[-0.5938,-0.4844,0],[-0.5938,-0.4688,0],[-0.5938,-0.4532,0],[-0.5938,-0.4376,0],[-0.5938,-0.4218,0],[-0.5938,-0.4062,0],[-0.5938,-0.3906,0],[-0.5938,-0.375,0],[-0.5938,-0.3594,0],[-0.5938,-0.3438,0],[-0.5938,-0.3282,0],[-0.5938,-0.3124,0],[-0.5938,-0.2968,0],[-0.5938,-0.2812,0],[-0.5938,-0.2656,0],[-0.5938,-0.25,0],[-0.5938,-0.2344,0],[-0.5938,-0.2188,0],[-0.5938,-0.2032,0],[-0.5938,-0.1876,0],[-0.5938,-0.1718,0],[-0.5938,-0.1562,0],[-0.5938,-0.1406,0],[-0.5938,-0.125,0],[-0.5938,-0.1094,0],[-0.5938,-0.0938,0],[-0.5938,-0.0782,0],[-0.5938,-0.0624,0],[-0.5938,-0.0468,0],[-0.5938,-0.0312,0],[-0.5938,-0.0156,0],[-0.5938,0,0],[-0.5938,0.0156,0],[-0.5938,0.0312,0],[-0.5938,0.0468,0],[-0.5938,0.0624,0],[-0.5938,0.0782,0],[-0.5938,0.0938,0],[-0.5938,0.1094,0],[-0.5938,0.125,0],[-0.5938,0.1406,0],[-0.5938,0.1562,0],[-0.5938,0.1718,0],[-0.5938,0.1876,0],[-0.5938,0.2032,0],[-0.5938,0.2188,0],[-0.5938,0.2344,0],[-0.5938,0.25,0],[-0.5938,0.2656,0],[-0.5938,0.2812,0],[-0.5938,0.2968,0],[-0.5938,0.3124,0],[-0.5938,0.3282,0],[-0.5938,0.3438,0],[-0.5938,0.3594,0],[-0.5938,0.375,0],[-0.5938,0.3906,0],[-0.5938,0.4062,0],[-0.5938,0.4218,0],[-0.5938,0.4376,0],[-0.5938,0.4532,0],[-0.5938,0.4688,0],[-0.5938,0.4844,0],[-0.5938,0.5,0],[-0.5938,0.5156,0],[-0.5938,0.5312,0],[-0.5938,0.5468,0],[-0.5938,0.5624,0],[-0.5938,0.5782,0],[-0.5938,0.5938,0],[-0.5938,0.6094,0],[-0.5938,0.625,0],[-0.5938,0.6406,0],[-0.5938,0.6562,0],[-0.5938,0.6718,0],[-0.5938,0.6876,0],[-0.5938,0.7032,0],[-0.5938,0.7188,0],[-0.5938,0.7344,0],[-0.5938,0.75,0],[-0.5938,0.7656,0],[-0.5938,0.7812,0],[-0.5938,0.7968,0],[-0.5938,0.8124,0],[-0.5938,0.8282,0],[-0.5938,0.8438,0],[-0.5938,0.8594,0],[-0.5938,0.875,0],[-0.5938,0.8906,0],[-0.5938,0.9062,0],[-0.5938,0.9218,0],[-0.5938,0.9376,0],[-0.5938,0.9532,0],[-0.5938,0.9688,0],[-0.5938,0.9844,0],[-0.5782,-1,0],[-0.5782,-0.9844,0],[-0.5782,-0.9688,0],[-0.5782,-0.9532,0],[-0.5782,-0.9376,0],[-0.5782,-0.9218,0],[-0.5782,-0.9062,0],[-0.5782,-0.8906,0],[-0.5782,-0.875,0],[-0.5782,-0.8594,0],[-0.5782,-0.8438,0],[-0.5782,-0.8282,0],[-0.5782,-0.8124,0],[-0.5782,-0.7968,0],[-0.5782,-0.7812,0],[-0.5782,-0.7656,0],[-0.5782,-0.75,0],[-0.5782,-0.7344,0],[-0.5782,-0.7188,0],[-0.5782,-0.7032,0],[-0.5782,-0.6876,0],[-0.5782,-0.6718,0],[-0.5782,-0.6562,0],[-0.5782,-0.6406,0],[-0.5782,-0.625,0],[-0.5782,-0.6094,0],[-0.5782,-0.5938,0],[-0.5782,-0.5782,0],[-0.5782,-0.5624,0],[-0.5782,-0.5468,0],[-0.5782,-0.5312,0],[-0.5782,-0.5156,0],[-0.5782,-0.5,0],[-0.5782,-0.4844,0],[-0.5782,-0.4688,0],[-0.5782,-0.4532,0],[-0.5782,-0.4376,0],[-0.5782,-0.4218,0],[-0.5782,-0.4062,0],[-0.5782,-0.3906,0],[-0.5782,-0.375,0],[-0.5782,-0.3594,0],[-0.5782,-0.3438,0],[-0.5782,-0.3282,0],[-0.5782,-0.3124,0],[-0.5782,-0.2968,0],[-0.5782,-0.2812,0],[-0.5782,-0.2656,0],[-0.5782,-0.25,0],[-0.5782,-0.2344,0],[-0.5782,-0.2188,0],[-0.5782,-0.2032,0],[-0.5782,-0.1876,0],[-0.5782,-0.1718,0],[-0.5782,-0.1562,0],[-0.5782,-0.1406,0],[-0.5782,-0.125,0],[-0.5782,-0.1094,0],[-0.5782,-0.0938,0],[-0.5782,-0.0782,0],[-0.5782,-0.0624,0],[-0.5782,-0.0468,0],[-0.5782,-0.0312,0],[-0.5782,-0.0156,0],[-0.5782,0,0],[-0.5782,0.0156,0],[-0.5782,0.0312,0],[-0.5782,0.0468,0],[-0.5782,0.0624,0],[-0.5782,0.0782,0],[-0.5782,0.0938,0],[-0.5782,0.1094,0],[-0.5782,0.125,0],[-0.5782,0.1406,0],[-0.5782,0.1562,0],[-0.5782,0.1718,0],[-0.5782,0.1876,0],[-0.5782,0.2032,0],[-0.5782,0.2188,0],[-0.5782,0.2344,0],[-0.5782,0.25,0],[-0.5782,0.2656,0],[-0.5782,0.2812,0],[-0.5782,0.2968,0],[-0.5782,0.3124,0],[-0.5782,0.3282,0],[-0.5782,0.3438,0],[-0.5782,0.3594,0],[-0.5782,0.375,0],[-0.5782,0.3906,0],[-0.5782,0.4062,0],[-0.5782,0.4218,0],[-0.5782,0.4376,0],[-0.5782,0.4532,0],[-0.5782,0.4688,0],[-0.5782,0.4844,0],[-0.5782,0.5,0],[-0.5782,0.5156,0],[-0.5782,0.5312,0],[-0.5782,0.5468,0],[-0.5782,0.5624,0],[-0.5782,0.5782,0],[-0.5782,0.5938,0],[-0.5782,0.6094,0],[-0.5782,0.625,0],[-0.5782,0.6406,0],[-0.5782,0.6562,0],[-0.5782,0.6718,0],[-0.5782,0.6876,0],[-0.5782,0.7032,0],[-0.5782,0.7188,0],[-0.5782,0.7344,0],[-0.5782,0.75,0],[-0.5782,0.7656,0],[-0.5782,0.7812,0],[-0.5782,0.7968,0],[-0.5782,0.8124,0],[-0.5782,0.8282,0],[-0.5782,0.8438,0],[-0.5782,0.8594,0],[-0.5782,0.875,0],[-0.5782,0.8906,0],[-0.5782,0.9062,0],[-0.5782,0.9218,0],[-0.5782,0.9376,0],[-0.5782,0.9532,0],[-0.5782,0.9688,0],[-0.5782,0.9844,0],[-0.5624,-1,0],[-0.5624,-0.9844,0],[-0.5624,-0.9688,0],[-0.5624,-0.9532,0],[-0.5624,-0.9376,0],[-0.5624,-0.9218,0],[-0.5624,-0.9062,0],[-0.5624,-0.8906,0],[-0.5624,-0.875,0],[-0.5624,-0.8594,0],[-0.5624,-0.8438,0],[-0.5624,-0.8282,0],[-0.5624,-0.8124,0],[-0.5624,-0.7968,0],[-0.5624,-0.7812,0],[-0.5624,-0.7656,0],[-0.5624,-0.75,0],[-0.5624,-0.7344,0],[-0.5624,-0.7188,0],[-0.5624,-0.7032,0],[-0.5624,-0.6876,0],[-0.5624,-0.6718,0],[-0.5624,-0.6562,0],[-0.5624,-0.6406,0],[-0.5624,-0.625,0],[-0.5624,-0.6094,0],[-0.5624,-0.5938,0],[-0.5624,-0.5782,0],[-0.5624,-0.5624,0],[-0.5624,-0.5468,0],[-0.5624,-0.5312,0],[-0.5624,-0.5156,0],[-0.5624,-0.5,0],[-0.5624,-0.4844,0],[-0.5624,-0.4688,0],[-0.5624,-0.4532,0],[-0.5624,-0.4376,0],[-0.5624,-0.4218,0],[-0.5624,-0.4062,0],[-0.5624,-0.3906,0],[-0.5624,-0.375,0],[-0.5624,-0.3594,0],[-0.5624,-0.3438,0],[-0.5624,-0.3282,0],[-0.5624,-0.3124,0],[-0.5624,-0.2968,0],[-0.5624,-0.2812,0],[-0.5624,-0.2656,0],[-0.5624,-0.25,0],[-0.5624,-0.2344,0],[-0.5624,-0.2188,0],[-0.5624,-0.2032,0],[-0.5624,-0.1876,0],[-0.5624,-0.1718,0],[-0.5624,-0.1562,0],[-0.5624,-0.1406,0],[-0.5624,-0.125,0],[-0.5624,-0.1094,0],[-0.5624,-0.0938,0],[-0.5624,-0.0782,0],[-0.5624,-0.0624,0],[-0.5624,-0.0468,0],[-0.5624,-0.0312,0],[-0.5624,-0.0156,0],[-0.5624,0,0],[-0.5624,0.0156,0],[-0.5624,0.0312,0],[-0.5624,0.0468,0],[-0.5624,0.0624,0],[-0.5624,0.0782,0],[-0.5624,0.0938,0],[-0.5624,0.1094,0],[-0.5624,0.125,0],[-0.5624,0.1406,0],[-0.5624,0.1562,0],[-0.5624,0.1718,0],[-0.5624,0.1876,0],[-0.5624,0.2032,0],[-0.5624,0.2188,0],[-0.5624,0.2344,0],[-0.5624,0.25,0],[-0.5624,0.2656,0],[-0.5624,0.2812,0],[-0.5624,0.2968,0],[-0.5624,0.3124,0],[-0.5624,0.3282,0],[-0.5624,0.3438,0],[-0.5624,0.3594,0],[-0.5624,0.375,0],[-0.5624,0.3906,0],[-0.5624,0.4062,0],[-0.5624,0.4218,0],[-0.5624,0.4376,0],[-0.5624,0.4532,0],[-0.5624,0.4688,0],[-0.5624,0.4844,0],[-0.5624,0.5,0],[-0.5624,0.5156,0],[-0.5624,0.5312,0],[-0.5624,0.5468,0],[-0.5624,0.5624,0],[-0.5624,0.5782,0],[-0.5624,0.5938,0],[-0.5624,0.6094,0],[-0.5624,0.625,0],[-0.5624,0.6406,0],[-0.5624,0.6562,0],[-0.5624,0.6718,0],[-0.5624,0.6876,0],[-0.5624,0.7032,0],[-0.5624,0.7188,0],[-0.5624,0.7344,0],[-0.5624,0.75,0],[-0.5624,0.7656,0],[-0.5624,0.7812,0],[-0.5624,0.7968,0],[-0.5624,0.8124,0],[-0.5624,0.8282,0],[-0.5624,0.8438,0],[-0.5624,0.8594,0],[-0.5624,0.875,0],[-0.5624,0.8906,0],[-0.5624,0.9062,0],[-0.5624,0.9218,0],[-0.5624,0.9376,0],[-0.5624,0.9532,0],[-0.5624,0.9688,0],[-0.5624,0.9844,0],[-0.5468,-1,0],[-0.5468,-0.9844,0],[-0.5468,-0.9688,0],[-0.5468,-0.9532,0],[-0.5468,-0.9376,0],[-0.5468,-0.9218,0],[-0.5468,-0.9062,0],[-0.5468,-0.8906,0],[-0.5468,-0.875,0],[-0.5468,-0.8594,0],[-0.5468,-0.8438,0],[-0.5468,-0.8282,0],[-0.5468,-0.8124,0],[-0.5468,-0.7968,0],[-0.5468,-0.7812,0],[-0.5468,-0.7656,0],[-0.5468,-0.75,0],[-0.5468,-0.7344,0],[-0.5468,-0.7188,0],[-0.5468,-0.7032,0],[-0.5468,-0.6876,0],[-0.5468,-0.6718,0],[-0.5468,-0.6562,0],[-0.5468,-0.6406,0],[-0.5468,-0.625,0],[-0.5468,-0.6094,0],[-0.5468,-0.5938,0],[-0.5468,-0.5782,0],[-0.5468,-0.5624,0],[-0.5468,-0.5468,0],[-0.5468,-0.5312,0],[-0.5468,-0.5156,0],[-0.5468,-0.5,0],[-0.5468,-0.4844,0],[-0.5468,-0.4688,0],[-0.5468,-0.4532,0],[-0.5468,-0.4376,0],[-0.5468,-0.4218,0],[-0.5468,-0.4062,0],[-0.5468,-0.3906,0],[-0.5468,-0.375,0],[-0.5468,-0.3594,0],[-0.5468,-0.3438,0],[-0.5468,-0.3282,0],[-0.5468,-0.3124,0],[-0.5468,-0.2968,0],[-0.5468,-0.2812,0],[-0.5468,-0.2656,0],[-0.5468,-0.25,0],[-0.5468,-0.2344,0],[-0.5468,-0.2188,0],[-0.5468,-0.2032,0],[-0.5468,-0.1876,0],[-0.5468,-0.1718,0],[-0.5468,-0.1562,0],[-0.5468,-0.1406,0],[-0.5468,-0.125,0],[-0.5468,-0.1094,0],[-0.5468,-0.0938,0],[-0.5468,-0.0782,0],[-0.5468,-0.0624,0],[-0.5468,-0.0468,0],[-0.5468,-0.0312,0],[-0.5468,-0.0156,0],[-0.5468,0,0],[-0.5468,0.0156,0],[-0.5468,0.0312,0],[-0.5468,0.0468,0],[-0.5468,0.0624,0],[-0.5468,0.0782,0],[-0.5468,0.0938,0],[-0.5468,0.1094,0],[-0.5468,0.125,0],[-0.5468,0.1406,0],[-0.5468,0.1562,0],[-0.5468,0.1718,0],[-0.5468,0.1876,0],[-0.5468,0.2032,0],[-0.5468,0.2188,0],[-0.5468,0.2344,0],[-0.5468,0.25,0],[-0.5468,0.2656,0],[-0.5468,0.2812,0],[-0.5468,0.2968,0],[-0.5468,0.3124,0],[-0.5468,0.3282,0],[-0.5468,0.3438,0],[-0.5468,0.3594,0],[-0.5468,0.375,0],[-0.5468,0.3906,0],[-0.5468,0.4062,0],[-0.5468,0.4218,0],[-0.5468,0.4376,0],[-0.5468,0.4532,0],[-0.5468,0.4688,0],[-0.5468,0.4844,0],[-0.5468,0.5,0],[-0.5468,0.5156,0],[-0.5468,0.5312,0],[-0.5468,0.5468,0],[-0.5468,0.5624,0],[-0.5468,0.5782,0],[-0.5468,0.5938,0],[-0.5468,0.6094,0],[-0.5468,0.625,0],[-0.5468,0.6406,0],[-0.5468,0.6562,0],[-0.5468,0.6718,0],[-0.5468,0.6876,0],[-0.5468,0.7032,0],[-0.5468,0.7188,0],[-0.5468,0.7344,0],[-0.5468,0.75,0],[-0.5468,0.7656,0],[-0.5468,0.7812,0],[-0.5468,0.7968,0],[-0.5468,0.8124,0],[-0.5468,0.8282,0],[-0.5468,0.8438,0],[-0.5468,0.8594,0],[-0.5468,0.875,0],[-0.5468,0.8906,0],[-0.5468,0.9062,0],[-0.5468,0.9218,0],[-0.5468,0.9376,0],[-0.5468,0.9532,0],[-0.5468,0.9688,0],[-0.5468,0.9844,0],[-0.5312,-1,0],[-0.5312,-0.9844,0],[-0.5312,-0.9688,0],[-0.5312,-0.9532,0],[-0.5312,-0.9376,0],[-0.5312,-0.9218,0],[-0.5312,-0.9062,0],[-0.5312,-0.8906,0],[-0.5312,-0.875,0],[-0.5312,-0.8594,0],[-0.5312,-0.8438,0],[-0.5312,-0.8282,0],[-0.5312,-0.8124,0],[-0.5312,-0.7968,0],[-0.5312,-0.7812,0],[-0.5312,-0.7656,0],[-0.5312,-0.75,0],[-0.5312,-0.7344,0],[-0.5312,-0.7188,0],[-0.5312,-0.7032,0],[-0.5312,-0.6876,0],[-0.5312,-0.6718,0],[-0.5312,-0.6562,0],[-0.5312,-0.6406,0],[-0.5312,-0.625,0],[-0.5312,-0.6094,0],[-0.5312,-0.5938,0],[-0.5312,-0.5782,0],[-0.5312,-0.5624,0],[-0.5312,-0.5468,0],[-0.5312,-0.5312,0],[-0.5312,-0.5156,0],[-0.5312,-0.5,0],[-0.5312,-0.4844,0],[-0.5312,-0.4688,0],[-0.5312,-0.4532,0],[-0.5312,-0.4376,0],[-0.5312,-0.4218,0],[-0.5312,-0.4062,0],[-0.5312,-0.3906,0],[-0.5312,-0.375,0],[-0.5312,-0.3594,0],[-0.5312,-0.3438,0],[-0.5312,-0.3282,0],[-0.5312,-0.3124,0],[-0.5312,-0.2968,0],[-0.5312,-0.2812,0],[-0.5312,-0.2656,0],[-0.5312,-0.25,0],[-0.5312,-0.2344,0],[-0.5312,-0.2188,0],[-0.5312,-0.2032,0],[-0.5312,-0.1876,0],[-0.5312,-0.1718,0],[-0.5312,-0.1562,0],[-0.5312,-0.1406,0],[-0.5312,-0.125,0],[-0.5312,-0.1094,0],[-0.5312,-0.0938,0],[-0.5312,-0.0782,0],[-0.5312,-0.0624,0],[-0.5312,-0.0468,0],[-0.5312,-0.0312,0],[-0.5312,-0.0156,0],[-0.5312,0,0],[-0.5312,0.0156,0],[-0.5312,0.0312,0],[-0.5312,0.0468,0],[-0.5312,0.0624,0],[-0.5312,0.0782,0],[-0.5312,0.0938,0],[-0.5312,0.1094,0],[-0.5312,0.125,0],[-0.5312,0.1406,0],[-0.5312,0.1562,0],[-0.5312,0.1718,0],[-0.5312,0.1876,0],[-0.5312,0.2032,0],[-0.5312,0.2188,0],[-0.5312,0.2344,0],[-0.5312,0.25,0],[-0.5312,0.2656,0],[-0.5312,0.2812,0],[-0.5312,0.2968,0],[-0.5312,0.3124,0],[-0.5312,0.3282,0],[-0.5312,0.3438,0],[-0.5312,0.3594,0],[-0.5312,0.375,0],[-0.5312,0.3906,0],[-0.5312,0.4062,0],[-0.5312,0.4218,0],[-0.5312,0.4376,0],[-0.5312,0.4532,0],[-0.5312,0.4688,0],[-0.5312,0.4844,0],[-0.5312,0.5,0],[-0.5312,0.5156,0],[-0.5312,0.5312,0],[-0.5312,0.5468,0],[-0.5312,0.5624,0],[-0.5312,0.5782,0],[-0.5312,0.5938,0],[-0.5312,0.6094,0],[-0.5312,0.625,0],[-0.5312,0.6406,0],[-0.5312,0.6562,0],[-0.5312,0.6718,0],[-0.5312,0.6876,0],[-0.5312,0.7032,0],[-0.5312,0.7188,0],[-0.5312,0.7344,0],[-0.5312,0.75,0],[-0.5312,0.7656,0],[-0.5312,0.7812,0],[-0.5312,0.7968,0],[-0.5312,0.8124,0],[-0.5312,0.8282,0],[-0.5312,0.8438,0],[-0.5312,0.8594,0],[-0.5312,0.875,0],[-0.5312,0.8906,0],[-0.5312,0.9062,0],[-0.5312,0.9218,0],[-0.5312,0.9376,0],[-0.5312,0.9532,0],[-0.5312,0.9688,0],[-0.5312,0.9844,0],[-0.5156,-1,0],[-0.5156,-0.9844,0],[-0.5156,-0.9688,0],[-0.5156,-0.9532,0],[-0.5156,-0.9376,0],[-0.5156,-0.9218,0],[-0.5156,-0.9062,0],[-0.5156,-0.8906,0],[-0.5156,-0.875,0],[-0.5156,-0.8594,0],[-0.5156,-0.8438,0],[-0.5156,-0.8282,0],[-0.5156,-0.8124,0],[-0.5156,-0.7968,0],[-0.5156,-0.7812,0],[-0.5156,-0.7656,0],[-0.5156,-0.75,0],[-0.5156,-0.7344,0],[-0.5156,-0.7188,0],[-0.5156,-0.7032,0],[-0.5156,-0.6876,0],[-0.5156,-0.6718,0],[-0.5156,-0.6562,0],[-0.5156,-0.6406,0],[-0.5156,-0.625,0],[-0.5156,-0.6094,0],[-0.5156,-0.5938,0],[-0.5156,-0.5782,0],[-0.5156,-0.5624,0],[-0.5156,-0.5468,0],[-0.5156,-0.5312,0],[-0.5156,-0.5156,0],[-0.5156,-0.5,0],[-0.5156,-0.4844,0],[-0.5156,-0.4688,0],[-0.5156,-0.4532,0],[-0.5156,-0.4376,0],[-0.5156,-0.4218,0],[-0.5156,-0.4062,0],[-0.5156,-0.3906,0],[-0.5156,-0.375,0],[-0.5156,-0.3594,0],[-0.5156,-0.3438,0],[-0.5156,-0.3282,0],[-0.5156,-0.3124,0],[-0.5156,-0.2968,0],[-0.5156,-0.2812,0],[-0.5156,-0.2656,0],[-0.5156,-0.25,0],[-0.5156,-0.2344,0],[-0.5156,-0.2188,0],[-0.5156,-0.2032,0],[-0.5156,-0.1876,0],[-0.5156,-0.1718,0],[-0.5156,-0.1562,0],[-0.5156,-0.1406,0],[-0.5156,-0.125,0],[-0.5156,-0.1094,0],[-0.5156,-0.0938,0],[-0.5156,-0.0782,0],[-0.5156,-0.0624,0],[-0.5156,-0.0468,0],[-0.5156,-0.0312,0],[-0.5156,-0.0156,0],[-0.5156,0,0],[-0.5156,0.0156,0],[-0.5156,0.0312,0],[-0.5156,0.0468,0],[-0.5156,0.0624,0],[-0.5156,0.0782,0],[-0.5156,0.0938,0],[-0.5156,0.1094,0],[-0.5156,0.125,0],[-0.5156,0.1406,0],[-0.5156,0.1562,0],[-0.5156,0.1718,0],[-0.5156,0.1876,0],[-0.5156,0.2032,0],[-0.5156,0.2188,0],[-0.5156,0.2344,0],[-0.5156,0.25,0],[-0.5156,0.2656,0],[-0.5156,0.2812,0],[-0.5156,0.2968,0],[-0.5156,0.3124,0],[-0.5156,0.3282,0],[-0.5156,0.3438,0],[-0.5156,0.3594,0],[-0.5156,0.375,0],[-0.5156,0.3906,0],[-0.5156,0.4062,0],[-0.5156,0.4218,0],[-0.5156,0.4376,0],[-0.5156,0.4532,0],[-0.5156,0.4688,0],[-0.5156,0.4844,0],[-0.5156,0.5,0],[-0.5156,0.5156,0],[-0.5156,0.5312,0],[-0.5156,0.5468,0],[-0.5156,0.5624,0],[-0.5156,0.5782,0],[-0.5156,0.5938,0],[-0.5156,0.6094,0],[-0.5156,0.625,0],[-0.5156,0.6406,0],[-0.5156,0.6562,0],[-0.5156,0.6718,0],[-0.5156,0.6876,0],[-0.5156,0.7032,0],[-0.5156,0.7188,0],[-0.5156,0.7344,0],[-0.5156,0.75,0],[-0.5156,0.7656,0],[-0.5156,0.7812,0],[-0.5156,0.7968,0],[-0.5156,0.8124,0],[-0.5156,0.8282,0],[-0.5156,0.8438,0],[-0.5156,0.8594,0],[-0.5156,0.875,0],[-0.5156,0.8906,0],[-0.5156,0.9062,0],[-0.5156,0.9218,0],[-0.5156,0.9376,0],[-0.5156,0.9532,0],[-0.5156,0.9688,0],[-0.5156,0.9844,0],[-0.5,-1,0],[-0.5,-0.9844,0],[-0.5,-0.9688,0],[-0.5,-0.9532,0],[-0.5,-0.9376,0],[-0.5,-0.9218,0],[-0.5,-0.9062,0],[-0.5,-0.8906,0],[-0.5,-0.875,0],[-0.5,-0.8594,0],[-0.5,-0.8438,0],[-0.5,-0.8282,0],[-0.5,-0.8124,0],[-0.5,-0.7968,0],[-0.5,-0.7812,0],[-0.5,-0.7656,0],[-0.5,-0.75,0],[-0.5,-0.7344,0],[-0.5,-0.7188,0],[-0.5,-0.7032,0],[-0.5,-0.6876,0],[-0.5,-0.6718,0],[-0.5,-0.6562,0],[-0.5,-0.6406,0],[-0.5,-0.625,0],[-0.5,-0.6094,0],[-0.5,-0.5938,0],[-0.5,-0.5782,0],[-0.5,-0.5624,0],[-0.5,-0.5468,0],[-0.5,-0.5312,0],[-0.5,-0.5156,0],[-0.5,-0.5,0],[-0.5,-0.4844,0],[-0.5,-0.4688,0],[-0.5,-0.4532,0],[-0.5,-0.4376,0],[-0.5,-0.4218,0],[-0.5,-0.4062,0],[-0.5,-0.3906,0],[-0.5,-0.375,0],[-0.5,-0.3594,0],[-0.5,-0.3438,0],[-0.5,-0.3282,0],[-0.5,-0.3124,0],[-0.5,-0.2968,0],[-0.5,-0.2812,0],[-0.5,-0.2656,0],[-0.5,-0.25,0],[-0.5,-0.2344,0],[-0.5,-0.2188,0],[-0.5,-0.2032,0],[-0.5,-0.1876,0],[-0.5,-0.1718,0],[-0.5,-0.1562,0],[-0.5,-0.1406,0],[-0.5,-0.125,0],[-0.5,-0.1094,0],[-0.5,-0.0938,0],[-0.5,-0.0782,0],[-0.5,-0.0624,0],[-0.5,-0.0468,0],[-0.5,-0.0312,0],[-0.5,-0.0156,0],[-0.5,0,0],[-0.5,0.0156,0],[-0.5,0.0312,0],[-0.5,0.0468,0],[-0.5,0.0624,0],[-0.5,0.0782,0],[-0.5,0.0938,0],[-0.5,0.1094,0],[-0.5,0.125,0],[-0.5,0.1406,0],[-0.5,0.1562,0],[-0.5,0.1718,0],[-0.5,0.1876,0],[-0.5,0.2032,0],[-0.5,0.2188,0],[-0.5,0.2344,0],[-0.5,0.25,0],[-0.5,0.2656,0],[-0.5,0.2812,0],[-0.5,0.2968,0],[-0.5,0.3124,0],[-0.5,0.3282,0],[-0.5,0.3438,0],[-0.5,0.3594,0],[-0.5,0.375,0],[-0.5,0.3906,0],[-0.5,0.4062,0],[-0.5,0.4218,0],[-0.5,0.4376,0],[-0.5,0.4532,0],[-0.5,0.4688,0],[-0.5,0.4844,0],[-0.5,0.5,0],[-0.5,0.5156,0],[-0.5,0.5312,0],[-0.5,0.5468,0],[-0.5,0.5624,0],[-0.5,0.5782,0],[-0.5,0.5938,0],[-0.5,0.6094,0],[-0.5,0.625,0],[-0.5,0.6406,0],[-0.5,0.6562,0],[-0.5,0.6718,0],[-0.5,0.6876,0],[-0.5,0.7032,0],[-0.5,0.7188,0],[-0.5,0.7344,0],[-0.5,0.75,0],[-0.5,0.7656,0],[-0.5,0.7812,0],[-0.5,0.7968,0],[-0.5,0.8124,0],[-0.5,0.8282,0],[-0.5,0.8438,0],[-0.5,0.8594,0],[-0.5,0.875,0],[-0.5,0.8906,0],[-0.5,0.9062,0],[-0.5,0.9218,0],[-0.5,0.9376,0],[-0.5,0.9532,0],[-0.5,0.9688,0],[-0.5,0.9844,0],[-0.4844,-1,0],[-0.4844,-0.9844,0],[-0.4844,-0.9688,0],[-0.4844,-0.9532,0],[-0.4844,-0.9376,0],[-0.4844,-0.9218,0],[-0.4844,-0.9062,0],[-0.4844,-0.8906,0],[-0.4844,-0.875,0],[-0.4844,-0.8594,0],[-0.4844,-0.8438,0],[-0.4844,-0.8282,0],[-0.4844,-0.8124,0],[-0.4844,-0.7968,0],[-0.4844,-0.7812,0],[-0.4844,-0.7656,0],[-0.4844,-0.75,0],[-0.4844,-0.7344,0],[-0.4844,-0.7188,0],[-0.4844,-0.7032,0],[-0.4844,-0.6876,0],[-0.4844,-0.6718,0],[-0.4844,-0.6562,0],[-0.4844,-0.6406,0],[-0.4844,-0.625,0],[-0.4844,-0.6094,0],[-0.4844,-0.5938,0],[-0.4844,-0.5782,0],[-0.4844,-0.5624,0],[-0.4844,-0.5468,0],[-0.4844,-0.5312,0],[-0.4844,-0.5156,0],[-0.4844,-0.5,0],[-0.4844,-0.4844,0],[-0.4844,-0.4688,0],[-0.4844,-0.4532,0],[-0.4844,-0.4376,0],[-0.4844,-0.4218,0],[-0.4844,-0.4062,0],[-0.4844,-0.3906,0],[-0.4844,-0.375,0],[-0.4844,-0.3594,0],[-0.4844,-0.3438,0],[-0.4844,-0.3282,0],[-0.4844,-0.3124,0],[-0.4844,-0.2968,0],[-0.4844,-0.2812,0],[-0.4844,-0.2656,0],[-0.4844,-0.25,0],[-0.4844,-0.2344,0],[-0.4844,-0.2188,0],[-0.4844,-0.2032,0],[-0.4844,-0.1876,0],[-0.4844,-0.1718,0],[-0.4844,-0.1562,0],[-0.4844,-0.1406,0],[-0.4844,-0.125,0],[-0.4844,-0.1094,0],[-0.4844,-0.0938,0],[-0.4844,-0.0782,0],[-0.4844,-0.0624,0],[-0.4844,-0.0468,0],[-0.4844,-0.0312,0],[-0.4844,-0.0156,0],[-0.4844,0,0],[-0.4844,0.0156,0],[-0.4844,0.0312,0],[-0.4844,0.0468,0],[-0.4844,0.0624,0],[-0.4844,0.0782,0],[-0.4844,0.0938,0],[-0.4844,0.1094,0],[-0.4844,0.125,0],[-0.4844,0.1406,0],[-0.4844,0.1562,0],[-0.4844,0.1718,0],[-0.4844,0.1876,0],[-0.4844,0.2032,0],[-0.4844,0.2188,0],[-0.4844,0.2344,0],[-0.4844,0.25,0],[-0.4844,0.2656,0],[-0.4844,0.2812,0],[-0.4844,0.2968,0],[-0.4844,0.3124,0],[-0.4844,0.3282,0],[-0.4844,0.3438,0],[-0.4844,0.3594,0],[-0.4844,0.375,0],[-0.4844,0.3906,0],[-0.4844,0.4062,0],[-0.4844,0.4218,0],[-0.4844,0.4376,0],[-0.4844,0.4532,0],[-0.4844,0.4688,0],[-0.4844,0.4844,0],[-0.4844,0.5,0],[-0.4844,0.5156,0],[-0.4844,0.5312,0],[-0.4844,0.5468,0],[-0.4844,0.5624,0],[-0.4844,0.5782,0],[-0.4844,0.5938,0],[-0.4844,0.6094,0],[-0.4844,0.625,0],[-0.4844,0.6406,0],[-0.4844,0.6562,0],[-0.4844,0.6718,0],[-0.4844,0.6876,0],[-0.4844,0.7032,0],[-0.4844,0.7188,0],[-0.4844,0.7344,0],[-0.4844,0.75,0],[-0.4844,0.7656,0],[-0.4844,0.7812,0],[-0.4844,0.7968,0],[-0.4844,0.8124,0],[-0.4844,0.8282,0],[-0.4844,0.8438,0],[-0.4844,0.8594,0],[-0.4844,0.875,0],[-0.4844,0.8906,0],[-0.4844,0.9062,0],[-0.4844,0.9218,0],[-0.4844,0.9376,0],[-0.4844,0.9532,0],[-0.4844,0.9688,0],[-0.4844,0.9844,0],[-0.4688,-1,0],[-0.4688,-0.9844,0],[-0.4688,-0.9688,0],[-0.4688,-0.9532,0],[-0.4688,-0.9376,0],[-0.4688,-0.9218,0],[-0.4688,-0.9062,0],[-0.4688,-0.8906,0],[-0.4688,-0.875,0],[-0.4688,-0.8594,0],[-0.4688,-0.8438,0],[-0.4688,-0.8282,0],[-0.4688,-0.8124,0],[-0.4688,-0.7968,0],[-0.4688,-0.7812,0],[-0.4688,-0.7656,0],[-0.4688,-0.75,0],[-0.4688,-0.7344,0],[-0.4688,-0.7188,0],[-0.4688,-0.7032,0],[-0.4688,-0.6876,0],[-0.4688,-0.6718,0],[-0.4688,-0.6562,0],[-0.4688,-0.6406,0],[-0.4688,-0.625,0],[-0.4688,-0.6094,0],[-0.4688,-0.5938,0],[-0.4688,-0.5782,0],[-0.4688,-0.5624,0],[-0.4688,-0.5468,0],[-0.4688,-0.5312,0],[-0.4688,-0.5156,0],[-0.4688,-0.5,0],[-0.4688,-0.4844,0],[-0.4688,-0.4688,0],[-0.4688,-0.4532,0],[-0.4688,-0.4376,0],[-0.4688,-0.4218,0],[-0.4688,-0.4062,0],[-0.4688,-0.3906,0],[-0.4688,-0.375,0],[-0.4688,-0.3594,0],[-0.4688,-0.3438,0],[-0.4688,-0.3282,0],[-0.4688,-0.3124,0],[-0.4688,-0.2968,0],[-0.4688,-0.2812,0],[-0.4688,-0.2656,0],[-0.4688,-0.25,0],[-0.4688,-0.2344,0],[-0.4688,-0.2188,0],[-0.4688,-0.2032,0],[-0.4688,-0.1876,0],[-0.4688,-0.1718,0],[-0.4688,-0.1562,0],[-0.4688,-0.1406,0],[-0.4688,-0.125,0],[-0.4688,-0.1094,0],[-0.4688,-0.0938,0],[-0.4688,-0.0782,0],[-0.4688,-0.0624,0],[-0.4688,-0.0468,0],[-0.4688,-0.0312,0],[-0.4688,-0.0156,0],[-0.4688,0,0],[-0.4688,0.0156,0],[-0.4688,0.0312,0],[-0.4688,0.0468,0],[-0.4688,0.0624,0],[-0.4688,0.0782,0],[-0.4688,0.0938,0],[-0.4688,0.1094,0],[-0.4688,0.125,0],[-0.4688,0.1406,0],[-0.4688,0.1562,0],[-0.4688,0.1718,0],[-0.4688,0.1876,0],[-0.4688,0.2032,0],[-0.4688,0.2188,0],[-0.4688,0.2344,0],[-0.4688,0.25,0],[-0.4688,0.2656,0],[-0.4688,0.2812,0],[-0.4688,0.2968,0],[-0.4688,0.3124,0],[-0.4688,0.3282,0],[-0.4688,0.3438,0],[-0.4688,0.3594,0],[-0.4688,0.375,0],[-0.4688,0.3906,0],[-0.4688,0.4062,0],[-0.4688,0.4218,0],[-0.4688,0.4376,0],[-0.4688,0.4532,0],[-0.4688,0.4688,0],[-0.4688,0.4844,0],[-0.4688,0.5,0],[-0.4688,0.5156,0],[-0.4688,0.5312,0],[-0.4688,0.5468,0],[-0.4688,0.5624,0],[-0.4688,0.5782,0],[-0.4688,0.5938,0],[-0.4688,0.6094,0],[-0.4688,0.625,0],[-0.4688,0.6406,0],[-0.4688,0.6562,0],[-0.4688,0.6718,0],[-0.4688,0.6876,0],[-0.4688,0.7032,0],[-0.4688,0.7188,0],[-0.4688,0.7344,0],[-0.4688,0.75,0],[-0.4688,0.7656,0],[-0.4688,0.7812,0],[-0.4688,0.7968,0],[-0.4688,0.8124,0],[-0.4688,0.8282,0],[-0.4688,0.8438,0],[-0.4688,0.8594,0],[-0.4688,0.875,0],[-0.4688,0.8906,0],[-0.4688,0.9062,0],[-0.4688,0.9218,0],[-0.4688,0.9376,0],[-0.4688,0.9532,0],[-0.4688,0.9688,0],[-0.4688,0.9844,0],[-0.4532,-1,0],[-0.4532,-0.9844,0],[-0.4532,-0.9688,0],[-0.4532,-0.9532,0],[-0.4532,-0.9376,0],[-0.4532,-0.9218,0],[-0.4532,-0.9062,0],[-0.4532,-0.8906,0],[-0.4532,-0.875,0],[-0.4532,-0.8594,0],[-0.4532,-0.8438,0],[-0.4532,-0.8282,0],[-0.4532,-0.8124,0],[-0.4532,-0.7968,0],[-0.4532,-0.7812,0],[-0.4532,-0.7656,0],[-0.4532,-0.75,0],[-0.4532,-0.7344,0],[-0.4532,-0.7188,0],[-0.4532,-0.7032,0],[-0.4532,-0.6876,0],[-0.4532,-0.6718,0],[-0.4532,-0.6562,0],[-0.4532,-0.6406,0],[-0.4532,-0.625,0],[-0.4532,-0.6094,0],[-0.4532,-0.5938,0],[-0.4532,-0.5782,0],[-0.4532,-0.5624,0],[-0.4532,-0.5468,0],[-0.4532,-0.5312,0],[-0.4532,-0.5156,0],[-0.4532,-0.5,0],[-0.4532,-0.4844,0],[-0.4532,-0.4688,0],[-0.4532,-0.4532,0],[-0.4532,-0.4376,0],[-0.4532,-0.4218,0],[-0.4532,-0.4062,0],[-0.4532,-0.3906,0],[-0.4532,-0.375,0],[-0.4532,-0.3594,0],[-0.4532,-0.3438,0],[-0.4532,-0.3282,0],[-0.4532,-0.3124,0],[-0.4532,-0.2968,0],[-0.4532,-0.2812,0],[-0.4532,-0.2656,0],[-0.4532,-0.25,0],[-0.4532,-0.2344,0],[-0.4532,-0.2188,0],[-0.4532,-0.2032,0],[-0.4532,-0.1876,0],[-0.4532,-0.1718,0],[-0.4532,-0.1562,0],[-0.4532,-0.1406,0],[-0.4532,-0.125,0],[-0.4532,-0.1094,0],[-0.4532,-0.0938,0],[-0.4532,-0.0782,0],[-0.4532,-0.0624,0],[-0.4532,-0.0468,0],[-0.4532,-0.0312,0],[-0.4532,-0.0156,0],[-0.4532,0,0],[-0.4532,0.0156,0],[-0.4532,0.0312,0],[-0.4532,0.0468,0],[-0.4532,0.0624,0],[-0.4532,0.0782,0],[-0.4532,0.0938,0],[-0.4532,0.1094,0],[-0.4532,0.125,0],[-0.4532,0.1406,0],[-0.4532,0.1562,0],[-0.4532,0.1718,0],[-0.4532,0.1876,0],[-0.4532,0.2032,0],[-0.4532,0.2188,0],[-0.4532,0.2344,0],[-0.4532,0.25,0],[-0.4532,0.2656,0],[-0.4532,0.2812,0],[-0.4532,0.2968,0],[-0.4532,0.3124,0],[-0.4532,0.3282,0],[-0.4532,0.3438,0],[-0.4532,0.3594,0],[-0.4532,0.375,0],[-0.4532,0.3906,0],[-0.4532,0.4062,0],[-0.4532,0.4218,0],[-0.4532,0.4376,0],[-0.4532,0.4532,0],[-0.4532,0.4688,0],[-0.4532,0.4844,0],[-0.4532,0.5,0],[-0.4532,0.5156,0],[-0.4532,0.5312,0],[-0.4532,0.5468,0],[-0.4532,0.5624,0],[-0.4532,0.5782,0],[-0.4532,0.5938,0],[-0.4532,0.6094,0],[-0.4532,0.625,0],[-0.4532,0.6406,0],[-0.4532,0.6562,0],[-0.4532,0.6718,0],[-0.4532,0.6876,0],[-0.4532,0.7032,0],[-0.4532,0.7188,0],[-0.4532,0.7344,0],[-0.4532,0.75,0],[-0.4532,0.7656,0],[-0.4532,0.7812,0],[-0.4532,0.7968,0],[-0.4532,0.8124,0],[-0.4532,0.8282,0],[-0.4532,0.8438,0],[-0.4532,0.8594,0],[-0.4532,0.875,0],[-0.4532,0.8906,0],[-0.4532,0.9062,0],[-0.4532,0.9218,0],[-0.4532,0.9376,0],[-0.4532,0.9532,0],[-0.4532,0.9688,0],[-0.4532,0.9844,0],[-0.4376,-1,0],[-0.4376,-0.9844,0],[-0.4376,-0.9688,0],[-0.4376,-0.9532,0],[-0.4376,-0.9376,0],[-0.4376,-0.9218,0],[-0.4376,-0.9062,0],[-0.4376,-0.8906,0],[-0.4376,-0.875,0],[-0.4376,-0.8594,0],[-0.4376,-0.8438,0],[-0.4376,-0.8282,0],[-0.4376,-0.8124,0],[-0.4376,-0.7968,0],[-0.4376,-0.7812,0],[-0.4376,-0.7656,0],[-0.4376,-0.75,0],[-0.4376,-0.7344,0],[-0.4376,-0.7188,0],[-0.4376,-0.7032,0],[-0.4376,-0.6876,0],[-0.4376,-0.6718,0],[-0.4376,-0.6562,0],[-0.4376,-0.6406,0],[-0.4376,-0.625,0],[-0.4376,-0.6094,0],[-0.4376,-0.5938,0],[-0.4376,-0.5782,0],[-0.4376,-0.5624,0],[-0.4376,-0.5468,0],[-0.4376,-0.5312,0],[-0.4376,-0.5156,0],[-0.4376,-0.5,0],[-0.4376,-0.4844,0],[-0.4376,-0.4688,0],[-0.4376,-0.4532,0],[-0.4376,-0.4376,0],[-0.4376,-0.4218,0],[-0.4376,-0.4062,0],[-0.4376,-0.3906,0],[-0.4376,-0.375,0],[-0.4376,-0.3594,0],[-0.4376,-0.3438,0],[-0.4376,-0.3282,0],[-0.4376,-0.3124,0],[-0.4376,-0.2968,0],[-0.4376,-0.2812,0],[-0.4376,-0.2656,0],[-0.4376,-0.25,0],[-0.4376,-0.2344,0],[-0.4376,-0.2188,0],[-0.4376,-0.2032,0],[-0.4376,-0.1876,0],[-0.4376,-0.1718,0],[-0.4376,-0.1562,0],[-0.4376,-0.1406,0],[-0.4376,-0.125,0],[-0.4376,-0.1094,0],[-0.4376,-0.0938,0],[-0.4376,-0.0782,0],[-0.4376,-0.0624,0],[-0.4376,-0.0468,0],[-0.4376,-0.0312,0],[-0.4376,-0.0156,0],[-0.4376,0,0],[-0.4376,0.0156,0],[-0.4376,0.0312,0],[-0.4376,0.0468,0],[-0.4376,0.0624,0],[-0.4376,0.0782,0],[-0.4376,0.0938,0],[-0.4376,0.1094,0],[-0.4376,0.125,0],[-0.4376,0.1406,0],[-0.4376,0.1562,0],[-0.4376,0.1718,0],[-0.4376,0.1876,0],[-0.4376,0.2032,0],[-0.4376,0.2188,0],[-0.4376,0.2344,0],[-0.4376,0.25,0],[-0.4376,0.2656,0],[-0.4376,0.2812,0],[-0.4376,0.2968,0],[-0.4376,0.3124,0],[-0.4376,0.3282,0],[-0.4376,0.3438,0],[-0.4376,0.3594,0],[-0.4376,0.375,0],[-0.4376,0.3906,0],[-0.4376,0.4062,0],[-0.4376,0.4218,0],[-0.4376,0.4376,0],[-0.4376,0.4532,0],[-0.4376,0.4688,0],[-0.4376,0.4844,0],[-0.4376,0.5,0],[-0.4376,0.5156,0],[-0.4376,0.5312,0],[-0.4376,0.5468,0],[-0.4376,0.5624,0],[-0.4376,0.5782,0],[-0.4376,0.5938,0],[-0.4376,0.6094,0],[-0.4376,0.625,0],[-0.4376,0.6406,0],[-0.4376,0.6562,0],[-0.4376,0.6718,0],[-0.4376,0.6876,0],[-0.4376,0.7032,0],[-0.4376,0.7188,0],[-0.4376,0.7344,0],[-0.4376,0.75,0],[-0.4376,0.7656,0],[-0.4376,0.7812,0],[-0.4376,0.7968,0],[-0.4376,0.8124,0],[-0.4376,0.8282,0],[-0.4376,0.8438,0],[-0.4376,0.8594,0],[-0.4376,0.875,0],[-0.4376,0.8906,0],[-0.4376,0.9062,0],[-0.4376,0.9218,0],[-0.4376,0.9376,0],[-0.4376,0.9532,0],[-0.4376,0.9688,0],[-0.4376,0.9844,0],[-0.4218,-1,0],[-0.4218,-0.9844,0],[-0.4218,-0.9688,0],[-0.4218,-0.9532,0],[-0.4218,-0.9376,0],[-0.4218,-0.9218,0],[-0.4218,-0.9062,0],[-0.4218,-0.8906,0],[-0.4218,-0.875,0],[-0.4218,-0.8594,0],[-0.4218,-0.8438,0],[-0.4218,-0.8282,0],[-0.4218,-0.8124,0],[-0.4218,-0.7968,0],[-0.4218,-0.7812,0],[-0.4218,-0.7656,0],[-0.4218,-0.75,0],[-0.4218,-0.7344,0],[-0.4218,-0.7188,0],[-0.4218,-0.7032,0],[-0.4218,-0.6876,0],[-0.4218,-0.6718,0],[-0.4218,-0.6562,0],[-0.4218,-0.6406,0],[-0.4218,-0.625,0],[-0.4218,-0.6094,0],[-0.4218,-0.5938,0],[-0.4218,-0.5782,0],[-0.4218,-0.5624,0],[-0.4218,-0.5468,0],[-0.4218,-0.5312,0],[-0.4218,-0.5156,0],[-0.4218,-0.5,0],[-0.4218,-0.4844,0],[-0.4218,-0.4688,0],[-0.4218,-0.4532,0],[-0.4218,-0.4376,0],[-0.4218,-0.4218,0],[-0.4218,-0.4062,0],[-0.4218,-0.3906,0],[-0.4218,-0.375,0],[-0.4218,-0.3594,0],[-0.4218,-0.3438,0],[-0.4218,-0.3282,0],[-0.4218,-0.3124,0],[-0.4218,-0.2968,0],[-0.4218,-0.2812,0],[-0.4218,-0.2656,0],[-0.4218,-0.25,0],[-0.4218,-0.2344,0],[-0.4218,-0.2188,0],[-0.4218,-0.2032,0],[-0.4218,-0.1876,0],[-0.4218,-0.1718,0],[-0.4218,-0.1562,0],[-0.4218,-0.1406,0],[-0.4218,-0.125,0],[-0.4218,-0.1094,0],[-0.4218,-0.0938,0],[-0.4218,-0.0782,0],[-0.4218,-0.0624,0],[-0.4218,-0.0468,0],[-0.4218,-0.0312,0],[-0.4218,-0.0156,0],[-0.4218,0,0],[-0.4218,0.0156,0],[-0.4218,0.0312,0],[-0.4218,0.0468,0],[-0.4218,0.0624,0],[-0.4218,0.0782,0],[-0.4218,0.0938,0],[-0.4218,0.1094,0],[-0.4218,0.125,0],[-0.4218,0.1406,0],[-0.4218,0.1562,0],[-0.4218,0.1718,0],[-0.4218,0.1876,0],[-0.4218,0.2032,0],[-0.4218,0.2188,0],[-0.4218,0.2344,0],[-0.4218,0.25,0],[-0.4218,0.2656,0],[-0.4218,0.2812,0],[-0.4218,0.2968,0],[-0.4218,0.3124,0],[-0.4218,0.3282,0],[-0.4218,0.3438,0],[-0.4218,0.3594,0],[-0.4218,0.375,0],[-0.4218,0.3906,0],[-0.4218,0.4062,0],[-0.4218,0.4218,0],[-0.4218,0.4376,0],[-0.4218,0.4532,0],[-0.4218,0.4688,0],[-0.4218,0.4844,0],[-0.4218,0.5,0],[-0.4218,0.5156,0],[-0.4218,0.5312,0],[-0.4218,0.5468,0],[-0.4218,0.5624,0],[-0.4218,0.5782,0],[-0.4218,0.5938,0],[-0.4218,0.6094,0],[-0.4218,0.625,0],[-0.4218,0.6406,0],[-0.4218,0.6562,0],[-0.4218,0.6718,0],[-0.4218,0.6876,0],[-0.4218,0.7032,0],[-0.4218,0.7188,0],[-0.4218,0.7344,0],[-0.4218,0.75,0],[-0.4218,0.7656,0],[-0.4218,0.7812,0],[-0.4218,0.7968,0],[-0.4218,0.8124,0],[-0.4218,0.8282,0],[-0.4218,0.8438,0],[-0.4218,0.8594,0],[-0.4218,0.875,0],[-0.4218,0.8906,0],[-0.4218,0.9062,0],[-0.4218,0.9218,0],[-0.4218,0.9376,0],[-0.4218,0.9532,0],[-0.4218,0.9688,0],[-0.4218,0.9844,0],[-0.4062,-1,0],[-0.4062,-0.9844,0],[-0.4062,-0.9688,0],[-0.4062,-0.9532,0],[-0.4062,-0.9376,0],[-0.4062,-0.9218,0],[-0.4062,-0.9062,0],[-0.4062,-0.8906,0],[-0.4062,-0.875,0],[-0.4062,-0.8594,0],[-0.4062,-0.8438,0],[-0.4062,-0.8282,0],[-0.4062,-0.8124,0],[-0.4062,-0.7968,0],[-0.4062,-0.7812,0],[-0.4062,-0.7656,0],[-0.4062,-0.75,0],[-0.4062,-0.7344,0],[-0.4062,-0.7188,0],[-0.4062,-0.7032,0],[-0.4062,-0.6876,0],[-0.4062,-0.6718,0],[-0.4062,-0.6562,0],[-0.4062,-0.6406,0],[-0.4062,-0.625,0],[-0.4062,-0.6094,0],[-0.4062,-0.5938,0],[-0.4062,-0.5782,0],[-0.4062,-0.5624,0],[-0.4062,-0.5468,0],[-0.4062,-0.5312,0],[-0.4062,-0.5156,0],[-0.4062,-0.5,0],[-0.4062,-0.4844,0],[-0.4062,-0.4688,0],[-0.4062,-0.4532,0],[-0.4062,-0.4376,0],[-0.4062,-0.4218,0],[-0.4062,-0.4062,0],[-0.4062,-0.3906,0],[-0.4062,-0.375,0],[-0.4062,-0.3594,0],[-0.4062,-0.3438,0],[-0.4062,-0.3282,0],[-0.4062,-0.3124,0],[-0.4062,-0.2968,0],[-0.4062,-0.2812,0],[-0.4062,-0.2656,0],[-0.4062,-0.25,0],[-0.4062,-0.2344,0],[-0.4062,-0.2188,0],[-0.4062,-0.2032,0],[-0.4062,-0.1876,0],[-0.4062,-0.1718,0],[-0.4062,-0.1562,0],[-0.4062,-0.1406,0],[-0.4062,-0.125,0],[-0.4062,-0.1094,0],[-0.4062,-0.0938,0],[-0.4062,-0.0782,0],[-0.4062,-0.0624,0],[-0.4062,-0.0468,0],[-0.4062,-0.0312,0],[-0.4062,-0.0156,0],[-0.4062,0,0],[-0.4062,0.0156,0],[-0.4062,0.0312,0],[-0.4062,0.0468,0],[-0.4062,0.0624,0],[-0.4062,0.0782,0],[-0.4062,0.0938,0],[-0.4062,0.1094,0],[-0.4062,0.125,0],[-0.4062,0.1406,0],[-0.4062,0.1562,0],[-0.4062,0.1718,0],[-0.4062,0.1876,0],[-0.4062,0.2032,0],[-0.4062,0.2188,0],[-0.4062,0.2344,0],[-0.4062,0.25,0],[-0.4062,0.2656,0],[-0.4062,0.2812,0],[-0.4062,0.2968,0],[-0.4062,0.3124,0],[-0.4062,0.3282,0],[-0.4062,0.3438,0],[-0.4062,0.3594,0],[-0.4062,0.375,0],[-0.4062,0.3906,0],[-0.4062,0.4062,0],[-0.4062,0.4218,0],[-0.4062,0.4376,0],[-0.4062,0.4532,0],[-0.4062,0.4688,0],[-0.4062,0.4844,0],[-0.4062,0.5,0],[-0.4062,0.5156,0],[-0.4062,0.5312,0],[-0.4062,0.5468,0],[-0.4062,0.5624,0],[-0.4062,0.5782,0],[-0.4062,0.5938,0],[-0.4062,0.6094,0],[-0.4062,0.625,0],[-0.4062,0.6406,0],[-0.4062,0.6562,0],[-0.4062,0.6718,0],[-0.4062,0.6876,0],[-0.4062,0.7032,0],[-0.4062,0.7188,0],[-0.4062,0.7344,0],[-0.4062,0.75,0],[-0.4062,0.7656,0],[-0.4062,0.7812,0],[-0.4062,0.7968,0],[-0.4062,0.8124,0],[-0.4062,0.8282,0],[-0.4062,0.8438,0],[-0.4062,0.8594,0],[-0.4062,0.875,0],[-0.4062,0.8906,0],[-0.4062,0.9062,0],[-0.4062,0.9218,0],[-0.4062,0.9376,0],[-0.4062,0.9532,0],[-0.4062,0.9688,0],[-0.4062,0.9844,0],[-0.3906,-1,0],[-0.3906,-0.9844,0],[-0.3906,-0.9688,0],[-0.3906,-0.9532,0],[-0.3906,-0.9376,0],[-0.3906,-0.9218,0],[-0.3906,-0.9062,0],[-0.3906,-0.8906,0],[-0.3906,-0.875,0],[-0.3906,-0.8594,0],[-0.3906,-0.8438,0],[-0.3906,-0.8282,0],[-0.3906,-0.8124,0],[-0.3906,-0.7968,0],[-0.3906,-0.7812,0],[-0.3906,-0.7656,0],[-0.3906,-0.75,0],[-0.3906,-0.7344,0],[-0.3906,-0.7188,0],[-0.3906,-0.7032,0],[-0.3906,-0.6876,0],[-0.3906,-0.6718,0],[-0.3906,-0.6562,0],[-0.3906,-0.6406,0],[-0.3906,-0.625,0],[-0.3906,-0.6094,0],[-0.3906,-0.5938,0],[-0.3906,-0.5782,0],[-0.3906,-0.5624,0],[-0.3906,-0.5468,0],[-0.3906,-0.5312,0],[-0.3906,-0.5156,0],[-0.3906,-0.5,0],[-0.3906,-0.4844,0],[-0.3906,-0.4688,0],[-0.3906,-0.4532,0],[-0.3906,-0.4376,0],[-0.3906,-0.4218,0],[-0.3906,-0.4062,0],[-0.3906,-0.3906,0],[-0.3906,-0.375,0],[-0.3906,-0.3594,0],[-0.3906,-0.3438,0],[-0.3906,-0.3282,0],[-0.3906,-0.3124,0],[-0.3906,-0.2968,0],[-0.3906,-0.2812,0],[-0.3906,-0.2656,0],[-0.3906,-0.25,0],[-0.3906,-0.2344,0],[-0.3906,-0.2188,0],[-0.3906,-0.2032,0],[-0.3906,-0.1876,0],[-0.3906,-0.1718,0],[-0.3906,-0.1562,0],[-0.3906,-0.1406,0],[-0.3906,-0.125,0],[-0.3906,-0.1094,0],[-0.3906,-0.0938,0],[-0.3906,-0.0782,0],[-0.3906,-0.0624,0],[-0.3906,-0.0468,0],[-0.3906,-0.0312,0],[-0.3906,-0.0156,0],[-0.3906,0,0],[-0.3906,0.0156,0],[-0.3906,0.0312,0],[-0.3906,0.0468,0],[-0.3906,0.0624,0],[-0.3906,0.0782,0],[-0.3906,0.0938,0],[-0.3906,0.1094,0],[-0.3906,0.125,0],[-0.3906,0.1406,0],[-0.3906,0.1562,0],[-0.3906,0.1718,0],[-0.3906,0.1876,0],[-0.3906,0.2032,0],[-0.3906,0.2188,0],[-0.3906,0.2344,0],[-0.3906,0.25,0],[-0.3906,0.2656,0],[-0.3906,0.2812,0],[-0.3906,0.2968,0],[-0.3906,0.3124,0],[-0.3906,0.3282,0],[-0.3906,0.3438,0],[-0.3906,0.3594,0],[-0.3906,0.375,0],[-0.3906,0.3906,0],[-0.3906,0.4062,0],[-0.3906,0.4218,0],[-0.3906,0.4376,0],[-0.3906,0.4532,0],[-0.3906,0.4688,0],[-0.3906,0.4844,0],[-0.3906,0.5,0],[-0.3906,0.5156,0],[-0.3906,0.5312,0],[-0.3906,0.5468,0],[-0.3906,0.5624,0],[-0.3906,0.5782,0],[-0.3906,0.5938,0],[-0.3906,0.6094,0],[-0.3906,0.625,0],[-0.3906,0.6406,0],[-0.3906,0.6562,0],[-0.3906,0.6718,0],[-0.3906,0.6876,0],[-0.3906,0.7032,0],[-0.3906,0.7188,0],[-0.3906,0.7344,0],[-0.3906,0.75,0],[-0.3906,0.7656,0],[-0.3906,0.7812,0],[-0.3906,0.7968,0],[-0.3906,0.8124,0],[-0.3906,0.8282,0],[-0.3906,0.8438,0],[-0.3906,0.8594,0],[-0.3906,0.875,0],[-0.3906,0.8906,0],[-0.3906,0.9062,0],[-0.3906,0.9218,0],[-0.3906,0.9376,0],[-0.3906,0.9532,0],[-0.3906,0.9688,0],[-0.3906,0.9844,0],[-0.375,-1,0],[-0.375,-0.9844,0],[-0.375,-0.9688,0],[-0.375,-0.9532,0],[-0.375,-0.9376,0],[-0.375,-0.9218,0],[-0.375,-0.9062,0],[-0.375,-0.8906,0],[-0.375,-0.875,0],[-0.375,-0.8594,0],[-0.375,-0.8438,0],[-0.375,-0.8282,0],[-0.375,-0.8124,0],[-0.375,-0.7968,0],[-0.375,-0.7812,0],[-0.375,-0.7656,0],[-0.375,-0.75,0],[-0.375,-0.7344,0],[-0.375,-0.7188,0],[-0.375,-0.7032,0],[-0.375,-0.6876,0],[-0.375,-0.6718,0],[-0.375,-0.6562,0],[-0.375,-0.6406,0],[-0.375,-0.625,0],[-0.375,-0.6094,0],[-0.375,-0.5938,0],[-0.375,-0.5782,0],[-0.375,-0.5624,0],[-0.375,-0.5468,0],[-0.375,-0.5312,0],[-0.375,-0.5156,0],[-0.375,-0.5,0],[-0.375,-0.4844,0],[-0.375,-0.4688,0],[-0.375,-0.4532,0],[-0.375,-0.4376,0],[-0.375,-0.4218,0],[-0.375,-0.4062,0],[-0.375,-0.3906,0],[-0.375,-0.375,0],[-0.375,-0.3594,0],[-0.375,-0.3438,0],[-0.375,-0.3282,0],[-0.375,-0.3124,0],[-0.375,-0.2968,0],[-0.375,-0.2812,0],[-0.375,-0.2656,0],[-0.375,-0.25,0],[-0.375,-0.2344,0],[-0.375,-0.2188,0],[-0.375,-0.2032,0],[-0.375,-0.1876,0],[-0.375,-0.1718,0],[-0.375,-0.1562,0],[-0.375,-0.1406,0],[-0.375,-0.125,0],[-0.375,-0.1094,0],[-0.375,-0.0938,0],[-0.375,-0.0782,0],[-0.375,-0.0624,0],[-0.375,-0.0468,0],[-0.375,-0.0312,0],[-0.375,-0.0156,0],[-0.375,0,0],[-0.375,0.0156,0],[-0.375,0.0312,0],[-0.375,0.0468,0],[-0.375,0.0624,0],[-0.375,0.0782,0],[-0.375,0.0938,0],[-0.375,0.1094,0],[-0.375,0.125,0],[-0.375,0.1406,0],[-0.375,0.1562,0],[-0.375,0.1718,0],[-0.375,0.1876,0],[-0.375,0.2032,0],[-0.375,0.2188,0],[-0.375,0.2344,0],[-0.375,0.25,0],[-0.375,0.2656,0],[-0.375,0.2812,0],[-0.375,0.2968,0],[-0.375,0.3124,0],[-0.375,0.3282,0],[-0.375,0.3438,0],[-0.375,0.3594,0],[-0.375,0.375,0],[-0.375,0.3906,0],[-0.375,0.4062,0],[-0.375,0.4218,0],[-0.375,0.4376,0],[-0.375,0.4532,0],[-0.375,0.4688,0],[-0.375,0.4844,0],[-0.375,0.5,0],[-0.375,0.5156,0],[-0.375,0.5312,0],[-0.375,0.5468,0],[-0.375,0.5624,0],[-0.375,0.5782,0],[-0.375,0.5938,0],[-0.375,0.6094,0],[-0.375,0.625,0],[-0.375,0.6406,0],[-0.375,0.6562,0],[-0.375,0.6718,0],[-0.375,0.6876,0],[-0.375,0.7032,0],[-0.375,0.7188,0],[-0.375,0.7344,0],[-0.375,0.75,0],[-0.375,0.7656,0],[-0.375,0.7812,0],[-0.375,0.7968,0],[-0.375,0.8124,0],[-0.375,0.8282,0],[-0.375,0.8438,0],[-0.375,0.8594,0],[-0.375,0.875,0],[-0.375,0.8906,0],[-0.375,0.9062,0],[-0.375,0.9218,0],[-0.375,0.9376,0],[-0.375,0.9532,0],[-0.375,0.9688,0],[-0.375,0.9844,0],[-0.3594,-1,0],[-0.3594,-0.9844,0],[-0.3594,-0.9688,0],[-0.3594,-0.9532,0],[-0.3594,-0.9376,0],[-0.3594,-0.9218,0],[-0.3594,-0.9062,0],[-0.3594,-0.8906,0],[-0.3594,-0.875,0],[-0.3594,-0.8594,0],[-0.3594,-0.8438,0],[-0.3594,-0.8282,0],[-0.3594,-0.8124,0],[-0.3594,-0.7968,0],[-0.3594,-0.7812,0],[-0.3594,-0.7656,0],[-0.3594,-0.75,0],[-0.3594,-0.7344,0],[-0.3594,-0.7188,0],[-0.3594,-0.7032,0],[-0.3594,-0.6876,0],[-0.3594,-0.6718,0],[-0.3594,-0.6562,0],[-0.3594,-0.6406,0],[-0.3594,-0.625,0],[-0.3594,-0.6094,0],[-0.3594,-0.5938,0],[-0.3594,-0.5782,0],[-0.3594,-0.5624,0],[-0.3594,-0.5468,0],[-0.3594,-0.5312,0],[-0.3594,-0.5156,0],[-0.3594,-0.5,0],[-0.3594,-0.4844,0],[-0.3594,-0.4688,0],[-0.3594,-0.4532,0],[-0.3594,-0.4376,0],[-0.3594,-0.4218,0],[-0.3594,-0.4062,0],[-0.3594,-0.3906,0],[-0.3594,-0.375,0],[-0.3594,-0.3594,0],[-0.3594,-0.3438,0],[-0.3594,-0.3282,0],[-0.3594,-0.3124,0],[-0.3594,-0.2968,0],[-0.3594,-0.2812,0],[-0.3594,-0.2656,0],[-0.3594,-0.25,0],[-0.3594,-0.2344,0],[-0.3594,-0.2188,0],[-0.3594,-0.2032,0],[-0.3594,-0.1876,0],[-0.3594,-0.1718,0],[-0.3594,-0.1562,0],[-0.3594,-0.1406,0],[-0.3594,-0.125,0],[-0.3594,-0.1094,0],[-0.3594,-0.0938,0],[-0.3594,-0.0782,0],[-0.3594,-0.0624,0],[-0.3594,-0.0468,0],[-0.3594,-0.0312,0],[-0.3594,-0.0156,0],[-0.3594,0,0],[-0.3594,0.0156,0],[-0.3594,0.0312,0],[-0.3594,0.0468,0],[-0.3594,0.0624,0],[-0.3594,0.0782,0],[-0.3594,0.0938,0],[-0.3594,0.1094,0],[-0.3594,0.125,0],[-0.3594,0.1406,0],[-0.3594,0.1562,0],[-0.3594,0.1718,0],[-0.3594,0.1876,0],[-0.3594,0.2032,0],[-0.3594,0.2188,0],[-0.3594,0.2344,0],[-0.3594,0.25,0],[-0.3594,0.2656,0],[-0.3594,0.2812,0],[-0.3594,0.2968,0],[-0.3594,0.3124,0],[-0.3594,0.3282,0],[-0.3594,0.3438,0],[-0.3594,0.3594,0],[-0.3594,0.375,0],[-0.3594,0.3906,0],[-0.3594,0.4062,0],[-0.3594,0.4218,0],[-0.3594,0.4376,0],[-0.3594,0.4532,0],[-0.3594,0.4688,0],[-0.3594,0.4844,0],[-0.3594,0.5,0],[-0.3594,0.5156,0],[-0.3594,0.5312,0],[-0.3594,0.5468,0],[-0.3594,0.5624,0],[-0.3594,0.5782,0],[-0.3594,0.5938,0],[-0.3594,0.6094,0],[-0.3594,0.625,0],[-0.3594,0.6406,0],[-0.3594,0.6562,0],[-0.3594,0.6718,0],[-0.3594,0.6876,0],[-0.3594,0.7032,0],[-0.3594,0.7188,0],[-0.3594,0.7344,0],[-0.3594,0.75,0],[-0.3594,0.7656,0],[-0.3594,0.7812,0],[-0.3594,0.7968,0],[-0.3594,0.8124,0],[-0.3594,0.8282,0],[-0.3594,0.8438,0],[-0.3594,0.8594,0],[-0.3594,0.875,0],[-0.3594,0.8906,0],[-0.3594,0.9062,0],[-0.3594,0.9218,0],[-0.3594,0.9376,0],[-0.3594,0.9532,0],[-0.3594,0.9688,0],[-0.3594,0.9844,0],[-0.3438,-1,0],[-0.3438,-0.9844,0],[-0.3438,-0.9688,0],[-0.3438,-0.9532,0],[-0.3438,-0.9376,0],[-0.3438,-0.9218,0],[-0.3438,-0.9062,0],[-0.3438,-0.8906,0],[-0.3438,-0.875,0],[-0.3438,-0.8594,0],[-0.3438,-0.8438,0],[-0.3438,-0.8282,0],[-0.3438,-0.8124,0],[-0.3438,-0.7968,0],[-0.3438,-0.7812,0],[-0.3438,-0.7656,0],[-0.3438,-0.75,0],[-0.3438,-0.7344,0],[-0.3438,-0.7188,0],[-0.3438,-0.7032,0],[-0.3438,-0.6876,0],[-0.3438,-0.6718,0],[-0.3438,-0.6562,0],[-0.3438,-0.6406,0],[-0.3438,-0.625,0],[-0.3438,-0.6094,0],[-0.3438,-0.5938,0],[-0.3438,-0.5782,0],[-0.3438,-0.5624,0],[-0.3438,-0.5468,0],[-0.3438,-0.5312,0],[-0.3438,-0.5156,0],[-0.3438,-0.5,0],[-0.3438,-0.4844,0],[-0.3438,-0.4688,0],[-0.3438,-0.4532,0],[-0.3438,-0.4376,0],[-0.3438,-0.4218,0],[-0.3438,-0.4062,0],[-0.3438,-0.3906,0],[-0.3438,-0.375,0],[-0.3438,-0.3594,0],[-0.3438,-0.3438,0],[-0.3438,-0.3282,0],[-0.3438,-0.3124,0],[-0.3438,-0.2968,0],[-0.3438,-0.2812,0],[-0.3438,-0.2656,0],[-0.3438,-0.25,0],[-0.3438,-0.2344,0],[-0.3438,-0.2188,0],[-0.3438,-0.2032,0],[-0.3438,-0.1876,0],[-0.3438,-0.1718,0],[-0.3438,-0.1562,0],[-0.3438,-0.1406,0],[-0.3438,-0.125,0],[-0.3438,-0.1094,0],[-0.3438,-0.0938,0],[-0.3438,-0.0782,0],[-0.3438,-0.0624,0],[-0.3438,-0.0468,0],[-0.3438,-0.0312,0],[-0.3438,-0.0156,0],[-0.3438,0,0],[-0.3438,0.0156,0],[-0.3438,0.0312,0],[-0.3438,0.0468,0],[-0.3438,0.0624,0],[-0.3438,0.0782,0],[-0.3438,0.0938,0],[-0.3438,0.1094,0],[-0.3438,0.125,0],[-0.3438,0.1406,0],[-0.3438,0.1562,0],[-0.3438,0.1718,0],[-0.3438,0.1876,0],[-0.3438,0.2032,0],[-0.3438,0.2188,0],[-0.3438,0.2344,0],[-0.3438,0.25,0],[-0.3438,0.2656,0],[-0.3438,0.2812,0],[-0.3438,0.2968,0],[-0.3438,0.3124,0],[-0.3438,0.3282,0],[-0.3438,0.3438,0],[-0.3438,0.3594,0],[-0.3438,0.375,0],[-0.3438,0.3906,0],[-0.3438,0.4062,0],[-0.3438,0.4218,0],[-0.3438,0.4376,0],[-0.3438,0.4532,0],[-0.3438,0.4688,0],[-0.3438,0.4844,0],[-0.3438,0.5,0],[-0.3438,0.5156,0],[-0.3438,0.5312,0],[-0.3438,0.5468,0],[-0.3438,0.5624,0],[-0.3438,0.5782,0],[-0.3438,0.5938,0],[-0.3438,0.6094,0],[-0.3438,0.625,0],[-0.3438,0.6406,0],[-0.3438,0.6562,0],[-0.3438,0.6718,0],[-0.3438,0.6876,0],[-0.3438,0.7032,0],[-0.3438,0.7188,0],[-0.3438,0.7344,0],[-0.3438,0.75,0],[-0.3438,0.7656,0],[-0.3438,0.7812,0],[-0.3438,0.7968,0],[-0.3438,0.8124,0],[-0.3438,0.8282,0],[-0.3438,0.8438,0],[-0.3438,0.8594,0],[-0.3438,0.875,0],[-0.3438,0.8906,0],[-0.3438,0.9062,0],[-0.3438,0.9218,0],[-0.3438,0.9376,0],[-0.3438,0.9532,0],[-0.3438,0.9688,0],[-0.3438,0.9844,0],[-0.3282,-1,0],[-0.3282,-0.9844,0],[-0.3282,-0.9688,0],[-0.3282,-0.9532,0],[-0.3282,-0.9376,0],[-0.3282,-0.9218,0],[-0.3282,-0.9062,0],[-0.3282,-0.8906,0],[-0.3282,-0.875,0],[-0.3282,-0.8594,0],[-0.3282,-0.8438,0],[-0.3282,-0.8282,0],[-0.3282,-0.8124,0],[-0.3282,-0.7968,0],[-0.3282,-0.7812,0],[-0.3282,-0.7656,0],[-0.3282,-0.75,0],[-0.3282,-0.7344,0],[-0.3282,-0.7188,0],[-0.3282,-0.7032,0],[-0.3282,-0.6876,0],[-0.3282,-0.6718,0],[-0.3282,-0.6562,0],[-0.3282,-0.6406,0],[-0.3282,-0.625,0],[-0.3282,-0.6094,0],[-0.3282,-0.5938,0],[-0.3282,-0.5782,0],[-0.3282,-0.5624,0],[-0.3282,-0.5468,0],[-0.3282,-0.5312,0],[-0.3282,-0.5156,0],[-0.3282,-0.5,0],[-0.3282,-0.4844,0],[-0.3282,-0.4688,0],[-0.3282,-0.4532,0],[-0.3282,-0.4376,0],[-0.3282,-0.4218,0],[-0.3282,-0.4062,0],[-0.3282,-0.3906,0],[-0.3282,-0.375,0],[-0.3282,-0.3594,0],[-0.3282,-0.3438,0],[-0.3282,-0.3282,0],[-0.3282,-0.3124,0],[-0.3282,-0.2968,0],[-0.3282,-0.2812,0],[-0.3282,-0.2656,0],[-0.3282,-0.25,0],[-0.3282,-0.2344,0],[-0.3282,-0.2188,0],[-0.3282,-0.2032,0],[-0.3282,-0.1876,0],[-0.3282,-0.1718,0],[-0.3282,-0.1562,0],[-0.3282,-0.1406,0],[-0.3282,-0.125,0],[-0.3282,-0.1094,0],[-0.3282,-0.0938,0],[-0.3282,-0.0782,0],[-0.3282,-0.0624,0],[-0.3282,-0.0468,0],[-0.3282,-0.0312,0],[-0.3282,-0.0156,0],[-0.3282,0,0],[-0.3282,0.0156,0],[-0.3282,0.0312,0],[-0.3282,0.0468,0],[-0.3282,0.0624,0],[-0.3282,0.0782,0],[-0.3282,0.0938,0],[-0.3282,0.1094,0],[-0.3282,0.125,0],[-0.3282,0.1406,0],[-0.3282,0.1562,0],[-0.3282,0.1718,0],[-0.3282,0.1876,0],[-0.3282,0.2032,0],[-0.3282,0.2188,0],[-0.3282,0.2344,0],[-0.3282,0.25,0],[-0.3282,0.2656,0],[-0.3282,0.2812,0],[-0.3282,0.2968,0],[-0.3282,0.3124,0],[-0.3282,0.3282,0],[-0.3282,0.3438,0],[-0.3282,0.3594,0],[-0.3282,0.375,0],[-0.3282,0.3906,0],[-0.3282,0.4062,0],[-0.3282,0.4218,0],[-0.3282,0.4376,0],[-0.3282,0.4532,0],[-0.3282,0.4688,0],[-0.3282,0.4844,0],[-0.3282,0.5,0],[-0.3282,0.5156,0],[-0.3282,0.5312,0],[-0.3282,0.5468,0],[-0.3282,0.5624,0],[-0.3282,0.5782,0],[-0.3282,0.5938,0],[-0.3282,0.6094,0],[-0.3282,0.625,0],[-0.3282,0.6406,0],[-0.3282,0.6562,0],[-0.3282,0.6718,0],[-0.3282,0.6876,0],[-0.3282,0.7032,0],[-0.3282,0.7188,0],[-0.3282,0.7344,0],[-0.3282,0.75,0],[-0.3282,0.7656,0],[-0.3282,0.7812,0],[-0.3282,0.7968,0],[-0.3282,0.8124,0],[-0.3282,0.8282,0],[-0.3282,0.8438,0],[-0.3282,0.8594,0],[-0.3282,0.875,0],[-0.3282,0.8906,0],[-0.3282,0.9062,0],[-0.3282,0.9218,0],[-0.3282,0.9376,0],[-0.3282,0.9532,0],[-0.3282,0.9688,0],[-0.3282,0.9844,0],[-0.3124,-1,0],[-0.3124,-0.9844,0],[-0.3124,-0.9688,0],[-0.3124,-0.9532,0],[-0.3124,-0.9376,0],[-0.3124,-0.9218,0],[-0.3124,-0.9062,0],[-0.3124,-0.8906,0],[-0.3124,-0.875,0],[-0.3124,-0.8594,0],[-0.3124,-0.8438,0],[-0.3124,-0.8282,0],[-0.3124,-0.8124,0],[-0.3124,-0.7968,0],[-0.3124,-0.7812,0],[-0.3124,-0.7656,0],[-0.3124,-0.75,0],[-0.3124,-0.7344,0],[-0.3124,-0.7188,0],[-0.3124,-0.7032,0],[-0.3124,-0.6876,0],[-0.3124,-0.6718,0],[-0.3124,-0.6562,0],[-0.3124,-0.6406,0],[-0.3124,-0.625,0],[-0.3124,-0.6094,0],[-0.3124,-0.5938,0],[-0.3124,-0.5782,0],[-0.3124,-0.5624,0],[-0.3124,-0.5468,0],[-0.3124,-0.5312,0],[-0.3124,-0.5156,0],[-0.3124,-0.5,0],[-0.3124,-0.4844,0],[-0.3124,-0.4688,0],[-0.3124,-0.4532,0],[-0.3124,-0.4376,0],[-0.3124,-0.4218,0],[-0.3124,-0.4062,0],[-0.3124,-0.3906,0],[-0.3124,-0.375,0],[-0.3124,-0.3594,0],[-0.3124,-0.3438,0],[-0.3124,-0.3282,0],[-0.3124,-0.3124,0],[-0.3124,-0.2968,0],[-0.3124,-0.2812,0],[-0.3124,-0.2656,0],[-0.3124,-0.25,0],[-0.3124,-0.2344,0],[-0.3124,-0.2188,0],[-0.3124,-0.2032,0],[-0.3124,-0.1876,0],[-0.3124,-0.1718,0],[-0.3124,-0.1562,0],[-0.3124,-0.1406,0],[-0.3124,-0.125,0],[-0.3124,-0.1094,0],[-0.3124,-0.0938,0],[-0.3124,-0.0782,0],[-0.3124,-0.0624,0],[-0.3124,-0.0468,0],[-0.3124,-0.0312,0],[-0.3124,-0.0156,0],[-0.3124,0,0],[-0.3124,0.0156,0],[-0.3124,0.0312,0],[-0.3124,0.0468,0],[-0.3124,0.0624,0],[-0.3124,0.0782,0],[-0.3124,0.0938,0],[-0.3124,0.1094,0],[-0.3124,0.125,0],[-0.3124,0.1406,0],[-0.3124,0.1562,0],[-0.3124,0.1718,0],[-0.3124,0.1876,0],[-0.3124,0.2032,0],[-0.3124,0.2188,0],[-0.3124,0.2344,0],[-0.3124,0.25,0],[-0.3124,0.2656,0],[-0.3124,0.2812,0],[-0.3124,0.2968,0],[-0.3124,0.3124,0],[-0.3124,0.3282,0],[-0.3124,0.3438,0],[-0.3124,0.3594,0],[-0.3124,0.375,0],[-0.3124,0.3906,0],[-0.3124,0.4062,0],[-0.3124,0.4218,0],[-0.3124,0.4376,0],[-0.3124,0.4532,0],[-0.3124,0.4688,0],[-0.3124,0.4844,0],[-0.3124,0.5,0],[-0.3124,0.5156,0],[-0.3124,0.5312,0],[-0.3124,0.5468,0],[-0.3124,0.5624,0],[-0.3124,0.5782,0],[-0.3124,0.5938,0],[-0.3124,0.6094,0],[-0.3124,0.625,0],[-0.3124,0.6406,0],[-0.3124,0.6562,0],[-0.3124,0.6718,0],[-0.3124,0.6876,0],[-0.3124,0.7032,0],[-0.3124,0.7188,0],[-0.3124,0.7344,0],[-0.3124,0.75,0],[-0.3124,0.7656,0],[-0.3124,0.7812,0],[-0.3124,0.7968,0],[-0.3124,0.8124,0],[-0.3124,0.8282,0],[-0.3124,0.8438,0],[-0.3124,0.8594,0],[-0.3124,0.875,0],[-0.3124,0.8906,0],[-0.3124,0.9062,0],[-0.3124,0.9218,0],[-0.3124,0.9376,0],[-0.3124,0.9532,0],[-0.3124,0.9688,0],[-0.3124,0.9844,0],[-0.2968,-1,0],[-0.2968,-0.9844,0],[-0.2968,-0.9688,0],[-0.2968,-0.9532,0],[-0.2968,-0.9376,0],[-0.2968,-0.9218,0],[-0.2968,-0.9062,0],[-0.2968,-0.8906,0],[-0.2968,-0.875,0],[-0.2968,-0.8594,0],[-0.2968,-0.8438,0],[-0.2968,-0.8282,0],[-0.2968,-0.8124,0],[-0.2968,-0.7968,0],[-0.2968,-0.7812,0],[-0.2968,-0.7656,0],[-0.2968,-0.75,0],[-0.2968,-0.7344,0],[-0.2968,-0.7188,0],[-0.2968,-0.7032,0],[-0.2968,-0.6876,0],[-0.2968,-0.6718,0],[-0.2968,-0.6562,0],[-0.2968,-0.6406,0],[-0.2968,-0.625,0],[-0.2968,-0.6094,0],[-0.2968,-0.5938,0],[-0.2968,-0.5782,0],[-0.2968,-0.5624,0],[-0.2968,-0.5468,0],[-0.2968,-0.5312,0],[-0.2968,-0.5156,0],[-0.2968,-0.5,0],[-0.2968,-0.4844,0],[-0.2968,-0.4688,0],[-0.2968,-0.4532,0],[-0.2968,-0.4376,0],[-0.2968,-0.4218,0],[-0.2968,-0.4062,0],[-0.2968,-0.3906,0],[-0.2968,-0.375,0],[-0.2968,-0.3594,0],[-0.2968,-0.3438,0],[-0.2968,-0.3282,0],[-0.2968,-0.3124,0],[-0.2968,-0.2968,0],[-0.2968,-0.2812,0],[-0.2968,-0.2656,0],[-0.2968,-0.25,0],[-0.2968,-0.2344,0],[-0.2968,-0.2188,0],[-0.2968,-0.2032,0],[-0.2968,-0.1876,0],[-0.2968,-0.1718,0],[-0.2968,-0.1562,0],[-0.2968,-0.1406,0],[-0.2968,-0.125,0],[-0.2968,-0.1094,0],[-0.2968,-0.0938,0],[-0.2968,-0.0782,0],[-0.2968,-0.0624,0],[-0.2968,-0.0468,0],[-0.2968,-0.0312,0],[-0.2968,-0.0156,0],[-0.2968,0,0],[-0.2968,0.0156,0],[-0.2968,0.0312,0],[-0.2968,0.0468,0],[-0.2968,0.0624,0],[-0.2968,0.0782,0],[-0.2968,0.0938,0],[-0.2968,0.1094,0],[-0.2968,0.125,0],[-0.2968,0.1406,0],[-0.2968,0.1562,0],[-0.2968,0.1718,0],[-0.2968,0.1876,0],[-0.2968,0.2032,0],[-0.2968,0.2188,0],[-0.2968,0.2344,0],[-0.2968,0.25,0],[-0.2968,0.2656,0],[-0.2968,0.2812,0],[-0.2968,0.2968,0],[-0.2968,0.3124,0],[-0.2968,0.3282,0],[-0.2968,0.3438,0],[-0.2968,0.3594,0],[-0.2968,0.375,0],[-0.2968,0.3906,0],[-0.2968,0.4062,0],[-0.2968,0.4218,0],[-0.2968,0.4376,0],[-0.2968,0.4532,0],[-0.2968,0.4688,0],[-0.2968,0.4844,0],[-0.2968,0.5,0],[-0.2968,0.5156,0],[-0.2968,0.5312,0],[-0.2968,0.5468,0],[-0.2968,0.5624,0],[-0.2968,0.5782,0],[-0.2968,0.5938,0],[-0.2968,0.6094,0],[-0.2968,0.625,0],[-0.2968,0.6406,0],[-0.2968,0.6562,0],[-0.2968,0.6718,0],[-0.2968,0.6876,0],[-0.2968,0.7032,0],[-0.2968,0.7188,0],[-0.2968,0.7344,0],[-0.2968,0.75,0],[-0.2968,0.7656,0],[-0.2968,0.7812,0],[-0.2968,0.7968,0],[-0.2968,0.8124,0],[-0.2968,0.8282,0],[-0.2968,0.8438,0],[-0.2968,0.8594,0],[-0.2968,0.875,0],[-0.2968,0.8906,0],[-0.2968,0.9062,0],[-0.2968,0.9218,0],[-0.2968,0.9376,0],[-0.2968,0.9532,0],[-0.2968,0.9688,0],[-0.2968,0.9844,0],[-0.2812,-1,0],[-0.2812,-0.9844,0],[-0.2812,-0.9688,0],[-0.2812,-0.9532,0],[-0.2812,-0.9376,0],[-0.2812,-0.9218,0],[-0.2812,-0.9062,0],[-0.2812,-0.8906,0],[-0.2812,-0.875,0],[-0.2812,-0.8594,0],[-0.2812,-0.8438,0],[-0.2812,-0.8282,0],[-0.2812,-0.8124,0],[-0.2812,-0.7968,0],[-0.2812,-0.7812,0],[-0.2812,-0.7656,0],[-0.2812,-0.75,0],[-0.2812,-0.7344,0],[-0.2812,-0.7188,0],[-0.2812,-0.7032,0],[-0.2812,-0.6876,0],[-0.2812,-0.6718,0],[-0.2812,-0.6562,0],[-0.2812,-0.6406,0],[-0.2812,-0.625,0],[-0.2812,-0.6094,0],[-0.2812,-0.5938,0],[-0.2812,-0.5782,0],[-0.2812,-0.5624,0],[-0.2812,-0.5468,0],[-0.2812,-0.5312,0],[-0.2812,-0.5156,0],[-0.2812,-0.5,0],[-0.2812,-0.4844,0],[-0.2812,-0.4688,0],[-0.2812,-0.4532,0],[-0.2812,-0.4376,0],[-0.2812,-0.4218,0],[-0.2812,-0.4062,0],[-0.2812,-0.3906,0],[-0.2812,-0.375,0],[-0.2812,-0.3594,0],[-0.2812,-0.3438,0],[-0.2812,-0.3282,0],[-0.2812,-0.3124,0],[-0.2812,-0.2968,0],[-0.2812,-0.2812,0],[-0.2812,-0.2656,0],[-0.2812,-0.25,0],[-0.2812,-0.2344,0],[-0.2812,-0.2188,0],[-0.2812,-0.2032,0],[-0.2812,-0.1876,0],[-0.2812,-0.1718,0],[-0.2812,-0.1562,0],[-0.2812,-0.1406,0],[-0.2812,-0.125,0],[-0.2812,-0.1094,0],[-0.2812,-0.0938,0],[-0.2812,-0.0782,0],[-0.2812,-0.0624,0],[-0.2812,-0.0468,0],[-0.2812,-0.0312,0],[-0.2812,-0.0156,0],[-0.2812,0,0],[-0.2812,0.0156,0],[-0.2812,0.0312,0],[-0.2812,0.0468,0],[-0.2812,0.0624,0],[-0.2812,0.0782,0],[-0.2812,0.0938,0],[-0.2812,0.1094,0],[-0.2812,0.125,0],[-0.2812,0.1406,0],[-0.2812,0.1562,0],[-0.2812,0.1718,0],[-0.2812,0.1876,0],[-0.2812,0.2032,0],[-0.2812,0.2188,0],[-0.2812,0.2344,0],[-0.2812,0.25,0],[-0.2812,0.2656,0],[-0.2812,0.2812,0],[-0.2812,0.2968,0],[-0.2812,0.3124,0],[-0.2812,0.3282,0],[-0.2812,0.3438,0],[-0.2812,0.3594,0],[-0.2812,0.375,0],[-0.2812,0.3906,0],[-0.2812,0.4062,0],[-0.2812,0.4218,0],[-0.2812,0.4376,0],[-0.2812,0.4532,0],[-0.2812,0.4688,0],[-0.2812,0.4844,0],[-0.2812,0.5,0],[-0.2812,0.5156,0],[-0.2812,0.5312,0],[-0.2812,0.5468,0],[-0.2812,0.5624,0],[-0.2812,0.5782,0],[-0.2812,0.5938,0],[-0.2812,0.6094,0],[-0.2812,0.625,0],[-0.2812,0.6406,0],[-0.2812,0.6562,0],[-0.2812,0.6718,0],[-0.2812,0.6876,0],[-0.2812,0.7032,0],[-0.2812,0.7188,0],[-0.2812,0.7344,0],[-0.2812,0.75,0],[-0.2812,0.7656,0],[-0.2812,0.7812,0],[-0.2812,0.7968,0],[-0.2812,0.8124,0],[-0.2812,0.8282,0],[-0.2812,0.8438,0],[-0.2812,0.8594,0],[-0.2812,0.875,0],[-0.2812,0.8906,0],[-0.2812,0.9062,0],[-0.2812,0.9218,0],[-0.2812,0.9376,0],[-0.2812,0.9532,0],[-0.2812,0.9688,0],[-0.2812,0.9844,0],[-0.2656,-1,0],[-0.2656,-0.9844,0],[-0.2656,-0.9688,0],[-0.2656,-0.9532,0],[-0.2656,-0.9376,0],[-0.2656,-0.9218,0],[-0.2656,-0.9062,0],[-0.2656,-0.8906,0],[-0.2656,-0.875,0],[-0.2656,-0.8594,0],[-0.2656,-0.8438,0],[-0.2656,-0.8282,0],[-0.2656,-0.8124,0],[-0.2656,-0.7968,0],[-0.2656,-0.7812,0],[-0.2656,-0.7656,0],[-0.2656,-0.75,0],[-0.2656,-0.7344,0],[-0.2656,-0.7188,0],[-0.2656,-0.7032,0],[-0.2656,-0.6876,0],[-0.2656,-0.6718,0],[-0.2656,-0.6562,0],[-0.2656,-0.6406,0],[-0.2656,-0.625,0],[-0.2656,-0.6094,0],[-0.2656,-0.5938,0],[-0.2656,-0.5782,0],[-0.2656,-0.5624,0],[-0.2656,-0.5468,0],[-0.2656,-0.5312,0],[-0.2656,-0.5156,0],[-0.2656,-0.5,0],[-0.2656,-0.4844,0],[-0.2656,-0.4688,0],[-0.2656,-0.4532,0],[-0.2656,-0.4376,0],[-0.2656,-0.4218,0],[-0.2656,-0.4062,0],[-0.2656,-0.3906,0],[-0.2656,-0.375,0],[-0.2656,-0.3594,0],[-0.2656,-0.3438,0],[-0.2656,-0.3282,0],[-0.2656,-0.3124,0],[-0.2656,-0.2968,0],[-0.2656,-0.2812,0],[-0.2656,-0.2656,0],[-0.2656,-0.25,0],[-0.2656,-0.2344,0],[-0.2656,-0.2188,0],[-0.2656,-0.2032,0],[-0.2656,-0.1876,0],[-0.2656,-0.1718,0],[-0.2656,-0.1562,0],[-0.2656,-0.1406,0],[-0.2656,-0.125,0],[-0.2656,-0.1094,0],[-0.2656,-0.0938,0],[-0.2656,-0.0782,0],[-0.2656,-0.0624,0],[-0.2656,-0.0468,0],[-0.2656,-0.0312,0],[-0.2656,-0.0156,0],[-0.2656,0,0],[-0.2656,0.0156,0],[-0.2656,0.0312,0],[-0.2656,0.0468,0],[-0.2656,0.0624,0],[-0.2656,0.0782,0],[-0.2656,0.0938,0],[-0.2656,0.1094,0],[-0.2656,0.125,0],[-0.2656,0.1406,0],[-0.2656,0.1562,0],[-0.2656,0.1718,0],[-0.2656,0.1876,0],[-0.2656,0.2032,0],[-0.2656,0.2188,0],[-0.2656,0.2344,0],[-0.2656,0.25,0],[-0.2656,0.2656,0],[-0.2656,0.2812,0],[-0.2656,0.2968,0],[-0.2656,0.3124,0],[-0.2656,0.3282,0],[-0.2656,0.3438,0],[-0.2656,0.3594,0],[-0.2656,0.375,0],[-0.2656,0.3906,0],[-0.2656,0.4062,0],[-0.2656,0.4218,0],[-0.2656,0.4376,0],[-0.2656,0.4532,0],[-0.2656,0.4688,0],[-0.2656,0.4844,0],[-0.2656,0.5,0],[-0.2656,0.5156,0],[-0.2656,0.5312,0],[-0.2656,0.5468,0],[-0.2656,0.5624,0],[-0.2656,0.5782,0],[-0.2656,0.5938,0],[-0.2656,0.6094,0],[-0.2656,0.625,0],[-0.2656,0.6406,0],[-0.2656,0.6562,0],[-0.2656,0.6718,0],[-0.2656,0.6876,0],[-0.2656,0.7032,0],[-0.2656,0.7188,0],[-0.2656,0.7344,0],[-0.2656,0.75,0],[-0.2656,0.7656,0],[-0.2656,0.7812,0],[-0.2656,0.7968,0],[-0.2656,0.8124,0],[-0.2656,0.8282,0],[-0.2656,0.8438,0],[-0.2656,0.8594,0],[-0.2656,0.875,0],[-0.2656,0.8906,0],[-0.2656,0.9062,0],[-0.2656,0.9218,0],[-0.2656,0.9376,0],[-0.2656,0.9532,0],[-0.2656,0.9688,0],[-0.2656,0.9844,0],[-0.25,-1,0],[-0.25,-0.9844,0],[-0.25,-0.9688,0],[-0.25,-0.9532,0],[-0.25,-0.9376,0],[-0.25,-0.9218,0],[-0.25,-0.9062,0],[-0.25,-0.8906,0],[-0.25,-0.875,0],[-0.25,-0.8594,0],[-0.25,-0.8438,0],[-0.25,-0.8282,0],[-0.25,-0.8124,0],[-0.25,-0.7968,0],[-0.25,-0.7812,0],[-0.25,-0.7656,0],[-0.25,-0.75,0],[-0.25,-0.7344,0],[-0.25,-0.7188,0],[-0.25,-0.7032,0],[-0.25,-0.6876,0],[-0.25,-0.6718,0],[-0.25,-0.6562,0],[-0.25,-0.6406,0],[-0.25,-0.625,0],[-0.25,-0.6094,0],[-0.25,-0.5938,0],[-0.25,-0.5782,0],[-0.25,-0.5624,0],[-0.25,-0.5468,0],[-0.25,-0.5312,0],[-0.25,-0.5156,0],[-0.25,-0.5,0],[-0.25,-0.4844,0],[-0.25,-0.4688,0],[-0.25,-0.4532,0],[-0.25,-0.4376,0],[-0.25,-0.4218,0],[-0.25,-0.4062,0],[-0.25,-0.3906,0],[-0.25,-0.375,0],[-0.25,-0.3594,0],[-0.25,-0.3438,0],[-0.25,-0.3282,0],[-0.25,-0.3124,0],[-0.25,-0.2968,0],[-0.25,-0.2812,0],[-0.25,-0.2656,0],[-0.25,-0.25,0],[-0.25,-0.2344,0],[-0.25,-0.2188,0],[-0.25,-0.2032,0],[-0.25,-0.1876,0],[-0.25,-0.1718,0],[-0.25,-0.1562,0],[-0.25,-0.1406,0],[-0.25,-0.125,0],[-0.25,-0.1094,0],[-0.25,-0.0938,0],[-0.25,-0.0782,0],[-0.25,-0.0624,0],[-0.25,-0.0468,0],[-0.25,-0.0312,0],[-0.25,-0.0156,0],[-0.25,0,0],[-0.25,0.0156,0],[-0.25,0.0312,0],[-0.25,0.0468,0],[-0.25,0.0624,0],[-0.25,0.0782,0],[-0.25,0.0938,0],[-0.25,0.1094,0],[-0.25,0.125,0],[-0.25,0.1406,0],[-0.25,0.1562,0],[-0.25,0.1718,0],[-0.25,0.1876,0],[-0.25,0.2032,0],[-0.25,0.2188,0],[-0.25,0.2344,0],[-0.25,0.25,0],[-0.25,0.2656,0],[-0.25,0.2812,0],[-0.25,0.2968,0],[-0.25,0.3124,0],[-0.25,0.3282,0],[-0.25,0.3438,0],[-0.25,0.3594,0],[-0.25,0.375,0],[-0.25,0.3906,0],[-0.25,0.4062,0],[-0.25,0.4218,0],[-0.25,0.4376,0],[-0.25,0.4532,0],[-0.25,0.4688,0],[-0.25,0.4844,0],[-0.25,0.5,0],[-0.25,0.5156,0],[-0.25,0.5312,0],[-0.25,0.5468,0],[-0.25,0.5624,0],[-0.25,0.5782,0],[-0.25,0.5938,0],[-0.25,0.6094,0],[-0.25,0.625,0],[-0.25,0.6406,0],[-0.25,0.6562,0],[-0.25,0.6718,0],[-0.25,0.6876,0],[-0.25,0.7032,0],[-0.25,0.7188,0],[-0.25,0.7344,0],[-0.25,0.75,0],[-0.25,0.7656,0],[-0.25,0.7812,0],[-0.25,0.7968,0],[-0.25,0.8124,0],[-0.25,0.8282,0],[-0.25,0.8438,0],[-0.25,0.8594,0],[-0.25,0.875,0],[-0.25,0.8906,0],[-0.25,0.9062,0],[-0.25,0.9218,0],[-0.25,0.9376,0],[-0.25,0.9532,0],[-0.25,0.9688,0],[-0.25,0.9844,0],[-0.2344,-1,0],[-0.2344,-0.9844,0],[-0.2344,-0.9688,0],[-0.2344,-0.9532,0],[-0.2344,-0.9376,0],[-0.2344,-0.9218,0],[-0.2344,-0.9062,0],[-0.2344,-0.8906,0],[-0.2344,-0.875,0],[-0.2344,-0.8594,0],[-0.2344,-0.8438,0],[-0.2344,-0.8282,0],[-0.2344,-0.8124,0],[-0.2344,-0.7968,0],[-0.2344,-0.7812,0],[-0.2344,-0.7656,0],[-0.2344,-0.75,0],[-0.2344,-0.7344,0],[-0.2344,-0.7188,0],[-0.2344,-0.7032,0],[-0.2344,-0.6876,0],[-0.2344,-0.6718,0],[-0.2344,-0.6562,0],[-0.2344,-0.6406,0],[-0.2344,-0.625,0],[-0.2344,-0.6094,0],[-0.2344,-0.5938,0],[-0.2344,-0.5782,0],[-0.2344,-0.5624,0],[-0.2344,-0.5468,0],[-0.2344,-0.5312,0],[-0.2344,-0.5156,0],[-0.2344,-0.5,0],[-0.2344,-0.4844,0],[-0.2344,-0.4688,0],[-0.2344,-0.4532,0],[-0.2344,-0.4376,0],[-0.2344,-0.4218,0],[-0.2344,-0.4062,0],[-0.2344,-0.3906,0],[-0.2344,-0.375,0],[-0.2344,-0.3594,0],[-0.2344,-0.3438,0],[-0.2344,-0.3282,0],[-0.2344,-0.3124,0],[-0.2344,-0.2968,0],[-0.2344,-0.2812,0],[-0.2344,-0.2656,0],[-0.2344,-0.25,0],[-0.2344,-0.2344,0],[-0.2344,-0.2188,0],[-0.2344,-0.2032,0],[-0.2344,-0.1876,0],[-0.2344,-0.1718,0],[-0.2344,-0.1562,0],[-0.2344,-0.1406,0],[-0.2344,-0.125,0],[-0.2344,-0.1094,0],[-0.2344,-0.0938,0],[-0.2344,-0.0782,0],[-0.2344,-0.0624,0],[-0.2344,-0.0468,0],[-0.2344,-0.0312,0],[-0.2344,-0.0156,0],[-0.2344,0,0],[-0.2344,0.0156,0],[-0.2344,0.0312,0],[-0.2344,0.0468,0],[-0.2344,0.0624,0],[-0.2344,0.0782,0],[-0.2344,0.0938,0],[-0.2344,0.1094,0],[-0.2344,0.125,0],[-0.2344,0.1406,0],[-0.2344,0.1562,0],[-0.2344,0.1718,0],[-0.2344,0.1876,0],[-0.2344,0.2032,0],[-0.2344,0.2188,0],[-0.2344,0.2344,0],[-0.2344,0.25,0],[-0.2344,0.2656,0],[-0.2344,0.2812,0],[-0.2344,0.2968,0],[-0.2344,0.3124,0],[-0.2344,0.3282,0],[-0.2344,0.3438,0],[-0.2344,0.3594,0],[-0.2344,0.375,0],[-0.2344,0.3906,0],[-0.2344,0.4062,0],[-0.2344,0.4218,0],[-0.2344,0.4376,0],[-0.2344,0.4532,0],[-0.2344,0.4688,0],[-0.2344,0.4844,0],[-0.2344,0.5,0],[-0.2344,0.5156,0],[-0.2344,0.5312,0],[-0.2344,0.5468,0],[-0.2344,0.5624,0],[-0.2344,0.5782,0],[-0.2344,0.5938,0],[-0.2344,0.6094,0],[-0.2344,0.625,0],[-0.2344,0.6406,0],[-0.2344,0.6562,0],[-0.2344,0.6718,0],[-0.2344,0.6876,0],[-0.2344,0.7032,0],[-0.2344,0.7188,0],[-0.2344,0.7344,0],[-0.2344,0.75,0],[-0.2344,0.7656,0],[-0.2344,0.7812,0],[-0.2344,0.7968,0],[-0.2344,0.8124,0],[-0.2344,0.8282,0],[-0.2344,0.8438,0],[-0.2344,0.8594,0],[-0.2344,0.875,0],[-0.2344,0.8906,0],[-0.2344,0.9062,0],[-0.2344,0.9218,0],[-0.2344,0.9376,0],[-0.2344,0.9532,0],[-0.2344,0.9688,0],[-0.2344,0.9844,0],[-0.2188,-1,0],[-0.2188,-0.9844,0],[-0.2188,-0.9688,0],[-0.2188,-0.9532,0],[-0.2188,-0.9376,0],[-0.2188,-0.9218,0],[-0.2188,-0.9062,0],[-0.2188,-0.8906,0],[-0.2188,-0.875,0],[-0.2188,-0.8594,0],[-0.2188,-0.8438,0],[-0.2188,-0.8282,0],[-0.2188,-0.8124,0],[-0.2188,-0.7968,0],[-0.2188,-0.7812,0],[-0.2188,-0.7656,0],[-0.2188,-0.75,0],[-0.2188,-0.7344,0],[-0.2188,-0.7188,0],[-0.2188,-0.7032,0],[-0.2188,-0.6876,0],[-0.2188,-0.6718,0],[-0.2188,-0.6562,0],[-0.2188,-0.6406,0],[-0.2188,-0.625,0],[-0.2188,-0.6094,0],[-0.2188,-0.5938,0],[-0.2188,-0.5782,0],[-0.2188,-0.5624,0],[-0.2188,-0.5468,0],[-0.2188,-0.5312,0],[-0.2188,-0.5156,0],[-0.2188,-0.5,0],[-0.2188,-0.4844,0],[-0.2188,-0.4688,0],[-0.2188,-0.4532,0],[-0.2188,-0.4376,0],[-0.2188,-0.4218,0],[-0.2188,-0.4062,0],[-0.2188,-0.3906,0],[-0.2188,-0.375,0],[-0.2188,-0.3594,0],[-0.2188,-0.3438,0],[-0.2188,-0.3282,0],[-0.2188,-0.3124,0],[-0.2188,-0.2968,0],[-0.2188,-0.2812,0],[-0.2188,-0.2656,0],[-0.2188,-0.25,0],[-0.2188,-0.2344,0],[-0.2188,-0.2188,0],[-0.2188,-0.2032,0],[-0.2188,-0.1876,0],[-0.2188,-0.1718,0],[-0.2188,-0.1562,0],[-0.2188,-0.1406,0],[-0.2188,-0.125,0],[-0.2188,-0.1094,0],[-0.2188,-0.0938,0],[-0.2188,-0.0782,0],[-0.2188,-0.0624,0],[-0.2188,-0.0468,0],[-0.2188,-0.0312,0],[-0.2188,-0.0156,0],[-0.2188,0,0],[-0.2188,0.0156,0],[-0.2188,0.0312,0],[-0.2188,0.0468,0],[-0.2188,0.0624,0],[-0.2188,0.0782,0],[-0.2188,0.0938,0],[-0.2188,0.1094,0],[-0.2188,0.125,0],[-0.2188,0.1406,0],[-0.2188,0.1562,0],[-0.2188,0.1718,0],[-0.2188,0.1876,0],[-0.2188,0.2032,0],[-0.2188,0.2188,0],[-0.2188,0.2344,0],[-0.2188,0.25,0],[-0.2188,0.2656,0],[-0.2188,0.2812,0],[-0.2188,0.2968,0],[-0.2188,0.3124,0],[-0.2188,0.3282,0],[-0.2188,0.3438,0],[-0.2188,0.3594,0],[-0.2188,0.375,0],[-0.2188,0.3906,0],[-0.2188,0.4062,0],[-0.2188,0.4218,0],[-0.2188,0.4376,0],[-0.2188,0.4532,0],[-0.2188,0.4688,0],[-0.2188,0.4844,0],[-0.2188,0.5,0],[-0.2188,0.5156,0],[-0.2188,0.5312,0],[-0.2188,0.5468,0],[-0.2188,0.5624,0],[-0.2188,0.5782,0],[-0.2188,0.5938,0],[-0.2188,0.6094,0],[-0.2188,0.625,0],[-0.2188,0.6406,0],[-0.2188,0.6562,0],[-0.2188,0.6718,0],[-0.2188,0.6876,0],[-0.2188,0.7032,0],[-0.2188,0.7188,0],[-0.2188,0.7344,0],[-0.2188,0.75,0],[-0.2188,0.7656,0],[-0.2188,0.7812,0],[-0.2188,0.7968,0],[-0.2188,0.8124,0],[-0.2188,0.8282,0],[-0.2188,0.8438,0],[-0.2188,0.8594,0],[-0.2188,0.875,0],[-0.2188,0.8906,0],[-0.2188,0.9062,0],[-0.2188,0.9218,0],[-0.2188,0.9376,0],[-0.2188,0.9532,0],[-0.2188,0.9688,0],[-0.2188,0.9844,0],[-0.2032,-1,0],[-0.2032,-0.9844,0],[-0.2032,-0.9688,0],[-0.2032,-0.9532,0],[-0.2032,-0.9376,0],[-0.2032,-0.9218,0],[-0.2032,-0.9062,0],[-0.2032,-0.8906,0],[-0.2032,-0.875,0],[-0.2032,-0.8594,0],[-0.2032,-0.8438,0],[-0.2032,-0.8282,0],[-0.2032,-0.8124,0],[-0.2032,-0.7968,0],[-0.2032,-0.7812,0],[-0.2032,-0.7656,0],[-0.2032,-0.75,0],[-0.2032,-0.7344,0],[-0.2032,-0.7188,0],[-0.2032,-0.7032,0],[-0.2032,-0.6876,0],[-0.2032,-0.6718,0],[-0.2032,-0.6562,0],[-0.2032,-0.6406,0],[-0.2032,-0.625,0],[-0.2032,-0.6094,0],[-0.2032,-0.5938,0],[-0.2032,-0.5782,0],[-0.2032,-0.5624,0],[-0.2032,-0.5468,0],[-0.2032,-0.5312,0],[-0.2032,-0.5156,0],[-0.2032,-0.5,0],[-0.2032,-0.4844,0],[-0.2032,-0.4688,0],[-0.2032,-0.4532,0],[-0.2032,-0.4376,0],[-0.2032,-0.4218,0],[-0.2032,-0.4062,0],[-0.2032,-0.3906,0],[-0.2032,-0.375,0],[-0.2032,-0.3594,0],[-0.2032,-0.3438,0],[-0.2032,-0.3282,0],[-0.2032,-0.3124,0],[-0.2032,-0.2968,0],[-0.2032,-0.2812,0],[-0.2032,-0.2656,0],[-0.2032,-0.25,0],[-0.2032,-0.2344,0],[-0.2032,-0.2188,0],[-0.2032,-0.2032,0],[-0.2032,-0.1876,0],[-0.2032,-0.1718,0],[-0.2032,-0.1562,0],[-0.2032,-0.1406,0],[-0.2032,-0.125,0],[-0.2032,-0.1094,0],[-0.2032,-0.0938,0],[-0.2032,-0.0782,0],[-0.2032,-0.0624,0],[-0.2032,-0.0468,0],[-0.2032,-0.0312,0],[-0.2032,-0.0156,0],[-0.2032,0,0],[-0.2032,0.0156,0],[-0.2032,0.0312,0],[-0.2032,0.0468,0],[-0.2032,0.0624,0],[-0.2032,0.0782,0],[-0.2032,0.0938,0],[-0.2032,0.1094,0],[-0.2032,0.125,0],[-0.2032,0.1406,0],[-0.2032,0.1562,0],[-0.2032,0.1718,0],[-0.2032,0.1876,0],[-0.2032,0.2032,0],[-0.2032,0.2188,0],[-0.2032,0.2344,0],[-0.2032,0.25,0],[-0.2032,0.2656,0],[-0.2032,0.2812,0],[-0.2032,0.2968,0],[-0.2032,0.3124,0],[-0.2032,0.3282,0],[-0.2032,0.3438,0],[-0.2032,0.3594,0],[-0.2032,0.375,0],[-0.2032,0.3906,0],[-0.2032,0.4062,0],[-0.2032,0.4218,0],[-0.2032,0.4376,0],[-0.2032,0.4532,0],[-0.2032,0.4688,0],[-0.2032,0.4844,0],[-0.2032,0.5,0],[-0.2032,0.5156,0],[-0.2032,0.5312,0],[-0.2032,0.5468,0],[-0.2032,0.5624,0],[-0.2032,0.5782,0],[-0.2032,0.5938,0],[-0.2032,0.6094,0],[-0.2032,0.625,0],[-0.2032,0.6406,0],[-0.2032,0.6562,0],[-0.2032,0.6718,0],[-0.2032,0.6876,0],[-0.2032,0.7032,0],[-0.2032,0.7188,0],[-0.2032,0.7344,0],[-0.2032,0.75,0],[-0.2032,0.7656,0],[-0.2032,0.7812,0],[-0.2032,0.7968,0],[-0.2032,0.8124,0],[-0.2032,0.8282,0],[-0.2032,0.8438,0],[-0.2032,0.8594,0],[-0.2032,0.875,0],[-0.2032,0.8906,0],[-0.2032,0.9062,0],[-0.2032,0.9218,0],[-0.2032,0.9376,0],[-0.2032,0.9532,0],[-0.2032,0.9688,0],[-0.2032,0.9844,0],[-0.1876,-1,0],[-0.1876,-0.9844,0],[-0.1876,-0.9688,0],[-0.1876,-0.9532,0],[-0.1876,-0.9376,0],[-0.1876,-0.9218,0],[-0.1876,-0.9062,0],[-0.1876,-0.8906,0],[-0.1876,-0.875,0],[-0.1876,-0.8594,0],[-0.1876,-0.8438,0],[-0.1876,-0.8282,0],[-0.1876,-0.8124,0],[-0.1876,-0.7968,0],[-0.1876,-0.7812,0],[-0.1876,-0.7656,0],[-0.1876,-0.75,0],[-0.1876,-0.7344,0],[-0.1876,-0.7188,0],[-0.1876,-0.7032,0],[-0.1876,-0.6876,0],[-0.1876,-0.6718,0],[-0.1876,-0.6562,0],[-0.1876,-0.6406,0],[-0.1876,-0.625,0],[-0.1876,-0.6094,0],[-0.1876,-0.5938,0],[-0.1876,-0.5782,0],[-0.1876,-0.5624,0],[-0.1876,-0.5468,0],[-0.1876,-0.5312,0],[-0.1876,-0.5156,0],[-0.1876,-0.5,0],[-0.1876,-0.4844,0],[-0.1876,-0.4688,0],[-0.1876,-0.4532,0],[-0.1876,-0.4376,0],[-0.1876,-0.4218,0],[-0.1876,-0.4062,0],[-0.1876,-0.3906,0],[-0.1876,-0.375,0],[-0.1876,-0.3594,0],[-0.1876,-0.3438,0],[-0.1876,-0.3282,0],[-0.1876,-0.3124,0],[-0.1876,-0.2968,0],[-0.1876,-0.2812,0],[-0.1876,-0.2656,0],[-0.1876,-0.25,0],[-0.1876,-0.2344,0],[-0.1876,-0.2188,0],[-0.1876,-0.2032,0],[-0.1876,-0.1876,0],[-0.1876,-0.1718,0],[-0.1876,-0.1562,0],[-0.1876,-0.1406,0],[-0.1876,-0.125,0],[-0.1876,-0.1094,0],[-0.1876,-0.0938,0],[-0.1876,-0.0782,0],[-0.1876,-0.0624,0],[-0.1876,-0.0468,0],[-0.1876,-0.0312,0],[-0.1876,-0.0156,0],[-0.1876,0,0],[-0.1876,0.0156,0],[-0.1876,0.0312,0],[-0.1876,0.0468,0],[-0.1876,0.0624,0],[-0.1876,0.0782,0],[-0.1876,0.0938,0],[-0.1876,0.1094,0],[-0.1876,0.125,0],[-0.1876,0.1406,0],[-0.1876,0.1562,0],[-0.1876,0.1718,0],[-0.1876,0.1876,0],[-0.1876,0.2032,0],[-0.1876,0.2188,0],[-0.1876,0.2344,0],[-0.1876,0.25,0],[-0.1876,0.2656,0],[-0.1876,0.2812,0],[-0.1876,0.2968,0],[-0.1876,0.3124,0],[-0.1876,0.3282,0],[-0.1876,0.3438,0],[-0.1876,0.3594,0],[-0.1876,0.375,0],[-0.1876,0.3906,0],[-0.1876,0.4062,0],[-0.1876,0.4218,0],[-0.1876,0.4376,0],[-0.1876,0.4532,0],[-0.1876,0.4688,0],[-0.1876,0.4844,0],[-0.1876,0.5,0],[-0.1876,0.5156,0],[-0.1876,0.5312,0],[-0.1876,0.5468,0],[-0.1876,0.5624,0],[-0.1876,0.5782,0],[-0.1876,0.5938,0],[-0.1876,0.6094,0],[-0.1876,0.625,0],[-0.1876,0.6406,0],[-0.1876,0.6562,0],[-0.1876,0.6718,0],[-0.1876,0.6876,0],[-0.1876,0.7032,0],[-0.1876,0.7188,0],[-0.1876,0.7344,0],[-0.1876,0.75,0],[-0.1876,0.7656,0],[-0.1876,0.7812,0],[-0.1876,0.7968,0],[-0.1876,0.8124,0],[-0.1876,0.8282,0],[-0.1876,0.8438,0],[-0.1876,0.8594,0],[-0.1876,0.875,0],[-0.1876,0.8906,0],[-0.1876,0.9062,0],[-0.1876,0.9218,0],[-0.1876,0.9376,0],[-0.1876,0.9532,0],[-0.1876,0.9688,0],[-0.1876,0.9844,0],[-0.1718,-1,0],[-0.1718,-0.9844,0],[-0.1718,-0.9688,0],[-0.1718,-0.9532,0],[-0.1718,-0.9376,0],[-0.1718,-0.9218,0],[-0.1718,-0.9062,0],[-0.1718,-0.8906,0],[-0.1718,-0.875,0],[-0.1718,-0.8594,0],[-0.1718,-0.8438,0],[-0.1718,-0.8282,0],[-0.1718,-0.8124,0],[-0.1718,-0.7968,0],[-0.1718,-0.7812,0],[-0.1718,-0.7656,0],[-0.1718,-0.75,0],[-0.1718,-0.7344,0],[-0.1718,-0.7188,0],[-0.1718,-0.7032,0],[-0.1718,-0.6876,0],[-0.1718,-0.6718,0],[-0.1718,-0.6562,0],[-0.1718,-0.6406,0],[-0.1718,-0.625,0],[-0.1718,-0.6094,0],[-0.1718,-0.5938,0],[-0.1718,-0.5782,0],[-0.1718,-0.5624,0],[-0.1718,-0.5468,0],[-0.1718,-0.5312,0],[-0.1718,-0.5156,0],[-0.1718,-0.5,0],[-0.1718,-0.4844,0],[-0.1718,-0.4688,0],[-0.1718,-0.4532,0],[-0.1718,-0.4376,0],[-0.1718,-0.4218,0],[-0.1718,-0.4062,0],[-0.1718,-0.3906,0],[-0.1718,-0.375,0],[-0.1718,-0.3594,0],[-0.1718,-0.3438,0],[-0.1718,-0.3282,0],[-0.1718,-0.3124,0],[-0.1718,-0.2968,0],[-0.1718,-0.2812,0],[-0.1718,-0.2656,0],[-0.1718,-0.25,0],[-0.1718,-0.2344,0],[-0.1718,-0.2188,0],[-0.1718,-0.2032,0],[-0.1718,-0.1876,0],[-0.1718,-0.1718,0],[-0.1718,-0.1562,0],[-0.1718,-0.1406,0],[-0.1718,-0.125,0],[-0.1718,-0.1094,0],[-0.1718,-0.0938,0],[-0.1718,-0.0782,0],[-0.1718,-0.0624,0],[-0.1718,-0.0468,0],[-0.1718,-0.0312,0],[-0.1718,-0.0156,0],[-0.1718,0,0],[-0.1718,0.0156,0],[-0.1718,0.0312,0],[-0.1718,0.0468,0],[-0.1718,0.0624,0],[-0.1718,0.0782,0],[-0.1718,0.0938,0],[-0.1718,0.1094,0],[-0.1718,0.125,0],[-0.1718,0.1406,0],[-0.1718,0.1562,0],[-0.1718,0.1718,0],[-0.1718,0.1876,0],[-0.1718,0.2032,0],[-0.1718,0.2188,0],[-0.1718,0.2344,0],[-0.1718,0.25,0],[-0.1718,0.2656,0],[-0.1718,0.2812,0],[-0.1718,0.2968,0],[-0.1718,0.3124,0],[-0.1718,0.3282,0],[-0.1718,0.3438,0],[-0.1718,0.3594,0],[-0.1718,0.375,0],[-0.1718,0.3906,0],[-0.1718,0.4062,0],[-0.1718,0.4218,0],[-0.1718,0.4376,0],[-0.1718,0.4532,0],[-0.1718,0.4688,0],[-0.1718,0.4844,0],[-0.1718,0.5,0],[-0.1718,0.5156,0],[-0.1718,0.5312,0],[-0.1718,0.5468,0],[-0.1718,0.5624,0],[-0.1718,0.5782,0],[-0.1718,0.5938,0],[-0.1718,0.6094,0],[-0.1718,0.625,0],[-0.1718,0.6406,0],[-0.1718,0.6562,0],[-0.1718,0.6718,0],[-0.1718,0.6876,0],[-0.1718,0.7032,0],[-0.1718,0.7188,0],[-0.1718,0.7344,0],[-0.1718,0.75,0],[-0.1718,0.7656,0],[-0.1718,0.7812,0],[-0.1718,0.7968,0],[-0.1718,0.8124,0],[-0.1718,0.8282,0],[-0.1718,0.8438,0],[-0.1718,0.8594,0],[-0.1718,0.875,0],[-0.1718,0.8906,0],[-0.1718,0.9062,0],[-0.1718,0.9218,0],[-0.1718,0.9376,0],[-0.1718,0.9532,0],[-0.1718,0.9688,0],[-0.1718,0.9844,0],[-0.1562,-1,0],[-0.1562,-0.9844,0],[-0.1562,-0.9688,0],[-0.1562,-0.9532,0],[-0.1562,-0.9376,0],[-0.1562,-0.9218,0],[-0.1562,-0.9062,0],[-0.1562,-0.8906,0],[-0.1562,-0.875,0],[-0.1562,-0.8594,0],[-0.1562,-0.8438,0],[-0.1562,-0.8282,0],[-0.1562,-0.8124,0],[-0.1562,-0.7968,0],[-0.1562,-0.7812,0],[-0.1562,-0.7656,0],[-0.1562,-0.75,0],[-0.1562,-0.7344,0],[-0.1562,-0.7188,0],[-0.1562,-0.7032,0],[-0.1562,-0.6876,0],[-0.1562,-0.6718,0],[-0.1562,-0.6562,0],[-0.1562,-0.6406,0],[-0.1562,-0.625,0],[-0.1562,-0.6094,0],[-0.1562,-0.5938,0],[-0.1562,-0.5782,0],[-0.1562,-0.5624,0],[-0.1562,-0.5468,0],[-0.1562,-0.5312,0],[-0.1562,-0.5156,0],[-0.1562,-0.5,0],[-0.1562,-0.4844,0],[-0.1562,-0.4688,0],[-0.1562,-0.4532,0],[-0.1562,-0.4376,0],[-0.1562,-0.4218,0],[-0.1562,-0.4062,0],[-0.1562,-0.3906,0],[-0.1562,-0.375,0],[-0.1562,-0.3594,0],[-0.1562,-0.3438,0],[-0.1562,-0.3282,0],[-0.1562,-0.3124,0],[-0.1562,-0.2968,0],[-0.1562,-0.2812,0],[-0.1562,-0.2656,0],[-0.1562,-0.25,0],[-0.1562,-0.2344,0],[-0.1562,-0.2188,0],[-0.1562,-0.2032,0],[-0.1562,-0.1876,0],[-0.1562,-0.1718,0],[-0.1562,-0.1562,0],[-0.1562,-0.1406,0],[-0.1562,-0.125,0],[-0.1562,-0.1094,0],[-0.1562,-0.0938,0],[-0.1562,-0.0782,0],[-0.1562,-0.0624,0],[-0.1562,-0.0468,0],[-0.1562,-0.0312,0],[-0.1562,-0.0156,0],[-0.1562,0,0],[-0.1562,0.0156,0],[-0.1562,0.0312,0],[-0.1562,0.0468,0],[-0.1562,0.0624,0],[-0.1562,0.0782,0],[-0.1562,0.0938,0],[-0.1562,0.1094,0],[-0.1562,0.125,0],[-0.1562,0.1406,0],[-0.1562,0.1562,0],[-0.1562,0.1718,0],[-0.1562,0.1876,0],[-0.1562,0.2032,0],[-0.1562,0.2188,0],[-0.1562,0.2344,0],[-0.1562,0.25,0],[-0.1562,0.2656,0],[-0.1562,0.2812,0],[-0.1562,0.2968,0],[-0.1562,0.3124,0],[-0.1562,0.3282,0],[-0.1562,0.3438,0],[-0.1562,0.3594,0],[-0.1562,0.375,0],[-0.1562,0.3906,0],[-0.1562,0.4062,0],[-0.1562,0.4218,0],[-0.1562,0.4376,0],[-0.1562,0.4532,0],[-0.1562,0.4688,0],[-0.1562,0.4844,0],[-0.1562,0.5,0],[-0.1562,0.5156,0],[-0.1562,0.5312,0],[-0.1562,0.5468,0],[-0.1562,0.5624,0],[-0.1562,0.5782,0],[-0.1562,0.5938,0],[-0.1562,0.6094,0],[-0.1562,0.625,0],[-0.1562,0.6406,0],[-0.1562,0.6562,0],[-0.1562,0.6718,0],[-0.1562,0.6876,0],[-0.1562,0.7032,0],[-0.1562,0.7188,0],[-0.1562,0.7344,0],[-0.1562,0.75,0],[-0.1562,0.7656,0],[-0.1562,0.7812,0],[-0.1562,0.7968,0],[-0.1562,0.8124,0],[-0.1562,0.8282,0],[-0.1562,0.8438,0],[-0.1562,0.8594,0],[-0.1562,0.875,0],[-0.1562,0.8906,0],[-0.1562,0.9062,0],[-0.1562,0.9218,0],[-0.1562,0.9376,0],[-0.1562,0.9532,0],[-0.1562,0.9688,0],[-0.1562,0.9844,0],[-0.1406,-1,0],[-0.1406,-0.9844,0],[-0.1406,-0.9688,0],[-0.1406,-0.9532,0],[-0.1406,-0.9376,0],[-0.1406,-0.9218,0],[-0.1406,-0.9062,0],[-0.1406,-0.8906,0],[-0.1406,-0.875,0],[-0.1406,-0.8594,0],[-0.1406,-0.8438,0],[-0.1406,-0.8282,0],[-0.1406,-0.8124,0],[-0.1406,-0.7968,0],[-0.1406,-0.7812,0],[-0.1406,-0.7656,0],[-0.1406,-0.75,0],[-0.1406,-0.7344,0],[-0.1406,-0.7188,0],[-0.1406,-0.7032,0],[-0.1406,-0.6876,0],[-0.1406,-0.6718,0],[-0.1406,-0.6562,0],[-0.1406,-0.6406,0],[-0.1406,-0.625,0],[-0.1406,-0.6094,0],[-0.1406,-0.5938,0],[-0.1406,-0.5782,0],[-0.1406,-0.5624,0],[-0.1406,-0.5468,0],[-0.1406,-0.5312,0],[-0.1406,-0.5156,0],[-0.1406,-0.5,0],[-0.1406,-0.4844,0],[-0.1406,-0.4688,0],[-0.1406,-0.4532,0],[-0.1406,-0.4376,0],[-0.1406,-0.4218,0],[-0.1406,-0.4062,0],[-0.1406,-0.3906,0],[-0.1406,-0.375,0],[-0.1406,-0.3594,0],[-0.1406,-0.3438,0],[-0.1406,-0.3282,0],[-0.1406,-0.3124,0],[-0.1406,-0.2968,0],[-0.1406,-0.2812,0],[-0.1406,-0.2656,0],[-0.1406,-0.25,0],[-0.1406,-0.2344,0],[-0.1406,-0.2188,0],[-0.1406,-0.2032,0],[-0.1406,-0.1876,0],[-0.1406,-0.1718,0],[-0.1406,-0.1562,0],[-0.1406,-0.1406,0],[-0.1406,-0.125,0],[-0.1406,-0.1094,0],[-0.1406,-0.0938,0],[-0.1406,-0.0782,0],[-0.1406,-0.0624,0],[-0.1406,-0.0468,0],[-0.1406,-0.0312,0],[-0.1406,-0.0156,0],[-0.1406,0,0],[-0.1406,0.0156,0],[-0.1406,0.0312,0],[-0.1406,0.0468,0],[-0.1406,0.0624,0],[-0.1406,0.0782,0],[-0.1406,0.0938,0],[-0.1406,0.1094,0],[-0.1406,0.125,0],[-0.1406,0.1406,0],[-0.1406,0.1562,0],[-0.1406,0.1718,0],[-0.1406,0.1876,0],[-0.1406,0.2032,0],[-0.1406,0.2188,0],[-0.1406,0.2344,0],[-0.1406,0.25,0],[-0.1406,0.2656,0],[-0.1406,0.2812,0],[-0.1406,0.2968,0],[-0.1406,0.3124,0],[-0.1406,0.3282,0],[-0.1406,0.3438,0],[-0.1406,0.3594,0],[-0.1406,0.375,0],[-0.1406,0.3906,0],[-0.1406,0.4062,0],[-0.1406,0.4218,0],[-0.1406,0.4376,0],[-0.1406,0.4532,0],[-0.1406,0.4688,0],[-0.1406,0.4844,0],[-0.1406,0.5,0],[-0.1406,0.5156,0],[-0.1406,0.5312,0],[-0.1406,0.5468,0],[-0.1406,0.5624,0],[-0.1406,0.5782,0],[-0.1406,0.5938,0],[-0.1406,0.6094,0],[-0.1406,0.625,0],[-0.1406,0.6406,0],[-0.1406,0.6562,0],[-0.1406,0.6718,0],[-0.1406,0.6876,0],[-0.1406,0.7032,0],[-0.1406,0.7188,0],[-0.1406,0.7344,0],[-0.1406,0.75,0],[-0.1406,0.7656,0],[-0.1406,0.7812,0],[-0.1406,0.7968,0],[-0.1406,0.8124,0],[-0.1406,0.8282,0],[-0.1406,0.8438,0],[-0.1406,0.8594,0],[-0.1406,0.875,0],[-0.1406,0.8906,0],[-0.1406,0.9062,0],[-0.1406,0.9218,0],[-0.1406,0.9376,0],[-0.1406,0.9532,0],[-0.1406,0.9688,0],[-0.1406,0.9844,0],[-0.125,-1,0],[-0.125,-0.9844,0],[-0.125,-0.9688,0],[-0.125,-0.9532,0],[-0.125,-0.9376,0],[-0.125,-0.9218,0],[-0.125,-0.9062,0],[-0.125,-0.8906,0],[-0.125,-0.875,0],[-0.125,-0.8594,0],[-0.125,-0.8438,0],[-0.125,-0.8282,0],[-0.125,-0.8124,0],[-0.125,-0.7968,0],[-0.125,-0.7812,0],[-0.125,-0.7656,0],[-0.125,-0.75,0],[-0.125,-0.7344,0],[-0.125,-0.7188,0],[-0.125,-0.7032,0],[-0.125,-0.6876,0],[-0.125,-0.6718,0],[-0.125,-0.6562,0],[-0.125,-0.6406,0],[-0.125,-0.625,0],[-0.125,-0.6094,0],[-0.125,-0.5938,0],[-0.125,-0.5782,0],[-0.125,-0.5624,0],[-0.125,-0.5468,0],[-0.125,-0.5312,0],[-0.125,-0.5156,0],[-0.125,-0.5,0],[-0.125,-0.4844,0],[-0.125,-0.4688,0],[-0.125,-0.4532,0],[-0.125,-0.4376,0],[-0.125,-0.4218,0],[-0.125,-0.4062,0],[-0.125,-0.3906,0],[-0.125,-0.375,0],[-0.125,-0.3594,0],[-0.125,-0.3438,0],[-0.125,-0.3282,0],[-0.125,-0.3124,0],[-0.125,-0.2968,0],[-0.125,-0.2812,0],[-0.125,-0.2656,0],[-0.125,-0.25,0],[-0.125,-0.2344,0],[-0.125,-0.2188,0],[-0.125,-0.2032,0],[-0.125,-0.1876,0],[-0.125,-0.1718,0],[-0.125,-0.1562,0],[-0.125,-0.1406,0],[-0.125,-0.125,0],[-0.125,-0.1094,0],[-0.125,-0.0938,0],[-0.125,-0.0782,0],[-0.125,-0.0624,0],[-0.125,-0.0468,0],[-0.125,-0.0312,0],[-0.125,-0.0156,0],[-0.125,0,0],[-0.125,0.0156,0],[-0.125,0.0312,0],[-0.125,0.0468,0],[-0.125,0.0624,0],[-0.125,0.0782,0],[-0.125,0.0938,0],[-0.125,0.1094,0],[-0.125,0.125,0],[-0.125,0.1406,0],[-0.125,0.1562,0],[-0.125,0.1718,0],[-0.125,0.1876,0],[-0.125,0.2032,0],[-0.125,0.2188,0],[-0.125,0.2344,0],[-0.125,0.25,0],[-0.125,0.2656,0],[-0.125,0.2812,0],[-0.125,0.2968,0],[-0.125,0.3124,0],[-0.125,0.3282,0],[-0.125,0.3438,0],[-0.125,0.3594,0],[-0.125,0.375,0],[-0.125,0.3906,0],[-0.125,0.4062,0],[-0.125,0.4218,0],[-0.125,0.4376,0],[-0.125,0.4532,0],[-0.125,0.4688,0],[-0.125,0.4844,0],[-0.125,0.5,0],[-0.125,0.5156,0],[-0.125,0.5312,0],[-0.125,0.5468,0],[-0.125,0.5624,0],[-0.125,0.5782,0],[-0.125,0.5938,0],[-0.125,0.6094,0],[-0.125,0.625,0],[-0.125,0.6406,0],[-0.125,0.6562,0],[-0.125,0.6718,0],[-0.125,0.6876,0],[-0.125,0.7032,0],[-0.125,0.7188,0],[-0.125,0.7344,0],[-0.125,0.75,0],[-0.125,0.7656,0],[-0.125,0.7812,0],[-0.125,0.7968,0],[-0.125,0.8124,0],[-0.125,0.8282,0],[-0.125,0.8438,0],[-0.125,0.8594,0],[-0.125,0.875,0],[-0.125,0.8906,0],[-0.125,0.9062,0],[-0.125,0.9218,0],[-0.125,0.9376,0],[-0.125,0.9532,0],[-0.125,0.9688,0],[-0.125,0.9844,0],[-0.1094,-1,0],[-0.1094,-0.9844,0],[-0.1094,-0.9688,0],[-0.1094,-0.9532,0],[-0.1094,-0.9376,0],[-0.1094,-0.9218,0],[-0.1094,-0.9062,0],[-0.1094,-0.8906,0],[-0.1094,-0.875,0],[-0.1094,-0.8594,0],[-0.1094,-0.8438,0],[-0.1094,-0.8282,0],[-0.1094,-0.8124,0],[-0.1094,-0.7968,0],[-0.1094,-0.7812,0],[-0.1094,-0.7656,0],[-0.1094,-0.75,0],[-0.1094,-0.7344,0],[-0.1094,-0.7188,0],[-0.1094,-0.7032,0],[-0.1094,-0.6876,0],[-0.1094,-0.6718,0],[-0.1094,-0.6562,0],[-0.1094,-0.6406,0],[-0.1094,-0.625,0],[-0.1094,-0.6094,0],[-0.1094,-0.5938,0],[-0.1094,-0.5782,0],[-0.1094,-0.5624,0],[-0.1094,-0.5468,0],[-0.1094,-0.5312,0],[-0.1094,-0.5156,0],[-0.1094,-0.5,0],[-0.1094,-0.4844,0],[-0.1094,-0.4688,0],[-0.1094,-0.4532,0],[-0.1094,-0.4376,0],[-0.1094,-0.4218,0],[-0.1094,-0.4062,0],[-0.1094,-0.3906,0],[-0.1094,-0.375,0],[-0.1094,-0.3594,0],[-0.1094,-0.3438,0],[-0.1094,-0.3282,0],[-0.1094,-0.3124,0],[-0.1094,-0.2968,0],[-0.1094,-0.2812,0],[-0.1094,-0.2656,0],[-0.1094,-0.25,0],[-0.1094,-0.2344,0],[-0.1094,-0.2188,0],[-0.1094,-0.2032,0],[-0.1094,-0.1876,0],[-0.1094,-0.1718,0],[-0.1094,-0.1562,0],[-0.1094,-0.1406,0],[-0.1094,-0.125,0],[-0.1094,-0.1094,0],[-0.1094,-0.0938,0],[-0.1094,-0.0782,0],[-0.1094,-0.0624,0],[-0.1094,-0.0468,0],[-0.1094,-0.0312,0],[-0.1094,-0.0156,0],[-0.1094,0,0],[-0.1094,0.0156,0],[-0.1094,0.0312,0],[-0.1094,0.0468,0],[-0.1094,0.0624,0],[-0.1094,0.0782,0],[-0.1094,0.0938,0],[-0.1094,0.1094,0],[-0.1094,0.125,0],[-0.1094,0.1406,0],[-0.1094,0.1562,0],[-0.1094,0.1718,0],[-0.1094,0.1876,0],[-0.1094,0.2032,0],[-0.1094,0.2188,0],[-0.1094,0.2344,0],[-0.1094,0.25,0],[-0.1094,0.2656,0],[-0.1094,0.2812,0],[-0.1094,0.2968,0],[-0.1094,0.3124,0],[-0.1094,0.3282,0],[-0.1094,0.3438,0],[-0.1094,0.3594,0],[-0.1094,0.375,0],[-0.1094,0.3906,0],[-0.1094,0.4062,0],[-0.1094,0.4218,0],[-0.1094,0.4376,0],[-0.1094,0.4532,0],[-0.1094,0.4688,0],[-0.1094,0.4844,0],[-0.1094,0.5,0],[-0.1094,0.5156,0],[-0.1094,0.5312,0],[-0.1094,0.5468,0],[-0.1094,0.5624,0],[-0.1094,0.5782,0],[-0.1094,0.5938,0],[-0.1094,0.6094,0],[-0.1094,0.625,0],[-0.1094,0.6406,0],[-0.1094,0.6562,0],[-0.1094,0.6718,0],[-0.1094,0.6876,0],[-0.1094,0.7032,0],[-0.1094,0.7188,0],[-0.1094,0.7344,0],[-0.1094,0.75,0],[-0.1094,0.7656,0],[-0.1094,0.7812,0],[-0.1094,0.7968,0],[-0.1094,0.8124,0],[-0.1094,0.8282,0],[-0.1094,0.8438,0],[-0.1094,0.8594,0],[-0.1094,0.875,0],[-0.1094,0.8906,0],[-0.1094,0.9062,0],[-0.1094,0.9218,0],[-0.1094,0.9376,0],[-0.1094,0.9532,0],[-0.1094,0.9688,0],[-0.1094,0.9844,0],[-0.0938,-1,0],[-0.0938,-0.9844,0],[-0.0938,-0.9688,0],[-0.0938,-0.9532,0],[-0.0938,-0.9376,0],[-0.0938,-0.9218,0],[-0.0938,-0.9062,0],[-0.0938,-0.8906,0],[-0.0938,-0.875,0],[-0.0938,-0.8594,0],[-0.0938,-0.8438,0],[-0.0938,-0.8282,0],[-0.0938,-0.8124,0],[-0.0938,-0.7968,0],[-0.0938,-0.7812,0],[-0.0938,-0.7656,0],[-0.0938,-0.75,0],[-0.0938,-0.7344,0],[-0.0938,-0.7188,0],[-0.0938,-0.7032,0],[-0.0938,-0.6876,0],[-0.0938,-0.6718,0],[-0.0938,-0.6562,0],[-0.0938,-0.6406,0],[-0.0938,-0.625,0],[-0.0938,-0.6094,0],[-0.0938,-0.5938,0],[-0.0938,-0.5782,0],[-0.0938,-0.5624,0],[-0.0938,-0.5468,0],[-0.0938,-0.5312,0],[-0.0938,-0.5156,0],[-0.0938,-0.5,0],[-0.0938,-0.4844,0],[-0.0938,-0.4688,0],[-0.0938,-0.4532,0],[-0.0938,-0.4376,0],[-0.0938,-0.4218,0],[-0.0938,-0.4062,0],[-0.0938,-0.3906,0],[-0.0938,-0.375,0],[-0.0938,-0.3594,0],[-0.0938,-0.3438,0],[-0.0938,-0.3282,0],[-0.0938,-0.3124,0],[-0.0938,-0.2968,0],[-0.0938,-0.2812,0],[-0.0938,-0.2656,0],[-0.0938,-0.25,0],[-0.0938,-0.2344,0],[-0.0938,-0.2188,0],[-0.0938,-0.2032,0],[-0.0938,-0.1876,0],[-0.0938,-0.1718,0],[-0.0938,-0.1562,0],[-0.0938,-0.1406,0],[-0.0938,-0.125,0],[-0.0938,-0.1094,0],[-0.0938,-0.0938,0],[-0.0938,-0.0782,0],[-0.0938,-0.0624,0],[-0.0938,-0.0468,0],[-0.0938,-0.0312,0],[-0.0938,-0.0156,0],[-0.0938,0,0],[-0.0938,0.0156,0],[-0.0938,0.0312,0],[-0.0938,0.0468,0],[-0.0938,0.0624,0],[-0.0938,0.0782,0],[-0.0938,0.0938,0],[-0.0938,0.1094,0],[-0.0938,0.125,0],[-0.0938,0.1406,0],[-0.0938,0.1562,0],[-0.0938,0.1718,0],[-0.0938,0.1876,0],[-0.0938,0.2032,0],[-0.0938,0.2188,0],[-0.0938,0.2344,0],[-0.0938,0.25,0],[-0.0938,0.2656,0],[-0.0938,0.2812,0],[-0.0938,0.2968,0],[-0.0938,0.3124,0],[-0.0938,0.3282,0],[-0.0938,0.3438,0],[-0.0938,0.3594,0],[-0.0938,0.375,0],[-0.0938,0.3906,0],[-0.0938,0.4062,0],[-0.0938,0.4218,0],[-0.0938,0.4376,0],[-0.0938,0.4532,0],[-0.0938,0.4688,0],[-0.0938,0.4844,0],[-0.0938,0.5,0],[-0.0938,0.5156,0],[-0.0938,0.5312,0],[-0.0938,0.5468,0],[-0.0938,0.5624,0],[-0.0938,0.5782,0],[-0.0938,0.5938,0],[-0.0938,0.6094,0],[-0.0938,0.625,0],[-0.0938,0.6406,0],[-0.0938,0.6562,0],[-0.0938,0.6718,0],[-0.0938,0.6876,0],[-0.0938,0.7032,0],[-0.0938,0.7188,0],[-0.0938,0.7344,0],[-0.0938,0.75,0],[-0.0938,0.7656,0],[-0.0938,0.7812,0],[-0.0938,0.7968,0],[-0.0938,0.8124,0],[-0.0938,0.8282,0],[-0.0938,0.8438,0],[-0.0938,0.8594,0],[-0.0938,0.875,0],[-0.0938,0.8906,0],[-0.0938,0.9062,0],[-0.0938,0.9218,0],[-0.0938,0.9376,0],[-0.0938,0.9532,0],[-0.0938,0.9688,0],[-0.0938,0.9844,0],[-0.0782,-1,0],[-0.0782,-0.9844,0],[-0.0782,-0.9688,0],[-0.0782,-0.9532,0],[-0.0782,-0.9376,0],[-0.0782,-0.9218,0],[-0.0782,-0.9062,0],[-0.0782,-0.8906,0],[-0.0782,-0.875,0],[-0.0782,-0.8594,0],[-0.0782,-0.8438,0],[-0.0782,-0.8282,0],[-0.0782,-0.8124,0],[-0.0782,-0.7968,0],[-0.0782,-0.7812,0],[-0.0782,-0.7656,0],[-0.0782,-0.75,0],[-0.0782,-0.7344,0],[-0.0782,-0.7188,0],[-0.0782,-0.7032,0],[-0.0782,-0.6876,0],[-0.0782,-0.6718,0],[-0.0782,-0.6562,0],[-0.0782,-0.6406,0],[-0.0782,-0.625,0],[-0.0782,-0.6094,0],[-0.0782,-0.5938,0],[-0.0782,-0.5782,0],[-0.0782,-0.5624,0],[-0.0782,-0.5468,0],[-0.0782,-0.5312,0],[-0.0782,-0.5156,0],[-0.0782,-0.5,0],[-0.0782,-0.4844,0],[-0.0782,-0.4688,0],[-0.0782,-0.4532,0],[-0.0782,-0.4376,0],[-0.0782,-0.4218,0],[-0.0782,-0.4062,0],[-0.0782,-0.3906,0],[-0.0782,-0.375,0],[-0.0782,-0.3594,0],[-0.0782,-0.3438,0],[-0.0782,-0.3282,0],[-0.0782,-0.3124,0],[-0.0782,-0.2968,0],[-0.0782,-0.2812,0],[-0.0782,-0.2656,0],[-0.0782,-0.25,0],[-0.0782,-0.2344,0],[-0.0782,-0.2188,0],[-0.0782,-0.2032,0],[-0.0782,-0.1876,0],[-0.0782,-0.1718,0],[-0.0782,-0.1562,0],[-0.0782,-0.1406,0],[-0.0782,-0.125,0],[-0.0782,-0.1094,0],[-0.0782,-0.0938,0],[-0.0782,-0.0782,0],[-0.0782,-0.0624,0],[-0.0782,-0.0468,0],[-0.0782,-0.0312,0],[-0.0782,-0.0156,0],[-0.0782,0,0],[-0.0782,0.0156,0],[-0.0782,0.0312,0],[-0.0782,0.0468,0],[-0.0782,0.0624,0],[-0.0782,0.0782,0],[-0.0782,0.0938,0],[-0.0782,0.1094,0],[-0.0782,0.125,0],[-0.0782,0.1406,0],[-0.0782,0.1562,0],[-0.0782,0.1718,0],[-0.0782,0.1876,0],[-0.0782,0.2032,0],[-0.0782,0.2188,0],[-0.0782,0.2344,0],[-0.0782,0.25,0],[-0.0782,0.2656,0],[-0.0782,0.2812,0],[-0.0782,0.2968,0],[-0.0782,0.3124,0],[-0.0782,0.3282,0],[-0.0782,0.3438,0],[-0.0782,0.3594,0],[-0.0782,0.375,0],[-0.0782,0.3906,0],[-0.0782,0.4062,0],[-0.0782,0.4218,0],[-0.0782,0.4376,0],[-0.0782,0.4532,0],[-0.0782,0.4688,0],[-0.0782,0.4844,0],[-0.0782,0.5,0],[-0.0782,0.5156,0],[-0.0782,0.5312,0],[-0.0782,0.5468,0],[-0.0782,0.5624,0],[-0.0782,0.5782,0],[-0.0782,0.5938,0],[-0.0782,0.6094,0],[-0.0782,0.625,0],[-0.0782,0.6406,0],[-0.0782,0.6562,0],[-0.0782,0.6718,0],[-0.0782,0.6876,0],[-0.0782,0.7032,0],[-0.0782,0.7188,0],[-0.0782,0.7344,0],[-0.0782,0.75,0],[-0.0782,0.7656,0],[-0.0782,0.7812,0],[-0.0782,0.7968,0],[-0.0782,0.8124,0],[-0.0782,0.8282,0],[-0.0782,0.8438,0],[-0.0782,0.8594,0],[-0.0782,0.875,0],[-0.0782,0.8906,0],[-0.0782,0.9062,0],[-0.0782,0.9218,0],[-0.0782,0.9376,0],[-0.0782,0.9532,0],[-0.0782,0.9688,0],[-0.0782,0.9844,0],[-0.0624,-1,0],[-0.0624,-0.9844,0],[-0.0624,-0.9688,0],[-0.0624,-0.9532,0],[-0.0624,-0.9376,0],[-0.0624,-0.9218,0],[-0.0624,-0.9062,0],[-0.0624,-0.8906,0],[-0.0624,-0.875,0],[-0.0624,-0.8594,0],[-0.0624,-0.8438,0],[-0.0624,-0.8282,0],[-0.0624,-0.8124,0],[-0.0624,-0.7968,0],[-0.0624,-0.7812,0],[-0.0624,-0.7656,0],[-0.0624,-0.75,0],[-0.0624,-0.7344,0],[-0.0624,-0.7188,0],[-0.0624,-0.7032,0],[-0.0624,-0.6876,0],[-0.0624,-0.6718,0],[-0.0624,-0.6562,0],[-0.0624,-0.6406,0],[-0.0624,-0.625,0],[-0.0624,-0.6094,0],[-0.0624,-0.5938,0],[-0.0624,-0.5782,0],[-0.0624,-0.5624,0],[-0.0624,-0.5468,0],[-0.0624,-0.5312,0],[-0.0624,-0.5156,0],[-0.0624,-0.5,0],[-0.0624,-0.4844,0],[-0.0624,-0.4688,0],[-0.0624,-0.4532,0],[-0.0624,-0.4376,0],[-0.0624,-0.4218,0],[-0.0624,-0.4062,0],[-0.0624,-0.3906,0],[-0.0624,-0.375,0],[-0.0624,-0.3594,0],[-0.0624,-0.3438,0],[-0.0624,-0.3282,0],[-0.0624,-0.3124,0],[-0.0624,-0.2968,0],[-0.0624,-0.2812,0],[-0.0624,-0.2656,0],[-0.0624,-0.25,0],[-0.0624,-0.2344,0],[-0.0624,-0.2188,0],[-0.0624,-0.2032,0],[-0.0624,-0.1876,0],[-0.0624,-0.1718,0],[-0.0624,-0.1562,0],[-0.0624,-0.1406,0],[-0.0624,-0.125,0],[-0.0624,-0.1094,0],[-0.0624,-0.0938,0],[-0.0624,-0.0782,0],[-0.0624,-0.0624,0],[-0.0624,-0.0468,0],[-0.0624,-0.0312,0],[-0.0624,-0.0156,0],[-0.0624,0,0],[-0.0624,0.0156,0],[-0.0624,0.0312,0],[-0.0624,0.0468,0],[-0.0624,0.0624,0],[-0.0624,0.0782,0],[-0.0624,0.0938,0],[-0.0624,0.1094,0],[-0.0624,0.125,0],[-0.0624,0.1406,0],[-0.0624,0.1562,0],[-0.0624,0.1718,0],[-0.0624,0.1876,0],[-0.0624,0.2032,0],[-0.0624,0.2188,0],[-0.0624,0.2344,0],[-0.0624,0.25,0],[-0.0624,0.2656,0],[-0.0624,0.2812,0],[-0.0624,0.2968,0],[-0.0624,0.3124,0],[-0.0624,0.3282,0],[-0.0624,0.3438,0],[-0.0624,0.3594,0],[-0.0624,0.375,0],[-0.0624,0.3906,0],[-0.0624,0.4062,0],[-0.0624,0.4218,0],[-0.0624,0.4376,0],[-0.0624,0.4532,0],[-0.0624,0.4688,0],[-0.0624,0.4844,0],[-0.0624,0.5,0],[-0.0624,0.5156,0],[-0.0624,0.5312,0],[-0.0624,0.5468,0],[-0.0624,0.5624,0],[-0.0624,0.5782,0],[-0.0624,0.5938,0],[-0.0624,0.6094,0],[-0.0624,0.625,0],[-0.0624,0.6406,0],[-0.0624,0.6562,0],[-0.0624,0.6718,0],[-0.0624,0.6876,0],[-0.0624,0.7032,0],[-0.0624,0.7188,0],[-0.0624,0.7344,0],[-0.0624,0.75,0],[-0.0624,0.7656,0],[-0.0624,0.7812,0],[-0.0624,0.7968,0],[-0.0624,0.8124,0],[-0.0624,0.8282,0],[-0.0624,0.8438,0],[-0.0624,0.8594,0],[-0.0624,0.875,0],[-0.0624,0.8906,0],[-0.0624,0.9062,0],[-0.0624,0.9218,0],[-0.0624,0.9376,0],[-0.0624,0.9532,0],[-0.0624,0.9688,0],[-0.0624,0.9844,0],[-0.0468,-1,0],[-0.0468,-0.9844,0],[-0.0468,-0.9688,0],[-0.0468,-0.9532,0],[-0.0468,-0.9376,0],[-0.0468,-0.9218,0],[-0.0468,-0.9062,0],[-0.0468,-0.8906,0],[-0.0468,-0.875,0],[-0.0468,-0.8594,0],[-0.0468,-0.8438,0],[-0.0468,-0.8282,0],[-0.0468,-0.8124,0],[-0.0468,-0.7968,0],[-0.0468,-0.7812,0],[-0.0468,-0.7656,0],[-0.0468,-0.75,0],[-0.0468,-0.7344,0],[-0.0468,-0.7188,0],[-0.0468,-0.7032,0],[-0.0468,-0.6876,0],[-0.0468,-0.6718,0],[-0.0468,-0.6562,0],[-0.0468,-0.6406,0],[-0.0468,-0.625,0],[-0.0468,-0.6094,0],[-0.0468,-0.5938,0],[-0.0468,-0.5782,0],[-0.0468,-0.5624,0],[-0.0468,-0.5468,0],[-0.0468,-0.5312,0],[-0.0468,-0.5156,0],[-0.0468,-0.5,0],[-0.0468,-0.4844,0],[-0.0468,-0.4688,0],[-0.0468,-0.4532,0],[-0.0468,-0.4376,0],[-0.0468,-0.4218,0],[-0.0468,-0.4062,0],[-0.0468,-0.3906,0],[-0.0468,-0.375,0],[-0.0468,-0.3594,0],[-0.0468,-0.3438,0],[-0.0468,-0.3282,0],[-0.0468,-0.3124,0],[-0.0468,-0.2968,0],[-0.0468,-0.2812,0],[-0.0468,-0.2656,0],[-0.0468,-0.25,0],[-0.0468,-0.2344,0],[-0.0468,-0.2188,0],[-0.0468,-0.2032,0],[-0.0468,-0.1876,0],[-0.0468,-0.1718,0],[-0.0468,-0.1562,0],[-0.0468,-0.1406,0],[-0.0468,-0.125,0],[-0.0468,-0.1094,0],[-0.0468,-0.0938,0],[-0.0468,-0.0782,0],[-0.0468,-0.0624,0],[-0.0468,-0.0468,0],[-0.0468,-0.0312,0],[-0.0468,-0.0156,0],[-0.0468,0,0],[-0.0468,0.0156,0],[-0.0468,0.0312,0],[-0.0468,0.0468,0],[-0.0468,0.0624,0],[-0.0468,0.0782,0],[-0.0468,0.0938,0],[-0.0468,0.1094,0],[-0.0468,0.125,0],[-0.0468,0.1406,0],[-0.0468,0.1562,0],[-0.0468,0.1718,0],[-0.0468,0.1876,0],[-0.0468,0.2032,0],[-0.0468,0.2188,0],[-0.0468,0.2344,0],[-0.0468,0.25,0],[-0.0468,0.2656,0],[-0.0468,0.2812,0],[-0.0468,0.2968,0],[-0.0468,0.3124,0],[-0.0468,0.3282,0],[-0.0468,0.3438,0],[-0.0468,0.3594,0],[-0.0468,0.375,0],[-0.0468,0.3906,0],[-0.0468,0.4062,0],[-0.0468,0.4218,0],[-0.0468,0.4376,0],[-0.0468,0.4532,0],[-0.0468,0.4688,0],[-0.0468,0.4844,0],[-0.0468,0.5,0],[-0.0468,0.5156,0],[-0.0468,0.5312,0],[-0.0468,0.5468,0],[-0.0468,0.5624,0],[-0.0468,0.5782,0],[-0.0468,0.5938,0],[-0.0468,0.6094,0],[-0.0468,0.625,0],[-0.0468,0.6406,0],[-0.0468,0.6562,0],[-0.0468,0.6718,0],[-0.0468,0.6876,0],[-0.0468,0.7032,0],[-0.0468,0.7188,0],[-0.0468,0.7344,0],[-0.0468,0.75,0],[-0.0468,0.7656,0],[-0.0468,0.7812,0],[-0.0468,0.7968,0],[-0.0468,0.8124,0],[-0.0468,0.8282,0],[-0.0468,0.8438,0],[-0.0468,0.8594,0],[-0.0468,0.875,0],[-0.0468,0.8906,0],[-0.0468,0.9062,0],[-0.0468,0.9218,0],[-0.0468,0.9376,0],[-0.0468,0.9532,0],[-0.0468,0.9688,0],[-0.0468,0.9844,0],[-0.0312,-1,0],[-0.0312,-0.9844,0],[-0.0312,-0.9688,0],[-0.0312,-0.9532,0],[-0.0312,-0.9376,0],[-0.0312,-0.9218,0],[-0.0312,-0.9062,0],[-0.0312,-0.8906,0],[-0.0312,-0.875,0],[-0.0312,-0.8594,0],[-0.0312,-0.8438,0],[-0.0312,-0.8282,0],[-0.0312,-0.8124,0],[-0.0312,-0.7968,0],[-0.0312,-0.7812,0],[-0.0312,-0.7656,0],[-0.0312,-0.75,0],[-0.0312,-0.7344,0],[-0.0312,-0.7188,0],[-0.0312,-0.7032,0],[-0.0312,-0.6876,0],[-0.0312,-0.6718,0],[-0.0312,-0.6562,0],[-0.0312,-0.6406,0],[-0.0312,-0.625,0],[-0.0312,-0.6094,0],[-0.0312,-0.5938,0],[-0.0312,-0.5782,0],[-0.0312,-0.5624,0],[-0.0312,-0.5468,0],[-0.0312,-0.5312,0],[-0.0312,-0.5156,0],[-0.0312,-0.5,0],[-0.0312,-0.4844,0],[-0.0312,-0.4688,0],[-0.0312,-0.4532,0],[-0.0312,-0.4376,0],[-0.0312,-0.4218,0],[-0.0312,-0.4062,0],[-0.0312,-0.3906,0],[-0.0312,-0.375,0],[-0.0312,-0.3594,0],[-0.0312,-0.3438,0],[-0.0312,-0.3282,0],[-0.0312,-0.3124,0],[-0.0312,-0.2968,0],[-0.0312,-0.2812,0],[-0.0312,-0.2656,0],[-0.0312,-0.25,0],[-0.0312,-0.2344,0],[-0.0312,-0.2188,0],[-0.0312,-0.2032,0],[-0.0312,-0.1876,0],[-0.0312,-0.1718,0],[-0.0312,-0.1562,0],[-0.0312,-0.1406,0],[-0.0312,-0.125,0],[-0.0312,-0.1094,0],[-0.0312,-0.0938,0],[-0.0312,-0.0782,0],[-0.0312,-0.0624,0],[-0.0312,-0.0468,0],[-0.0312,-0.0312,0],[-0.0312,-0.0156,0],[-0.0312,0,0],[-0.0312,0.0156,0],[-0.0312,0.0312,0],[-0.0312,0.0468,0],[-0.0312,0.0624,0],[-0.0312,0.0782,0],[-0.0312,0.0938,0],[-0.0312,0.1094,0],[-0.0312,0.125,0],[-0.0312,0.1406,0],[-0.0312,0.1562,0],[-0.0312,0.1718,0],[-0.0312,0.1876,0],[-0.0312,0.2032,0],[-0.0312,0.2188,0],[-0.0312,0.2344,0],[-0.0312,0.25,0],[-0.0312,0.2656,0],[-0.0312,0.2812,0],[-0.0312,0.2968,0],[-0.0312,0.3124,0],[-0.0312,0.3282,0],[-0.0312,0.3438,0],[-0.0312,0.3594,0],[-0.0312,0.375,0],[-0.0312,0.3906,0],[-0.0312,0.4062,0],[-0.0312,0.4218,0],[-0.0312,0.4376,0],[-0.0312,0.4532,0],[-0.0312,0.4688,0],[-0.0312,0.4844,0],[-0.0312,0.5,0],[-0.0312,0.5156,0],[-0.0312,0.5312,0],[-0.0312,0.5468,0],[-0.0312,0.5624,0],[-0.0312,0.5782,0],[-0.0312,0.5938,0],[-0.0312,0.6094,0],[-0.0312,0.625,0],[-0.0312,0.6406,0],[-0.0312,0.6562,0],[-0.0312,0.6718,0],[-0.0312,0.6876,0],[-0.0312,0.7032,0],[-0.0312,0.7188,0],[-0.0312,0.7344,0],[-0.0312,0.75,0],[-0.0312,0.7656,0],[-0.0312,0.7812,0],[-0.0312,0.7968,0],[-0.0312,0.8124,0],[-0.0312,0.8282,0],[-0.0312,0.8438,0],[-0.0312,0.8594,0],[-0.0312,0.875,0],[-0.0312,0.8906,0],[-0.0312,0.9062,0],[-0.0312,0.9218,0],[-0.0312,0.9376,0],[-0.0312,0.9532,0],[-0.0312,0.9688,0],[-0.0312,0.9844,0],[-0.0156,-1,0],[-0.0156,-0.9844,0],[-0.0156,-0.9688,0],[-0.0156,-0.9532,0],[-0.0156,-0.9376,0],[-0.0156,-0.9218,0],[-0.0156,-0.9062,0],[-0.0156,-0.8906,0],[-0.0156,-0.875,0],[-0.0156,-0.8594,0],[-0.0156,-0.8438,0],[-0.0156,-0.8282,0],[-0.0156,-0.8124,0],[-0.0156,-0.7968,0],[-0.0156,-0.7812,0],[-0.0156,-0.7656,0],[-0.0156,-0.75,0],[-0.0156,-0.7344,0],[-0.0156,-0.7188,0],[-0.0156,-0.7032,0],[-0.0156,-0.6876,0],[-0.0156,-0.6718,0],[-0.0156,-0.6562,0],[-0.0156,-0.6406,0],[-0.0156,-0.625,0],[-0.0156,-0.6094,0],[-0.0156,-0.5938,0],[-0.0156,-0.5782,0],[-0.0156,-0.5624,0],[-0.0156,-0.5468,0],[-0.0156,-0.5312,0],[-0.0156,-0.5156,0],[-0.0156,-0.5,0],[-0.0156,-0.4844,0],[-0.0156,-0.4688,0],[-0.0156,-0.4532,0],[-0.0156,-0.4376,0],[-0.0156,-0.4218,0],[-0.0156,-0.4062,0],[-0.0156,-0.3906,0],[-0.0156,-0.375,0],[-0.0156,-0.3594,0],[-0.0156,-0.3438,0],[-0.0156,-0.3282,0],[-0.0156,-0.3124,0],[-0.0156,-0.2968,0],[-0.0156,-0.2812,0],[-0.0156,-0.2656,0],[-0.0156,-0.25,0],[-0.0156,-0.2344,0],[-0.0156,-0.2188,0],[-0.0156,-0.2032,0],[-0.0156,-0.1876,0],[-0.0156,-0.1718,0],[-0.0156,-0.1562,0],[-0.0156,-0.1406,0],[-0.0156,-0.125,0],[-0.0156,-0.1094,0],[-0.0156,-0.0938,0],[-0.0156,-0.0782,0],[-0.0156,-0.0624,0],[-0.0156,-0.0468,0],[-0.0156,-0.0312,0],[-0.0156,-0.0156,0],[-0.0156,0,0],[-0.0156,0.0156,0],[-0.0156,0.0312,0],[-0.0156,0.0468,0],[-0.0156,0.0624,0],[-0.0156,0.0782,0],[-0.0156,0.0938,0],[-0.0156,0.1094,0],[-0.0156,0.125,0],[-0.0156,0.1406,0],[-0.0156,0.1562,0],[-0.0156,0.1718,0],[-0.0156,0.1876,0],[-0.0156,0.2032,0],[-0.0156,0.2188,0],[-0.0156,0.2344,0],[-0.0156,0.25,0],[-0.0156,0.2656,0],[-0.0156,0.2812,0],[-0.0156,0.2968,0],[-0.0156,0.3124,0],[-0.0156,0.3282,0],[-0.0156,0.3438,0],[-0.0156,0.3594,0],[-0.0156,0.375,0],[-0.0156,0.3906,0],[-0.0156,0.4062,0],[-0.0156,0.4218,0],[-0.0156,0.4376,0],[-0.0156,0.4532,0],[-0.0156,0.4688,0],[-0.0156,0.4844,0],[-0.0156,0.5,0],[-0.0156,0.5156,0],[-0.0156,0.5312,0],[-0.0156,0.5468,0],[-0.0156,0.5624,0],[-0.0156,0.5782,0],[-0.0156,0.5938,0],[-0.0156,0.6094,0],[-0.0156,0.625,0],[-0.0156,0.6406,0],[-0.0156,0.6562,0],[-0.0156,0.6718,0],[-0.0156,0.6876,0],[-0.0156,0.7032,0],[-0.0156,0.7188,0],[-0.0156,0.7344,0],[-0.0156,0.75,0],[-0.0156,0.7656,0],[-0.0156,0.7812,0],[-0.0156,0.7968,0],[-0.0156,0.8124,0],[-0.0156,0.8282,0],[-0.0156,0.8438,0],[-0.0156,0.8594,0],[-0.0156,0.875,0],[-0.0156,0.8906,0],[-0.0156,0.9062,0],[-0.0156,0.9218,0],[-0.0156,0.9376,0],[-0.0156,0.9532,0],[-0.0156,0.9688,0],[-0.0156,0.9844,0],[0,-1,0],[0,-0.9844,0],[0,-0.9688,0],[0,-0.9532,0],[0,-0.9376,0],[0,-0.9218,0],[0,-0.9062,0],[0,-0.8906,0],[0,-0.875,0],[0,-0.8594,0],[0,-0.8438,0],[0,-0.8282,0],[0,-0.8124,0],[0,-0.7968,0],[0,-0.7812,0],[0,-0.7656,0],[0,-0.75,0],[0,-0.7344,0],[0,-0.7188,0],[0,-0.7032,0],[0,-0.6876,0],[0,-0.6718,0],[0,-0.6562,0],[0,-0.6406,0],[0,-0.625,0],[0,-0.6094,0],[0,-0.5938,0],[0,-0.5782,0],[0,-0.5624,0],[0,-0.5468,0],[0,-0.5312,0],[0,-0.5156,0],[0,-0.5,0],[0,-0.4844,0],[0,-0.4688,0],[0,-0.4532,0],[0,-0.4376,0],[0,-0.4218,0],[0,-0.4062,0],[0,-0.3906,0],[0,-0.375,0],[0,-0.3594,0],[0,-0.3438,0],[0,-0.3282,0],[0,-0.3124,0],[0,-0.2968,0],[0,-0.2812,0],[0,-0.2656,0],[0,-0.25,0],[0,-0.2344,0],[0,-0.2188,0],[0,-0.2032,0],[0,-0.1876,0],[0,-0.1718,0],[0,-0.1562,0],[0,-0.1406,0],[0,-0.125,0],[0,-0.1094,0],[0,-0.0938,0],[0,-0.0782,0],[0,-0.0624,0],[0,-0.0468,0],[0,-0.0312,0],[0,-0.0156,0],[0,0,0],[0,0.0156,0],[0,0.0312,0],[0,0.0468,0],[0,0.0624,0],[0,0.0782,0],[0,0.0938,0],[0,0.1094,0],[0,0.125,0],[0,0.1406,0],[0,0.1562,0],[0,0.1718,0],[0,0.1876,0],[0,0.2032,0],[0,0.2188,0],[0,0.2344,0],[0,0.25,0],[0,0.2656,0],[0,0.2812,0],[0,0.2968,0],[0,0.3124,0],[0,0.3282,0],[0,0.3438,0],[0,0.3594,0],[0,0.375,0],[0,0.3906,0],[0,0.4062,0],[0,0.4218,0],[0,0.4376,0],[0,0.4532,0],[0,0.4688,0],[0,0.4844,0],[0,0.5,0],[0,0.5156,0],[0,0.5312,0],[0,0.5468,0],[0,0.5624,0],[0,0.5782,0],[0,0.5938,0],[0,0.6094,0],[0,0.625,0],[0,0.6406,0],[0,0.6562,0],[0,0.6718,0],[0,0.6876,0],[0,0.7032,0],[0,0.7188,0],[0,0.7344,0],[0,0.75,0],[0,0.7656,0],[0,0.7812,0],[0,0.7968,0],[0,0.8124,0],[0,0.8282,0],[0,0.8438,0],[0,0.8594,0],[0,0.875,0],[0,0.8906,0],[0,0.9062,0],[0,0.9218,0],[0,0.9376,0],[0,0.9532,0],[0,0.9688,0],[0,0.9844,0],[0.0156,-1,0],[0.0156,-0.9844,0],[0.0156,-0.9688,0],[0.0156,-0.9532,0],[0.0156,-0.9376,0],[0.0156,-0.9218,0],[0.0156,-0.9062,0],[0.0156,-0.8906,0],[0.0156,-0.875,0],[0.0156,-0.8594,0],[0.0156,-0.8438,0],[0.0156,-0.8282,0],[0.0156,-0.8124,0],[0.0156,-0.7968,0],[0.0156,-0.7812,0],[0.0156,-0.7656,0],[0.0156,-0.75,0],[0.0156,-0.7344,0],[0.0156,-0.7188,0],[0.0156,-0.7032,0],[0.0156,-0.6876,0],[0.0156,-0.6718,0],[0.0156,-0.6562,0],[0.0156,-0.6406,0],[0.0156,-0.625,0],[0.0156,-0.6094,0],[0.0156,-0.5938,0],[0.0156,-0.5782,0],[0.0156,-0.5624,0],[0.0156,-0.5468,0],[0.0156,-0.5312,0],[0.0156,-0.5156,0],[0.0156,-0.5,0],[0.0156,-0.4844,0],[0.0156,-0.4688,0],[0.0156,-0.4532,0],[0.0156,-0.4376,0],[0.0156,-0.4218,0],[0.0156,-0.4062,0],[0.0156,-0.3906,0],[0.0156,-0.375,0],[0.0156,-0.3594,0],[0.0156,-0.3438,0],[0.0156,-0.3282,0],[0.0156,-0.3124,0],[0.0156,-0.2968,0],[0.0156,-0.2812,0],[0.0156,-0.2656,0],[0.0156,-0.25,0],[0.0156,-0.2344,0],[0.0156,-0.2188,0],[0.0156,-0.2032,0],[0.0156,-0.1876,0],[0.0156,-0.1718,0],[0.0156,-0.1562,0],[0.0156,-0.1406,0],[0.0156,-0.125,0],[0.0156,-0.1094,0],[0.0156,-0.0938,0],[0.0156,-0.0782,0],[0.0156,-0.0624,0],[0.0156,-0.0468,0],[0.0156,-0.0312,0],[0.0156,-0.0156,0],[0.0156,0,0],[0.0156,0.0156,0],[0.0156,0.0312,0],[0.0156,0.0468,0],[0.0156,0.0624,0],[0.0156,0.0782,0],[0.0156,0.0938,0],[0.0156,0.1094,0],[0.0156,0.125,0],[0.0156,0.1406,0],[0.0156,0.1562,0],[0.0156,0.1718,0],[0.0156,0.1876,0],[0.0156,0.2032,0],[0.0156,0.2188,0],[0.0156,0.2344,0],[0.0156,0.25,0],[0.0156,0.2656,0],[0.0156,0.2812,0],[0.0156,0.2968,0],[0.0156,0.3124,0],[0.0156,0.3282,0],[0.0156,0.3438,0],[0.0156,0.3594,0],[0.0156,0.375,0],[0.0156,0.3906,0],[0.0156,0.4062,0],[0.0156,0.4218,0],[0.0156,0.4376,0],[0.0156,0.4532,0],[0.0156,0.4688,0],[0.0156,0.4844,0],[0.0156,0.5,0],[0.0156,0.5156,0],[0.0156,0.5312,0],[0.0156,0.5468,0],[0.0156,0.5624,0],[0.0156,0.5782,0],[0.0156,0.5938,0],[0.0156,0.6094,0],[0.0156,0.625,0],[0.0156,0.6406,0],[0.0156,0.6562,0],[0.0156,0.6718,0],[0.0156,0.6876,0],[0.0156,0.7032,0],[0.0156,0.7188,0],[0.0156,0.7344,0],[0.0156,0.75,0],[0.0156,0.7656,0],[0.0156,0.7812,0],[0.0156,0.7968,0],[0.0156,0.8124,0],[0.0156,0.8282,0],[0.0156,0.8438,0],[0.0156,0.8594,0],[0.0156,0.875,0],[0.0156,0.8906,0],[0.0156,0.9062,0],[0.0156,0.9218,0],[0.0156,0.9376,0],[0.0156,0.9532,0],[0.0156,0.9688,0],[0.0156,0.9844,0],[0.0312,-1,0],[0.0312,-0.9844,0],[0.0312,-0.9688,0],[0.0312,-0.9532,0],[0.0312,-0.9376,0],[0.0312,-0.9218,0],[0.0312,-0.9062,0],[0.0312,-0.8906,0],[0.0312,-0.875,0],[0.0312,-0.8594,0],[0.0312,-0.8438,0],[0.0312,-0.8282,0],[0.0312,-0.8124,0],[0.0312,-0.7968,0],[0.0312,-0.7812,0],[0.0312,-0.7656,0],[0.0312,-0.75,0],[0.0312,-0.7344,0],[0.0312,-0.7188,0],[0.0312,-0.7032,0],[0.0312,-0.6876,0],[0.0312,-0.6718,0],[0.0312,-0.6562,0],[0.0312,-0.6406,0],[0.0312,-0.625,0],[0.0312,-0.6094,0],[0.0312,-0.5938,0],[0.0312,-0.5782,0],[0.0312,-0.5624,0],[0.0312,-0.5468,0],[0.0312,-0.5312,0],[0.0312,-0.5156,0],[0.0312,-0.5,0],[0.0312,-0.4844,0],[0.0312,-0.4688,0],[0.0312,-0.4532,0],[0.0312,-0.4376,0],[0.0312,-0.4218,0],[0.0312,-0.4062,0],[0.0312,-0.3906,0],[0.0312,-0.375,0],[0.0312,-0.3594,0],[0.0312,-0.3438,0],[0.0312,-0.3282,0],[0.0312,-0.3124,0],[0.0312,-0.2968,0],[0.0312,-0.2812,0],[0.0312,-0.2656,0],[0.0312,-0.25,0],[0.0312,-0.2344,0],[0.0312,-0.2188,0],[0.0312,-0.2032,0],[0.0312,-0.1876,0],[0.0312,-0.1718,0],[0.0312,-0.1562,0],[0.0312,-0.1406,0],[0.0312,-0.125,0],[0.0312,-0.1094,0],[0.0312,-0.0938,0],[0.0312,-0.0782,0],[0.0312,-0.0624,0],[0.0312,-0.0468,0],[0.0312,-0.0312,0],[0.0312,-0.0156,0],[0.0312,0,0],[0.0312,0.0156,0],[0.0312,0.0312,0],[0.0312,0.0468,0],[0.0312,0.0624,0],[0.0312,0.0782,0],[0.0312,0.0938,0],[0.0312,0.1094,0],[0.0312,0.125,0],[0.0312,0.1406,0],[0.0312,0.1562,0],[0.0312,0.1718,0],[0.0312,0.1876,0],[0.0312,0.2032,0],[0.0312,0.2188,0],[0.0312,0.2344,0],[0.0312,0.25,0],[0.0312,0.2656,0],[0.0312,0.2812,0],[0.0312,0.2968,0],[0.0312,0.3124,0],[0.0312,0.3282,0],[0.0312,0.3438,0],[0.0312,0.3594,0],[0.0312,0.375,0],[0.0312,0.3906,0],[0.0312,0.4062,0],[0.0312,0.4218,0],[0.0312,0.4376,0],[0.0312,0.4532,0],[0.0312,0.4688,0],[0.0312,0.4844,0],[0.0312,0.5,0],[0.0312,0.5156,0],[0.0312,0.5312,0],[0.0312,0.5468,0],[0.0312,0.5624,0],[0.0312,0.5782,0],[0.0312,0.5938,0],[0.0312,0.6094,0],[0.0312,0.625,0],[0.0312,0.6406,0],[0.0312,0.6562,0],[0.0312,0.6718,0],[0.0312,0.6876,0],[0.0312,0.7032,0],[0.0312,0.7188,0],[0.0312,0.7344,0],[0.0312,0.75,0],[0.0312,0.7656,0],[0.0312,0.7812,0],[0.0312,0.7968,0],[0.0312,0.8124,0],[0.0312,0.8282,0],[0.0312,0.8438,0],[0.0312,0.8594,0],[0.0312,0.875,0],[0.0312,0.8906,0],[0.0312,0.9062,0],[0.0312,0.9218,0],[0.0312,0.9376,0],[0.0312,0.9532,0],[0.0312,0.9688,0],[0.0312,0.9844,0],[0.0468,-1,0],[0.0468,-0.9844,0],[0.0468,-0.9688,0],[0.0468,-0.9532,0],[0.0468,-0.9376,0],[0.0468,-0.9218,0],[0.0468,-0.9062,0],[0.0468,-0.8906,0],[0.0468,-0.875,0],[0.0468,-0.8594,0],[0.0468,-0.8438,0],[0.0468,-0.8282,0],[0.0468,-0.8124,0],[0.0468,-0.7968,0],[0.0468,-0.7812,0],[0.0468,-0.7656,0],[0.0468,-0.75,0],[0.0468,-0.7344,0],[0.0468,-0.7188,0],[0.0468,-0.7032,0],[0.0468,-0.6876,0],[0.0468,-0.6718,0],[0.0468,-0.6562,0],[0.0468,-0.6406,0],[0.0468,-0.625,0],[0.0468,-0.6094,0],[0.0468,-0.5938,0],[0.0468,-0.5782,0],[0.0468,-0.5624,0],[0.0468,-0.5468,0],[0.0468,-0.5312,0],[0.0468,-0.5156,0],[0.0468,-0.5,0],[0.0468,-0.4844,0],[0.0468,-0.4688,0],[0.0468,-0.4532,0],[0.0468,-0.4376,0],[0.0468,-0.4218,0],[0.0468,-0.4062,0],[0.0468,-0.3906,0],[0.0468,-0.375,0],[0.0468,-0.3594,0],[0.0468,-0.3438,0],[0.0468,-0.3282,0],[0.0468,-0.3124,0],[0.0468,-0.2968,0],[0.0468,-0.2812,0],[0.0468,-0.2656,0],[0.0468,-0.25,0],[0.0468,-0.2344,0],[0.0468,-0.2188,0],[0.0468,-0.2032,0],[0.0468,-0.1876,0],[0.0468,-0.1718,0],[0.0468,-0.1562,0],[0.0468,-0.1406,0],[0.0468,-0.125,0],[0.0468,-0.1094,0],[0.0468,-0.0938,0],[0.0468,-0.0782,0],[0.0468,-0.0624,0],[0.0468,-0.0468,0],[0.0468,-0.0312,0],[0.0468,-0.0156,0],[0.0468,0,0],[0.0468,0.0156,0],[0.0468,0.0312,0],[0.0468,0.0468,0],[0.0468,0.0624,0],[0.0468,0.0782,0],[0.0468,0.0938,0],[0.0468,0.1094,0],[0.0468,0.125,0],[0.0468,0.1406,0],[0.0468,0.1562,0],[0.0468,0.1718,0],[0.0468,0.1876,0],[0.0468,0.2032,0],[0.0468,0.2188,0],[0.0468,0.2344,0],[0.0468,0.25,0],[0.0468,0.2656,0],[0.0468,0.2812,0],[0.0468,0.2968,0],[0.0468,0.3124,0],[0.0468,0.3282,0],[0.0468,0.3438,0],[0.0468,0.3594,0],[0.0468,0.375,0],[0.0468,0.3906,0],[0.0468,0.4062,0],[0.0468,0.4218,0],[0.0468,0.4376,0],[0.0468,0.4532,0],[0.0468,0.4688,0],[0.0468,0.4844,0],[0.0468,0.5,0],[0.0468,0.5156,0],[0.0468,0.5312,0],[0.0468,0.5468,0],[0.0468,0.5624,0],[0.0468,0.5782,0],[0.0468,0.5938,0],[0.0468,0.6094,0],[0.0468,0.625,0],[0.0468,0.6406,0],[0.0468,0.6562,0],[0.0468,0.6718,0],[0.0468,0.6876,0],[0.0468,0.7032,0],[0.0468,0.7188,0],[0.0468,0.7344,0],[0.0468,0.75,0],[0.0468,0.7656,0],[0.0468,0.7812,0],[0.0468,0.7968,0],[0.0468,0.8124,0],[0.0468,0.8282,0],[0.0468,0.8438,0],[0.0468,0.8594,0],[0.0468,0.875,0],[0.0468,0.8906,0],[0.0468,0.9062,0],[0.0468,0.9218,0],[0.0468,0.9376,0],[0.0468,0.9532,0],[0.0468,0.9688,0],[0.0468,0.9844,0],[0.0624,-1,0],[0.0624,-0.9844,0],[0.0624,-0.9688,0],[0.0624,-0.9532,0],[0.0624,-0.9376,0],[0.0624,-0.9218,0],[0.0624,-0.9062,0],[0.0624,-0.8906,0],[0.0624,-0.875,0],[0.0624,-0.8594,0],[0.0624,-0.8438,0],[0.0624,-0.8282,0],[0.0624,-0.8124,0],[0.0624,-0.7968,0],[0.0624,-0.7812,0],[0.0624,-0.7656,0],[0.0624,-0.75,0],[0.0624,-0.7344,0],[0.0624,-0.7188,0],[0.0624,-0.7032,0],[0.0624,-0.6876,0],[0.0624,-0.6718,0],[0.0624,-0.6562,0],[0.0624,-0.6406,0],[0.0624,-0.625,0],[0.0624,-0.6094,0],[0.0624,-0.5938,0],[0.0624,-0.5782,0],[0.0624,-0.5624,0],[0.0624,-0.5468,0],[0.0624,-0.5312,0],[0.0624,-0.5156,0],[0.0624,-0.5,0],[0.0624,-0.4844,0],[0.0624,-0.4688,0],[0.0624,-0.4532,0],[0.0624,-0.4376,0],[0.0624,-0.4218,0],[0.0624,-0.4062,0],[0.0624,-0.3906,0],[0.0624,-0.375,0],[0.0624,-0.3594,0],[0.0624,-0.3438,0],[0.0624,-0.3282,0],[0.0624,-0.3124,0],[0.0624,-0.2968,0],[0.0624,-0.2812,0],[0.0624,-0.2656,0],[0.0624,-0.25,0],[0.0624,-0.2344,0],[0.0624,-0.2188,0],[0.0624,-0.2032,0],[0.0624,-0.1876,0],[0.0624,-0.1718,0],[0.0624,-0.1562,0],[0.0624,-0.1406,0],[0.0624,-0.125,0],[0.0624,-0.1094,0],[0.0624,-0.0938,0],[0.0624,-0.0782,0],[0.0624,-0.0624,0],[0.0624,-0.0468,0],[0.0624,-0.0312,0],[0.0624,-0.0156,0],[0.0624,0,0],[0.0624,0.0156,0],[0.0624,0.0312,0],[0.0624,0.0468,0],[0.0624,0.0624,0],[0.0624,0.0782,0],[0.0624,0.0938,0],[0.0624,0.1094,0],[0.0624,0.125,0],[0.0624,0.1406,0],[0.0624,0.1562,0],[0.0624,0.1718,0],[0.0624,0.1876,0],[0.0624,0.2032,0],[0.0624,0.2188,0],[0.0624,0.2344,0],[0.0624,0.25,0],[0.0624,0.2656,0],[0.0624,0.2812,0],[0.0624,0.2968,0],[0.0624,0.3124,0],[0.0624,0.3282,0],[0.0624,0.3438,0],[0.0624,0.3594,0],[0.0624,0.375,0],[0.0624,0.3906,0],[0.0624,0.4062,0],[0.0624,0.4218,0],[0.0624,0.4376,0],[0.0624,0.4532,0],[0.0624,0.4688,0],[0.0624,0.4844,0],[0.0624,0.5,0],[0.0624,0.5156,0],[0.0624,0.5312,0],[0.0624,0.5468,0],[0.0624,0.5624,0],[0.0624,0.5782,0],[0.0624,0.5938,0],[0.0624,0.6094,0],[0.0624,0.625,0],[0.0624,0.6406,0],[0.0624,0.6562,0],[0.0624,0.6718,0],[0.0624,0.6876,0],[0.0624,0.7032,0],[0.0624,0.7188,0],[0.0624,0.7344,0],[0.0624,0.75,0],[0.0624,0.7656,0],[0.0624,0.7812,0],[0.0624,0.7968,0],[0.0624,0.8124,0],[0.0624,0.8282,0],[0.0624,0.8438,0],[0.0624,0.8594,0],[0.0624,0.875,0],[0.0624,0.8906,0],[0.0624,0.9062,0],[0.0624,0.9218,0],[0.0624,0.9376,0],[0.0624,0.9532,0],[0.0624,0.9688,0],[0.0624,0.9844,0],[0.0782,-1,0],[0.0782,-0.9844,0],[0.0782,-0.9688,0],[0.0782,-0.9532,0],[0.0782,-0.9376,0],[0.0782,-0.9218,0],[0.0782,-0.9062,0],[0.0782,-0.8906,0],[0.0782,-0.875,0],[0.0782,-0.8594,0],[0.0782,-0.8438,0],[0.0782,-0.8282,0],[0.0782,-0.8124,0],[0.0782,-0.7968,0],[0.0782,-0.7812,0],[0.0782,-0.7656,0],[0.0782,-0.75,0],[0.0782,-0.7344,0],[0.0782,-0.7188,0],[0.0782,-0.7032,0],[0.0782,-0.6876,0],[0.0782,-0.6718,0],[0.0782,-0.6562,0],[0.0782,-0.6406,0],[0.0782,-0.625,0],[0.0782,-0.6094,0],[0.0782,-0.5938,0],[0.0782,-0.5782,0],[0.0782,-0.5624,0],[0.0782,-0.5468,0],[0.0782,-0.5312,0],[0.0782,-0.5156,0],[0.0782,-0.5,0],[0.0782,-0.4844,0],[0.0782,-0.4688,0],[0.0782,-0.4532,0],[0.0782,-0.4376,0],[0.0782,-0.4218,0],[0.0782,-0.4062,0],[0.0782,-0.3906,0],[0.0782,-0.375,0],[0.0782,-0.3594,0],[0.0782,-0.3438,0],[0.0782,-0.3282,0],[0.0782,-0.3124,0],[0.0782,-0.2968,0],[0.0782,-0.2812,0],[0.0782,-0.2656,0],[0.0782,-0.25,0],[0.0782,-0.2344,0],[0.0782,-0.2188,0],[0.0782,-0.2032,0],[0.0782,-0.1876,0],[0.0782,-0.1718,0],[0.0782,-0.1562,0],[0.0782,-0.1406,0],[0.0782,-0.125,0],[0.0782,-0.1094,0],[0.0782,-0.0938,0],[0.0782,-0.0782,0],[0.0782,-0.0624,0],[0.0782,-0.0468,0],[0.0782,-0.0312,0],[0.0782,-0.0156,0],[0.0782,0,0],[0.0782,0.0156,0],[0.0782,0.0312,0],[0.0782,0.0468,0],[0.0782,0.0624,0],[0.0782,0.0782,0],[0.0782,0.0938,0],[0.0782,0.1094,0],[0.0782,0.125,0],[0.0782,0.1406,0],[0.0782,0.1562,0],[0.0782,0.1718,0],[0.0782,0.1876,0],[0.0782,0.2032,0],[0.0782,0.2188,0],[0.0782,0.2344,0],[0.0782,0.25,0],[0.0782,0.2656,0],[0.0782,0.2812,0],[0.0782,0.2968,0],[0.0782,0.3124,0],[0.0782,0.3282,0],[0.0782,0.3438,0],[0.0782,0.3594,0],[0.0782,0.375,0],[0.0782,0.3906,0],[0.0782,0.4062,0],[0.0782,0.4218,0],[0.0782,0.4376,0],[0.0782,0.4532,0],[0.0782,0.4688,0],[0.0782,0.4844,0],[0.0782,0.5,0],[0.0782,0.5156,0],[0.0782,0.5312,0],[0.0782,0.5468,0],[0.0782,0.5624,0],[0.0782,0.5782,0],[0.0782,0.5938,0],[0.0782,0.6094,0],[0.0782,0.625,0],[0.0782,0.6406,0],[0.0782,0.6562,0],[0.0782,0.6718,0],[0.0782,0.6876,0],[0.0782,0.7032,0],[0.0782,0.7188,0],[0.0782,0.7344,0],[0.0782,0.75,0],[0.0782,0.7656,0],[0.0782,0.7812,0],[0.0782,0.7968,0],[0.0782,0.8124,0],[0.0782,0.8282,0],[0.0782,0.8438,0],[0.0782,0.8594,0],[0.0782,0.875,0],[0.0782,0.8906,0],[0.0782,0.9062,0],[0.0782,0.9218,0],[0.0782,0.9376,0],[0.0782,0.9532,0],[0.0782,0.9688,0],[0.0782,0.9844,0],[0.0938,-1,0],[0.0938,-0.9844,0],[0.0938,-0.9688,0],[0.0938,-0.9532,0],[0.0938,-0.9376,0],[0.0938,-0.9218,0],[0.0938,-0.9062,0],[0.0938,-0.8906,0],[0.0938,-0.875,0],[0.0938,-0.8594,0],[0.0938,-0.8438,0],[0.0938,-0.8282,0],[0.0938,-0.8124,0],[0.0938,-0.7968,0],[0.0938,-0.7812,0],[0.0938,-0.7656,0],[0.0938,-0.75,0],[0.0938,-0.7344,0],[0.0938,-0.7188,0],[0.0938,-0.7032,0],[0.0938,-0.6876,0],[0.0938,-0.6718,0],[0.0938,-0.6562,0],[0.0938,-0.6406,0],[0.0938,-0.625,0],[0.0938,-0.6094,0],[0.0938,-0.5938,0],[0.0938,-0.5782,0],[0.0938,-0.5624,0],[0.0938,-0.5468,0],[0.0938,-0.5312,0],[0.0938,-0.5156,0],[0.0938,-0.5,0],[0.0938,-0.4844,0],[0.0938,-0.4688,0],[0.0938,-0.4532,0],[0.0938,-0.4376,0],[0.0938,-0.4218,0],[0.0938,-0.4062,0],[0.0938,-0.3906,0],[0.0938,-0.375,0],[0.0938,-0.3594,0],[0.0938,-0.3438,0],[0.0938,-0.3282,0],[0.0938,-0.3124,0],[0.0938,-0.2968,0],[0.0938,-0.2812,0],[0.0938,-0.2656,0],[0.0938,-0.25,0],[0.0938,-0.2344,0],[0.0938,-0.2188,0],[0.0938,-0.2032,0],[0.0938,-0.1876,0],[0.0938,-0.1718,0],[0.0938,-0.1562,0],[0.0938,-0.1406,0],[0.0938,-0.125,0],[0.0938,-0.1094,0],[0.0938,-0.0938,0],[0.0938,-0.0782,0],[0.0938,-0.0624,0],[0.0938,-0.0468,0],[0.0938,-0.0312,0],[0.0938,-0.0156,0],[0.0938,0,0],[0.0938,0.0156,0],[0.0938,0.0312,0],[0.0938,0.0468,0],[0.0938,0.0624,0],[0.0938,0.0782,0],[0.0938,0.0938,0],[0.0938,0.1094,0],[0.0938,0.125,0],[0.0938,0.1406,0],[0.0938,0.1562,0],[0.0938,0.1718,0],[0.0938,0.1876,0],[0.0938,0.2032,0],[0.0938,0.2188,0],[0.0938,0.2344,0],[0.0938,0.25,0],[0.0938,0.2656,0],[0.0938,0.2812,0],[0.0938,0.2968,0],[0.0938,0.3124,0],[0.0938,0.3282,0],[0.0938,0.3438,0],[0.0938,0.3594,0],[0.0938,0.375,0],[0.0938,0.3906,0],[0.0938,0.4062,0],[0.0938,0.4218,0],[0.0938,0.4376,0],[0.0938,0.4532,0],[0.0938,0.4688,0],[0.0938,0.4844,0],[0.0938,0.5,0],[0.0938,0.5156,0],[0.0938,0.5312,0],[0.0938,0.5468,0],[0.0938,0.5624,0],[0.0938,0.5782,0],[0.0938,0.5938,0],[0.0938,0.6094,0],[0.0938,0.625,0],[0.0938,0.6406,0],[0.0938,0.6562,0],[0.0938,0.6718,0],[0.0938,0.6876,0],[0.0938,0.7032,0],[0.0938,0.7188,0],[0.0938,0.7344,0],[0.0938,0.75,0],[0.0938,0.7656,0],[0.0938,0.7812,0],[0.0938,0.7968,0],[0.0938,0.8124,0],[0.0938,0.8282,0],[0.0938,0.8438,0],[0.0938,0.8594,0],[0.0938,0.875,0],[0.0938,0.8906,0],[0.0938,0.9062,0],[0.0938,0.9218,0],[0.0938,0.9376,0],[0.0938,0.9532,0],[0.0938,0.9688,0],[0.0938,0.9844,0],[0.1094,-1,0],[0.1094,-0.9844,0],[0.1094,-0.9688,0],[0.1094,-0.9532,0],[0.1094,-0.9376,0],[0.1094,-0.9218,0],[0.1094,-0.9062,0],[0.1094,-0.8906,0],[0.1094,-0.875,0],[0.1094,-0.8594,0],[0.1094,-0.8438,0],[0.1094,-0.8282,0],[0.1094,-0.8124,0],[0.1094,-0.7968,0],[0.1094,-0.7812,0],[0.1094,-0.7656,0],[0.1094,-0.75,0],[0.1094,-0.7344,0],[0.1094,-0.7188,0],[0.1094,-0.7032,0],[0.1094,-0.6876,0],[0.1094,-0.6718,0],[0.1094,-0.6562,0],[0.1094,-0.6406,0],[0.1094,-0.625,0],[0.1094,-0.6094,0],[0.1094,-0.5938,0],[0.1094,-0.5782,0],[0.1094,-0.5624,0],[0.1094,-0.5468,0],[0.1094,-0.5312,0],[0.1094,-0.5156,0],[0.1094,-0.5,0],[0.1094,-0.4844,0],[0.1094,-0.4688,0],[0.1094,-0.4532,0],[0.1094,-0.4376,0],[0.1094,-0.4218,0],[0.1094,-0.4062,0],[0.1094,-0.3906,0],[0.1094,-0.375,0],[0.1094,-0.3594,0],[0.1094,-0.3438,0],[0.1094,-0.3282,0],[0.1094,-0.3124,0],[0.1094,-0.2968,0],[0.1094,-0.2812,0],[0.1094,-0.2656,0],[0.1094,-0.25,0],[0.1094,-0.2344,0],[0.1094,-0.2188,0],[0.1094,-0.2032,0],[0.1094,-0.1876,0],[0.1094,-0.1718,0],[0.1094,-0.1562,0],[0.1094,-0.1406,0],[0.1094,-0.125,0],[0.1094,-0.1094,0],[0.1094,-0.0938,0],[0.1094,-0.0782,0],[0.1094,-0.0624,0],[0.1094,-0.0468,0],[0.1094,-0.0312,0],[0.1094,-0.0156,0],[0.1094,0,0],[0.1094,0.0156,0],[0.1094,0.0312,0],[0.1094,0.0468,0],[0.1094,0.0624,0],[0.1094,0.0782,0],[0.1094,0.0938,0],[0.1094,0.1094,0],[0.1094,0.125,0],[0.1094,0.1406,0],[0.1094,0.1562,0],[0.1094,0.1718,0],[0.1094,0.1876,0],[0.1094,0.2032,0],[0.1094,0.2188,0],[0.1094,0.2344,0],[0.1094,0.25,0],[0.1094,0.2656,0],[0.1094,0.2812,0],[0.1094,0.2968,0],[0.1094,0.3124,0],[0.1094,0.3282,0],[0.1094,0.3438,0],[0.1094,0.3594,0],[0.1094,0.375,0],[0.1094,0.3906,0],[0.1094,0.4062,0],[0.1094,0.4218,0],[0.1094,0.4376,0],[0.1094,0.4532,0],[0.1094,0.4688,0],[0.1094,0.4844,0],[0.1094,0.5,0],[0.1094,0.5156,0],[0.1094,0.5312,0],[0.1094,0.5468,0],[0.1094,0.5624,0],[0.1094,0.5782,0],[0.1094,0.5938,0],[0.1094,0.6094,0],[0.1094,0.625,0],[0.1094,0.6406,0],[0.1094,0.6562,0],[0.1094,0.6718,0],[0.1094,0.6876,0],[0.1094,0.7032,0],[0.1094,0.7188,0],[0.1094,0.7344,0],[0.1094,0.75,0],[0.1094,0.7656,0],[0.1094,0.7812,0],[0.1094,0.7968,0],[0.1094,0.8124,0],[0.1094,0.8282,0],[0.1094,0.8438,0],[0.1094,0.8594,0],[0.1094,0.875,0],[0.1094,0.8906,0],[0.1094,0.9062,0],[0.1094,0.9218,0],[0.1094,0.9376,0],[0.1094,0.9532,0],[0.1094,0.9688,0],[0.1094,0.9844,0],[0.125,-1,0],[0.125,-0.9844,0],[0.125,-0.9688,0],[0.125,-0.9532,0],[0.125,-0.9376,0],[0.125,-0.9218,0],[0.125,-0.9062,0],[0.125,-0.8906,0],[0.125,-0.875,0],[0.125,-0.8594,0],[0.125,-0.8438,0],[0.125,-0.8282,0],[0.125,-0.8124,0],[0.125,-0.7968,0],[0.125,-0.7812,0],[0.125,-0.7656,0],[0.125,-0.75,0],[0.125,-0.7344,0],[0.125,-0.7188,0],[0.125,-0.7032,0],[0.125,-0.6876,0],[0.125,-0.6718,0],[0.125,-0.6562,0],[0.125,-0.6406,0],[0.125,-0.625,0],[0.125,-0.6094,0],[0.125,-0.5938,0],[0.125,-0.5782,0],[0.125,-0.5624,0],[0.125,-0.5468,0],[0.125,-0.5312,0],[0.125,-0.5156,0],[0.125,-0.5,0],[0.125,-0.4844,0],[0.125,-0.4688,0],[0.125,-0.4532,0],[0.125,-0.4376,0],[0.125,-0.4218,0],[0.125,-0.4062,0],[0.125,-0.3906,0],[0.125,-0.375,0],[0.125,-0.3594,0],[0.125,-0.3438,0],[0.125,-0.3282,0],[0.125,-0.3124,0],[0.125,-0.2968,0],[0.125,-0.2812,0],[0.125,-0.2656,0],[0.125,-0.25,0],[0.125,-0.2344,0],[0.125,-0.2188,0],[0.125,-0.2032,0],[0.125,-0.1876,0],[0.125,-0.1718,0],[0.125,-0.1562,0],[0.125,-0.1406,0],[0.125,-0.125,0],[0.125,-0.1094,0],[0.125,-0.0938,0],[0.125,-0.0782,0],[0.125,-0.0624,0],[0.125,-0.0468,0],[0.125,-0.0312,0],[0.125,-0.0156,0],[0.125,0,0],[0.125,0.0156,0],[0.125,0.0312,0],[0.125,0.0468,0],[0.125,0.0624,0],[0.125,0.0782,0],[0.125,0.0938,0],[0.125,0.1094,0],[0.125,0.125,0],[0.125,0.1406,0],[0.125,0.1562,0],[0.125,0.1718,0],[0.125,0.1876,0],[0.125,0.2032,0],[0.125,0.2188,0],[0.125,0.2344,0],[0.125,0.25,0],[0.125,0.2656,0],[0.125,0.2812,0],[0.125,0.2968,0],[0.125,0.3124,0],[0.125,0.3282,0],[0.125,0.3438,0],[0.125,0.3594,0],[0.125,0.375,0],[0.125,0.3906,0],[0.125,0.4062,0],[0.125,0.4218,0],[0.125,0.4376,0],[0.125,0.4532,0],[0.125,0.4688,0],[0.125,0.4844,0],[0.125,0.5,0],[0.125,0.5156,0],[0.125,0.5312,0],[0.125,0.5468,0],[0.125,0.5624,0],[0.125,0.5782,0],[0.125,0.5938,0],[0.125,0.6094,0],[0.125,0.625,0],[0.125,0.6406,0],[0.125,0.6562,0],[0.125,0.6718,0],[0.125,0.6876,0],[0.125,0.7032,0],[0.125,0.7188,0],[0.125,0.7344,0],[0.125,0.75,0],[0.125,0.7656,0],[0.125,0.7812,0],[0.125,0.7968,0],[0.125,0.8124,0],[0.125,0.8282,0],[0.125,0.8438,0],[0.125,0.8594,0],[0.125,0.875,0],[0.125,0.8906,0],[0.125,0.9062,0],[0.125,0.9218,0],[0.125,0.9376,0],[0.125,0.9532,0],[0.125,0.9688,0],[0.125,0.9844,0],[0.1406,-1,0],[0.1406,-0.9844,0],[0.1406,-0.9688,0],[0.1406,-0.9532,0],[0.1406,-0.9376,0],[0.1406,-0.9218,0],[0.1406,-0.9062,0],[0.1406,-0.8906,0],[0.1406,-0.875,0],[0.1406,-0.8594,0],[0.1406,-0.8438,0],[0.1406,-0.8282,0],[0.1406,-0.8124,0],[0.1406,-0.7968,0],[0.1406,-0.7812,0],[0.1406,-0.7656,0],[0.1406,-0.75,0],[0.1406,-0.7344,0],[0.1406,-0.7188,0],[0.1406,-0.7032,0],[0.1406,-0.6876,0],[0.1406,-0.6718,0],[0.1406,-0.6562,0],[0.1406,-0.6406,0],[0.1406,-0.625,0],[0.1406,-0.6094,0],[0.1406,-0.5938,0],[0.1406,-0.5782,0],[0.1406,-0.5624,0],[0.1406,-0.5468,0],[0.1406,-0.5312,0],[0.1406,-0.5156,0],[0.1406,-0.5,0],[0.1406,-0.4844,0],[0.1406,-0.4688,0],[0.1406,-0.4532,0],[0.1406,-0.4376,0],[0.1406,-0.4218,0],[0.1406,-0.4062,0],[0.1406,-0.3906,0],[0.1406,-0.375,0],[0.1406,-0.3594,0],[0.1406,-0.3438,0],[0.1406,-0.3282,0],[0.1406,-0.3124,0],[0.1406,-0.2968,0],[0.1406,-0.2812,0],[0.1406,-0.2656,0],[0.1406,-0.25,0],[0.1406,-0.2344,0],[0.1406,-0.2188,0],[0.1406,-0.2032,0],[0.1406,-0.1876,0],[0.1406,-0.1718,0],[0.1406,-0.1562,0],[0.1406,-0.1406,0],[0.1406,-0.125,0],[0.1406,-0.1094,0],[0.1406,-0.0938,0],[0.1406,-0.0782,0],[0.1406,-0.0624,0],[0.1406,-0.0468,0],[0.1406,-0.0312,0],[0.1406,-0.0156,0],[0.1406,0,0],[0.1406,0.0156,0],[0.1406,0.0312,0],[0.1406,0.0468,0],[0.1406,0.0624,0],[0.1406,0.0782,0],[0.1406,0.0938,0],[0.1406,0.1094,0],[0.1406,0.125,0],[0.1406,0.1406,0],[0.1406,0.1562,0],[0.1406,0.1718,0],[0.1406,0.1876,0],[0.1406,0.2032,0],[0.1406,0.2188,0],[0.1406,0.2344,0],[0.1406,0.25,0],[0.1406,0.2656,0],[0.1406,0.2812,0],[0.1406,0.2968,0],[0.1406,0.3124,0],[0.1406,0.3282,0],[0.1406,0.3438,0],[0.1406,0.3594,0],[0.1406,0.375,0],[0.1406,0.3906,0],[0.1406,0.4062,0],[0.1406,0.4218,0],[0.1406,0.4376,0],[0.1406,0.4532,0],[0.1406,0.4688,0],[0.1406,0.4844,0],[0.1406,0.5,0],[0.1406,0.5156,0],[0.1406,0.5312,0],[0.1406,0.5468,0],[0.1406,0.5624,0],[0.1406,0.5782,0],[0.1406,0.5938,0],[0.1406,0.6094,0],[0.1406,0.625,0],[0.1406,0.6406,0],[0.1406,0.6562,0],[0.1406,0.6718,0],[0.1406,0.6876,0],[0.1406,0.7032,0],[0.1406,0.7188,0],[0.1406,0.7344,0],[0.1406,0.75,0],[0.1406,0.7656,0],[0.1406,0.7812,0],[0.1406,0.7968,0],[0.1406,0.8124,0],[0.1406,0.8282,0],[0.1406,0.8438,0],[0.1406,0.8594,0],[0.1406,0.875,0],[0.1406,0.8906,0],[0.1406,0.9062,0],[0.1406,0.9218,0],[0.1406,0.9376,0],[0.1406,0.9532,0],[0.1406,0.9688,0],[0.1406,0.9844,0],[0.1562,-1,0],[0.1562,-0.9844,0],[0.1562,-0.9688,0],[0.1562,-0.9532,0],[0.1562,-0.9376,0],[0.1562,-0.9218,0],[0.1562,-0.9062,0],[0.1562,-0.8906,0],[0.1562,-0.875,0],[0.1562,-0.8594,0],[0.1562,-0.8438,0],[0.1562,-0.8282,0],[0.1562,-0.8124,0],[0.1562,-0.7968,0],[0.1562,-0.7812,0],[0.1562,-0.7656,0],[0.1562,-0.75,0],[0.1562,-0.7344,0],[0.1562,-0.7188,0],[0.1562,-0.7032,0],[0.1562,-0.6876,0],[0.1562,-0.6718,0],[0.1562,-0.6562,0],[0.1562,-0.6406,0],[0.1562,-0.625,0],[0.1562,-0.6094,0],[0.1562,-0.5938,0],[0.1562,-0.5782,0],[0.1562,-0.5624,0],[0.1562,-0.5468,0],[0.1562,-0.5312,0],[0.1562,-0.5156,0],[0.1562,-0.5,0],[0.1562,-0.4844,0],[0.1562,-0.4688,0],[0.1562,-0.4532,0],[0.1562,-0.4376,0],[0.1562,-0.4218,0],[0.1562,-0.4062,0],[0.1562,-0.3906,0],[0.1562,-0.375,0],[0.1562,-0.3594,0],[0.1562,-0.3438,0],[0.1562,-0.3282,0],[0.1562,-0.3124,0],[0.1562,-0.2968,0],[0.1562,-0.2812,0],[0.1562,-0.2656,0],[0.1562,-0.25,0],[0.1562,-0.2344,0],[0.1562,-0.2188,0],[0.1562,-0.2032,0],[0.1562,-0.1876,0],[0.1562,-0.1718,0],[0.1562,-0.1562,0],[0.1562,-0.1406,0],[0.1562,-0.125,0],[0.1562,-0.1094,0],[0.1562,-0.0938,0],[0.1562,-0.0782,0],[0.1562,-0.0624,0],[0.1562,-0.0468,0],[0.1562,-0.0312,0],[0.1562,-0.0156,0],[0.1562,0,0],[0.1562,0.0156,0],[0.1562,0.0312,0],[0.1562,0.0468,0],[0.1562,0.0624,0],[0.1562,0.0782,0],[0.1562,0.0938,0],[0.1562,0.1094,0],[0.1562,0.125,0],[0.1562,0.1406,0],[0.1562,0.1562,0],[0.1562,0.1718,0],[0.1562,0.1876,0],[0.1562,0.2032,0],[0.1562,0.2188,0],[0.1562,0.2344,0],[0.1562,0.25,0],[0.1562,0.2656,0],[0.1562,0.2812,0],[0.1562,0.2968,0],[0.1562,0.3124,0],[0.1562,0.3282,0],[0.1562,0.3438,0],[0.1562,0.3594,0],[0.1562,0.375,0],[0.1562,0.3906,0],[0.1562,0.4062,0],[0.1562,0.4218,0],[0.1562,0.4376,0],[0.1562,0.4532,0],[0.1562,0.4688,0],[0.1562,0.4844,0],[0.1562,0.5,0],[0.1562,0.5156,0],[0.1562,0.5312,0],[0.1562,0.5468,0],[0.1562,0.5624,0],[0.1562,0.5782,0],[0.1562,0.5938,0],[0.1562,0.6094,0],[0.1562,0.625,0],[0.1562,0.6406,0],[0.1562,0.6562,0],[0.1562,0.6718,0],[0.1562,0.6876,0],[0.1562,0.7032,0],[0.1562,0.7188,0],[0.1562,0.7344,0],[0.1562,0.75,0],[0.1562,0.7656,0],[0.1562,0.7812,0],[0.1562,0.7968,0],[0.1562,0.8124,0],[0.1562,0.8282,0],[0.1562,0.8438,0],[0.1562,0.8594,0],[0.1562,0.875,0],[0.1562,0.8906,0],[0.1562,0.9062,0],[0.1562,0.9218,0],[0.1562,0.9376,0],[0.1562,0.9532,0],[0.1562,0.9688,0],[0.1562,0.9844,0],[0.1718,-1,0],[0.1718,-0.9844,0],[0.1718,-0.9688,0],[0.1718,-0.9532,0],[0.1718,-0.9376,0],[0.1718,-0.9218,0],[0.1718,-0.9062,0],[0.1718,-0.8906,0],[0.1718,-0.875,0],[0.1718,-0.8594,0],[0.1718,-0.8438,0],[0.1718,-0.8282,0],[0.1718,-0.8124,0],[0.1718,-0.7968,0],[0.1718,-0.7812,0],[0.1718,-0.7656,0],[0.1718,-0.75,0],[0.1718,-0.7344,0],[0.1718,-0.7188,0],[0.1718,-0.7032,0],[0.1718,-0.6876,0],[0.1718,-0.6718,0],[0.1718,-0.6562,0],[0.1718,-0.6406,0],[0.1718,-0.625,0],[0.1718,-0.6094,0],[0.1718,-0.5938,0],[0.1718,-0.5782,0],[0.1718,-0.5624,0],[0.1718,-0.5468,0],[0.1718,-0.5312,0],[0.1718,-0.5156,0],[0.1718,-0.5,0],[0.1718,-0.4844,0],[0.1718,-0.4688,0],[0.1718,-0.4532,0],[0.1718,-0.4376,0],[0.1718,-0.4218,0],[0.1718,-0.4062,0],[0.1718,-0.3906,0],[0.1718,-0.375,0],[0.1718,-0.3594,0],[0.1718,-0.3438,0],[0.1718,-0.3282,0],[0.1718,-0.3124,0],[0.1718,-0.2968,0],[0.1718,-0.2812,0],[0.1718,-0.2656,0],[0.1718,-0.25,0],[0.1718,-0.2344,0],[0.1718,-0.2188,0],[0.1718,-0.2032,0],[0.1718,-0.1876,0],[0.1718,-0.1718,0],[0.1718,-0.1562,0],[0.1718,-0.1406,0],[0.1718,-0.125,0],[0.1718,-0.1094,0],[0.1718,-0.0938,0],[0.1718,-0.0782,0],[0.1718,-0.0624,0],[0.1718,-0.0468,0],[0.1718,-0.0312,0],[0.1718,-0.0156,0],[0.1718,0,0],[0.1718,0.0156,0],[0.1718,0.0312,0],[0.1718,0.0468,0],[0.1718,0.0624,0],[0.1718,0.0782,0],[0.1718,0.0938,0],[0.1718,0.1094,0],[0.1718,0.125,0],[0.1718,0.1406,0],[0.1718,0.1562,0],[0.1718,0.1718,0],[0.1718,0.1876,0],[0.1718,0.2032,0],[0.1718,0.2188,0],[0.1718,0.2344,0],[0.1718,0.25,0],[0.1718,0.2656,0],[0.1718,0.2812,0],[0.1718,0.2968,0],[0.1718,0.3124,0],[0.1718,0.3282,0],[0.1718,0.3438,0],[0.1718,0.3594,0],[0.1718,0.375,0],[0.1718,0.3906,0],[0.1718,0.4062,0],[0.1718,0.4218,0],[0.1718,0.4376,0],[0.1718,0.4532,0],[0.1718,0.4688,0],[0.1718,0.4844,0],[0.1718,0.5,0],[0.1718,0.5156,0],[0.1718,0.5312,0],[0.1718,0.5468,0],[0.1718,0.5624,0],[0.1718,0.5782,0],[0.1718,0.5938,0],[0.1718,0.6094,0],[0.1718,0.625,0],[0.1718,0.6406,0],[0.1718,0.6562,0],[0.1718,0.6718,0],[0.1718,0.6876,0],[0.1718,0.7032,0],[0.1718,0.7188,0],[0.1718,0.7344,0],[0.1718,0.75,0],[0.1718,0.7656,0],[0.1718,0.7812,0],[0.1718,0.7968,0],[0.1718,0.8124,0],[0.1718,0.8282,0],[0.1718,0.8438,0],[0.1718,0.8594,0],[0.1718,0.875,0],[0.1718,0.8906,0],[0.1718,0.9062,0],[0.1718,0.9218,0],[0.1718,0.9376,0],[0.1718,0.9532,0],[0.1718,0.9688,0],[0.1718,0.9844,0],[0.1876,-1,0],[0.1876,-0.9844,0],[0.1876,-0.9688,0],[0.1876,-0.9532,0],[0.1876,-0.9376,0],[0.1876,-0.9218,0],[0.1876,-0.9062,0],[0.1876,-0.8906,0],[0.1876,-0.875,0],[0.1876,-0.8594,0],[0.1876,-0.8438,0],[0.1876,-0.8282,0],[0.1876,-0.8124,0],[0.1876,-0.7968,0],[0.1876,-0.7812,0],[0.1876,-0.7656,0],[0.1876,-0.75,0],[0.1876,-0.7344,0],[0.1876,-0.7188,0],[0.1876,-0.7032,0],[0.1876,-0.6876,0],[0.1876,-0.6718,0],[0.1876,-0.6562,0],[0.1876,-0.6406,0],[0.1876,-0.625,0],[0.1876,-0.6094,0],[0.1876,-0.5938,0],[0.1876,-0.5782,0],[0.1876,-0.5624,0],[0.1876,-0.5468,0],[0.1876,-0.5312,0],[0.1876,-0.5156,0],[0.1876,-0.5,0],[0.1876,-0.4844,0],[0.1876,-0.4688,0],[0.1876,-0.4532,0],[0.1876,-0.4376,0],[0.1876,-0.4218,0],[0.1876,-0.4062,0],[0.1876,-0.3906,0],[0.1876,-0.375,0],[0.1876,-0.3594,0],[0.1876,-0.3438,0],[0.1876,-0.3282,0],[0.1876,-0.3124,0],[0.1876,-0.2968,0],[0.1876,-0.2812,0],[0.1876,-0.2656,0],[0.1876,-0.25,0],[0.1876,-0.2344,0],[0.1876,-0.2188,0],[0.1876,-0.2032,0],[0.1876,-0.1876,0],[0.1876,-0.1718,0],[0.1876,-0.1562,0],[0.1876,-0.1406,0],[0.1876,-0.125,0],[0.1876,-0.1094,0],[0.1876,-0.0938,0],[0.1876,-0.0782,0],[0.1876,-0.0624,0],[0.1876,-0.0468,0],[0.1876,-0.0312,0],[0.1876,-0.0156,0],[0.1876,0,0],[0.1876,0.0156,0],[0.1876,0.0312,0],[0.1876,0.0468,0],[0.1876,0.0624,0],[0.1876,0.0782,0],[0.1876,0.0938,0],[0.1876,0.1094,0],[0.1876,0.125,0],[0.1876,0.1406,0],[0.1876,0.1562,0],[0.1876,0.1718,0],[0.1876,0.1876,0],[0.1876,0.2032,0],[0.1876,0.2188,0],[0.1876,0.2344,0],[0.1876,0.25,0],[0.1876,0.2656,0],[0.1876,0.2812,0],[0.1876,0.2968,0],[0.1876,0.3124,0],[0.1876,0.3282,0],[0.1876,0.3438,0],[0.1876,0.3594,0],[0.1876,0.375,0],[0.1876,0.3906,0],[0.1876,0.4062,0],[0.1876,0.4218,0],[0.1876,0.4376,0],[0.1876,0.4532,0],[0.1876,0.4688,0],[0.1876,0.4844,0],[0.1876,0.5,0],[0.1876,0.5156,0],[0.1876,0.5312,0],[0.1876,0.5468,0],[0.1876,0.5624,0],[0.1876,0.5782,0],[0.1876,0.5938,0],[0.1876,0.6094,0],[0.1876,0.625,0],[0.1876,0.6406,0],[0.1876,0.6562,0],[0.1876,0.6718,0],[0.1876,0.6876,0],[0.1876,0.7032,0],[0.1876,0.7188,0],[0.1876,0.7344,0],[0.1876,0.75,0],[0.1876,0.7656,0],[0.1876,0.7812,0],[0.1876,0.7968,0],[0.1876,0.8124,0],[0.1876,0.8282,0],[0.1876,0.8438,0],[0.1876,0.8594,0],[0.1876,0.875,0],[0.1876,0.8906,0],[0.1876,0.9062,0],[0.1876,0.9218,0],[0.1876,0.9376,0],[0.1876,0.9532,0],[0.1876,0.9688,0],[0.1876,0.9844,0],[0.2032,-1,0],[0.2032,-0.9844,0],[0.2032,-0.9688,0],[0.2032,-0.9532,0],[0.2032,-0.9376,0],[0.2032,-0.9218,0],[0.2032,-0.9062,0],[0.2032,-0.8906,0],[0.2032,-0.875,0],[0.2032,-0.8594,0],[0.2032,-0.8438,0],[0.2032,-0.8282,0],[0.2032,-0.8124,0],[0.2032,-0.7968,0],[0.2032,-0.7812,0],[0.2032,-0.7656,0],[0.2032,-0.75,0],[0.2032,-0.7344,0],[0.2032,-0.7188,0],[0.2032,-0.7032,0],[0.2032,-0.6876,0],[0.2032,-0.6718,0],[0.2032,-0.6562,0],[0.2032,-0.6406,0],[0.2032,-0.625,0],[0.2032,-0.6094,0],[0.2032,-0.5938,0],[0.2032,-0.5782,0],[0.2032,-0.5624,0],[0.2032,-0.5468,0],[0.2032,-0.5312,0],[0.2032,-0.5156,0],[0.2032,-0.5,0],[0.2032,-0.4844,0],[0.2032,-0.4688,0],[0.2032,-0.4532,0],[0.2032,-0.4376,0],[0.2032,-0.4218,0],[0.2032,-0.4062,0],[0.2032,-0.3906,0],[0.2032,-0.375,0],[0.2032,-0.3594,0],[0.2032,-0.3438,0],[0.2032,-0.3282,0],[0.2032,-0.3124,0],[0.2032,-0.2968,0],[0.2032,-0.2812,0],[0.2032,-0.2656,0],[0.2032,-0.25,0],[0.2032,-0.2344,0],[0.2032,-0.2188,0],[0.2032,-0.2032,0],[0.2032,-0.1876,0],[0.2032,-0.1718,0],[0.2032,-0.1562,0],[0.2032,-0.1406,0],[0.2032,-0.125,0],[0.2032,-0.1094,0],[0.2032,-0.0938,0],[0.2032,-0.0782,0],[0.2032,-0.0624,0],[0.2032,-0.0468,0],[0.2032,-0.0312,0],[0.2032,-0.0156,0],[0.2032,0,0],[0.2032,0.0156,0],[0.2032,0.0312,0],[0.2032,0.0468,0],[0.2032,0.0624,0],[0.2032,0.0782,0],[0.2032,0.0938,0],[0.2032,0.1094,0],[0.2032,0.125,0],[0.2032,0.1406,0],[0.2032,0.1562,0],[0.2032,0.1718,0],[0.2032,0.1876,0],[0.2032,0.2032,0],[0.2032,0.2188,0],[0.2032,0.2344,0],[0.2032,0.25,0],[0.2032,0.2656,0],[0.2032,0.2812,0],[0.2032,0.2968,0],[0.2032,0.3124,0],[0.2032,0.3282,0],[0.2032,0.3438,0],[0.2032,0.3594,0],[0.2032,0.375,0],[0.2032,0.3906,0],[0.2032,0.4062,0],[0.2032,0.4218,0],[0.2032,0.4376,0],[0.2032,0.4532,0],[0.2032,0.4688,0],[0.2032,0.4844,0],[0.2032,0.5,0],[0.2032,0.5156,0],[0.2032,0.5312,0],[0.2032,0.5468,0],[0.2032,0.5624,0],[0.2032,0.5782,0],[0.2032,0.5938,0],[0.2032,0.6094,0],[0.2032,0.625,0],[0.2032,0.6406,0],[0.2032,0.6562,0],[0.2032,0.6718,0],[0.2032,0.6876,0],[0.2032,0.7032,0],[0.2032,0.7188,0],[0.2032,0.7344,0],[0.2032,0.75,0],[0.2032,0.7656,0],[0.2032,0.7812,0],[0.2032,0.7968,0],[0.2032,0.8124,0],[0.2032,0.8282,0],[0.2032,0.8438,0],[0.2032,0.8594,0],[0.2032,0.875,0],[0.2032,0.8906,0],[0.2032,0.9062,0],[0.2032,0.9218,0],[0.2032,0.9376,0],[0.2032,0.9532,0],[0.2032,0.9688,0],[0.2032,0.9844,0],[0.2188,-1,0],[0.2188,-0.9844,0],[0.2188,-0.9688,0],[0.2188,-0.9532,0],[0.2188,-0.9376,0],[0.2188,-0.9218,0],[0.2188,-0.9062,0],[0.2188,-0.8906,0],[0.2188,-0.875,0],[0.2188,-0.8594,0],[0.2188,-0.8438,0],[0.2188,-0.8282,0],[0.2188,-0.8124,0],[0.2188,-0.7968,0],[0.2188,-0.7812,0],[0.2188,-0.7656,0],[0.2188,-0.75,0],[0.2188,-0.7344,0],[0.2188,-0.7188,0],[0.2188,-0.7032,0],[0.2188,-0.6876,0],[0.2188,-0.6718,0],[0.2188,-0.6562,0],[0.2188,-0.6406,0],[0.2188,-0.625,0],[0.2188,-0.6094,0],[0.2188,-0.5938,0],[0.2188,-0.5782,0],[0.2188,-0.5624,0],[0.2188,-0.5468,0],[0.2188,-0.5312,0],[0.2188,-0.5156,0],[0.2188,-0.5,0],[0.2188,-0.4844,0],[0.2188,-0.4688,0],[0.2188,-0.4532,0],[0.2188,-0.4376,0],[0.2188,-0.4218,0],[0.2188,-0.4062,0],[0.2188,-0.3906,0],[0.2188,-0.375,0],[0.2188,-0.3594,0],[0.2188,-0.3438,0],[0.2188,-0.3282,0],[0.2188,-0.3124,0],[0.2188,-0.2968,0],[0.2188,-0.2812,0],[0.2188,-0.2656,0],[0.2188,-0.25,0],[0.2188,-0.2344,0],[0.2188,-0.2188,0],[0.2188,-0.2032,0],[0.2188,-0.1876,0],[0.2188,-0.1718,0],[0.2188,-0.1562,0],[0.2188,-0.1406,0],[0.2188,-0.125,0],[0.2188,-0.1094,0],[0.2188,-0.0938,0],[0.2188,-0.0782,0],[0.2188,-0.0624,0],[0.2188,-0.0468,0],[0.2188,-0.0312,0],[0.2188,-0.0156,0],[0.2188,0,0],[0.2188,0.0156,0],[0.2188,0.0312,0],[0.2188,0.0468,0],[0.2188,0.0624,0],[0.2188,0.0782,0],[0.2188,0.0938,0],[0.2188,0.1094,0],[0.2188,0.125,0],[0.2188,0.1406,0],[0.2188,0.1562,0],[0.2188,0.1718,0],[0.2188,0.1876,0],[0.2188,0.2032,0],[0.2188,0.2188,0],[0.2188,0.2344,0],[0.2188,0.25,0],[0.2188,0.2656,0],[0.2188,0.2812,0],[0.2188,0.2968,0],[0.2188,0.3124,0],[0.2188,0.3282,0],[0.2188,0.3438,0],[0.2188,0.3594,0],[0.2188,0.375,0],[0.2188,0.3906,0],[0.2188,0.4062,0],[0.2188,0.4218,0],[0.2188,0.4376,0],[0.2188,0.4532,0],[0.2188,0.4688,0],[0.2188,0.4844,0],[0.2188,0.5,0],[0.2188,0.5156,0],[0.2188,0.5312,0],[0.2188,0.5468,0],[0.2188,0.5624,0],[0.2188,0.5782,0],[0.2188,0.5938,0],[0.2188,0.6094,0],[0.2188,0.625,0],[0.2188,0.6406,0],[0.2188,0.6562,0],[0.2188,0.6718,0],[0.2188,0.6876,0],[0.2188,0.7032,0],[0.2188,0.7188,0],[0.2188,0.7344,0],[0.2188,0.75,0],[0.2188,0.7656,0],[0.2188,0.7812,0],[0.2188,0.7968,0],[0.2188,0.8124,0],[0.2188,0.8282,0],[0.2188,0.8438,0],[0.2188,0.8594,0],[0.2188,0.875,0],[0.2188,0.8906,0],[0.2188,0.9062,0],[0.2188,0.9218,0],[0.2188,0.9376,0],[0.2188,0.9532,0],[0.2188,0.9688,0],[0.2188,0.9844,0],[0.2344,-1,0],[0.2344,-0.9844,0],[0.2344,-0.9688,0],[0.2344,-0.9532,0],[0.2344,-0.9376,0],[0.2344,-0.9218,0],[0.2344,-0.9062,0],[0.2344,-0.8906,0],[0.2344,-0.875,0],[0.2344,-0.8594,0],[0.2344,-0.8438,0],[0.2344,-0.8282,0],[0.2344,-0.8124,0],[0.2344,-0.7968,0],[0.2344,-0.7812,0],[0.2344,-0.7656,0],[0.2344,-0.75,0],[0.2344,-0.7344,0],[0.2344,-0.7188,0],[0.2344,-0.7032,0],[0.2344,-0.6876,0],[0.2344,-0.6718,0],[0.2344,-0.6562,0],[0.2344,-0.6406,0],[0.2344,-0.625,0],[0.2344,-0.6094,0],[0.2344,-0.5938,0],[0.2344,-0.5782,0],[0.2344,-0.5624,0],[0.2344,-0.5468,0],[0.2344,-0.5312,0],[0.2344,-0.5156,0],[0.2344,-0.5,0],[0.2344,-0.4844,0],[0.2344,-0.4688,0],[0.2344,-0.4532,0],[0.2344,-0.4376,0],[0.2344,-0.4218,0],[0.2344,-0.4062,0],[0.2344,-0.3906,0],[0.2344,-0.375,0],[0.2344,-0.3594,0],[0.2344,-0.3438,0],[0.2344,-0.3282,0],[0.2344,-0.3124,0],[0.2344,-0.2968,0],[0.2344,-0.2812,0],[0.2344,-0.2656,0],[0.2344,-0.25,0],[0.2344,-0.2344,0],[0.2344,-0.2188,0],[0.2344,-0.2032,0],[0.2344,-0.1876,0],[0.2344,-0.1718,0],[0.2344,-0.1562,0],[0.2344,-0.1406,0],[0.2344,-0.125,0],[0.2344,-0.1094,0],[0.2344,-0.0938,0],[0.2344,-0.0782,0],[0.2344,-0.0624,0],[0.2344,-0.0468,0],[0.2344,-0.0312,0],[0.2344,-0.0156,0],[0.2344,0,0],[0.2344,0.0156,0],[0.2344,0.0312,0],[0.2344,0.0468,0],[0.2344,0.0624,0],[0.2344,0.0782,0],[0.2344,0.0938,0],[0.2344,0.1094,0],[0.2344,0.125,0],[0.2344,0.1406,0],[0.2344,0.1562,0],[0.2344,0.1718,0],[0.2344,0.1876,0],[0.2344,0.2032,0],[0.2344,0.2188,0],[0.2344,0.2344,0],[0.2344,0.25,0],[0.2344,0.2656,0],[0.2344,0.2812,0],[0.2344,0.2968,0],[0.2344,0.3124,0],[0.2344,0.3282,0],[0.2344,0.3438,0],[0.2344,0.3594,0],[0.2344,0.375,0],[0.2344,0.3906,0],[0.2344,0.4062,0],[0.2344,0.4218,0],[0.2344,0.4376,0],[0.2344,0.4532,0],[0.2344,0.4688,0],[0.2344,0.4844,0],[0.2344,0.5,0],[0.2344,0.5156,0],[0.2344,0.5312,0],[0.2344,0.5468,0],[0.2344,0.5624,0],[0.2344,0.5782,0],[0.2344,0.5938,0],[0.2344,0.6094,0],[0.2344,0.625,0],[0.2344,0.6406,0],[0.2344,0.6562,0],[0.2344,0.6718,0],[0.2344,0.6876,0],[0.2344,0.7032,0],[0.2344,0.7188,0],[0.2344,0.7344,0],[0.2344,0.75,0],[0.2344,0.7656,0],[0.2344,0.7812,0],[0.2344,0.7968,0],[0.2344,0.8124,0],[0.2344,0.8282,0],[0.2344,0.8438,0],[0.2344,0.8594,0],[0.2344,0.875,0],[0.2344,0.8906,0],[0.2344,0.9062,0],[0.2344,0.9218,0],[0.2344,0.9376,0],[0.2344,0.9532,0],[0.2344,0.9688,0],[0.2344,0.9844,0],[0.25,-1,0],[0.25,-0.9844,0],[0.25,-0.9688,0],[0.25,-0.9532,0],[0.25,-0.9376,0],[0.25,-0.9218,0],[0.25,-0.9062,0],[0.25,-0.8906,0],[0.25,-0.875,0],[0.25,-0.8594,0],[0.25,-0.8438,0],[0.25,-0.8282,0],[0.25,-0.8124,0],[0.25,-0.7968,0],[0.25,-0.7812,0],[0.25,-0.7656,0],[0.25,-0.75,0],[0.25,-0.7344,0],[0.25,-0.7188,0],[0.25,-0.7032,0],[0.25,-0.6876,0],[0.25,-0.6718,0],[0.25,-0.6562,0],[0.25,-0.6406,0],[0.25,-0.625,0],[0.25,-0.6094,0],[0.25,-0.5938,0],[0.25,-0.5782,0],[0.25,-0.5624,0],[0.25,-0.5468,0],[0.25,-0.5312,0],[0.25,-0.5156,0],[0.25,-0.5,0],[0.25,-0.4844,0],[0.25,-0.4688,0],[0.25,-0.4532,0],[0.25,-0.4376,0],[0.25,-0.4218,0],[0.25,-0.4062,0],[0.25,-0.3906,0],[0.25,-0.375,0],[0.25,-0.3594,0],[0.25,-0.3438,0],[0.25,-0.3282,0],[0.25,-0.3124,0],[0.25,-0.2968,0],[0.25,-0.2812,0],[0.25,-0.2656,0],[0.25,-0.25,0],[0.25,-0.2344,0],[0.25,-0.2188,0],[0.25,-0.2032,0],[0.25,-0.1876,0],[0.25,-0.1718,0],[0.25,-0.1562,0],[0.25,-0.1406,0],[0.25,-0.125,0],[0.25,-0.1094,0],[0.25,-0.0938,0],[0.25,-0.0782,0],[0.25,-0.0624,0],[0.25,-0.0468,0],[0.25,-0.0312,0],[0.25,-0.0156,0],[0.25,0,0],[0.25,0.0156,0],[0.25,0.0312,0],[0.25,0.0468,0],[0.25,0.0624,0],[0.25,0.0782,0],[0.25,0.0938,0],[0.25,0.1094,0],[0.25,0.125,0],[0.25,0.1406,0],[0.25,0.1562,0],[0.25,0.1718,0],[0.25,0.1876,0],[0.25,0.2032,0],[0.25,0.2188,0],[0.25,0.2344,0],[0.25,0.25,0],[0.25,0.2656,0],[0.25,0.2812,0],[0.25,0.2968,0],[0.25,0.3124,0],[0.25,0.3282,0],[0.25,0.3438,0],[0.25,0.3594,0],[0.25,0.375,0],[0.25,0.3906,0],[0.25,0.4062,0],[0.25,0.4218,0],[0.25,0.4376,0],[0.25,0.4532,0],[0.25,0.4688,0],[0.25,0.4844,0],[0.25,0.5,0],[0.25,0.5156,0],[0.25,0.5312,0],[0.25,0.5468,0],[0.25,0.5624,0],[0.25,0.5782,0],[0.25,0.5938,0],[0.25,0.6094,0],[0.25,0.625,0],[0.25,0.6406,0],[0.25,0.6562,0],[0.25,0.6718,0],[0.25,0.6876,0],[0.25,0.7032,0],[0.25,0.7188,0],[0.25,0.7344,0],[0.25,0.75,0],[0.25,0.7656,0],[0.25,0.7812,0],[0.25,0.7968,0],[0.25,0.8124,0],[0.25,0.8282,0],[0.25,0.8438,0],[0.25,0.8594,0],[0.25,0.875,0],[0.25,0.8906,0],[0.25,0.9062,0],[0.25,0.9218,0],[0.25,0.9376,0],[0.25,0.9532,0],[0.25,0.9688,0],[0.25,0.9844,0],[0.2656,-1,0],[0.2656,-0.9844,0],[0.2656,-0.9688,0],[0.2656,-0.9532,0],[0.2656,-0.9376,0],[0.2656,-0.9218,0],[0.2656,-0.9062,0],[0.2656,-0.8906,0],[0.2656,-0.875,0],[0.2656,-0.8594,0],[0.2656,-0.8438,0],[0.2656,-0.8282,0],[0.2656,-0.8124,0],[0.2656,-0.7968,0],[0.2656,-0.7812,0],[0.2656,-0.7656,0],[0.2656,-0.75,0],[0.2656,-0.7344,0],[0.2656,-0.7188,0],[0.2656,-0.7032,0],[0.2656,-0.6876,0],[0.2656,-0.6718,0],[0.2656,-0.6562,0],[0.2656,-0.6406,0],[0.2656,-0.625,0],[0.2656,-0.6094,0],[0.2656,-0.5938,0],[0.2656,-0.5782,0],[0.2656,-0.5624,0],[0.2656,-0.5468,0],[0.2656,-0.5312,0],[0.2656,-0.5156,0],[0.2656,-0.5,0],[0.2656,-0.4844,0],[0.2656,-0.4688,0],[0.2656,-0.4532,0],[0.2656,-0.4376,0],[0.2656,-0.4218,0],[0.2656,-0.4062,0],[0.2656,-0.3906,0],[0.2656,-0.375,0],[0.2656,-0.3594,0],[0.2656,-0.3438,0],[0.2656,-0.3282,0],[0.2656,-0.3124,0],[0.2656,-0.2968,0],[0.2656,-0.2812,0],[0.2656,-0.2656,0],[0.2656,-0.25,0],[0.2656,-0.2344,0],[0.2656,-0.2188,0],[0.2656,-0.2032,0],[0.2656,-0.1876,0],[0.2656,-0.1718,0],[0.2656,-0.1562,0],[0.2656,-0.1406,0],[0.2656,-0.125,0],[0.2656,-0.1094,0],[0.2656,-0.0938,0],[0.2656,-0.0782,0],[0.2656,-0.0624,0],[0.2656,-0.0468,0],[0.2656,-0.0312,0],[0.2656,-0.0156,0],[0.2656,0,0],[0.2656,0.0156,0],[0.2656,0.0312,0],[0.2656,0.0468,0],[0.2656,0.0624,0],[0.2656,0.0782,0],[0.2656,0.0938,0],[0.2656,0.1094,0],[0.2656,0.125,0],[0.2656,0.1406,0],[0.2656,0.1562,0],[0.2656,0.1718,0],[0.2656,0.1876,0],[0.2656,0.2032,0],[0.2656,0.2188,0],[0.2656,0.2344,0],[0.2656,0.25,0],[0.2656,0.2656,0],[0.2656,0.2812,0],[0.2656,0.2968,0],[0.2656,0.3124,0],[0.2656,0.3282,0],[0.2656,0.3438,0],[0.2656,0.3594,0],[0.2656,0.375,0],[0.2656,0.3906,0],[0.2656,0.4062,0],[0.2656,0.4218,0],[0.2656,0.4376,0],[0.2656,0.4532,0],[0.2656,0.4688,0],[0.2656,0.4844,0],[0.2656,0.5,0],[0.2656,0.5156,0],[0.2656,0.5312,0],[0.2656,0.5468,0],[0.2656,0.5624,0],[0.2656,0.5782,0],[0.2656,0.5938,0],[0.2656,0.6094,0],[0.2656,0.625,0],[0.2656,0.6406,0],[0.2656,0.6562,0],[0.2656,0.6718,0],[0.2656,0.6876,0],[0.2656,0.7032,0],[0.2656,0.7188,0],[0.2656,0.7344,0],[0.2656,0.75,0],[0.2656,0.7656,0],[0.2656,0.7812,0],[0.2656,0.7968,0],[0.2656,0.8124,0],[0.2656,0.8282,0],[0.2656,0.8438,0],[0.2656,0.8594,0],[0.2656,0.875,0],[0.2656,0.8906,0],[0.2656,0.9062,0],[0.2656,0.9218,0],[0.2656,0.9376,0],[0.2656,0.9532,0],[0.2656,0.9688,0],[0.2656,0.9844,0],[0.2812,-1,0],[0.2812,-0.9844,0],[0.2812,-0.9688,0],[0.2812,-0.9532,0],[0.2812,-0.9376,0],[0.2812,-0.9218,0],[0.2812,-0.9062,0],[0.2812,-0.8906,0],[0.2812,-0.875,0],[0.2812,-0.8594,0],[0.2812,-0.8438,0],[0.2812,-0.8282,0],[0.2812,-0.8124,0],[0.2812,-0.7968,0],[0.2812,-0.7812,0],[0.2812,-0.7656,0],[0.2812,-0.75,0],[0.2812,-0.7344,0],[0.2812,-0.7188,0],[0.2812,-0.7032,0],[0.2812,-0.6876,0],[0.2812,-0.6718,0],[0.2812,-0.6562,0],[0.2812,-0.6406,0],[0.2812,-0.625,0],[0.2812,-0.6094,0],[0.2812,-0.5938,0],[0.2812,-0.5782,0],[0.2812,-0.5624,0],[0.2812,-0.5468,0],[0.2812,-0.5312,0],[0.2812,-0.5156,0],[0.2812,-0.5,0],[0.2812,-0.4844,0],[0.2812,-0.4688,0],[0.2812,-0.4532,0],[0.2812,-0.4376,0],[0.2812,-0.4218,0],[0.2812,-0.4062,0],[0.2812,-0.3906,0],[0.2812,-0.375,0],[0.2812,-0.3594,0],[0.2812,-0.3438,0],[0.2812,-0.3282,0],[0.2812,-0.3124,0],[0.2812,-0.2968,0],[0.2812,-0.2812,0],[0.2812,-0.2656,0],[0.2812,-0.25,0],[0.2812,-0.2344,0],[0.2812,-0.2188,0],[0.2812,-0.2032,0],[0.2812,-0.1876,0],[0.2812,-0.1718,0],[0.2812,-0.1562,0],[0.2812,-0.1406,0],[0.2812,-0.125,0],[0.2812,-0.1094,0],[0.2812,-0.0938,0],[0.2812,-0.0782,0],[0.2812,-0.0624,0],[0.2812,-0.0468,0],[0.2812,-0.0312,0],[0.2812,-0.0156,0],[0.2812,0,0],[0.2812,0.0156,0],[0.2812,0.0312,0],[0.2812,0.0468,0],[0.2812,0.0624,0],[0.2812,0.0782,0],[0.2812,0.0938,0],[0.2812,0.1094,0],[0.2812,0.125,0],[0.2812,0.1406,0],[0.2812,0.1562,0],[0.2812,0.1718,0],[0.2812,0.1876,0],[0.2812,0.2032,0],[0.2812,0.2188,0],[0.2812,0.2344,0],[0.2812,0.25,0],[0.2812,0.2656,0],[0.2812,0.2812,0],[0.2812,0.2968,0],[0.2812,0.3124,0],[0.2812,0.3282,0],[0.2812,0.3438,0],[0.2812,0.3594,0],[0.2812,0.375,0],[0.2812,0.3906,0],[0.2812,0.4062,0],[0.2812,0.4218,0],[0.2812,0.4376,0],[0.2812,0.4532,0],[0.2812,0.4688,0],[0.2812,0.4844,0],[0.2812,0.5,0],[0.2812,0.5156,0],[0.2812,0.5312,0],[0.2812,0.5468,0],[0.2812,0.5624,0],[0.2812,0.5782,0],[0.2812,0.5938,0],[0.2812,0.6094,0],[0.2812,0.625,0],[0.2812,0.6406,0],[0.2812,0.6562,0],[0.2812,0.6718,0],[0.2812,0.6876,0],[0.2812,0.7032,0],[0.2812,0.7188,0],[0.2812,0.7344,0],[0.2812,0.75,0],[0.2812,0.7656,0],[0.2812,0.7812,0],[0.2812,0.7968,0],[0.2812,0.8124,0],[0.2812,0.8282,0],[0.2812,0.8438,0],[0.2812,0.8594,0],[0.2812,0.875,0],[0.2812,0.8906,0],[0.2812,0.9062,0],[0.2812,0.9218,0],[0.2812,0.9376,0],[0.2812,0.9532,0],[0.2812,0.9688,0],[0.2812,0.9844,0],[0.2968,-1,0],[0.2968,-0.9844,0],[0.2968,-0.9688,0],[0.2968,-0.9532,0],[0.2968,-0.9376,0],[0.2968,-0.9218,0],[0.2968,-0.9062,0],[0.2968,-0.8906,0],[0.2968,-0.875,0],[0.2968,-0.8594,0],[0.2968,-0.8438,0],[0.2968,-0.8282,0],[0.2968,-0.8124,0],[0.2968,-0.7968,0],[0.2968,-0.7812,0],[0.2968,-0.7656,0],[0.2968,-0.75,0],[0.2968,-0.7344,0],[0.2968,-0.7188,0],[0.2968,-0.7032,0],[0.2968,-0.6876,0],[0.2968,-0.6718,0],[0.2968,-0.6562,0],[0.2968,-0.6406,0],[0.2968,-0.625,0],[0.2968,-0.6094,0],[0.2968,-0.5938,0],[0.2968,-0.5782,0],[0.2968,-0.5624,0],[0.2968,-0.5468,0],[0.2968,-0.5312,0],[0.2968,-0.5156,0],[0.2968,-0.5,0],[0.2968,-0.4844,0],[0.2968,-0.4688,0],[0.2968,-0.4532,0],[0.2968,-0.4376,0],[0.2968,-0.4218,0],[0.2968,-0.4062,0],[0.2968,-0.3906,0],[0.2968,-0.375,0],[0.2968,-0.3594,0],[0.2968,-0.3438,0],[0.2968,-0.3282,0],[0.2968,-0.3124,0],[0.2968,-0.2968,0],[0.2968,-0.2812,0],[0.2968,-0.2656,0],[0.2968,-0.25,0],[0.2968,-0.2344,0],[0.2968,-0.2188,0],[0.2968,-0.2032,0],[0.2968,-0.1876,0],[0.2968,-0.1718,0],[0.2968,-0.1562,0],[0.2968,-0.1406,0],[0.2968,-0.125,0],[0.2968,-0.1094,0],[0.2968,-0.0938,0],[0.2968,-0.0782,0],[0.2968,-0.0624,0],[0.2968,-0.0468,0],[0.2968,-0.0312,0],[0.2968,-0.0156,0],[0.2968,0,0],[0.2968,0.0156,0],[0.2968,0.0312,0],[0.2968,0.0468,0],[0.2968,0.0624,0],[0.2968,0.0782,0],[0.2968,0.0938,0],[0.2968,0.1094,0],[0.2968,0.125,0],[0.2968,0.1406,0],[0.2968,0.1562,0],[0.2968,0.1718,0],[0.2968,0.1876,0],[0.2968,0.2032,0],[0.2968,0.2188,0],[0.2968,0.2344,0],[0.2968,0.25,0],[0.2968,0.2656,0],[0.2968,0.2812,0],[0.2968,0.2968,0],[0.2968,0.3124,0],[0.2968,0.3282,0],[0.2968,0.3438,0],[0.2968,0.3594,0],[0.2968,0.375,0],[0.2968,0.3906,0],[0.2968,0.4062,0],[0.2968,0.4218,0],[0.2968,0.4376,0],[0.2968,0.4532,0],[0.2968,0.4688,0],[0.2968,0.4844,0],[0.2968,0.5,0],[0.2968,0.5156,0],[0.2968,0.5312,0],[0.2968,0.5468,0],[0.2968,0.5624,0],[0.2968,0.5782,0],[0.2968,0.5938,0],[0.2968,0.6094,0],[0.2968,0.625,0],[0.2968,0.6406,0],[0.2968,0.6562,0],[0.2968,0.6718,0],[0.2968,0.6876,0],[0.2968,0.7032,0],[0.2968,0.7188,0],[0.2968,0.7344,0],[0.2968,0.75,0],[0.2968,0.7656,0],[0.2968,0.7812,0],[0.2968,0.7968,0],[0.2968,0.8124,0],[0.2968,0.8282,0],[0.2968,0.8438,0],[0.2968,0.8594,0],[0.2968,0.875,0],[0.2968,0.8906,0],[0.2968,0.9062,0],[0.2968,0.9218,0],[0.2968,0.9376,0],[0.2968,0.9532,0],[0.2968,0.9688,0],[0.2968,0.9844,0],[0.3124,-1,0],[0.3124,-0.9844,0],[0.3124,-0.9688,0],[0.3124,-0.9532,0],[0.3124,-0.9376,0],[0.3124,-0.9218,0],[0.3124,-0.9062,0],[0.3124,-0.8906,0],[0.3124,-0.875,0],[0.3124,-0.8594,0],[0.3124,-0.8438,0],[0.3124,-0.8282,0],[0.3124,-0.8124,0],[0.3124,-0.7968,0],[0.3124,-0.7812,0],[0.3124,-0.7656,0],[0.3124,-0.75,0],[0.3124,-0.7344,0],[0.3124,-0.7188,0],[0.3124,-0.7032,0],[0.3124,-0.6876,0],[0.3124,-0.6718,0],[0.3124,-0.6562,0],[0.3124,-0.6406,0],[0.3124,-0.625,0],[0.3124,-0.6094,0],[0.3124,-0.5938,0],[0.3124,-0.5782,0],[0.3124,-0.5624,0],[0.3124,-0.5468,0],[0.3124,-0.5312,0],[0.3124,-0.5156,0],[0.3124,-0.5,0],[0.3124,-0.4844,0],[0.3124,-0.4688,0],[0.3124,-0.4532,0],[0.3124,-0.4376,0],[0.3124,-0.4218,0],[0.3124,-0.4062,0],[0.3124,-0.3906,0],[0.3124,-0.375,0],[0.3124,-0.3594,0],[0.3124,-0.3438,0],[0.3124,-0.3282,0],[0.3124,-0.3124,0],[0.3124,-0.2968,0],[0.3124,-0.2812,0],[0.3124,-0.2656,0],[0.3124,-0.25,0],[0.3124,-0.2344,0],[0.3124,-0.2188,0],[0.3124,-0.2032,0],[0.3124,-0.1876,0],[0.3124,-0.1718,0],[0.3124,-0.1562,0],[0.3124,-0.1406,0],[0.3124,-0.125,0],[0.3124,-0.1094,0],[0.3124,-0.0938,0],[0.3124,-0.0782,0],[0.3124,-0.0624,0],[0.3124,-0.0468,0],[0.3124,-0.0312,0],[0.3124,-0.0156,0],[0.3124,0,0],[0.3124,0.0156,0],[0.3124,0.0312,0],[0.3124,0.0468,0],[0.3124,0.0624,0],[0.3124,0.0782,0],[0.3124,0.0938,0],[0.3124,0.1094,0],[0.3124,0.125,0],[0.3124,0.1406,0],[0.3124,0.1562,0],[0.3124,0.1718,0],[0.3124,0.1876,0],[0.3124,0.2032,0],[0.3124,0.2188,0],[0.3124,0.2344,0],[0.3124,0.25,0],[0.3124,0.2656,0],[0.3124,0.2812,0],[0.3124,0.2968,0],[0.3124,0.3124,0],[0.3124,0.3282,0],[0.3124,0.3438,0],[0.3124,0.3594,0],[0.3124,0.375,0],[0.3124,0.3906,0],[0.3124,0.4062,0],[0.3124,0.4218,0],[0.3124,0.4376,0],[0.3124,0.4532,0],[0.3124,0.4688,0],[0.3124,0.4844,0],[0.3124,0.5,0],[0.3124,0.5156,0],[0.3124,0.5312,0],[0.3124,0.5468,0],[0.3124,0.5624,0],[0.3124,0.5782,0],[0.3124,0.5938,0],[0.3124,0.6094,0],[0.3124,0.625,0],[0.3124,0.6406,0],[0.3124,0.6562,0],[0.3124,0.6718,0],[0.3124,0.6876,0],[0.3124,0.7032,0],[0.3124,0.7188,0],[0.3124,0.7344,0],[0.3124,0.75,0],[0.3124,0.7656,0],[0.3124,0.7812,0],[0.3124,0.7968,0],[0.3124,0.8124,0],[0.3124,0.8282,0],[0.3124,0.8438,0],[0.3124,0.8594,0],[0.3124,0.875,0],[0.3124,0.8906,0],[0.3124,0.9062,0],[0.3124,0.9218,0],[0.3124,0.9376,0],[0.3124,0.9532,0],[0.3124,0.9688,0],[0.3124,0.9844,0],[0.3282,-1,0],[0.3282,-0.9844,0],[0.3282,-0.9688,0],[0.3282,-0.9532,0],[0.3282,-0.9376,0],[0.3282,-0.9218,0],[0.3282,-0.9062,0],[0.3282,-0.8906,0],[0.3282,-0.875,0],[0.3282,-0.8594,0],[0.3282,-0.8438,0],[0.3282,-0.8282,0],[0.3282,-0.8124,0],[0.3282,-0.7968,0],[0.3282,-0.7812,0],[0.3282,-0.7656,0],[0.3282,-0.75,0],[0.3282,-0.7344,0],[0.3282,-0.7188,0],[0.3282,-0.7032,0],[0.3282,-0.6876,0],[0.3282,-0.6718,0],[0.3282,-0.6562,0],[0.3282,-0.6406,0],[0.3282,-0.625,0],[0.3282,-0.6094,0],[0.3282,-0.5938,0],[0.3282,-0.5782,0],[0.3282,-0.5624,0],[0.3282,-0.5468,0],[0.3282,-0.5312,0],[0.3282,-0.5156,0],[0.3282,-0.5,0],[0.3282,-0.4844,0],[0.3282,-0.4688,0],[0.3282,-0.4532,0],[0.3282,-0.4376,0],[0.3282,-0.4218,0],[0.3282,-0.4062,0],[0.3282,-0.3906,0],[0.3282,-0.375,0],[0.3282,-0.3594,0],[0.3282,-0.3438,0],[0.3282,-0.3282,0],[0.3282,-0.3124,0],[0.3282,-0.2968,0],[0.3282,-0.2812,0],[0.3282,-0.2656,0],[0.3282,-0.25,0],[0.3282,-0.2344,0],[0.3282,-0.2188,0],[0.3282,-0.2032,0],[0.3282,-0.1876,0],[0.3282,-0.1718,0],[0.3282,-0.1562,0],[0.3282,-0.1406,0],[0.3282,-0.125,0],[0.3282,-0.1094,0],[0.3282,-0.0938,0],[0.3282,-0.0782,0],[0.3282,-0.0624,0],[0.3282,-0.0468,0],[0.3282,-0.0312,0],[0.3282,-0.0156,0],[0.3282,0,0],[0.3282,0.0156,0],[0.3282,0.0312,0],[0.3282,0.0468,0],[0.3282,0.0624,0],[0.3282,0.0782,0],[0.3282,0.0938,0],[0.3282,0.1094,0],[0.3282,0.125,0],[0.3282,0.1406,0],[0.3282,0.1562,0],[0.3282,0.1718,0],[0.3282,0.1876,0],[0.3282,0.2032,0],[0.3282,0.2188,0],[0.3282,0.2344,0],[0.3282,0.25,0],[0.3282,0.2656,0],[0.3282,0.2812,0],[0.3282,0.2968,0],[0.3282,0.3124,0],[0.3282,0.3282,0],[0.3282,0.3438,0],[0.3282,0.3594,0],[0.3282,0.375,0],[0.3282,0.3906,0],[0.3282,0.4062,0],[0.3282,0.4218,0],[0.3282,0.4376,0],[0.3282,0.4532,0],[0.3282,0.4688,0],[0.3282,0.4844,0],[0.3282,0.5,0],[0.3282,0.5156,0],[0.3282,0.5312,0],[0.3282,0.5468,0],[0.3282,0.5624,0],[0.3282,0.5782,0],[0.3282,0.5938,0],[0.3282,0.6094,0],[0.3282,0.625,0],[0.3282,0.6406,0],[0.3282,0.6562,0],[0.3282,0.6718,0],[0.3282,0.6876,0],[0.3282,0.7032,0],[0.3282,0.7188,0],[0.3282,0.7344,0],[0.3282,0.75,0],[0.3282,0.7656,0],[0.3282,0.7812,0],[0.3282,0.7968,0],[0.3282,0.8124,0],[0.3282,0.8282,0],[0.3282,0.8438,0],[0.3282,0.8594,0],[0.3282,0.875,0],[0.3282,0.8906,0],[0.3282,0.9062,0],[0.3282,0.9218,0],[0.3282,0.9376,0],[0.3282,0.9532,0],[0.3282,0.9688,0],[0.3282,0.9844,0],[0.3438,-1,0],[0.3438,-0.9844,0],[0.3438,-0.9688,0],[0.3438,-0.9532,0],[0.3438,-0.9376,0],[0.3438,-0.9218,0],[0.3438,-0.9062,0],[0.3438,-0.8906,0],[0.3438,-0.875,0],[0.3438,-0.8594,0],[0.3438,-0.8438,0],[0.3438,-0.8282,0],[0.3438,-0.8124,0],[0.3438,-0.7968,0],[0.3438,-0.7812,0],[0.3438,-0.7656,0],[0.3438,-0.75,0],[0.3438,-0.7344,0],[0.3438,-0.7188,0],[0.3438,-0.7032,0],[0.3438,-0.6876,0],[0.3438,-0.6718,0],[0.3438,-0.6562,0],[0.3438,-0.6406,0],[0.3438,-0.625,0],[0.3438,-0.6094,0],[0.3438,-0.5938,0],[0.3438,-0.5782,0],[0.3438,-0.5624,0],[0.3438,-0.5468,0],[0.3438,-0.5312,0],[0.3438,-0.5156,0],[0.3438,-0.5,0],[0.3438,-0.4844,0],[0.3438,-0.4688,0],[0.3438,-0.4532,0],[0.3438,-0.4376,0],[0.3438,-0.4218,0],[0.3438,-0.4062,0],[0.3438,-0.3906,0],[0.3438,-0.375,0],[0.3438,-0.3594,0],[0.3438,-0.3438,0],[0.3438,-0.3282,0],[0.3438,-0.3124,0],[0.3438,-0.2968,0],[0.3438,-0.2812,0],[0.3438,-0.2656,0],[0.3438,-0.25,0],[0.3438,-0.2344,0],[0.3438,-0.2188,0],[0.3438,-0.2032,0],[0.3438,-0.1876,0],[0.3438,-0.1718,0],[0.3438,-0.1562,0],[0.3438,-0.1406,0],[0.3438,-0.125,0],[0.3438,-0.1094,0],[0.3438,-0.0938,0],[0.3438,-0.0782,0],[0.3438,-0.0624,0],[0.3438,-0.0468,0],[0.3438,-0.0312,0],[0.3438,-0.0156,0],[0.3438,0,0],[0.3438,0.0156,0],[0.3438,0.0312,0],[0.3438,0.0468,0],[0.3438,0.0624,0],[0.3438,0.0782,0],[0.3438,0.0938,0],[0.3438,0.1094,0],[0.3438,0.125,0],[0.3438,0.1406,0],[0.3438,0.1562,0],[0.3438,0.1718,0],[0.3438,0.1876,0],[0.3438,0.2032,0],[0.3438,0.2188,0],[0.3438,0.2344,0],[0.3438,0.25,0],[0.3438,0.2656,0],[0.3438,0.2812,0],[0.3438,0.2968,0],[0.3438,0.3124,0],[0.3438,0.3282,0],[0.3438,0.3438,0],[0.3438,0.3594,0],[0.3438,0.375,0],[0.3438,0.3906,0],[0.3438,0.4062,0],[0.3438,0.4218,0],[0.3438,0.4376,0],[0.3438,0.4532,0],[0.3438,0.4688,0],[0.3438,0.4844,0],[0.3438,0.5,0],[0.3438,0.5156,0],[0.3438,0.5312,0],[0.3438,0.5468,0],[0.3438,0.5624,0],[0.3438,0.5782,0],[0.3438,0.5938,0],[0.3438,0.6094,0],[0.3438,0.625,0],[0.3438,0.6406,0],[0.3438,0.6562,0],[0.3438,0.6718,0],[0.3438,0.6876,0],[0.3438,0.7032,0],[0.3438,0.7188,0],[0.3438,0.7344,0],[0.3438,0.75,0],[0.3438,0.7656,0],[0.3438,0.7812,0],[0.3438,0.7968,0],[0.3438,0.8124,0],[0.3438,0.8282,0],[0.3438,0.8438,0],[0.3438,0.8594,0],[0.3438,0.875,0],[0.3438,0.8906,0],[0.3438,0.9062,0],[0.3438,0.9218,0],[0.3438,0.9376,0],[0.3438,0.9532,0],[0.3438,0.9688,0],[0.3438,0.9844,0],[0.3594,-1,0],[0.3594,-0.9844,0],[0.3594,-0.9688,0],[0.3594,-0.9532,0],[0.3594,-0.9376,0],[0.3594,-0.9218,0],[0.3594,-0.9062,0],[0.3594,-0.8906,0],[0.3594,-0.875,0],[0.3594,-0.8594,0],[0.3594,-0.8438,0],[0.3594,-0.8282,0],[0.3594,-0.8124,0],[0.3594,-0.7968,0],[0.3594,-0.7812,0],[0.3594,-0.7656,0],[0.3594,-0.75,0],[0.3594,-0.7344,0],[0.3594,-0.7188,0],[0.3594,-0.7032,0],[0.3594,-0.6876,0],[0.3594,-0.6718,0],[0.3594,-0.6562,0],[0.3594,-0.6406,0],[0.3594,-0.625,0],[0.3594,-0.6094,0],[0.3594,-0.5938,0],[0.3594,-0.5782,0],[0.3594,-0.5624,0],[0.3594,-0.5468,0],[0.3594,-0.5312,0],[0.3594,-0.5156,0],[0.3594,-0.5,0],[0.3594,-0.4844,0],[0.3594,-0.4688,0],[0.3594,-0.4532,0],[0.3594,-0.4376,0],[0.3594,-0.4218,0],[0.3594,-0.4062,0],[0.3594,-0.3906,0],[0.3594,-0.375,0],[0.3594,-0.3594,0],[0.3594,-0.3438,0],[0.3594,-0.3282,0],[0.3594,-0.3124,0],[0.3594,-0.2968,0],[0.3594,-0.2812,0],[0.3594,-0.2656,0],[0.3594,-0.25,0],[0.3594,-0.2344,0],[0.3594,-0.2188,0],[0.3594,-0.2032,0],[0.3594,-0.1876,0],[0.3594,-0.1718,0],[0.3594,-0.1562,0],[0.3594,-0.1406,0],[0.3594,-0.125,0],[0.3594,-0.1094,0],[0.3594,-0.0938,0],[0.3594,-0.0782,0],[0.3594,-0.0624,0],[0.3594,-0.0468,0],[0.3594,-0.0312,0],[0.3594,-0.0156,0],[0.3594,0,0],[0.3594,0.0156,0],[0.3594,0.0312,0],[0.3594,0.0468,0],[0.3594,0.0624,0],[0.3594,0.0782,0],[0.3594,0.0938,0],[0.3594,0.1094,0],[0.3594,0.125,0],[0.3594,0.1406,0],[0.3594,0.1562,0],[0.3594,0.1718,0],[0.3594,0.1876,0],[0.3594,0.2032,0],[0.3594,0.2188,0],[0.3594,0.2344,0],[0.3594,0.25,0],[0.3594,0.2656,0],[0.3594,0.2812,0],[0.3594,0.2968,0],[0.3594,0.3124,0],[0.3594,0.3282,0],[0.3594,0.3438,0],[0.3594,0.3594,0],[0.3594,0.375,0],[0.3594,0.3906,0],[0.3594,0.4062,0],[0.3594,0.4218,0],[0.3594,0.4376,0],[0.3594,0.4532,0],[0.3594,0.4688,0],[0.3594,0.4844,0],[0.3594,0.5,0],[0.3594,0.5156,0],[0.3594,0.5312,0],[0.3594,0.5468,0],[0.3594,0.5624,0],[0.3594,0.5782,0],[0.3594,0.5938,0],[0.3594,0.6094,0],[0.3594,0.625,0],[0.3594,0.6406,0],[0.3594,0.6562,0],[0.3594,0.6718,0],[0.3594,0.6876,0],[0.3594,0.7032,0],[0.3594,0.7188,0],[0.3594,0.7344,0],[0.3594,0.75,0],[0.3594,0.7656,0],[0.3594,0.7812,0],[0.3594,0.7968,0],[0.3594,0.8124,0],[0.3594,0.8282,0],[0.3594,0.8438,0],[0.3594,0.8594,0],[0.3594,0.875,0],[0.3594,0.8906,0],[0.3594,0.9062,0],[0.3594,0.9218,0],[0.3594,0.9376,0],[0.3594,0.9532,0],[0.3594,0.9688,0],[0.3594,0.9844,0],[0.375,-1,0],[0.375,-0.9844,0],[0.375,-0.9688,0],[0.375,-0.9532,0],[0.375,-0.9376,0],[0.375,-0.9218,0],[0.375,-0.9062,0],[0.375,-0.8906,0],[0.375,-0.875,0],[0.375,-0.8594,0],[0.375,-0.8438,0],[0.375,-0.8282,0],[0.375,-0.8124,0],[0.375,-0.7968,0],[0.375,-0.7812,0],[0.375,-0.7656,0],[0.375,-0.75,0],[0.375,-0.7344,0],[0.375,-0.7188,0],[0.375,-0.7032,0],[0.375,-0.6876,0],[0.375,-0.6718,0],[0.375,-0.6562,0],[0.375,-0.6406,0],[0.375,-0.625,0],[0.375,-0.6094,0],[0.375,-0.5938,0],[0.375,-0.5782,0],[0.375,-0.5624,0],[0.375,-0.5468,0],[0.375,-0.5312,0],[0.375,-0.5156,0],[0.375,-0.5,0],[0.375,-0.4844,0],[0.375,-0.4688,0],[0.375,-0.4532,0],[0.375,-0.4376,0],[0.375,-0.4218,0],[0.375,-0.4062,0],[0.375,-0.3906,0],[0.375,-0.375,0],[0.375,-0.3594,0],[0.375,-0.3438,0],[0.375,-0.3282,0],[0.375,-0.3124,0],[0.375,-0.2968,0],[0.375,-0.2812,0],[0.375,-0.2656,0],[0.375,-0.25,0],[0.375,-0.2344,0],[0.375,-0.2188,0],[0.375,-0.2032,0],[0.375,-0.1876,0],[0.375,-0.1718,0],[0.375,-0.1562,0],[0.375,-0.1406,0],[0.375,-0.125,0],[0.375,-0.1094,0],[0.375,-0.0938,0],[0.375,-0.0782,0],[0.375,-0.0624,0],[0.375,-0.0468,0],[0.375,-0.0312,0],[0.375,-0.0156,0],[0.375,0,0],[0.375,0.0156,0],[0.375,0.0312,0],[0.375,0.0468,0],[0.375,0.0624,0],[0.375,0.0782,0],[0.375,0.0938,0],[0.375,0.1094,0],[0.375,0.125,0],[0.375,0.1406,0],[0.375,0.1562,0],[0.375,0.1718,0],[0.375,0.1876,0],[0.375,0.2032,0],[0.375,0.2188,0],[0.375,0.2344,0],[0.375,0.25,0],[0.375,0.2656,0],[0.375,0.2812,0],[0.375,0.2968,0],[0.375,0.3124,0],[0.375,0.3282,0],[0.375,0.3438,0],[0.375,0.3594,0],[0.375,0.375,0],[0.375,0.3906,0],[0.375,0.4062,0],[0.375,0.4218,0],[0.375,0.4376,0],[0.375,0.4532,0],[0.375,0.4688,0],[0.375,0.4844,0],[0.375,0.5,0],[0.375,0.5156,0],[0.375,0.5312,0],[0.375,0.5468,0],[0.375,0.5624,0],[0.375,0.5782,0],[0.375,0.5938,0],[0.375,0.6094,0],[0.375,0.625,0],[0.375,0.6406,0],[0.375,0.6562,0],[0.375,0.6718,0],[0.375,0.6876,0],[0.375,0.7032,0],[0.375,0.7188,0],[0.375,0.7344,0],[0.375,0.75,0],[0.375,0.7656,0],[0.375,0.7812,0],[0.375,0.7968,0],[0.375,0.8124,0],[0.375,0.8282,0],[0.375,0.8438,0],[0.375,0.8594,0],[0.375,0.875,0],[0.375,0.8906,0],[0.375,0.9062,0],[0.375,0.9218,0],[0.375,0.9376,0],[0.375,0.9532,0],[0.375,0.9688,0],[0.375,0.9844,0],[0.3906,-1,0],[0.3906,-0.9844,0],[0.3906,-0.9688,0],[0.3906,-0.9532,0],[0.3906,-0.9376,0],[0.3906,-0.9218,0],[0.3906,-0.9062,0],[0.3906,-0.8906,0],[0.3906,-0.875,0],[0.3906,-0.8594,0],[0.3906,-0.8438,0],[0.3906,-0.8282,0],[0.3906,-0.8124,0],[0.3906,-0.7968,0],[0.3906,-0.7812,0],[0.3906,-0.7656,0],[0.3906,-0.75,0],[0.3906,-0.7344,0],[0.3906,-0.7188,0],[0.3906,-0.7032,0],[0.3906,-0.6876,0],[0.3906,-0.6718,0],[0.3906,-0.6562,0],[0.3906,-0.6406,0],[0.3906,-0.625,0],[0.3906,-0.6094,0],[0.3906,-0.5938,0],[0.3906,-0.5782,0],[0.3906,-0.5624,0],[0.3906,-0.5468,0],[0.3906,-0.5312,0],[0.3906,-0.5156,0],[0.3906,-0.5,0],[0.3906,-0.4844,0],[0.3906,-0.4688,0],[0.3906,-0.4532,0],[0.3906,-0.4376,0],[0.3906,-0.4218,0],[0.3906,-0.4062,0],[0.3906,-0.3906,0],[0.3906,-0.375,0],[0.3906,-0.3594,0],[0.3906,-0.3438,0],[0.3906,-0.3282,0],[0.3906,-0.3124,0],[0.3906,-0.2968,0],[0.3906,-0.2812,0],[0.3906,-0.2656,0],[0.3906,-0.25,0],[0.3906,-0.2344,0],[0.3906,-0.2188,0],[0.3906,-0.2032,0],[0.3906,-0.1876,0],[0.3906,-0.1718,0],[0.3906,-0.1562,0],[0.3906,-0.1406,0],[0.3906,-0.125,0],[0.3906,-0.1094,0],[0.3906,-0.0938,0],[0.3906,-0.0782,0],[0.3906,-0.0624,0],[0.3906,-0.0468,0],[0.3906,-0.0312,0],[0.3906,-0.0156,0],[0.3906,0,0],[0.3906,0.0156,0],[0.3906,0.0312,0],[0.3906,0.0468,0],[0.3906,0.0624,0],[0.3906,0.0782,0],[0.3906,0.0938,0],[0.3906,0.1094,0],[0.3906,0.125,0],[0.3906,0.1406,0],[0.3906,0.1562,0],[0.3906,0.1718,0],[0.3906,0.1876,0],[0.3906,0.2032,0],[0.3906,0.2188,0],[0.3906,0.2344,0],[0.3906,0.25,0],[0.3906,0.2656,0],[0.3906,0.2812,0],[0.3906,0.2968,0],[0.3906,0.3124,0],[0.3906,0.3282,0],[0.3906,0.3438,0],[0.3906,0.3594,0],[0.3906,0.375,0],[0.3906,0.3906,0],[0.3906,0.4062,0],[0.3906,0.4218,0],[0.3906,0.4376,0],[0.3906,0.4532,0],[0.3906,0.4688,0],[0.3906,0.4844,0],[0.3906,0.5,0],[0.3906,0.5156,0],[0.3906,0.5312,0],[0.3906,0.5468,0],[0.3906,0.5624,0],[0.3906,0.5782,0],[0.3906,0.5938,0],[0.3906,0.6094,0],[0.3906,0.625,0],[0.3906,0.6406,0],[0.3906,0.6562,0],[0.3906,0.6718,0],[0.3906,0.6876,0],[0.3906,0.7032,0],[0.3906,0.7188,0],[0.3906,0.7344,0],[0.3906,0.75,0],[0.3906,0.7656,0],[0.3906,0.7812,0],[0.3906,0.7968,0],[0.3906,0.8124,0],[0.3906,0.8282,0],[0.3906,0.8438,0],[0.3906,0.8594,0],[0.3906,0.875,0],[0.3906,0.8906,0],[0.3906,0.9062,0],[0.3906,0.9218,0],[0.3906,0.9376,0],[0.3906,0.9532,0],[0.3906,0.9688,0],[0.3906,0.9844,0],[0.4062,-1,0],[0.4062,-0.9844,0],[0.4062,-0.9688,0],[0.4062,-0.9532,0],[0.4062,-0.9376,0],[0.4062,-0.9218,0],[0.4062,-0.9062,0],[0.4062,-0.8906,0],[0.4062,-0.875,0],[0.4062,-0.8594,0],[0.4062,-0.8438,0],[0.4062,-0.8282,0],[0.4062,-0.8124,0],[0.4062,-0.7968,0],[0.4062,-0.7812,0],[0.4062,-0.7656,0],[0.4062,-0.75,0],[0.4062,-0.7344,0],[0.4062,-0.7188,0],[0.4062,-0.7032,0],[0.4062,-0.6876,0],[0.4062,-0.6718,0],[0.4062,-0.6562,0],[0.4062,-0.6406,0],[0.4062,-0.625,0],[0.4062,-0.6094,0],[0.4062,-0.5938,0],[0.4062,-0.5782,0],[0.4062,-0.5624,0],[0.4062,-0.5468,0],[0.4062,-0.5312,0],[0.4062,-0.5156,0],[0.4062,-0.5,0],[0.4062,-0.4844,0],[0.4062,-0.4688,0],[0.4062,-0.4532,0],[0.4062,-0.4376,0],[0.4062,-0.4218,0],[0.4062,-0.4062,0],[0.4062,-0.3906,0],[0.4062,-0.375,0],[0.4062,-0.3594,0],[0.4062,-0.3438,0],[0.4062,-0.3282,0],[0.4062,-0.3124,0],[0.4062,-0.2968,0],[0.4062,-0.2812,0],[0.4062,-0.2656,0],[0.4062,-0.25,0],[0.4062,-0.2344,0],[0.4062,-0.2188,0],[0.4062,-0.2032,0],[0.4062,-0.1876,0],[0.4062,-0.1718,0],[0.4062,-0.1562,0],[0.4062,-0.1406,0],[0.4062,-0.125,0],[0.4062,-0.1094,0],[0.4062,-0.0938,0],[0.4062,-0.0782,0],[0.4062,-0.0624,0],[0.4062,-0.0468,0],[0.4062,-0.0312,0],[0.4062,-0.0156,0],[0.4062,0,0],[0.4062,0.0156,0],[0.4062,0.0312,0],[0.4062,0.0468,0],[0.4062,0.0624,0],[0.4062,0.0782,0],[0.4062,0.0938,0],[0.4062,0.1094,0],[0.4062,0.125,0],[0.4062,0.1406,0],[0.4062,0.1562,0],[0.4062,0.1718,0],[0.4062,0.1876,0],[0.4062,0.2032,0],[0.4062,0.2188,0],[0.4062,0.2344,0],[0.4062,0.25,0],[0.4062,0.2656,0],[0.4062,0.2812,0],[0.4062,0.2968,0],[0.4062,0.3124,0],[0.4062,0.3282,0],[0.4062,0.3438,0],[0.4062,0.3594,0],[0.4062,0.375,0],[0.4062,0.3906,0],[0.4062,0.4062,0],[0.4062,0.4218,0],[0.4062,0.4376,0],[0.4062,0.4532,0],[0.4062,0.4688,0],[0.4062,0.4844,0],[0.4062,0.5,0],[0.4062,0.5156,0],[0.4062,0.5312,0],[0.4062,0.5468,0],[0.4062,0.5624,0],[0.4062,0.5782,0],[0.4062,0.5938,0],[0.4062,0.6094,0],[0.4062,0.625,0],[0.4062,0.6406,0],[0.4062,0.6562,0],[0.4062,0.6718,0],[0.4062,0.6876,0],[0.4062,0.7032,0],[0.4062,0.7188,0],[0.4062,0.7344,0],[0.4062,0.75,0],[0.4062,0.7656,0],[0.4062,0.7812,0],[0.4062,0.7968,0],[0.4062,0.8124,0],[0.4062,0.8282,0],[0.4062,0.8438,0],[0.4062,0.8594,0],[0.4062,0.875,0],[0.4062,0.8906,0],[0.4062,0.9062,0],[0.4062,0.9218,0],[0.4062,0.9376,0],[0.4062,0.9532,0],[0.4062,0.9688,0],[0.4062,0.9844,0],[0.4218,-1,0],[0.4218,-0.9844,0],[0.4218,-0.9688,0],[0.4218,-0.9532,0],[0.4218,-0.9376,0],[0.4218,-0.9218,0],[0.4218,-0.9062,0],[0.4218,-0.8906,0],[0.4218,-0.875,0],[0.4218,-0.8594,0],[0.4218,-0.8438,0],[0.4218,-0.8282,0],[0.4218,-0.8124,0],[0.4218,-0.7968,0],[0.4218,-0.7812,0],[0.4218,-0.7656,0],[0.4218,-0.75,0],[0.4218,-0.7344,0],[0.4218,-0.7188,0],[0.4218,-0.7032,0],[0.4218,-0.6876,0],[0.4218,-0.6718,0],[0.4218,-0.6562,0],[0.4218,-0.6406,0],[0.4218,-0.625,0],[0.4218,-0.6094,0],[0.4218,-0.5938,0],[0.4218,-0.5782,0],[0.4218,-0.5624,0],[0.4218,-0.5468,0],[0.4218,-0.5312,0],[0.4218,-0.5156,0],[0.4218,-0.5,0],[0.4218,-0.4844,0],[0.4218,-0.4688,0],[0.4218,-0.4532,0],[0.4218,-0.4376,0],[0.4218,-0.4218,0],[0.4218,-0.4062,0],[0.4218,-0.3906,0],[0.4218,-0.375,0],[0.4218,-0.3594,0],[0.4218,-0.3438,0],[0.4218,-0.3282,0],[0.4218,-0.3124,0],[0.4218,-0.2968,0],[0.4218,-0.2812,0],[0.4218,-0.2656,0],[0.4218,-0.25,0],[0.4218,-0.2344,0],[0.4218,-0.2188,0],[0.4218,-0.2032,0],[0.4218,-0.1876,0],[0.4218,-0.1718,0],[0.4218,-0.1562,0],[0.4218,-0.1406,0],[0.4218,-0.125,0],[0.4218,-0.1094,0],[0.4218,-0.0938,0],[0.4218,-0.0782,0],[0.4218,-0.0624,0],[0.4218,-0.0468,0],[0.4218,-0.0312,0],[0.4218,-0.0156,0],[0.4218,0,0],[0.4218,0.0156,0],[0.4218,0.0312,0],[0.4218,0.0468,0],[0.4218,0.0624,0],[0.4218,0.0782,0],[0.4218,0.0938,0],[0.4218,0.1094,0],[0.4218,0.125,0],[0.4218,0.1406,0],[0.4218,0.1562,0],[0.4218,0.1718,0],[0.4218,0.1876,0],[0.4218,0.2032,0],[0.4218,0.2188,0],[0.4218,0.2344,0],[0.4218,0.25,0],[0.4218,0.2656,0],[0.4218,0.2812,0],[0.4218,0.2968,0],[0.4218,0.3124,0],[0.4218,0.3282,0],[0.4218,0.3438,0],[0.4218,0.3594,0],[0.4218,0.375,0],[0.4218,0.3906,0],[0.4218,0.4062,0],[0.4218,0.4218,0],[0.4218,0.4376,0],[0.4218,0.4532,0],[0.4218,0.4688,0],[0.4218,0.4844,0],[0.4218,0.5,0],[0.4218,0.5156,0],[0.4218,0.5312,0],[0.4218,0.5468,0],[0.4218,0.5624,0],[0.4218,0.5782,0],[0.4218,0.5938,0],[0.4218,0.6094,0],[0.4218,0.625,0],[0.4218,0.6406,0],[0.4218,0.6562,0],[0.4218,0.6718,0],[0.4218,0.6876,0],[0.4218,0.7032,0],[0.4218,0.7188,0],[0.4218,0.7344,0],[0.4218,0.75,0],[0.4218,0.7656,0],[0.4218,0.7812,0],[0.4218,0.7968,0],[0.4218,0.8124,0],[0.4218,0.8282,0],[0.4218,0.8438,0],[0.4218,0.8594,0],[0.4218,0.875,0],[0.4218,0.8906,0],[0.4218,0.9062,0],[0.4218,0.9218,0],[0.4218,0.9376,0],[0.4218,0.9532,0],[0.4218,0.9688,0],[0.4218,0.9844,0],[0.4376,-1,0],[0.4376,-0.9844,0],[0.4376,-0.9688,0],[0.4376,-0.9532,0],[0.4376,-0.9376,0],[0.4376,-0.9218,0],[0.4376,-0.9062,0],[0.4376,-0.8906,0],[0.4376,-0.875,0],[0.4376,-0.8594,0],[0.4376,-0.8438,0],[0.4376,-0.8282,0],[0.4376,-0.8124,0],[0.4376,-0.7968,0],[0.4376,-0.7812,0],[0.4376,-0.7656,0],[0.4376,-0.75,0],[0.4376,-0.7344,0],[0.4376,-0.7188,0],[0.4376,-0.7032,0],[0.4376,-0.6876,0],[0.4376,-0.6718,0],[0.4376,-0.6562,0],[0.4376,-0.6406,0],[0.4376,-0.625,0],[0.4376,-0.6094,0],[0.4376,-0.5938,0],[0.4376,-0.5782,0],[0.4376,-0.5624,0],[0.4376,-0.5468,0],[0.4376,-0.5312,0],[0.4376,-0.5156,0],[0.4376,-0.5,0],[0.4376,-0.4844,0],[0.4376,-0.4688,0],[0.4376,-0.4532,0],[0.4376,-0.4376,0],[0.4376,-0.4218,0],[0.4376,-0.4062,0],[0.4376,-0.3906,0],[0.4376,-0.375,0],[0.4376,-0.3594,0],[0.4376,-0.3438,0],[0.4376,-0.3282,0],[0.4376,-0.3124,0],[0.4376,-0.2968,0],[0.4376,-0.2812,0],[0.4376,-0.2656,0],[0.4376,-0.25,0],[0.4376,-0.2344,0],[0.4376,-0.2188,0],[0.4376,-0.2032,0],[0.4376,-0.1876,0],[0.4376,-0.1718,0],[0.4376,-0.1562,0],[0.4376,-0.1406,0],[0.4376,-0.125,0],[0.4376,-0.1094,0],[0.4376,-0.0938,0],[0.4376,-0.0782,0],[0.4376,-0.0624,0],[0.4376,-0.0468,0],[0.4376,-0.0312,0],[0.4376,-0.0156,0],[0.4376,0,0],[0.4376,0.0156,0],[0.4376,0.0312,0],[0.4376,0.0468,0],[0.4376,0.0624,0],[0.4376,0.0782,0],[0.4376,0.0938,0],[0.4376,0.1094,0],[0.4376,0.125,0],[0.4376,0.1406,0],[0.4376,0.1562,0],[0.4376,0.1718,0],[0.4376,0.1876,0],[0.4376,0.2032,0],[0.4376,0.2188,0],[0.4376,0.2344,0],[0.4376,0.25,0],[0.4376,0.2656,0],[0.4376,0.2812,0],[0.4376,0.2968,0],[0.4376,0.3124,0],[0.4376,0.3282,0],[0.4376,0.3438,0],[0.4376,0.3594,0],[0.4376,0.375,0],[0.4376,0.3906,0],[0.4376,0.4062,0],[0.4376,0.4218,0],[0.4376,0.4376,0],[0.4376,0.4532,0],[0.4376,0.4688,0],[0.4376,0.4844,0],[0.4376,0.5,0],[0.4376,0.5156,0],[0.4376,0.5312,0],[0.4376,0.5468,0],[0.4376,0.5624,0],[0.4376,0.5782,0],[0.4376,0.5938,0],[0.4376,0.6094,0],[0.4376,0.625,0],[0.4376,0.6406,0],[0.4376,0.6562,0],[0.4376,0.6718,0],[0.4376,0.6876,0],[0.4376,0.7032,0],[0.4376,0.7188,0],[0.4376,0.7344,0],[0.4376,0.75,0],[0.4376,0.7656,0],[0.4376,0.7812,0],[0.4376,0.7968,0],[0.4376,0.8124,0],[0.4376,0.8282,0],[0.4376,0.8438,0],[0.4376,0.8594,0],[0.4376,0.875,0],[0.4376,0.8906,0],[0.4376,0.9062,0],[0.4376,0.9218,0],[0.4376,0.9376,0],[0.4376,0.9532,0],[0.4376,0.9688,0],[0.4376,0.9844,0],[0.4532,-1,0],[0.4532,-0.9844,0],[0.4532,-0.9688,0],[0.4532,-0.9532,0],[0.4532,-0.9376,0],[0.4532,-0.9218,0],[0.4532,-0.9062,0],[0.4532,-0.8906,0],[0.4532,-0.875,0],[0.4532,-0.8594,0],[0.4532,-0.8438,0],[0.4532,-0.8282,0],[0.4532,-0.8124,0],[0.4532,-0.7968,0],[0.4532,-0.7812,0],[0.4532,-0.7656,0],[0.4532,-0.75,0],[0.4532,-0.7344,0],[0.4532,-0.7188,0],[0.4532,-0.7032,0],[0.4532,-0.6876,0],[0.4532,-0.6718,0],[0.4532,-0.6562,0],[0.4532,-0.6406,0],[0.4532,-0.625,0],[0.4532,-0.6094,0],[0.4532,-0.5938,0],[0.4532,-0.5782,0],[0.4532,-0.5624,0],[0.4532,-0.5468,0],[0.4532,-0.5312,0],[0.4532,-0.5156,0],[0.4532,-0.5,0],[0.4532,-0.4844,0],[0.4532,-0.4688,0],[0.4532,-0.4532,0],[0.4532,-0.4376,0],[0.4532,-0.4218,0],[0.4532,-0.4062,0],[0.4532,-0.3906,0],[0.4532,-0.375,0],[0.4532,-0.3594,0],[0.4532,-0.3438,0],[0.4532,-0.3282,0],[0.4532,-0.3124,0],[0.4532,-0.2968,0],[0.4532,-0.2812,0],[0.4532,-0.2656,0],[0.4532,-0.25,0],[0.4532,-0.2344,0],[0.4532,-0.2188,0],[0.4532,-0.2032,0],[0.4532,-0.1876,0],[0.4532,-0.1718,0],[0.4532,-0.1562,0],[0.4532,-0.1406,0],[0.4532,-0.125,0],[0.4532,-0.1094,0],[0.4532,-0.0938,0],[0.4532,-0.0782,0],[0.4532,-0.0624,0],[0.4532,-0.0468,0],[0.4532,-0.0312,0],[0.4532,-0.0156,0],[0.4532,0,0],[0.4532,0.0156,0],[0.4532,0.0312,0],[0.4532,0.0468,0],[0.4532,0.0624,0],[0.4532,0.0782,0],[0.4532,0.0938,0],[0.4532,0.1094,0],[0.4532,0.125,0],[0.4532,0.1406,0],[0.4532,0.1562,0],[0.4532,0.1718,0],[0.4532,0.1876,0],[0.4532,0.2032,0],[0.4532,0.2188,0],[0.4532,0.2344,0],[0.4532,0.25,0],[0.4532,0.2656,0],[0.4532,0.2812,0],[0.4532,0.2968,0],[0.4532,0.3124,0],[0.4532,0.3282,0],[0.4532,0.3438,0],[0.4532,0.3594,0],[0.4532,0.375,0],[0.4532,0.3906,0],[0.4532,0.4062,0],[0.4532,0.4218,0],[0.4532,0.4376,0],[0.4532,0.4532,0],[0.4532,0.4688,0],[0.4532,0.4844,0],[0.4532,0.5,0],[0.4532,0.5156,0],[0.4532,0.5312,0],[0.4532,0.5468,0],[0.4532,0.5624,0],[0.4532,0.5782,0],[0.4532,0.5938,0],[0.4532,0.6094,0],[0.4532,0.625,0],[0.4532,0.6406,0],[0.4532,0.6562,0],[0.4532,0.6718,0],[0.4532,0.6876,0],[0.4532,0.7032,0],[0.4532,0.7188,0],[0.4532,0.7344,0],[0.4532,0.75,0],[0.4532,0.7656,0],[0.4532,0.7812,0],[0.4532,0.7968,0],[0.4532,0.8124,0],[0.4532,0.8282,0],[0.4532,0.8438,0],[0.4532,0.8594,0],[0.4532,0.875,0],[0.4532,0.8906,0],[0.4532,0.9062,0],[0.4532,0.9218,0],[0.4532,0.9376,0],[0.4532,0.9532,0],[0.4532,0.9688,0],[0.4532,0.9844,0],[0.4688,-1,0],[0.4688,-0.9844,0],[0.4688,-0.9688,0],[0.4688,-0.9532,0],[0.4688,-0.9376,0],[0.4688,-0.9218,0],[0.4688,-0.9062,0],[0.4688,-0.8906,0],[0.4688,-0.875,0],[0.4688,-0.8594,0],[0.4688,-0.8438,0],[0.4688,-0.8282,0],[0.4688,-0.8124,0],[0.4688,-0.7968,0],[0.4688,-0.7812,0],[0.4688,-0.7656,0],[0.4688,-0.75,0],[0.4688,-0.7344,0],[0.4688,-0.7188,0],[0.4688,-0.7032,0],[0.4688,-0.6876,0],[0.4688,-0.6718,0],[0.4688,-0.6562,0],[0.4688,-0.6406,0],[0.4688,-0.625,0],[0.4688,-0.6094,0],[0.4688,-0.5938,0],[0.4688,-0.5782,0],[0.4688,-0.5624,0],[0.4688,-0.5468,0],[0.4688,-0.5312,0],[0.4688,-0.5156,0],[0.4688,-0.5,0],[0.4688,-0.4844,0],[0.4688,-0.4688,0],[0.4688,-0.4532,0],[0.4688,-0.4376,0],[0.4688,-0.4218,0],[0.4688,-0.4062,0],[0.4688,-0.3906,0],[0.4688,-0.375,0],[0.4688,-0.3594,0],[0.4688,-0.3438,0],[0.4688,-0.3282,0],[0.4688,-0.3124,0],[0.4688,-0.2968,0],[0.4688,-0.2812,0],[0.4688,-0.2656,0],[0.4688,-0.25,0],[0.4688,-0.2344,0],[0.4688,-0.2188,0],[0.4688,-0.2032,0],[0.4688,-0.1876,0],[0.4688,-0.1718,0],[0.4688,-0.1562,0],[0.4688,-0.1406,0],[0.4688,-0.125,0],[0.4688,-0.1094,0],[0.4688,-0.0938,0],[0.4688,-0.0782,0],[0.4688,-0.0624,0],[0.4688,-0.0468,0],[0.4688,-0.0312,0],[0.4688,-0.0156,0],[0.4688,0,0],[0.4688,0.0156,0],[0.4688,0.0312,0],[0.4688,0.0468,0],[0.4688,0.0624,0],[0.4688,0.0782,0],[0.4688,0.0938,0],[0.4688,0.1094,0],[0.4688,0.125,0],[0.4688,0.1406,0],[0.4688,0.1562,0],[0.4688,0.1718,0],[0.4688,0.1876,0],[0.4688,0.2032,0],[0.4688,0.2188,0],[0.4688,0.2344,0],[0.4688,0.25,0],[0.4688,0.2656,0],[0.4688,0.2812,0],[0.4688,0.2968,0],[0.4688,0.3124,0],[0.4688,0.3282,0],[0.4688,0.3438,0],[0.4688,0.3594,0],[0.4688,0.375,0],[0.4688,0.3906,0],[0.4688,0.4062,0],[0.4688,0.4218,0],[0.4688,0.4376,0],[0.4688,0.4532,0],[0.4688,0.4688,0],[0.4688,0.4844,0],[0.4688,0.5,0],[0.4688,0.5156,0],[0.4688,0.5312,0],[0.4688,0.5468,0],[0.4688,0.5624,0],[0.4688,0.5782,0],[0.4688,0.5938,0],[0.4688,0.6094,0],[0.4688,0.625,0],[0.4688,0.6406,0],[0.4688,0.6562,0],[0.4688,0.6718,0],[0.4688,0.6876,0],[0.4688,0.7032,0],[0.4688,0.7188,0],[0.4688,0.7344,0],[0.4688,0.75,0],[0.4688,0.7656,0],[0.4688,0.7812,0],[0.4688,0.7968,0],[0.4688,0.8124,0],[0.4688,0.8282,0],[0.4688,0.8438,0],[0.4688,0.8594,0],[0.4688,0.875,0],[0.4688,0.8906,0],[0.4688,0.9062,0],[0.4688,0.9218,0],[0.4688,0.9376,0],[0.4688,0.9532,0],[0.4688,0.9688,0],[0.4688,0.9844,0],[0.4844,-1,0],[0.4844,-0.9844,0],[0.4844,-0.9688,0],[0.4844,-0.9532,0],[0.4844,-0.9376,0],[0.4844,-0.9218,0],[0.4844,-0.9062,0],[0.4844,-0.8906,0],[0.4844,-0.875,0],[0.4844,-0.8594,0],[0.4844,-0.8438,0],[0.4844,-0.8282,0],[0.4844,-0.8124,0],[0.4844,-0.7968,0],[0.4844,-0.7812,0],[0.4844,-0.7656,0],[0.4844,-0.75,0],[0.4844,-0.7344,0],[0.4844,-0.7188,0],[0.4844,-0.7032,0],[0.4844,-0.6876,0],[0.4844,-0.6718,0],[0.4844,-0.6562,0],[0.4844,-0.6406,0],[0.4844,-0.625,0],[0.4844,-0.6094,0],[0.4844,-0.5938,0],[0.4844,-0.5782,0],[0.4844,-0.5624,0],[0.4844,-0.5468,0],[0.4844,-0.5312,0],[0.4844,-0.5156,0],[0.4844,-0.5,0],[0.4844,-0.4844,0],[0.4844,-0.4688,0],[0.4844,-0.4532,0],[0.4844,-0.4376,0],[0.4844,-0.4218,0],[0.4844,-0.4062,0],[0.4844,-0.3906,0],[0.4844,-0.375,0],[0.4844,-0.3594,0],[0.4844,-0.3438,0],[0.4844,-0.3282,0],[0.4844,-0.3124,0],[0.4844,-0.2968,0],[0.4844,-0.2812,0],[0.4844,-0.2656,0],[0.4844,-0.25,0],[0.4844,-0.2344,0],[0.4844,-0.2188,0],[0.4844,-0.2032,0],[0.4844,-0.1876,0],[0.4844,-0.1718,0],[0.4844,-0.1562,0],[0.4844,-0.1406,0],[0.4844,-0.125,0],[0.4844,-0.1094,0],[0.4844,-0.0938,0],[0.4844,-0.0782,0],[0.4844,-0.0624,0],[0.4844,-0.0468,0],[0.4844,-0.0312,0],[0.4844,-0.0156,0],[0.4844,0,0],[0.4844,0.0156,0],[0.4844,0.0312,0],[0.4844,0.0468,0],[0.4844,0.0624,0],[0.4844,0.0782,0],[0.4844,0.0938,0],[0.4844,0.1094,0],[0.4844,0.125,0],[0.4844,0.1406,0],[0.4844,0.1562,0],[0.4844,0.1718,0],[0.4844,0.1876,0],[0.4844,0.2032,0],[0.4844,0.2188,0],[0.4844,0.2344,0],[0.4844,0.25,0],[0.4844,0.2656,0],[0.4844,0.2812,0],[0.4844,0.2968,0],[0.4844,0.3124,0],[0.4844,0.3282,0],[0.4844,0.3438,0],[0.4844,0.3594,0],[0.4844,0.375,0],[0.4844,0.3906,0],[0.4844,0.4062,0],[0.4844,0.4218,0],[0.4844,0.4376,0],[0.4844,0.4532,0],[0.4844,0.4688,0],[0.4844,0.4844,0],[0.4844,0.5,0],[0.4844,0.5156,0],[0.4844,0.5312,0],[0.4844,0.5468,0],[0.4844,0.5624,0],[0.4844,0.5782,0],[0.4844,0.5938,0],[0.4844,0.6094,0],[0.4844,0.625,0],[0.4844,0.6406,0],[0.4844,0.6562,0],[0.4844,0.6718,0],[0.4844,0.6876,0],[0.4844,0.7032,0],[0.4844,0.7188,0],[0.4844,0.7344,0],[0.4844,0.75,0],[0.4844,0.7656,0],[0.4844,0.7812,0],[0.4844,0.7968,0],[0.4844,0.8124,0],[0.4844,0.8282,0],[0.4844,0.8438,0],[0.4844,0.8594,0],[0.4844,0.875,0],[0.4844,0.8906,0],[0.4844,0.9062,0],[0.4844,0.9218,0],[0.4844,0.9376,0],[0.4844,0.9532,0],[0.4844,0.9688,0],[0.4844,0.9844,0],[0.5,-1,0],[0.5,-0.9844,0],[0.5,-0.9688,0],[0.5,-0.9532,0],[0.5,-0.9376,0],[0.5,-0.9218,0],[0.5,-0.9062,0],[0.5,-0.8906,0],[0.5,-0.875,0],[0.5,-0.8594,0],[0.5,-0.8438,0],[0.5,-0.8282,0],[0.5,-0.8124,0],[0.5,-0.7968,0],[0.5,-0.7812,0],[0.5,-0.7656,0],[0.5,-0.75,0],[0.5,-0.7344,0],[0.5,-0.7188,0],[0.5,-0.7032,0],[0.5,-0.6876,0],[0.5,-0.6718,0],[0.5,-0.6562,0],[0.5,-0.6406,0],[0.5,-0.625,0],[0.5,-0.6094,0],[0.5,-0.5938,0],[0.5,-0.5782,0],[0.5,-0.5624,0],[0.5,-0.5468,0],[0.5,-0.5312,0],[0.5,-0.5156,0],[0.5,-0.5,0],[0.5,-0.4844,0],[0.5,-0.4688,0],[0.5,-0.4532,0],[0.5,-0.4376,0],[0.5,-0.4218,0],[0.5,-0.4062,0],[0.5,-0.3906,0],[0.5,-0.375,0],[0.5,-0.3594,0],[0.5,-0.3438,0],[0.5,-0.3282,0],[0.5,-0.3124,0],[0.5,-0.2968,0],[0.5,-0.2812,0],[0.5,-0.2656,0],[0.5,-0.25,0],[0.5,-0.2344,0],[0.5,-0.2188,0],[0.5,-0.2032,0],[0.5,-0.1876,0],[0.5,-0.1718,0],[0.5,-0.1562,0],[0.5,-0.1406,0],[0.5,-0.125,0],[0.5,-0.1094,0],[0.5,-0.0938,0],[0.5,-0.0782,0],[0.5,-0.0624,0],[0.5,-0.0468,0],[0.5,-0.0312,0],[0.5,-0.0156,0],[0.5,0,0],[0.5,0.0156,0],[0.5,0.0312,0],[0.5,0.0468,0],[0.5,0.0624,0],[0.5,0.0782,0],[0.5,0.0938,0],[0.5,0.1094,0],[0.5,0.125,0],[0.5,0.1406,0],[0.5,0.1562,0],[0.5,0.1718,0],[0.5,0.1876,0],[0.5,0.2032,0],[0.5,0.2188,0],[0.5,0.2344,0],[0.5,0.25,0],[0.5,0.2656,0],[0.5,0.2812,0],[0.5,0.2968,0],[0.5,0.3124,0],[0.5,0.3282,0],[0.5,0.3438,0],[0.5,0.3594,0],[0.5,0.375,0],[0.5,0.3906,0],[0.5,0.4062,0],[0.5,0.4218,0],[0.5,0.4376,0],[0.5,0.4532,0],[0.5,0.4688,0],[0.5,0.4844,0],[0.5,0.5,0],[0.5,0.5156,0],[0.5,0.5312,0],[0.5,0.5468,0],[0.5,0.5624,0],[0.5,0.5782,0],[0.5,0.5938,0],[0.5,0.6094,0],[0.5,0.625,0],[0.5,0.6406,0],[0.5,0.6562,0],[0.5,0.6718,0],[0.5,0.6876,0],[0.5,0.7032,0],[0.5,0.7188,0],[0.5,0.7344,0],[0.5,0.75,0],[0.5,0.7656,0],[0.5,0.7812,0],[0.5,0.7968,0],[0.5,0.8124,0],[0.5,0.8282,0],[0.5,0.8438,0],[0.5,0.8594,0],[0.5,0.875,0],[0.5,0.8906,0],[0.5,0.9062,0],[0.5,0.9218,0],[0.5,0.9376,0],[0.5,0.9532,0],[0.5,0.9688,0],[0.5,0.9844,0],[0.5156,-1,0],[0.5156,-0.9844,0],[0.5156,-0.9688,0],[0.5156,-0.9532,0],[0.5156,-0.9376,0],[0.5156,-0.9218,0],[0.5156,-0.9062,0],[0.5156,-0.8906,0],[0.5156,-0.875,0],[0.5156,-0.8594,0],[0.5156,-0.8438,0],[0.5156,-0.8282,0],[0.5156,-0.8124,0],[0.5156,-0.7968,0],[0.5156,-0.7812,0],[0.5156,-0.7656,0],[0.5156,-0.75,0],[0.5156,-0.7344,0],[0.5156,-0.7188,0],[0.5156,-0.7032,0],[0.5156,-0.6876,0],[0.5156,-0.6718,0],[0.5156,-0.6562,0],[0.5156,-0.6406,0],[0.5156,-0.625,0],[0.5156,-0.6094,0],[0.5156,-0.5938,0],[0.5156,-0.5782,0],[0.5156,-0.5624,0],[0.5156,-0.5468,0],[0.5156,-0.5312,0],[0.5156,-0.5156,0],[0.5156,-0.5,0],[0.5156,-0.4844,0],[0.5156,-0.4688,0],[0.5156,-0.4532,0],[0.5156,-0.4376,0],[0.5156,-0.4218,0],[0.5156,-0.4062,0],[0.5156,-0.3906,0],[0.5156,-0.375,0],[0.5156,-0.3594,0],[0.5156,-0.3438,0],[0.5156,-0.3282,0],[0.5156,-0.3124,0],[0.5156,-0.2968,0],[0.5156,-0.2812,0],[0.5156,-0.2656,0],[0.5156,-0.25,0],[0.5156,-0.2344,0],[0.5156,-0.2188,0],[0.5156,-0.2032,0],[0.5156,-0.1876,0],[0.5156,-0.1718,0],[0.5156,-0.1562,0],[0.5156,-0.1406,0],[0.5156,-0.125,0],[0.5156,-0.1094,0],[0.5156,-0.0938,0],[0.5156,-0.0782,0],[0.5156,-0.0624,0],[0.5156,-0.0468,0],[0.5156,-0.0312,0],[0.5156,-0.0156,0],[0.5156,0,0],[0.5156,0.0156,0],[0.5156,0.0312,0],[0.5156,0.0468,0],[0.5156,0.0624,0],[0.5156,0.0782,0],[0.5156,0.0938,0],[0.5156,0.1094,0],[0.5156,0.125,0],[0.5156,0.1406,0],[0.5156,0.1562,0],[0.5156,0.1718,0],[0.5156,0.1876,0],[0.5156,0.2032,0],[0.5156,0.2188,0],[0.5156,0.2344,0],[0.5156,0.25,0],[0.5156,0.2656,0],[0.5156,0.2812,0],[0.5156,0.2968,0],[0.5156,0.3124,0],[0.5156,0.3282,0],[0.5156,0.3438,0],[0.5156,0.3594,0],[0.5156,0.375,0],[0.5156,0.3906,0],[0.5156,0.4062,0],[0.5156,0.4218,0],[0.5156,0.4376,0],[0.5156,0.4532,0],[0.5156,0.4688,0],[0.5156,0.4844,0],[0.5156,0.5,0],[0.5156,0.5156,0],[0.5156,0.5312,0],[0.5156,0.5468,0],[0.5156,0.5624,0],[0.5156,0.5782,0],[0.5156,0.5938,0],[0.5156,0.6094,0],[0.5156,0.625,0],[0.5156,0.6406,0],[0.5156,0.6562,0],[0.5156,0.6718,0],[0.5156,0.6876,0],[0.5156,0.7032,0],[0.5156,0.7188,0],[0.5156,0.7344,0],[0.5156,0.75,0],[0.5156,0.7656,0],[0.5156,0.7812,0],[0.5156,0.7968,0],[0.5156,0.8124,0],[0.5156,0.8282,0],[0.5156,0.8438,0],[0.5156,0.8594,0],[0.5156,0.875,0],[0.5156,0.8906,0],[0.5156,0.9062,0],[0.5156,0.9218,0],[0.5156,0.9376,0],[0.5156,0.9532,0],[0.5156,0.9688,0],[0.5156,0.9844,0],[0.5312,-1,0],[0.5312,-0.9844,0],[0.5312,-0.9688,0],[0.5312,-0.9532,0],[0.5312,-0.9376,0],[0.5312,-0.9218,0],[0.5312,-0.9062,0],[0.5312,-0.8906,0],[0.5312,-0.875,0],[0.5312,-0.8594,0],[0.5312,-0.8438,0],[0.5312,-0.8282,0],[0.5312,-0.8124,0],[0.5312,-0.7968,0],[0.5312,-0.7812,0],[0.5312,-0.7656,0],[0.5312,-0.75,0],[0.5312,-0.7344,0],[0.5312,-0.7188,0],[0.5312,-0.7032,0],[0.5312,-0.6876,0],[0.5312,-0.6718,0],[0.5312,-0.6562,0],[0.5312,-0.6406,0],[0.5312,-0.625,0],[0.5312,-0.6094,0],[0.5312,-0.5938,0],[0.5312,-0.5782,0],[0.5312,-0.5624,0],[0.5312,-0.5468,0],[0.5312,-0.5312,0],[0.5312,-0.5156,0],[0.5312,-0.5,0],[0.5312,-0.4844,0],[0.5312,-0.4688,0],[0.5312,-0.4532,0],[0.5312,-0.4376,0],[0.5312,-0.4218,0],[0.5312,-0.4062,0],[0.5312,-0.3906,0],[0.5312,-0.375,0],[0.5312,-0.3594,0],[0.5312,-0.3438,0],[0.5312,-0.3282,0],[0.5312,-0.3124,0],[0.5312,-0.2968,0],[0.5312,-0.2812,0],[0.5312,-0.2656,0],[0.5312,-0.25,0],[0.5312,-0.2344,0],[0.5312,-0.2188,0],[0.5312,-0.2032,0],[0.5312,-0.1876,0],[0.5312,-0.1718,0],[0.5312,-0.1562,0],[0.5312,-0.1406,0],[0.5312,-0.125,0],[0.5312,-0.1094,0],[0.5312,-0.0938,0],[0.5312,-0.0782,0],[0.5312,-0.0624,0],[0.5312,-0.0468,0],[0.5312,-0.0312,0],[0.5312,-0.0156,0],[0.5312,0,0],[0.5312,0.0156,0],[0.5312,0.0312,0],[0.5312,0.0468,0],[0.5312,0.0624,0],[0.5312,0.0782,0],[0.5312,0.0938,0],[0.5312,0.1094,0],[0.5312,0.125,0],[0.5312,0.1406,0],[0.5312,0.1562,0],[0.5312,0.1718,0],[0.5312,0.1876,0],[0.5312,0.2032,0],[0.5312,0.2188,0],[0.5312,0.2344,0],[0.5312,0.25,0],[0.5312,0.2656,0],[0.5312,0.2812,0],[0.5312,0.2968,0],[0.5312,0.3124,0],[0.5312,0.3282,0],[0.5312,0.3438,0],[0.5312,0.3594,0],[0.5312,0.375,0],[0.5312,0.3906,0],[0.5312,0.4062,0],[0.5312,0.4218,0],[0.5312,0.4376,0],[0.5312,0.4532,0],[0.5312,0.4688,0],[0.5312,0.4844,0],[0.5312,0.5,0],[0.5312,0.5156,0],[0.5312,0.5312,0],[0.5312,0.5468,0],[0.5312,0.5624,0],[0.5312,0.5782,0],[0.5312,0.5938,0],[0.5312,0.6094,0],[0.5312,0.625,0],[0.5312,0.6406,0],[0.5312,0.6562,0],[0.5312,0.6718,0],[0.5312,0.6876,0],[0.5312,0.7032,0],[0.5312,0.7188,0],[0.5312,0.7344,0],[0.5312,0.75,0],[0.5312,0.7656,0],[0.5312,0.7812,0],[0.5312,0.7968,0],[0.5312,0.8124,0],[0.5312,0.8282,0],[0.5312,0.8438,0],[0.5312,0.8594,0],[0.5312,0.875,0],[0.5312,0.8906,0],[0.5312,0.9062,0],[0.5312,0.9218,0],[0.5312,0.9376,0],[0.5312,0.9532,0],[0.5312,0.9688,0],[0.5312,0.9844,0],[0.5468,-1,0],[0.5468,-0.9844,0],[0.5468,-0.9688,0],[0.5468,-0.9532,0],[0.5468,-0.9376,0],[0.5468,-0.9218,0],[0.5468,-0.9062,0],[0.5468,-0.8906,0],[0.5468,-0.875,0],[0.5468,-0.8594,0],[0.5468,-0.8438,0],[0.5468,-0.8282,0],[0.5468,-0.8124,0],[0.5468,-0.7968,0],[0.5468,-0.7812,0],[0.5468,-0.7656,0],[0.5468,-0.75,0],[0.5468,-0.7344,0],[0.5468,-0.7188,0],[0.5468,-0.7032,0],[0.5468,-0.6876,0],[0.5468,-0.6718,0],[0.5468,-0.6562,0],[0.5468,-0.6406,0],[0.5468,-0.625,0],[0.5468,-0.6094,0],[0.5468,-0.5938,0],[0.5468,-0.5782,0],[0.5468,-0.5624,0],[0.5468,-0.5468,0],[0.5468,-0.5312,0],[0.5468,-0.5156,0],[0.5468,-0.5,0],[0.5468,-0.4844,0],[0.5468,-0.4688,0],[0.5468,-0.4532,0],[0.5468,-0.4376,0],[0.5468,-0.4218,0],[0.5468,-0.4062,0],[0.5468,-0.3906,0],[0.5468,-0.375,0],[0.5468,-0.3594,0],[0.5468,-0.3438,0],[0.5468,-0.3282,0],[0.5468,-0.3124,0],[0.5468,-0.2968,0],[0.5468,-0.2812,0],[0.5468,-0.2656,0],[0.5468,-0.25,0],[0.5468,-0.2344,0],[0.5468,-0.2188,0],[0.5468,-0.2032,0],[0.5468,-0.1876,0],[0.5468,-0.1718,0],[0.5468,-0.1562,0],[0.5468,-0.1406,0],[0.5468,-0.125,0],[0.5468,-0.1094,0],[0.5468,-0.0938,0],[0.5468,-0.0782,0],[0.5468,-0.0624,0],[0.5468,-0.0468,0],[0.5468,-0.0312,0],[0.5468,-0.0156,0],[0.5468,0,0],[0.5468,0.0156,0],[0.5468,0.0312,0],[0.5468,0.0468,0],[0.5468,0.0624,0],[0.5468,0.0782,0],[0.5468,0.0938,0],[0.5468,0.1094,0],[0.5468,0.125,0],[0.5468,0.1406,0],[0.5468,0.1562,0],[0.5468,0.1718,0],[0.5468,0.1876,0],[0.5468,0.2032,0],[0.5468,0.2188,0],[0.5468,0.2344,0],[0.5468,0.25,0],[0.5468,0.2656,0],[0.5468,0.2812,0],[0.5468,0.2968,0],[0.5468,0.3124,0],[0.5468,0.3282,0],[0.5468,0.3438,0],[0.5468,0.3594,0],[0.5468,0.375,0],[0.5468,0.3906,0],[0.5468,0.4062,0],[0.5468,0.4218,0],[0.5468,0.4376,0],[0.5468,0.4532,0],[0.5468,0.4688,0],[0.5468,0.4844,0],[0.5468,0.5,0],[0.5468,0.5156,0],[0.5468,0.5312,0],[0.5468,0.5468,0],[0.5468,0.5624,0],[0.5468,0.5782,0],[0.5468,0.5938,0],[0.5468,0.6094,0],[0.5468,0.625,0],[0.5468,0.6406,0],[0.5468,0.6562,0],[0.5468,0.6718,0],[0.5468,0.6876,0],[0.5468,0.7032,0],[0.5468,0.7188,0],[0.5468,0.7344,0],[0.5468,0.75,0],[0.5468,0.7656,0],[0.5468,0.7812,0],[0.5468,0.7968,0],[0.5468,0.8124,0],[0.5468,0.8282,0],[0.5468,0.8438,0],[0.5468,0.8594,0],[0.5468,0.875,0],[0.5468,0.8906,0],[0.5468,0.9062,0],[0.5468,0.9218,0],[0.5468,0.9376,0],[0.5468,0.9532,0],[0.5468,0.9688,0],[0.5468,0.9844,0],[0.5624,-1,0],[0.5624,-0.9844,0],[0.5624,-0.9688,0],[0.5624,-0.9532,0],[0.5624,-0.9376,0],[0.5624,-0.9218,0],[0.5624,-0.9062,0],[0.5624,-0.8906,0],[0.5624,-0.875,0],[0.5624,-0.8594,0],[0.5624,-0.8438,0],[0.5624,-0.8282,0],[0.5624,-0.8124,0],[0.5624,-0.7968,0],[0.5624,-0.7812,0],[0.5624,-0.7656,0],[0.5624,-0.75,0],[0.5624,-0.7344,0],[0.5624,-0.7188,0],[0.5624,-0.7032,0],[0.5624,-0.6876,0],[0.5624,-0.6718,0],[0.5624,-0.6562,0],[0.5624,-0.6406,0],[0.5624,-0.625,0],[0.5624,-0.6094,0],[0.5624,-0.5938,0],[0.5624,-0.5782,0],[0.5624,-0.5624,0],[0.5624,-0.5468,0],[0.5624,-0.5312,0],[0.5624,-0.5156,0],[0.5624,-0.5,0],[0.5624,-0.4844,0],[0.5624,-0.4688,0],[0.5624,-0.4532,0],[0.5624,-0.4376,0],[0.5624,-0.4218,0],[0.5624,-0.4062,0],[0.5624,-0.3906,0],[0.5624,-0.375,0],[0.5624,-0.3594,0],[0.5624,-0.3438,0],[0.5624,-0.3282,0],[0.5624,-0.3124,0],[0.5624,-0.2968,0],[0.5624,-0.2812,0],[0.5624,-0.2656,0],[0.5624,-0.25,0],[0.5624,-0.2344,0],[0.5624,-0.2188,0],[0.5624,-0.2032,0],[0.5624,-0.1876,0],[0.5624,-0.1718,0],[0.5624,-0.1562,0],[0.5624,-0.1406,0],[0.5624,-0.125,0],[0.5624,-0.1094,0],[0.5624,-0.0938,0],[0.5624,-0.0782,0],[0.5624,-0.0624,0],[0.5624,-0.0468,0],[0.5624,-0.0312,0],[0.5624,-0.0156,0],[0.5624,0,0],[0.5624,0.0156,0],[0.5624,0.0312,0],[0.5624,0.0468,0],[0.5624,0.0624,0],[0.5624,0.0782,0],[0.5624,0.0938,0],[0.5624,0.1094,0],[0.5624,0.125,0],[0.5624,0.1406,0],[0.5624,0.1562,0],[0.5624,0.1718,0],[0.5624,0.1876,0],[0.5624,0.2032,0],[0.5624,0.2188,0],[0.5624,0.2344,0],[0.5624,0.25,0],[0.5624,0.2656,0],[0.5624,0.2812,0],[0.5624,0.2968,0],[0.5624,0.3124,0],[0.5624,0.3282,0],[0.5624,0.3438,0],[0.5624,0.3594,0],[0.5624,0.375,0],[0.5624,0.3906,0],[0.5624,0.4062,0],[0.5624,0.4218,0],[0.5624,0.4376,0],[0.5624,0.4532,0],[0.5624,0.4688,0],[0.5624,0.4844,0],[0.5624,0.5,0],[0.5624,0.5156,0],[0.5624,0.5312,0],[0.5624,0.5468,0],[0.5624,0.5624,0],[0.5624,0.5782,0],[0.5624,0.5938,0],[0.5624,0.6094,0],[0.5624,0.625,0],[0.5624,0.6406,0],[0.5624,0.6562,0],[0.5624,0.6718,0],[0.5624,0.6876,0],[0.5624,0.7032,0],[0.5624,0.7188,0],[0.5624,0.7344,0],[0.5624,0.75,0],[0.5624,0.7656,0],[0.5624,0.7812,0],[0.5624,0.7968,0],[0.5624,0.8124,0],[0.5624,0.8282,0],[0.5624,0.8438,0],[0.5624,0.8594,0],[0.5624,0.875,0],[0.5624,0.8906,0],[0.5624,0.9062,0],[0.5624,0.9218,0],[0.5624,0.9376,0],[0.5624,0.9532,0],[0.5624,0.9688,0],[0.5624,0.9844,0],[0.5782,-1,0],[0.5782,-0.9844,0],[0.5782,-0.9688,0],[0.5782,-0.9532,0],[0.5782,-0.9376,0],[0.5782,-0.9218,0],[0.5782,-0.9062,0],[0.5782,-0.8906,0],[0.5782,-0.875,0],[0.5782,-0.8594,0],[0.5782,-0.8438,0],[0.5782,-0.8282,0],[0.5782,-0.8124,0],[0.5782,-0.7968,0],[0.5782,-0.7812,0],[0.5782,-0.7656,0],[0.5782,-0.75,0],[0.5782,-0.7344,0],[0.5782,-0.7188,0],[0.5782,-0.7032,0],[0.5782,-0.6876,0],[0.5782,-0.6718,0],[0.5782,-0.6562,0],[0.5782,-0.6406,0],[0.5782,-0.625,0],[0.5782,-0.6094,0],[0.5782,-0.5938,0],[0.5782,-0.5782,0],[0.5782,-0.5624,0],[0.5782,-0.5468,0],[0.5782,-0.5312,0],[0.5782,-0.5156,0],[0.5782,-0.5,0],[0.5782,-0.4844,0],[0.5782,-0.4688,0],[0.5782,-0.4532,0],[0.5782,-0.4376,0],[0.5782,-0.4218,0],[0.5782,-0.4062,0],[0.5782,-0.3906,0],[0.5782,-0.375,0],[0.5782,-0.3594,0],[0.5782,-0.3438,0],[0.5782,-0.3282,0],[0.5782,-0.3124,0],[0.5782,-0.2968,0],[0.5782,-0.2812,0],[0.5782,-0.2656,0],[0.5782,-0.25,0],[0.5782,-0.2344,0],[0.5782,-0.2188,0],[0.5782,-0.2032,0],[0.5782,-0.1876,0],[0.5782,-0.1718,0],[0.5782,-0.1562,0],[0.5782,-0.1406,0],[0.5782,-0.125,0],[0.5782,-0.1094,0],[0.5782,-0.0938,0],[0.5782,-0.0782,0],[0.5782,-0.0624,0],[0.5782,-0.0468,0],[0.5782,-0.0312,0],[0.5782,-0.0156,0],[0.5782,0,0],[0.5782,0.0156,0],[0.5782,0.0312,0],[0.5782,0.0468,0],[0.5782,0.0624,0],[0.5782,0.0782,0],[0.5782,0.0938,0],[0.5782,0.1094,0],[0.5782,0.125,0],[0.5782,0.1406,0],[0.5782,0.1562,0],[0.5782,0.1718,0],[0.5782,0.1876,0],[0.5782,0.2032,0],[0.5782,0.2188,0],[0.5782,0.2344,0],[0.5782,0.25,0],[0.5782,0.2656,0],[0.5782,0.2812,0],[0.5782,0.2968,0],[0.5782,0.3124,0],[0.5782,0.3282,0],[0.5782,0.3438,0],[0.5782,0.3594,0],[0.5782,0.375,0],[0.5782,0.3906,0],[0.5782,0.4062,0],[0.5782,0.4218,0],[0.5782,0.4376,0],[0.5782,0.4532,0],[0.5782,0.4688,0],[0.5782,0.4844,0],[0.5782,0.5,0],[0.5782,0.5156,0],[0.5782,0.5312,0],[0.5782,0.5468,0],[0.5782,0.5624,0],[0.5782,0.5782,0],[0.5782,0.5938,0],[0.5782,0.6094,0],[0.5782,0.625,0],[0.5782,0.6406,0],[0.5782,0.6562,0],[0.5782,0.6718,0],[0.5782,0.6876,0],[0.5782,0.7032,0],[0.5782,0.7188,0],[0.5782,0.7344,0],[0.5782,0.75,0],[0.5782,0.7656,0],[0.5782,0.7812,0],[0.5782,0.7968,0],[0.5782,0.8124,0],[0.5782,0.8282,0],[0.5782,0.8438,0],[0.5782,0.8594,0],[0.5782,0.875,0],[0.5782,0.8906,0],[0.5782,0.9062,0],[0.5782,0.9218,0],[0.5782,0.9376,0],[0.5782,0.9532,0],[0.5782,0.9688,0],[0.5782,0.9844,0],[0.5938,-1,0],[0.5938,-0.9844,0],[0.5938,-0.9688,0],[0.5938,-0.9532,0],[0.5938,-0.9376,0],[0.5938,-0.9218,0],[0.5938,-0.9062,0],[0.5938,-0.8906,0],[0.5938,-0.875,0],[0.5938,-0.8594,0],[0.5938,-0.8438,0],[0.5938,-0.8282,0],[0.5938,-0.8124,0],[0.5938,-0.7968,0],[0.5938,-0.7812,0],[0.5938,-0.7656,0],[0.5938,-0.75,0],[0.5938,-0.7344,0],[0.5938,-0.7188,0],[0.5938,-0.7032,0],[0.5938,-0.6876,0],[0.5938,-0.6718,0],[0.5938,-0.6562,0],[0.5938,-0.6406,0],[0.5938,-0.625,0],[0.5938,-0.6094,0],[0.5938,-0.5938,0],[0.5938,-0.5782,0],[0.5938,-0.5624,0],[0.5938,-0.5468,0],[0.5938,-0.5312,0],[0.5938,-0.5156,0],[0.5938,-0.5,0],[0.5938,-0.4844,0],[0.5938,-0.4688,0],[0.5938,-0.4532,0],[0.5938,-0.4376,0],[0.5938,-0.4218,0],[0.5938,-0.4062,0],[0.5938,-0.3906,0],[0.5938,-0.375,0],[0.5938,-0.3594,0],[0.5938,-0.3438,0],[0.5938,-0.3282,0],[0.5938,-0.3124,0],[0.5938,-0.2968,0],[0.5938,-0.2812,0],[0.5938,-0.2656,0],[0.5938,-0.25,0],[0.5938,-0.2344,0],[0.5938,-0.2188,0],[0.5938,-0.2032,0],[0.5938,-0.1876,0],[0.5938,-0.1718,0],[0.5938,-0.1562,0],[0.5938,-0.1406,0],[0.5938,-0.125,0],[0.5938,-0.1094,0],[0.5938,-0.0938,0],[0.5938,-0.0782,0],[0.5938,-0.0624,0],[0.5938,-0.0468,0],[0.5938,-0.0312,0],[0.5938,-0.0156,0],[0.5938,0,0],[0.5938,0.0156,0],[0.5938,0.0312,0],[0.5938,0.0468,0],[0.5938,0.0624,0],[0.5938,0.0782,0],[0.5938,0.0938,0],[0.5938,0.1094,0],[0.5938,0.125,0],[0.5938,0.1406,0],[0.5938,0.1562,0],[0.5938,0.1718,0],[0.5938,0.1876,0],[0.5938,0.2032,0],[0.5938,0.2188,0],[0.5938,0.2344,0],[0.5938,0.25,0],[0.5938,0.2656,0],[0.5938,0.2812,0],[0.5938,0.2968,0],[0.5938,0.3124,0],[0.5938,0.3282,0],[0.5938,0.3438,0],[0.5938,0.3594,0],[0.5938,0.375,0],[0.5938,0.3906,0],[0.5938,0.4062,0],[0.5938,0.4218,0],[0.5938,0.4376,0],[0.5938,0.4532,0],[0.5938,0.4688,0],[0.5938,0.4844,0],[0.5938,0.5,0],[0.5938,0.5156,0],[0.5938,0.5312,0],[0.5938,0.5468,0],[0.5938,0.5624,0],[0.5938,0.5782,0],[0.5938,0.5938,0],[0.5938,0.6094,0],[0.5938,0.625,0],[0.5938,0.6406,0],[0.5938,0.6562,0],[0.5938,0.6718,0],[0.5938,0.6876,0],[0.5938,0.7032,0],[0.5938,0.7188,0],[0.5938,0.7344,0],[0.5938,0.75,0],[0.5938,0.7656,0],[0.5938,0.7812,0],[0.5938,0.7968,0],[0.5938,0.8124,0],[0.5938,0.8282,0],[0.5938,0.8438,0],[0.5938,0.8594,0],[0.5938,0.875,0],[0.5938,0.8906,0],[0.5938,0.9062,0],[0.5938,0.9218,0],[0.5938,0.9376,0],[0.5938,0.9532,0],[0.5938,0.9688,0],[0.5938,0.9844,0],[0.6094,-1,0],[0.6094,-0.9844,0],[0.6094,-0.9688,0],[0.6094,-0.9532,0],[0.6094,-0.9376,0],[0.6094,-0.9218,0],[0.6094,-0.9062,0],[0.6094,-0.8906,0],[0.6094,-0.875,0],[0.6094,-0.8594,0],[0.6094,-0.8438,0],[0.6094,-0.8282,0],[0.6094,-0.8124,0],[0.6094,-0.7968,0],[0.6094,-0.7812,0],[0.6094,-0.7656,0],[0.6094,-0.75,0],[0.6094,-0.7344,0],[0.6094,-0.7188,0],[0.6094,-0.7032,0],[0.6094,-0.6876,0],[0.6094,-0.6718,0],[0.6094,-0.6562,0],[0.6094,-0.6406,0],[0.6094,-0.625,0],[0.6094,-0.6094,0],[0.6094,-0.5938,0],[0.6094,-0.5782,0],[0.6094,-0.5624,0],[0.6094,-0.5468,0],[0.6094,-0.5312,0],[0.6094,-0.5156,0],[0.6094,-0.5,0],[0.6094,-0.4844,0],[0.6094,-0.4688,0],[0.6094,-0.4532,0],[0.6094,-0.4376,0],[0.6094,-0.4218,0],[0.6094,-0.4062,0],[0.6094,-0.3906,0],[0.6094,-0.375,0],[0.6094,-0.3594,0],[0.6094,-0.3438,0],[0.6094,-0.3282,0],[0.6094,-0.3124,0],[0.6094,-0.2968,0],[0.6094,-0.2812,0],[0.6094,-0.2656,0],[0.6094,-0.25,0],[0.6094,-0.2344,0],[0.6094,-0.2188,0],[0.6094,-0.2032,0],[0.6094,-0.1876,0],[0.6094,-0.1718,0],[0.6094,-0.1562,0],[0.6094,-0.1406,0],[0.6094,-0.125,0],[0.6094,-0.1094,0],[0.6094,-0.0938,0],[0.6094,-0.0782,0],[0.6094,-0.0624,0],[0.6094,-0.0468,0],[0.6094,-0.0312,0],[0.6094,-0.0156,0],[0.6094,0,0],[0.6094,0.0156,0],[0.6094,0.0312,0],[0.6094,0.0468,0],[0.6094,0.0624,0],[0.6094,0.0782,0],[0.6094,0.0938,0],[0.6094,0.1094,0],[0.6094,0.125,0],[0.6094,0.1406,0],[0.6094,0.1562,0],[0.6094,0.1718,0],[0.6094,0.1876,0],[0.6094,0.2032,0],[0.6094,0.2188,0],[0.6094,0.2344,0],[0.6094,0.25,0],[0.6094,0.2656,0],[0.6094,0.2812,0],[0.6094,0.2968,0],[0.6094,0.3124,0],[0.6094,0.3282,0],[0.6094,0.3438,0],[0.6094,0.3594,0],[0.6094,0.375,0],[0.6094,0.3906,0],[0.6094,0.4062,0],[0.6094,0.4218,0],[0.6094,0.4376,0],[0.6094,0.4532,0],[0.6094,0.4688,0],[0.6094,0.4844,0],[0.6094,0.5,0],[0.6094,0.5156,0],[0.6094,0.5312,0],[0.6094,0.5468,0],[0.6094,0.5624,0],[0.6094,0.5782,0],[0.6094,0.5938,0],[0.6094,0.6094,0],[0.6094,0.625,0],[0.6094,0.6406,0],[0.6094,0.6562,0],[0.6094,0.6718,0],[0.6094,0.6876,0],[0.6094,0.7032,0],[0.6094,0.7188,0],[0.6094,0.7344,0],[0.6094,0.75,0],[0.6094,0.7656,0],[0.6094,0.7812,0],[0.6094,0.7968,0],[0.6094,0.8124,0],[0.6094,0.8282,0],[0.6094,0.8438,0],[0.6094,0.8594,0],[0.6094,0.875,0],[0.6094,0.8906,0],[0.6094,0.9062,0],[0.6094,0.9218,0],[0.6094,0.9376,0],[0.6094,0.9532,0],[0.6094,0.9688,0],[0.6094,0.9844,0],[0.625,-1,0],[0.625,-0.9844,0],[0.625,-0.9688,0],[0.625,-0.9532,0],[0.625,-0.9376,0],[0.625,-0.9218,0],[0.625,-0.9062,0],[0.625,-0.8906,0],[0.625,-0.875,0],[0.625,-0.8594,0],[0.625,-0.8438,0],[0.625,-0.8282,0],[0.625,-0.8124,0],[0.625,-0.7968,0],[0.625,-0.7812,0],[0.625,-0.7656,0],[0.625,-0.75,0],[0.625,-0.7344,0],[0.625,-0.7188,0],[0.625,-0.7032,0],[0.625,-0.6876,0],[0.625,-0.6718,0],[0.625,-0.6562,0],[0.625,-0.6406,0],[0.625,-0.625,0],[0.625,-0.6094,0],[0.625,-0.5938,0],[0.625,-0.5782,0],[0.625,-0.5624,0],[0.625,-0.5468,0],[0.625,-0.5312,0],[0.625,-0.5156,0],[0.625,-0.5,0],[0.625,-0.4844,0],[0.625,-0.4688,0],[0.625,-0.4532,0],[0.625,-0.4376,0],[0.625,-0.4218,0],[0.625,-0.4062,0],[0.625,-0.3906,0],[0.625,-0.375,0],[0.625,-0.3594,0],[0.625,-0.3438,0],[0.625,-0.3282,0],[0.625,-0.3124,0],[0.625,-0.2968,0],[0.625,-0.2812,0],[0.625,-0.2656,0],[0.625,-0.25,0],[0.625,-0.2344,0],[0.625,-0.2188,0],[0.625,-0.2032,0],[0.625,-0.1876,0],[0.625,-0.1718,0],[0.625,-0.1562,0],[0.625,-0.1406,0],[0.625,-0.125,0],[0.625,-0.1094,0],[0.625,-0.0938,0],[0.625,-0.0782,0],[0.625,-0.0624,0],[0.625,-0.0468,0],[0.625,-0.0312,0],[0.625,-0.0156,0],[0.625,0,0],[0.625,0.0156,0],[0.625,0.0312,0],[0.625,0.0468,0],[0.625,0.0624,0],[0.625,0.0782,0],[0.625,0.0938,0],[0.625,0.1094,0],[0.625,0.125,0],[0.625,0.1406,0],[0.625,0.1562,0],[0.625,0.1718,0],[0.625,0.1876,0],[0.625,0.2032,0],[0.625,0.2188,0],[0.625,0.2344,0],[0.625,0.25,0],[0.625,0.2656,0],[0.625,0.2812,0],[0.625,0.2968,0],[0.625,0.3124,0],[0.625,0.3282,0],[0.625,0.3438,0],[0.625,0.3594,0],[0.625,0.375,0],[0.625,0.3906,0],[0.625,0.4062,0],[0.625,0.4218,0],[0.625,0.4376,0],[0.625,0.4532,0],[0.625,0.4688,0],[0.625,0.4844,0],[0.625,0.5,0],[0.625,0.5156,0],[0.625,0.5312,0],[0.625,0.5468,0],[0.625,0.5624,0],[0.625,0.5782,0],[0.625,0.5938,0],[0.625,0.6094,0],[0.625,0.625,0],[0.625,0.6406,0],[0.625,0.6562,0],[0.625,0.6718,0],[0.625,0.6876,0],[0.625,0.7032,0],[0.625,0.7188,0],[0.625,0.7344,0],[0.625,0.75,0],[0.625,0.7656,0],[0.625,0.7812,0],[0.625,0.7968,0],[0.625,0.8124,0],[0.625,0.8282,0],[0.625,0.8438,0],[0.625,0.8594,0],[0.625,0.875,0],[0.625,0.8906,0],[0.625,0.9062,0],[0.625,0.9218,0],[0.625,0.9376,0],[0.625,0.9532,0],[0.625,0.9688,0],[0.625,0.9844,0],[0.6406,-1,0],[0.6406,-0.9844,0],[0.6406,-0.9688,0],[0.6406,-0.9532,0],[0.6406,-0.9376,0],[0.6406,-0.9218,0],[0.6406,-0.9062,0],[0.6406,-0.8906,0],[0.6406,-0.875,0],[0.6406,-0.8594,0],[0.6406,-0.8438,0],[0.6406,-0.8282,0],[0.6406,-0.8124,0],[0.6406,-0.7968,0],[0.6406,-0.7812,0],[0.6406,-0.7656,0],[0.6406,-0.75,0],[0.6406,-0.7344,0],[0.6406,-0.7188,0],[0.6406,-0.7032,0],[0.6406,-0.6876,0],[0.6406,-0.6718,0],[0.6406,-0.6562,0],[0.6406,-0.6406,0],[0.6406,-0.625,0],[0.6406,-0.6094,0],[0.6406,-0.5938,0],[0.6406,-0.5782,0],[0.6406,-0.5624,0],[0.6406,-0.5468,0],[0.6406,-0.5312,0],[0.6406,-0.5156,0],[0.6406,-0.5,0],[0.6406,-0.4844,0],[0.6406,-0.4688,0],[0.6406,-0.4532,0],[0.6406,-0.4376,0],[0.6406,-0.4218,0],[0.6406,-0.4062,0],[0.6406,-0.3906,0],[0.6406,-0.375,0],[0.6406,-0.3594,0],[0.6406,-0.3438,0],[0.6406,-0.3282,0],[0.6406,-0.3124,0],[0.6406,-0.2968,0],[0.6406,-0.2812,0],[0.6406,-0.2656,0],[0.6406,-0.25,0],[0.6406,-0.2344,0],[0.6406,-0.2188,0],[0.6406,-0.2032,0],[0.6406,-0.1876,0],[0.6406,-0.1718,0],[0.6406,-0.1562,0],[0.6406,-0.1406,0],[0.6406,-0.125,0],[0.6406,-0.1094,0],[0.6406,-0.0938,0],[0.6406,-0.0782,0],[0.6406,-0.0624,0],[0.6406,-0.0468,0],[0.6406,-0.0312,0],[0.6406,-0.0156,0],[0.6406,0,0],[0.6406,0.0156,0],[0.6406,0.0312,0],[0.6406,0.0468,0],[0.6406,0.0624,0],[0.6406,0.0782,0],[0.6406,0.0938,0],[0.6406,0.1094,0],[0.6406,0.125,0],[0.6406,0.1406,0],[0.6406,0.1562,0],[0.6406,0.1718,0],[0.6406,0.1876,0],[0.6406,0.2032,0],[0.6406,0.2188,0],[0.6406,0.2344,0],[0.6406,0.25,0],[0.6406,0.2656,0],[0.6406,0.2812,0],[0.6406,0.2968,0],[0.6406,0.3124,0],[0.6406,0.3282,0],[0.6406,0.3438,0],[0.6406,0.3594,0],[0.6406,0.375,0],[0.6406,0.3906,0],[0.6406,0.4062,0],[0.6406,0.4218,0],[0.6406,0.4376,0],[0.6406,0.4532,0],[0.6406,0.4688,0],[0.6406,0.4844,0],[0.6406,0.5,0],[0.6406,0.5156,0],[0.6406,0.5312,0],[0.6406,0.5468,0],[0.6406,0.5624,0],[0.6406,0.5782,0],[0.6406,0.5938,0],[0.6406,0.6094,0],[0.6406,0.625,0],[0.6406,0.6406,0],[0.6406,0.6562,0],[0.6406,0.6718,0],[0.6406,0.6876,0],[0.6406,0.7032,0],[0.6406,0.7188,0],[0.6406,0.7344,0],[0.6406,0.75,0],[0.6406,0.7656,0],[0.6406,0.7812,0],[0.6406,0.7968,0],[0.6406,0.8124,0],[0.6406,0.8282,0],[0.6406,0.8438,0],[0.6406,0.8594,0],[0.6406,0.875,0],[0.6406,0.8906,0],[0.6406,0.9062,0],[0.6406,0.9218,0],[0.6406,0.9376,0],[0.6406,0.9532,0],[0.6406,0.9688,0],[0.6406,0.9844,0],[0.6562,-1,0],[0.6562,-0.9844,0],[0.6562,-0.9688,0],[0.6562,-0.9532,0],[0.6562,-0.9376,0],[0.6562,-0.9218,0],[0.6562,-0.9062,0],[0.6562,-0.8906,0],[0.6562,-0.875,0],[0.6562,-0.8594,0],[0.6562,-0.8438,0],[0.6562,-0.8282,0],[0.6562,-0.8124,0],[0.6562,-0.7968,0],[0.6562,-0.7812,0],[0.6562,-0.7656,0],[0.6562,-0.75,0],[0.6562,-0.7344,0],[0.6562,-0.7188,0],[0.6562,-0.7032,0],[0.6562,-0.6876,0],[0.6562,-0.6718,0],[0.6562,-0.6562,0],[0.6562,-0.6406,0],[0.6562,-0.625,0],[0.6562,-0.6094,0],[0.6562,-0.5938,0],[0.6562,-0.5782,0],[0.6562,-0.5624,0],[0.6562,-0.5468,0],[0.6562,-0.5312,0],[0.6562,-0.5156,0],[0.6562,-0.5,0],[0.6562,-0.4844,0],[0.6562,-0.4688,0],[0.6562,-0.4532,0],[0.6562,-0.4376,0],[0.6562,-0.4218,0],[0.6562,-0.4062,0],[0.6562,-0.3906,0],[0.6562,-0.375,0],[0.6562,-0.3594,0],[0.6562,-0.3438,0],[0.6562,-0.3282,0],[0.6562,-0.3124,0],[0.6562,-0.2968,0],[0.6562,-0.2812,0],[0.6562,-0.2656,0],[0.6562,-0.25,0],[0.6562,-0.2344,0],[0.6562,-0.2188,0],[0.6562,-0.2032,0],[0.6562,-0.1876,0],[0.6562,-0.1718,0],[0.6562,-0.1562,0],[0.6562,-0.1406,0],[0.6562,-0.125,0],[0.6562,-0.1094,0],[0.6562,-0.0938,0],[0.6562,-0.0782,0],[0.6562,-0.0624,0],[0.6562,-0.0468,0],[0.6562,-0.0312,0],[0.6562,-0.0156,0],[0.6562,0,0],[0.6562,0.0156,0],[0.6562,0.0312,0],[0.6562,0.0468,0],[0.6562,0.0624,0],[0.6562,0.0782,0],[0.6562,0.0938,0],[0.6562,0.1094,0],[0.6562,0.125,0],[0.6562,0.1406,0],[0.6562,0.1562,0],[0.6562,0.1718,0],[0.6562,0.1876,0],[0.6562,0.2032,0],[0.6562,0.2188,0],[0.6562,0.2344,0],[0.6562,0.25,0],[0.6562,0.2656,0],[0.6562,0.2812,0],[0.6562,0.2968,0],[0.6562,0.3124,0],[0.6562,0.3282,0],[0.6562,0.3438,0],[0.6562,0.3594,0],[0.6562,0.375,0],[0.6562,0.3906,0],[0.6562,0.4062,0],[0.6562,0.4218,0],[0.6562,0.4376,0],[0.6562,0.4532,0],[0.6562,0.4688,0],[0.6562,0.4844,0],[0.6562,0.5,0],[0.6562,0.5156,0],[0.6562,0.5312,0],[0.6562,0.5468,0],[0.6562,0.5624,0],[0.6562,0.5782,0],[0.6562,0.5938,0],[0.6562,0.6094,0],[0.6562,0.625,0],[0.6562,0.6406,0],[0.6562,0.6562,0],[0.6562,0.6718,0],[0.6562,0.6876,0],[0.6562,0.7032,0],[0.6562,0.7188,0],[0.6562,0.7344,0],[0.6562,0.75,0],[0.6562,0.7656,0],[0.6562,0.7812,0],[0.6562,0.7968,0],[0.6562,0.8124,0],[0.6562,0.8282,0],[0.6562,0.8438,0],[0.6562,0.8594,0],[0.6562,0.875,0],[0.6562,0.8906,0],[0.6562,0.9062,0],[0.6562,0.9218,0],[0.6562,0.9376,0],[0.6562,0.9532,0],[0.6562,0.9688,0],[0.6562,0.9844,0],[0.6718,-1,0],[0.6718,-0.9844,0],[0.6718,-0.9688,0],[0.6718,-0.9532,0],[0.6718,-0.9376,0],[0.6718,-0.9218,0],[0.6718,-0.9062,0],[0.6718,-0.8906,0],[0.6718,-0.875,0],[0.6718,-0.8594,0],[0.6718,-0.8438,0],[0.6718,-0.8282,0],[0.6718,-0.8124,0],[0.6718,-0.7968,0],[0.6718,-0.7812,0],[0.6718,-0.7656,0],[0.6718,-0.75,0],[0.6718,-0.7344,0],[0.6718,-0.7188,0],[0.6718,-0.7032,0],[0.6718,-0.6876,0],[0.6718,-0.6718,0],[0.6718,-0.6562,0],[0.6718,-0.6406,0],[0.6718,-0.625,0],[0.6718,-0.6094,0],[0.6718,-0.5938,0],[0.6718,-0.5782,0],[0.6718,-0.5624,0],[0.6718,-0.5468,0],[0.6718,-0.5312,0],[0.6718,-0.5156,0],[0.6718,-0.5,0],[0.6718,-0.4844,0],[0.6718,-0.4688,0],[0.6718,-0.4532,0],[0.6718,-0.4376,0],[0.6718,-0.4218,0],[0.6718,-0.4062,0],[0.6718,-0.3906,0],[0.6718,-0.375,0],[0.6718,-0.3594,0],[0.6718,-0.3438,0],[0.6718,-0.3282,0],[0.6718,-0.3124,0],[0.6718,-0.2968,0],[0.6718,-0.2812,0],[0.6718,-0.2656,0],[0.6718,-0.25,0],[0.6718,-0.2344,0],[0.6718,-0.2188,0],[0.6718,-0.2032,0],[0.6718,-0.1876,0],[0.6718,-0.1718,0],[0.6718,-0.1562,0],[0.6718,-0.1406,0],[0.6718,-0.125,0],[0.6718,-0.1094,0],[0.6718,-0.0938,0],[0.6718,-0.0782,0],[0.6718,-0.0624,0],[0.6718,-0.0468,0],[0.6718,-0.0312,0],[0.6718,-0.0156,0],[0.6718,0,0],[0.6718,0.0156,0],[0.6718,0.0312,0],[0.6718,0.0468,0],[0.6718,0.0624,0],[0.6718,0.0782,0],[0.6718,0.0938,0],[0.6718,0.1094,0],[0.6718,0.125,0],[0.6718,0.1406,0],[0.6718,0.1562,0],[0.6718,0.1718,0],[0.6718,0.1876,0],[0.6718,0.2032,0],[0.6718,0.2188,0],[0.6718,0.2344,0],[0.6718,0.25,0],[0.6718,0.2656,0],[0.6718,0.2812,0],[0.6718,0.2968,0],[0.6718,0.3124,0],[0.6718,0.3282,0],[0.6718,0.3438,0],[0.6718,0.3594,0],[0.6718,0.375,0],[0.6718,0.3906,0],[0.6718,0.4062,0],[0.6718,0.4218,0],[0.6718,0.4376,0],[0.6718,0.4532,0],[0.6718,0.4688,0],[0.6718,0.4844,0],[0.6718,0.5,0],[0.6718,0.5156,0],[0.6718,0.5312,0],[0.6718,0.5468,0],[0.6718,0.5624,0],[0.6718,0.5782,0],[0.6718,0.5938,0],[0.6718,0.6094,0],[0.6718,0.625,0],[0.6718,0.6406,0],[0.6718,0.6562,0],[0.6718,0.6718,0],[0.6718,0.6876,0],[0.6718,0.7032,0],[0.6718,0.7188,0],[0.6718,0.7344,0],[0.6718,0.75,0],[0.6718,0.7656,0],[0.6718,0.7812,0],[0.6718,0.7968,0],[0.6718,0.8124,0],[0.6718,0.8282,0],[0.6718,0.8438,0],[0.6718,0.8594,0],[0.6718,0.875,0],[0.6718,0.8906,0],[0.6718,0.9062,0],[0.6718,0.9218,0],[0.6718,0.9376,0],[0.6718,0.9532,0],[0.6718,0.9688,0],[0.6718,0.9844,0],[0.6876,-1,0],[0.6876,-0.9844,0],[0.6876,-0.9688,0],[0.6876,-0.9532,0],[0.6876,-0.9376,0],[0.6876,-0.9218,0],[0.6876,-0.9062,0],[0.6876,-0.8906,0],[0.6876,-0.875,0],[0.6876,-0.8594,0],[0.6876,-0.8438,0],[0.6876,-0.8282,0],[0.6876,-0.8124,0],[0.6876,-0.7968,0],[0.6876,-0.7812,0],[0.6876,-0.7656,0],[0.6876,-0.75,0],[0.6876,-0.7344,0],[0.6876,-0.7188,0],[0.6876,-0.7032,0],[0.6876,-0.6876,0],[0.6876,-0.6718,0],[0.6876,-0.6562,0],[0.6876,-0.6406,0],[0.6876,-0.625,0],[0.6876,-0.6094,0],[0.6876,-0.5938,0],[0.6876,-0.5782,0],[0.6876,-0.5624,0],[0.6876,-0.5468,0],[0.6876,-0.5312,0],[0.6876,-0.5156,0],[0.6876,-0.5,0],[0.6876,-0.4844,0],[0.6876,-0.4688,0],[0.6876,-0.4532,0],[0.6876,-0.4376,0],[0.6876,-0.4218,0],[0.6876,-0.4062,0],[0.6876,-0.3906,0],[0.6876,-0.375,0],[0.6876,-0.3594,0],[0.6876,-0.3438,0],[0.6876,-0.3282,0],[0.6876,-0.3124,0],[0.6876,-0.2968,0],[0.6876,-0.2812,0],[0.6876,-0.2656,0],[0.6876,-0.25,0],[0.6876,-0.2344,0],[0.6876,-0.2188,0],[0.6876,-0.2032,0],[0.6876,-0.1876,0],[0.6876,-0.1718,0],[0.6876,-0.1562,0],[0.6876,-0.1406,0],[0.6876,-0.125,0],[0.6876,-0.1094,0],[0.6876,-0.0938,0],[0.6876,-0.0782,0],[0.6876,-0.0624,0],[0.6876,-0.0468,0],[0.6876,-0.0312,0],[0.6876,-0.0156,0],[0.6876,0,0],[0.6876,0.0156,0],[0.6876,0.0312,0],[0.6876,0.0468,0],[0.6876,0.0624,0],[0.6876,0.0782,0],[0.6876,0.0938,0],[0.6876,0.1094,0],[0.6876,0.125,0],[0.6876,0.1406,0],[0.6876,0.1562,0],[0.6876,0.1718,0],[0.6876,0.1876,0],[0.6876,0.2032,0],[0.6876,0.2188,0],[0.6876,0.2344,0],[0.6876,0.25,0],[0.6876,0.2656,0],[0.6876,0.2812,0],[0.6876,0.2968,0],[0.6876,0.3124,0],[0.6876,0.3282,0],[0.6876,0.3438,0],[0.6876,0.3594,0],[0.6876,0.375,0],[0.6876,0.3906,0],[0.6876,0.4062,0],[0.6876,0.4218,0],[0.6876,0.4376,0],[0.6876,0.4532,0],[0.6876,0.4688,0],[0.6876,0.4844,0],[0.6876,0.5,0],[0.6876,0.5156,0],[0.6876,0.5312,0],[0.6876,0.5468,0],[0.6876,0.5624,0],[0.6876,0.5782,0],[0.6876,0.5938,0],[0.6876,0.6094,0],[0.6876,0.625,0],[0.6876,0.6406,0],[0.6876,0.6562,0],[0.6876,0.6718,0],[0.6876,0.6876,0],[0.6876,0.7032,0],[0.6876,0.7188,0],[0.6876,0.7344,0],[0.6876,0.75,0],[0.6876,0.7656,0],[0.6876,0.7812,0],[0.6876,0.7968,0],[0.6876,0.8124,0],[0.6876,0.8282,0],[0.6876,0.8438,0],[0.6876,0.8594,0],[0.6876,0.875,0],[0.6876,0.8906,0],[0.6876,0.9062,0],[0.6876,0.9218,0],[0.6876,0.9376,0],[0.6876,0.9532,0],[0.6876,0.9688,0],[0.6876,0.9844,0],[0.7032,-1,0],[0.7032,-0.9844,0],[0.7032,-0.9688,0],[0.7032,-0.9532,0],[0.7032,-0.9376,0],[0.7032,-0.9218,0],[0.7032,-0.9062,0],[0.7032,-0.8906,0],[0.7032,-0.875,0],[0.7032,-0.8594,0],[0.7032,-0.8438,0],[0.7032,-0.8282,0],[0.7032,-0.8124,0],[0.7032,-0.7968,0],[0.7032,-0.7812,0],[0.7032,-0.7656,0],[0.7032,-0.75,0],[0.7032,-0.7344,0],[0.7032,-0.7188,0],[0.7032,-0.7032,0],[0.7032,-0.6876,0],[0.7032,-0.6718,0],[0.7032,-0.6562,0],[0.7032,-0.6406,0],[0.7032,-0.625,0],[0.7032,-0.6094,0],[0.7032,-0.5938,0],[0.7032,-0.5782,0],[0.7032,-0.5624,0],[0.7032,-0.5468,0],[0.7032,-0.5312,0],[0.7032,-0.5156,0],[0.7032,-0.5,0],[0.7032,-0.4844,0],[0.7032,-0.4688,0],[0.7032,-0.4532,0],[0.7032,-0.4376,0],[0.7032,-0.4218,0],[0.7032,-0.4062,0],[0.7032,-0.3906,0],[0.7032,-0.375,0],[0.7032,-0.3594,0],[0.7032,-0.3438,0],[0.7032,-0.3282,0],[0.7032,-0.3124,0],[0.7032,-0.2968,0],[0.7032,-0.2812,0],[0.7032,-0.2656,0],[0.7032,-0.25,0],[0.7032,-0.2344,0],[0.7032,-0.2188,0],[0.7032,-0.2032,0],[0.7032,-0.1876,0],[0.7032,-0.1718,0],[0.7032,-0.1562,0],[0.7032,-0.1406,0],[0.7032,-0.125,0],[0.7032,-0.1094,0],[0.7032,-0.0938,0],[0.7032,-0.0782,0],[0.7032,-0.0624,0],[0.7032,-0.0468,0],[0.7032,-0.0312,0],[0.7032,-0.0156,0],[0.7032,0,0],[0.7032,0.0156,0],[0.7032,0.0312,0],[0.7032,0.0468,0],[0.7032,0.0624,0],[0.7032,0.0782,0],[0.7032,0.0938,0],[0.7032,0.1094,0],[0.7032,0.125,0],[0.7032,0.1406,0],[0.7032,0.1562,0],[0.7032,0.1718,0],[0.7032,0.1876,0],[0.7032,0.2032,0],[0.7032,0.2188,0],[0.7032,0.2344,0],[0.7032,0.25,0],[0.7032,0.2656,0],[0.7032,0.2812,0],[0.7032,0.2968,0],[0.7032,0.3124,0],[0.7032,0.3282,0],[0.7032,0.3438,0],[0.7032,0.3594,0],[0.7032,0.375,0],[0.7032,0.3906,0],[0.7032,0.4062,0],[0.7032,0.4218,0],[0.7032,0.4376,0],[0.7032,0.4532,0],[0.7032,0.4688,0],[0.7032,0.4844,0],[0.7032,0.5,0],[0.7032,0.5156,0],[0.7032,0.5312,0],[0.7032,0.5468,0],[0.7032,0.5624,0],[0.7032,0.5782,0],[0.7032,0.5938,0],[0.7032,0.6094,0],[0.7032,0.625,0],[0.7032,0.6406,0],[0.7032,0.6562,0],[0.7032,0.6718,0],[0.7032,0.6876,0],[0.7032,0.7032,0],[0.7032,0.7188,0],[0.7032,0.7344,0],[0.7032,0.75,0],[0.7032,0.7656,0],[0.7032,0.7812,0],[0.7032,0.7968,0],[0.7032,0.8124,0],[0.7032,0.8282,0],[0.7032,0.8438,0],[0.7032,0.8594,0],[0.7032,0.875,0],[0.7032,0.8906,0],[0.7032,0.9062,0],[0.7032,0.9218,0],[0.7032,0.9376,0],[0.7032,0.9532,0],[0.7032,0.9688,0],[0.7032,0.9844,0],[0.7188,-1,0],[0.7188,-0.9844,0],[0.7188,-0.9688,0],[0.7188,-0.9532,0],[0.7188,-0.9376,0],[0.7188,-0.9218,0],[0.7188,-0.9062,0],[0.7188,-0.8906,0],[0.7188,-0.875,0],[0.7188,-0.8594,0],[0.7188,-0.8438,0],[0.7188,-0.8282,0],[0.7188,-0.8124,0],[0.7188,-0.7968,0],[0.7188,-0.7812,0],[0.7188,-0.7656,0],[0.7188,-0.75,0],[0.7188,-0.7344,0],[0.7188,-0.7188,0],[0.7188,-0.7032,0],[0.7188,-0.6876,0],[0.7188,-0.6718,0],[0.7188,-0.6562,0],[0.7188,-0.6406,0],[0.7188,-0.625,0],[0.7188,-0.6094,0],[0.7188,-0.5938,0],[0.7188,-0.5782,0],[0.7188,-0.5624,0],[0.7188,-0.5468,0],[0.7188,-0.5312,0],[0.7188,-0.5156,0],[0.7188,-0.5,0],[0.7188,-0.4844,0],[0.7188,-0.4688,0],[0.7188,-0.4532,0],[0.7188,-0.4376,0],[0.7188,-0.4218,0],[0.7188,-0.4062,0],[0.7188,-0.3906,0],[0.7188,-0.375,0],[0.7188,-0.3594,0],[0.7188,-0.3438,0],[0.7188,-0.3282,0],[0.7188,-0.3124,0],[0.7188,-0.2968,0],[0.7188,-0.2812,0],[0.7188,-0.2656,0],[0.7188,-0.25,0],[0.7188,-0.2344,0],[0.7188,-0.2188,0],[0.7188,-0.2032,0],[0.7188,-0.1876,0],[0.7188,-0.1718,0],[0.7188,-0.1562,0],[0.7188,-0.1406,0],[0.7188,-0.125,0],[0.7188,-0.1094,0],[0.7188,-0.0938,0],[0.7188,-0.0782,0],[0.7188,-0.0624,0],[0.7188,-0.0468,0],[0.7188,-0.0312,0],[0.7188,-0.0156,0],[0.7188,0,0],[0.7188,0.0156,0],[0.7188,0.0312,0],[0.7188,0.0468,0],[0.7188,0.0624,0],[0.7188,0.0782,0],[0.7188,0.0938,0],[0.7188,0.1094,0],[0.7188,0.125,0],[0.7188,0.1406,0],[0.7188,0.1562,0],[0.7188,0.1718,0],[0.7188,0.1876,0],[0.7188,0.2032,0],[0.7188,0.2188,0],[0.7188,0.2344,0],[0.7188,0.25,0],[0.7188,0.2656,0],[0.7188,0.2812,0],[0.7188,0.2968,0],[0.7188,0.3124,0],[0.7188,0.3282,0],[0.7188,0.3438,0],[0.7188,0.3594,0],[0.7188,0.375,0],[0.7188,0.3906,0],[0.7188,0.4062,0],[0.7188,0.4218,0],[0.7188,0.4376,0],[0.7188,0.4532,0],[0.7188,0.4688,0],[0.7188,0.4844,0],[0.7188,0.5,0],[0.7188,0.5156,0],[0.7188,0.5312,0],[0.7188,0.5468,0],[0.7188,0.5624,0],[0.7188,0.5782,0],[0.7188,0.5938,0],[0.7188,0.6094,0],[0.7188,0.625,0],[0.7188,0.6406,0],[0.7188,0.6562,0],[0.7188,0.6718,0],[0.7188,0.6876,0],[0.7188,0.7032,0],[0.7188,0.7188,0],[0.7188,0.7344,0],[0.7188,0.75,0],[0.7188,0.7656,0],[0.7188,0.7812,0],[0.7188,0.7968,0],[0.7188,0.8124,0],[0.7188,0.8282,0],[0.7188,0.8438,0],[0.7188,0.8594,0],[0.7188,0.875,0],[0.7188,0.8906,0],[0.7188,0.9062,0],[0.7188,0.9218,0],[0.7188,0.9376,0],[0.7188,0.9532,0],[0.7188,0.9688,0],[0.7188,0.9844,0],[0.7344,-1,0],[0.7344,-0.9844,0],[0.7344,-0.9688,0],[0.7344,-0.9532,0],[0.7344,-0.9376,0],[0.7344,-0.9218,0],[0.7344,-0.9062,0],[0.7344,-0.8906,0],[0.7344,-0.875,0],[0.7344,-0.8594,0],[0.7344,-0.8438,0],[0.7344,-0.8282,0],[0.7344,-0.8124,0],[0.7344,-0.7968,0],[0.7344,-0.7812,0],[0.7344,-0.7656,0],[0.7344,-0.75,0],[0.7344,-0.7344,0],[0.7344,-0.7188,0],[0.7344,-0.7032,0],[0.7344,-0.6876,0],[0.7344,-0.6718,0],[0.7344,-0.6562,0],[0.7344,-0.6406,0],[0.7344,-0.625,0],[0.7344,-0.6094,0],[0.7344,-0.5938,0],[0.7344,-0.5782,0],[0.7344,-0.5624,0],[0.7344,-0.5468,0],[0.7344,-0.5312,0],[0.7344,-0.5156,0],[0.7344,-0.5,0],[0.7344,-0.4844,0],[0.7344,-0.4688,0],[0.7344,-0.4532,0],[0.7344,-0.4376,0],[0.7344,-0.4218,0],[0.7344,-0.4062,0],[0.7344,-0.3906,0],[0.7344,-0.375,0],[0.7344,-0.3594,0],[0.7344,-0.3438,0],[0.7344,-0.3282,0],[0.7344,-0.3124,0],[0.7344,-0.2968,0],[0.7344,-0.2812,0],[0.7344,-0.2656,0],[0.7344,-0.25,0],[0.7344,-0.2344,0],[0.7344,-0.2188,0],[0.7344,-0.2032,0],[0.7344,-0.1876,0],[0.7344,-0.1718,0],[0.7344,-0.1562,0],[0.7344,-0.1406,0],[0.7344,-0.125,0],[0.7344,-0.1094,0],[0.7344,-0.0938,0],[0.7344,-0.0782,0],[0.7344,-0.0624,0],[0.7344,-0.0468,0],[0.7344,-0.0312,0],[0.7344,-0.0156,0],[0.7344,0,0],[0.7344,0.0156,0],[0.7344,0.0312,0],[0.7344,0.0468,0],[0.7344,0.0624,0],[0.7344,0.0782,0],[0.7344,0.0938,0],[0.7344,0.1094,0],[0.7344,0.125,0],[0.7344,0.1406,0],[0.7344,0.1562,0],[0.7344,0.1718,0],[0.7344,0.1876,0],[0.7344,0.2032,0],[0.7344,0.2188,0],[0.7344,0.2344,0],[0.7344,0.25,0],[0.7344,0.2656,0],[0.7344,0.2812,0],[0.7344,0.2968,0],[0.7344,0.3124,0],[0.7344,0.3282,0],[0.7344,0.3438,0],[0.7344,0.3594,0],[0.7344,0.375,0],[0.7344,0.3906,0],[0.7344,0.4062,0],[0.7344,0.4218,0],[0.7344,0.4376,0],[0.7344,0.4532,0],[0.7344,0.4688,0],[0.7344,0.4844,0],[0.7344,0.5,0],[0.7344,0.5156,0],[0.7344,0.5312,0],[0.7344,0.5468,0],[0.7344,0.5624,0],[0.7344,0.5782,0],[0.7344,0.5938,0],[0.7344,0.6094,0],[0.7344,0.625,0],[0.7344,0.6406,0],[0.7344,0.6562,0],[0.7344,0.6718,0],[0.7344,0.6876,0],[0.7344,0.7032,0],[0.7344,0.7188,0],[0.7344,0.7344,0],[0.7344,0.75,0],[0.7344,0.7656,0],[0.7344,0.7812,0],[0.7344,0.7968,0],[0.7344,0.8124,0],[0.7344,0.8282,0],[0.7344,0.8438,0],[0.7344,0.8594,0],[0.7344,0.875,0],[0.7344,0.8906,0],[0.7344,0.9062,0],[0.7344,0.9218,0],[0.7344,0.9376,0],[0.7344,0.9532,0],[0.7344,0.9688,0],[0.7344,0.9844,0],[0.75,-1,0],[0.75,-0.9844,0],[0.75,-0.9688,0],[0.75,-0.9532,0],[0.75,-0.9376,0],[0.75,-0.9218,0],[0.75,-0.9062,0],[0.75,-0.8906,0],[0.75,-0.875,0],[0.75,-0.8594,0],[0.75,-0.8438,0],[0.75,-0.8282,0],[0.75,-0.8124,0],[0.75,-0.7968,0],[0.75,-0.7812,0],[0.75,-0.7656,0],[0.75,-0.75,0],[0.75,-0.7344,0],[0.75,-0.7188,0],[0.75,-0.7032,0],[0.75,-0.6876,0],[0.75,-0.6718,0],[0.75,-0.6562,0],[0.75,-0.6406,0],[0.75,-0.625,0],[0.75,-0.6094,0],[0.75,-0.5938,0],[0.75,-0.5782,0],[0.75,-0.5624,0],[0.75,-0.5468,0],[0.75,-0.5312,0],[0.75,-0.5156,0],[0.75,-0.5,0],[0.75,-0.4844,0],[0.75,-0.4688,0],[0.75,-0.4532,0],[0.75,-0.4376,0],[0.75,-0.4218,0],[0.75,-0.4062,0],[0.75,-0.3906,0],[0.75,-0.375,0],[0.75,-0.3594,0],[0.75,-0.3438,0],[0.75,-0.3282,0],[0.75,-0.3124,0],[0.75,-0.2968,0],[0.75,-0.2812,0],[0.75,-0.2656,0],[0.75,-0.25,0],[0.75,-0.2344,0],[0.75,-0.2188,0],[0.75,-0.2032,0],[0.75,-0.1876,0],[0.75,-0.1718,0],[0.75,-0.1562,0],[0.75,-0.1406,0],[0.75,-0.125,0],[0.75,-0.1094,0],[0.75,-0.0938,0],[0.75,-0.0782,0],[0.75,-0.0624,0],[0.75,-0.0468,0],[0.75,-0.0312,0],[0.75,-0.0156,0],[0.75,0,0],[0.75,0.0156,0],[0.75,0.0312,0],[0.75,0.0468,0],[0.75,0.0624,0],[0.75,0.0782,0],[0.75,0.0938,0],[0.75,0.1094,0],[0.75,0.125,0],[0.75,0.1406,0],[0.75,0.1562,0],[0.75,0.1718,0],[0.75,0.1876,0],[0.75,0.2032,0],[0.75,0.2188,0],[0.75,0.2344,0],[0.75,0.25,0],[0.75,0.2656,0],[0.75,0.2812,0],[0.75,0.2968,0],[0.75,0.3124,0],[0.75,0.3282,0],[0.75,0.3438,0],[0.75,0.3594,0],[0.75,0.375,0],[0.75,0.3906,0],[0.75,0.4062,0],[0.75,0.4218,0],[0.75,0.4376,0],[0.75,0.4532,0],[0.75,0.4688,0],[0.75,0.4844,0],[0.75,0.5,0],[0.75,0.5156,0],[0.75,0.5312,0],[0.75,0.5468,0],[0.75,0.5624,0],[0.75,0.5782,0],[0.75,0.5938,0],[0.75,0.6094,0],[0.75,0.625,0],[0.75,0.6406,0],[0.75,0.6562,0],[0.75,0.6718,0],[0.75,0.6876,0],[0.75,0.7032,0],[0.75,0.7188,0],[0.75,0.7344,0],[0.75,0.75,0],[0.75,0.7656,0],[0.75,0.7812,0],[0.75,0.7968,0],[0.75,0.8124,0],[0.75,0.8282,0],[0.75,0.8438,0],[0.75,0.8594,0],[0.75,0.875,0],[0.75,0.8906,0],[0.75,0.9062,0],[0.75,0.9218,0],[0.75,0.9376,0],[0.75,0.9532,0],[0.75,0.9688,0],[0.75,0.9844,0],[0.7656,-1,0],[0.7656,-0.9844,0],[0.7656,-0.9688,0],[0.7656,-0.9532,0],[0.7656,-0.9376,0],[0.7656,-0.9218,0],[0.7656,-0.9062,0],[0.7656,-0.8906,0],[0.7656,-0.875,0],[0.7656,-0.8594,0],[0.7656,-0.8438,0],[0.7656,-0.8282,0],[0.7656,-0.8124,0],[0.7656,-0.7968,0],[0.7656,-0.7812,0],[0.7656,-0.7656,0],[0.7656,-0.75,0],[0.7656,-0.7344,0],[0.7656,-0.7188,0],[0.7656,-0.7032,0],[0.7656,-0.6876,0],[0.7656,-0.6718,0],[0.7656,-0.6562,0],[0.7656,-0.6406,0],[0.7656,-0.625,0],[0.7656,-0.6094,0],[0.7656,-0.5938,0],[0.7656,-0.5782,0],[0.7656,-0.5624,0],[0.7656,-0.5468,0],[0.7656,-0.5312,0],[0.7656,-0.5156,0],[0.7656,-0.5,0],[0.7656,-0.4844,0],[0.7656,-0.4688,0],[0.7656,-0.4532,0],[0.7656,-0.4376,0],[0.7656,-0.4218,0],[0.7656,-0.4062,0],[0.7656,-0.3906,0],[0.7656,-0.375,0],[0.7656,-0.3594,0],[0.7656,-0.3438,0],[0.7656,-0.3282,0],[0.7656,-0.3124,0],[0.7656,-0.2968,0],[0.7656,-0.2812,0],[0.7656,-0.2656,0],[0.7656,-0.25,0],[0.7656,-0.2344,0],[0.7656,-0.2188,0],[0.7656,-0.2032,0],[0.7656,-0.1876,0],[0.7656,-0.1718,0],[0.7656,-0.1562,0],[0.7656,-0.1406,0],[0.7656,-0.125,0],[0.7656,-0.1094,0],[0.7656,-0.0938,0],[0.7656,-0.0782,0],[0.7656,-0.0624,0],[0.7656,-0.0468,0],[0.7656,-0.0312,0],[0.7656,-0.0156,0],[0.7656,0,0],[0.7656,0.0156,0],[0.7656,0.0312,0],[0.7656,0.0468,0],[0.7656,0.0624,0],[0.7656,0.0782,0],[0.7656,0.0938,0],[0.7656,0.1094,0],[0.7656,0.125,0],[0.7656,0.1406,0],[0.7656,0.1562,0],[0.7656,0.1718,0],[0.7656,0.1876,0],[0.7656,0.2032,0],[0.7656,0.2188,0],[0.7656,0.2344,0],[0.7656,0.25,0],[0.7656,0.2656,0],[0.7656,0.2812,0],[0.7656,0.2968,0],[0.7656,0.3124,0],[0.7656,0.3282,0],[0.7656,0.3438,0],[0.7656,0.3594,0],[0.7656,0.375,0],[0.7656,0.3906,0],[0.7656,0.4062,0],[0.7656,0.4218,0],[0.7656,0.4376,0],[0.7656,0.4532,0],[0.7656,0.4688,0],[0.7656,0.4844,0],[0.7656,0.5,0],[0.7656,0.5156,0],[0.7656,0.5312,0],[0.7656,0.5468,0],[0.7656,0.5624,0],[0.7656,0.5782,0],[0.7656,0.5938,0],[0.7656,0.6094,0],[0.7656,0.625,0],[0.7656,0.6406,0],[0.7656,0.6562,0],[0.7656,0.6718,0],[0.7656,0.6876,0],[0.7656,0.7032,0],[0.7656,0.7188,0],[0.7656,0.7344,0],[0.7656,0.75,0],[0.7656,0.7656,0],[0.7656,0.7812,0],[0.7656,0.7968,0],[0.7656,0.8124,0],[0.7656,0.8282,0],[0.7656,0.8438,0],[0.7656,0.8594,0],[0.7656,0.875,0],[0.7656,0.8906,0],[0.7656,0.9062,0],[0.7656,0.9218,0],[0.7656,0.9376,0],[0.7656,0.9532,0],[0.7656,0.9688,0],[0.7656,0.9844,0],[0.7812,-1,0],[0.7812,-0.9844,0],[0.7812,-0.9688,0],[0.7812,-0.9532,0],[0.7812,-0.9376,0],[0.7812,-0.9218,0],[0.7812,-0.9062,0],[0.7812,-0.8906,0],[0.7812,-0.875,0],[0.7812,-0.8594,0],[0.7812,-0.8438,0],[0.7812,-0.8282,0],[0.7812,-0.8124,0],[0.7812,-0.7968,0],[0.7812,-0.7812,0],[0.7812,-0.7656,0],[0.7812,-0.75,0],[0.7812,-0.7344,0],[0.7812,-0.7188,0],[0.7812,-0.7032,0],[0.7812,-0.6876,0],[0.7812,-0.6718,0],[0.7812,-0.6562,0],[0.7812,-0.6406,0],[0.7812,-0.625,0],[0.7812,-0.6094,0],[0.7812,-0.5938,0],[0.7812,-0.5782,0],[0.7812,-0.5624,0],[0.7812,-0.5468,0],[0.7812,-0.5312,0],[0.7812,-0.5156,0],[0.7812,-0.5,0],[0.7812,-0.4844,0],[0.7812,-0.4688,0],[0.7812,-0.4532,0],[0.7812,-0.4376,0],[0.7812,-0.4218,0],[0.7812,-0.4062,0],[0.7812,-0.3906,0],[0.7812,-0.375,0],[0.7812,-0.3594,0],[0.7812,-0.3438,0],[0.7812,-0.3282,0],[0.7812,-0.3124,0],[0.7812,-0.2968,0],[0.7812,-0.2812,0],[0.7812,-0.2656,0],[0.7812,-0.25,0],[0.7812,-0.2344,0],[0.7812,-0.2188,0],[0.7812,-0.2032,0],[0.7812,-0.1876,0],[0.7812,-0.1718,0],[0.7812,-0.1562,0],[0.7812,-0.1406,0],[0.7812,-0.125,0],[0.7812,-0.1094,0],[0.7812,-0.0938,0],[0.7812,-0.0782,0],[0.7812,-0.0624,0],[0.7812,-0.0468,0],[0.7812,-0.0312,0],[0.7812,-0.0156,0],[0.7812,0,0],[0.7812,0.0156,0],[0.7812,0.0312,0],[0.7812,0.0468,0],[0.7812,0.0624,0],[0.7812,0.0782,0],[0.7812,0.0938,0],[0.7812,0.1094,0],[0.7812,0.125,0],[0.7812,0.1406,0],[0.7812,0.1562,0],[0.7812,0.1718,0],[0.7812,0.1876,0],[0.7812,0.2032,0],[0.7812,0.2188,0],[0.7812,0.2344,0],[0.7812,0.25,0],[0.7812,0.2656,0],[0.7812,0.2812,0],[0.7812,0.2968,0],[0.7812,0.3124,0],[0.7812,0.3282,0],[0.7812,0.3438,0],[0.7812,0.3594,0],[0.7812,0.375,0],[0.7812,0.3906,0],[0.7812,0.4062,0],[0.7812,0.4218,0],[0.7812,0.4376,0],[0.7812,0.4532,0],[0.7812,0.4688,0],[0.7812,0.4844,0],[0.7812,0.5,0],[0.7812,0.5156,0],[0.7812,0.5312,0],[0.7812,0.5468,0],[0.7812,0.5624,0],[0.7812,0.5782,0],[0.7812,0.5938,0],[0.7812,0.6094,0],[0.7812,0.625,0],[0.7812,0.6406,0],[0.7812,0.6562,0],[0.7812,0.6718,0],[0.7812,0.6876,0],[0.7812,0.7032,0],[0.7812,0.7188,0],[0.7812,0.7344,0],[0.7812,0.75,0],[0.7812,0.7656,0],[0.7812,0.7812,0],[0.7812,0.7968,0],[0.7812,0.8124,0],[0.7812,0.8282,0],[0.7812,0.8438,0],[0.7812,0.8594,0],[0.7812,0.875,0],[0.7812,0.8906,0],[0.7812,0.9062,0],[0.7812,0.9218,0],[0.7812,0.9376,0],[0.7812,0.9532,0],[0.7812,0.9688,0],[0.7812,0.9844,0],[0.7968,-1,0],[0.7968,-0.9844,0],[0.7968,-0.9688,0],[0.7968,-0.9532,0],[0.7968,-0.9376,0],[0.7968,-0.9218,0],[0.7968,-0.9062,0],[0.7968,-0.8906,0],[0.7968,-0.875,0],[0.7968,-0.8594,0],[0.7968,-0.8438,0],[0.7968,-0.8282,0],[0.7968,-0.8124,0],[0.7968,-0.7968,0],[0.7968,-0.7812,0],[0.7968,-0.7656,0],[0.7968,-0.75,0],[0.7968,-0.7344,0],[0.7968,-0.7188,0],[0.7968,-0.7032,0],[0.7968,-0.6876,0],[0.7968,-0.6718,0],[0.7968,-0.6562,0],[0.7968,-0.6406,0],[0.7968,-0.625,0],[0.7968,-0.6094,0],[0.7968,-0.5938,0],[0.7968,-0.5782,0],[0.7968,-0.5624,0],[0.7968,-0.5468,0],[0.7968,-0.5312,0],[0.7968,-0.5156,0],[0.7968,-0.5,0],[0.7968,-0.4844,0],[0.7968,-0.4688,0],[0.7968,-0.4532,0],[0.7968,-0.4376,0],[0.7968,-0.4218,0],[0.7968,-0.4062,0],[0.7968,-0.3906,0],[0.7968,-0.375,0],[0.7968,-0.3594,0],[0.7968,-0.3438,0],[0.7968,-0.3282,0],[0.7968,-0.3124,0],[0.7968,-0.2968,0],[0.7968,-0.2812,0],[0.7968,-0.2656,0],[0.7968,-0.25,0],[0.7968,-0.2344,0],[0.7968,-0.2188,0],[0.7968,-0.2032,0],[0.7968,-0.1876,0],[0.7968,-0.1718,0],[0.7968,-0.1562,0],[0.7968,-0.1406,0],[0.7968,-0.125,0],[0.7968,-0.1094,0],[0.7968,-0.0938,0],[0.7968,-0.0782,0],[0.7968,-0.0624,0],[0.7968,-0.0468,0],[0.7968,-0.0312,0],[0.7968,-0.0156,0],[0.7968,0,0],[0.7968,0.0156,0],[0.7968,0.0312,0],[0.7968,0.0468,0],[0.7968,0.0624,0],[0.7968,0.0782,0],[0.7968,0.0938,0],[0.7968,0.1094,0],[0.7968,0.125,0],[0.7968,0.1406,0],[0.7968,0.1562,0],[0.7968,0.1718,0],[0.7968,0.1876,0],[0.7968,0.2032,0],[0.7968,0.2188,0],[0.7968,0.2344,0],[0.7968,0.25,0],[0.7968,0.2656,0],[0.7968,0.2812,0],[0.7968,0.2968,0],[0.7968,0.3124,0],[0.7968,0.3282,0],[0.7968,0.3438,0],[0.7968,0.3594,0],[0.7968,0.375,0],[0.7968,0.3906,0],[0.7968,0.4062,0],[0.7968,0.4218,0],[0.7968,0.4376,0],[0.7968,0.4532,0],[0.7968,0.4688,0],[0.7968,0.4844,0],[0.7968,0.5,0],[0.7968,0.5156,0],[0.7968,0.5312,0],[0.7968,0.5468,0],[0.7968,0.5624,0],[0.7968,0.5782,0],[0.7968,0.5938,0],[0.7968,0.6094,0],[0.7968,0.625,0],[0.7968,0.6406,0],[0.7968,0.6562,0],[0.7968,0.6718,0],[0.7968,0.6876,0],[0.7968,0.7032,0],[0.7968,0.7188,0],[0.7968,0.7344,0],[0.7968,0.75,0],[0.7968,0.7656,0],[0.7968,0.7812,0],[0.7968,0.7968,0],[0.7968,0.8124,0],[0.7968,0.8282,0],[0.7968,0.8438,0],[0.7968,0.8594,0],[0.7968,0.875,0],[0.7968,0.8906,0],[0.7968,0.9062,0],[0.7968,0.9218,0],[0.7968,0.9376,0],[0.7968,0.9532,0],[0.7968,0.9688,0],[0.7968,0.9844,0],[0.8124,-1,0],[0.8124,-0.9844,0],[0.8124,-0.9688,0],[0.8124,-0.9532,0],[0.8124,-0.9376,0],[0.8124,-0.9218,0],[0.8124,-0.9062,0],[0.8124,-0.8906,0],[0.8124,-0.875,0],[0.8124,-0.8594,0],[0.8124,-0.8438,0],[0.8124,-0.8282,0],[0.8124,-0.8124,0],[0.8124,-0.7968,0],[0.8124,-0.7812,0],[0.8124,-0.7656,0],[0.8124,-0.75,0],[0.8124,-0.7344,0],[0.8124,-0.7188,0],[0.8124,-0.7032,0],[0.8124,-0.6876,0],[0.8124,-0.6718,0],[0.8124,-0.6562,0],[0.8124,-0.6406,0],[0.8124,-0.625,0],[0.8124,-0.6094,0],[0.8124,-0.5938,0],[0.8124,-0.5782,0],[0.8124,-0.5624,0],[0.8124,-0.5468,0],[0.8124,-0.5312,0],[0.8124,-0.5156,0],[0.8124,-0.5,0],[0.8124,-0.4844,0],[0.8124,-0.4688,0],[0.8124,-0.4532,0],[0.8124,-0.4376,0],[0.8124,-0.4218,0],[0.8124,-0.4062,0],[0.8124,-0.3906,0],[0.8124,-0.375,0],[0.8124,-0.3594,0],[0.8124,-0.3438,0],[0.8124,-0.3282,0],[0.8124,-0.3124,0],[0.8124,-0.2968,0],[0.8124,-0.2812,0],[0.8124,-0.2656,0],[0.8124,-0.25,0],[0.8124,-0.2344,0],[0.8124,-0.2188,0],[0.8124,-0.2032,0],[0.8124,-0.1876,0],[0.8124,-0.1718,0],[0.8124,-0.1562,0],[0.8124,-0.1406,0],[0.8124,-0.125,0],[0.8124,-0.1094,0],[0.8124,-0.0938,0],[0.8124,-0.0782,0],[0.8124,-0.0624,0],[0.8124,-0.0468,0],[0.8124,-0.0312,0],[0.8124,-0.0156,0],[0.8124,0,0],[0.8124,0.0156,0],[0.8124,0.0312,0],[0.8124,0.0468,0],[0.8124,0.0624,0],[0.8124,0.0782,0],[0.8124,0.0938,0],[0.8124,0.1094,0],[0.8124,0.125,0],[0.8124,0.1406,0],[0.8124,0.1562,0],[0.8124,0.1718,0],[0.8124,0.1876,0],[0.8124,0.2032,0],[0.8124,0.2188,0],[0.8124,0.2344,0],[0.8124,0.25,0],[0.8124,0.2656,0],[0.8124,0.2812,0],[0.8124,0.2968,0],[0.8124,0.3124,0],[0.8124,0.3282,0],[0.8124,0.3438,0],[0.8124,0.3594,0],[0.8124,0.375,0],[0.8124,0.3906,0],[0.8124,0.4062,0],[0.8124,0.4218,0],[0.8124,0.4376,0],[0.8124,0.4532,0],[0.8124,0.4688,0],[0.8124,0.4844,0],[0.8124,0.5,0],[0.8124,0.5156,0],[0.8124,0.5312,0],[0.8124,0.5468,0],[0.8124,0.5624,0],[0.8124,0.5782,0],[0.8124,0.5938,0],[0.8124,0.6094,0],[0.8124,0.625,0],[0.8124,0.6406,0],[0.8124,0.6562,0],[0.8124,0.6718,0],[0.8124,0.6876,0],[0.8124,0.7032,0],[0.8124,0.7188,0],[0.8124,0.7344,0],[0.8124,0.75,0],[0.8124,0.7656,0],[0.8124,0.7812,0],[0.8124,0.7968,0],[0.8124,0.8124,0],[0.8124,0.8282,0],[0.8124,0.8438,0],[0.8124,0.8594,0],[0.8124,0.875,0],[0.8124,0.8906,0],[0.8124,0.9062,0],[0.8124,0.9218,0],[0.8124,0.9376,0],[0.8124,0.9532,0],[0.8124,0.9688,0],[0.8124,0.9844,0],[0.8282,-1,0],[0.8282,-0.9844,0],[0.8282,-0.9688,0],[0.8282,-0.9532,0],[0.8282,-0.9376,0],[0.8282,-0.9218,0],[0.8282,-0.9062,0],[0.8282,-0.8906,0],[0.8282,-0.875,0],[0.8282,-0.8594,0],[0.8282,-0.8438,0],[0.8282,-0.8282,0],[0.8282,-0.8124,0],[0.8282,-0.7968,0],[0.8282,-0.7812,0],[0.8282,-0.7656,0],[0.8282,-0.75,0],[0.8282,-0.7344,0],[0.8282,-0.7188,0],[0.8282,-0.7032,0],[0.8282,-0.6876,0],[0.8282,-0.6718,0],[0.8282,-0.6562,0],[0.8282,-0.6406,0],[0.8282,-0.625,0],[0.8282,-0.6094,0],[0.8282,-0.5938,0],[0.8282,-0.5782,0],[0.8282,-0.5624,0],[0.8282,-0.5468,0],[0.8282,-0.5312,0],[0.8282,-0.5156,0],[0.8282,-0.5,0],[0.8282,-0.4844,0],[0.8282,-0.4688,0],[0.8282,-0.4532,0],[0.8282,-0.4376,0],[0.8282,-0.4218,0],[0.8282,-0.4062,0],[0.8282,-0.3906,0],[0.8282,-0.375,0],[0.8282,-0.3594,0],[0.8282,-0.3438,0],[0.8282,-0.3282,0],[0.8282,-0.3124,0],[0.8282,-0.2968,0],[0.8282,-0.2812,0],[0.8282,-0.2656,0],[0.8282,-0.25,0],[0.8282,-0.2344,0],[0.8282,-0.2188,0],[0.8282,-0.2032,0],[0.8282,-0.1876,0],[0.8282,-0.1718,0],[0.8282,-0.1562,0],[0.8282,-0.1406,0],[0.8282,-0.125,0],[0.8282,-0.1094,0],[0.8282,-0.0938,0],[0.8282,-0.0782,0],[0.8282,-0.0624,0],[0.8282,-0.0468,0],[0.8282,-0.0312,0],[0.8282,-0.0156,0],[0.8282,0,0],[0.8282,0.0156,0],[0.8282,0.0312,0],[0.8282,0.0468,0],[0.8282,0.0624,0],[0.8282,0.0782,0],[0.8282,0.0938,0],[0.8282,0.1094,0],[0.8282,0.125,0],[0.8282,0.1406,0],[0.8282,0.1562,0],[0.8282,0.1718,0],[0.8282,0.1876,0],[0.8282,0.2032,0],[0.8282,0.2188,0],[0.8282,0.2344,0],[0.8282,0.25,0],[0.8282,0.2656,0],[0.8282,0.2812,0],[0.8282,0.2968,0],[0.8282,0.3124,0],[0.8282,0.3282,0],[0.8282,0.3438,0],[0.8282,0.3594,0],[0.8282,0.375,0],[0.8282,0.3906,0],[0.8282,0.4062,0],[0.8282,0.4218,0],[0.8282,0.4376,0],[0.8282,0.4532,0],[0.8282,0.4688,0],[0.8282,0.4844,0],[0.8282,0.5,0],[0.8282,0.5156,0],[0.8282,0.5312,0],[0.8282,0.5468,0],[0.8282,0.5624,0],[0.8282,0.5782,0],[0.8282,0.5938,0],[0.8282,0.6094,0],[0.8282,0.625,0],[0.8282,0.6406,0],[0.8282,0.6562,0],[0.8282,0.6718,0],[0.8282,0.6876,0],[0.8282,0.7032,0],[0.8282,0.7188,0],[0.8282,0.7344,0],[0.8282,0.75,0],[0.8282,0.7656,0],[0.8282,0.7812,0],[0.8282,0.7968,0],[0.8282,0.8124,0],[0.8282,0.8282,0],[0.8282,0.8438,0],[0.8282,0.8594,0],[0.8282,0.875,0],[0.8282,0.8906,0],[0.8282,0.9062,0],[0.8282,0.9218,0],[0.8282,0.9376,0],[0.8282,0.9532,0],[0.8282,0.9688,0],[0.8282,0.9844,0],[0.8438,-1,0],[0.8438,-0.9844,0],[0.8438,-0.9688,0],[0.8438,-0.9532,0],[0.8438,-0.9376,0],[0.8438,-0.9218,0],[0.8438,-0.9062,0],[0.8438,-0.8906,0],[0.8438,-0.875,0],[0.8438,-0.8594,0],[0.8438,-0.8438,0],[0.8438,-0.8282,0],[0.8438,-0.8124,0],[0.8438,-0.7968,0],[0.8438,-0.7812,0],[0.8438,-0.7656,0],[0.8438,-0.75,0],[0.8438,-0.7344,0],[0.8438,-0.7188,0],[0.8438,-0.7032,0],[0.8438,-0.6876,0],[0.8438,-0.6718,0],[0.8438,-0.6562,0],[0.8438,-0.6406,0],[0.8438,-0.625,0],[0.8438,-0.6094,0],[0.8438,-0.5938,0],[0.8438,-0.5782,0],[0.8438,-0.5624,0],[0.8438,-0.5468,0],[0.8438,-0.5312,0],[0.8438,-0.5156,0],[0.8438,-0.5,0],[0.8438,-0.4844,0],[0.8438,-0.4688,0],[0.8438,-0.4532,0],[0.8438,-0.4376,0],[0.8438,-0.4218,0],[0.8438,-0.4062,0],[0.8438,-0.3906,0],[0.8438,-0.375,0],[0.8438,-0.3594,0],[0.8438,-0.3438,0],[0.8438,-0.3282,0],[0.8438,-0.3124,0],[0.8438,-0.2968,0],[0.8438,-0.2812,0],[0.8438,-0.2656,0],[0.8438,-0.25,0],[0.8438,-0.2344,0],[0.8438,-0.2188,0],[0.8438,-0.2032,0],[0.8438,-0.1876,0],[0.8438,-0.1718,0],[0.8438,-0.1562,0],[0.8438,-0.1406,0],[0.8438,-0.125,0],[0.8438,-0.1094,0],[0.8438,-0.0938,0],[0.8438,-0.0782,0],[0.8438,-0.0624,0],[0.8438,-0.0468,0],[0.8438,-0.0312,0],[0.8438,-0.0156,0],[0.8438,0,0],[0.8438,0.0156,0],[0.8438,0.0312,0],[0.8438,0.0468,0],[0.8438,0.0624,0],[0.8438,0.0782,0],[0.8438,0.0938,0],[0.8438,0.1094,0],[0.8438,0.125,0],[0.8438,0.1406,0],[0.8438,0.1562,0],[0.8438,0.1718,0],[0.8438,0.1876,0],[0.8438,0.2032,0],[0.8438,0.2188,0],[0.8438,0.2344,0],[0.8438,0.25,0],[0.8438,0.2656,0],[0.8438,0.2812,0],[0.8438,0.2968,0],[0.8438,0.3124,0],[0.8438,0.3282,0],[0.8438,0.3438,0],[0.8438,0.3594,0],[0.8438,0.375,0],[0.8438,0.3906,0],[0.8438,0.4062,0],[0.8438,0.4218,0],[0.8438,0.4376,0],[0.8438,0.4532,0],[0.8438,0.4688,0],[0.8438,0.4844,0],[0.8438,0.5,0],[0.8438,0.5156,0],[0.8438,0.5312,0],[0.8438,0.5468,0],[0.8438,0.5624,0],[0.8438,0.5782,0],[0.8438,0.5938,0],[0.8438,0.6094,0],[0.8438,0.625,0],[0.8438,0.6406,0],[0.8438,0.6562,0],[0.8438,0.6718,0],[0.8438,0.6876,0],[0.8438,0.7032,0],[0.8438,0.7188,0],[0.8438,0.7344,0],[0.8438,0.75,0],[0.8438,0.7656,0],[0.8438,0.7812,0],[0.8438,0.7968,0],[0.8438,0.8124,0],[0.8438,0.8282,0],[0.8438,0.8438,0],[0.8438,0.8594,0],[0.8438,0.875,0],[0.8438,0.8906,0],[0.8438,0.9062,0],[0.8438,0.9218,0],[0.8438,0.9376,0],[0.8438,0.9532,0],[0.8438,0.9688,0],[0.8438,0.9844,0],[0.8594,-1,0],[0.8594,-0.9844,0],[0.8594,-0.9688,0],[0.8594,-0.9532,0],[0.8594,-0.9376,0],[0.8594,-0.9218,0],[0.8594,-0.9062,0],[0.8594,-0.8906,0],[0.8594,-0.875,0],[0.8594,-0.8594,0],[0.8594,-0.8438,0],[0.8594,-0.8282,0],[0.8594,-0.8124,0],[0.8594,-0.7968,0],[0.8594,-0.7812,0],[0.8594,-0.7656,0],[0.8594,-0.75,0],[0.8594,-0.7344,0],[0.8594,-0.7188,0],[0.8594,-0.7032,0],[0.8594,-0.6876,0],[0.8594,-0.6718,0],[0.8594,-0.6562,0],[0.8594,-0.6406,0],[0.8594,-0.625,0],[0.8594,-0.6094,0],[0.8594,-0.5938,0],[0.8594,-0.5782,0],[0.8594,-0.5624,0],[0.8594,-0.5468,0],[0.8594,-0.5312,0],[0.8594,-0.5156,0],[0.8594,-0.5,0],[0.8594,-0.4844,0],[0.8594,-0.4688,0],[0.8594,-0.4532,0],[0.8594,-0.4376,0],[0.8594,-0.4218,0],[0.8594,-0.4062,0],[0.8594,-0.3906,0],[0.8594,-0.375,0],[0.8594,-0.3594,0],[0.8594,-0.3438,0],[0.8594,-0.3282,0],[0.8594,-0.3124,0],[0.8594,-0.2968,0],[0.8594,-0.2812,0],[0.8594,-0.2656,0],[0.8594,-0.25,0],[0.8594,-0.2344,0],[0.8594,-0.2188,0],[0.8594,-0.2032,0],[0.8594,-0.1876,0],[0.8594,-0.1718,0],[0.8594,-0.1562,0],[0.8594,-0.1406,0],[0.8594,-0.125,0],[0.8594,-0.1094,0],[0.8594,-0.0938,0],[0.8594,-0.0782,0],[0.8594,-0.0624,0],[0.8594,-0.0468,0],[0.8594,-0.0312,0],[0.8594,-0.0156,0],[0.8594,0,0],[0.8594,0.0156,0],[0.8594,0.0312,0],[0.8594,0.0468,0],[0.8594,0.0624,0],[0.8594,0.0782,0],[0.8594,0.0938,0],[0.8594,0.1094,0],[0.8594,0.125,0],[0.8594,0.1406,0],[0.8594,0.1562,0],[0.8594,0.1718,0],[0.8594,0.1876,0],[0.8594,0.2032,0],[0.8594,0.2188,0],[0.8594,0.2344,0],[0.8594,0.25,0],[0.8594,0.2656,0],[0.8594,0.2812,0],[0.8594,0.2968,0],[0.8594,0.3124,0],[0.8594,0.3282,0],[0.8594,0.3438,0],[0.8594,0.3594,0],[0.8594,0.375,0],[0.8594,0.3906,0],[0.8594,0.4062,0],[0.8594,0.4218,0],[0.8594,0.4376,0],[0.8594,0.4532,0],[0.8594,0.4688,0],[0.8594,0.4844,0],[0.8594,0.5,0],[0.8594,0.5156,0],[0.8594,0.5312,0],[0.8594,0.5468,0],[0.8594,0.5624,0],[0.8594,0.5782,0],[0.8594,0.5938,0],[0.8594,0.6094,0],[0.8594,0.625,0],[0.8594,0.6406,0],[0.8594,0.6562,0],[0.8594,0.6718,0],[0.8594,0.6876,0],[0.8594,0.7032,0],[0.8594,0.7188,0],[0.8594,0.7344,0],[0.8594,0.75,0],[0.8594,0.7656,0],[0.8594,0.7812,0],[0.8594,0.7968,0],[0.8594,0.8124,0],[0.8594,0.8282,0],[0.8594,0.8438,0],[0.8594,0.8594,0],[0.8594,0.875,0],[0.8594,0.8906,0],[0.8594,0.9062,0],[0.8594,0.9218,0],[0.8594,0.9376,0],[0.8594,0.9532,0],[0.8594,0.9688,0],[0.8594,0.9844,0],[0.875,-1,0],[0.875,-0.9844,0],[0.875,-0.9688,0],[0.875,-0.9532,0],[0.875,-0.9376,0],[0.875,-0.9218,0],[0.875,-0.9062,0],[0.875,-0.8906,0],[0.875,-0.875,0],[0.875,-0.8594,0],[0.875,-0.8438,0],[0.875,-0.8282,0],[0.875,-0.8124,0],[0.875,-0.7968,0],[0.875,-0.7812,0],[0.875,-0.7656,0],[0.875,-0.75,0],[0.875,-0.7344,0],[0.875,-0.7188,0],[0.875,-0.7032,0],[0.875,-0.6876,0],[0.875,-0.6718,0],[0.875,-0.6562,0],[0.875,-0.6406,0],[0.875,-0.625,0],[0.875,-0.6094,0],[0.875,-0.5938,0],[0.875,-0.5782,0],[0.875,-0.5624,0],[0.875,-0.5468,0],[0.875,-0.5312,0],[0.875,-0.5156,0],[0.875,-0.5,0],[0.875,-0.4844,0],[0.875,-0.4688,0],[0.875,-0.4532,0],[0.875,-0.4376,0],[0.875,-0.4218,0],[0.875,-0.4062,0],[0.875,-0.3906,0],[0.875,-0.375,0],[0.875,-0.3594,0],[0.875,-0.3438,0],[0.875,-0.3282,0],[0.875,-0.3124,0],[0.875,-0.2968,0],[0.875,-0.2812,0],[0.875,-0.2656,0],[0.875,-0.25,0],[0.875,-0.2344,0],[0.875,-0.2188,0],[0.875,-0.2032,0],[0.875,-0.1876,0],[0.875,-0.1718,0],[0.875,-0.1562,0],[0.875,-0.1406,0],[0.875,-0.125,0],[0.875,-0.1094,0],[0.875,-0.0938,0],[0.875,-0.0782,0],[0.875,-0.0624,0],[0.875,-0.0468,0],[0.875,-0.0312,0],[0.875,-0.0156,0],[0.875,0,0],[0.875,0.0156,0],[0.875,0.0312,0],[0.875,0.0468,0],[0.875,0.0624,0],[0.875,0.0782,0],[0.875,0.0938,0],[0.875,0.1094,0],[0.875,0.125,0],[0.875,0.1406,0],[0.875,0.1562,0],[0.875,0.1718,0],[0.875,0.1876,0],[0.875,0.2032,0],[0.875,0.2188,0],[0.875,0.2344,0],[0.875,0.25,0],[0.875,0.2656,0],[0.875,0.2812,0],[0.875,0.2968,0],[0.875,0.3124,0],[0.875,0.3282,0],[0.875,0.3438,0],[0.875,0.3594,0],[0.875,0.375,0],[0.875,0.3906,0],[0.875,0.4062,0],[0.875,0.4218,0],[0.875,0.4376,0],[0.875,0.4532,0],[0.875,0.4688,0],[0.875,0.4844,0],[0.875,0.5,0],[0.875,0.5156,0],[0.875,0.5312,0],[0.875,0.5468,0],[0.875,0.5624,0],[0.875,0.5782,0],[0.875,0.5938,0],[0.875,0.6094,0],[0.875,0.625,0],[0.875,0.6406,0],[0.875,0.6562,0],[0.875,0.6718,0],[0.875,0.6876,0],[0.875,0.7032,0],[0.875,0.7188,0],[0.875,0.7344,0],[0.875,0.75,0],[0.875,0.7656,0],[0.875,0.7812,0],[0.875,0.7968,0],[0.875,0.8124,0],[0.875,0.8282,0],[0.875,0.8438,0],[0.875,0.8594,0],[0.875,0.875,0],[0.875,0.8906,0],[0.875,0.9062,0],[0.875,0.9218,0],[0.875,0.9376,0],[0.875,0.9532,0],[0.875,0.9688,0],[0.875,0.9844,0],[0.8906,-1,0],[0.8906,-0.9844,0],[0.8906,-0.9688,0],[0.8906,-0.9532,0],[0.8906,-0.9376,0],[0.8906,-0.9218,0],[0.8906,-0.9062,0],[0.8906,-0.8906,0],[0.8906,-0.875,0],[0.8906,-0.8594,0],[0.8906,-0.8438,0],[0.8906,-0.8282,0],[0.8906,-0.8124,0],[0.8906,-0.7968,0],[0.8906,-0.7812,0],[0.8906,-0.7656,0],[0.8906,-0.75,0],[0.8906,-0.7344,0],[0.8906,-0.7188,0],[0.8906,-0.7032,0],[0.8906,-0.6876,0],[0.8906,-0.6718,0],[0.8906,-0.6562,0],[0.8906,-0.6406,0],[0.8906,-0.625,0],[0.8906,-0.6094,0],[0.8906,-0.5938,0],[0.8906,-0.5782,0],[0.8906,-0.5624,0],[0.8906,-0.5468,0],[0.8906,-0.5312,0],[0.8906,-0.5156,0],[0.8906,-0.5,0],[0.8906,-0.4844,0],[0.8906,-0.4688,0],[0.8906,-0.4532,0],[0.8906,-0.4376,0],[0.8906,-0.4218,0],[0.8906,-0.4062,0],[0.8906,-0.3906,0],[0.8906,-0.375,0],[0.8906,-0.3594,0],[0.8906,-0.3438,0],[0.8906,-0.3282,0],[0.8906,-0.3124,0],[0.8906,-0.2968,0],[0.8906,-0.2812,0],[0.8906,-0.2656,0],[0.8906,-0.25,0],[0.8906,-0.2344,0],[0.8906,-0.2188,0],[0.8906,-0.2032,0],[0.8906,-0.1876,0],[0.8906,-0.1718,0],[0.8906,-0.1562,0],[0.8906,-0.1406,0],[0.8906,-0.125,0],[0.8906,-0.1094,0],[0.8906,-0.0938,0],[0.8906,-0.0782,0],[0.8906,-0.0624,0],[0.8906,-0.0468,0],[0.8906,-0.0312,0],[0.8906,-0.0156,0],[0.8906,0,0],[0.8906,0.0156,0],[0.8906,0.0312,0],[0.8906,0.0468,0],[0.8906,0.0624,0],[0.8906,0.0782,0],[0.8906,0.0938,0],[0.8906,0.1094,0],[0.8906,0.125,0],[0.8906,0.1406,0],[0.8906,0.1562,0],[0.8906,0.1718,0],[0.8906,0.1876,0],[0.8906,0.2032,0],[0.8906,0.2188,0],[0.8906,0.2344,0],[0.8906,0.25,0],[0.8906,0.2656,0],[0.8906,0.2812,0],[0.8906,0.2968,0],[0.8906,0.3124,0],[0.8906,0.3282,0],[0.8906,0.3438,0],[0.8906,0.3594,0],[0.8906,0.375,0],[0.8906,0.3906,0],[0.8906,0.4062,0],[0.8906,0.4218,0],[0.8906,0.4376,0],[0.8906,0.4532,0],[0.8906,0.4688,0],[0.8906,0.4844,0],[0.8906,0.5,0],[0.8906,0.5156,0],[0.8906,0.5312,0],[0.8906,0.5468,0],[0.8906,0.5624,0],[0.8906,0.5782,0],[0.8906,0.5938,0],[0.8906,0.6094,0],[0.8906,0.625,0],[0.8906,0.6406,0],[0.8906,0.6562,0],[0.8906,0.6718,0],[0.8906,0.6876,0],[0.8906,0.7032,0],[0.8906,0.7188,0],[0.8906,0.7344,0],[0.8906,0.75,0],[0.8906,0.7656,0],[0.8906,0.7812,0],[0.8906,0.7968,0],[0.8906,0.8124,0],[0.8906,0.8282,0],[0.8906,0.8438,0],[0.8906,0.8594,0],[0.8906,0.875,0],[0.8906,0.8906,0],[0.8906,0.9062,0],[0.8906,0.9218,0],[0.8906,0.9376,0],[0.8906,0.9532,0],[0.8906,0.9688,0],[0.8906,0.9844,0],[0.9062,-1,0],[0.9062,-0.9844,0],[0.9062,-0.9688,0],[0.9062,-0.9532,0],[0.9062,-0.9376,0],[0.9062,-0.9218,0],[0.9062,-0.9062,0],[0.9062,-0.8906,0],[0.9062,-0.875,0],[0.9062,-0.8594,0],[0.9062,-0.8438,0],[0.9062,-0.8282,0],[0.9062,-0.8124,0],[0.9062,-0.7968,0],[0.9062,-0.7812,0],[0.9062,-0.7656,0],[0.9062,-0.75,0],[0.9062,-0.7344,0],[0.9062,-0.7188,0],[0.9062,-0.7032,0],[0.9062,-0.6876,0],[0.9062,-0.6718,0],[0.9062,-0.6562,0],[0.9062,-0.6406,0],[0.9062,-0.625,0],[0.9062,-0.6094,0],[0.9062,-0.5938,0],[0.9062,-0.5782,0],[0.9062,-0.5624,0],[0.9062,-0.5468,0],[0.9062,-0.5312,0],[0.9062,-0.5156,0],[0.9062,-0.5,0],[0.9062,-0.4844,0],[0.9062,-0.4688,0],[0.9062,-0.4532,0],[0.9062,-0.4376,0],[0.9062,-0.4218,0],[0.9062,-0.4062,0],[0.9062,-0.3906,0],[0.9062,-0.375,0],[0.9062,-0.3594,0],[0.9062,-0.3438,0],[0.9062,-0.3282,0],[0.9062,-0.3124,0],[0.9062,-0.2968,0],[0.9062,-0.2812,0],[0.9062,-0.2656,0],[0.9062,-0.25,0],[0.9062,-0.2344,0],[0.9062,-0.2188,0],[0.9062,-0.2032,0],[0.9062,-0.1876,0],[0.9062,-0.1718,0],[0.9062,-0.1562,0],[0.9062,-0.1406,0],[0.9062,-0.125,0],[0.9062,-0.1094,0],[0.9062,-0.0938,0],[0.9062,-0.0782,0],[0.9062,-0.0624,0],[0.9062,-0.0468,0],[0.9062,-0.0312,0],[0.9062,-0.0156,0],[0.9062,0,0],[0.9062,0.0156,0],[0.9062,0.0312,0],[0.9062,0.0468,0],[0.9062,0.0624,0],[0.9062,0.0782,0],[0.9062,0.0938,0],[0.9062,0.1094,0],[0.9062,0.125,0],[0.9062,0.1406,0],[0.9062,0.1562,0],[0.9062,0.1718,0],[0.9062,0.1876,0],[0.9062,0.2032,0],[0.9062,0.2188,0],[0.9062,0.2344,0],[0.9062,0.25,0],[0.9062,0.2656,0],[0.9062,0.2812,0],[0.9062,0.2968,0],[0.9062,0.3124,0],[0.9062,0.3282,0],[0.9062,0.3438,0],[0.9062,0.3594,0],[0.9062,0.375,0],[0.9062,0.3906,0],[0.9062,0.4062,0],[0.9062,0.4218,0],[0.9062,0.4376,0],[0.9062,0.4532,0],[0.9062,0.4688,0],[0.9062,0.4844,0],[0.9062,0.5,0],[0.9062,0.5156,0],[0.9062,0.5312,0],[0.9062,0.5468,0],[0.9062,0.5624,0],[0.9062,0.5782,0],[0.9062,0.5938,0],[0.9062,0.6094,0],[0.9062,0.625,0],[0.9062,0.6406,0],[0.9062,0.6562,0],[0.9062,0.6718,0],[0.9062,0.6876,0],[0.9062,0.7032,0],[0.9062,0.7188,0],[0.9062,0.7344,0],[0.9062,0.75,0],[0.9062,0.7656,0],[0.9062,0.7812,0],[0.9062,0.7968,0],[0.9062,0.8124,0],[0.9062,0.8282,0],[0.9062,0.8438,0],[0.9062,0.8594,0],[0.9062,0.875,0],[0.9062,0.8906,0],[0.9062,0.9062,0],[0.9062,0.9218,0],[0.9062,0.9376,0],[0.9062,0.9532,0],[0.9062,0.9688,0],[0.9062,0.9844,0],[0.9218,-1,0],[0.9218,-0.9844,0],[0.9218,-0.9688,0],[0.9218,-0.9532,0],[0.9218,-0.9376,0],[0.9218,-0.9218,0],[0.9218,-0.9062,0],[0.9218,-0.8906,0],[0.9218,-0.875,0],[0.9218,-0.8594,0],[0.9218,-0.8438,0],[0.9218,-0.8282,0],[0.9218,-0.8124,0],[0.9218,-0.7968,0],[0.9218,-0.7812,0],[0.9218,-0.7656,0],[0.9218,-0.75,0],[0.9218,-0.7344,0],[0.9218,-0.7188,0],[0.9218,-0.7032,0],[0.9218,-0.6876,0],[0.9218,-0.6718,0],[0.9218,-0.6562,0],[0.9218,-0.6406,0],[0.9218,-0.625,0],[0.9218,-0.6094,0],[0.9218,-0.5938,0],[0.9218,-0.5782,0],[0.9218,-0.5624,0],[0.9218,-0.5468,0],[0.9218,-0.5312,0],[0.9218,-0.5156,0],[0.9218,-0.5,0],[0.9218,-0.4844,0],[0.9218,-0.4688,0],[0.9218,-0.4532,0],[0.9218,-0.4376,0],[0.9218,-0.4218,0],[0.9218,-0.4062,0],[0.9218,-0.3906,0],[0.9218,-0.375,0],[0.9218,-0.3594,0],[0.9218,-0.3438,0],[0.9218,-0.3282,0],[0.9218,-0.3124,0],[0.9218,-0.2968,0],[0.9218,-0.2812,0],[0.9218,-0.2656,0],[0.9218,-0.25,0],[0.9218,-0.2344,0],[0.9218,-0.2188,0],[0.9218,-0.2032,0],[0.9218,-0.1876,0],[0.9218,-0.1718,0],[0.9218,-0.1562,0],[0.9218,-0.1406,0],[0.9218,-0.125,0],[0.9218,-0.1094,0],[0.9218,-0.0938,0],[0.9218,-0.0782,0],[0.9218,-0.0624,0],[0.9218,-0.0468,0],[0.9218,-0.0312,0],[0.9218,-0.0156,0],[0.9218,0,0],[0.9218,0.0156,0],[0.9218,0.0312,0],[0.9218,0.0468,0],[0.9218,0.0624,0],[0.9218,0.0782,0],[0.9218,0.0938,0],[0.9218,0.1094,0],[0.9218,0.125,0],[0.9218,0.1406,0],[0.9218,0.1562,0],[0.9218,0.1718,0],[0.9218,0.1876,0],[0.9218,0.2032,0],[0.9218,0.2188,0],[0.9218,0.2344,0],[0.9218,0.25,0],[0.9218,0.2656,0],[0.9218,0.2812,0],[0.9218,0.2968,0],[0.9218,0.3124,0],[0.9218,0.3282,0],[0.9218,0.3438,0],[0.9218,0.3594,0],[0.9218,0.375,0],[0.9218,0.3906,0],[0.9218,0.4062,0],[0.9218,0.4218,0],[0.9218,0.4376,0],[0.9218,0.4532,0],[0.9218,0.4688,0],[0.9218,0.4844,0],[0.9218,0.5,0],[0.9218,0.5156,0],[0.9218,0.5312,0],[0.9218,0.5468,0],[0.9218,0.5624,0],[0.9218,0.5782,0],[0.9218,0.5938,0],[0.9218,0.6094,0],[0.9218,0.625,0],[0.9218,0.6406,0],[0.9218,0.6562,0],[0.9218,0.6718,0],[0.9218,0.6876,0],[0.9218,0.7032,0],[0.9218,0.7188,0],[0.9218,0.7344,0],[0.9218,0.75,0],[0.9218,0.7656,0],[0.9218,0.7812,0],[0.9218,0.7968,0],[0.9218,0.8124,0],[0.9218,0.8282,0],[0.9218,0.8438,0],[0.9218,0.8594,0],[0.9218,0.875,0],[0.9218,0.8906,0],[0.9218,0.9062,0],[0.9218,0.9218,0],[0.9218,0.9376,0],[0.9218,0.9532,0],[0.9218,0.9688,0],[0.9218,0.9844,0],[0.9376,-1,0],[0.9376,-0.9844,0],[0.9376,-0.9688,0],[0.9376,-0.9532,0],[0.9376,-0.9376,0],[0.9376,-0.9218,0],[0.9376,-0.9062,0],[0.9376,-0.8906,0],[0.9376,-0.875,0],[0.9376,-0.8594,0],[0.9376,-0.8438,0],[0.9376,-0.8282,0],[0.9376,-0.8124,0],[0.9376,-0.7968,0],[0.9376,-0.7812,0],[0.9376,-0.7656,0],[0.9376,-0.75,0],[0.9376,-0.7344,0],[0.9376,-0.7188,0],[0.9376,-0.7032,0],[0.9376,-0.6876,0],[0.9376,-0.6718,0],[0.9376,-0.6562,0],[0.9376,-0.6406,0],[0.9376,-0.625,0],[0.9376,-0.6094,0],[0.9376,-0.5938,0],[0.9376,-0.5782,0],[0.9376,-0.5624,0],[0.9376,-0.5468,0],[0.9376,-0.5312,0],[0.9376,-0.5156,0],[0.9376,-0.5,0],[0.9376,-0.4844,0],[0.9376,-0.4688,0],[0.9376,-0.4532,0],[0.9376,-0.4376,0],[0.9376,-0.4218,0],[0.9376,-0.4062,0],[0.9376,-0.3906,0],[0.9376,-0.375,0],[0.9376,-0.3594,0],[0.9376,-0.3438,0],[0.9376,-0.3282,0],[0.9376,-0.3124,0],[0.9376,-0.2968,0],[0.9376,-0.2812,0],[0.9376,-0.2656,0],[0.9376,-0.25,0],[0.9376,-0.2344,0],[0.9376,-0.2188,0],[0.9376,-0.2032,0],[0.9376,-0.1876,0],[0.9376,-0.1718,0],[0.9376,-0.1562,0],[0.9376,-0.1406,0],[0.9376,-0.125,0],[0.9376,-0.1094,0],[0.9376,-0.0938,0],[0.9376,-0.0782,0],[0.9376,-0.0624,0],[0.9376,-0.0468,0],[0.9376,-0.0312,0],[0.9376,-0.0156,0],[0.9376,0,0],[0.9376,0.0156,0],[0.9376,0.0312,0],[0.9376,0.0468,0],[0.9376,0.0624,0],[0.9376,0.0782,0],[0.9376,0.0938,0],[0.9376,0.1094,0],[0.9376,0.125,0],[0.9376,0.1406,0],[0.9376,0.1562,0],[0.9376,0.1718,0],[0.9376,0.1876,0],[0.9376,0.2032,0],[0.9376,0.2188,0],[0.9376,0.2344,0],[0.9376,0.25,0],[0.9376,0.2656,0],[0.9376,0.2812,0],[0.9376,0.2968,0],[0.9376,0.3124,0],[0.9376,0.3282,0],[0.9376,0.3438,0],[0.9376,0.3594,0],[0.9376,0.375,0],[0.9376,0.3906,0],[0.9376,0.4062,0],[0.9376,0.4218,0],[0.9376,0.4376,0],[0.9376,0.4532,0],[0.9376,0.4688,0],[0.9376,0.4844,0],[0.9376,0.5,0],[0.9376,0.5156,0],[0.9376,0.5312,0],[0.9376,0.5468,0],[0.9376,0.5624,0],[0.9376,0.5782,0],[0.9376,0.5938,0],[0.9376,0.6094,0],[0.9376,0.625,0],[0.9376,0.6406,0],[0.9376,0.6562,0],[0.9376,0.6718,0],[0.9376,0.6876,0],[0.9376,0.7032,0],[0.9376,0.7188,0],[0.9376,0.7344,0],[0.9376,0.75,0],[0.9376,0.7656,0],[0.9376,0.7812,0],[0.9376,0.7968,0],[0.9376,0.8124,0],[0.9376,0.8282,0],[0.9376,0.8438,0],[0.9376,0.8594,0],[0.9376,0.875,0],[0.9376,0.8906,0],[0.9376,0.9062,0],[0.9376,0.9218,0],[0.9376,0.9376,0],[0.9376,0.9532,0],[0.9376,0.9688,0],[0.9376,0.9844,0],[0.9532,-1,0],[0.9532,-0.9844,0],[0.9532,-0.9688,0],[0.9532,-0.9532,0],[0.9532,-0.9376,0],[0.9532,-0.9218,0],[0.9532,-0.9062,0],[0.9532,-0.8906,0],[0.9532,-0.875,0],[0.9532,-0.8594,0],[0.9532,-0.8438,0],[0.9532,-0.8282,0],[0.9532,-0.8124,0],[0.9532,-0.7968,0],[0.9532,-0.7812,0],[0.9532,-0.7656,0],[0.9532,-0.75,0],[0.9532,-0.7344,0],[0.9532,-0.7188,0],[0.9532,-0.7032,0],[0.9532,-0.6876,0],[0.9532,-0.6718,0],[0.9532,-0.6562,0],[0.9532,-0.6406,0],[0.9532,-0.625,0],[0.9532,-0.6094,0],[0.9532,-0.5938,0],[0.9532,-0.5782,0],[0.9532,-0.5624,0],[0.9532,-0.5468,0],[0.9532,-0.5312,0],[0.9532,-0.5156,0],[0.9532,-0.5,0],[0.9532,-0.4844,0],[0.9532,-0.4688,0],[0.9532,-0.4532,0],[0.9532,-0.4376,0],[0.9532,-0.4218,0],[0.9532,-0.4062,0],[0.9532,-0.3906,0],[0.9532,-0.375,0],[0.9532,-0.3594,0],[0.9532,-0.3438,0],[0.9532,-0.3282,0],[0.9532,-0.3124,0],[0.9532,-0.2968,0],[0.9532,-0.2812,0],[0.9532,-0.2656,0],[0.9532,-0.25,0],[0.9532,-0.2344,0],[0.9532,-0.2188,0],[0.9532,-0.2032,0],[0.9532,-0.1876,0],[0.9532,-0.1718,0],[0.9532,-0.1562,0],[0.9532,-0.1406,0],[0.9532,-0.125,0],[0.9532,-0.1094,0],[0.9532,-0.0938,0],[0.9532,-0.0782,0],[0.9532,-0.0624,0],[0.9532,-0.0468,0],[0.9532,-0.0312,0],[0.9532,-0.0156,0],[0.9532,0,0],[0.9532,0.0156,0],[0.9532,0.0312,0],[0.9532,0.0468,0],[0.9532,0.0624,0],[0.9532,0.0782,0],[0.9532,0.0938,0],[0.9532,0.1094,0],[0.9532,0.125,0],[0.9532,0.1406,0],[0.9532,0.1562,0],[0.9532,0.1718,0],[0.9532,0.1876,0],[0.9532,0.2032,0],[0.9532,0.2188,0],[0.9532,0.2344,0],[0.9532,0.25,0],[0.9532,0.2656,0],[0.9532,0.2812,0],[0.9532,0.2968,0],[0.9532,0.3124,0],[0.9532,0.3282,0],[0.9532,0.3438,0],[0.9532,0.3594,0],[0.9532,0.375,0],[0.9532,0.3906,0],[0.9532,0.4062,0],[0.9532,0.4218,0],[0.9532,0.4376,0],[0.9532,0.4532,0],[0.9532,0.4688,0],[0.9532,0.4844,0],[0.9532,0.5,0],[0.9532,0.5156,0],[0.9532,0.5312,0],[0.9532,0.5468,0],[0.9532,0.5624,0],[0.9532,0.5782,0],[0.9532,0.5938,0],[0.9532,0.6094,0],[0.9532,0.625,0],[0.9532,0.6406,0],[0.9532,0.6562,0],[0.9532,0.6718,0],[0.9532,0.6876,0],[0.9532,0.7032,0],[0.9532,0.7188,0],[0.9532,0.7344,0],[0.9532,0.75,0],[0.9532,0.7656,0],[0.9532,0.7812,0],[0.9532,0.7968,0],[0.9532,0.8124,0],[0.9532,0.8282,0],[0.9532,0.8438,0],[0.9532,0.8594,0],[0.9532,0.875,0],[0.9532,0.8906,0],[0.9532,0.9062,0],[0.9532,0.9218,0],[0.9532,0.9376,0],[0.9532,0.9532,0],[0.9532,0.9688,0],[0.9532,0.9844,0],[0.9688,-1,0],[0.9688,-0.9844,0],[0.9688,-0.9688,0],[0.9688,-0.9532,0],[0.9688,-0.9376,0],[0.9688,-0.9218,0],[0.9688,-0.9062,0],[0.9688,-0.8906,0],[0.9688,-0.875,0],[0.9688,-0.8594,0],[0.9688,-0.8438,0],[0.9688,-0.8282,0],[0.9688,-0.8124,0],[0.9688,-0.7968,0],[0.9688,-0.7812,0],[0.9688,-0.7656,0],[0.9688,-0.75,0],[0.9688,-0.7344,0],[0.9688,-0.7188,0],[0.9688,-0.7032,0],[0.9688,-0.6876,0],[0.9688,-0.6718,0],[0.9688,-0.6562,0],[0.9688,-0.6406,0],[0.9688,-0.625,0],[0.9688,-0.6094,0],[0.9688,-0.5938,0],[0.9688,-0.5782,0],[0.9688,-0.5624,0],[0.9688,-0.5468,0],[0.9688,-0.5312,0],[0.9688,-0.5156,0],[0.9688,-0.5,0],[0.9688,-0.4844,0],[0.9688,-0.4688,0],[0.9688,-0.4532,0],[0.9688,-0.4376,0],[0.9688,-0.4218,0],[0.9688,-0.4062,0],[0.9688,-0.3906,0],[0.9688,-0.375,0],[0.9688,-0.3594,0],[0.9688,-0.3438,0],[0.9688,-0.3282,0],[0.9688,-0.3124,0],[0.9688,-0.2968,0],[0.9688,-0.2812,0],[0.9688,-0.2656,0],[0.9688,-0.25,0],[0.9688,-0.2344,0],[0.9688,-0.2188,0],[0.9688,-0.2032,0],[0.9688,-0.1876,0],[0.9688,-0.1718,0],[0.9688,-0.1562,0],[0.9688,-0.1406,0],[0.9688,-0.125,0],[0.9688,-0.1094,0],[0.9688,-0.0938,0],[0.9688,-0.0782,0],[0.9688,-0.0624,0],[0.9688,-0.0468,0],[0.9688,-0.0312,0],[0.9688,-0.0156,0],[0.9688,0,0],[0.9688,0.0156,0],[0.9688,0.0312,0],[0.9688,0.0468,0],[0.9688,0.0624,0],[0.9688,0.0782,0],[0.9688,0.0938,0],[0.9688,0.1094,0],[0.9688,0.125,0],[0.9688,0.1406,0],[0.9688,0.1562,0],[0.9688,0.1718,0],[0.9688,0.1876,0],[0.9688,0.2032,0],[0.9688,0.2188,0],[0.9688,0.2344,0],[0.9688,0.25,0],[0.9688,0.2656,0],[0.9688,0.2812,0],[0.9688,0.2968,0],[0.9688,0.3124,0],[0.9688,0.3282,0],[0.9688,0.3438,0],[0.9688,0.3594,0],[0.9688,0.375,0],[0.9688,0.3906,0],[0.9688,0.4062,0],[0.9688,0.4218,0],[0.9688,0.4376,0],[0.9688,0.4532,0],[0.9688,0.4688,0],[0.9688,0.4844,0],[0.9688,0.5,0],[0.9688,0.5156,0],[0.9688,0.5312,0],[0.9688,0.5468,0],[0.9688,0.5624,0],[0.9688,0.5782,0],[0.9688,0.5938,0],[0.9688,0.6094,0],[0.9688,0.625,0],[0.9688,0.6406,0],[0.9688,0.6562,0],[0.9688,0.6718,0],[0.9688,0.6876,0],[0.9688,0.7032,0],[0.9688,0.7188,0],[0.9688,0.7344,0],[0.9688,0.75,0],[0.9688,0.7656,0],[0.9688,0.7812,0],[0.9688,0.7968,0],[0.9688,0.8124,0],[0.9688,0.8282,0],[0.9688,0.8438,0],[0.9688,0.8594,0],[0.9688,0.875,0],[0.9688,0.8906,0],[0.9688,0.9062,0],[0.9688,0.9218,0],[0.9688,0.9376,0],[0.9688,0.9532,0],[0.9688,0.9688,0],[0.9688,0.9844,0],[0.9844,-1,0],[0.9844,-0.9844,0],[0.9844,-0.9688,0],[0.9844,-0.9532,0],[0.9844,-0.9376,0],[0.9844,-0.9218,0],[0.9844,-0.9062,0],[0.9844,-0.8906,0],[0.9844,-0.875,0],[0.9844,-0.8594,0],[0.9844,-0.8438,0],[0.9844,-0.8282,0],[0.9844,-0.8124,0],[0.9844,-0.7968,0],[0.9844,-0.7812,0],[0.9844,-0.7656,0],[0.9844,-0.75,0],[0.9844,-0.7344,0],[0.9844,-0.7188,0],[0.9844,-0.7032,0],[0.9844,-0.6876,0],[0.9844,-0.6718,0],[0.9844,-0.6562,0],[0.9844,-0.6406,0],[0.9844,-0.625,0],[0.9844,-0.6094,0],[0.9844,-0.5938,0],[0.9844,-0.5782,0],[0.9844,-0.5624,0],[0.9844,-0.5468,0],[0.9844,-0.5312,0],[0.9844,-0.5156,0],[0.9844,-0.5,0],[0.9844,-0.4844,0],[0.9844,-0.4688,0],[0.9844,-0.4532,0],[0.9844,-0.4376,0],[0.9844,-0.4218,0],[0.9844,-0.4062,0],[0.9844,-0.3906,0],[0.9844,-0.375,0],[0.9844,-0.3594,0],[0.9844,-0.3438,0],[0.9844,-0.3282,0],[0.9844,-0.3124,0],[0.9844,-0.2968,0],[0.9844,-0.2812,0],[0.9844,-0.2656,0],[0.9844,-0.25,0],[0.9844,-0.2344,0],[0.9844,-0.2188,0],[0.9844,-0.2032,0],[0.9844,-0.1876,0],[0.9844,-0.1718,0],[0.9844,-0.1562,0],[0.9844,-0.1406,0],[0.9844,-0.125,0],[0.9844,-0.1094,0],[0.9844,-0.0938,0],[0.9844,-0.0782,0],[0.9844,-0.0624,0],[0.9844,-0.0468,0],[0.9844,-0.0312,0],[0.9844,-0.0156,0],[0.9844,0,0],[0.9844,0.0156,0],[0.9844,0.0312,0],[0.9844,0.0468,0],[0.9844,0.0624,0],[0.9844,0.0782,0],[0.9844,0.0938,0],[0.9844,0.1094,0],[0.9844,0.125,0],[0.9844,0.1406,0],[0.9844,0.1562,0],[0.9844,0.1718,0],[0.9844,0.1876,0],[0.9844,0.2032,0],[0.9844,0.2188,0],[0.9844,0.2344,0],[0.9844,0.25,0],[0.9844,0.2656,0],[0.9844,0.2812,0],[0.9844,0.2968,0],[0.9844,0.3124,0],[0.9844,0.3282,0],[0.9844,0.3438,0],[0.9844,0.3594,0],[0.9844,0.375,0],[0.9844,0.3906,0],[0.9844,0.4062,0],[0.9844,0.4218,0],[0.9844,0.4376,0],[0.9844,0.4532,0],[0.9844,0.4688,0],[0.9844,0.4844,0],[0.9844,0.5,0],[0.9844,0.5156,0],[0.9844,0.5312,0],[0.9844,0.5468,0],[0.9844,0.5624,0],[0.9844,0.5782,0],[0.9844,0.5938,0],[0.9844,0.6094,0],[0.9844,0.625,0],[0.9844,0.6406,0],[0.9844,0.6562,0],[0.9844,0.6718,0],[0.9844,0.6876,0],[0.9844,0.7032,0],[0.9844,0.7188,0],[0.9844,0.7344,0],[0.9844,0.75,0],[0.9844,0.7656,0],[0.9844,0.7812,0],[0.9844,0.7968,0],[0.9844,0.8124,0],[0.9844,0.8282,0],[0.9844,0.8438,0],[0.9844,0.8594,0],[0.9844,0.875,0],[0.9844,0.8906,0],[0.9844,0.9062,0],[0.9844,0.9218,0],[0.9844,0.9376,0],[0.9844,0.9532,0],[0.9844,0.9688,0],[0.9844,0.9844,0]]
    			.flat(Infinity)),
    			size: 3
    		},

    		normal: {
    			data: new Float32Array(
    [[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1],[0,0,1]]
    			.flat(Infinity)),
    			size: 3
    		},

    		uv: {
    			data: new Float32Array(
    [[0.0001,0.9999],[0.0001,0.9921],[0.0001,0.9842],[0.0001,0.9763],[0.0001,0.9684],[0.0001,0.9606],[0.0001,0.9527],[0.0001,0.9448],[0.0001,0.937],[0.0001,0.9291],[0.0001,0.9212],[0.0001,0.9133],[0.0001,0.9055],[0.0001,0.8976],[0.0001,0.8897],[0.0001,0.8818],[0.0001,0.874],[0.0001,0.8661],[0.0001,0.8582],[0.0001,0.8503],[0.0001,0.8425],[0.0001,0.8346],[0.0001,0.8267],[0.0001,0.8188],[0.0001,0.811],[0.0001,0.8031],[0.0001,0.7952],[0.0001,0.7874],[0.0001,0.7795],[0.0001,0.7716],[0.0001,0.7637],[0.0001,0.7559],[0.0001,0.748],[0.0001,0.7401],[0.0001,0.7322],[0.0001,0.7244],[0.0001,0.7165],[0.0001,0.7086],[0.0001,0.7007],[0.0001,0.6929],[0.0001,0.685],[0.0001,0.6771],[0.0001,0.6693],[0.0001,0.6614],[0.0001,0.6535],[0.0001,0.6456],[0.0001,0.6378],[0.0001,0.6299],[0.0001,0.622],[0.0001,0.6141],[0.0001,0.6063],[0.0001,0.5984],[0.0001,0.5905],[0.0001,0.5826],[0.0001,0.5748],[0.0001,0.5669],[0.0001,0.559],[0.0001,0.5511],[0.0001,0.5433],[0.0001,0.5354],[0.0001,0.5275],[0.0001,0.5197],[0.0001,0.5118],[0.0001,0.5039],[0.0001,0.496],[0.0001,0.4882],[0.0001,0.4803],[0.0001,0.4724],[0.0001,0.4645],[0.0001,0.4567],[0.0001,0.4488],[0.0001,0.4409],[0.0001,0.433],[0.0001,0.4252],[0.0001,0.4173],[0.0001,0.4094],[0.0001,0.4016],[0.0001,0.3937],[0.0001,0.3858],[0.0001,0.3779],[0.0001,0.3701],[0.0001,0.3622],[0.0001,0.3543],[0.0001,0.3464],[0.0001,0.3386],[0.0001,0.3307],[0.0001,0.3228],[0.0001,0.3149],[0.0001,0.3071],[0.0001,0.2992],[0.0001,0.2913],[0.0001,0.2834],[0.0001,0.2756],[0.0001,0.2677],[0.0001,0.2598],[0.0001,0.252],[0.0001,0.2441],[0.0001,0.2362],[0.0001,0.2283],[0.0001,0.2205],[0.0001,0.2126],[0.0001,0.2047],[0.0001,0.1968],[0.0001,0.189],[0.0001,0.1811],[0.0001,0.1732],[0.0001,0.1653],[0.0001,0.1575],[0.0001,0.1496],[0.0001,0.1417],[0.0001,0.1339],[0.0001,0.126],[0.0001,0.1181],[0.0001,0.1102],[0.0001,0.1024],[0.0001,0.0945],[0.0001,0.0866],[0.0001,0.0787],[0.0001,0.0709],[0.0001,0.063],[0.0001,0.0551],[0.0001,0.0472],[0.0001,0.0394],[0.0001,0.0315],[0.0001,0.0236],[0.0001,0.0157],[0.0001,0.0079],[0.0001,0],[0.0079,0.9999],[0.0079,0.9921],[0.0079,0.9842],[0.0079,0.9763],[0.0079,0.9684],[0.0079,0.9606],[0.0079,0.9527],[0.0079,0.9448],[0.0079,0.937],[0.0079,0.9291],[0.0079,0.9212],[0.0079,0.9133],[0.0079,0.9055],[0.0079,0.8976],[0.0079,0.8897],[0.0079,0.8818],[0.0079,0.874],[0.0079,0.8661],[0.0079,0.8582],[0.0079,0.8503],[0.0079,0.8425],[0.0079,0.8346],[0.0079,0.8267],[0.0079,0.8188],[0.0079,0.811],[0.0079,0.8031],[0.0079,0.7952],[0.0079,0.7874],[0.0079,0.7795],[0.0079,0.7716],[0.0079,0.7637],[0.0079,0.7559],[0.0079,0.748],[0.0079,0.7401],[0.0079,0.7322],[0.0079,0.7244],[0.0079,0.7165],[0.0079,0.7086],[0.0079,0.7007],[0.0079,0.6929],[0.0079,0.685],[0.0079,0.6771],[0.0079,0.6693],[0.0079,0.6614],[0.0079,0.6535],[0.0079,0.6456],[0.0079,0.6378],[0.0079,0.6299],[0.0079,0.622],[0.0079,0.6141],[0.0079,0.6063],[0.0079,0.5984],[0.0079,0.5905],[0.0079,0.5826],[0.0079,0.5748],[0.0079,0.5669],[0.0079,0.559],[0.0079,0.5511],[0.0079,0.5433],[0.0079,0.5354],[0.0079,0.5275],[0.0079,0.5197],[0.0079,0.5118],[0.0079,0.5039],[0.0079,0.496],[0.0079,0.4882],[0.0079,0.4803],[0.0079,0.4724],[0.0079,0.4645],[0.0079,0.4567],[0.0079,0.4488],[0.0079,0.4409],[0.0079,0.433],[0.0079,0.4252],[0.0079,0.4173],[0.0079,0.4094],[0.0079,0.4016],[0.0079,0.3937],[0.0079,0.3858],[0.0079,0.3779],[0.0079,0.3701],[0.0079,0.3622],[0.0079,0.3543],[0.0079,0.3464],[0.0079,0.3386],[0.0079,0.3307],[0.0079,0.3228],[0.0079,0.3149],[0.0079,0.3071],[0.0079,0.2992],[0.0079,0.2913],[0.0079,0.2834],[0.0079,0.2756],[0.0079,0.2677],[0.0079,0.2598],[0.0079,0.252],[0.0079,0.2441],[0.0079,0.2362],[0.0079,0.2283],[0.0079,0.2205],[0.0079,0.2126],[0.0079,0.2047],[0.0079,0.1968],[0.0079,0.189],[0.0079,0.1811],[0.0079,0.1732],[0.0079,0.1653],[0.0079,0.1575],[0.0079,0.1496],[0.0079,0.1417],[0.0079,0.1339],[0.0079,0.126],[0.0079,0.1181],[0.0079,0.1102],[0.0079,0.1024],[0.0079,0.0945],[0.0079,0.0866],[0.0079,0.0787],[0.0079,0.0709],[0.0079,0.063],[0.0079,0.0551],[0.0079,0.0472],[0.0079,0.0394],[0.0079,0.0315],[0.0079,0.0236],[0.0079,0.0157],[0.0079,0.0079],[0.0079,0],[0.0158,0.9999],[0.0158,0.9921],[0.0158,0.9842],[0.0158,0.9763],[0.0158,0.9684],[0.0158,0.9606],[0.0158,0.9527],[0.0158,0.9448],[0.0158,0.937],[0.0158,0.9291],[0.0158,0.9212],[0.0158,0.9133],[0.0158,0.9055],[0.0158,0.8976],[0.0158,0.8897],[0.0158,0.8818],[0.0158,0.874],[0.0158,0.8661],[0.0158,0.8582],[0.0158,0.8503],[0.0158,0.8425],[0.0158,0.8346],[0.0158,0.8267],[0.0158,0.8188],[0.0158,0.811],[0.0158,0.8031],[0.0158,0.7952],[0.0158,0.7874],[0.0158,0.7795],[0.0158,0.7716],[0.0158,0.7637],[0.0158,0.7559],[0.0158,0.748],[0.0158,0.7401],[0.0158,0.7322],[0.0158,0.7244],[0.0158,0.7165],[0.0158,0.7086],[0.0158,0.7007],[0.0158,0.6929],[0.0158,0.685],[0.0158,0.6771],[0.0158,0.6693],[0.0158,0.6614],[0.0158,0.6535],[0.0158,0.6456],[0.0158,0.6378],[0.0158,0.6299],[0.0158,0.622],[0.0158,0.6141],[0.0158,0.6063],[0.0158,0.5984],[0.0158,0.5905],[0.0158,0.5826],[0.0158,0.5748],[0.0158,0.5669],[0.0158,0.559],[0.0158,0.5511],[0.0158,0.5433],[0.0158,0.5354],[0.0158,0.5275],[0.0158,0.5197],[0.0158,0.5118],[0.0158,0.5039],[0.0158,0.496],[0.0158,0.4882],[0.0158,0.4803],[0.0158,0.4724],[0.0158,0.4645],[0.0158,0.4567],[0.0158,0.4488],[0.0158,0.4409],[0.0158,0.433],[0.0158,0.4252],[0.0158,0.4173],[0.0158,0.4094],[0.0158,0.4016],[0.0158,0.3937],[0.0158,0.3858],[0.0158,0.3779],[0.0158,0.3701],[0.0158,0.3622],[0.0158,0.3543],[0.0158,0.3464],[0.0158,0.3386],[0.0158,0.3307],[0.0158,0.3228],[0.0158,0.3149],[0.0158,0.3071],[0.0158,0.2992],[0.0158,0.2913],[0.0158,0.2834],[0.0158,0.2756],[0.0158,0.2677],[0.0158,0.2598],[0.0158,0.252],[0.0158,0.2441],[0.0158,0.2362],[0.0158,0.2283],[0.0158,0.2205],[0.0158,0.2126],[0.0158,0.2047],[0.0158,0.1968],[0.0158,0.189],[0.0158,0.1811],[0.0158,0.1732],[0.0158,0.1653],[0.0158,0.1575],[0.0158,0.1496],[0.0158,0.1417],[0.0158,0.1339],[0.0158,0.126],[0.0158,0.1181],[0.0158,0.1102],[0.0158,0.1024],[0.0158,0.0945],[0.0158,0.0866],[0.0158,0.0787],[0.0158,0.0709],[0.0158,0.063],[0.0158,0.0551],[0.0158,0.0472],[0.0158,0.0394],[0.0158,0.0315],[0.0158,0.0236],[0.0158,0.0157],[0.0158,0.0079],[0.0158,0],[0.0237,0.9999],[0.0237,0.9921],[0.0237,0.9842],[0.0237,0.9763],[0.0237,0.9684],[0.0237,0.9606],[0.0237,0.9527],[0.0237,0.9448],[0.0237,0.937],[0.0237,0.9291],[0.0237,0.9212],[0.0237,0.9133],[0.0237,0.9055],[0.0237,0.8976],[0.0237,0.8897],[0.0237,0.8818],[0.0237,0.874],[0.0237,0.8661],[0.0237,0.8582],[0.0237,0.8503],[0.0237,0.8425],[0.0237,0.8346],[0.0237,0.8267],[0.0237,0.8188],[0.0237,0.811],[0.0237,0.8031],[0.0237,0.7952],[0.0237,0.7874],[0.0237,0.7795],[0.0237,0.7716],[0.0237,0.7637],[0.0237,0.7559],[0.0237,0.748],[0.0237,0.7401],[0.0237,0.7322],[0.0237,0.7244],[0.0237,0.7165],[0.0237,0.7086],[0.0237,0.7007],[0.0237,0.6929],[0.0237,0.685],[0.0237,0.6771],[0.0237,0.6693],[0.0237,0.6614],[0.0237,0.6535],[0.0237,0.6456],[0.0237,0.6378],[0.0237,0.6299],[0.0237,0.622],[0.0237,0.6141],[0.0237,0.6063],[0.0237,0.5984],[0.0237,0.5905],[0.0237,0.5826],[0.0237,0.5748],[0.0237,0.5669],[0.0237,0.559],[0.0237,0.5511],[0.0237,0.5433],[0.0237,0.5354],[0.0237,0.5275],[0.0237,0.5197],[0.0237,0.5118],[0.0237,0.5039],[0.0237,0.496],[0.0237,0.4882],[0.0237,0.4803],[0.0237,0.4724],[0.0237,0.4645],[0.0237,0.4567],[0.0237,0.4488],[0.0237,0.4409],[0.0237,0.433],[0.0237,0.4252],[0.0237,0.4173],[0.0237,0.4094],[0.0237,0.4016],[0.0237,0.3937],[0.0237,0.3858],[0.0237,0.3779],[0.0237,0.3701],[0.0237,0.3622],[0.0237,0.3543],[0.0237,0.3464],[0.0237,0.3386],[0.0237,0.3307],[0.0237,0.3228],[0.0237,0.3149],[0.0237,0.3071],[0.0237,0.2992],[0.0237,0.2913],[0.0237,0.2834],[0.0237,0.2756],[0.0237,0.2677],[0.0237,0.2598],[0.0237,0.252],[0.0237,0.2441],[0.0237,0.2362],[0.0237,0.2283],[0.0237,0.2205],[0.0237,0.2126],[0.0237,0.2047],[0.0237,0.1968],[0.0237,0.189],[0.0237,0.1811],[0.0237,0.1732],[0.0237,0.1653],[0.0237,0.1575],[0.0237,0.1496],[0.0237,0.1417],[0.0237,0.1339],[0.0237,0.126],[0.0237,0.1181],[0.0237,0.1102],[0.0237,0.1024],[0.0237,0.0945],[0.0237,0.0866],[0.0237,0.0787],[0.0237,0.0709],[0.0237,0.063],[0.0237,0.0551],[0.0237,0.0472],[0.0237,0.0394],[0.0237,0.0315],[0.0237,0.0236],[0.0237,0.0157],[0.0237,0.0079],[0.0237,0],[0.0316,0.9999],[0.0316,0.9921],[0.0316,0.9842],[0.0316,0.9763],[0.0316,0.9684],[0.0316,0.9606],[0.0316,0.9527],[0.0316,0.9448],[0.0316,0.937],[0.0316,0.9291],[0.0316,0.9212],[0.0316,0.9133],[0.0316,0.9055],[0.0316,0.8976],[0.0316,0.8897],[0.0316,0.8818],[0.0316,0.874],[0.0316,0.8661],[0.0316,0.8582],[0.0316,0.8503],[0.0316,0.8425],[0.0316,0.8346],[0.0316,0.8267],[0.0316,0.8188],[0.0316,0.811],[0.0316,0.8031],[0.0316,0.7952],[0.0316,0.7874],[0.0316,0.7795],[0.0316,0.7716],[0.0316,0.7637],[0.0316,0.7559],[0.0316,0.748],[0.0316,0.7401],[0.0316,0.7322],[0.0316,0.7244],[0.0316,0.7165],[0.0316,0.7086],[0.0316,0.7007],[0.0316,0.6929],[0.0316,0.685],[0.0316,0.6771],[0.0316,0.6693],[0.0316,0.6614],[0.0316,0.6535],[0.0316,0.6456],[0.0316,0.6378],[0.0316,0.6299],[0.0316,0.622],[0.0316,0.6141],[0.0316,0.6063],[0.0316,0.5984],[0.0316,0.5905],[0.0316,0.5826],[0.0316,0.5748],[0.0316,0.5669],[0.0316,0.559],[0.0316,0.5511],[0.0316,0.5433],[0.0316,0.5354],[0.0316,0.5275],[0.0316,0.5197],[0.0316,0.5118],[0.0316,0.5039],[0.0316,0.496],[0.0316,0.4882],[0.0316,0.4803],[0.0316,0.4724],[0.0316,0.4645],[0.0316,0.4567],[0.0316,0.4488],[0.0316,0.4409],[0.0316,0.433],[0.0316,0.4252],[0.0316,0.4173],[0.0316,0.4094],[0.0316,0.4016],[0.0316,0.3937],[0.0316,0.3858],[0.0316,0.3779],[0.0316,0.3701],[0.0316,0.3622],[0.0316,0.3543],[0.0316,0.3464],[0.0316,0.3386],[0.0316,0.3307],[0.0316,0.3228],[0.0316,0.3149],[0.0316,0.3071],[0.0316,0.2992],[0.0316,0.2913],[0.0316,0.2834],[0.0316,0.2756],[0.0316,0.2677],[0.0316,0.2598],[0.0316,0.252],[0.0316,0.2441],[0.0316,0.2362],[0.0316,0.2283],[0.0316,0.2205],[0.0316,0.2126],[0.0316,0.2047],[0.0316,0.1968],[0.0316,0.189],[0.0316,0.1811],[0.0316,0.1732],[0.0316,0.1653],[0.0316,0.1575],[0.0316,0.1496],[0.0316,0.1417],[0.0316,0.1339],[0.0316,0.126],[0.0316,0.1181],[0.0316,0.1102],[0.0316,0.1024],[0.0316,0.0945],[0.0316,0.0866],[0.0316,0.0787],[0.0316,0.0709],[0.0316,0.063],[0.0316,0.0551],[0.0316,0.0472],[0.0316,0.0394],[0.0316,0.0315],[0.0316,0.0236],[0.0316,0.0157],[0.0316,0.0079],[0.0316,0],[0.0394,0.9999],[0.0394,0.9921],[0.0394,0.9842],[0.0394,0.9763],[0.0394,0.9684],[0.0394,0.9606],[0.0394,0.9527],[0.0394,0.9448],[0.0394,0.937],[0.0394,0.9291],[0.0394,0.9212],[0.0394,0.9133],[0.0394,0.9055],[0.0394,0.8976],[0.0394,0.8897],[0.0394,0.8818],[0.0394,0.874],[0.0394,0.8661],[0.0394,0.8582],[0.0394,0.8503],[0.0394,0.8425],[0.0394,0.8346],[0.0394,0.8267],[0.0394,0.8188],[0.0394,0.811],[0.0394,0.8031],[0.0394,0.7952],[0.0394,0.7874],[0.0394,0.7795],[0.0394,0.7716],[0.0394,0.7637],[0.0394,0.7559],[0.0394,0.748],[0.0394,0.7401],[0.0394,0.7322],[0.0394,0.7244],[0.0394,0.7165],[0.0394,0.7086],[0.0394,0.7007],[0.0394,0.6929],[0.0394,0.685],[0.0394,0.6771],[0.0394,0.6693],[0.0394,0.6614],[0.0394,0.6535],[0.0394,0.6456],[0.0394,0.6378],[0.0394,0.6299],[0.0394,0.622],[0.0394,0.6141],[0.0394,0.6063],[0.0394,0.5984],[0.0394,0.5905],[0.0394,0.5826],[0.0394,0.5748],[0.0394,0.5669],[0.0394,0.559],[0.0394,0.5511],[0.0394,0.5433],[0.0394,0.5354],[0.0394,0.5275],[0.0394,0.5197],[0.0394,0.5118],[0.0394,0.5039],[0.0394,0.496],[0.0394,0.4882],[0.0394,0.4803],[0.0394,0.4724],[0.0394,0.4645],[0.0394,0.4567],[0.0394,0.4488],[0.0394,0.4409],[0.0394,0.433],[0.0394,0.4252],[0.0394,0.4173],[0.0394,0.4094],[0.0394,0.4016],[0.0394,0.3937],[0.0394,0.3858],[0.0394,0.3779],[0.0394,0.3701],[0.0394,0.3622],[0.0394,0.3543],[0.0394,0.3464],[0.0394,0.3386],[0.0394,0.3307],[0.0394,0.3228],[0.0394,0.3149],[0.0394,0.3071],[0.0394,0.2992],[0.0394,0.2913],[0.0394,0.2834],[0.0394,0.2756],[0.0394,0.2677],[0.0394,0.2598],[0.0394,0.252],[0.0394,0.2441],[0.0394,0.2362],[0.0394,0.2283],[0.0394,0.2205],[0.0394,0.2126],[0.0394,0.2047],[0.0394,0.1968],[0.0394,0.189],[0.0394,0.1811],[0.0394,0.1732],[0.0394,0.1653],[0.0394,0.1575],[0.0394,0.1496],[0.0394,0.1417],[0.0394,0.1339],[0.0394,0.126],[0.0394,0.1181],[0.0394,0.1102],[0.0394,0.1024],[0.0394,0.0945],[0.0394,0.0866],[0.0394,0.0787],[0.0394,0.0709],[0.0394,0.063],[0.0394,0.0551],[0.0394,0.0472],[0.0394,0.0394],[0.0394,0.0315],[0.0394,0.0236],[0.0394,0.0157],[0.0394,0.0079],[0.0394,0],[0.0473,0.9999],[0.0473,0.9921],[0.0473,0.9842],[0.0473,0.9763],[0.0473,0.9684],[0.0473,0.9606],[0.0473,0.9527],[0.0473,0.9448],[0.0473,0.937],[0.0473,0.9291],[0.0473,0.9212],[0.0473,0.9133],[0.0473,0.9055],[0.0473,0.8976],[0.0473,0.8897],[0.0473,0.8818],[0.0473,0.874],[0.0473,0.8661],[0.0473,0.8582],[0.0473,0.8503],[0.0473,0.8425],[0.0473,0.8346],[0.0473,0.8267],[0.0473,0.8188],[0.0473,0.811],[0.0473,0.8031],[0.0473,0.7952],[0.0473,0.7874],[0.0473,0.7795],[0.0473,0.7716],[0.0473,0.7637],[0.0473,0.7559],[0.0473,0.748],[0.0473,0.7401],[0.0473,0.7322],[0.0473,0.7244],[0.0473,0.7165],[0.0473,0.7086],[0.0473,0.7007],[0.0473,0.6929],[0.0473,0.685],[0.0473,0.6771],[0.0473,0.6693],[0.0473,0.6614],[0.0473,0.6535],[0.0473,0.6456],[0.0473,0.6378],[0.0473,0.6299],[0.0473,0.622],[0.0473,0.6141],[0.0473,0.6063],[0.0473,0.5984],[0.0473,0.5905],[0.0473,0.5826],[0.0473,0.5748],[0.0473,0.5669],[0.0473,0.559],[0.0473,0.5511],[0.0473,0.5433],[0.0473,0.5354],[0.0473,0.5275],[0.0473,0.5197],[0.0473,0.5118],[0.0473,0.5039],[0.0473,0.496],[0.0473,0.4882],[0.0473,0.4803],[0.0473,0.4724],[0.0473,0.4645],[0.0473,0.4567],[0.0473,0.4488],[0.0473,0.4409],[0.0473,0.433],[0.0473,0.4252],[0.0473,0.4173],[0.0473,0.4094],[0.0473,0.4016],[0.0473,0.3937],[0.0473,0.3858],[0.0473,0.3779],[0.0473,0.3701],[0.0473,0.3622],[0.0473,0.3543],[0.0473,0.3464],[0.0473,0.3386],[0.0473,0.3307],[0.0473,0.3228],[0.0473,0.3149],[0.0473,0.3071],[0.0473,0.2992],[0.0473,0.2913],[0.0473,0.2834],[0.0473,0.2756],[0.0473,0.2677],[0.0473,0.2598],[0.0473,0.252],[0.0473,0.2441],[0.0473,0.2362],[0.0473,0.2283],[0.0473,0.2205],[0.0473,0.2126],[0.0473,0.2047],[0.0473,0.1968],[0.0473,0.189],[0.0473,0.1811],[0.0473,0.1732],[0.0473,0.1653],[0.0473,0.1575],[0.0473,0.1496],[0.0473,0.1417],[0.0473,0.1339],[0.0473,0.126],[0.0473,0.1181],[0.0473,0.1102],[0.0473,0.1024],[0.0473,0.0945],[0.0473,0.0866],[0.0473,0.0787],[0.0473,0.0709],[0.0473,0.063],[0.0473,0.0551],[0.0473,0.0472],[0.0473,0.0394],[0.0473,0.0315],[0.0473,0.0236],[0.0473,0.0157],[0.0473,0.0079],[0.0473,0],[0.0552,0.9999],[0.0552,0.9921],[0.0552,0.9842],[0.0552,0.9763],[0.0552,0.9684],[0.0552,0.9606],[0.0552,0.9527],[0.0552,0.9448],[0.0552,0.937],[0.0552,0.9291],[0.0552,0.9212],[0.0552,0.9133],[0.0552,0.9055],[0.0552,0.8976],[0.0552,0.8897],[0.0552,0.8818],[0.0552,0.874],[0.0552,0.8661],[0.0552,0.8582],[0.0552,0.8503],[0.0552,0.8425],[0.0552,0.8346],[0.0552,0.8267],[0.0552,0.8188],[0.0552,0.811],[0.0552,0.8031],[0.0552,0.7952],[0.0552,0.7874],[0.0552,0.7795],[0.0552,0.7716],[0.0552,0.7637],[0.0552,0.7559],[0.0552,0.748],[0.0552,0.7401],[0.0552,0.7322],[0.0552,0.7244],[0.0552,0.7165],[0.0552,0.7086],[0.0552,0.7007],[0.0552,0.6929],[0.0552,0.685],[0.0552,0.6771],[0.0552,0.6693],[0.0552,0.6614],[0.0552,0.6535],[0.0552,0.6456],[0.0552,0.6378],[0.0552,0.6299],[0.0552,0.622],[0.0552,0.6141],[0.0552,0.6063],[0.0552,0.5984],[0.0552,0.5905],[0.0552,0.5826],[0.0552,0.5748],[0.0552,0.5669],[0.0552,0.559],[0.0552,0.5511],[0.0552,0.5433],[0.0552,0.5354],[0.0552,0.5275],[0.0552,0.5197],[0.0552,0.5118],[0.0552,0.5039],[0.0552,0.496],[0.0552,0.4882],[0.0552,0.4803],[0.0552,0.4724],[0.0552,0.4645],[0.0552,0.4567],[0.0552,0.4488],[0.0552,0.4409],[0.0552,0.433],[0.0552,0.4252],[0.0552,0.4173],[0.0552,0.4094],[0.0552,0.4016],[0.0552,0.3937],[0.0552,0.3858],[0.0552,0.3779],[0.0552,0.3701],[0.0552,0.3622],[0.0552,0.3543],[0.0552,0.3464],[0.0552,0.3386],[0.0552,0.3307],[0.0552,0.3228],[0.0552,0.3149],[0.0552,0.3071],[0.0552,0.2992],[0.0552,0.2913],[0.0552,0.2834],[0.0552,0.2756],[0.0552,0.2677],[0.0552,0.2598],[0.0552,0.252],[0.0552,0.2441],[0.0552,0.2362],[0.0552,0.2283],[0.0552,0.2205],[0.0552,0.2126],[0.0552,0.2047],[0.0552,0.1968],[0.0552,0.189],[0.0552,0.1811],[0.0552,0.1732],[0.0552,0.1653],[0.0552,0.1575],[0.0552,0.1496],[0.0552,0.1417],[0.0552,0.1339],[0.0552,0.126],[0.0552,0.1181],[0.0552,0.1102],[0.0552,0.1024],[0.0552,0.0945],[0.0552,0.0866],[0.0552,0.0787],[0.0552,0.0709],[0.0552,0.063],[0.0552,0.0551],[0.0552,0.0472],[0.0552,0.0394],[0.0552,0.0315],[0.0552,0.0236],[0.0552,0.0157],[0.0552,0.0079],[0.0552,0],[0.063,0.9999],[0.063,0.9921],[0.063,0.9842],[0.063,0.9763],[0.063,0.9684],[0.063,0.9606],[0.063,0.9527],[0.063,0.9448],[0.063,0.937],[0.063,0.9291],[0.063,0.9212],[0.063,0.9133],[0.063,0.9055],[0.063,0.8976],[0.063,0.8897],[0.063,0.8818],[0.063,0.874],[0.063,0.8661],[0.063,0.8582],[0.063,0.8503],[0.063,0.8425],[0.063,0.8346],[0.063,0.8267],[0.063,0.8188],[0.063,0.811],[0.063,0.8031],[0.063,0.7952],[0.063,0.7874],[0.063,0.7795],[0.063,0.7716],[0.063,0.7637],[0.063,0.7559],[0.063,0.748],[0.063,0.7401],[0.063,0.7322],[0.063,0.7244],[0.063,0.7165],[0.063,0.7086],[0.063,0.7007],[0.063,0.6929],[0.063,0.685],[0.063,0.6771],[0.063,0.6693],[0.063,0.6614],[0.063,0.6535],[0.063,0.6456],[0.063,0.6378],[0.063,0.6299],[0.063,0.622],[0.063,0.6141],[0.063,0.6063],[0.063,0.5984],[0.063,0.5905],[0.063,0.5826],[0.063,0.5748],[0.063,0.5669],[0.063,0.559],[0.063,0.5511],[0.063,0.5433],[0.063,0.5354],[0.063,0.5275],[0.063,0.5197],[0.063,0.5118],[0.063,0.5039],[0.063,0.496],[0.063,0.4882],[0.063,0.4803],[0.063,0.4724],[0.063,0.4645],[0.063,0.4567],[0.063,0.4488],[0.063,0.4409],[0.063,0.433],[0.063,0.4252],[0.063,0.4173],[0.063,0.4094],[0.063,0.4016],[0.063,0.3937],[0.063,0.3858],[0.063,0.3779],[0.063,0.3701],[0.063,0.3622],[0.063,0.3543],[0.063,0.3464],[0.063,0.3386],[0.063,0.3307],[0.063,0.3228],[0.063,0.3149],[0.063,0.3071],[0.063,0.2992],[0.063,0.2913],[0.063,0.2834],[0.063,0.2756],[0.063,0.2677],[0.063,0.2598],[0.063,0.252],[0.063,0.2441],[0.063,0.2362],[0.063,0.2283],[0.063,0.2205],[0.063,0.2126],[0.063,0.2047],[0.063,0.1968],[0.063,0.189],[0.063,0.1811],[0.063,0.1732],[0.063,0.1653],[0.063,0.1575],[0.063,0.1496],[0.063,0.1417],[0.063,0.1339],[0.063,0.126],[0.063,0.1181],[0.063,0.1102],[0.063,0.1024],[0.063,0.0945],[0.063,0.0866],[0.063,0.0787],[0.063,0.0709],[0.063,0.063],[0.063,0.0551],[0.063,0.0472],[0.063,0.0394],[0.063,0.0315],[0.063,0.0236],[0.063,0.0157],[0.063,0.0079],[0.063,0],[0.0709,0.9999],[0.0709,0.9921],[0.0709,0.9842],[0.0709,0.9763],[0.0709,0.9684],[0.0709,0.9606],[0.0709,0.9527],[0.0709,0.9448],[0.0709,0.937],[0.0709,0.9291],[0.0709,0.9212],[0.0709,0.9133],[0.0709,0.9055],[0.0709,0.8976],[0.0709,0.8897],[0.0709,0.8818],[0.0709,0.874],[0.0709,0.8661],[0.0709,0.8582],[0.0709,0.8503],[0.0709,0.8425],[0.0709,0.8346],[0.0709,0.8267],[0.0709,0.8188],[0.0709,0.811],[0.0709,0.8031],[0.0709,0.7952],[0.0709,0.7874],[0.0709,0.7795],[0.0709,0.7716],[0.0709,0.7637],[0.0709,0.7559],[0.0709,0.748],[0.0709,0.7401],[0.0709,0.7322],[0.0709,0.7244],[0.0709,0.7165],[0.0709,0.7086],[0.0709,0.7007],[0.0709,0.6929],[0.0709,0.685],[0.0709,0.6771],[0.0709,0.6693],[0.0709,0.6614],[0.0709,0.6535],[0.0709,0.6456],[0.0709,0.6378],[0.0709,0.6299],[0.0709,0.622],[0.0709,0.6141],[0.0709,0.6063],[0.0709,0.5984],[0.0709,0.5905],[0.0709,0.5826],[0.0709,0.5748],[0.0709,0.5669],[0.0709,0.559],[0.0709,0.5511],[0.0709,0.5433],[0.0709,0.5354],[0.0709,0.5275],[0.0709,0.5197],[0.0709,0.5118],[0.0709,0.5039],[0.0709,0.496],[0.0709,0.4882],[0.0709,0.4803],[0.0709,0.4724],[0.0709,0.4645],[0.0709,0.4567],[0.0709,0.4488],[0.0709,0.4409],[0.0709,0.433],[0.0709,0.4252],[0.0709,0.4173],[0.0709,0.4094],[0.0709,0.4016],[0.0709,0.3937],[0.0709,0.3858],[0.0709,0.3779],[0.0709,0.3701],[0.0709,0.3622],[0.0709,0.3543],[0.0709,0.3464],[0.0709,0.3386],[0.0709,0.3307],[0.0709,0.3228],[0.0709,0.3149],[0.0709,0.3071],[0.0709,0.2992],[0.0709,0.2913],[0.0709,0.2834],[0.0709,0.2756],[0.0709,0.2677],[0.0709,0.2598],[0.0709,0.252],[0.0709,0.2441],[0.0709,0.2362],[0.0709,0.2283],[0.0709,0.2205],[0.0709,0.2126],[0.0709,0.2047],[0.0709,0.1968],[0.0709,0.189],[0.0709,0.1811],[0.0709,0.1732],[0.0709,0.1653],[0.0709,0.1575],[0.0709,0.1496],[0.0709,0.1417],[0.0709,0.1339],[0.0709,0.126],[0.0709,0.1181],[0.0709,0.1102],[0.0709,0.1024],[0.0709,0.0945],[0.0709,0.0866],[0.0709,0.0787],[0.0709,0.0709],[0.0709,0.063],[0.0709,0.0551],[0.0709,0.0472],[0.0709,0.0394],[0.0709,0.0315],[0.0709,0.0236],[0.0709,0.0157],[0.0709,0.0079],[0.0709,0],[0.0788,0.9999],[0.0788,0.9921],[0.0788,0.9842],[0.0788,0.9763],[0.0788,0.9684],[0.0788,0.9606],[0.0788,0.9527],[0.0788,0.9448],[0.0788,0.937],[0.0788,0.9291],[0.0788,0.9212],[0.0788,0.9133],[0.0788,0.9055],[0.0788,0.8976],[0.0788,0.8897],[0.0788,0.8818],[0.0788,0.874],[0.0788,0.8661],[0.0788,0.8582],[0.0788,0.8503],[0.0788,0.8425],[0.0788,0.8346],[0.0788,0.8267],[0.0788,0.8188],[0.0788,0.811],[0.0788,0.8031],[0.0788,0.7952],[0.0788,0.7874],[0.0788,0.7795],[0.0788,0.7716],[0.0788,0.7637],[0.0788,0.7559],[0.0788,0.748],[0.0788,0.7401],[0.0788,0.7322],[0.0788,0.7244],[0.0788,0.7165],[0.0788,0.7086],[0.0788,0.7007],[0.0788,0.6929],[0.0788,0.685],[0.0788,0.6771],[0.0788,0.6693],[0.0788,0.6614],[0.0788,0.6535],[0.0788,0.6456],[0.0788,0.6378],[0.0788,0.6299],[0.0788,0.622],[0.0788,0.6141],[0.0788,0.6063],[0.0788,0.5984],[0.0788,0.5905],[0.0788,0.5826],[0.0788,0.5748],[0.0788,0.5669],[0.0788,0.559],[0.0788,0.5511],[0.0788,0.5433],[0.0788,0.5354],[0.0788,0.5275],[0.0788,0.5197],[0.0788,0.5118],[0.0788,0.5039],[0.0788,0.496],[0.0788,0.4882],[0.0788,0.4803],[0.0788,0.4724],[0.0788,0.4645],[0.0788,0.4567],[0.0788,0.4488],[0.0788,0.4409],[0.0788,0.433],[0.0788,0.4252],[0.0788,0.4173],[0.0788,0.4094],[0.0788,0.4016],[0.0788,0.3937],[0.0788,0.3858],[0.0788,0.3779],[0.0788,0.3701],[0.0788,0.3622],[0.0788,0.3543],[0.0788,0.3464],[0.0788,0.3386],[0.0788,0.3307],[0.0788,0.3228],[0.0788,0.3149],[0.0788,0.3071],[0.0788,0.2992],[0.0788,0.2913],[0.0788,0.2834],[0.0788,0.2756],[0.0788,0.2677],[0.0788,0.2598],[0.0788,0.252],[0.0788,0.2441],[0.0788,0.2362],[0.0788,0.2283],[0.0788,0.2205],[0.0788,0.2126],[0.0788,0.2047],[0.0788,0.1968],[0.0788,0.189],[0.0788,0.1811],[0.0788,0.1732],[0.0788,0.1653],[0.0788,0.1575],[0.0788,0.1496],[0.0788,0.1417],[0.0788,0.1339],[0.0788,0.126],[0.0788,0.1181],[0.0788,0.1102],[0.0788,0.1024],[0.0788,0.0945],[0.0788,0.0866],[0.0788,0.0787],[0.0788,0.0709],[0.0788,0.063],[0.0788,0.0551],[0.0788,0.0472],[0.0788,0.0394],[0.0788,0.0315],[0.0788,0.0236],[0.0788,0.0157],[0.0788,0.0079],[0.0788,0],[0.0867,0.9999],[0.0867,0.9921],[0.0867,0.9842],[0.0867,0.9763],[0.0867,0.9684],[0.0867,0.9606],[0.0867,0.9527],[0.0867,0.9448],[0.0867,0.937],[0.0867,0.9291],[0.0867,0.9212],[0.0867,0.9133],[0.0867,0.9055],[0.0867,0.8976],[0.0867,0.8897],[0.0867,0.8818],[0.0867,0.874],[0.0867,0.8661],[0.0867,0.8582],[0.0867,0.8503],[0.0867,0.8425],[0.0867,0.8346],[0.0867,0.8267],[0.0867,0.8188],[0.0867,0.811],[0.0867,0.8031],[0.0867,0.7952],[0.0867,0.7874],[0.0867,0.7795],[0.0867,0.7716],[0.0867,0.7637],[0.0867,0.7559],[0.0867,0.748],[0.0867,0.7401],[0.0867,0.7322],[0.0867,0.7244],[0.0867,0.7165],[0.0867,0.7086],[0.0867,0.7007],[0.0867,0.6929],[0.0867,0.685],[0.0867,0.6771],[0.0867,0.6693],[0.0867,0.6614],[0.0867,0.6535],[0.0867,0.6456],[0.0867,0.6378],[0.0867,0.6299],[0.0867,0.622],[0.0867,0.6141],[0.0867,0.6063],[0.0867,0.5984],[0.0867,0.5905],[0.0867,0.5826],[0.0867,0.5748],[0.0867,0.5669],[0.0867,0.559],[0.0867,0.5511],[0.0867,0.5433],[0.0867,0.5354],[0.0867,0.5275],[0.0867,0.5197],[0.0867,0.5118],[0.0867,0.5039],[0.0867,0.496],[0.0867,0.4882],[0.0867,0.4803],[0.0867,0.4724],[0.0867,0.4645],[0.0867,0.4567],[0.0867,0.4488],[0.0867,0.4409],[0.0867,0.433],[0.0867,0.4252],[0.0867,0.4173],[0.0867,0.4094],[0.0867,0.4016],[0.0867,0.3937],[0.0867,0.3858],[0.0867,0.3779],[0.0867,0.3701],[0.0867,0.3622],[0.0867,0.3543],[0.0867,0.3464],[0.0867,0.3386],[0.0867,0.3307],[0.0867,0.3228],[0.0867,0.3149],[0.0867,0.3071],[0.0867,0.2992],[0.0867,0.2913],[0.0867,0.2834],[0.0867,0.2756],[0.0867,0.2677],[0.0867,0.2598],[0.0867,0.252],[0.0867,0.2441],[0.0867,0.2362],[0.0867,0.2283],[0.0867,0.2205],[0.0867,0.2126],[0.0867,0.2047],[0.0867,0.1968],[0.0867,0.189],[0.0867,0.1811],[0.0867,0.1732],[0.0867,0.1653],[0.0867,0.1575],[0.0867,0.1496],[0.0867,0.1417],[0.0867,0.1339],[0.0867,0.126],[0.0867,0.1181],[0.0867,0.1102],[0.0867,0.1024],[0.0867,0.0945],[0.0867,0.0866],[0.0867,0.0787],[0.0867,0.0709],[0.0867,0.063],[0.0867,0.0551],[0.0867,0.0472],[0.0867,0.0394],[0.0867,0.0315],[0.0867,0.0236],[0.0867,0.0157],[0.0867,0.0079],[0.0867,0],[0.0945,0.9999],[0.0945,0.9921],[0.0945,0.9842],[0.0945,0.9763],[0.0945,0.9684],[0.0945,0.9606],[0.0945,0.9527],[0.0945,0.9448],[0.0945,0.937],[0.0945,0.9291],[0.0945,0.9212],[0.0945,0.9133],[0.0945,0.9055],[0.0945,0.8976],[0.0945,0.8897],[0.0945,0.8818],[0.0945,0.874],[0.0945,0.8661],[0.0945,0.8582],[0.0945,0.8503],[0.0945,0.8425],[0.0945,0.8346],[0.0945,0.8267],[0.0945,0.8188],[0.0945,0.811],[0.0945,0.8031],[0.0945,0.7952],[0.0945,0.7874],[0.0945,0.7795],[0.0945,0.7716],[0.0945,0.7637],[0.0945,0.7559],[0.0945,0.748],[0.0945,0.7401],[0.0945,0.7322],[0.0945,0.7244],[0.0945,0.7165],[0.0945,0.7086],[0.0945,0.7007],[0.0945,0.6929],[0.0945,0.685],[0.0945,0.6771],[0.0945,0.6693],[0.0945,0.6614],[0.0945,0.6535],[0.0945,0.6456],[0.0945,0.6378],[0.0945,0.6299],[0.0945,0.622],[0.0945,0.6141],[0.0945,0.6063],[0.0945,0.5984],[0.0945,0.5905],[0.0945,0.5826],[0.0945,0.5748],[0.0945,0.5669],[0.0945,0.559],[0.0945,0.5511],[0.0945,0.5433],[0.0945,0.5354],[0.0945,0.5275],[0.0945,0.5197],[0.0945,0.5118],[0.0945,0.5039],[0.0945,0.496],[0.0945,0.4882],[0.0945,0.4803],[0.0945,0.4724],[0.0945,0.4645],[0.0945,0.4567],[0.0945,0.4488],[0.0945,0.4409],[0.0945,0.433],[0.0945,0.4252],[0.0945,0.4173],[0.0945,0.4094],[0.0945,0.4016],[0.0945,0.3937],[0.0945,0.3858],[0.0945,0.3779],[0.0945,0.3701],[0.0945,0.3622],[0.0945,0.3543],[0.0945,0.3464],[0.0945,0.3386],[0.0945,0.3307],[0.0945,0.3228],[0.0945,0.3149],[0.0945,0.3071],[0.0945,0.2992],[0.0945,0.2913],[0.0945,0.2834],[0.0945,0.2756],[0.0945,0.2677],[0.0945,0.2598],[0.0945,0.252],[0.0945,0.2441],[0.0945,0.2362],[0.0945,0.2283],[0.0945,0.2205],[0.0945,0.2126],[0.0945,0.2047],[0.0945,0.1968],[0.0945,0.189],[0.0945,0.1811],[0.0945,0.1732],[0.0945,0.1653],[0.0945,0.1575],[0.0945,0.1496],[0.0945,0.1417],[0.0945,0.1339],[0.0945,0.126],[0.0945,0.1181],[0.0945,0.1102],[0.0945,0.1024],[0.0945,0.0945],[0.0945,0.0866],[0.0945,0.0787],[0.0945,0.0709],[0.0945,0.063],[0.0945,0.0551],[0.0945,0.0472],[0.0945,0.0394],[0.0945,0.0315],[0.0945,0.0236],[0.0945,0.0157],[0.0945,0.0079],[0.0945,0],[0.1024,0.9999],[0.1024,0.9921],[0.1024,0.9842],[0.1024,0.9763],[0.1024,0.9684],[0.1024,0.9606],[0.1024,0.9527],[0.1024,0.9448],[0.1024,0.937],[0.1024,0.9291],[0.1024,0.9212],[0.1024,0.9133],[0.1024,0.9055],[0.1024,0.8976],[0.1024,0.8897],[0.1024,0.8818],[0.1024,0.874],[0.1024,0.8661],[0.1024,0.8582],[0.1024,0.8503],[0.1024,0.8425],[0.1024,0.8346],[0.1024,0.8267],[0.1024,0.8188],[0.1024,0.811],[0.1024,0.8031],[0.1024,0.7952],[0.1024,0.7874],[0.1024,0.7795],[0.1024,0.7716],[0.1024,0.7637],[0.1024,0.7559],[0.1024,0.748],[0.1024,0.7401],[0.1024,0.7322],[0.1024,0.7244],[0.1024,0.7165],[0.1024,0.7086],[0.1024,0.7007],[0.1024,0.6929],[0.1024,0.685],[0.1024,0.6771],[0.1024,0.6693],[0.1024,0.6614],[0.1024,0.6535],[0.1024,0.6456],[0.1024,0.6378],[0.1024,0.6299],[0.1024,0.622],[0.1024,0.6141],[0.1024,0.6063],[0.1024,0.5984],[0.1024,0.5905],[0.1024,0.5826],[0.1024,0.5748],[0.1024,0.5669],[0.1024,0.559],[0.1024,0.5511],[0.1024,0.5433],[0.1024,0.5354],[0.1024,0.5275],[0.1024,0.5197],[0.1024,0.5118],[0.1024,0.5039],[0.1024,0.496],[0.1024,0.4882],[0.1024,0.4803],[0.1024,0.4724],[0.1024,0.4645],[0.1024,0.4567],[0.1024,0.4488],[0.1024,0.4409],[0.1024,0.433],[0.1024,0.4252],[0.1024,0.4173],[0.1024,0.4094],[0.1024,0.4016],[0.1024,0.3937],[0.1024,0.3858],[0.1024,0.3779],[0.1024,0.3701],[0.1024,0.3622],[0.1024,0.3543],[0.1024,0.3464],[0.1024,0.3386],[0.1024,0.3307],[0.1024,0.3228],[0.1024,0.3149],[0.1024,0.3071],[0.1024,0.2992],[0.1024,0.2913],[0.1024,0.2834],[0.1024,0.2756],[0.1024,0.2677],[0.1024,0.2598],[0.1024,0.252],[0.1024,0.2441],[0.1024,0.2362],[0.1024,0.2283],[0.1024,0.2205],[0.1024,0.2126],[0.1024,0.2047],[0.1024,0.1968],[0.1024,0.189],[0.1024,0.1811],[0.1024,0.1732],[0.1024,0.1653],[0.1024,0.1575],[0.1024,0.1496],[0.1024,0.1417],[0.1024,0.1339],[0.1024,0.126],[0.1024,0.1181],[0.1024,0.1102],[0.1024,0.1024],[0.1024,0.0945],[0.1024,0.0866],[0.1024,0.0787],[0.1024,0.0709],[0.1024,0.063],[0.1024,0.0551],[0.1024,0.0472],[0.1024,0.0394],[0.1024,0.0315],[0.1024,0.0236],[0.1024,0.0157],[0.1024,0.0079],[0.1024,0],[0.1103,0.9999],[0.1103,0.9921],[0.1103,0.9842],[0.1103,0.9763],[0.1103,0.9684],[0.1103,0.9606],[0.1103,0.9527],[0.1103,0.9448],[0.1103,0.937],[0.1103,0.9291],[0.1103,0.9212],[0.1103,0.9133],[0.1103,0.9055],[0.1103,0.8976],[0.1103,0.8897],[0.1103,0.8818],[0.1103,0.874],[0.1103,0.8661],[0.1103,0.8582],[0.1103,0.8503],[0.1103,0.8425],[0.1103,0.8346],[0.1103,0.8267],[0.1103,0.8188],[0.1103,0.811],[0.1103,0.8031],[0.1103,0.7952],[0.1103,0.7874],[0.1103,0.7795],[0.1103,0.7716],[0.1103,0.7637],[0.1103,0.7559],[0.1103,0.748],[0.1103,0.7401],[0.1103,0.7322],[0.1103,0.7244],[0.1103,0.7165],[0.1103,0.7086],[0.1103,0.7007],[0.1103,0.6929],[0.1103,0.685],[0.1103,0.6771],[0.1103,0.6693],[0.1103,0.6614],[0.1103,0.6535],[0.1103,0.6456],[0.1103,0.6378],[0.1103,0.6299],[0.1103,0.622],[0.1103,0.6141],[0.1103,0.6063],[0.1103,0.5984],[0.1103,0.5905],[0.1103,0.5826],[0.1103,0.5748],[0.1103,0.5669],[0.1103,0.559],[0.1103,0.5511],[0.1103,0.5433],[0.1103,0.5354],[0.1103,0.5275],[0.1103,0.5197],[0.1103,0.5118],[0.1103,0.5039],[0.1103,0.496],[0.1103,0.4882],[0.1103,0.4803],[0.1103,0.4724],[0.1103,0.4645],[0.1103,0.4567],[0.1103,0.4488],[0.1103,0.4409],[0.1103,0.433],[0.1103,0.4252],[0.1103,0.4173],[0.1103,0.4094],[0.1103,0.4016],[0.1103,0.3937],[0.1103,0.3858],[0.1103,0.3779],[0.1103,0.3701],[0.1103,0.3622],[0.1103,0.3543],[0.1103,0.3464],[0.1103,0.3386],[0.1103,0.3307],[0.1103,0.3228],[0.1103,0.3149],[0.1103,0.3071],[0.1103,0.2992],[0.1103,0.2913],[0.1103,0.2834],[0.1103,0.2756],[0.1103,0.2677],[0.1103,0.2598],[0.1103,0.252],[0.1103,0.2441],[0.1103,0.2362],[0.1103,0.2283],[0.1103,0.2205],[0.1103,0.2126],[0.1103,0.2047],[0.1103,0.1968],[0.1103,0.189],[0.1103,0.1811],[0.1103,0.1732],[0.1103,0.1653],[0.1103,0.1575],[0.1103,0.1496],[0.1103,0.1417],[0.1103,0.1339],[0.1103,0.126],[0.1103,0.1181],[0.1103,0.1102],[0.1103,0.1024],[0.1103,0.0945],[0.1103,0.0866],[0.1103,0.0787],[0.1103,0.0709],[0.1103,0.063],[0.1103,0.0551],[0.1103,0.0472],[0.1103,0.0394],[0.1103,0.0315],[0.1103,0.0236],[0.1103,0.0157],[0.1103,0.0079],[0.1103,0],[0.1182,0.9999],[0.1182,0.9921],[0.1182,0.9842],[0.1182,0.9763],[0.1182,0.9684],[0.1182,0.9606],[0.1182,0.9527],[0.1182,0.9448],[0.1182,0.937],[0.1182,0.9291],[0.1182,0.9212],[0.1182,0.9133],[0.1182,0.9055],[0.1182,0.8976],[0.1182,0.8897],[0.1182,0.8818],[0.1182,0.874],[0.1182,0.8661],[0.1182,0.8582],[0.1182,0.8503],[0.1182,0.8425],[0.1182,0.8346],[0.1182,0.8267],[0.1182,0.8188],[0.1182,0.811],[0.1182,0.8031],[0.1182,0.7952],[0.1182,0.7874],[0.1182,0.7795],[0.1182,0.7716],[0.1182,0.7637],[0.1182,0.7559],[0.1182,0.748],[0.1182,0.7401],[0.1182,0.7322],[0.1182,0.7244],[0.1182,0.7165],[0.1182,0.7086],[0.1182,0.7007],[0.1182,0.6929],[0.1182,0.685],[0.1182,0.6771],[0.1182,0.6693],[0.1182,0.6614],[0.1182,0.6535],[0.1182,0.6456],[0.1182,0.6378],[0.1182,0.6299],[0.1182,0.622],[0.1182,0.6141],[0.1182,0.6063],[0.1182,0.5984],[0.1182,0.5905],[0.1182,0.5826],[0.1182,0.5748],[0.1182,0.5669],[0.1182,0.559],[0.1182,0.5511],[0.1182,0.5433],[0.1182,0.5354],[0.1182,0.5275],[0.1182,0.5197],[0.1182,0.5118],[0.1182,0.5039],[0.1182,0.496],[0.1182,0.4882],[0.1182,0.4803],[0.1182,0.4724],[0.1182,0.4645],[0.1182,0.4567],[0.1182,0.4488],[0.1182,0.4409],[0.1182,0.433],[0.1182,0.4252],[0.1182,0.4173],[0.1182,0.4094],[0.1182,0.4016],[0.1182,0.3937],[0.1182,0.3858],[0.1182,0.3779],[0.1182,0.3701],[0.1182,0.3622],[0.1182,0.3543],[0.1182,0.3464],[0.1182,0.3386],[0.1182,0.3307],[0.1182,0.3228],[0.1182,0.3149],[0.1182,0.3071],[0.1182,0.2992],[0.1182,0.2913],[0.1182,0.2834],[0.1182,0.2756],[0.1182,0.2677],[0.1182,0.2598],[0.1182,0.252],[0.1182,0.2441],[0.1182,0.2362],[0.1182,0.2283],[0.1182,0.2205],[0.1182,0.2126],[0.1182,0.2047],[0.1182,0.1968],[0.1182,0.189],[0.1182,0.1811],[0.1182,0.1732],[0.1182,0.1653],[0.1182,0.1575],[0.1182,0.1496],[0.1182,0.1417],[0.1182,0.1339],[0.1182,0.126],[0.1182,0.1181],[0.1182,0.1102],[0.1182,0.1024],[0.1182,0.0945],[0.1182,0.0866],[0.1182,0.0787],[0.1182,0.0709],[0.1182,0.063],[0.1182,0.0551],[0.1182,0.0472],[0.1182,0.0394],[0.1182,0.0315],[0.1182,0.0236],[0.1182,0.0157],[0.1182,0.0079],[0.1182,0],[0.126,0.9999],[0.126,0.9921],[0.126,0.9842],[0.126,0.9763],[0.126,0.9684],[0.126,0.9606],[0.126,0.9527],[0.126,0.9448],[0.126,0.937],[0.126,0.9291],[0.126,0.9212],[0.126,0.9133],[0.126,0.9055],[0.126,0.8976],[0.126,0.8897],[0.126,0.8818],[0.126,0.874],[0.126,0.8661],[0.126,0.8582],[0.126,0.8503],[0.126,0.8425],[0.126,0.8346],[0.126,0.8267],[0.126,0.8188],[0.126,0.811],[0.126,0.8031],[0.126,0.7952],[0.126,0.7874],[0.126,0.7795],[0.126,0.7716],[0.126,0.7637],[0.126,0.7559],[0.126,0.748],[0.126,0.7401],[0.126,0.7322],[0.126,0.7244],[0.126,0.7165],[0.126,0.7086],[0.126,0.7007],[0.126,0.6929],[0.126,0.685],[0.126,0.6771],[0.126,0.6693],[0.126,0.6614],[0.126,0.6535],[0.126,0.6456],[0.126,0.6378],[0.126,0.6299],[0.126,0.622],[0.126,0.6141],[0.126,0.6063],[0.126,0.5984],[0.126,0.5905],[0.126,0.5826],[0.126,0.5748],[0.126,0.5669],[0.126,0.559],[0.126,0.5511],[0.126,0.5433],[0.126,0.5354],[0.126,0.5275],[0.126,0.5197],[0.126,0.5118],[0.126,0.5039],[0.126,0.496],[0.126,0.4882],[0.126,0.4803],[0.126,0.4724],[0.126,0.4645],[0.126,0.4567],[0.126,0.4488],[0.126,0.4409],[0.126,0.433],[0.126,0.4252],[0.126,0.4173],[0.126,0.4094],[0.126,0.4016],[0.126,0.3937],[0.126,0.3858],[0.126,0.3779],[0.126,0.3701],[0.126,0.3622],[0.126,0.3543],[0.126,0.3464],[0.126,0.3386],[0.126,0.3307],[0.126,0.3228],[0.126,0.3149],[0.126,0.3071],[0.126,0.2992],[0.126,0.2913],[0.126,0.2834],[0.126,0.2756],[0.126,0.2677],[0.126,0.2598],[0.126,0.252],[0.126,0.2441],[0.126,0.2362],[0.126,0.2283],[0.126,0.2205],[0.126,0.2126],[0.126,0.2047],[0.126,0.1968],[0.126,0.189],[0.126,0.1811],[0.126,0.1732],[0.126,0.1653],[0.126,0.1575],[0.126,0.1496],[0.126,0.1417],[0.126,0.1339],[0.126,0.126],[0.126,0.1181],[0.126,0.1102],[0.126,0.1024],[0.126,0.0945],[0.126,0.0866],[0.126,0.0787],[0.126,0.0709],[0.126,0.063],[0.126,0.0551],[0.126,0.0472],[0.126,0.0394],[0.126,0.0315],[0.126,0.0236],[0.126,0.0157],[0.126,0.0079],[0.126,0],[0.1339,0.9999],[0.1339,0.9921],[0.1339,0.9842],[0.1339,0.9763],[0.1339,0.9684],[0.1339,0.9606],[0.1339,0.9527],[0.1339,0.9448],[0.1339,0.937],[0.1339,0.9291],[0.1339,0.9212],[0.1339,0.9133],[0.1339,0.9055],[0.1339,0.8976],[0.1339,0.8897],[0.1339,0.8818],[0.1339,0.874],[0.1339,0.8661],[0.1339,0.8582],[0.1339,0.8503],[0.1339,0.8425],[0.1339,0.8346],[0.1339,0.8267],[0.1339,0.8188],[0.1339,0.811],[0.1339,0.8031],[0.1339,0.7952],[0.1339,0.7874],[0.1339,0.7795],[0.1339,0.7716],[0.1339,0.7637],[0.1339,0.7559],[0.1339,0.748],[0.1339,0.7401],[0.1339,0.7322],[0.1339,0.7244],[0.1339,0.7165],[0.1339,0.7086],[0.1339,0.7007],[0.1339,0.6929],[0.1339,0.685],[0.1339,0.6771],[0.1339,0.6693],[0.1339,0.6614],[0.1339,0.6535],[0.1339,0.6456],[0.1339,0.6378],[0.1339,0.6299],[0.1339,0.622],[0.1339,0.6141],[0.1339,0.6063],[0.1339,0.5984],[0.1339,0.5905],[0.1339,0.5826],[0.1339,0.5748],[0.1339,0.5669],[0.1339,0.559],[0.1339,0.5511],[0.1339,0.5433],[0.1339,0.5354],[0.1339,0.5275],[0.1339,0.5197],[0.1339,0.5118],[0.1339,0.5039],[0.1339,0.496],[0.1339,0.4882],[0.1339,0.4803],[0.1339,0.4724],[0.1339,0.4645],[0.1339,0.4567],[0.1339,0.4488],[0.1339,0.4409],[0.1339,0.433],[0.1339,0.4252],[0.1339,0.4173],[0.1339,0.4094],[0.1339,0.4016],[0.1339,0.3937],[0.1339,0.3858],[0.1339,0.3779],[0.1339,0.3701],[0.1339,0.3622],[0.1339,0.3543],[0.1339,0.3464],[0.1339,0.3386],[0.1339,0.3307],[0.1339,0.3228],[0.1339,0.3149],[0.1339,0.3071],[0.1339,0.2992],[0.1339,0.2913],[0.1339,0.2834],[0.1339,0.2756],[0.1339,0.2677],[0.1339,0.2598],[0.1339,0.252],[0.1339,0.2441],[0.1339,0.2362],[0.1339,0.2283],[0.1339,0.2205],[0.1339,0.2126],[0.1339,0.2047],[0.1339,0.1968],[0.1339,0.189],[0.1339,0.1811],[0.1339,0.1732],[0.1339,0.1653],[0.1339,0.1575],[0.1339,0.1496],[0.1339,0.1417],[0.1339,0.1339],[0.1339,0.126],[0.1339,0.1181],[0.1339,0.1102],[0.1339,0.1024],[0.1339,0.0945],[0.1339,0.0866],[0.1339,0.0787],[0.1339,0.0709],[0.1339,0.063],[0.1339,0.0551],[0.1339,0.0472],[0.1339,0.0394],[0.1339,0.0315],[0.1339,0.0236],[0.1339,0.0157],[0.1339,0.0079],[0.1339,0],[0.1418,0.9999],[0.1418,0.9921],[0.1418,0.9842],[0.1418,0.9763],[0.1418,0.9684],[0.1418,0.9606],[0.1418,0.9527],[0.1418,0.9448],[0.1418,0.937],[0.1418,0.9291],[0.1418,0.9212],[0.1418,0.9133],[0.1418,0.9055],[0.1418,0.8976],[0.1418,0.8897],[0.1418,0.8818],[0.1418,0.874],[0.1418,0.8661],[0.1418,0.8582],[0.1418,0.8503],[0.1418,0.8425],[0.1418,0.8346],[0.1418,0.8267],[0.1418,0.8188],[0.1418,0.811],[0.1418,0.8031],[0.1418,0.7952],[0.1418,0.7874],[0.1418,0.7795],[0.1418,0.7716],[0.1418,0.7637],[0.1418,0.7559],[0.1418,0.748],[0.1418,0.7401],[0.1418,0.7322],[0.1418,0.7244],[0.1418,0.7165],[0.1418,0.7086],[0.1418,0.7007],[0.1418,0.6929],[0.1418,0.685],[0.1418,0.6771],[0.1418,0.6693],[0.1418,0.6614],[0.1418,0.6535],[0.1418,0.6456],[0.1418,0.6378],[0.1418,0.6299],[0.1418,0.622],[0.1418,0.6141],[0.1418,0.6063],[0.1418,0.5984],[0.1418,0.5905],[0.1418,0.5826],[0.1418,0.5748],[0.1418,0.5669],[0.1418,0.559],[0.1418,0.5511],[0.1418,0.5433],[0.1418,0.5354],[0.1418,0.5275],[0.1418,0.5197],[0.1418,0.5118],[0.1418,0.5039],[0.1418,0.496],[0.1418,0.4882],[0.1418,0.4803],[0.1418,0.4724],[0.1418,0.4645],[0.1418,0.4567],[0.1418,0.4488],[0.1418,0.4409],[0.1418,0.433],[0.1418,0.4252],[0.1418,0.4173],[0.1418,0.4094],[0.1418,0.4016],[0.1418,0.3937],[0.1418,0.3858],[0.1418,0.3779],[0.1418,0.3701],[0.1418,0.3622],[0.1418,0.3543],[0.1418,0.3464],[0.1418,0.3386],[0.1418,0.3307],[0.1418,0.3228],[0.1418,0.3149],[0.1418,0.3071],[0.1418,0.2992],[0.1418,0.2913],[0.1418,0.2834],[0.1418,0.2756],[0.1418,0.2677],[0.1418,0.2598],[0.1418,0.252],[0.1418,0.2441],[0.1418,0.2362],[0.1418,0.2283],[0.1418,0.2205],[0.1418,0.2126],[0.1418,0.2047],[0.1418,0.1968],[0.1418,0.189],[0.1418,0.1811],[0.1418,0.1732],[0.1418,0.1653],[0.1418,0.1575],[0.1418,0.1496],[0.1418,0.1417],[0.1418,0.1339],[0.1418,0.126],[0.1418,0.1181],[0.1418,0.1102],[0.1418,0.1024],[0.1418,0.0945],[0.1418,0.0866],[0.1418,0.0787],[0.1418,0.0709],[0.1418,0.063],[0.1418,0.0551],[0.1418,0.0472],[0.1418,0.0394],[0.1418,0.0315],[0.1418,0.0236],[0.1418,0.0157],[0.1418,0.0079],[0.1418,0],[0.1497,0.9999],[0.1497,0.9921],[0.1497,0.9842],[0.1497,0.9763],[0.1497,0.9684],[0.1497,0.9606],[0.1497,0.9527],[0.1497,0.9448],[0.1497,0.937],[0.1497,0.9291],[0.1497,0.9212],[0.1497,0.9133],[0.1497,0.9055],[0.1497,0.8976],[0.1497,0.8897],[0.1497,0.8818],[0.1497,0.874],[0.1497,0.8661],[0.1497,0.8582],[0.1497,0.8503],[0.1497,0.8425],[0.1497,0.8346],[0.1497,0.8267],[0.1497,0.8188],[0.1497,0.811],[0.1497,0.8031],[0.1497,0.7952],[0.1497,0.7874],[0.1497,0.7795],[0.1497,0.7716],[0.1497,0.7637],[0.1497,0.7559],[0.1497,0.748],[0.1497,0.7401],[0.1497,0.7322],[0.1497,0.7244],[0.1497,0.7165],[0.1497,0.7086],[0.1497,0.7007],[0.1497,0.6929],[0.1497,0.685],[0.1497,0.6771],[0.1497,0.6693],[0.1497,0.6614],[0.1497,0.6535],[0.1497,0.6456],[0.1497,0.6378],[0.1497,0.6299],[0.1497,0.622],[0.1497,0.6141],[0.1497,0.6063],[0.1497,0.5984],[0.1497,0.5905],[0.1497,0.5826],[0.1497,0.5748],[0.1497,0.5669],[0.1497,0.559],[0.1497,0.5511],[0.1497,0.5433],[0.1497,0.5354],[0.1497,0.5275],[0.1497,0.5197],[0.1497,0.5118],[0.1497,0.5039],[0.1497,0.496],[0.1497,0.4882],[0.1497,0.4803],[0.1497,0.4724],[0.1497,0.4645],[0.1497,0.4567],[0.1497,0.4488],[0.1497,0.4409],[0.1497,0.433],[0.1497,0.4252],[0.1497,0.4173],[0.1497,0.4094],[0.1497,0.4016],[0.1497,0.3937],[0.1497,0.3858],[0.1497,0.3779],[0.1497,0.3701],[0.1497,0.3622],[0.1497,0.3543],[0.1497,0.3464],[0.1497,0.3386],[0.1497,0.3307],[0.1497,0.3228],[0.1497,0.3149],[0.1497,0.3071],[0.1497,0.2992],[0.1497,0.2913],[0.1497,0.2834],[0.1497,0.2756],[0.1497,0.2677],[0.1497,0.2598],[0.1497,0.252],[0.1497,0.2441],[0.1497,0.2362],[0.1497,0.2283],[0.1497,0.2205],[0.1497,0.2126],[0.1497,0.2047],[0.1497,0.1968],[0.1497,0.189],[0.1497,0.1811],[0.1497,0.1732],[0.1497,0.1653],[0.1497,0.1575],[0.1497,0.1496],[0.1497,0.1417],[0.1497,0.1339],[0.1497,0.126],[0.1497,0.1181],[0.1497,0.1102],[0.1497,0.1024],[0.1497,0.0945],[0.1497,0.0866],[0.1497,0.0787],[0.1497,0.0709],[0.1497,0.063],[0.1497,0.0551],[0.1497,0.0472],[0.1497,0.0394],[0.1497,0.0315],[0.1497,0.0236],[0.1497,0.0157],[0.1497,0.0079],[0.1497,0],[0.1575,0.9999],[0.1575,0.9921],[0.1575,0.9842],[0.1575,0.9763],[0.1575,0.9684],[0.1575,0.9606],[0.1575,0.9527],[0.1575,0.9448],[0.1575,0.937],[0.1575,0.9291],[0.1575,0.9212],[0.1575,0.9133],[0.1575,0.9055],[0.1575,0.8976],[0.1575,0.8897],[0.1575,0.8818],[0.1575,0.874],[0.1575,0.8661],[0.1575,0.8582],[0.1575,0.8503],[0.1575,0.8425],[0.1575,0.8346],[0.1575,0.8267],[0.1575,0.8188],[0.1575,0.811],[0.1575,0.8031],[0.1575,0.7952],[0.1575,0.7874],[0.1575,0.7795],[0.1575,0.7716],[0.1575,0.7637],[0.1575,0.7559],[0.1575,0.748],[0.1575,0.7401],[0.1575,0.7322],[0.1575,0.7244],[0.1575,0.7165],[0.1575,0.7086],[0.1575,0.7007],[0.1575,0.6929],[0.1575,0.685],[0.1575,0.6771],[0.1575,0.6693],[0.1575,0.6614],[0.1575,0.6535],[0.1575,0.6456],[0.1575,0.6378],[0.1575,0.6299],[0.1575,0.622],[0.1575,0.6141],[0.1575,0.6063],[0.1575,0.5984],[0.1575,0.5905],[0.1575,0.5826],[0.1575,0.5748],[0.1575,0.5669],[0.1575,0.559],[0.1575,0.5511],[0.1575,0.5433],[0.1575,0.5354],[0.1575,0.5275],[0.1575,0.5197],[0.1575,0.5118],[0.1575,0.5039],[0.1575,0.496],[0.1575,0.4882],[0.1575,0.4803],[0.1575,0.4724],[0.1575,0.4645],[0.1575,0.4567],[0.1575,0.4488],[0.1575,0.4409],[0.1575,0.433],[0.1575,0.4252],[0.1575,0.4173],[0.1575,0.4094],[0.1575,0.4016],[0.1575,0.3937],[0.1575,0.3858],[0.1575,0.3779],[0.1575,0.3701],[0.1575,0.3622],[0.1575,0.3543],[0.1575,0.3464],[0.1575,0.3386],[0.1575,0.3307],[0.1575,0.3228],[0.1575,0.3149],[0.1575,0.3071],[0.1575,0.2992],[0.1575,0.2913],[0.1575,0.2834],[0.1575,0.2756],[0.1575,0.2677],[0.1575,0.2598],[0.1575,0.252],[0.1575,0.2441],[0.1575,0.2362],[0.1575,0.2283],[0.1575,0.2205],[0.1575,0.2126],[0.1575,0.2047],[0.1575,0.1968],[0.1575,0.189],[0.1575,0.1811],[0.1575,0.1732],[0.1575,0.1653],[0.1575,0.1575],[0.1575,0.1496],[0.1575,0.1417],[0.1575,0.1339],[0.1575,0.126],[0.1575,0.1181],[0.1575,0.1102],[0.1575,0.1024],[0.1575,0.0945],[0.1575,0.0866],[0.1575,0.0787],[0.1575,0.0709],[0.1575,0.063],[0.1575,0.0551],[0.1575,0.0472],[0.1575,0.0394],[0.1575,0.0315],[0.1575,0.0236],[0.1575,0.0157],[0.1575,0.0079],[0.1575,0],[0.1654,0.9999],[0.1654,0.9921],[0.1654,0.9842],[0.1654,0.9763],[0.1654,0.9684],[0.1654,0.9606],[0.1654,0.9527],[0.1654,0.9448],[0.1654,0.937],[0.1654,0.9291],[0.1654,0.9212],[0.1654,0.9133],[0.1654,0.9055],[0.1654,0.8976],[0.1654,0.8897],[0.1654,0.8818],[0.1654,0.874],[0.1654,0.8661],[0.1654,0.8582],[0.1654,0.8503],[0.1654,0.8425],[0.1654,0.8346],[0.1654,0.8267],[0.1654,0.8188],[0.1654,0.811],[0.1654,0.8031],[0.1654,0.7952],[0.1654,0.7874],[0.1654,0.7795],[0.1654,0.7716],[0.1654,0.7637],[0.1654,0.7559],[0.1654,0.748],[0.1654,0.7401],[0.1654,0.7322],[0.1654,0.7244],[0.1654,0.7165],[0.1654,0.7086],[0.1654,0.7007],[0.1654,0.6929],[0.1654,0.685],[0.1654,0.6771],[0.1654,0.6693],[0.1654,0.6614],[0.1654,0.6535],[0.1654,0.6456],[0.1654,0.6378],[0.1654,0.6299],[0.1654,0.622],[0.1654,0.6141],[0.1654,0.6063],[0.1654,0.5984],[0.1654,0.5905],[0.1654,0.5826],[0.1654,0.5748],[0.1654,0.5669],[0.1654,0.559],[0.1654,0.5511],[0.1654,0.5433],[0.1654,0.5354],[0.1654,0.5275],[0.1654,0.5197],[0.1654,0.5118],[0.1654,0.5039],[0.1654,0.496],[0.1654,0.4882],[0.1654,0.4803],[0.1654,0.4724],[0.1654,0.4645],[0.1654,0.4567],[0.1654,0.4488],[0.1654,0.4409],[0.1654,0.433],[0.1654,0.4252],[0.1654,0.4173],[0.1654,0.4094],[0.1654,0.4016],[0.1654,0.3937],[0.1654,0.3858],[0.1654,0.3779],[0.1654,0.3701],[0.1654,0.3622],[0.1654,0.3543],[0.1654,0.3464],[0.1654,0.3386],[0.1654,0.3307],[0.1654,0.3228],[0.1654,0.3149],[0.1654,0.3071],[0.1654,0.2992],[0.1654,0.2913],[0.1654,0.2834],[0.1654,0.2756],[0.1654,0.2677],[0.1654,0.2598],[0.1654,0.252],[0.1654,0.2441],[0.1654,0.2362],[0.1654,0.2283],[0.1654,0.2205],[0.1654,0.2126],[0.1654,0.2047],[0.1654,0.1968],[0.1654,0.189],[0.1654,0.1811],[0.1654,0.1732],[0.1654,0.1653],[0.1654,0.1575],[0.1654,0.1496],[0.1654,0.1417],[0.1654,0.1339],[0.1654,0.126],[0.1654,0.1181],[0.1654,0.1102],[0.1654,0.1024],[0.1654,0.0945],[0.1654,0.0866],[0.1654,0.0787],[0.1654,0.0709],[0.1654,0.063],[0.1654,0.0551],[0.1654,0.0472],[0.1654,0.0394],[0.1654,0.0315],[0.1654,0.0236],[0.1654,0.0157],[0.1654,0.0079],[0.1654,0],[0.1733,0.9999],[0.1733,0.9921],[0.1733,0.9842],[0.1733,0.9763],[0.1733,0.9684],[0.1733,0.9606],[0.1733,0.9527],[0.1733,0.9448],[0.1733,0.937],[0.1733,0.9291],[0.1733,0.9212],[0.1733,0.9133],[0.1733,0.9055],[0.1733,0.8976],[0.1733,0.8897],[0.1733,0.8818],[0.1733,0.874],[0.1733,0.8661],[0.1733,0.8582],[0.1733,0.8503],[0.1733,0.8425],[0.1733,0.8346],[0.1733,0.8267],[0.1733,0.8188],[0.1733,0.811],[0.1733,0.8031],[0.1733,0.7952],[0.1733,0.7874],[0.1733,0.7795],[0.1733,0.7716],[0.1733,0.7637],[0.1733,0.7559],[0.1733,0.748],[0.1733,0.7401],[0.1733,0.7322],[0.1733,0.7244],[0.1733,0.7165],[0.1733,0.7086],[0.1733,0.7007],[0.1733,0.6929],[0.1733,0.685],[0.1733,0.6771],[0.1733,0.6693],[0.1733,0.6614],[0.1733,0.6535],[0.1733,0.6456],[0.1733,0.6378],[0.1733,0.6299],[0.1733,0.622],[0.1733,0.6141],[0.1733,0.6063],[0.1733,0.5984],[0.1733,0.5905],[0.1733,0.5826],[0.1733,0.5748],[0.1733,0.5669],[0.1733,0.559],[0.1733,0.5511],[0.1733,0.5433],[0.1733,0.5354],[0.1733,0.5275],[0.1733,0.5197],[0.1733,0.5118],[0.1733,0.5039],[0.1733,0.496],[0.1733,0.4882],[0.1733,0.4803],[0.1733,0.4724],[0.1733,0.4645],[0.1733,0.4567],[0.1733,0.4488],[0.1733,0.4409],[0.1733,0.433],[0.1733,0.4252],[0.1733,0.4173],[0.1733,0.4094],[0.1733,0.4016],[0.1733,0.3937],[0.1733,0.3858],[0.1733,0.3779],[0.1733,0.3701],[0.1733,0.3622],[0.1733,0.3543],[0.1733,0.3464],[0.1733,0.3386],[0.1733,0.3307],[0.1733,0.3228],[0.1733,0.3149],[0.1733,0.3071],[0.1733,0.2992],[0.1733,0.2913],[0.1733,0.2834],[0.1733,0.2756],[0.1733,0.2677],[0.1733,0.2598],[0.1733,0.252],[0.1733,0.2441],[0.1733,0.2362],[0.1733,0.2283],[0.1733,0.2205],[0.1733,0.2126],[0.1733,0.2047],[0.1733,0.1968],[0.1733,0.189],[0.1733,0.1811],[0.1733,0.1732],[0.1733,0.1653],[0.1733,0.1575],[0.1733,0.1496],[0.1733,0.1417],[0.1733,0.1339],[0.1733,0.126],[0.1733,0.1181],[0.1733,0.1102],[0.1733,0.1024],[0.1733,0.0945],[0.1733,0.0866],[0.1733,0.0787],[0.1733,0.0709],[0.1733,0.063],[0.1733,0.0551],[0.1733,0.0472],[0.1733,0.0394],[0.1733,0.0315],[0.1733,0.0236],[0.1733,0.0157],[0.1733,0.0079],[0.1733,0],[0.1812,0.9999],[0.1812,0.9921],[0.1812,0.9842],[0.1812,0.9763],[0.1812,0.9684],[0.1812,0.9606],[0.1812,0.9527],[0.1812,0.9448],[0.1812,0.937],[0.1812,0.9291],[0.1812,0.9212],[0.1812,0.9133],[0.1812,0.9055],[0.1812,0.8976],[0.1812,0.8897],[0.1812,0.8818],[0.1812,0.874],[0.1812,0.8661],[0.1812,0.8582],[0.1812,0.8503],[0.1812,0.8425],[0.1812,0.8346],[0.1812,0.8267],[0.1812,0.8188],[0.1812,0.811],[0.1812,0.8031],[0.1812,0.7952],[0.1812,0.7874],[0.1812,0.7795],[0.1812,0.7716],[0.1812,0.7637],[0.1812,0.7559],[0.1812,0.748],[0.1812,0.7401],[0.1812,0.7322],[0.1812,0.7244],[0.1812,0.7165],[0.1812,0.7086],[0.1812,0.7007],[0.1812,0.6929],[0.1812,0.685],[0.1812,0.6771],[0.1812,0.6693],[0.1812,0.6614],[0.1812,0.6535],[0.1812,0.6456],[0.1812,0.6378],[0.1812,0.6299],[0.1812,0.622],[0.1812,0.6141],[0.1812,0.6063],[0.1812,0.5984],[0.1812,0.5905],[0.1812,0.5826],[0.1812,0.5748],[0.1812,0.5669],[0.1812,0.559],[0.1812,0.5511],[0.1812,0.5433],[0.1812,0.5354],[0.1812,0.5275],[0.1812,0.5197],[0.1812,0.5118],[0.1812,0.5039],[0.1812,0.496],[0.1812,0.4882],[0.1812,0.4803],[0.1812,0.4724],[0.1812,0.4645],[0.1812,0.4567],[0.1812,0.4488],[0.1812,0.4409],[0.1812,0.433],[0.1812,0.4252],[0.1812,0.4173],[0.1812,0.4094],[0.1812,0.4016],[0.1812,0.3937],[0.1812,0.3858],[0.1812,0.3779],[0.1812,0.3701],[0.1812,0.3622],[0.1812,0.3543],[0.1812,0.3464],[0.1812,0.3386],[0.1812,0.3307],[0.1812,0.3228],[0.1812,0.3149],[0.1812,0.3071],[0.1812,0.2992],[0.1812,0.2913],[0.1812,0.2834],[0.1812,0.2756],[0.1812,0.2677],[0.1812,0.2598],[0.1812,0.252],[0.1812,0.2441],[0.1812,0.2362],[0.1812,0.2283],[0.1812,0.2205],[0.1812,0.2126],[0.1812,0.2047],[0.1812,0.1968],[0.1812,0.189],[0.1812,0.1811],[0.1812,0.1732],[0.1812,0.1653],[0.1812,0.1575],[0.1812,0.1496],[0.1812,0.1417],[0.1812,0.1339],[0.1812,0.126],[0.1812,0.1181],[0.1812,0.1102],[0.1812,0.1024],[0.1812,0.0945],[0.1812,0.0866],[0.1812,0.0787],[0.1812,0.0709],[0.1812,0.063],[0.1812,0.0551],[0.1812,0.0472],[0.1812,0.0394],[0.1812,0.0315],[0.1812,0.0236],[0.1812,0.0157],[0.1812,0.0079],[0.1812,0],[0.189,0.9999],[0.189,0.9921],[0.189,0.9842],[0.189,0.9763],[0.189,0.9684],[0.189,0.9606],[0.189,0.9527],[0.189,0.9448],[0.189,0.937],[0.189,0.9291],[0.189,0.9212],[0.189,0.9133],[0.189,0.9055],[0.189,0.8976],[0.189,0.8897],[0.189,0.8818],[0.189,0.874],[0.189,0.8661],[0.189,0.8582],[0.189,0.8503],[0.189,0.8425],[0.189,0.8346],[0.189,0.8267],[0.189,0.8188],[0.189,0.811],[0.189,0.8031],[0.189,0.7952],[0.189,0.7874],[0.189,0.7795],[0.189,0.7716],[0.189,0.7637],[0.189,0.7559],[0.189,0.748],[0.189,0.7401],[0.189,0.7322],[0.189,0.7244],[0.189,0.7165],[0.189,0.7086],[0.189,0.7007],[0.189,0.6929],[0.189,0.685],[0.189,0.6771],[0.189,0.6693],[0.189,0.6614],[0.189,0.6535],[0.189,0.6456],[0.189,0.6378],[0.189,0.6299],[0.189,0.622],[0.189,0.6141],[0.189,0.6063],[0.189,0.5984],[0.189,0.5905],[0.189,0.5826],[0.189,0.5748],[0.189,0.5669],[0.189,0.559],[0.189,0.5511],[0.189,0.5433],[0.189,0.5354],[0.189,0.5275],[0.189,0.5197],[0.189,0.5118],[0.189,0.5039],[0.189,0.496],[0.189,0.4882],[0.189,0.4803],[0.189,0.4724],[0.189,0.4645],[0.189,0.4567],[0.189,0.4488],[0.189,0.4409],[0.189,0.433],[0.189,0.4252],[0.189,0.4173],[0.189,0.4094],[0.189,0.4016],[0.189,0.3937],[0.189,0.3858],[0.189,0.3779],[0.189,0.3701],[0.189,0.3622],[0.189,0.3543],[0.189,0.3464],[0.189,0.3386],[0.189,0.3307],[0.189,0.3228],[0.189,0.3149],[0.189,0.3071],[0.189,0.2992],[0.189,0.2913],[0.189,0.2834],[0.189,0.2756],[0.189,0.2677],[0.189,0.2598],[0.189,0.252],[0.189,0.2441],[0.189,0.2362],[0.189,0.2283],[0.189,0.2205],[0.189,0.2126],[0.189,0.2047],[0.189,0.1968],[0.189,0.189],[0.189,0.1811],[0.189,0.1732],[0.189,0.1653],[0.189,0.1575],[0.189,0.1496],[0.189,0.1417],[0.189,0.1339],[0.189,0.126],[0.189,0.1181],[0.189,0.1102],[0.189,0.1024],[0.189,0.0945],[0.189,0.0866],[0.189,0.0787],[0.189,0.0709],[0.189,0.063],[0.189,0.0551],[0.189,0.0472],[0.189,0.0394],[0.189,0.0315],[0.189,0.0236],[0.189,0.0157],[0.189,0.0079],[0.189,0],[0.1969,0.9999],[0.1969,0.9921],[0.1969,0.9842],[0.1969,0.9763],[0.1969,0.9684],[0.1969,0.9606],[0.1969,0.9527],[0.1969,0.9448],[0.1969,0.937],[0.1969,0.9291],[0.1969,0.9212],[0.1969,0.9133],[0.1969,0.9055],[0.1969,0.8976],[0.1969,0.8897],[0.1969,0.8818],[0.1969,0.874],[0.1969,0.8661],[0.1969,0.8582],[0.1969,0.8503],[0.1969,0.8425],[0.1969,0.8346],[0.1969,0.8267],[0.1969,0.8188],[0.1969,0.811],[0.1969,0.8031],[0.1969,0.7952],[0.1969,0.7874],[0.1969,0.7795],[0.1969,0.7716],[0.1969,0.7637],[0.1969,0.7559],[0.1969,0.748],[0.1969,0.7401],[0.1969,0.7322],[0.1969,0.7244],[0.1969,0.7165],[0.1969,0.7086],[0.1969,0.7007],[0.1969,0.6929],[0.1969,0.685],[0.1969,0.6771],[0.1969,0.6693],[0.1969,0.6614],[0.1969,0.6535],[0.1969,0.6456],[0.1969,0.6378],[0.1969,0.6299],[0.1969,0.622],[0.1969,0.6141],[0.1969,0.6063],[0.1969,0.5984],[0.1969,0.5905],[0.1969,0.5826],[0.1969,0.5748],[0.1969,0.5669],[0.1969,0.559],[0.1969,0.5511],[0.1969,0.5433],[0.1969,0.5354],[0.1969,0.5275],[0.1969,0.5197],[0.1969,0.5118],[0.1969,0.5039],[0.1969,0.496],[0.1969,0.4882],[0.1969,0.4803],[0.1969,0.4724],[0.1969,0.4645],[0.1969,0.4567],[0.1969,0.4488],[0.1969,0.4409],[0.1969,0.433],[0.1969,0.4252],[0.1969,0.4173],[0.1969,0.4094],[0.1969,0.4016],[0.1969,0.3937],[0.1969,0.3858],[0.1969,0.3779],[0.1969,0.3701],[0.1969,0.3622],[0.1969,0.3543],[0.1969,0.3464],[0.1969,0.3386],[0.1969,0.3307],[0.1969,0.3228],[0.1969,0.3149],[0.1969,0.3071],[0.1969,0.2992],[0.1969,0.2913],[0.1969,0.2834],[0.1969,0.2756],[0.1969,0.2677],[0.1969,0.2598],[0.1969,0.252],[0.1969,0.2441],[0.1969,0.2362],[0.1969,0.2283],[0.1969,0.2205],[0.1969,0.2126],[0.1969,0.2047],[0.1969,0.1968],[0.1969,0.189],[0.1969,0.1811],[0.1969,0.1732],[0.1969,0.1653],[0.1969,0.1575],[0.1969,0.1496],[0.1969,0.1417],[0.1969,0.1339],[0.1969,0.126],[0.1969,0.1181],[0.1969,0.1102],[0.1969,0.1024],[0.1969,0.0945],[0.1969,0.0866],[0.1969,0.0787],[0.1969,0.0709],[0.1969,0.063],[0.1969,0.0551],[0.1969,0.0472],[0.1969,0.0394],[0.1969,0.0315],[0.1969,0.0236],[0.1969,0.0157],[0.1969,0.0079],[0.1969,0],[0.2048,0.9999],[0.2048,0.9921],[0.2048,0.9842],[0.2048,0.9763],[0.2048,0.9684],[0.2048,0.9606],[0.2048,0.9527],[0.2048,0.9448],[0.2048,0.937],[0.2048,0.9291],[0.2048,0.9212],[0.2048,0.9133],[0.2048,0.9055],[0.2048,0.8976],[0.2048,0.8897],[0.2048,0.8818],[0.2048,0.874],[0.2048,0.8661],[0.2048,0.8582],[0.2048,0.8503],[0.2048,0.8425],[0.2048,0.8346],[0.2048,0.8267],[0.2048,0.8188],[0.2048,0.811],[0.2048,0.8031],[0.2048,0.7952],[0.2048,0.7874],[0.2048,0.7795],[0.2048,0.7716],[0.2048,0.7637],[0.2048,0.7559],[0.2048,0.748],[0.2048,0.7401],[0.2048,0.7322],[0.2048,0.7244],[0.2048,0.7165],[0.2048,0.7086],[0.2048,0.7007],[0.2048,0.6929],[0.2048,0.685],[0.2048,0.6771],[0.2048,0.6693],[0.2048,0.6614],[0.2048,0.6535],[0.2048,0.6456],[0.2048,0.6378],[0.2048,0.6299],[0.2048,0.622],[0.2048,0.6141],[0.2048,0.6063],[0.2048,0.5984],[0.2048,0.5905],[0.2048,0.5826],[0.2048,0.5748],[0.2048,0.5669],[0.2048,0.559],[0.2048,0.5511],[0.2048,0.5433],[0.2048,0.5354],[0.2048,0.5275],[0.2048,0.5197],[0.2048,0.5118],[0.2048,0.5039],[0.2048,0.496],[0.2048,0.4882],[0.2048,0.4803],[0.2048,0.4724],[0.2048,0.4645],[0.2048,0.4567],[0.2048,0.4488],[0.2048,0.4409],[0.2048,0.433],[0.2048,0.4252],[0.2048,0.4173],[0.2048,0.4094],[0.2048,0.4016],[0.2048,0.3937],[0.2048,0.3858],[0.2048,0.3779],[0.2048,0.3701],[0.2048,0.3622],[0.2048,0.3543],[0.2048,0.3464],[0.2048,0.3386],[0.2048,0.3307],[0.2048,0.3228],[0.2048,0.3149],[0.2048,0.3071],[0.2048,0.2992],[0.2048,0.2913],[0.2048,0.2834],[0.2048,0.2756],[0.2048,0.2677],[0.2048,0.2598],[0.2048,0.252],[0.2048,0.2441],[0.2048,0.2362],[0.2048,0.2283],[0.2048,0.2205],[0.2048,0.2126],[0.2048,0.2047],[0.2048,0.1968],[0.2048,0.189],[0.2048,0.1811],[0.2048,0.1732],[0.2048,0.1653],[0.2048,0.1575],[0.2048,0.1496],[0.2048,0.1417],[0.2048,0.1339],[0.2048,0.126],[0.2048,0.1181],[0.2048,0.1102],[0.2048,0.1024],[0.2048,0.0945],[0.2048,0.0866],[0.2048,0.0787],[0.2048,0.0709],[0.2048,0.063],[0.2048,0.0551],[0.2048,0.0472],[0.2048,0.0394],[0.2048,0.0315],[0.2048,0.0236],[0.2048,0.0157],[0.2048,0.0079],[0.2048,0],[0.2126,0.9999],[0.2126,0.9921],[0.2126,0.9842],[0.2126,0.9763],[0.2126,0.9684],[0.2126,0.9606],[0.2126,0.9527],[0.2126,0.9448],[0.2126,0.937],[0.2126,0.9291],[0.2126,0.9212],[0.2126,0.9133],[0.2126,0.9055],[0.2126,0.8976],[0.2126,0.8897],[0.2126,0.8818],[0.2126,0.874],[0.2126,0.8661],[0.2126,0.8582],[0.2126,0.8503],[0.2126,0.8425],[0.2126,0.8346],[0.2126,0.8267],[0.2126,0.8188],[0.2126,0.811],[0.2126,0.8031],[0.2126,0.7952],[0.2126,0.7874],[0.2126,0.7795],[0.2126,0.7716],[0.2126,0.7637],[0.2126,0.7559],[0.2126,0.748],[0.2126,0.7401],[0.2126,0.7322],[0.2126,0.7244],[0.2126,0.7165],[0.2126,0.7086],[0.2126,0.7007],[0.2126,0.6929],[0.2126,0.685],[0.2126,0.6771],[0.2126,0.6693],[0.2126,0.6614],[0.2126,0.6535],[0.2126,0.6456],[0.2126,0.6378],[0.2126,0.6299],[0.2126,0.622],[0.2126,0.6141],[0.2126,0.6063],[0.2126,0.5984],[0.2126,0.5905],[0.2126,0.5826],[0.2126,0.5748],[0.2126,0.5669],[0.2126,0.559],[0.2126,0.5511],[0.2126,0.5433],[0.2126,0.5354],[0.2126,0.5275],[0.2126,0.5197],[0.2126,0.5118],[0.2126,0.5039],[0.2126,0.496],[0.2126,0.4882],[0.2126,0.4803],[0.2126,0.4724],[0.2126,0.4645],[0.2126,0.4567],[0.2126,0.4488],[0.2126,0.4409],[0.2126,0.433],[0.2126,0.4252],[0.2126,0.4173],[0.2126,0.4094],[0.2126,0.4016],[0.2126,0.3937],[0.2126,0.3858],[0.2126,0.3779],[0.2126,0.3701],[0.2126,0.3622],[0.2126,0.3543],[0.2126,0.3464],[0.2126,0.3386],[0.2126,0.3307],[0.2126,0.3228],[0.2126,0.3149],[0.2126,0.3071],[0.2126,0.2992],[0.2126,0.2913],[0.2126,0.2834],[0.2126,0.2756],[0.2126,0.2677],[0.2126,0.2598],[0.2126,0.252],[0.2126,0.2441],[0.2126,0.2362],[0.2126,0.2283],[0.2126,0.2205],[0.2126,0.2126],[0.2126,0.2047],[0.2126,0.1968],[0.2126,0.189],[0.2126,0.1811],[0.2126,0.1732],[0.2126,0.1653],[0.2126,0.1575],[0.2126,0.1496],[0.2126,0.1417],[0.2126,0.1339],[0.2126,0.126],[0.2126,0.1181],[0.2126,0.1102],[0.2126,0.1024],[0.2126,0.0945],[0.2126,0.0866],[0.2126,0.0787],[0.2126,0.0709],[0.2126,0.063],[0.2126,0.0551],[0.2126,0.0472],[0.2126,0.0394],[0.2126,0.0315],[0.2126,0.0236],[0.2126,0.0157],[0.2126,0.0079],[0.2126,0],[0.2205,0.9999],[0.2205,0.9921],[0.2205,0.9842],[0.2205,0.9763],[0.2205,0.9684],[0.2205,0.9606],[0.2205,0.9527],[0.2205,0.9448],[0.2205,0.937],[0.2205,0.9291],[0.2205,0.9212],[0.2205,0.9133],[0.2205,0.9055],[0.2205,0.8976],[0.2205,0.8897],[0.2205,0.8818],[0.2205,0.874],[0.2205,0.8661],[0.2205,0.8582],[0.2205,0.8503],[0.2205,0.8425],[0.2205,0.8346],[0.2205,0.8267],[0.2205,0.8188],[0.2205,0.811],[0.2205,0.8031],[0.2205,0.7952],[0.2205,0.7874],[0.2205,0.7795],[0.2205,0.7716],[0.2205,0.7637],[0.2205,0.7559],[0.2205,0.748],[0.2205,0.7401],[0.2205,0.7322],[0.2205,0.7244],[0.2205,0.7165],[0.2205,0.7086],[0.2205,0.7007],[0.2205,0.6929],[0.2205,0.685],[0.2205,0.6771],[0.2205,0.6693],[0.2205,0.6614],[0.2205,0.6535],[0.2205,0.6456],[0.2205,0.6378],[0.2205,0.6299],[0.2205,0.622],[0.2205,0.6141],[0.2205,0.6063],[0.2205,0.5984],[0.2205,0.5905],[0.2205,0.5826],[0.2205,0.5748],[0.2205,0.5669],[0.2205,0.559],[0.2205,0.5511],[0.2205,0.5433],[0.2205,0.5354],[0.2205,0.5275],[0.2205,0.5197],[0.2205,0.5118],[0.2205,0.5039],[0.2205,0.496],[0.2205,0.4882],[0.2205,0.4803],[0.2205,0.4724],[0.2205,0.4645],[0.2205,0.4567],[0.2205,0.4488],[0.2205,0.4409],[0.2205,0.433],[0.2205,0.4252],[0.2205,0.4173],[0.2205,0.4094],[0.2205,0.4016],[0.2205,0.3937],[0.2205,0.3858],[0.2205,0.3779],[0.2205,0.3701],[0.2205,0.3622],[0.2205,0.3543],[0.2205,0.3464],[0.2205,0.3386],[0.2205,0.3307],[0.2205,0.3228],[0.2205,0.3149],[0.2205,0.3071],[0.2205,0.2992],[0.2205,0.2913],[0.2205,0.2834],[0.2205,0.2756],[0.2205,0.2677],[0.2205,0.2598],[0.2205,0.252],[0.2205,0.2441],[0.2205,0.2362],[0.2205,0.2283],[0.2205,0.2205],[0.2205,0.2126],[0.2205,0.2047],[0.2205,0.1968],[0.2205,0.189],[0.2205,0.1811],[0.2205,0.1732],[0.2205,0.1653],[0.2205,0.1575],[0.2205,0.1496],[0.2205,0.1417],[0.2205,0.1339],[0.2205,0.126],[0.2205,0.1181],[0.2205,0.1102],[0.2205,0.1024],[0.2205,0.0945],[0.2205,0.0866],[0.2205,0.0787],[0.2205,0.0709],[0.2205,0.063],[0.2205,0.0551],[0.2205,0.0472],[0.2205,0.0394],[0.2205,0.0315],[0.2205,0.0236],[0.2205,0.0157],[0.2205,0.0079],[0.2205,0],[0.2284,0.9999],[0.2284,0.9921],[0.2284,0.9842],[0.2284,0.9763],[0.2284,0.9684],[0.2284,0.9606],[0.2284,0.9527],[0.2284,0.9448],[0.2284,0.937],[0.2284,0.9291],[0.2284,0.9212],[0.2284,0.9133],[0.2284,0.9055],[0.2284,0.8976],[0.2284,0.8897],[0.2284,0.8818],[0.2284,0.874],[0.2284,0.8661],[0.2284,0.8582],[0.2284,0.8503],[0.2284,0.8425],[0.2284,0.8346],[0.2284,0.8267],[0.2284,0.8188],[0.2284,0.811],[0.2284,0.8031],[0.2284,0.7952],[0.2284,0.7874],[0.2284,0.7795],[0.2284,0.7716],[0.2284,0.7637],[0.2284,0.7559],[0.2284,0.748],[0.2284,0.7401],[0.2284,0.7322],[0.2284,0.7244],[0.2284,0.7165],[0.2284,0.7086],[0.2284,0.7007],[0.2284,0.6929],[0.2284,0.685],[0.2284,0.6771],[0.2284,0.6693],[0.2284,0.6614],[0.2284,0.6535],[0.2284,0.6456],[0.2284,0.6378],[0.2284,0.6299],[0.2284,0.622],[0.2284,0.6141],[0.2284,0.6063],[0.2284,0.5984],[0.2284,0.5905],[0.2284,0.5826],[0.2284,0.5748],[0.2284,0.5669],[0.2284,0.559],[0.2284,0.5511],[0.2284,0.5433],[0.2284,0.5354],[0.2284,0.5275],[0.2284,0.5197],[0.2284,0.5118],[0.2284,0.5039],[0.2284,0.496],[0.2284,0.4882],[0.2284,0.4803],[0.2284,0.4724],[0.2284,0.4645],[0.2284,0.4567],[0.2284,0.4488],[0.2284,0.4409],[0.2284,0.433],[0.2284,0.4252],[0.2284,0.4173],[0.2284,0.4094],[0.2284,0.4016],[0.2284,0.3937],[0.2284,0.3858],[0.2284,0.3779],[0.2284,0.3701],[0.2284,0.3622],[0.2284,0.3543],[0.2284,0.3464],[0.2284,0.3386],[0.2284,0.3307],[0.2284,0.3228],[0.2284,0.3149],[0.2284,0.3071],[0.2284,0.2992],[0.2284,0.2913],[0.2284,0.2834],[0.2284,0.2756],[0.2284,0.2677],[0.2284,0.2598],[0.2284,0.252],[0.2284,0.2441],[0.2284,0.2362],[0.2284,0.2283],[0.2284,0.2205],[0.2284,0.2126],[0.2284,0.2047],[0.2284,0.1968],[0.2284,0.189],[0.2284,0.1811],[0.2284,0.1732],[0.2284,0.1653],[0.2284,0.1575],[0.2284,0.1496],[0.2284,0.1417],[0.2284,0.1339],[0.2284,0.126],[0.2284,0.1181],[0.2284,0.1102],[0.2284,0.1024],[0.2284,0.0945],[0.2284,0.0866],[0.2284,0.0787],[0.2284,0.0709],[0.2284,0.063],[0.2284,0.0551],[0.2284,0.0472],[0.2284,0.0394],[0.2284,0.0315],[0.2284,0.0236],[0.2284,0.0157],[0.2284,0.0079],[0.2284,0],[0.2363,0.9999],[0.2363,0.9921],[0.2363,0.9842],[0.2363,0.9763],[0.2363,0.9684],[0.2363,0.9606],[0.2363,0.9527],[0.2363,0.9448],[0.2363,0.937],[0.2363,0.9291],[0.2363,0.9212],[0.2363,0.9133],[0.2363,0.9055],[0.2363,0.8976],[0.2363,0.8897],[0.2363,0.8818],[0.2363,0.874],[0.2363,0.8661],[0.2363,0.8582],[0.2363,0.8503],[0.2363,0.8425],[0.2363,0.8346],[0.2363,0.8267],[0.2363,0.8188],[0.2363,0.811],[0.2363,0.8031],[0.2363,0.7952],[0.2363,0.7874],[0.2363,0.7795],[0.2363,0.7716],[0.2363,0.7637],[0.2363,0.7559],[0.2363,0.748],[0.2363,0.7401],[0.2363,0.7322],[0.2363,0.7244],[0.2363,0.7165],[0.2363,0.7086],[0.2363,0.7007],[0.2363,0.6929],[0.2363,0.685],[0.2363,0.6771],[0.2363,0.6693],[0.2363,0.6614],[0.2363,0.6535],[0.2363,0.6456],[0.2363,0.6378],[0.2363,0.6299],[0.2363,0.622],[0.2363,0.6141],[0.2363,0.6063],[0.2363,0.5984],[0.2363,0.5905],[0.2363,0.5826],[0.2363,0.5748],[0.2363,0.5669],[0.2363,0.559],[0.2363,0.5511],[0.2363,0.5433],[0.2363,0.5354],[0.2363,0.5275],[0.2363,0.5197],[0.2363,0.5118],[0.2363,0.5039],[0.2363,0.496],[0.2363,0.4882],[0.2363,0.4803],[0.2363,0.4724],[0.2363,0.4645],[0.2363,0.4567],[0.2363,0.4488],[0.2363,0.4409],[0.2363,0.433],[0.2363,0.4252],[0.2363,0.4173],[0.2363,0.4094],[0.2363,0.4016],[0.2363,0.3937],[0.2363,0.3858],[0.2363,0.3779],[0.2363,0.3701],[0.2363,0.3622],[0.2363,0.3543],[0.2363,0.3464],[0.2363,0.3386],[0.2363,0.3307],[0.2363,0.3228],[0.2363,0.3149],[0.2363,0.3071],[0.2363,0.2992],[0.2363,0.2913],[0.2363,0.2834],[0.2363,0.2756],[0.2363,0.2677],[0.2363,0.2598],[0.2363,0.252],[0.2363,0.2441],[0.2363,0.2362],[0.2363,0.2283],[0.2363,0.2205],[0.2363,0.2126],[0.2363,0.2047],[0.2363,0.1968],[0.2363,0.189],[0.2363,0.1811],[0.2363,0.1732],[0.2363,0.1653],[0.2363,0.1575],[0.2363,0.1496],[0.2363,0.1417],[0.2363,0.1339],[0.2363,0.126],[0.2363,0.1181],[0.2363,0.1102],[0.2363,0.1024],[0.2363,0.0945],[0.2363,0.0866],[0.2363,0.0787],[0.2363,0.0709],[0.2363,0.063],[0.2363,0.0551],[0.2363,0.0472],[0.2363,0.0394],[0.2363,0.0315],[0.2363,0.0236],[0.2363,0.0157],[0.2363,0.0079],[0.2363,0],[0.2441,0.9999],[0.2441,0.9921],[0.2441,0.9842],[0.2441,0.9763],[0.2441,0.9684],[0.2441,0.9606],[0.2441,0.9527],[0.2441,0.9448],[0.2441,0.937],[0.2441,0.9291],[0.2441,0.9212],[0.2441,0.9133],[0.2441,0.9055],[0.2441,0.8976],[0.2441,0.8897],[0.2441,0.8818],[0.2441,0.874],[0.2441,0.8661],[0.2441,0.8582],[0.2441,0.8503],[0.2441,0.8425],[0.2441,0.8346],[0.2441,0.8267],[0.2441,0.8188],[0.2441,0.811],[0.2441,0.8031],[0.2441,0.7952],[0.2441,0.7874],[0.2441,0.7795],[0.2441,0.7716],[0.2441,0.7637],[0.2441,0.7559],[0.2441,0.748],[0.2441,0.7401],[0.2441,0.7322],[0.2441,0.7244],[0.2441,0.7165],[0.2441,0.7086],[0.2441,0.7007],[0.2441,0.6929],[0.2441,0.685],[0.2441,0.6771],[0.2441,0.6693],[0.2441,0.6614],[0.2441,0.6535],[0.2441,0.6456],[0.2441,0.6378],[0.2441,0.6299],[0.2441,0.622],[0.2441,0.6141],[0.2441,0.6063],[0.2441,0.5984],[0.2441,0.5905],[0.2441,0.5826],[0.2441,0.5748],[0.2441,0.5669],[0.2441,0.559],[0.2441,0.5511],[0.2441,0.5433],[0.2441,0.5354],[0.2441,0.5275],[0.2441,0.5197],[0.2441,0.5118],[0.2441,0.5039],[0.2441,0.496],[0.2441,0.4882],[0.2441,0.4803],[0.2441,0.4724],[0.2441,0.4645],[0.2441,0.4567],[0.2441,0.4488],[0.2441,0.4409],[0.2441,0.433],[0.2441,0.4252],[0.2441,0.4173],[0.2441,0.4094],[0.2441,0.4016],[0.2441,0.3937],[0.2441,0.3858],[0.2441,0.3779],[0.2441,0.3701],[0.2441,0.3622],[0.2441,0.3543],[0.2441,0.3464],[0.2441,0.3386],[0.2441,0.3307],[0.2441,0.3228],[0.2441,0.3149],[0.2441,0.3071],[0.2441,0.2992],[0.2441,0.2913],[0.2441,0.2834],[0.2441,0.2756],[0.2441,0.2677],[0.2441,0.2598],[0.2441,0.252],[0.2441,0.2441],[0.2441,0.2362],[0.2441,0.2283],[0.2441,0.2205],[0.2441,0.2126],[0.2441,0.2047],[0.2441,0.1968],[0.2441,0.189],[0.2441,0.1811],[0.2441,0.1732],[0.2441,0.1653],[0.2441,0.1575],[0.2441,0.1496],[0.2441,0.1417],[0.2441,0.1339],[0.2441,0.126],[0.2441,0.1181],[0.2441,0.1102],[0.2441,0.1024],[0.2441,0.0945],[0.2441,0.0866],[0.2441,0.0787],[0.2441,0.0709],[0.2441,0.063],[0.2441,0.0551],[0.2441,0.0472],[0.2441,0.0394],[0.2441,0.0315],[0.2441,0.0236],[0.2441,0.0157],[0.2441,0.0079],[0.2441,0],[0.252,0.9999],[0.252,0.9921],[0.252,0.9842],[0.252,0.9763],[0.252,0.9684],[0.252,0.9606],[0.252,0.9527],[0.252,0.9448],[0.252,0.937],[0.252,0.9291],[0.252,0.9212],[0.252,0.9133],[0.252,0.9055],[0.252,0.8976],[0.252,0.8897],[0.252,0.8818],[0.252,0.874],[0.252,0.8661],[0.252,0.8582],[0.252,0.8503],[0.252,0.8425],[0.252,0.8346],[0.252,0.8267],[0.252,0.8188],[0.252,0.811],[0.252,0.8031],[0.252,0.7952],[0.252,0.7874],[0.252,0.7795],[0.252,0.7716],[0.252,0.7637],[0.252,0.7559],[0.252,0.748],[0.252,0.7401],[0.252,0.7322],[0.252,0.7244],[0.252,0.7165],[0.252,0.7086],[0.252,0.7007],[0.252,0.6929],[0.252,0.685],[0.252,0.6771],[0.252,0.6693],[0.252,0.6614],[0.252,0.6535],[0.252,0.6456],[0.252,0.6378],[0.252,0.6299],[0.252,0.622],[0.252,0.6141],[0.252,0.6063],[0.252,0.5984],[0.252,0.5905],[0.252,0.5826],[0.252,0.5748],[0.252,0.5669],[0.252,0.559],[0.252,0.5511],[0.252,0.5433],[0.252,0.5354],[0.252,0.5275],[0.252,0.5197],[0.252,0.5118],[0.252,0.5039],[0.252,0.496],[0.252,0.4882],[0.252,0.4803],[0.252,0.4724],[0.252,0.4645],[0.252,0.4567],[0.252,0.4488],[0.252,0.4409],[0.252,0.433],[0.252,0.4252],[0.252,0.4173],[0.252,0.4094],[0.252,0.4016],[0.252,0.3937],[0.252,0.3858],[0.252,0.3779],[0.252,0.3701],[0.252,0.3622],[0.252,0.3543],[0.252,0.3464],[0.252,0.3386],[0.252,0.3307],[0.252,0.3228],[0.252,0.3149],[0.252,0.3071],[0.252,0.2992],[0.252,0.2913],[0.252,0.2834],[0.252,0.2756],[0.252,0.2677],[0.252,0.2598],[0.252,0.252],[0.252,0.2441],[0.252,0.2362],[0.252,0.2283],[0.252,0.2205],[0.252,0.2126],[0.252,0.2047],[0.252,0.1968],[0.252,0.189],[0.252,0.1811],[0.252,0.1732],[0.252,0.1653],[0.252,0.1575],[0.252,0.1496],[0.252,0.1417],[0.252,0.1339],[0.252,0.126],[0.252,0.1181],[0.252,0.1102],[0.252,0.1024],[0.252,0.0945],[0.252,0.0866],[0.252,0.0787],[0.252,0.0709],[0.252,0.063],[0.252,0.0551],[0.252,0.0472],[0.252,0.0394],[0.252,0.0315],[0.252,0.0236],[0.252,0.0157],[0.252,0.0079],[0.252,0],[0.2599,0.9999],[0.2599,0.9921],[0.2599,0.9842],[0.2599,0.9763],[0.2599,0.9684],[0.2599,0.9606],[0.2599,0.9527],[0.2599,0.9448],[0.2599,0.937],[0.2599,0.9291],[0.2599,0.9212],[0.2599,0.9133],[0.2599,0.9055],[0.2599,0.8976],[0.2599,0.8897],[0.2599,0.8818],[0.2599,0.874],[0.2599,0.8661],[0.2599,0.8582],[0.2599,0.8503],[0.2599,0.8425],[0.2599,0.8346],[0.2599,0.8267],[0.2599,0.8188],[0.2599,0.811],[0.2599,0.8031],[0.2599,0.7952],[0.2599,0.7874],[0.2599,0.7795],[0.2599,0.7716],[0.2599,0.7637],[0.2599,0.7559],[0.2599,0.748],[0.2599,0.7401],[0.2599,0.7322],[0.2599,0.7244],[0.2599,0.7165],[0.2599,0.7086],[0.2599,0.7007],[0.2599,0.6929],[0.2599,0.685],[0.2599,0.6771],[0.2599,0.6693],[0.2599,0.6614],[0.2599,0.6535],[0.2599,0.6456],[0.2599,0.6378],[0.2599,0.6299],[0.2599,0.622],[0.2599,0.6141],[0.2599,0.6063],[0.2599,0.5984],[0.2599,0.5905],[0.2599,0.5826],[0.2599,0.5748],[0.2599,0.5669],[0.2599,0.559],[0.2599,0.5511],[0.2599,0.5433],[0.2599,0.5354],[0.2599,0.5275],[0.2599,0.5197],[0.2599,0.5118],[0.2599,0.5039],[0.2599,0.496],[0.2599,0.4882],[0.2599,0.4803],[0.2599,0.4724],[0.2599,0.4645],[0.2599,0.4567],[0.2599,0.4488],[0.2599,0.4409],[0.2599,0.433],[0.2599,0.4252],[0.2599,0.4173],[0.2599,0.4094],[0.2599,0.4016],[0.2599,0.3937],[0.2599,0.3858],[0.2599,0.3779],[0.2599,0.3701],[0.2599,0.3622],[0.2599,0.3543],[0.2599,0.3464],[0.2599,0.3386],[0.2599,0.3307],[0.2599,0.3228],[0.2599,0.3149],[0.2599,0.3071],[0.2599,0.2992],[0.2599,0.2913],[0.2599,0.2834],[0.2599,0.2756],[0.2599,0.2677],[0.2599,0.2598],[0.2599,0.252],[0.2599,0.2441],[0.2599,0.2362],[0.2599,0.2283],[0.2599,0.2205],[0.2599,0.2126],[0.2599,0.2047],[0.2599,0.1968],[0.2599,0.189],[0.2599,0.1811],[0.2599,0.1732],[0.2599,0.1653],[0.2599,0.1575],[0.2599,0.1496],[0.2599,0.1417],[0.2599,0.1339],[0.2599,0.126],[0.2599,0.1181],[0.2599,0.1102],[0.2599,0.1024],[0.2599,0.0945],[0.2599,0.0866],[0.2599,0.0787],[0.2599,0.0709],[0.2599,0.063],[0.2599,0.0551],[0.2599,0.0472],[0.2599,0.0394],[0.2599,0.0315],[0.2599,0.0236],[0.2599,0.0157],[0.2599,0.0079],[0.2599,0],[0.2678,0.9999],[0.2678,0.9921],[0.2678,0.9842],[0.2678,0.9763],[0.2678,0.9684],[0.2678,0.9606],[0.2678,0.9527],[0.2678,0.9448],[0.2678,0.937],[0.2678,0.9291],[0.2678,0.9212],[0.2678,0.9133],[0.2678,0.9055],[0.2678,0.8976],[0.2678,0.8897],[0.2678,0.8818],[0.2678,0.874],[0.2678,0.8661],[0.2678,0.8582],[0.2678,0.8503],[0.2678,0.8425],[0.2678,0.8346],[0.2678,0.8267],[0.2678,0.8188],[0.2678,0.811],[0.2678,0.8031],[0.2678,0.7952],[0.2678,0.7874],[0.2678,0.7795],[0.2678,0.7716],[0.2678,0.7637],[0.2678,0.7559],[0.2678,0.748],[0.2678,0.7401],[0.2678,0.7322],[0.2678,0.7244],[0.2678,0.7165],[0.2678,0.7086],[0.2678,0.7007],[0.2678,0.6929],[0.2678,0.685],[0.2678,0.6771],[0.2678,0.6693],[0.2678,0.6614],[0.2678,0.6535],[0.2678,0.6456],[0.2678,0.6378],[0.2678,0.6299],[0.2678,0.622],[0.2678,0.6141],[0.2678,0.6063],[0.2678,0.5984],[0.2678,0.5905],[0.2678,0.5826],[0.2678,0.5748],[0.2678,0.5669],[0.2678,0.559],[0.2678,0.5511],[0.2678,0.5433],[0.2678,0.5354],[0.2678,0.5275],[0.2678,0.5197],[0.2678,0.5118],[0.2678,0.5039],[0.2678,0.496],[0.2678,0.4882],[0.2678,0.4803],[0.2678,0.4724],[0.2678,0.4645],[0.2678,0.4567],[0.2678,0.4488],[0.2678,0.4409],[0.2678,0.433],[0.2678,0.4252],[0.2678,0.4173],[0.2678,0.4094],[0.2678,0.4016],[0.2678,0.3937],[0.2678,0.3858],[0.2678,0.3779],[0.2678,0.3701],[0.2678,0.3622],[0.2678,0.3543],[0.2678,0.3464],[0.2678,0.3386],[0.2678,0.3307],[0.2678,0.3228],[0.2678,0.3149],[0.2678,0.3071],[0.2678,0.2992],[0.2678,0.2913],[0.2678,0.2834],[0.2678,0.2756],[0.2678,0.2677],[0.2678,0.2598],[0.2678,0.252],[0.2678,0.2441],[0.2678,0.2362],[0.2678,0.2283],[0.2678,0.2205],[0.2678,0.2126],[0.2678,0.2047],[0.2678,0.1968],[0.2678,0.189],[0.2678,0.1811],[0.2678,0.1732],[0.2678,0.1653],[0.2678,0.1575],[0.2678,0.1496],[0.2678,0.1417],[0.2678,0.1339],[0.2678,0.126],[0.2678,0.1181],[0.2678,0.1102],[0.2678,0.1024],[0.2678,0.0945],[0.2678,0.0866],[0.2678,0.0787],[0.2678,0.0709],[0.2678,0.063],[0.2678,0.0551],[0.2678,0.0472],[0.2678,0.0394],[0.2678,0.0315],[0.2678,0.0236],[0.2678,0.0157],[0.2678,0.0079],[0.2678,0],[0.2756,0.9999],[0.2756,0.9921],[0.2756,0.9842],[0.2756,0.9763],[0.2756,0.9684],[0.2756,0.9606],[0.2756,0.9527],[0.2756,0.9448],[0.2756,0.937],[0.2756,0.9291],[0.2756,0.9212],[0.2756,0.9133],[0.2756,0.9055],[0.2756,0.8976],[0.2756,0.8897],[0.2756,0.8818],[0.2756,0.874],[0.2756,0.8661],[0.2756,0.8582],[0.2756,0.8503],[0.2756,0.8425],[0.2756,0.8346],[0.2756,0.8267],[0.2756,0.8188],[0.2756,0.811],[0.2756,0.8031],[0.2756,0.7952],[0.2756,0.7874],[0.2756,0.7795],[0.2756,0.7716],[0.2756,0.7637],[0.2756,0.7559],[0.2756,0.748],[0.2756,0.7401],[0.2756,0.7322],[0.2756,0.7244],[0.2756,0.7165],[0.2756,0.7086],[0.2756,0.7007],[0.2756,0.6929],[0.2756,0.685],[0.2756,0.6771],[0.2756,0.6693],[0.2756,0.6614],[0.2756,0.6535],[0.2756,0.6456],[0.2756,0.6378],[0.2756,0.6299],[0.2756,0.622],[0.2756,0.6141],[0.2756,0.6063],[0.2756,0.5984],[0.2756,0.5905],[0.2756,0.5826],[0.2756,0.5748],[0.2756,0.5669],[0.2756,0.559],[0.2756,0.5511],[0.2756,0.5433],[0.2756,0.5354],[0.2756,0.5275],[0.2756,0.5197],[0.2756,0.5118],[0.2756,0.5039],[0.2756,0.496],[0.2756,0.4882],[0.2756,0.4803],[0.2756,0.4724],[0.2756,0.4645],[0.2756,0.4567],[0.2756,0.4488],[0.2756,0.4409],[0.2756,0.433],[0.2756,0.4252],[0.2756,0.4173],[0.2756,0.4094],[0.2756,0.4016],[0.2756,0.3937],[0.2756,0.3858],[0.2756,0.3779],[0.2756,0.3701],[0.2756,0.3622],[0.2756,0.3543],[0.2756,0.3464],[0.2756,0.3386],[0.2756,0.3307],[0.2756,0.3228],[0.2756,0.3149],[0.2756,0.3071],[0.2756,0.2992],[0.2756,0.2913],[0.2756,0.2834],[0.2756,0.2756],[0.2756,0.2677],[0.2756,0.2598],[0.2756,0.252],[0.2756,0.2441],[0.2756,0.2362],[0.2756,0.2283],[0.2756,0.2205],[0.2756,0.2126],[0.2756,0.2047],[0.2756,0.1968],[0.2756,0.189],[0.2756,0.1811],[0.2756,0.1732],[0.2756,0.1653],[0.2756,0.1575],[0.2756,0.1496],[0.2756,0.1417],[0.2756,0.1339],[0.2756,0.126],[0.2756,0.1181],[0.2756,0.1102],[0.2756,0.1024],[0.2756,0.0945],[0.2756,0.0866],[0.2756,0.0787],[0.2756,0.0709],[0.2756,0.063],[0.2756,0.0551],[0.2756,0.0472],[0.2756,0.0394],[0.2756,0.0315],[0.2756,0.0236],[0.2756,0.0157],[0.2756,0.0079],[0.2756,0],[0.2835,0.9999],[0.2835,0.9921],[0.2835,0.9842],[0.2835,0.9763],[0.2835,0.9684],[0.2835,0.9606],[0.2835,0.9527],[0.2835,0.9448],[0.2835,0.937],[0.2835,0.9291],[0.2835,0.9212],[0.2835,0.9133],[0.2835,0.9055],[0.2835,0.8976],[0.2835,0.8897],[0.2835,0.8818],[0.2835,0.874],[0.2835,0.8661],[0.2835,0.8582],[0.2835,0.8503],[0.2835,0.8425],[0.2835,0.8346],[0.2835,0.8267],[0.2835,0.8188],[0.2835,0.811],[0.2835,0.8031],[0.2835,0.7952],[0.2835,0.7874],[0.2835,0.7795],[0.2835,0.7716],[0.2835,0.7637],[0.2835,0.7559],[0.2835,0.748],[0.2835,0.7401],[0.2835,0.7322],[0.2835,0.7244],[0.2835,0.7165],[0.2835,0.7086],[0.2835,0.7007],[0.2835,0.6929],[0.2835,0.685],[0.2835,0.6771],[0.2835,0.6693],[0.2835,0.6614],[0.2835,0.6535],[0.2835,0.6456],[0.2835,0.6378],[0.2835,0.6299],[0.2835,0.622],[0.2835,0.6141],[0.2835,0.6063],[0.2835,0.5984],[0.2835,0.5905],[0.2835,0.5826],[0.2835,0.5748],[0.2835,0.5669],[0.2835,0.559],[0.2835,0.5511],[0.2835,0.5433],[0.2835,0.5354],[0.2835,0.5275],[0.2835,0.5197],[0.2835,0.5118],[0.2835,0.5039],[0.2835,0.496],[0.2835,0.4882],[0.2835,0.4803],[0.2835,0.4724],[0.2835,0.4645],[0.2835,0.4567],[0.2835,0.4488],[0.2835,0.4409],[0.2835,0.433],[0.2835,0.4252],[0.2835,0.4173],[0.2835,0.4094],[0.2835,0.4016],[0.2835,0.3937],[0.2835,0.3858],[0.2835,0.3779],[0.2835,0.3701],[0.2835,0.3622],[0.2835,0.3543],[0.2835,0.3464],[0.2835,0.3386],[0.2835,0.3307],[0.2835,0.3228],[0.2835,0.3149],[0.2835,0.3071],[0.2835,0.2992],[0.2835,0.2913],[0.2835,0.2834],[0.2835,0.2756],[0.2835,0.2677],[0.2835,0.2598],[0.2835,0.252],[0.2835,0.2441],[0.2835,0.2362],[0.2835,0.2283],[0.2835,0.2205],[0.2835,0.2126],[0.2835,0.2047],[0.2835,0.1968],[0.2835,0.189],[0.2835,0.1811],[0.2835,0.1732],[0.2835,0.1653],[0.2835,0.1575],[0.2835,0.1496],[0.2835,0.1417],[0.2835,0.1339],[0.2835,0.126],[0.2835,0.1181],[0.2835,0.1102],[0.2835,0.1024],[0.2835,0.0945],[0.2835,0.0866],[0.2835,0.0787],[0.2835,0.0709],[0.2835,0.063],[0.2835,0.0551],[0.2835,0.0472],[0.2835,0.0394],[0.2835,0.0315],[0.2835,0.0236],[0.2835,0.0157],[0.2835,0.0079],[0.2835,0],[0.2914,0.9999],[0.2914,0.9921],[0.2914,0.9842],[0.2914,0.9763],[0.2914,0.9684],[0.2914,0.9606],[0.2914,0.9527],[0.2914,0.9448],[0.2914,0.937],[0.2914,0.9291],[0.2914,0.9212],[0.2914,0.9133],[0.2914,0.9055],[0.2914,0.8976],[0.2914,0.8897],[0.2914,0.8818],[0.2914,0.874],[0.2914,0.8661],[0.2914,0.8582],[0.2914,0.8503],[0.2914,0.8425],[0.2914,0.8346],[0.2914,0.8267],[0.2914,0.8188],[0.2914,0.811],[0.2914,0.8031],[0.2914,0.7952],[0.2914,0.7874],[0.2914,0.7795],[0.2914,0.7716],[0.2914,0.7637],[0.2914,0.7559],[0.2914,0.748],[0.2914,0.7401],[0.2914,0.7322],[0.2914,0.7244],[0.2914,0.7165],[0.2914,0.7086],[0.2914,0.7007],[0.2914,0.6929],[0.2914,0.685],[0.2914,0.6771],[0.2914,0.6693],[0.2914,0.6614],[0.2914,0.6535],[0.2914,0.6456],[0.2914,0.6378],[0.2914,0.6299],[0.2914,0.622],[0.2914,0.6141],[0.2914,0.6063],[0.2914,0.5984],[0.2914,0.5905],[0.2914,0.5826],[0.2914,0.5748],[0.2914,0.5669],[0.2914,0.559],[0.2914,0.5511],[0.2914,0.5433],[0.2914,0.5354],[0.2914,0.5275],[0.2914,0.5197],[0.2914,0.5118],[0.2914,0.5039],[0.2914,0.496],[0.2914,0.4882],[0.2914,0.4803],[0.2914,0.4724],[0.2914,0.4645],[0.2914,0.4567],[0.2914,0.4488],[0.2914,0.4409],[0.2914,0.433],[0.2914,0.4252],[0.2914,0.4173],[0.2914,0.4094],[0.2914,0.4016],[0.2914,0.3937],[0.2914,0.3858],[0.2914,0.3779],[0.2914,0.3701],[0.2914,0.3622],[0.2914,0.3543],[0.2914,0.3464],[0.2914,0.3386],[0.2914,0.3307],[0.2914,0.3228],[0.2914,0.3149],[0.2914,0.3071],[0.2914,0.2992],[0.2914,0.2913],[0.2914,0.2834],[0.2914,0.2756],[0.2914,0.2677],[0.2914,0.2598],[0.2914,0.252],[0.2914,0.2441],[0.2914,0.2362],[0.2914,0.2283],[0.2914,0.2205],[0.2914,0.2126],[0.2914,0.2047],[0.2914,0.1968],[0.2914,0.189],[0.2914,0.1811],[0.2914,0.1732],[0.2914,0.1653],[0.2914,0.1575],[0.2914,0.1496],[0.2914,0.1417],[0.2914,0.1339],[0.2914,0.126],[0.2914,0.1181],[0.2914,0.1102],[0.2914,0.1024],[0.2914,0.0945],[0.2914,0.0866],[0.2914,0.0787],[0.2914,0.0709],[0.2914,0.063],[0.2914,0.0551],[0.2914,0.0472],[0.2914,0.0394],[0.2914,0.0315],[0.2914,0.0236],[0.2914,0.0157],[0.2914,0.0079],[0.2914,0],[0.2993,0.9999],[0.2993,0.9921],[0.2993,0.9842],[0.2993,0.9763],[0.2993,0.9684],[0.2993,0.9606],[0.2993,0.9527],[0.2993,0.9448],[0.2993,0.937],[0.2993,0.9291],[0.2993,0.9212],[0.2993,0.9133],[0.2993,0.9055],[0.2993,0.8976],[0.2993,0.8897],[0.2993,0.8818],[0.2993,0.874],[0.2993,0.8661],[0.2993,0.8582],[0.2993,0.8503],[0.2993,0.8425],[0.2993,0.8346],[0.2993,0.8267],[0.2993,0.8188],[0.2993,0.811],[0.2993,0.8031],[0.2993,0.7952],[0.2993,0.7874],[0.2993,0.7795],[0.2993,0.7716],[0.2993,0.7637],[0.2993,0.7559],[0.2993,0.748],[0.2993,0.7401],[0.2993,0.7322],[0.2993,0.7244],[0.2993,0.7165],[0.2993,0.7086],[0.2993,0.7007],[0.2993,0.6929],[0.2993,0.685],[0.2993,0.6771],[0.2993,0.6693],[0.2993,0.6614],[0.2993,0.6535],[0.2993,0.6456],[0.2993,0.6378],[0.2993,0.6299],[0.2993,0.622],[0.2993,0.6141],[0.2993,0.6063],[0.2993,0.5984],[0.2993,0.5905],[0.2993,0.5826],[0.2993,0.5748],[0.2993,0.5669],[0.2993,0.559],[0.2993,0.5511],[0.2993,0.5433],[0.2993,0.5354],[0.2993,0.5275],[0.2993,0.5197],[0.2993,0.5118],[0.2993,0.5039],[0.2993,0.496],[0.2993,0.4882],[0.2993,0.4803],[0.2993,0.4724],[0.2993,0.4645],[0.2993,0.4567],[0.2993,0.4488],[0.2993,0.4409],[0.2993,0.433],[0.2993,0.4252],[0.2993,0.4173],[0.2993,0.4094],[0.2993,0.4016],[0.2993,0.3937],[0.2993,0.3858],[0.2993,0.3779],[0.2993,0.3701],[0.2993,0.3622],[0.2993,0.3543],[0.2993,0.3464],[0.2993,0.3386],[0.2993,0.3307],[0.2993,0.3228],[0.2993,0.3149],[0.2993,0.3071],[0.2993,0.2992],[0.2993,0.2913],[0.2993,0.2834],[0.2993,0.2756],[0.2993,0.2677],[0.2993,0.2598],[0.2993,0.252],[0.2993,0.2441],[0.2993,0.2362],[0.2993,0.2283],[0.2993,0.2205],[0.2993,0.2126],[0.2993,0.2047],[0.2993,0.1968],[0.2993,0.189],[0.2993,0.1811],[0.2993,0.1732],[0.2993,0.1653],[0.2993,0.1575],[0.2993,0.1496],[0.2993,0.1417],[0.2993,0.1339],[0.2993,0.126],[0.2993,0.1181],[0.2993,0.1102],[0.2993,0.1024],[0.2993,0.0945],[0.2993,0.0866],[0.2993,0.0787],[0.2993,0.0709],[0.2993,0.063],[0.2993,0.0551],[0.2993,0.0472],[0.2993,0.0394],[0.2993,0.0315],[0.2993,0.0236],[0.2993,0.0157],[0.2993,0.0079],[0.2993,0],[0.3071,0.9999],[0.3071,0.9921],[0.3071,0.9842],[0.3071,0.9763],[0.3071,0.9684],[0.3071,0.9606],[0.3071,0.9527],[0.3071,0.9448],[0.3071,0.937],[0.3071,0.9291],[0.3071,0.9212],[0.3071,0.9133],[0.3071,0.9055],[0.3071,0.8976],[0.3071,0.8897],[0.3071,0.8818],[0.3071,0.874],[0.3071,0.8661],[0.3071,0.8582],[0.3071,0.8503],[0.3071,0.8425],[0.3071,0.8346],[0.3071,0.8267],[0.3071,0.8188],[0.3071,0.811],[0.3071,0.8031],[0.3071,0.7952],[0.3071,0.7874],[0.3071,0.7795],[0.3071,0.7716],[0.3071,0.7637],[0.3071,0.7559],[0.3071,0.748],[0.3071,0.7401],[0.3071,0.7322],[0.3071,0.7244],[0.3071,0.7165],[0.3071,0.7086],[0.3071,0.7007],[0.3071,0.6929],[0.3071,0.685],[0.3071,0.6771],[0.3071,0.6693],[0.3071,0.6614],[0.3071,0.6535],[0.3071,0.6456],[0.3071,0.6378],[0.3071,0.6299],[0.3071,0.622],[0.3071,0.6141],[0.3071,0.6063],[0.3071,0.5984],[0.3071,0.5905],[0.3071,0.5826],[0.3071,0.5748],[0.3071,0.5669],[0.3071,0.559],[0.3071,0.5511],[0.3071,0.5433],[0.3071,0.5354],[0.3071,0.5275],[0.3071,0.5197],[0.3071,0.5118],[0.3071,0.5039],[0.3071,0.496],[0.3071,0.4882],[0.3071,0.4803],[0.3071,0.4724],[0.3071,0.4645],[0.3071,0.4567],[0.3071,0.4488],[0.3071,0.4409],[0.3071,0.433],[0.3071,0.4252],[0.3071,0.4173],[0.3071,0.4094],[0.3071,0.4016],[0.3071,0.3937],[0.3071,0.3858],[0.3071,0.3779],[0.3071,0.3701],[0.3071,0.3622],[0.3071,0.3543],[0.3071,0.3464],[0.3071,0.3386],[0.3071,0.3307],[0.3071,0.3228],[0.3071,0.3149],[0.3071,0.3071],[0.3071,0.2992],[0.3071,0.2913],[0.3071,0.2834],[0.3071,0.2756],[0.3071,0.2677],[0.3071,0.2598],[0.3071,0.252],[0.3071,0.2441],[0.3071,0.2362],[0.3071,0.2283],[0.3071,0.2205],[0.3071,0.2126],[0.3071,0.2047],[0.3071,0.1968],[0.3071,0.189],[0.3071,0.1811],[0.3071,0.1732],[0.3071,0.1653],[0.3071,0.1575],[0.3071,0.1496],[0.3071,0.1417],[0.3071,0.1339],[0.3071,0.126],[0.3071,0.1181],[0.3071,0.1102],[0.3071,0.1024],[0.3071,0.0945],[0.3071,0.0866],[0.3071,0.0787],[0.3071,0.0709],[0.3071,0.063],[0.3071,0.0551],[0.3071,0.0472],[0.3071,0.0394],[0.3071,0.0315],[0.3071,0.0236],[0.3071,0.0157],[0.3071,0.0079],[0.3071,0],[0.315,0.9999],[0.315,0.9921],[0.315,0.9842],[0.315,0.9763],[0.315,0.9684],[0.315,0.9606],[0.315,0.9527],[0.315,0.9448],[0.315,0.937],[0.315,0.9291],[0.315,0.9212],[0.315,0.9133],[0.315,0.9055],[0.315,0.8976],[0.315,0.8897],[0.315,0.8818],[0.315,0.874],[0.315,0.8661],[0.315,0.8582],[0.315,0.8503],[0.315,0.8425],[0.315,0.8346],[0.315,0.8267],[0.315,0.8188],[0.315,0.811],[0.315,0.8031],[0.315,0.7952],[0.315,0.7874],[0.315,0.7795],[0.315,0.7716],[0.315,0.7637],[0.315,0.7559],[0.315,0.748],[0.315,0.7401],[0.315,0.7322],[0.315,0.7244],[0.315,0.7165],[0.315,0.7086],[0.315,0.7007],[0.315,0.6929],[0.315,0.685],[0.315,0.6771],[0.315,0.6693],[0.315,0.6614],[0.315,0.6535],[0.315,0.6456],[0.315,0.6378],[0.315,0.6299],[0.315,0.622],[0.315,0.6141],[0.315,0.6063],[0.315,0.5984],[0.315,0.5905],[0.315,0.5826],[0.315,0.5748],[0.315,0.5669],[0.315,0.559],[0.315,0.5511],[0.315,0.5433],[0.315,0.5354],[0.315,0.5275],[0.315,0.5197],[0.315,0.5118],[0.315,0.5039],[0.315,0.496],[0.315,0.4882],[0.315,0.4803],[0.315,0.4724],[0.315,0.4645],[0.315,0.4567],[0.315,0.4488],[0.315,0.4409],[0.315,0.433],[0.315,0.4252],[0.315,0.4173],[0.315,0.4094],[0.315,0.4016],[0.315,0.3937],[0.315,0.3858],[0.315,0.3779],[0.315,0.3701],[0.315,0.3622],[0.315,0.3543],[0.315,0.3464],[0.315,0.3386],[0.315,0.3307],[0.315,0.3228],[0.315,0.3149],[0.315,0.3071],[0.315,0.2992],[0.315,0.2913],[0.315,0.2834],[0.315,0.2756],[0.315,0.2677],[0.315,0.2598],[0.315,0.252],[0.315,0.2441],[0.315,0.2362],[0.315,0.2283],[0.315,0.2205],[0.315,0.2126],[0.315,0.2047],[0.315,0.1968],[0.315,0.189],[0.315,0.1811],[0.315,0.1732],[0.315,0.1653],[0.315,0.1575],[0.315,0.1496],[0.315,0.1417],[0.315,0.1339],[0.315,0.126],[0.315,0.1181],[0.315,0.1102],[0.315,0.1024],[0.315,0.0945],[0.315,0.0866],[0.315,0.0787],[0.315,0.0709],[0.315,0.063],[0.315,0.0551],[0.315,0.0472],[0.315,0.0394],[0.315,0.0315],[0.315,0.0236],[0.315,0.0157],[0.315,0.0079],[0.315,0],[0.3229,0.9999],[0.3229,0.9921],[0.3229,0.9842],[0.3229,0.9763],[0.3229,0.9684],[0.3229,0.9606],[0.3229,0.9527],[0.3229,0.9448],[0.3229,0.937],[0.3229,0.9291],[0.3229,0.9212],[0.3229,0.9133],[0.3229,0.9055],[0.3229,0.8976],[0.3229,0.8897],[0.3229,0.8818],[0.3229,0.874],[0.3229,0.8661],[0.3229,0.8582],[0.3229,0.8503],[0.3229,0.8425],[0.3229,0.8346],[0.3229,0.8267],[0.3229,0.8188],[0.3229,0.811],[0.3229,0.8031],[0.3229,0.7952],[0.3229,0.7874],[0.3229,0.7795],[0.3229,0.7716],[0.3229,0.7637],[0.3229,0.7559],[0.3229,0.748],[0.3229,0.7401],[0.3229,0.7322],[0.3229,0.7244],[0.3229,0.7165],[0.3229,0.7086],[0.3229,0.7007],[0.3229,0.6929],[0.3229,0.685],[0.3229,0.6771],[0.3229,0.6693],[0.3229,0.6614],[0.3229,0.6535],[0.3229,0.6456],[0.3229,0.6378],[0.3229,0.6299],[0.3229,0.622],[0.3229,0.6141],[0.3229,0.6063],[0.3229,0.5984],[0.3229,0.5905],[0.3229,0.5826],[0.3229,0.5748],[0.3229,0.5669],[0.3229,0.559],[0.3229,0.5511],[0.3229,0.5433],[0.3229,0.5354],[0.3229,0.5275],[0.3229,0.5197],[0.3229,0.5118],[0.3229,0.5039],[0.3229,0.496],[0.3229,0.4882],[0.3229,0.4803],[0.3229,0.4724],[0.3229,0.4645],[0.3229,0.4567],[0.3229,0.4488],[0.3229,0.4409],[0.3229,0.433],[0.3229,0.4252],[0.3229,0.4173],[0.3229,0.4094],[0.3229,0.4016],[0.3229,0.3937],[0.3229,0.3858],[0.3229,0.3779],[0.3229,0.3701],[0.3229,0.3622],[0.3229,0.3543],[0.3229,0.3464],[0.3229,0.3386],[0.3229,0.3307],[0.3229,0.3228],[0.3229,0.3149],[0.3229,0.3071],[0.3229,0.2992],[0.3229,0.2913],[0.3229,0.2834],[0.3229,0.2756],[0.3229,0.2677],[0.3229,0.2598],[0.3229,0.252],[0.3229,0.2441],[0.3229,0.2362],[0.3229,0.2283],[0.3229,0.2205],[0.3229,0.2126],[0.3229,0.2047],[0.3229,0.1968],[0.3229,0.189],[0.3229,0.1811],[0.3229,0.1732],[0.3229,0.1653],[0.3229,0.1575],[0.3229,0.1496],[0.3229,0.1417],[0.3229,0.1339],[0.3229,0.126],[0.3229,0.1181],[0.3229,0.1102],[0.3229,0.1024],[0.3229,0.0945],[0.3229,0.0866],[0.3229,0.0787],[0.3229,0.0709],[0.3229,0.063],[0.3229,0.0551],[0.3229,0.0472],[0.3229,0.0394],[0.3229,0.0315],[0.3229,0.0236],[0.3229,0.0157],[0.3229,0.0079],[0.3229,0],[0.3307,0.9999],[0.3307,0.9921],[0.3307,0.9842],[0.3307,0.9763],[0.3307,0.9684],[0.3307,0.9606],[0.3307,0.9527],[0.3307,0.9448],[0.3307,0.937],[0.3307,0.9291],[0.3307,0.9212],[0.3307,0.9133],[0.3307,0.9055],[0.3307,0.8976],[0.3307,0.8897],[0.3307,0.8818],[0.3307,0.874],[0.3307,0.8661],[0.3307,0.8582],[0.3307,0.8503],[0.3307,0.8425],[0.3307,0.8346],[0.3307,0.8267],[0.3307,0.8188],[0.3307,0.811],[0.3307,0.8031],[0.3307,0.7952],[0.3307,0.7874],[0.3307,0.7795],[0.3307,0.7716],[0.3307,0.7637],[0.3307,0.7559],[0.3307,0.748],[0.3307,0.7401],[0.3307,0.7322],[0.3307,0.7244],[0.3307,0.7165],[0.3307,0.7086],[0.3307,0.7007],[0.3307,0.6929],[0.3307,0.685],[0.3307,0.6771],[0.3307,0.6693],[0.3307,0.6614],[0.3307,0.6535],[0.3307,0.6456],[0.3307,0.6378],[0.3307,0.6299],[0.3307,0.622],[0.3307,0.6141],[0.3307,0.6063],[0.3307,0.5984],[0.3307,0.5905],[0.3307,0.5826],[0.3307,0.5748],[0.3307,0.5669],[0.3307,0.559],[0.3307,0.5511],[0.3307,0.5433],[0.3307,0.5354],[0.3307,0.5275],[0.3307,0.5197],[0.3307,0.5118],[0.3307,0.5039],[0.3307,0.496],[0.3307,0.4882],[0.3307,0.4803],[0.3307,0.4724],[0.3307,0.4645],[0.3307,0.4567],[0.3307,0.4488],[0.3307,0.4409],[0.3307,0.433],[0.3307,0.4252],[0.3307,0.4173],[0.3307,0.4094],[0.3307,0.4016],[0.3307,0.3937],[0.3307,0.3858],[0.3307,0.3779],[0.3307,0.3701],[0.3307,0.3622],[0.3307,0.3543],[0.3307,0.3464],[0.3307,0.3386],[0.3307,0.3307],[0.3307,0.3228],[0.3307,0.3149],[0.3307,0.3071],[0.3307,0.2992],[0.3307,0.2913],[0.3307,0.2834],[0.3307,0.2756],[0.3307,0.2677],[0.3307,0.2598],[0.3307,0.252],[0.3307,0.2441],[0.3307,0.2362],[0.3307,0.2283],[0.3307,0.2205],[0.3307,0.2126],[0.3307,0.2047],[0.3307,0.1968],[0.3307,0.189],[0.3307,0.1811],[0.3307,0.1732],[0.3307,0.1653],[0.3307,0.1575],[0.3307,0.1496],[0.3307,0.1417],[0.3307,0.1339],[0.3307,0.126],[0.3307,0.1181],[0.3307,0.1102],[0.3307,0.1024],[0.3307,0.0945],[0.3307,0.0866],[0.3307,0.0787],[0.3307,0.0709],[0.3307,0.063],[0.3307,0.0551],[0.3307,0.0472],[0.3307,0.0394],[0.3307,0.0315],[0.3307,0.0236],[0.3307,0.0157],[0.3307,0.0079],[0.3307,0],[0.3386,0.9999],[0.3386,0.9921],[0.3386,0.9842],[0.3386,0.9763],[0.3386,0.9684],[0.3386,0.9606],[0.3386,0.9527],[0.3386,0.9448],[0.3386,0.937],[0.3386,0.9291],[0.3386,0.9212],[0.3386,0.9133],[0.3386,0.9055],[0.3386,0.8976],[0.3386,0.8897],[0.3386,0.8818],[0.3386,0.874],[0.3386,0.8661],[0.3386,0.8582],[0.3386,0.8503],[0.3386,0.8425],[0.3386,0.8346],[0.3386,0.8267],[0.3386,0.8188],[0.3386,0.811],[0.3386,0.8031],[0.3386,0.7952],[0.3386,0.7874],[0.3386,0.7795],[0.3386,0.7716],[0.3386,0.7637],[0.3386,0.7559],[0.3386,0.748],[0.3386,0.7401],[0.3386,0.7322],[0.3386,0.7244],[0.3386,0.7165],[0.3386,0.7086],[0.3386,0.7007],[0.3386,0.6929],[0.3386,0.685],[0.3386,0.6771],[0.3386,0.6693],[0.3386,0.6614],[0.3386,0.6535],[0.3386,0.6456],[0.3386,0.6378],[0.3386,0.6299],[0.3386,0.622],[0.3386,0.6141],[0.3386,0.6063],[0.3386,0.5984],[0.3386,0.5905],[0.3386,0.5826],[0.3386,0.5748],[0.3386,0.5669],[0.3386,0.559],[0.3386,0.5511],[0.3386,0.5433],[0.3386,0.5354],[0.3386,0.5275],[0.3386,0.5197],[0.3386,0.5118],[0.3386,0.5039],[0.3386,0.496],[0.3386,0.4882],[0.3386,0.4803],[0.3386,0.4724],[0.3386,0.4645],[0.3386,0.4567],[0.3386,0.4488],[0.3386,0.4409],[0.3386,0.433],[0.3386,0.4252],[0.3386,0.4173],[0.3386,0.4094],[0.3386,0.4016],[0.3386,0.3937],[0.3386,0.3858],[0.3386,0.3779],[0.3386,0.3701],[0.3386,0.3622],[0.3386,0.3543],[0.3386,0.3464],[0.3386,0.3386],[0.3386,0.3307],[0.3386,0.3228],[0.3386,0.3149],[0.3386,0.3071],[0.3386,0.2992],[0.3386,0.2913],[0.3386,0.2834],[0.3386,0.2756],[0.3386,0.2677],[0.3386,0.2598],[0.3386,0.252],[0.3386,0.2441],[0.3386,0.2362],[0.3386,0.2283],[0.3386,0.2205],[0.3386,0.2126],[0.3386,0.2047],[0.3386,0.1968],[0.3386,0.189],[0.3386,0.1811],[0.3386,0.1732],[0.3386,0.1653],[0.3386,0.1575],[0.3386,0.1496],[0.3386,0.1417],[0.3386,0.1339],[0.3386,0.126],[0.3386,0.1181],[0.3386,0.1102],[0.3386,0.1024],[0.3386,0.0945],[0.3386,0.0866],[0.3386,0.0787],[0.3386,0.0709],[0.3386,0.063],[0.3386,0.0551],[0.3386,0.0472],[0.3386,0.0394],[0.3386,0.0315],[0.3386,0.0236],[0.3386,0.0157],[0.3386,0.0079],[0.3386,0],[0.3465,0.9999],[0.3465,0.9921],[0.3465,0.9842],[0.3465,0.9763],[0.3465,0.9684],[0.3465,0.9606],[0.3465,0.9527],[0.3465,0.9448],[0.3465,0.937],[0.3465,0.9291],[0.3465,0.9212],[0.3465,0.9133],[0.3465,0.9055],[0.3465,0.8976],[0.3465,0.8897],[0.3465,0.8818],[0.3465,0.874],[0.3465,0.8661],[0.3465,0.8582],[0.3465,0.8503],[0.3465,0.8425],[0.3465,0.8346],[0.3465,0.8267],[0.3465,0.8188],[0.3465,0.811],[0.3465,0.8031],[0.3465,0.7952],[0.3465,0.7874],[0.3465,0.7795],[0.3465,0.7716],[0.3465,0.7637],[0.3465,0.7559],[0.3465,0.748],[0.3465,0.7401],[0.3465,0.7322],[0.3465,0.7244],[0.3465,0.7165],[0.3465,0.7086],[0.3465,0.7007],[0.3465,0.6929],[0.3465,0.685],[0.3465,0.6771],[0.3465,0.6693],[0.3465,0.6614],[0.3465,0.6535],[0.3465,0.6456],[0.3465,0.6378],[0.3465,0.6299],[0.3465,0.622],[0.3465,0.6141],[0.3465,0.6063],[0.3465,0.5984],[0.3465,0.5905],[0.3465,0.5826],[0.3465,0.5748],[0.3465,0.5669],[0.3465,0.559],[0.3465,0.5511],[0.3465,0.5433],[0.3465,0.5354],[0.3465,0.5275],[0.3465,0.5197],[0.3465,0.5118],[0.3465,0.5039],[0.3465,0.496],[0.3465,0.4882],[0.3465,0.4803],[0.3465,0.4724],[0.3465,0.4645],[0.3465,0.4567],[0.3465,0.4488],[0.3465,0.4409],[0.3465,0.433],[0.3465,0.4252],[0.3465,0.4173],[0.3465,0.4094],[0.3465,0.4016],[0.3465,0.3937],[0.3465,0.3858],[0.3465,0.3779],[0.3465,0.3701],[0.3465,0.3622],[0.3465,0.3543],[0.3465,0.3464],[0.3465,0.3386],[0.3465,0.3307],[0.3465,0.3228],[0.3465,0.3149],[0.3465,0.3071],[0.3465,0.2992],[0.3465,0.2913],[0.3465,0.2834],[0.3465,0.2756],[0.3465,0.2677],[0.3465,0.2598],[0.3465,0.252],[0.3465,0.2441],[0.3465,0.2362],[0.3465,0.2283],[0.3465,0.2205],[0.3465,0.2126],[0.3465,0.2047],[0.3465,0.1968],[0.3465,0.189],[0.3465,0.1811],[0.3465,0.1732],[0.3465,0.1653],[0.3465,0.1575],[0.3465,0.1496],[0.3465,0.1417],[0.3465,0.1339],[0.3465,0.126],[0.3465,0.1181],[0.3465,0.1102],[0.3465,0.1024],[0.3465,0.0945],[0.3465,0.0866],[0.3465,0.0787],[0.3465,0.0709],[0.3465,0.063],[0.3465,0.0551],[0.3465,0.0472],[0.3465,0.0394],[0.3465,0.0315],[0.3465,0.0236],[0.3465,0.0157],[0.3465,0.0079],[0.3465,0],[0.3544,0.9999],[0.3544,0.9921],[0.3544,0.9842],[0.3544,0.9763],[0.3544,0.9684],[0.3544,0.9606],[0.3544,0.9527],[0.3544,0.9448],[0.3544,0.937],[0.3544,0.9291],[0.3544,0.9212],[0.3544,0.9133],[0.3544,0.9055],[0.3544,0.8976],[0.3544,0.8897],[0.3544,0.8818],[0.3544,0.874],[0.3544,0.8661],[0.3544,0.8582],[0.3544,0.8503],[0.3544,0.8425],[0.3544,0.8346],[0.3544,0.8267],[0.3544,0.8188],[0.3544,0.811],[0.3544,0.8031],[0.3544,0.7952],[0.3544,0.7874],[0.3544,0.7795],[0.3544,0.7716],[0.3544,0.7637],[0.3544,0.7559],[0.3544,0.748],[0.3544,0.7401],[0.3544,0.7322],[0.3544,0.7244],[0.3544,0.7165],[0.3544,0.7086],[0.3544,0.7007],[0.3544,0.6929],[0.3544,0.685],[0.3544,0.6771],[0.3544,0.6693],[0.3544,0.6614],[0.3544,0.6535],[0.3544,0.6456],[0.3544,0.6378],[0.3544,0.6299],[0.3544,0.622],[0.3544,0.6141],[0.3544,0.6063],[0.3544,0.5984],[0.3544,0.5905],[0.3544,0.5826],[0.3544,0.5748],[0.3544,0.5669],[0.3544,0.559],[0.3544,0.5511],[0.3544,0.5433],[0.3544,0.5354],[0.3544,0.5275],[0.3544,0.5197],[0.3544,0.5118],[0.3544,0.5039],[0.3544,0.496],[0.3544,0.4882],[0.3544,0.4803],[0.3544,0.4724],[0.3544,0.4645],[0.3544,0.4567],[0.3544,0.4488],[0.3544,0.4409],[0.3544,0.433],[0.3544,0.4252],[0.3544,0.4173],[0.3544,0.4094],[0.3544,0.4016],[0.3544,0.3937],[0.3544,0.3858],[0.3544,0.3779],[0.3544,0.3701],[0.3544,0.3622],[0.3544,0.3543],[0.3544,0.3464],[0.3544,0.3386],[0.3544,0.3307],[0.3544,0.3228],[0.3544,0.3149],[0.3544,0.3071],[0.3544,0.2992],[0.3544,0.2913],[0.3544,0.2834],[0.3544,0.2756],[0.3544,0.2677],[0.3544,0.2598],[0.3544,0.252],[0.3544,0.2441],[0.3544,0.2362],[0.3544,0.2283],[0.3544,0.2205],[0.3544,0.2126],[0.3544,0.2047],[0.3544,0.1968],[0.3544,0.189],[0.3544,0.1811],[0.3544,0.1732],[0.3544,0.1653],[0.3544,0.1575],[0.3544,0.1496],[0.3544,0.1417],[0.3544,0.1339],[0.3544,0.126],[0.3544,0.1181],[0.3544,0.1102],[0.3544,0.1024],[0.3544,0.0945],[0.3544,0.0866],[0.3544,0.0787],[0.3544,0.0709],[0.3544,0.063],[0.3544,0.0551],[0.3544,0.0472],[0.3544,0.0394],[0.3544,0.0315],[0.3544,0.0236],[0.3544,0.0157],[0.3544,0.0079],[0.3544,0],[0.3622,0.9999],[0.3622,0.9921],[0.3622,0.9842],[0.3622,0.9763],[0.3622,0.9684],[0.3622,0.9606],[0.3622,0.9527],[0.3622,0.9448],[0.3622,0.937],[0.3622,0.9291],[0.3622,0.9212],[0.3622,0.9133],[0.3622,0.9055],[0.3622,0.8976],[0.3622,0.8897],[0.3622,0.8818],[0.3622,0.874],[0.3622,0.8661],[0.3622,0.8582],[0.3622,0.8503],[0.3622,0.8425],[0.3622,0.8346],[0.3622,0.8267],[0.3622,0.8188],[0.3622,0.811],[0.3622,0.8031],[0.3622,0.7952],[0.3622,0.7874],[0.3622,0.7795],[0.3622,0.7716],[0.3622,0.7637],[0.3622,0.7559],[0.3622,0.748],[0.3622,0.7401],[0.3622,0.7322],[0.3622,0.7244],[0.3622,0.7165],[0.3622,0.7086],[0.3622,0.7007],[0.3622,0.6929],[0.3622,0.685],[0.3622,0.6771],[0.3622,0.6693],[0.3622,0.6614],[0.3622,0.6535],[0.3622,0.6456],[0.3622,0.6378],[0.3622,0.6299],[0.3622,0.622],[0.3622,0.6141],[0.3622,0.6063],[0.3622,0.5984],[0.3622,0.5905],[0.3622,0.5826],[0.3622,0.5748],[0.3622,0.5669],[0.3622,0.559],[0.3622,0.5511],[0.3622,0.5433],[0.3622,0.5354],[0.3622,0.5275],[0.3622,0.5197],[0.3622,0.5118],[0.3622,0.5039],[0.3622,0.496],[0.3622,0.4882],[0.3622,0.4803],[0.3622,0.4724],[0.3622,0.4645],[0.3622,0.4567],[0.3622,0.4488],[0.3622,0.4409],[0.3622,0.433],[0.3622,0.4252],[0.3622,0.4173],[0.3622,0.4094],[0.3622,0.4016],[0.3622,0.3937],[0.3622,0.3858],[0.3622,0.3779],[0.3622,0.3701],[0.3622,0.3622],[0.3622,0.3543],[0.3622,0.3464],[0.3622,0.3386],[0.3622,0.3307],[0.3622,0.3228],[0.3622,0.3149],[0.3622,0.3071],[0.3622,0.2992],[0.3622,0.2913],[0.3622,0.2834],[0.3622,0.2756],[0.3622,0.2677],[0.3622,0.2598],[0.3622,0.252],[0.3622,0.2441],[0.3622,0.2362],[0.3622,0.2283],[0.3622,0.2205],[0.3622,0.2126],[0.3622,0.2047],[0.3622,0.1968],[0.3622,0.189],[0.3622,0.1811],[0.3622,0.1732],[0.3622,0.1653],[0.3622,0.1575],[0.3622,0.1496],[0.3622,0.1417],[0.3622,0.1339],[0.3622,0.126],[0.3622,0.1181],[0.3622,0.1102],[0.3622,0.1024],[0.3622,0.0945],[0.3622,0.0866],[0.3622,0.0787],[0.3622,0.0709],[0.3622,0.063],[0.3622,0.0551],[0.3622,0.0472],[0.3622,0.0394],[0.3622,0.0315],[0.3622,0.0236],[0.3622,0.0157],[0.3622,0.0079],[0.3622,0],[0.3701,0.9999],[0.3701,0.9921],[0.3701,0.9842],[0.3701,0.9763],[0.3701,0.9684],[0.3701,0.9606],[0.3701,0.9527],[0.3701,0.9448],[0.3701,0.937],[0.3701,0.9291],[0.3701,0.9212],[0.3701,0.9133],[0.3701,0.9055],[0.3701,0.8976],[0.3701,0.8897],[0.3701,0.8818],[0.3701,0.874],[0.3701,0.8661],[0.3701,0.8582],[0.3701,0.8503],[0.3701,0.8425],[0.3701,0.8346],[0.3701,0.8267],[0.3701,0.8188],[0.3701,0.811],[0.3701,0.8031],[0.3701,0.7952],[0.3701,0.7874],[0.3701,0.7795],[0.3701,0.7716],[0.3701,0.7637],[0.3701,0.7559],[0.3701,0.748],[0.3701,0.7401],[0.3701,0.7322],[0.3701,0.7244],[0.3701,0.7165],[0.3701,0.7086],[0.3701,0.7007],[0.3701,0.6929],[0.3701,0.685],[0.3701,0.6771],[0.3701,0.6693],[0.3701,0.6614],[0.3701,0.6535],[0.3701,0.6456],[0.3701,0.6378],[0.3701,0.6299],[0.3701,0.622],[0.3701,0.6141],[0.3701,0.6063],[0.3701,0.5984],[0.3701,0.5905],[0.3701,0.5826],[0.3701,0.5748],[0.3701,0.5669],[0.3701,0.559],[0.3701,0.5511],[0.3701,0.5433],[0.3701,0.5354],[0.3701,0.5275],[0.3701,0.5197],[0.3701,0.5118],[0.3701,0.5039],[0.3701,0.496],[0.3701,0.4882],[0.3701,0.4803],[0.3701,0.4724],[0.3701,0.4645],[0.3701,0.4567],[0.3701,0.4488],[0.3701,0.4409],[0.3701,0.433],[0.3701,0.4252],[0.3701,0.4173],[0.3701,0.4094],[0.3701,0.4016],[0.3701,0.3937],[0.3701,0.3858],[0.3701,0.3779],[0.3701,0.3701],[0.3701,0.3622],[0.3701,0.3543],[0.3701,0.3464],[0.3701,0.3386],[0.3701,0.3307],[0.3701,0.3228],[0.3701,0.3149],[0.3701,0.3071],[0.3701,0.2992],[0.3701,0.2913],[0.3701,0.2834],[0.3701,0.2756],[0.3701,0.2677],[0.3701,0.2598],[0.3701,0.252],[0.3701,0.2441],[0.3701,0.2362],[0.3701,0.2283],[0.3701,0.2205],[0.3701,0.2126],[0.3701,0.2047],[0.3701,0.1968],[0.3701,0.189],[0.3701,0.1811],[0.3701,0.1732],[0.3701,0.1653],[0.3701,0.1575],[0.3701,0.1496],[0.3701,0.1417],[0.3701,0.1339],[0.3701,0.126],[0.3701,0.1181],[0.3701,0.1102],[0.3701,0.1024],[0.3701,0.0945],[0.3701,0.0866],[0.3701,0.0787],[0.3701,0.0709],[0.3701,0.063],[0.3701,0.0551],[0.3701,0.0472],[0.3701,0.0394],[0.3701,0.0315],[0.3701,0.0236],[0.3701,0.0157],[0.3701,0.0079],[0.3701,0],[0.378,0.9999],[0.378,0.9921],[0.378,0.9842],[0.378,0.9763],[0.378,0.9684],[0.378,0.9606],[0.378,0.9527],[0.378,0.9448],[0.378,0.937],[0.378,0.9291],[0.378,0.9212],[0.378,0.9133],[0.378,0.9055],[0.378,0.8976],[0.378,0.8897],[0.378,0.8818],[0.378,0.874],[0.378,0.8661],[0.378,0.8582],[0.378,0.8503],[0.378,0.8425],[0.378,0.8346],[0.378,0.8267],[0.378,0.8188],[0.378,0.811],[0.378,0.8031],[0.378,0.7952],[0.378,0.7874],[0.378,0.7795],[0.378,0.7716],[0.378,0.7637],[0.378,0.7559],[0.378,0.748],[0.378,0.7401],[0.378,0.7322],[0.378,0.7244],[0.378,0.7165],[0.378,0.7086],[0.378,0.7007],[0.378,0.6929],[0.378,0.685],[0.378,0.6771],[0.378,0.6693],[0.378,0.6614],[0.378,0.6535],[0.378,0.6456],[0.378,0.6378],[0.378,0.6299],[0.378,0.622],[0.378,0.6141],[0.378,0.6063],[0.378,0.5984],[0.378,0.5905],[0.378,0.5826],[0.378,0.5748],[0.378,0.5669],[0.378,0.559],[0.378,0.5511],[0.378,0.5433],[0.378,0.5354],[0.378,0.5275],[0.378,0.5197],[0.378,0.5118],[0.378,0.5039],[0.378,0.496],[0.378,0.4882],[0.378,0.4803],[0.378,0.4724],[0.378,0.4645],[0.378,0.4567],[0.378,0.4488],[0.378,0.4409],[0.378,0.433],[0.378,0.4252],[0.378,0.4173],[0.378,0.4094],[0.378,0.4016],[0.378,0.3937],[0.378,0.3858],[0.378,0.3779],[0.378,0.3701],[0.378,0.3622],[0.378,0.3543],[0.378,0.3464],[0.378,0.3386],[0.378,0.3307],[0.378,0.3228],[0.378,0.3149],[0.378,0.3071],[0.378,0.2992],[0.378,0.2913],[0.378,0.2834],[0.378,0.2756],[0.378,0.2677],[0.378,0.2598],[0.378,0.252],[0.378,0.2441],[0.378,0.2362],[0.378,0.2283],[0.378,0.2205],[0.378,0.2126],[0.378,0.2047],[0.378,0.1968],[0.378,0.189],[0.378,0.1811],[0.378,0.1732],[0.378,0.1653],[0.378,0.1575],[0.378,0.1496],[0.378,0.1417],[0.378,0.1339],[0.378,0.126],[0.378,0.1181],[0.378,0.1102],[0.378,0.1024],[0.378,0.0945],[0.378,0.0866],[0.378,0.0787],[0.378,0.0709],[0.378,0.063],[0.378,0.0551],[0.378,0.0472],[0.378,0.0394],[0.378,0.0315],[0.378,0.0236],[0.378,0.0157],[0.378,0.0079],[0.378,0],[0.3859,0.9999],[0.3859,0.9921],[0.3859,0.9842],[0.3859,0.9763],[0.3859,0.9684],[0.3859,0.9606],[0.3859,0.9527],[0.3859,0.9448],[0.3859,0.937],[0.3859,0.9291],[0.3859,0.9212],[0.3859,0.9133],[0.3859,0.9055],[0.3859,0.8976],[0.3859,0.8897],[0.3859,0.8818],[0.3859,0.874],[0.3859,0.8661],[0.3859,0.8582],[0.3859,0.8503],[0.3859,0.8425],[0.3859,0.8346],[0.3859,0.8267],[0.3859,0.8188],[0.3859,0.811],[0.3859,0.8031],[0.3859,0.7952],[0.3859,0.7874],[0.3859,0.7795],[0.3859,0.7716],[0.3859,0.7637],[0.3859,0.7559],[0.3859,0.748],[0.3859,0.7401],[0.3859,0.7322],[0.3859,0.7244],[0.3859,0.7165],[0.3859,0.7086],[0.3859,0.7007],[0.3859,0.6929],[0.3859,0.685],[0.3859,0.6771],[0.3859,0.6693],[0.3859,0.6614],[0.3859,0.6535],[0.3859,0.6456],[0.3859,0.6378],[0.3859,0.6299],[0.3859,0.622],[0.3859,0.6141],[0.3859,0.6063],[0.3859,0.5984],[0.3859,0.5905],[0.3859,0.5826],[0.3859,0.5748],[0.3859,0.5669],[0.3859,0.559],[0.3859,0.5511],[0.3859,0.5433],[0.3859,0.5354],[0.3859,0.5275],[0.3859,0.5197],[0.3859,0.5118],[0.3859,0.5039],[0.3859,0.496],[0.3859,0.4882],[0.3859,0.4803],[0.3859,0.4724],[0.3859,0.4645],[0.3859,0.4567],[0.3859,0.4488],[0.3859,0.4409],[0.3859,0.433],[0.3859,0.4252],[0.3859,0.4173],[0.3859,0.4094],[0.3859,0.4016],[0.3859,0.3937],[0.3859,0.3858],[0.3859,0.3779],[0.3859,0.3701],[0.3859,0.3622],[0.3859,0.3543],[0.3859,0.3464],[0.3859,0.3386],[0.3859,0.3307],[0.3859,0.3228],[0.3859,0.3149],[0.3859,0.3071],[0.3859,0.2992],[0.3859,0.2913],[0.3859,0.2834],[0.3859,0.2756],[0.3859,0.2677],[0.3859,0.2598],[0.3859,0.252],[0.3859,0.2441],[0.3859,0.2362],[0.3859,0.2283],[0.3859,0.2205],[0.3859,0.2126],[0.3859,0.2047],[0.3859,0.1968],[0.3859,0.189],[0.3859,0.1811],[0.3859,0.1732],[0.3859,0.1653],[0.3859,0.1575],[0.3859,0.1496],[0.3859,0.1417],[0.3859,0.1339],[0.3859,0.126],[0.3859,0.1181],[0.3859,0.1102],[0.3859,0.1024],[0.3859,0.0945],[0.3859,0.0866],[0.3859,0.0787],[0.3859,0.0709],[0.3859,0.063],[0.3859,0.0551],[0.3859,0.0472],[0.3859,0.0394],[0.3859,0.0315],[0.3859,0.0236],[0.3859,0.0157],[0.3859,0.0079],[0.3859,0],[0.3937,0.9999],[0.3937,0.9921],[0.3937,0.9842],[0.3937,0.9763],[0.3937,0.9684],[0.3937,0.9606],[0.3937,0.9527],[0.3937,0.9448],[0.3937,0.937],[0.3937,0.9291],[0.3937,0.9212],[0.3937,0.9133],[0.3937,0.9055],[0.3937,0.8976],[0.3937,0.8897],[0.3937,0.8818],[0.3937,0.874],[0.3937,0.8661],[0.3937,0.8582],[0.3937,0.8503],[0.3937,0.8425],[0.3937,0.8346],[0.3937,0.8267],[0.3937,0.8188],[0.3937,0.811],[0.3937,0.8031],[0.3937,0.7952],[0.3937,0.7874],[0.3937,0.7795],[0.3937,0.7716],[0.3937,0.7637],[0.3937,0.7559],[0.3937,0.748],[0.3937,0.7401],[0.3937,0.7322],[0.3937,0.7244],[0.3937,0.7165],[0.3937,0.7086],[0.3937,0.7007],[0.3937,0.6929],[0.3937,0.685],[0.3937,0.6771],[0.3937,0.6693],[0.3937,0.6614],[0.3937,0.6535],[0.3937,0.6456],[0.3937,0.6378],[0.3937,0.6299],[0.3937,0.622],[0.3937,0.6141],[0.3937,0.6063],[0.3937,0.5984],[0.3937,0.5905],[0.3937,0.5826],[0.3937,0.5748],[0.3937,0.5669],[0.3937,0.559],[0.3937,0.5511],[0.3937,0.5433],[0.3937,0.5354],[0.3937,0.5275],[0.3937,0.5197],[0.3937,0.5118],[0.3937,0.5039],[0.3937,0.496],[0.3937,0.4882],[0.3937,0.4803],[0.3937,0.4724],[0.3937,0.4645],[0.3937,0.4567],[0.3937,0.4488],[0.3937,0.4409],[0.3937,0.433],[0.3937,0.4252],[0.3937,0.4173],[0.3937,0.4094],[0.3937,0.4016],[0.3937,0.3937],[0.3937,0.3858],[0.3937,0.3779],[0.3937,0.3701],[0.3937,0.3622],[0.3937,0.3543],[0.3937,0.3464],[0.3937,0.3386],[0.3937,0.3307],[0.3937,0.3228],[0.3937,0.3149],[0.3937,0.3071],[0.3937,0.2992],[0.3937,0.2913],[0.3937,0.2834],[0.3937,0.2756],[0.3937,0.2677],[0.3937,0.2598],[0.3937,0.252],[0.3937,0.2441],[0.3937,0.2362],[0.3937,0.2283],[0.3937,0.2205],[0.3937,0.2126],[0.3937,0.2047],[0.3937,0.1968],[0.3937,0.189],[0.3937,0.1811],[0.3937,0.1732],[0.3937,0.1653],[0.3937,0.1575],[0.3937,0.1496],[0.3937,0.1417],[0.3937,0.1339],[0.3937,0.126],[0.3937,0.1181],[0.3937,0.1102],[0.3937,0.1024],[0.3937,0.0945],[0.3937,0.0866],[0.3937,0.0787],[0.3937,0.0709],[0.3937,0.063],[0.3937,0.0551],[0.3937,0.0472],[0.3937,0.0394],[0.3937,0.0315],[0.3937,0.0236],[0.3937,0.0157],[0.3937,0.0079],[0.3937,0],[0.4016,0.9999],[0.4016,0.9921],[0.4016,0.9842],[0.4016,0.9763],[0.4016,0.9684],[0.4016,0.9606],[0.4016,0.9527],[0.4016,0.9448],[0.4016,0.937],[0.4016,0.9291],[0.4016,0.9212],[0.4016,0.9133],[0.4016,0.9055],[0.4016,0.8976],[0.4016,0.8897],[0.4016,0.8818],[0.4016,0.874],[0.4016,0.8661],[0.4016,0.8582],[0.4016,0.8503],[0.4016,0.8425],[0.4016,0.8346],[0.4016,0.8267],[0.4016,0.8188],[0.4016,0.811],[0.4016,0.8031],[0.4016,0.7952],[0.4016,0.7874],[0.4016,0.7795],[0.4016,0.7716],[0.4016,0.7637],[0.4016,0.7559],[0.4016,0.748],[0.4016,0.7401],[0.4016,0.7322],[0.4016,0.7244],[0.4016,0.7165],[0.4016,0.7086],[0.4016,0.7007],[0.4016,0.6929],[0.4016,0.685],[0.4016,0.6771],[0.4016,0.6693],[0.4016,0.6614],[0.4016,0.6535],[0.4016,0.6456],[0.4016,0.6378],[0.4016,0.6299],[0.4016,0.622],[0.4016,0.6141],[0.4016,0.6063],[0.4016,0.5984],[0.4016,0.5905],[0.4016,0.5826],[0.4016,0.5748],[0.4016,0.5669],[0.4016,0.559],[0.4016,0.5511],[0.4016,0.5433],[0.4016,0.5354],[0.4016,0.5275],[0.4016,0.5197],[0.4016,0.5118],[0.4016,0.5039],[0.4016,0.496],[0.4016,0.4882],[0.4016,0.4803],[0.4016,0.4724],[0.4016,0.4645],[0.4016,0.4567],[0.4016,0.4488],[0.4016,0.4409],[0.4016,0.433],[0.4016,0.4252],[0.4016,0.4173],[0.4016,0.4094],[0.4016,0.4016],[0.4016,0.3937],[0.4016,0.3858],[0.4016,0.3779],[0.4016,0.3701],[0.4016,0.3622],[0.4016,0.3543],[0.4016,0.3464],[0.4016,0.3386],[0.4016,0.3307],[0.4016,0.3228],[0.4016,0.3149],[0.4016,0.3071],[0.4016,0.2992],[0.4016,0.2913],[0.4016,0.2834],[0.4016,0.2756],[0.4016,0.2677],[0.4016,0.2598],[0.4016,0.252],[0.4016,0.2441],[0.4016,0.2362],[0.4016,0.2283],[0.4016,0.2205],[0.4016,0.2126],[0.4016,0.2047],[0.4016,0.1968],[0.4016,0.189],[0.4016,0.1811],[0.4016,0.1732],[0.4016,0.1653],[0.4016,0.1575],[0.4016,0.1496],[0.4016,0.1417],[0.4016,0.1339],[0.4016,0.126],[0.4016,0.1181],[0.4016,0.1102],[0.4016,0.1024],[0.4016,0.0945],[0.4016,0.0866],[0.4016,0.0787],[0.4016,0.0709],[0.4016,0.063],[0.4016,0.0551],[0.4016,0.0472],[0.4016,0.0394],[0.4016,0.0315],[0.4016,0.0236],[0.4016,0.0157],[0.4016,0.0079],[0.4016,0],[0.4095,0.9999],[0.4095,0.9921],[0.4095,0.9842],[0.4095,0.9763],[0.4095,0.9684],[0.4095,0.9606],[0.4095,0.9527],[0.4095,0.9448],[0.4095,0.937],[0.4095,0.9291],[0.4095,0.9212],[0.4095,0.9133],[0.4095,0.9055],[0.4095,0.8976],[0.4095,0.8897],[0.4095,0.8818],[0.4095,0.874],[0.4095,0.8661],[0.4095,0.8582],[0.4095,0.8503],[0.4095,0.8425],[0.4095,0.8346],[0.4095,0.8267],[0.4095,0.8188],[0.4095,0.811],[0.4095,0.8031],[0.4095,0.7952],[0.4095,0.7874],[0.4095,0.7795],[0.4095,0.7716],[0.4095,0.7637],[0.4095,0.7559],[0.4095,0.748],[0.4095,0.7401],[0.4095,0.7322],[0.4095,0.7244],[0.4095,0.7165],[0.4095,0.7086],[0.4095,0.7007],[0.4095,0.6929],[0.4095,0.685],[0.4095,0.6771],[0.4095,0.6693],[0.4095,0.6614],[0.4095,0.6535],[0.4095,0.6456],[0.4095,0.6378],[0.4095,0.6299],[0.4095,0.622],[0.4095,0.6141],[0.4095,0.6063],[0.4095,0.5984],[0.4095,0.5905],[0.4095,0.5826],[0.4095,0.5748],[0.4095,0.5669],[0.4095,0.559],[0.4095,0.5511],[0.4095,0.5433],[0.4095,0.5354],[0.4095,0.5275],[0.4095,0.5197],[0.4095,0.5118],[0.4095,0.5039],[0.4095,0.496],[0.4095,0.4882],[0.4095,0.4803],[0.4095,0.4724],[0.4095,0.4645],[0.4095,0.4567],[0.4095,0.4488],[0.4095,0.4409],[0.4095,0.433],[0.4095,0.4252],[0.4095,0.4173],[0.4095,0.4094],[0.4095,0.4016],[0.4095,0.3937],[0.4095,0.3858],[0.4095,0.3779],[0.4095,0.3701],[0.4095,0.3622],[0.4095,0.3543],[0.4095,0.3464],[0.4095,0.3386],[0.4095,0.3307],[0.4095,0.3228],[0.4095,0.3149],[0.4095,0.3071],[0.4095,0.2992],[0.4095,0.2913],[0.4095,0.2834],[0.4095,0.2756],[0.4095,0.2677],[0.4095,0.2598],[0.4095,0.252],[0.4095,0.2441],[0.4095,0.2362],[0.4095,0.2283],[0.4095,0.2205],[0.4095,0.2126],[0.4095,0.2047],[0.4095,0.1968],[0.4095,0.189],[0.4095,0.1811],[0.4095,0.1732],[0.4095,0.1653],[0.4095,0.1575],[0.4095,0.1496],[0.4095,0.1417],[0.4095,0.1339],[0.4095,0.126],[0.4095,0.1181],[0.4095,0.1102],[0.4095,0.1024],[0.4095,0.0945],[0.4095,0.0866],[0.4095,0.0787],[0.4095,0.0709],[0.4095,0.063],[0.4095,0.0551],[0.4095,0.0472],[0.4095,0.0394],[0.4095,0.0315],[0.4095,0.0236],[0.4095,0.0157],[0.4095,0.0079],[0.4095,0],[0.4174,0.9999],[0.4174,0.9921],[0.4174,0.9842],[0.4174,0.9763],[0.4174,0.9684],[0.4174,0.9606],[0.4174,0.9527],[0.4174,0.9448],[0.4174,0.937],[0.4174,0.9291],[0.4174,0.9212],[0.4174,0.9133],[0.4174,0.9055],[0.4174,0.8976],[0.4174,0.8897],[0.4174,0.8818],[0.4174,0.874],[0.4174,0.8661],[0.4174,0.8582],[0.4174,0.8503],[0.4174,0.8425],[0.4174,0.8346],[0.4174,0.8267],[0.4174,0.8188],[0.4174,0.811],[0.4174,0.8031],[0.4174,0.7952],[0.4174,0.7874],[0.4174,0.7795],[0.4174,0.7716],[0.4174,0.7637],[0.4174,0.7559],[0.4174,0.748],[0.4174,0.7401],[0.4174,0.7322],[0.4174,0.7244],[0.4174,0.7165],[0.4174,0.7086],[0.4174,0.7007],[0.4174,0.6929],[0.4174,0.685],[0.4174,0.6771],[0.4174,0.6693],[0.4174,0.6614],[0.4174,0.6535],[0.4174,0.6456],[0.4174,0.6378],[0.4174,0.6299],[0.4174,0.622],[0.4174,0.6141],[0.4174,0.6063],[0.4174,0.5984],[0.4174,0.5905],[0.4174,0.5826],[0.4174,0.5748],[0.4174,0.5669],[0.4174,0.559],[0.4174,0.5511],[0.4174,0.5433],[0.4174,0.5354],[0.4174,0.5275],[0.4174,0.5197],[0.4174,0.5118],[0.4174,0.5039],[0.4174,0.496],[0.4174,0.4882],[0.4174,0.4803],[0.4174,0.4724],[0.4174,0.4645],[0.4174,0.4567],[0.4174,0.4488],[0.4174,0.4409],[0.4174,0.433],[0.4174,0.4252],[0.4174,0.4173],[0.4174,0.4094],[0.4174,0.4016],[0.4174,0.3937],[0.4174,0.3858],[0.4174,0.3779],[0.4174,0.3701],[0.4174,0.3622],[0.4174,0.3543],[0.4174,0.3464],[0.4174,0.3386],[0.4174,0.3307],[0.4174,0.3228],[0.4174,0.3149],[0.4174,0.3071],[0.4174,0.2992],[0.4174,0.2913],[0.4174,0.2834],[0.4174,0.2756],[0.4174,0.2677],[0.4174,0.2598],[0.4174,0.252],[0.4174,0.2441],[0.4174,0.2362],[0.4174,0.2283],[0.4174,0.2205],[0.4174,0.2126],[0.4174,0.2047],[0.4174,0.1968],[0.4174,0.189],[0.4174,0.1811],[0.4174,0.1732],[0.4174,0.1653],[0.4174,0.1575],[0.4174,0.1496],[0.4174,0.1417],[0.4174,0.1339],[0.4174,0.126],[0.4174,0.1181],[0.4174,0.1102],[0.4174,0.1024],[0.4174,0.0945],[0.4174,0.0866],[0.4174,0.0787],[0.4174,0.0709],[0.4174,0.063],[0.4174,0.0551],[0.4174,0.0472],[0.4174,0.0394],[0.4174,0.0315],[0.4174,0.0236],[0.4174,0.0157],[0.4174,0.0079],[0.4174,0],[0.4252,0.9999],[0.4252,0.9921],[0.4252,0.9842],[0.4252,0.9763],[0.4252,0.9684],[0.4252,0.9606],[0.4252,0.9527],[0.4252,0.9448],[0.4252,0.937],[0.4252,0.9291],[0.4252,0.9212],[0.4252,0.9133],[0.4252,0.9055],[0.4252,0.8976],[0.4252,0.8897],[0.4252,0.8818],[0.4252,0.874],[0.4252,0.8661],[0.4252,0.8582],[0.4252,0.8503],[0.4252,0.8425],[0.4252,0.8346],[0.4252,0.8267],[0.4252,0.8188],[0.4252,0.811],[0.4252,0.8031],[0.4252,0.7952],[0.4252,0.7874],[0.4252,0.7795],[0.4252,0.7716],[0.4252,0.7637],[0.4252,0.7559],[0.4252,0.748],[0.4252,0.7401],[0.4252,0.7322],[0.4252,0.7244],[0.4252,0.7165],[0.4252,0.7086],[0.4252,0.7007],[0.4252,0.6929],[0.4252,0.685],[0.4252,0.6771],[0.4252,0.6693],[0.4252,0.6614],[0.4252,0.6535],[0.4252,0.6456],[0.4252,0.6378],[0.4252,0.6299],[0.4252,0.622],[0.4252,0.6141],[0.4252,0.6063],[0.4252,0.5984],[0.4252,0.5905],[0.4252,0.5826],[0.4252,0.5748],[0.4252,0.5669],[0.4252,0.559],[0.4252,0.5511],[0.4252,0.5433],[0.4252,0.5354],[0.4252,0.5275],[0.4252,0.5197],[0.4252,0.5118],[0.4252,0.5039],[0.4252,0.496],[0.4252,0.4882],[0.4252,0.4803],[0.4252,0.4724],[0.4252,0.4645],[0.4252,0.4567],[0.4252,0.4488],[0.4252,0.4409],[0.4252,0.433],[0.4252,0.4252],[0.4252,0.4173],[0.4252,0.4094],[0.4252,0.4016],[0.4252,0.3937],[0.4252,0.3858],[0.4252,0.3779],[0.4252,0.3701],[0.4252,0.3622],[0.4252,0.3543],[0.4252,0.3464],[0.4252,0.3386],[0.4252,0.3307],[0.4252,0.3228],[0.4252,0.3149],[0.4252,0.3071],[0.4252,0.2992],[0.4252,0.2913],[0.4252,0.2834],[0.4252,0.2756],[0.4252,0.2677],[0.4252,0.2598],[0.4252,0.252],[0.4252,0.2441],[0.4252,0.2362],[0.4252,0.2283],[0.4252,0.2205],[0.4252,0.2126],[0.4252,0.2047],[0.4252,0.1968],[0.4252,0.189],[0.4252,0.1811],[0.4252,0.1732],[0.4252,0.1653],[0.4252,0.1575],[0.4252,0.1496],[0.4252,0.1417],[0.4252,0.1339],[0.4252,0.126],[0.4252,0.1181],[0.4252,0.1102],[0.4252,0.1024],[0.4252,0.0945],[0.4252,0.0866],[0.4252,0.0787],[0.4252,0.0709],[0.4252,0.063],[0.4252,0.0551],[0.4252,0.0472],[0.4252,0.0394],[0.4252,0.0315],[0.4252,0.0236],[0.4252,0.0157],[0.4252,0.0079],[0.4252,0],[0.4331,0.9999],[0.4331,0.9921],[0.4331,0.9842],[0.4331,0.9763],[0.4331,0.9684],[0.4331,0.9606],[0.4331,0.9527],[0.4331,0.9448],[0.4331,0.937],[0.4331,0.9291],[0.4331,0.9212],[0.4331,0.9133],[0.4331,0.9055],[0.4331,0.8976],[0.4331,0.8897],[0.4331,0.8818],[0.4331,0.874],[0.4331,0.8661],[0.4331,0.8582],[0.4331,0.8503],[0.4331,0.8425],[0.4331,0.8346],[0.4331,0.8267],[0.4331,0.8188],[0.4331,0.811],[0.4331,0.8031],[0.4331,0.7952],[0.4331,0.7874],[0.4331,0.7795],[0.4331,0.7716],[0.4331,0.7637],[0.4331,0.7559],[0.4331,0.748],[0.4331,0.7401],[0.4331,0.7322],[0.4331,0.7244],[0.4331,0.7165],[0.4331,0.7086],[0.4331,0.7007],[0.4331,0.6929],[0.4331,0.685],[0.4331,0.6771],[0.4331,0.6693],[0.4331,0.6614],[0.4331,0.6535],[0.4331,0.6456],[0.4331,0.6378],[0.4331,0.6299],[0.4331,0.622],[0.4331,0.6141],[0.4331,0.6063],[0.4331,0.5984],[0.4331,0.5905],[0.4331,0.5826],[0.4331,0.5748],[0.4331,0.5669],[0.4331,0.559],[0.4331,0.5511],[0.4331,0.5433],[0.4331,0.5354],[0.4331,0.5275],[0.4331,0.5197],[0.4331,0.5118],[0.4331,0.5039],[0.4331,0.496],[0.4331,0.4882],[0.4331,0.4803],[0.4331,0.4724],[0.4331,0.4645],[0.4331,0.4567],[0.4331,0.4488],[0.4331,0.4409],[0.4331,0.433],[0.4331,0.4252],[0.4331,0.4173],[0.4331,0.4094],[0.4331,0.4016],[0.4331,0.3937],[0.4331,0.3858],[0.4331,0.3779],[0.4331,0.3701],[0.4331,0.3622],[0.4331,0.3543],[0.4331,0.3464],[0.4331,0.3386],[0.4331,0.3307],[0.4331,0.3228],[0.4331,0.3149],[0.4331,0.3071],[0.4331,0.2992],[0.4331,0.2913],[0.4331,0.2834],[0.4331,0.2756],[0.4331,0.2677],[0.4331,0.2598],[0.4331,0.252],[0.4331,0.2441],[0.4331,0.2362],[0.4331,0.2283],[0.4331,0.2205],[0.4331,0.2126],[0.4331,0.2047],[0.4331,0.1968],[0.4331,0.189],[0.4331,0.1811],[0.4331,0.1732],[0.4331,0.1653],[0.4331,0.1575],[0.4331,0.1496],[0.4331,0.1417],[0.4331,0.1339],[0.4331,0.126],[0.4331,0.1181],[0.4331,0.1102],[0.4331,0.1024],[0.4331,0.0945],[0.4331,0.0866],[0.4331,0.0787],[0.4331,0.0709],[0.4331,0.063],[0.4331,0.0551],[0.4331,0.0472],[0.4331,0.0394],[0.4331,0.0315],[0.4331,0.0236],[0.4331,0.0157],[0.4331,0.0079],[0.4331,0],[0.441,0.9999],[0.441,0.9921],[0.441,0.9842],[0.441,0.9763],[0.441,0.9684],[0.441,0.9606],[0.441,0.9527],[0.441,0.9448],[0.441,0.937],[0.441,0.9291],[0.441,0.9212],[0.441,0.9133],[0.441,0.9055],[0.441,0.8976],[0.441,0.8897],[0.441,0.8818],[0.441,0.874],[0.441,0.8661],[0.441,0.8582],[0.441,0.8503],[0.441,0.8425],[0.441,0.8346],[0.441,0.8267],[0.441,0.8188],[0.441,0.811],[0.441,0.8031],[0.441,0.7952],[0.441,0.7874],[0.441,0.7795],[0.441,0.7716],[0.441,0.7637],[0.441,0.7559],[0.441,0.748],[0.441,0.7401],[0.441,0.7322],[0.441,0.7244],[0.441,0.7165],[0.441,0.7086],[0.441,0.7007],[0.441,0.6929],[0.441,0.685],[0.441,0.6771],[0.441,0.6693],[0.441,0.6614],[0.441,0.6535],[0.441,0.6456],[0.441,0.6378],[0.441,0.6299],[0.441,0.622],[0.441,0.6141],[0.441,0.6063],[0.441,0.5984],[0.441,0.5905],[0.441,0.5826],[0.441,0.5748],[0.441,0.5669],[0.441,0.559],[0.441,0.5511],[0.441,0.5433],[0.441,0.5354],[0.441,0.5275],[0.441,0.5197],[0.441,0.5118],[0.441,0.5039],[0.441,0.496],[0.441,0.4882],[0.441,0.4803],[0.441,0.4724],[0.441,0.4645],[0.441,0.4567],[0.441,0.4488],[0.441,0.4409],[0.441,0.433],[0.441,0.4252],[0.441,0.4173],[0.441,0.4094],[0.441,0.4016],[0.441,0.3937],[0.441,0.3858],[0.441,0.3779],[0.441,0.3701],[0.441,0.3622],[0.441,0.3543],[0.441,0.3464],[0.441,0.3386],[0.441,0.3307],[0.441,0.3228],[0.441,0.3149],[0.441,0.3071],[0.441,0.2992],[0.441,0.2913],[0.441,0.2834],[0.441,0.2756],[0.441,0.2677],[0.441,0.2598],[0.441,0.252],[0.441,0.2441],[0.441,0.2362],[0.441,0.2283],[0.441,0.2205],[0.441,0.2126],[0.441,0.2047],[0.441,0.1968],[0.441,0.189],[0.441,0.1811],[0.441,0.1732],[0.441,0.1653],[0.441,0.1575],[0.441,0.1496],[0.441,0.1417],[0.441,0.1339],[0.441,0.126],[0.441,0.1181],[0.441,0.1102],[0.441,0.1024],[0.441,0.0945],[0.441,0.0866],[0.441,0.0787],[0.441,0.0709],[0.441,0.063],[0.441,0.0551],[0.441,0.0472],[0.441,0.0394],[0.441,0.0315],[0.441,0.0236],[0.441,0.0157],[0.441,0.0079],[0.441,0],[0.4489,0.9999],[0.4489,0.9921],[0.4489,0.9842],[0.4489,0.9763],[0.4489,0.9684],[0.4489,0.9606],[0.4489,0.9527],[0.4489,0.9448],[0.4489,0.937],[0.4489,0.9291],[0.4489,0.9212],[0.4489,0.9133],[0.4489,0.9055],[0.4489,0.8976],[0.4489,0.8897],[0.4489,0.8818],[0.4489,0.874],[0.4489,0.8661],[0.4489,0.8582],[0.4489,0.8503],[0.4489,0.8425],[0.4489,0.8346],[0.4489,0.8267],[0.4489,0.8188],[0.4489,0.811],[0.4489,0.8031],[0.4489,0.7952],[0.4489,0.7874],[0.4489,0.7795],[0.4489,0.7716],[0.4489,0.7637],[0.4489,0.7559],[0.4489,0.748],[0.4489,0.7401],[0.4489,0.7322],[0.4489,0.7244],[0.4489,0.7165],[0.4489,0.7086],[0.4489,0.7007],[0.4489,0.6929],[0.4489,0.685],[0.4489,0.6771],[0.4489,0.6693],[0.4489,0.6614],[0.4489,0.6535],[0.4489,0.6456],[0.4489,0.6378],[0.4489,0.6299],[0.4489,0.622],[0.4489,0.6141],[0.4489,0.6063],[0.4489,0.5984],[0.4489,0.5905],[0.4489,0.5826],[0.4489,0.5748],[0.4489,0.5669],[0.4489,0.559],[0.4489,0.5511],[0.4489,0.5433],[0.4489,0.5354],[0.4489,0.5275],[0.4489,0.5197],[0.4489,0.5118],[0.4489,0.5039],[0.4489,0.496],[0.4489,0.4882],[0.4489,0.4803],[0.4489,0.4724],[0.4489,0.4645],[0.4489,0.4567],[0.4489,0.4488],[0.4489,0.4409],[0.4489,0.433],[0.4489,0.4252],[0.4489,0.4173],[0.4489,0.4094],[0.4489,0.4016],[0.4489,0.3937],[0.4489,0.3858],[0.4489,0.3779],[0.4489,0.3701],[0.4489,0.3622],[0.4489,0.3543],[0.4489,0.3464],[0.4489,0.3386],[0.4489,0.3307],[0.4489,0.3228],[0.4489,0.3149],[0.4489,0.3071],[0.4489,0.2992],[0.4489,0.2913],[0.4489,0.2834],[0.4489,0.2756],[0.4489,0.2677],[0.4489,0.2598],[0.4489,0.252],[0.4489,0.2441],[0.4489,0.2362],[0.4489,0.2283],[0.4489,0.2205],[0.4489,0.2126],[0.4489,0.2047],[0.4489,0.1968],[0.4489,0.189],[0.4489,0.1811],[0.4489,0.1732],[0.4489,0.1653],[0.4489,0.1575],[0.4489,0.1496],[0.4489,0.1417],[0.4489,0.1339],[0.4489,0.126],[0.4489,0.1181],[0.4489,0.1102],[0.4489,0.1024],[0.4489,0.0945],[0.4489,0.0866],[0.4489,0.0787],[0.4489,0.0709],[0.4489,0.063],[0.4489,0.0551],[0.4489,0.0472],[0.4489,0.0394],[0.4489,0.0315],[0.4489,0.0236],[0.4489,0.0157],[0.4489,0.0079],[0.4489,0],[0.4567,0.9999],[0.4567,0.9921],[0.4567,0.9842],[0.4567,0.9763],[0.4567,0.9684],[0.4567,0.9606],[0.4567,0.9527],[0.4567,0.9448],[0.4567,0.937],[0.4567,0.9291],[0.4567,0.9212],[0.4567,0.9133],[0.4567,0.9055],[0.4567,0.8976],[0.4567,0.8897],[0.4567,0.8818],[0.4567,0.874],[0.4567,0.8661],[0.4567,0.8582],[0.4567,0.8503],[0.4567,0.8425],[0.4567,0.8346],[0.4567,0.8267],[0.4567,0.8188],[0.4567,0.811],[0.4567,0.8031],[0.4567,0.7952],[0.4567,0.7874],[0.4567,0.7795],[0.4567,0.7716],[0.4567,0.7637],[0.4567,0.7559],[0.4567,0.748],[0.4567,0.7401],[0.4567,0.7322],[0.4567,0.7244],[0.4567,0.7165],[0.4567,0.7086],[0.4567,0.7007],[0.4567,0.6929],[0.4567,0.685],[0.4567,0.6771],[0.4567,0.6693],[0.4567,0.6614],[0.4567,0.6535],[0.4567,0.6456],[0.4567,0.6378],[0.4567,0.6299],[0.4567,0.622],[0.4567,0.6141],[0.4567,0.6063],[0.4567,0.5984],[0.4567,0.5905],[0.4567,0.5826],[0.4567,0.5748],[0.4567,0.5669],[0.4567,0.559],[0.4567,0.5511],[0.4567,0.5433],[0.4567,0.5354],[0.4567,0.5275],[0.4567,0.5197],[0.4567,0.5118],[0.4567,0.5039],[0.4567,0.496],[0.4567,0.4882],[0.4567,0.4803],[0.4567,0.4724],[0.4567,0.4645],[0.4567,0.4567],[0.4567,0.4488],[0.4567,0.4409],[0.4567,0.433],[0.4567,0.4252],[0.4567,0.4173],[0.4567,0.4094],[0.4567,0.4016],[0.4567,0.3937],[0.4567,0.3858],[0.4567,0.3779],[0.4567,0.3701],[0.4567,0.3622],[0.4567,0.3543],[0.4567,0.3464],[0.4567,0.3386],[0.4567,0.3307],[0.4567,0.3228],[0.4567,0.3149],[0.4567,0.3071],[0.4567,0.2992],[0.4567,0.2913],[0.4567,0.2834],[0.4567,0.2756],[0.4567,0.2677],[0.4567,0.2598],[0.4567,0.252],[0.4567,0.2441],[0.4567,0.2362],[0.4567,0.2283],[0.4567,0.2205],[0.4567,0.2126],[0.4567,0.2047],[0.4567,0.1968],[0.4567,0.189],[0.4567,0.1811],[0.4567,0.1732],[0.4567,0.1653],[0.4567,0.1575],[0.4567,0.1496],[0.4567,0.1417],[0.4567,0.1339],[0.4567,0.126],[0.4567,0.1181],[0.4567,0.1102],[0.4567,0.1024],[0.4567,0.0945],[0.4567,0.0866],[0.4567,0.0787],[0.4567,0.0709],[0.4567,0.063],[0.4567,0.0551],[0.4567,0.0472],[0.4567,0.0394],[0.4567,0.0315],[0.4567,0.0236],[0.4567,0.0157],[0.4567,0.0079],[0.4567,0],[0.4646,0.9999],[0.4646,0.9921],[0.4646,0.9842],[0.4646,0.9763],[0.4646,0.9684],[0.4646,0.9606],[0.4646,0.9527],[0.4646,0.9448],[0.4646,0.937],[0.4646,0.9291],[0.4646,0.9212],[0.4646,0.9133],[0.4646,0.9055],[0.4646,0.8976],[0.4646,0.8897],[0.4646,0.8818],[0.4646,0.874],[0.4646,0.8661],[0.4646,0.8582],[0.4646,0.8503],[0.4646,0.8425],[0.4646,0.8346],[0.4646,0.8267],[0.4646,0.8188],[0.4646,0.811],[0.4646,0.8031],[0.4646,0.7952],[0.4646,0.7874],[0.4646,0.7795],[0.4646,0.7716],[0.4646,0.7637],[0.4646,0.7559],[0.4646,0.748],[0.4646,0.7401],[0.4646,0.7322],[0.4646,0.7244],[0.4646,0.7165],[0.4646,0.7086],[0.4646,0.7007],[0.4646,0.6929],[0.4646,0.685],[0.4646,0.6771],[0.4646,0.6693],[0.4646,0.6614],[0.4646,0.6535],[0.4646,0.6456],[0.4646,0.6378],[0.4646,0.6299],[0.4646,0.622],[0.4646,0.6141],[0.4646,0.6063],[0.4646,0.5984],[0.4646,0.5905],[0.4646,0.5826],[0.4646,0.5748],[0.4646,0.5669],[0.4646,0.559],[0.4646,0.5511],[0.4646,0.5433],[0.4646,0.5354],[0.4646,0.5275],[0.4646,0.5197],[0.4646,0.5118],[0.4646,0.5039],[0.4646,0.496],[0.4646,0.4882],[0.4646,0.4803],[0.4646,0.4724],[0.4646,0.4645],[0.4646,0.4567],[0.4646,0.4488],[0.4646,0.4409],[0.4646,0.433],[0.4646,0.4252],[0.4646,0.4173],[0.4646,0.4094],[0.4646,0.4016],[0.4646,0.3937],[0.4646,0.3858],[0.4646,0.3779],[0.4646,0.3701],[0.4646,0.3622],[0.4646,0.3543],[0.4646,0.3464],[0.4646,0.3386],[0.4646,0.3307],[0.4646,0.3228],[0.4646,0.3149],[0.4646,0.3071],[0.4646,0.2992],[0.4646,0.2913],[0.4646,0.2834],[0.4646,0.2756],[0.4646,0.2677],[0.4646,0.2598],[0.4646,0.252],[0.4646,0.2441],[0.4646,0.2362],[0.4646,0.2283],[0.4646,0.2205],[0.4646,0.2126],[0.4646,0.2047],[0.4646,0.1968],[0.4646,0.189],[0.4646,0.1811],[0.4646,0.1732],[0.4646,0.1653],[0.4646,0.1575],[0.4646,0.1496],[0.4646,0.1417],[0.4646,0.1339],[0.4646,0.126],[0.4646,0.1181],[0.4646,0.1102],[0.4646,0.1024],[0.4646,0.0945],[0.4646,0.0866],[0.4646,0.0787],[0.4646,0.0709],[0.4646,0.063],[0.4646,0.0551],[0.4646,0.0472],[0.4646,0.0394],[0.4646,0.0315],[0.4646,0.0236],[0.4646,0.0157],[0.4646,0.0079],[0.4646,0],[0.4725,0.9999],[0.4725,0.9921],[0.4725,0.9842],[0.4725,0.9763],[0.4725,0.9684],[0.4725,0.9606],[0.4725,0.9527],[0.4725,0.9448],[0.4725,0.937],[0.4725,0.9291],[0.4725,0.9212],[0.4725,0.9133],[0.4725,0.9055],[0.4725,0.8976],[0.4725,0.8897],[0.4725,0.8818],[0.4725,0.874],[0.4725,0.8661],[0.4725,0.8582],[0.4725,0.8503],[0.4725,0.8425],[0.4725,0.8346],[0.4725,0.8267],[0.4725,0.8188],[0.4725,0.811],[0.4725,0.8031],[0.4725,0.7952],[0.4725,0.7874],[0.4725,0.7795],[0.4725,0.7716],[0.4725,0.7637],[0.4725,0.7559],[0.4725,0.748],[0.4725,0.7401],[0.4725,0.7322],[0.4725,0.7244],[0.4725,0.7165],[0.4725,0.7086],[0.4725,0.7007],[0.4725,0.6929],[0.4725,0.685],[0.4725,0.6771],[0.4725,0.6693],[0.4725,0.6614],[0.4725,0.6535],[0.4725,0.6456],[0.4725,0.6378],[0.4725,0.6299],[0.4725,0.622],[0.4725,0.6141],[0.4725,0.6063],[0.4725,0.5984],[0.4725,0.5905],[0.4725,0.5826],[0.4725,0.5748],[0.4725,0.5669],[0.4725,0.559],[0.4725,0.5511],[0.4725,0.5433],[0.4725,0.5354],[0.4725,0.5275],[0.4725,0.5197],[0.4725,0.5118],[0.4725,0.5039],[0.4725,0.496],[0.4725,0.4882],[0.4725,0.4803],[0.4725,0.4724],[0.4725,0.4645],[0.4725,0.4567],[0.4725,0.4488],[0.4725,0.4409],[0.4725,0.433],[0.4725,0.4252],[0.4725,0.4173],[0.4725,0.4094],[0.4725,0.4016],[0.4725,0.3937],[0.4725,0.3858],[0.4725,0.3779],[0.4725,0.3701],[0.4725,0.3622],[0.4725,0.3543],[0.4725,0.3464],[0.4725,0.3386],[0.4725,0.3307],[0.4725,0.3228],[0.4725,0.3149],[0.4725,0.3071],[0.4725,0.2992],[0.4725,0.2913],[0.4725,0.2834],[0.4725,0.2756],[0.4725,0.2677],[0.4725,0.2598],[0.4725,0.252],[0.4725,0.2441],[0.4725,0.2362],[0.4725,0.2283],[0.4725,0.2205],[0.4725,0.2126],[0.4725,0.2047],[0.4725,0.1968],[0.4725,0.189],[0.4725,0.1811],[0.4725,0.1732],[0.4725,0.1653],[0.4725,0.1575],[0.4725,0.1496],[0.4725,0.1417],[0.4725,0.1339],[0.4725,0.126],[0.4725,0.1181],[0.4725,0.1102],[0.4725,0.1024],[0.4725,0.0945],[0.4725,0.0866],[0.4725,0.0787],[0.4725,0.0709],[0.4725,0.063],[0.4725,0.0551],[0.4725,0.0472],[0.4725,0.0394],[0.4725,0.0315],[0.4725,0.0236],[0.4725,0.0157],[0.4725,0.0079],[0.4725,0],[0.4803,0.9999],[0.4803,0.9921],[0.4803,0.9842],[0.4803,0.9763],[0.4803,0.9684],[0.4803,0.9606],[0.4803,0.9527],[0.4803,0.9448],[0.4803,0.937],[0.4803,0.9291],[0.4803,0.9212],[0.4803,0.9133],[0.4803,0.9055],[0.4803,0.8976],[0.4803,0.8897],[0.4803,0.8818],[0.4803,0.874],[0.4803,0.8661],[0.4803,0.8582],[0.4803,0.8503],[0.4803,0.8425],[0.4803,0.8346],[0.4803,0.8267],[0.4803,0.8188],[0.4803,0.811],[0.4803,0.8031],[0.4803,0.7952],[0.4803,0.7874],[0.4803,0.7795],[0.4803,0.7716],[0.4803,0.7637],[0.4803,0.7559],[0.4803,0.748],[0.4803,0.7401],[0.4803,0.7322],[0.4803,0.7244],[0.4803,0.7165],[0.4803,0.7086],[0.4803,0.7007],[0.4803,0.6929],[0.4803,0.685],[0.4803,0.6771],[0.4803,0.6693],[0.4803,0.6614],[0.4803,0.6535],[0.4803,0.6456],[0.4803,0.6378],[0.4803,0.6299],[0.4803,0.622],[0.4803,0.6141],[0.4803,0.6063],[0.4803,0.5984],[0.4803,0.5905],[0.4803,0.5826],[0.4803,0.5748],[0.4803,0.5669],[0.4803,0.559],[0.4803,0.5511],[0.4803,0.5433],[0.4803,0.5354],[0.4803,0.5275],[0.4803,0.5197],[0.4803,0.5118],[0.4803,0.5039],[0.4803,0.496],[0.4803,0.4882],[0.4803,0.4803],[0.4803,0.4724],[0.4803,0.4645],[0.4803,0.4567],[0.4803,0.4488],[0.4803,0.4409],[0.4803,0.433],[0.4803,0.4252],[0.4803,0.4173],[0.4803,0.4094],[0.4803,0.4016],[0.4803,0.3937],[0.4803,0.3858],[0.4803,0.3779],[0.4803,0.3701],[0.4803,0.3622],[0.4803,0.3543],[0.4803,0.3464],[0.4803,0.3386],[0.4803,0.3307],[0.4803,0.3228],[0.4803,0.3149],[0.4803,0.3071],[0.4803,0.2992],[0.4803,0.2913],[0.4803,0.2834],[0.4803,0.2756],[0.4803,0.2677],[0.4803,0.2598],[0.4803,0.252],[0.4803,0.2441],[0.4803,0.2362],[0.4803,0.2283],[0.4803,0.2205],[0.4803,0.2126],[0.4803,0.2047],[0.4803,0.1968],[0.4803,0.189],[0.4803,0.1811],[0.4803,0.1732],[0.4803,0.1653],[0.4803,0.1575],[0.4803,0.1496],[0.4803,0.1417],[0.4803,0.1339],[0.4803,0.126],[0.4803,0.1181],[0.4803,0.1102],[0.4803,0.1024],[0.4803,0.0945],[0.4803,0.0866],[0.4803,0.0787],[0.4803,0.0709],[0.4803,0.063],[0.4803,0.0551],[0.4803,0.0472],[0.4803,0.0394],[0.4803,0.0315],[0.4803,0.0236],[0.4803,0.0157],[0.4803,0.0079],[0.4803,0],[0.4882,0.9999],[0.4882,0.9921],[0.4882,0.9842],[0.4882,0.9763],[0.4882,0.9684],[0.4882,0.9606],[0.4882,0.9527],[0.4882,0.9448],[0.4882,0.937],[0.4882,0.9291],[0.4882,0.9212],[0.4882,0.9133],[0.4882,0.9055],[0.4882,0.8976],[0.4882,0.8897],[0.4882,0.8818],[0.4882,0.874],[0.4882,0.8661],[0.4882,0.8582],[0.4882,0.8503],[0.4882,0.8425],[0.4882,0.8346],[0.4882,0.8267],[0.4882,0.8188],[0.4882,0.811],[0.4882,0.8031],[0.4882,0.7952],[0.4882,0.7874],[0.4882,0.7795],[0.4882,0.7716],[0.4882,0.7637],[0.4882,0.7559],[0.4882,0.748],[0.4882,0.7401],[0.4882,0.7322],[0.4882,0.7244],[0.4882,0.7165],[0.4882,0.7086],[0.4882,0.7007],[0.4882,0.6929],[0.4882,0.685],[0.4882,0.6771],[0.4882,0.6693],[0.4882,0.6614],[0.4882,0.6535],[0.4882,0.6456],[0.4882,0.6378],[0.4882,0.6299],[0.4882,0.622],[0.4882,0.6141],[0.4882,0.6063],[0.4882,0.5984],[0.4882,0.5905],[0.4882,0.5826],[0.4882,0.5748],[0.4882,0.5669],[0.4882,0.559],[0.4882,0.5511],[0.4882,0.5433],[0.4882,0.5354],[0.4882,0.5275],[0.4882,0.5197],[0.4882,0.5118],[0.4882,0.5039],[0.4882,0.496],[0.4882,0.4882],[0.4882,0.4803],[0.4882,0.4724],[0.4882,0.4645],[0.4882,0.4567],[0.4882,0.4488],[0.4882,0.4409],[0.4882,0.433],[0.4882,0.4252],[0.4882,0.4173],[0.4882,0.4094],[0.4882,0.4016],[0.4882,0.3937],[0.4882,0.3858],[0.4882,0.3779],[0.4882,0.3701],[0.4882,0.3622],[0.4882,0.3543],[0.4882,0.3464],[0.4882,0.3386],[0.4882,0.3307],[0.4882,0.3228],[0.4882,0.3149],[0.4882,0.3071],[0.4882,0.2992],[0.4882,0.2913],[0.4882,0.2834],[0.4882,0.2756],[0.4882,0.2677],[0.4882,0.2598],[0.4882,0.252],[0.4882,0.2441],[0.4882,0.2362],[0.4882,0.2283],[0.4882,0.2205],[0.4882,0.2126],[0.4882,0.2047],[0.4882,0.1968],[0.4882,0.189],[0.4882,0.1811],[0.4882,0.1732],[0.4882,0.1653],[0.4882,0.1575],[0.4882,0.1496],[0.4882,0.1417],[0.4882,0.1339],[0.4882,0.126],[0.4882,0.1181],[0.4882,0.1102],[0.4882,0.1024],[0.4882,0.0945],[0.4882,0.0866],[0.4882,0.0787],[0.4882,0.0709],[0.4882,0.063],[0.4882,0.0551],[0.4882,0.0472],[0.4882,0.0394],[0.4882,0.0315],[0.4882,0.0236],[0.4882,0.0157],[0.4882,0.0079],[0.4882,0],[0.4961,0.9999],[0.4961,0.9921],[0.4961,0.9842],[0.4961,0.9763],[0.4961,0.9684],[0.4961,0.9606],[0.4961,0.9527],[0.4961,0.9448],[0.4961,0.937],[0.4961,0.9291],[0.4961,0.9212],[0.4961,0.9133],[0.4961,0.9055],[0.4961,0.8976],[0.4961,0.8897],[0.4961,0.8818],[0.4961,0.874],[0.4961,0.8661],[0.4961,0.8582],[0.4961,0.8503],[0.4961,0.8425],[0.4961,0.8346],[0.4961,0.8267],[0.4961,0.8188],[0.4961,0.811],[0.4961,0.8031],[0.4961,0.7952],[0.4961,0.7874],[0.4961,0.7795],[0.4961,0.7716],[0.4961,0.7637],[0.4961,0.7559],[0.4961,0.748],[0.4961,0.7401],[0.4961,0.7322],[0.4961,0.7244],[0.4961,0.7165],[0.4961,0.7086],[0.4961,0.7007],[0.4961,0.6929],[0.4961,0.685],[0.4961,0.6771],[0.4961,0.6693],[0.4961,0.6614],[0.4961,0.6535],[0.4961,0.6456],[0.4961,0.6378],[0.4961,0.6299],[0.4961,0.622],[0.4961,0.6141],[0.4961,0.6063],[0.4961,0.5984],[0.4961,0.5905],[0.4961,0.5826],[0.4961,0.5748],[0.4961,0.5669],[0.4961,0.559],[0.4961,0.5511],[0.4961,0.5433],[0.4961,0.5354],[0.4961,0.5275],[0.4961,0.5197],[0.4961,0.5118],[0.4961,0.5039],[0.4961,0.496],[0.4961,0.4882],[0.4961,0.4803],[0.4961,0.4724],[0.4961,0.4645],[0.4961,0.4567],[0.4961,0.4488],[0.4961,0.4409],[0.4961,0.433],[0.4961,0.4252],[0.4961,0.4173],[0.4961,0.4094],[0.4961,0.4016],[0.4961,0.3937],[0.4961,0.3858],[0.4961,0.3779],[0.4961,0.3701],[0.4961,0.3622],[0.4961,0.3543],[0.4961,0.3464],[0.4961,0.3386],[0.4961,0.3307],[0.4961,0.3228],[0.4961,0.3149],[0.4961,0.3071],[0.4961,0.2992],[0.4961,0.2913],[0.4961,0.2834],[0.4961,0.2756],[0.4961,0.2677],[0.4961,0.2598],[0.4961,0.252],[0.4961,0.2441],[0.4961,0.2362],[0.4961,0.2283],[0.4961,0.2205],[0.4961,0.2126],[0.4961,0.2047],[0.4961,0.1968],[0.4961,0.189],[0.4961,0.1811],[0.4961,0.1732],[0.4961,0.1653],[0.4961,0.1575],[0.4961,0.1496],[0.4961,0.1417],[0.4961,0.1339],[0.4961,0.126],[0.4961,0.1181],[0.4961,0.1102],[0.4961,0.1024],[0.4961,0.0945],[0.4961,0.0866],[0.4961,0.0787],[0.4961,0.0709],[0.4961,0.063],[0.4961,0.0551],[0.4961,0.0472],[0.4961,0.0394],[0.4961,0.0315],[0.4961,0.0236],[0.4961,0.0157],[0.4961,0.0079],[0.4961,0],[0.504,0.9999],[0.504,0.9921],[0.504,0.9842],[0.504,0.9763],[0.504,0.9684],[0.504,0.9606],[0.504,0.9527],[0.504,0.9448],[0.504,0.937],[0.504,0.9291],[0.504,0.9212],[0.504,0.9133],[0.504,0.9055],[0.504,0.8976],[0.504,0.8897],[0.504,0.8818],[0.504,0.874],[0.504,0.8661],[0.504,0.8582],[0.504,0.8503],[0.504,0.8425],[0.504,0.8346],[0.504,0.8267],[0.504,0.8188],[0.504,0.811],[0.504,0.8031],[0.504,0.7952],[0.504,0.7874],[0.504,0.7795],[0.504,0.7716],[0.504,0.7637],[0.504,0.7559],[0.504,0.748],[0.504,0.7401],[0.504,0.7322],[0.504,0.7244],[0.504,0.7165],[0.504,0.7086],[0.504,0.7007],[0.504,0.6929],[0.504,0.685],[0.504,0.6771],[0.504,0.6693],[0.504,0.6614],[0.504,0.6535],[0.504,0.6456],[0.504,0.6378],[0.504,0.6299],[0.504,0.622],[0.504,0.6141],[0.504,0.6063],[0.504,0.5984],[0.504,0.5905],[0.504,0.5826],[0.504,0.5748],[0.504,0.5669],[0.504,0.559],[0.504,0.5511],[0.504,0.5433],[0.504,0.5354],[0.504,0.5275],[0.504,0.5197],[0.504,0.5118],[0.504,0.5039],[0.504,0.496],[0.504,0.4882],[0.504,0.4803],[0.504,0.4724],[0.504,0.4645],[0.504,0.4567],[0.504,0.4488],[0.504,0.4409],[0.504,0.433],[0.504,0.4252],[0.504,0.4173],[0.504,0.4094],[0.504,0.4016],[0.504,0.3937],[0.504,0.3858],[0.504,0.3779],[0.504,0.3701],[0.504,0.3622],[0.504,0.3543],[0.504,0.3464],[0.504,0.3386],[0.504,0.3307],[0.504,0.3228],[0.504,0.3149],[0.504,0.3071],[0.504,0.2992],[0.504,0.2913],[0.504,0.2834],[0.504,0.2756],[0.504,0.2677],[0.504,0.2598],[0.504,0.252],[0.504,0.2441],[0.504,0.2362],[0.504,0.2283],[0.504,0.2205],[0.504,0.2126],[0.504,0.2047],[0.504,0.1968],[0.504,0.189],[0.504,0.1811],[0.504,0.1732],[0.504,0.1653],[0.504,0.1575],[0.504,0.1496],[0.504,0.1417],[0.504,0.1339],[0.504,0.126],[0.504,0.1181],[0.504,0.1102],[0.504,0.1024],[0.504,0.0945],[0.504,0.0866],[0.504,0.0787],[0.504,0.0709],[0.504,0.063],[0.504,0.0551],[0.504,0.0472],[0.504,0.0394],[0.504,0.0315],[0.504,0.0236],[0.504,0.0157],[0.504,0.0079],[0.504,0],[0.5118,0.9999],[0.5118,0.9921],[0.5118,0.9842],[0.5118,0.9763],[0.5118,0.9684],[0.5118,0.9606],[0.5118,0.9527],[0.5118,0.9448],[0.5118,0.937],[0.5118,0.9291],[0.5118,0.9212],[0.5118,0.9133],[0.5118,0.9055],[0.5118,0.8976],[0.5118,0.8897],[0.5118,0.8818],[0.5118,0.874],[0.5118,0.8661],[0.5118,0.8582],[0.5118,0.8503],[0.5118,0.8425],[0.5118,0.8346],[0.5118,0.8267],[0.5118,0.8188],[0.5118,0.811],[0.5118,0.8031],[0.5118,0.7952],[0.5118,0.7874],[0.5118,0.7795],[0.5118,0.7716],[0.5118,0.7637],[0.5118,0.7559],[0.5118,0.748],[0.5118,0.7401],[0.5118,0.7322],[0.5118,0.7244],[0.5118,0.7165],[0.5118,0.7086],[0.5118,0.7007],[0.5118,0.6929],[0.5118,0.685],[0.5118,0.6771],[0.5118,0.6693],[0.5118,0.6614],[0.5118,0.6535],[0.5118,0.6456],[0.5118,0.6378],[0.5118,0.6299],[0.5118,0.622],[0.5118,0.6141],[0.5118,0.6063],[0.5118,0.5984],[0.5118,0.5905],[0.5118,0.5826],[0.5118,0.5748],[0.5118,0.5669],[0.5118,0.559],[0.5118,0.5511],[0.5118,0.5433],[0.5118,0.5354],[0.5118,0.5275],[0.5118,0.5197],[0.5118,0.5118],[0.5118,0.5039],[0.5118,0.496],[0.5118,0.4882],[0.5118,0.4803],[0.5118,0.4724],[0.5118,0.4645],[0.5118,0.4567],[0.5118,0.4488],[0.5118,0.4409],[0.5118,0.433],[0.5118,0.4252],[0.5118,0.4173],[0.5118,0.4094],[0.5118,0.4016],[0.5118,0.3937],[0.5118,0.3858],[0.5118,0.3779],[0.5118,0.3701],[0.5118,0.3622],[0.5118,0.3543],[0.5118,0.3464],[0.5118,0.3386],[0.5118,0.3307],[0.5118,0.3228],[0.5118,0.3149],[0.5118,0.3071],[0.5118,0.2992],[0.5118,0.2913],[0.5118,0.2834],[0.5118,0.2756],[0.5118,0.2677],[0.5118,0.2598],[0.5118,0.252],[0.5118,0.2441],[0.5118,0.2362],[0.5118,0.2283],[0.5118,0.2205],[0.5118,0.2126],[0.5118,0.2047],[0.5118,0.1968],[0.5118,0.189],[0.5118,0.1811],[0.5118,0.1732],[0.5118,0.1653],[0.5118,0.1575],[0.5118,0.1496],[0.5118,0.1417],[0.5118,0.1339],[0.5118,0.126],[0.5118,0.1181],[0.5118,0.1102],[0.5118,0.1024],[0.5118,0.0945],[0.5118,0.0866],[0.5118,0.0787],[0.5118,0.0709],[0.5118,0.063],[0.5118,0.0551],[0.5118,0.0472],[0.5118,0.0394],[0.5118,0.0315],[0.5118,0.0236],[0.5118,0.0157],[0.5118,0.0079],[0.5118,0],[0.5197,0.9999],[0.5197,0.9921],[0.5197,0.9842],[0.5197,0.9763],[0.5197,0.9684],[0.5197,0.9606],[0.5197,0.9527],[0.5197,0.9448],[0.5197,0.937],[0.5197,0.9291],[0.5197,0.9212],[0.5197,0.9133],[0.5197,0.9055],[0.5197,0.8976],[0.5197,0.8897],[0.5197,0.8818],[0.5197,0.874],[0.5197,0.8661],[0.5197,0.8582],[0.5197,0.8503],[0.5197,0.8425],[0.5197,0.8346],[0.5197,0.8267],[0.5197,0.8188],[0.5197,0.811],[0.5197,0.8031],[0.5197,0.7952],[0.5197,0.7874],[0.5197,0.7795],[0.5197,0.7716],[0.5197,0.7637],[0.5197,0.7559],[0.5197,0.748],[0.5197,0.7401],[0.5197,0.7322],[0.5197,0.7244],[0.5197,0.7165],[0.5197,0.7086],[0.5197,0.7007],[0.5197,0.6929],[0.5197,0.685],[0.5197,0.6771],[0.5197,0.6693],[0.5197,0.6614],[0.5197,0.6535],[0.5197,0.6456],[0.5197,0.6378],[0.5197,0.6299],[0.5197,0.622],[0.5197,0.6141],[0.5197,0.6063],[0.5197,0.5984],[0.5197,0.5905],[0.5197,0.5826],[0.5197,0.5748],[0.5197,0.5669],[0.5197,0.559],[0.5197,0.5511],[0.5197,0.5433],[0.5197,0.5354],[0.5197,0.5275],[0.5197,0.5197],[0.5197,0.5118],[0.5197,0.5039],[0.5197,0.496],[0.5197,0.4882],[0.5197,0.4803],[0.5197,0.4724],[0.5197,0.4645],[0.5197,0.4567],[0.5197,0.4488],[0.5197,0.4409],[0.5197,0.433],[0.5197,0.4252],[0.5197,0.4173],[0.5197,0.4094],[0.5197,0.4016],[0.5197,0.3937],[0.5197,0.3858],[0.5197,0.3779],[0.5197,0.3701],[0.5197,0.3622],[0.5197,0.3543],[0.5197,0.3464],[0.5197,0.3386],[0.5197,0.3307],[0.5197,0.3228],[0.5197,0.3149],[0.5197,0.3071],[0.5197,0.2992],[0.5197,0.2913],[0.5197,0.2834],[0.5197,0.2756],[0.5197,0.2677],[0.5197,0.2598],[0.5197,0.252],[0.5197,0.2441],[0.5197,0.2362],[0.5197,0.2283],[0.5197,0.2205],[0.5197,0.2126],[0.5197,0.2047],[0.5197,0.1968],[0.5197,0.189],[0.5197,0.1811],[0.5197,0.1732],[0.5197,0.1653],[0.5197,0.1575],[0.5197,0.1496],[0.5197,0.1417],[0.5197,0.1339],[0.5197,0.126],[0.5197,0.1181],[0.5197,0.1102],[0.5197,0.1024],[0.5197,0.0945],[0.5197,0.0866],[0.5197,0.0787],[0.5197,0.0709],[0.5197,0.063],[0.5197,0.0551],[0.5197,0.0472],[0.5197,0.0394],[0.5197,0.0315],[0.5197,0.0236],[0.5197,0.0157],[0.5197,0.0079],[0.5197,0],[0.5276,0.9999],[0.5276,0.9921],[0.5276,0.9842],[0.5276,0.9763],[0.5276,0.9684],[0.5276,0.9606],[0.5276,0.9527],[0.5276,0.9448],[0.5276,0.937],[0.5276,0.9291],[0.5276,0.9212],[0.5276,0.9133],[0.5276,0.9055],[0.5276,0.8976],[0.5276,0.8897],[0.5276,0.8818],[0.5276,0.874],[0.5276,0.8661],[0.5276,0.8582],[0.5276,0.8503],[0.5276,0.8425],[0.5276,0.8346],[0.5276,0.8267],[0.5276,0.8188],[0.5276,0.811],[0.5276,0.8031],[0.5276,0.7952],[0.5276,0.7874],[0.5276,0.7795],[0.5276,0.7716],[0.5276,0.7637],[0.5276,0.7559],[0.5276,0.748],[0.5276,0.7401],[0.5276,0.7322],[0.5276,0.7244],[0.5276,0.7165],[0.5276,0.7086],[0.5276,0.7007],[0.5276,0.6929],[0.5276,0.685],[0.5276,0.6771],[0.5276,0.6693],[0.5276,0.6614],[0.5276,0.6535],[0.5276,0.6456],[0.5276,0.6378],[0.5276,0.6299],[0.5276,0.622],[0.5276,0.6141],[0.5276,0.6063],[0.5276,0.5984],[0.5276,0.5905],[0.5276,0.5826],[0.5276,0.5748],[0.5276,0.5669],[0.5276,0.559],[0.5276,0.5511],[0.5276,0.5433],[0.5276,0.5354],[0.5276,0.5275],[0.5276,0.5197],[0.5276,0.5118],[0.5276,0.5039],[0.5276,0.496],[0.5276,0.4882],[0.5276,0.4803],[0.5276,0.4724],[0.5276,0.4645],[0.5276,0.4567],[0.5276,0.4488],[0.5276,0.4409],[0.5276,0.433],[0.5276,0.4252],[0.5276,0.4173],[0.5276,0.4094],[0.5276,0.4016],[0.5276,0.3937],[0.5276,0.3858],[0.5276,0.3779],[0.5276,0.3701],[0.5276,0.3622],[0.5276,0.3543],[0.5276,0.3464],[0.5276,0.3386],[0.5276,0.3307],[0.5276,0.3228],[0.5276,0.3149],[0.5276,0.3071],[0.5276,0.2992],[0.5276,0.2913],[0.5276,0.2834],[0.5276,0.2756],[0.5276,0.2677],[0.5276,0.2598],[0.5276,0.252],[0.5276,0.2441],[0.5276,0.2362],[0.5276,0.2283],[0.5276,0.2205],[0.5276,0.2126],[0.5276,0.2047],[0.5276,0.1968],[0.5276,0.189],[0.5276,0.1811],[0.5276,0.1732],[0.5276,0.1653],[0.5276,0.1575],[0.5276,0.1496],[0.5276,0.1417],[0.5276,0.1339],[0.5276,0.126],[0.5276,0.1181],[0.5276,0.1102],[0.5276,0.1024],[0.5276,0.0945],[0.5276,0.0866],[0.5276,0.0787],[0.5276,0.0709],[0.5276,0.063],[0.5276,0.0551],[0.5276,0.0472],[0.5276,0.0394],[0.5276,0.0315],[0.5276,0.0236],[0.5276,0.0157],[0.5276,0.0079],[0.5276,0],[0.5355,0.9999],[0.5355,0.9921],[0.5355,0.9842],[0.5355,0.9763],[0.5355,0.9684],[0.5355,0.9606],[0.5355,0.9527],[0.5355,0.9448],[0.5355,0.937],[0.5355,0.9291],[0.5355,0.9212],[0.5355,0.9133],[0.5355,0.9055],[0.5355,0.8976],[0.5355,0.8897],[0.5355,0.8818],[0.5355,0.874],[0.5355,0.8661],[0.5355,0.8582],[0.5355,0.8503],[0.5355,0.8425],[0.5355,0.8346],[0.5355,0.8267],[0.5355,0.8188],[0.5355,0.811],[0.5355,0.8031],[0.5355,0.7952],[0.5355,0.7874],[0.5355,0.7795],[0.5355,0.7716],[0.5355,0.7637],[0.5355,0.7559],[0.5355,0.748],[0.5355,0.7401],[0.5355,0.7322],[0.5355,0.7244],[0.5355,0.7165],[0.5355,0.7086],[0.5355,0.7007],[0.5355,0.6929],[0.5355,0.685],[0.5355,0.6771],[0.5355,0.6693],[0.5355,0.6614],[0.5355,0.6535],[0.5355,0.6456],[0.5355,0.6378],[0.5355,0.6299],[0.5355,0.622],[0.5355,0.6141],[0.5355,0.6063],[0.5355,0.5984],[0.5355,0.5905],[0.5355,0.5826],[0.5355,0.5748],[0.5355,0.5669],[0.5355,0.559],[0.5355,0.5511],[0.5355,0.5433],[0.5355,0.5354],[0.5355,0.5275],[0.5355,0.5197],[0.5355,0.5118],[0.5355,0.5039],[0.5355,0.496],[0.5355,0.4882],[0.5355,0.4803],[0.5355,0.4724],[0.5355,0.4645],[0.5355,0.4567],[0.5355,0.4488],[0.5355,0.4409],[0.5355,0.433],[0.5355,0.4252],[0.5355,0.4173],[0.5355,0.4094],[0.5355,0.4016],[0.5355,0.3937],[0.5355,0.3858],[0.5355,0.3779],[0.5355,0.3701],[0.5355,0.3622],[0.5355,0.3543],[0.5355,0.3464],[0.5355,0.3386],[0.5355,0.3307],[0.5355,0.3228],[0.5355,0.3149],[0.5355,0.3071],[0.5355,0.2992],[0.5355,0.2913],[0.5355,0.2834],[0.5355,0.2756],[0.5355,0.2677],[0.5355,0.2598],[0.5355,0.252],[0.5355,0.2441],[0.5355,0.2362],[0.5355,0.2283],[0.5355,0.2205],[0.5355,0.2126],[0.5355,0.2047],[0.5355,0.1968],[0.5355,0.189],[0.5355,0.1811],[0.5355,0.1732],[0.5355,0.1653],[0.5355,0.1575],[0.5355,0.1496],[0.5355,0.1417],[0.5355,0.1339],[0.5355,0.126],[0.5355,0.1181],[0.5355,0.1102],[0.5355,0.1024],[0.5355,0.0945],[0.5355,0.0866],[0.5355,0.0787],[0.5355,0.0709],[0.5355,0.063],[0.5355,0.0551],[0.5355,0.0472],[0.5355,0.0394],[0.5355,0.0315],[0.5355,0.0236],[0.5355,0.0157],[0.5355,0.0079],[0.5355,0],[0.5433,0.9999],[0.5433,0.9921],[0.5433,0.9842],[0.5433,0.9763],[0.5433,0.9684],[0.5433,0.9606],[0.5433,0.9527],[0.5433,0.9448],[0.5433,0.937],[0.5433,0.9291],[0.5433,0.9212],[0.5433,0.9133],[0.5433,0.9055],[0.5433,0.8976],[0.5433,0.8897],[0.5433,0.8818],[0.5433,0.874],[0.5433,0.8661],[0.5433,0.8582],[0.5433,0.8503],[0.5433,0.8425],[0.5433,0.8346],[0.5433,0.8267],[0.5433,0.8188],[0.5433,0.811],[0.5433,0.8031],[0.5433,0.7952],[0.5433,0.7874],[0.5433,0.7795],[0.5433,0.7716],[0.5433,0.7637],[0.5433,0.7559],[0.5433,0.748],[0.5433,0.7401],[0.5433,0.7322],[0.5433,0.7244],[0.5433,0.7165],[0.5433,0.7086],[0.5433,0.7007],[0.5433,0.6929],[0.5433,0.685],[0.5433,0.6771],[0.5433,0.6693],[0.5433,0.6614],[0.5433,0.6535],[0.5433,0.6456],[0.5433,0.6378],[0.5433,0.6299],[0.5433,0.622],[0.5433,0.6141],[0.5433,0.6063],[0.5433,0.5984],[0.5433,0.5905],[0.5433,0.5826],[0.5433,0.5748],[0.5433,0.5669],[0.5433,0.559],[0.5433,0.5511],[0.5433,0.5433],[0.5433,0.5354],[0.5433,0.5275],[0.5433,0.5197],[0.5433,0.5118],[0.5433,0.5039],[0.5433,0.496],[0.5433,0.4882],[0.5433,0.4803],[0.5433,0.4724],[0.5433,0.4645],[0.5433,0.4567],[0.5433,0.4488],[0.5433,0.4409],[0.5433,0.433],[0.5433,0.4252],[0.5433,0.4173],[0.5433,0.4094],[0.5433,0.4016],[0.5433,0.3937],[0.5433,0.3858],[0.5433,0.3779],[0.5433,0.3701],[0.5433,0.3622],[0.5433,0.3543],[0.5433,0.3464],[0.5433,0.3386],[0.5433,0.3307],[0.5433,0.3228],[0.5433,0.3149],[0.5433,0.3071],[0.5433,0.2992],[0.5433,0.2913],[0.5433,0.2834],[0.5433,0.2756],[0.5433,0.2677],[0.5433,0.2598],[0.5433,0.252],[0.5433,0.2441],[0.5433,0.2362],[0.5433,0.2283],[0.5433,0.2205],[0.5433,0.2126],[0.5433,0.2047],[0.5433,0.1968],[0.5433,0.189],[0.5433,0.1811],[0.5433,0.1732],[0.5433,0.1653],[0.5433,0.1575],[0.5433,0.1496],[0.5433,0.1417],[0.5433,0.1339],[0.5433,0.126],[0.5433,0.1181],[0.5433,0.1102],[0.5433,0.1024],[0.5433,0.0945],[0.5433,0.0866],[0.5433,0.0787],[0.5433,0.0709],[0.5433,0.063],[0.5433,0.0551],[0.5433,0.0472],[0.5433,0.0394],[0.5433,0.0315],[0.5433,0.0236],[0.5433,0.0157],[0.5433,0.0079],[0.5433,0],[0.5512,0.9999],[0.5512,0.9921],[0.5512,0.9842],[0.5512,0.9763],[0.5512,0.9684],[0.5512,0.9606],[0.5512,0.9527],[0.5512,0.9448],[0.5512,0.937],[0.5512,0.9291],[0.5512,0.9212],[0.5512,0.9133],[0.5512,0.9055],[0.5512,0.8976],[0.5512,0.8897],[0.5512,0.8818],[0.5512,0.874],[0.5512,0.8661],[0.5512,0.8582],[0.5512,0.8503],[0.5512,0.8425],[0.5512,0.8346],[0.5512,0.8267],[0.5512,0.8188],[0.5512,0.811],[0.5512,0.8031],[0.5512,0.7952],[0.5512,0.7874],[0.5512,0.7795],[0.5512,0.7716],[0.5512,0.7637],[0.5512,0.7559],[0.5512,0.748],[0.5512,0.7401],[0.5512,0.7322],[0.5512,0.7244],[0.5512,0.7165],[0.5512,0.7086],[0.5512,0.7007],[0.5512,0.6929],[0.5512,0.685],[0.5512,0.6771],[0.5512,0.6693],[0.5512,0.6614],[0.5512,0.6535],[0.5512,0.6456],[0.5512,0.6378],[0.5512,0.6299],[0.5512,0.622],[0.5512,0.6141],[0.5512,0.6063],[0.5512,0.5984],[0.5512,0.5905],[0.5512,0.5826],[0.5512,0.5748],[0.5512,0.5669],[0.5512,0.559],[0.5512,0.5511],[0.5512,0.5433],[0.5512,0.5354],[0.5512,0.5275],[0.5512,0.5197],[0.5512,0.5118],[0.5512,0.5039],[0.5512,0.496],[0.5512,0.4882],[0.5512,0.4803],[0.5512,0.4724],[0.5512,0.4645],[0.5512,0.4567],[0.5512,0.4488],[0.5512,0.4409],[0.5512,0.433],[0.5512,0.4252],[0.5512,0.4173],[0.5512,0.4094],[0.5512,0.4016],[0.5512,0.3937],[0.5512,0.3858],[0.5512,0.3779],[0.5512,0.3701],[0.5512,0.3622],[0.5512,0.3543],[0.5512,0.3464],[0.5512,0.3386],[0.5512,0.3307],[0.5512,0.3228],[0.5512,0.3149],[0.5512,0.3071],[0.5512,0.2992],[0.5512,0.2913],[0.5512,0.2834],[0.5512,0.2756],[0.5512,0.2677],[0.5512,0.2598],[0.5512,0.252],[0.5512,0.2441],[0.5512,0.2362],[0.5512,0.2283],[0.5512,0.2205],[0.5512,0.2126],[0.5512,0.2047],[0.5512,0.1968],[0.5512,0.189],[0.5512,0.1811],[0.5512,0.1732],[0.5512,0.1653],[0.5512,0.1575],[0.5512,0.1496],[0.5512,0.1417],[0.5512,0.1339],[0.5512,0.126],[0.5512,0.1181],[0.5512,0.1102],[0.5512,0.1024],[0.5512,0.0945],[0.5512,0.0866],[0.5512,0.0787],[0.5512,0.0709],[0.5512,0.063],[0.5512,0.0551],[0.5512,0.0472],[0.5512,0.0394],[0.5512,0.0315],[0.5512,0.0236],[0.5512,0.0157],[0.5512,0.0079],[0.5512,0],[0.5591,0.9999],[0.5591,0.9921],[0.5591,0.9842],[0.5591,0.9763],[0.5591,0.9684],[0.5591,0.9606],[0.5591,0.9527],[0.5591,0.9448],[0.5591,0.937],[0.5591,0.9291],[0.5591,0.9212],[0.5591,0.9133],[0.5591,0.9055],[0.5591,0.8976],[0.5591,0.8897],[0.5591,0.8818],[0.5591,0.874],[0.5591,0.8661],[0.5591,0.8582],[0.5591,0.8503],[0.5591,0.8425],[0.5591,0.8346],[0.5591,0.8267],[0.5591,0.8188],[0.5591,0.811],[0.5591,0.8031],[0.5591,0.7952],[0.5591,0.7874],[0.5591,0.7795],[0.5591,0.7716],[0.5591,0.7637],[0.5591,0.7559],[0.5591,0.748],[0.5591,0.7401],[0.5591,0.7322],[0.5591,0.7244],[0.5591,0.7165],[0.5591,0.7086],[0.5591,0.7007],[0.5591,0.6929],[0.5591,0.685],[0.5591,0.6771],[0.5591,0.6693],[0.5591,0.6614],[0.5591,0.6535],[0.5591,0.6456],[0.5591,0.6378],[0.5591,0.6299],[0.5591,0.622],[0.5591,0.6141],[0.5591,0.6063],[0.5591,0.5984],[0.5591,0.5905],[0.5591,0.5826],[0.5591,0.5748],[0.5591,0.5669],[0.5591,0.559],[0.5591,0.5511],[0.5591,0.5433],[0.5591,0.5354],[0.5591,0.5275],[0.5591,0.5197],[0.5591,0.5118],[0.5591,0.5039],[0.5591,0.496],[0.5591,0.4882],[0.5591,0.4803],[0.5591,0.4724],[0.5591,0.4645],[0.5591,0.4567],[0.5591,0.4488],[0.5591,0.4409],[0.5591,0.433],[0.5591,0.4252],[0.5591,0.4173],[0.5591,0.4094],[0.5591,0.4016],[0.5591,0.3937],[0.5591,0.3858],[0.5591,0.3779],[0.5591,0.3701],[0.5591,0.3622],[0.5591,0.3543],[0.5591,0.3464],[0.5591,0.3386],[0.5591,0.3307],[0.5591,0.3228],[0.5591,0.3149],[0.5591,0.3071],[0.5591,0.2992],[0.5591,0.2913],[0.5591,0.2834],[0.5591,0.2756],[0.5591,0.2677],[0.5591,0.2598],[0.5591,0.252],[0.5591,0.2441],[0.5591,0.2362],[0.5591,0.2283],[0.5591,0.2205],[0.5591,0.2126],[0.5591,0.2047],[0.5591,0.1968],[0.5591,0.189],[0.5591,0.1811],[0.5591,0.1732],[0.5591,0.1653],[0.5591,0.1575],[0.5591,0.1496],[0.5591,0.1417],[0.5591,0.1339],[0.5591,0.126],[0.5591,0.1181],[0.5591,0.1102],[0.5591,0.1024],[0.5591,0.0945],[0.5591,0.0866],[0.5591,0.0787],[0.5591,0.0709],[0.5591,0.063],[0.5591,0.0551],[0.5591,0.0472],[0.5591,0.0394],[0.5591,0.0315],[0.5591,0.0236],[0.5591,0.0157],[0.5591,0.0079],[0.5591,0],[0.567,0.9999],[0.567,0.9921],[0.567,0.9842],[0.567,0.9763],[0.567,0.9684],[0.567,0.9606],[0.567,0.9527],[0.567,0.9448],[0.567,0.937],[0.567,0.9291],[0.567,0.9212],[0.567,0.9133],[0.567,0.9055],[0.567,0.8976],[0.567,0.8897],[0.567,0.8818],[0.567,0.874],[0.567,0.8661],[0.567,0.8582],[0.567,0.8503],[0.567,0.8425],[0.567,0.8346],[0.567,0.8267],[0.567,0.8188],[0.567,0.811],[0.567,0.8031],[0.567,0.7952],[0.567,0.7874],[0.567,0.7795],[0.567,0.7716],[0.567,0.7637],[0.567,0.7559],[0.567,0.748],[0.567,0.7401],[0.567,0.7322],[0.567,0.7244],[0.567,0.7165],[0.567,0.7086],[0.567,0.7007],[0.567,0.6929],[0.567,0.685],[0.567,0.6771],[0.567,0.6693],[0.567,0.6614],[0.567,0.6535],[0.567,0.6456],[0.567,0.6378],[0.567,0.6299],[0.567,0.622],[0.567,0.6141],[0.567,0.6063],[0.567,0.5984],[0.567,0.5905],[0.567,0.5826],[0.567,0.5748],[0.567,0.5669],[0.567,0.559],[0.567,0.5511],[0.567,0.5433],[0.567,0.5354],[0.567,0.5275],[0.567,0.5197],[0.567,0.5118],[0.567,0.5039],[0.567,0.496],[0.567,0.4882],[0.567,0.4803],[0.567,0.4724],[0.567,0.4645],[0.567,0.4567],[0.567,0.4488],[0.567,0.4409],[0.567,0.433],[0.567,0.4252],[0.567,0.4173],[0.567,0.4094],[0.567,0.4016],[0.567,0.3937],[0.567,0.3858],[0.567,0.3779],[0.567,0.3701],[0.567,0.3622],[0.567,0.3543],[0.567,0.3464],[0.567,0.3386],[0.567,0.3307],[0.567,0.3228],[0.567,0.3149],[0.567,0.3071],[0.567,0.2992],[0.567,0.2913],[0.567,0.2834],[0.567,0.2756],[0.567,0.2677],[0.567,0.2598],[0.567,0.252],[0.567,0.2441],[0.567,0.2362],[0.567,0.2283],[0.567,0.2205],[0.567,0.2126],[0.567,0.2047],[0.567,0.1968],[0.567,0.189],[0.567,0.1811],[0.567,0.1732],[0.567,0.1653],[0.567,0.1575],[0.567,0.1496],[0.567,0.1417],[0.567,0.1339],[0.567,0.126],[0.567,0.1181],[0.567,0.1102],[0.567,0.1024],[0.567,0.0945],[0.567,0.0866],[0.567,0.0787],[0.567,0.0709],[0.567,0.063],[0.567,0.0551],[0.567,0.0472],[0.567,0.0394],[0.567,0.0315],[0.567,0.0236],[0.567,0.0157],[0.567,0.0079],[0.567,0],[0.5748,0.9999],[0.5748,0.9921],[0.5748,0.9842],[0.5748,0.9763],[0.5748,0.9684],[0.5748,0.9606],[0.5748,0.9527],[0.5748,0.9448],[0.5748,0.937],[0.5748,0.9291],[0.5748,0.9212],[0.5748,0.9133],[0.5748,0.9055],[0.5748,0.8976],[0.5748,0.8897],[0.5748,0.8818],[0.5748,0.874],[0.5748,0.8661],[0.5748,0.8582],[0.5748,0.8503],[0.5748,0.8425],[0.5748,0.8346],[0.5748,0.8267],[0.5748,0.8188],[0.5748,0.811],[0.5748,0.8031],[0.5748,0.7952],[0.5748,0.7874],[0.5748,0.7795],[0.5748,0.7716],[0.5748,0.7637],[0.5748,0.7559],[0.5748,0.748],[0.5748,0.7401],[0.5748,0.7322],[0.5748,0.7244],[0.5748,0.7165],[0.5748,0.7086],[0.5748,0.7007],[0.5748,0.6929],[0.5748,0.685],[0.5748,0.6771],[0.5748,0.6693],[0.5748,0.6614],[0.5748,0.6535],[0.5748,0.6456],[0.5748,0.6378],[0.5748,0.6299],[0.5748,0.622],[0.5748,0.6141],[0.5748,0.6063],[0.5748,0.5984],[0.5748,0.5905],[0.5748,0.5826],[0.5748,0.5748],[0.5748,0.5669],[0.5748,0.559],[0.5748,0.5511],[0.5748,0.5433],[0.5748,0.5354],[0.5748,0.5275],[0.5748,0.5197],[0.5748,0.5118],[0.5748,0.5039],[0.5748,0.496],[0.5748,0.4882],[0.5748,0.4803],[0.5748,0.4724],[0.5748,0.4645],[0.5748,0.4567],[0.5748,0.4488],[0.5748,0.4409],[0.5748,0.433],[0.5748,0.4252],[0.5748,0.4173],[0.5748,0.4094],[0.5748,0.4016],[0.5748,0.3937],[0.5748,0.3858],[0.5748,0.3779],[0.5748,0.3701],[0.5748,0.3622],[0.5748,0.3543],[0.5748,0.3464],[0.5748,0.3386],[0.5748,0.3307],[0.5748,0.3228],[0.5748,0.3149],[0.5748,0.3071],[0.5748,0.2992],[0.5748,0.2913],[0.5748,0.2834],[0.5748,0.2756],[0.5748,0.2677],[0.5748,0.2598],[0.5748,0.252],[0.5748,0.2441],[0.5748,0.2362],[0.5748,0.2283],[0.5748,0.2205],[0.5748,0.2126],[0.5748,0.2047],[0.5748,0.1968],[0.5748,0.189],[0.5748,0.1811],[0.5748,0.1732],[0.5748,0.1653],[0.5748,0.1575],[0.5748,0.1496],[0.5748,0.1417],[0.5748,0.1339],[0.5748,0.126],[0.5748,0.1181],[0.5748,0.1102],[0.5748,0.1024],[0.5748,0.0945],[0.5748,0.0866],[0.5748,0.0787],[0.5748,0.0709],[0.5748,0.063],[0.5748,0.0551],[0.5748,0.0472],[0.5748,0.0394],[0.5748,0.0315],[0.5748,0.0236],[0.5748,0.0157],[0.5748,0.0079],[0.5748,0],[0.5827,0.9999],[0.5827,0.9921],[0.5827,0.9842],[0.5827,0.9763],[0.5827,0.9684],[0.5827,0.9606],[0.5827,0.9527],[0.5827,0.9448],[0.5827,0.937],[0.5827,0.9291],[0.5827,0.9212],[0.5827,0.9133],[0.5827,0.9055],[0.5827,0.8976],[0.5827,0.8897],[0.5827,0.8818],[0.5827,0.874],[0.5827,0.8661],[0.5827,0.8582],[0.5827,0.8503],[0.5827,0.8425],[0.5827,0.8346],[0.5827,0.8267],[0.5827,0.8188],[0.5827,0.811],[0.5827,0.8031],[0.5827,0.7952],[0.5827,0.7874],[0.5827,0.7795],[0.5827,0.7716],[0.5827,0.7637],[0.5827,0.7559],[0.5827,0.748],[0.5827,0.7401],[0.5827,0.7322],[0.5827,0.7244],[0.5827,0.7165],[0.5827,0.7086],[0.5827,0.7007],[0.5827,0.6929],[0.5827,0.685],[0.5827,0.6771],[0.5827,0.6693],[0.5827,0.6614],[0.5827,0.6535],[0.5827,0.6456],[0.5827,0.6378],[0.5827,0.6299],[0.5827,0.622],[0.5827,0.6141],[0.5827,0.6063],[0.5827,0.5984],[0.5827,0.5905],[0.5827,0.5826],[0.5827,0.5748],[0.5827,0.5669],[0.5827,0.559],[0.5827,0.5511],[0.5827,0.5433],[0.5827,0.5354],[0.5827,0.5275],[0.5827,0.5197],[0.5827,0.5118],[0.5827,0.5039],[0.5827,0.496],[0.5827,0.4882],[0.5827,0.4803],[0.5827,0.4724],[0.5827,0.4645],[0.5827,0.4567],[0.5827,0.4488],[0.5827,0.4409],[0.5827,0.433],[0.5827,0.4252],[0.5827,0.4173],[0.5827,0.4094],[0.5827,0.4016],[0.5827,0.3937],[0.5827,0.3858],[0.5827,0.3779],[0.5827,0.3701],[0.5827,0.3622],[0.5827,0.3543],[0.5827,0.3464],[0.5827,0.3386],[0.5827,0.3307],[0.5827,0.3228],[0.5827,0.3149],[0.5827,0.3071],[0.5827,0.2992],[0.5827,0.2913],[0.5827,0.2834],[0.5827,0.2756],[0.5827,0.2677],[0.5827,0.2598],[0.5827,0.252],[0.5827,0.2441],[0.5827,0.2362],[0.5827,0.2283],[0.5827,0.2205],[0.5827,0.2126],[0.5827,0.2047],[0.5827,0.1968],[0.5827,0.189],[0.5827,0.1811],[0.5827,0.1732],[0.5827,0.1653],[0.5827,0.1575],[0.5827,0.1496],[0.5827,0.1417],[0.5827,0.1339],[0.5827,0.126],[0.5827,0.1181],[0.5827,0.1102],[0.5827,0.1024],[0.5827,0.0945],[0.5827,0.0866],[0.5827,0.0787],[0.5827,0.0709],[0.5827,0.063],[0.5827,0.0551],[0.5827,0.0472],[0.5827,0.0394],[0.5827,0.0315],[0.5827,0.0236],[0.5827,0.0157],[0.5827,0.0079],[0.5827,0],[0.5906,0.9999],[0.5906,0.9921],[0.5906,0.9842],[0.5906,0.9763],[0.5906,0.9684],[0.5906,0.9606],[0.5906,0.9527],[0.5906,0.9448],[0.5906,0.937],[0.5906,0.9291],[0.5906,0.9212],[0.5906,0.9133],[0.5906,0.9055],[0.5906,0.8976],[0.5906,0.8897],[0.5906,0.8818],[0.5906,0.874],[0.5906,0.8661],[0.5906,0.8582],[0.5906,0.8503],[0.5906,0.8425],[0.5906,0.8346],[0.5906,0.8267],[0.5906,0.8188],[0.5906,0.811],[0.5906,0.8031],[0.5906,0.7952],[0.5906,0.7874],[0.5906,0.7795],[0.5906,0.7716],[0.5906,0.7637],[0.5906,0.7559],[0.5906,0.748],[0.5906,0.7401],[0.5906,0.7322],[0.5906,0.7244],[0.5906,0.7165],[0.5906,0.7086],[0.5906,0.7007],[0.5906,0.6929],[0.5906,0.685],[0.5906,0.6771],[0.5906,0.6693],[0.5906,0.6614],[0.5906,0.6535],[0.5906,0.6456],[0.5906,0.6378],[0.5906,0.6299],[0.5906,0.622],[0.5906,0.6141],[0.5906,0.6063],[0.5906,0.5984],[0.5906,0.5905],[0.5906,0.5826],[0.5906,0.5748],[0.5906,0.5669],[0.5906,0.559],[0.5906,0.5511],[0.5906,0.5433],[0.5906,0.5354],[0.5906,0.5275],[0.5906,0.5197],[0.5906,0.5118],[0.5906,0.5039],[0.5906,0.496],[0.5906,0.4882],[0.5906,0.4803],[0.5906,0.4724],[0.5906,0.4645],[0.5906,0.4567],[0.5906,0.4488],[0.5906,0.4409],[0.5906,0.433],[0.5906,0.4252],[0.5906,0.4173],[0.5906,0.4094],[0.5906,0.4016],[0.5906,0.3937],[0.5906,0.3858],[0.5906,0.3779],[0.5906,0.3701],[0.5906,0.3622],[0.5906,0.3543],[0.5906,0.3464],[0.5906,0.3386],[0.5906,0.3307],[0.5906,0.3228],[0.5906,0.3149],[0.5906,0.3071],[0.5906,0.2992],[0.5906,0.2913],[0.5906,0.2834],[0.5906,0.2756],[0.5906,0.2677],[0.5906,0.2598],[0.5906,0.252],[0.5906,0.2441],[0.5906,0.2362],[0.5906,0.2283],[0.5906,0.2205],[0.5906,0.2126],[0.5906,0.2047],[0.5906,0.1968],[0.5906,0.189],[0.5906,0.1811],[0.5906,0.1732],[0.5906,0.1653],[0.5906,0.1575],[0.5906,0.1496],[0.5906,0.1417],[0.5906,0.1339],[0.5906,0.126],[0.5906,0.1181],[0.5906,0.1102],[0.5906,0.1024],[0.5906,0.0945],[0.5906,0.0866],[0.5906,0.0787],[0.5906,0.0709],[0.5906,0.063],[0.5906,0.0551],[0.5906,0.0472],[0.5906,0.0394],[0.5906,0.0315],[0.5906,0.0236],[0.5906,0.0157],[0.5906,0.0079],[0.5906,0],[0.5984,0.9999],[0.5984,0.9921],[0.5984,0.9842],[0.5984,0.9763],[0.5984,0.9684],[0.5984,0.9606],[0.5984,0.9527],[0.5984,0.9448],[0.5984,0.937],[0.5984,0.9291],[0.5984,0.9212],[0.5984,0.9133],[0.5984,0.9055],[0.5984,0.8976],[0.5984,0.8897],[0.5984,0.8818],[0.5984,0.874],[0.5984,0.8661],[0.5984,0.8582],[0.5984,0.8503],[0.5984,0.8425],[0.5984,0.8346],[0.5984,0.8267],[0.5984,0.8188],[0.5984,0.811],[0.5984,0.8031],[0.5984,0.7952],[0.5984,0.7874],[0.5984,0.7795],[0.5984,0.7716],[0.5984,0.7637],[0.5984,0.7559],[0.5984,0.748],[0.5984,0.7401],[0.5984,0.7322],[0.5984,0.7244],[0.5984,0.7165],[0.5984,0.7086],[0.5984,0.7007],[0.5984,0.6929],[0.5984,0.685],[0.5984,0.6771],[0.5984,0.6693],[0.5984,0.6614],[0.5984,0.6535],[0.5984,0.6456],[0.5984,0.6378],[0.5984,0.6299],[0.5984,0.622],[0.5984,0.6141],[0.5984,0.6063],[0.5984,0.5984],[0.5984,0.5905],[0.5984,0.5826],[0.5984,0.5748],[0.5984,0.5669],[0.5984,0.559],[0.5984,0.5511],[0.5984,0.5433],[0.5984,0.5354],[0.5984,0.5275],[0.5984,0.5197],[0.5984,0.5118],[0.5984,0.5039],[0.5984,0.496],[0.5984,0.4882],[0.5984,0.4803],[0.5984,0.4724],[0.5984,0.4645],[0.5984,0.4567],[0.5984,0.4488],[0.5984,0.4409],[0.5984,0.433],[0.5984,0.4252],[0.5984,0.4173],[0.5984,0.4094],[0.5984,0.4016],[0.5984,0.3937],[0.5984,0.3858],[0.5984,0.3779],[0.5984,0.3701],[0.5984,0.3622],[0.5984,0.3543],[0.5984,0.3464],[0.5984,0.3386],[0.5984,0.3307],[0.5984,0.3228],[0.5984,0.3149],[0.5984,0.3071],[0.5984,0.2992],[0.5984,0.2913],[0.5984,0.2834],[0.5984,0.2756],[0.5984,0.2677],[0.5984,0.2598],[0.5984,0.252],[0.5984,0.2441],[0.5984,0.2362],[0.5984,0.2283],[0.5984,0.2205],[0.5984,0.2126],[0.5984,0.2047],[0.5984,0.1968],[0.5984,0.189],[0.5984,0.1811],[0.5984,0.1732],[0.5984,0.1653],[0.5984,0.1575],[0.5984,0.1496],[0.5984,0.1417],[0.5984,0.1339],[0.5984,0.126],[0.5984,0.1181],[0.5984,0.1102],[0.5984,0.1024],[0.5984,0.0945],[0.5984,0.0866],[0.5984,0.0787],[0.5984,0.0709],[0.5984,0.063],[0.5984,0.0551],[0.5984,0.0472],[0.5984,0.0394],[0.5984,0.0315],[0.5984,0.0236],[0.5984,0.0157],[0.5984,0.0079],[0.5984,0],[0.6063,0.9999],[0.6063,0.9921],[0.6063,0.9842],[0.6063,0.9763],[0.6063,0.9684],[0.6063,0.9606],[0.6063,0.9527],[0.6063,0.9448],[0.6063,0.937],[0.6063,0.9291],[0.6063,0.9212],[0.6063,0.9133],[0.6063,0.9055],[0.6063,0.8976],[0.6063,0.8897],[0.6063,0.8818],[0.6063,0.874],[0.6063,0.8661],[0.6063,0.8582],[0.6063,0.8503],[0.6063,0.8425],[0.6063,0.8346],[0.6063,0.8267],[0.6063,0.8188],[0.6063,0.811],[0.6063,0.8031],[0.6063,0.7952],[0.6063,0.7874],[0.6063,0.7795],[0.6063,0.7716],[0.6063,0.7637],[0.6063,0.7559],[0.6063,0.748],[0.6063,0.7401],[0.6063,0.7322],[0.6063,0.7244],[0.6063,0.7165],[0.6063,0.7086],[0.6063,0.7007],[0.6063,0.6929],[0.6063,0.685],[0.6063,0.6771],[0.6063,0.6693],[0.6063,0.6614],[0.6063,0.6535],[0.6063,0.6456],[0.6063,0.6378],[0.6063,0.6299],[0.6063,0.622],[0.6063,0.6141],[0.6063,0.6063],[0.6063,0.5984],[0.6063,0.5905],[0.6063,0.5826],[0.6063,0.5748],[0.6063,0.5669],[0.6063,0.559],[0.6063,0.5511],[0.6063,0.5433],[0.6063,0.5354],[0.6063,0.5275],[0.6063,0.5197],[0.6063,0.5118],[0.6063,0.5039],[0.6063,0.496],[0.6063,0.4882],[0.6063,0.4803],[0.6063,0.4724],[0.6063,0.4645],[0.6063,0.4567],[0.6063,0.4488],[0.6063,0.4409],[0.6063,0.433],[0.6063,0.4252],[0.6063,0.4173],[0.6063,0.4094],[0.6063,0.4016],[0.6063,0.3937],[0.6063,0.3858],[0.6063,0.3779],[0.6063,0.3701],[0.6063,0.3622],[0.6063,0.3543],[0.6063,0.3464],[0.6063,0.3386],[0.6063,0.3307],[0.6063,0.3228],[0.6063,0.3149],[0.6063,0.3071],[0.6063,0.2992],[0.6063,0.2913],[0.6063,0.2834],[0.6063,0.2756],[0.6063,0.2677],[0.6063,0.2598],[0.6063,0.252],[0.6063,0.2441],[0.6063,0.2362],[0.6063,0.2283],[0.6063,0.2205],[0.6063,0.2126],[0.6063,0.2047],[0.6063,0.1968],[0.6063,0.189],[0.6063,0.1811],[0.6063,0.1732],[0.6063,0.1653],[0.6063,0.1575],[0.6063,0.1496],[0.6063,0.1417],[0.6063,0.1339],[0.6063,0.126],[0.6063,0.1181],[0.6063,0.1102],[0.6063,0.1024],[0.6063,0.0945],[0.6063,0.0866],[0.6063,0.0787],[0.6063,0.0709],[0.6063,0.063],[0.6063,0.0551],[0.6063,0.0472],[0.6063,0.0394],[0.6063,0.0315],[0.6063,0.0236],[0.6063,0.0157],[0.6063,0.0079],[0.6063,0],[0.6142,0.9999],[0.6142,0.9921],[0.6142,0.9842],[0.6142,0.9763],[0.6142,0.9684],[0.6142,0.9606],[0.6142,0.9527],[0.6142,0.9448],[0.6142,0.937],[0.6142,0.9291],[0.6142,0.9212],[0.6142,0.9133],[0.6142,0.9055],[0.6142,0.8976],[0.6142,0.8897],[0.6142,0.8818],[0.6142,0.874],[0.6142,0.8661],[0.6142,0.8582],[0.6142,0.8503],[0.6142,0.8425],[0.6142,0.8346],[0.6142,0.8267],[0.6142,0.8188],[0.6142,0.811],[0.6142,0.8031],[0.6142,0.7952],[0.6142,0.7874],[0.6142,0.7795],[0.6142,0.7716],[0.6142,0.7637],[0.6142,0.7559],[0.6142,0.748],[0.6142,0.7401],[0.6142,0.7322],[0.6142,0.7244],[0.6142,0.7165],[0.6142,0.7086],[0.6142,0.7007],[0.6142,0.6929],[0.6142,0.685],[0.6142,0.6771],[0.6142,0.6693],[0.6142,0.6614],[0.6142,0.6535],[0.6142,0.6456],[0.6142,0.6378],[0.6142,0.6299],[0.6142,0.622],[0.6142,0.6141],[0.6142,0.6063],[0.6142,0.5984],[0.6142,0.5905],[0.6142,0.5826],[0.6142,0.5748],[0.6142,0.5669],[0.6142,0.559],[0.6142,0.5511],[0.6142,0.5433],[0.6142,0.5354],[0.6142,0.5275],[0.6142,0.5197],[0.6142,0.5118],[0.6142,0.5039],[0.6142,0.496],[0.6142,0.4882],[0.6142,0.4803],[0.6142,0.4724],[0.6142,0.4645],[0.6142,0.4567],[0.6142,0.4488],[0.6142,0.4409],[0.6142,0.433],[0.6142,0.4252],[0.6142,0.4173],[0.6142,0.4094],[0.6142,0.4016],[0.6142,0.3937],[0.6142,0.3858],[0.6142,0.3779],[0.6142,0.3701],[0.6142,0.3622],[0.6142,0.3543],[0.6142,0.3464],[0.6142,0.3386],[0.6142,0.3307],[0.6142,0.3228],[0.6142,0.3149],[0.6142,0.3071],[0.6142,0.2992],[0.6142,0.2913],[0.6142,0.2834],[0.6142,0.2756],[0.6142,0.2677],[0.6142,0.2598],[0.6142,0.252],[0.6142,0.2441],[0.6142,0.2362],[0.6142,0.2283],[0.6142,0.2205],[0.6142,0.2126],[0.6142,0.2047],[0.6142,0.1968],[0.6142,0.189],[0.6142,0.1811],[0.6142,0.1732],[0.6142,0.1653],[0.6142,0.1575],[0.6142,0.1496],[0.6142,0.1417],[0.6142,0.1339],[0.6142,0.126],[0.6142,0.1181],[0.6142,0.1102],[0.6142,0.1024],[0.6142,0.0945],[0.6142,0.0866],[0.6142,0.0787],[0.6142,0.0709],[0.6142,0.063],[0.6142,0.0551],[0.6142,0.0472],[0.6142,0.0394],[0.6142,0.0315],[0.6142,0.0236],[0.6142,0.0157],[0.6142,0.0079],[0.6142,0],[0.6221,0.9999],[0.6221,0.9921],[0.6221,0.9842],[0.6221,0.9763],[0.6221,0.9684],[0.6221,0.9606],[0.6221,0.9527],[0.6221,0.9448],[0.6221,0.937],[0.6221,0.9291],[0.6221,0.9212],[0.6221,0.9133],[0.6221,0.9055],[0.6221,0.8976],[0.6221,0.8897],[0.6221,0.8818],[0.6221,0.874],[0.6221,0.8661],[0.6221,0.8582],[0.6221,0.8503],[0.6221,0.8425],[0.6221,0.8346],[0.6221,0.8267],[0.6221,0.8188],[0.6221,0.811],[0.6221,0.8031],[0.6221,0.7952],[0.6221,0.7874],[0.6221,0.7795],[0.6221,0.7716],[0.6221,0.7637],[0.6221,0.7559],[0.6221,0.748],[0.6221,0.7401],[0.6221,0.7322],[0.6221,0.7244],[0.6221,0.7165],[0.6221,0.7086],[0.6221,0.7007],[0.6221,0.6929],[0.6221,0.685],[0.6221,0.6771],[0.6221,0.6693],[0.6221,0.6614],[0.6221,0.6535],[0.6221,0.6456],[0.6221,0.6378],[0.6221,0.6299],[0.6221,0.622],[0.6221,0.6141],[0.6221,0.6063],[0.6221,0.5984],[0.6221,0.5905],[0.6221,0.5826],[0.6221,0.5748],[0.6221,0.5669],[0.6221,0.559],[0.6221,0.5511],[0.6221,0.5433],[0.6221,0.5354],[0.6221,0.5275],[0.6221,0.5197],[0.6221,0.5118],[0.6221,0.5039],[0.6221,0.496],[0.6221,0.4882],[0.6221,0.4803],[0.6221,0.4724],[0.6221,0.4645],[0.6221,0.4567],[0.6221,0.4488],[0.6221,0.4409],[0.6221,0.433],[0.6221,0.4252],[0.6221,0.4173],[0.6221,0.4094],[0.6221,0.4016],[0.6221,0.3937],[0.6221,0.3858],[0.6221,0.3779],[0.6221,0.3701],[0.6221,0.3622],[0.6221,0.3543],[0.6221,0.3464],[0.6221,0.3386],[0.6221,0.3307],[0.6221,0.3228],[0.6221,0.3149],[0.6221,0.3071],[0.6221,0.2992],[0.6221,0.2913],[0.6221,0.2834],[0.6221,0.2756],[0.6221,0.2677],[0.6221,0.2598],[0.6221,0.252],[0.6221,0.2441],[0.6221,0.2362],[0.6221,0.2283],[0.6221,0.2205],[0.6221,0.2126],[0.6221,0.2047],[0.6221,0.1968],[0.6221,0.189],[0.6221,0.1811],[0.6221,0.1732],[0.6221,0.1653],[0.6221,0.1575],[0.6221,0.1496],[0.6221,0.1417],[0.6221,0.1339],[0.6221,0.126],[0.6221,0.1181],[0.6221,0.1102],[0.6221,0.1024],[0.6221,0.0945],[0.6221,0.0866],[0.6221,0.0787],[0.6221,0.0709],[0.6221,0.063],[0.6221,0.0551],[0.6221,0.0472],[0.6221,0.0394],[0.6221,0.0315],[0.6221,0.0236],[0.6221,0.0157],[0.6221,0.0079],[0.6221,0],[0.6299,0.9999],[0.6299,0.9921],[0.6299,0.9842],[0.6299,0.9763],[0.6299,0.9684],[0.6299,0.9606],[0.6299,0.9527],[0.6299,0.9448],[0.6299,0.937],[0.6299,0.9291],[0.6299,0.9212],[0.6299,0.9133],[0.6299,0.9055],[0.6299,0.8976],[0.6299,0.8897],[0.6299,0.8818],[0.6299,0.874],[0.6299,0.8661],[0.6299,0.8582],[0.6299,0.8503],[0.6299,0.8425],[0.6299,0.8346],[0.6299,0.8267],[0.6299,0.8188],[0.6299,0.811],[0.6299,0.8031],[0.6299,0.7952],[0.6299,0.7874],[0.6299,0.7795],[0.6299,0.7716],[0.6299,0.7637],[0.6299,0.7559],[0.6299,0.748],[0.6299,0.7401],[0.6299,0.7322],[0.6299,0.7244],[0.6299,0.7165],[0.6299,0.7086],[0.6299,0.7007],[0.6299,0.6929],[0.6299,0.685],[0.6299,0.6771],[0.6299,0.6693],[0.6299,0.6614],[0.6299,0.6535],[0.6299,0.6456],[0.6299,0.6378],[0.6299,0.6299],[0.6299,0.622],[0.6299,0.6141],[0.6299,0.6063],[0.6299,0.5984],[0.6299,0.5905],[0.6299,0.5826],[0.6299,0.5748],[0.6299,0.5669],[0.6299,0.559],[0.6299,0.5511],[0.6299,0.5433],[0.6299,0.5354],[0.6299,0.5275],[0.6299,0.5197],[0.6299,0.5118],[0.6299,0.5039],[0.6299,0.496],[0.6299,0.4882],[0.6299,0.4803],[0.6299,0.4724],[0.6299,0.4645],[0.6299,0.4567],[0.6299,0.4488],[0.6299,0.4409],[0.6299,0.433],[0.6299,0.4252],[0.6299,0.4173],[0.6299,0.4094],[0.6299,0.4016],[0.6299,0.3937],[0.6299,0.3858],[0.6299,0.3779],[0.6299,0.3701],[0.6299,0.3622],[0.6299,0.3543],[0.6299,0.3464],[0.6299,0.3386],[0.6299,0.3307],[0.6299,0.3228],[0.6299,0.3149],[0.6299,0.3071],[0.6299,0.2992],[0.6299,0.2913],[0.6299,0.2834],[0.6299,0.2756],[0.6299,0.2677],[0.6299,0.2598],[0.6299,0.252],[0.6299,0.2441],[0.6299,0.2362],[0.6299,0.2283],[0.6299,0.2205],[0.6299,0.2126],[0.6299,0.2047],[0.6299,0.1968],[0.6299,0.189],[0.6299,0.1811],[0.6299,0.1732],[0.6299,0.1653],[0.6299,0.1575],[0.6299,0.1496],[0.6299,0.1417],[0.6299,0.1339],[0.6299,0.126],[0.6299,0.1181],[0.6299,0.1102],[0.6299,0.1024],[0.6299,0.0945],[0.6299,0.0866],[0.6299,0.0787],[0.6299,0.0709],[0.6299,0.063],[0.6299,0.0551],[0.6299,0.0472],[0.6299,0.0394],[0.6299,0.0315],[0.6299,0.0236],[0.6299,0.0157],[0.6299,0.0079],[0.6299,0],[0.6378,0.9999],[0.6378,0.9921],[0.6378,0.9842],[0.6378,0.9763],[0.6378,0.9684],[0.6378,0.9606],[0.6378,0.9527],[0.6378,0.9448],[0.6378,0.937],[0.6378,0.9291],[0.6378,0.9212],[0.6378,0.9133],[0.6378,0.9055],[0.6378,0.8976],[0.6378,0.8897],[0.6378,0.8818],[0.6378,0.874],[0.6378,0.8661],[0.6378,0.8582],[0.6378,0.8503],[0.6378,0.8425],[0.6378,0.8346],[0.6378,0.8267],[0.6378,0.8188],[0.6378,0.811],[0.6378,0.8031],[0.6378,0.7952],[0.6378,0.7874],[0.6378,0.7795],[0.6378,0.7716],[0.6378,0.7637],[0.6378,0.7559],[0.6378,0.748],[0.6378,0.7401],[0.6378,0.7322],[0.6378,0.7244],[0.6378,0.7165],[0.6378,0.7086],[0.6378,0.7007],[0.6378,0.6929],[0.6378,0.685],[0.6378,0.6771],[0.6378,0.6693],[0.6378,0.6614],[0.6378,0.6535],[0.6378,0.6456],[0.6378,0.6378],[0.6378,0.6299],[0.6378,0.622],[0.6378,0.6141],[0.6378,0.6063],[0.6378,0.5984],[0.6378,0.5905],[0.6378,0.5826],[0.6378,0.5748],[0.6378,0.5669],[0.6378,0.559],[0.6378,0.5511],[0.6378,0.5433],[0.6378,0.5354],[0.6378,0.5275],[0.6378,0.5197],[0.6378,0.5118],[0.6378,0.5039],[0.6378,0.496],[0.6378,0.4882],[0.6378,0.4803],[0.6378,0.4724],[0.6378,0.4645],[0.6378,0.4567],[0.6378,0.4488],[0.6378,0.4409],[0.6378,0.433],[0.6378,0.4252],[0.6378,0.4173],[0.6378,0.4094],[0.6378,0.4016],[0.6378,0.3937],[0.6378,0.3858],[0.6378,0.3779],[0.6378,0.3701],[0.6378,0.3622],[0.6378,0.3543],[0.6378,0.3464],[0.6378,0.3386],[0.6378,0.3307],[0.6378,0.3228],[0.6378,0.3149],[0.6378,0.3071],[0.6378,0.2992],[0.6378,0.2913],[0.6378,0.2834],[0.6378,0.2756],[0.6378,0.2677],[0.6378,0.2598],[0.6378,0.252],[0.6378,0.2441],[0.6378,0.2362],[0.6378,0.2283],[0.6378,0.2205],[0.6378,0.2126],[0.6378,0.2047],[0.6378,0.1968],[0.6378,0.189],[0.6378,0.1811],[0.6378,0.1732],[0.6378,0.1653],[0.6378,0.1575],[0.6378,0.1496],[0.6378,0.1417],[0.6378,0.1339],[0.6378,0.126],[0.6378,0.1181],[0.6378,0.1102],[0.6378,0.1024],[0.6378,0.0945],[0.6378,0.0866],[0.6378,0.0787],[0.6378,0.0709],[0.6378,0.063],[0.6378,0.0551],[0.6378,0.0472],[0.6378,0.0394],[0.6378,0.0315],[0.6378,0.0236],[0.6378,0.0157],[0.6378,0.0079],[0.6378,0],[0.6457,0.9999],[0.6457,0.9921],[0.6457,0.9842],[0.6457,0.9763],[0.6457,0.9684],[0.6457,0.9606],[0.6457,0.9527],[0.6457,0.9448],[0.6457,0.937],[0.6457,0.9291],[0.6457,0.9212],[0.6457,0.9133],[0.6457,0.9055],[0.6457,0.8976],[0.6457,0.8897],[0.6457,0.8818],[0.6457,0.874],[0.6457,0.8661],[0.6457,0.8582],[0.6457,0.8503],[0.6457,0.8425],[0.6457,0.8346],[0.6457,0.8267],[0.6457,0.8188],[0.6457,0.811],[0.6457,0.8031],[0.6457,0.7952],[0.6457,0.7874],[0.6457,0.7795],[0.6457,0.7716],[0.6457,0.7637],[0.6457,0.7559],[0.6457,0.748],[0.6457,0.7401],[0.6457,0.7322],[0.6457,0.7244],[0.6457,0.7165],[0.6457,0.7086],[0.6457,0.7007],[0.6457,0.6929],[0.6457,0.685],[0.6457,0.6771],[0.6457,0.6693],[0.6457,0.6614],[0.6457,0.6535],[0.6457,0.6456],[0.6457,0.6378],[0.6457,0.6299],[0.6457,0.622],[0.6457,0.6141],[0.6457,0.6063],[0.6457,0.5984],[0.6457,0.5905],[0.6457,0.5826],[0.6457,0.5748],[0.6457,0.5669],[0.6457,0.559],[0.6457,0.5511],[0.6457,0.5433],[0.6457,0.5354],[0.6457,0.5275],[0.6457,0.5197],[0.6457,0.5118],[0.6457,0.5039],[0.6457,0.496],[0.6457,0.4882],[0.6457,0.4803],[0.6457,0.4724],[0.6457,0.4645],[0.6457,0.4567],[0.6457,0.4488],[0.6457,0.4409],[0.6457,0.433],[0.6457,0.4252],[0.6457,0.4173],[0.6457,0.4094],[0.6457,0.4016],[0.6457,0.3937],[0.6457,0.3858],[0.6457,0.3779],[0.6457,0.3701],[0.6457,0.3622],[0.6457,0.3543],[0.6457,0.3464],[0.6457,0.3386],[0.6457,0.3307],[0.6457,0.3228],[0.6457,0.3149],[0.6457,0.3071],[0.6457,0.2992],[0.6457,0.2913],[0.6457,0.2834],[0.6457,0.2756],[0.6457,0.2677],[0.6457,0.2598],[0.6457,0.252],[0.6457,0.2441],[0.6457,0.2362],[0.6457,0.2283],[0.6457,0.2205],[0.6457,0.2126],[0.6457,0.2047],[0.6457,0.1968],[0.6457,0.189],[0.6457,0.1811],[0.6457,0.1732],[0.6457,0.1653],[0.6457,0.1575],[0.6457,0.1496],[0.6457,0.1417],[0.6457,0.1339],[0.6457,0.126],[0.6457,0.1181],[0.6457,0.1102],[0.6457,0.1024],[0.6457,0.0945],[0.6457,0.0866],[0.6457,0.0787],[0.6457,0.0709],[0.6457,0.063],[0.6457,0.0551],[0.6457,0.0472],[0.6457,0.0394],[0.6457,0.0315],[0.6457,0.0236],[0.6457,0.0157],[0.6457,0.0079],[0.6457,0],[0.6536,0.9999],[0.6536,0.9921],[0.6536,0.9842],[0.6536,0.9763],[0.6536,0.9684],[0.6536,0.9606],[0.6536,0.9527],[0.6536,0.9448],[0.6536,0.937],[0.6536,0.9291],[0.6536,0.9212],[0.6536,0.9133],[0.6536,0.9055],[0.6536,0.8976],[0.6536,0.8897],[0.6536,0.8818],[0.6536,0.874],[0.6536,0.8661],[0.6536,0.8582],[0.6536,0.8503],[0.6536,0.8425],[0.6536,0.8346],[0.6536,0.8267],[0.6536,0.8188],[0.6536,0.811],[0.6536,0.8031],[0.6536,0.7952],[0.6536,0.7874],[0.6536,0.7795],[0.6536,0.7716],[0.6536,0.7637],[0.6536,0.7559],[0.6536,0.748],[0.6536,0.7401],[0.6536,0.7322],[0.6536,0.7244],[0.6536,0.7165],[0.6536,0.7086],[0.6536,0.7007],[0.6536,0.6929],[0.6536,0.685],[0.6536,0.6771],[0.6536,0.6693],[0.6536,0.6614],[0.6536,0.6535],[0.6536,0.6456],[0.6536,0.6378],[0.6536,0.6299],[0.6536,0.622],[0.6536,0.6141],[0.6536,0.6063],[0.6536,0.5984],[0.6536,0.5905],[0.6536,0.5826],[0.6536,0.5748],[0.6536,0.5669],[0.6536,0.559],[0.6536,0.5511],[0.6536,0.5433],[0.6536,0.5354],[0.6536,0.5275],[0.6536,0.5197],[0.6536,0.5118],[0.6536,0.5039],[0.6536,0.496],[0.6536,0.4882],[0.6536,0.4803],[0.6536,0.4724],[0.6536,0.4645],[0.6536,0.4567],[0.6536,0.4488],[0.6536,0.4409],[0.6536,0.433],[0.6536,0.4252],[0.6536,0.4173],[0.6536,0.4094],[0.6536,0.4016],[0.6536,0.3937],[0.6536,0.3858],[0.6536,0.3779],[0.6536,0.3701],[0.6536,0.3622],[0.6536,0.3543],[0.6536,0.3464],[0.6536,0.3386],[0.6536,0.3307],[0.6536,0.3228],[0.6536,0.3149],[0.6536,0.3071],[0.6536,0.2992],[0.6536,0.2913],[0.6536,0.2834],[0.6536,0.2756],[0.6536,0.2677],[0.6536,0.2598],[0.6536,0.252],[0.6536,0.2441],[0.6536,0.2362],[0.6536,0.2283],[0.6536,0.2205],[0.6536,0.2126],[0.6536,0.2047],[0.6536,0.1968],[0.6536,0.189],[0.6536,0.1811],[0.6536,0.1732],[0.6536,0.1653],[0.6536,0.1575],[0.6536,0.1496],[0.6536,0.1417],[0.6536,0.1339],[0.6536,0.126],[0.6536,0.1181],[0.6536,0.1102],[0.6536,0.1024],[0.6536,0.0945],[0.6536,0.0866],[0.6536,0.0787],[0.6536,0.0709],[0.6536,0.063],[0.6536,0.0551],[0.6536,0.0472],[0.6536,0.0394],[0.6536,0.0315],[0.6536,0.0236],[0.6536,0.0157],[0.6536,0.0079],[0.6536,0],[0.6614,0.9999],[0.6614,0.9921],[0.6614,0.9842],[0.6614,0.9763],[0.6614,0.9684],[0.6614,0.9606],[0.6614,0.9527],[0.6614,0.9448],[0.6614,0.937],[0.6614,0.9291],[0.6614,0.9212],[0.6614,0.9133],[0.6614,0.9055],[0.6614,0.8976],[0.6614,0.8897],[0.6614,0.8818],[0.6614,0.874],[0.6614,0.8661],[0.6614,0.8582],[0.6614,0.8503],[0.6614,0.8425],[0.6614,0.8346],[0.6614,0.8267],[0.6614,0.8188],[0.6614,0.811],[0.6614,0.8031],[0.6614,0.7952],[0.6614,0.7874],[0.6614,0.7795],[0.6614,0.7716],[0.6614,0.7637],[0.6614,0.7559],[0.6614,0.748],[0.6614,0.7401],[0.6614,0.7322],[0.6614,0.7244],[0.6614,0.7165],[0.6614,0.7086],[0.6614,0.7007],[0.6614,0.6929],[0.6614,0.685],[0.6614,0.6771],[0.6614,0.6693],[0.6614,0.6614],[0.6614,0.6535],[0.6614,0.6456],[0.6614,0.6378],[0.6614,0.6299],[0.6614,0.622],[0.6614,0.6141],[0.6614,0.6063],[0.6614,0.5984],[0.6614,0.5905],[0.6614,0.5826],[0.6614,0.5748],[0.6614,0.5669],[0.6614,0.559],[0.6614,0.5511],[0.6614,0.5433],[0.6614,0.5354],[0.6614,0.5275],[0.6614,0.5197],[0.6614,0.5118],[0.6614,0.5039],[0.6614,0.496],[0.6614,0.4882],[0.6614,0.4803],[0.6614,0.4724],[0.6614,0.4645],[0.6614,0.4567],[0.6614,0.4488],[0.6614,0.4409],[0.6614,0.433],[0.6614,0.4252],[0.6614,0.4173],[0.6614,0.4094],[0.6614,0.4016],[0.6614,0.3937],[0.6614,0.3858],[0.6614,0.3779],[0.6614,0.3701],[0.6614,0.3622],[0.6614,0.3543],[0.6614,0.3464],[0.6614,0.3386],[0.6614,0.3307],[0.6614,0.3228],[0.6614,0.3149],[0.6614,0.3071],[0.6614,0.2992],[0.6614,0.2913],[0.6614,0.2834],[0.6614,0.2756],[0.6614,0.2677],[0.6614,0.2598],[0.6614,0.252],[0.6614,0.2441],[0.6614,0.2362],[0.6614,0.2283],[0.6614,0.2205],[0.6614,0.2126],[0.6614,0.2047],[0.6614,0.1968],[0.6614,0.189],[0.6614,0.1811],[0.6614,0.1732],[0.6614,0.1653],[0.6614,0.1575],[0.6614,0.1496],[0.6614,0.1417],[0.6614,0.1339],[0.6614,0.126],[0.6614,0.1181],[0.6614,0.1102],[0.6614,0.1024],[0.6614,0.0945],[0.6614,0.0866],[0.6614,0.0787],[0.6614,0.0709],[0.6614,0.063],[0.6614,0.0551],[0.6614,0.0472],[0.6614,0.0394],[0.6614,0.0315],[0.6614,0.0236],[0.6614,0.0157],[0.6614,0.0079],[0.6614,0],[0.6693,0.9999],[0.6693,0.9921],[0.6693,0.9842],[0.6693,0.9763],[0.6693,0.9684],[0.6693,0.9606],[0.6693,0.9527],[0.6693,0.9448],[0.6693,0.937],[0.6693,0.9291],[0.6693,0.9212],[0.6693,0.9133],[0.6693,0.9055],[0.6693,0.8976],[0.6693,0.8897],[0.6693,0.8818],[0.6693,0.874],[0.6693,0.8661],[0.6693,0.8582],[0.6693,0.8503],[0.6693,0.8425],[0.6693,0.8346],[0.6693,0.8267],[0.6693,0.8188],[0.6693,0.811],[0.6693,0.8031],[0.6693,0.7952],[0.6693,0.7874],[0.6693,0.7795],[0.6693,0.7716],[0.6693,0.7637],[0.6693,0.7559],[0.6693,0.748],[0.6693,0.7401],[0.6693,0.7322],[0.6693,0.7244],[0.6693,0.7165],[0.6693,0.7086],[0.6693,0.7007],[0.6693,0.6929],[0.6693,0.685],[0.6693,0.6771],[0.6693,0.6693],[0.6693,0.6614],[0.6693,0.6535],[0.6693,0.6456],[0.6693,0.6378],[0.6693,0.6299],[0.6693,0.622],[0.6693,0.6141],[0.6693,0.6063],[0.6693,0.5984],[0.6693,0.5905],[0.6693,0.5826],[0.6693,0.5748],[0.6693,0.5669],[0.6693,0.559],[0.6693,0.5511],[0.6693,0.5433],[0.6693,0.5354],[0.6693,0.5275],[0.6693,0.5197],[0.6693,0.5118],[0.6693,0.5039],[0.6693,0.496],[0.6693,0.4882],[0.6693,0.4803],[0.6693,0.4724],[0.6693,0.4645],[0.6693,0.4567],[0.6693,0.4488],[0.6693,0.4409],[0.6693,0.433],[0.6693,0.4252],[0.6693,0.4173],[0.6693,0.4094],[0.6693,0.4016],[0.6693,0.3937],[0.6693,0.3858],[0.6693,0.3779],[0.6693,0.3701],[0.6693,0.3622],[0.6693,0.3543],[0.6693,0.3464],[0.6693,0.3386],[0.6693,0.3307],[0.6693,0.3228],[0.6693,0.3149],[0.6693,0.3071],[0.6693,0.2992],[0.6693,0.2913],[0.6693,0.2834],[0.6693,0.2756],[0.6693,0.2677],[0.6693,0.2598],[0.6693,0.252],[0.6693,0.2441],[0.6693,0.2362],[0.6693,0.2283],[0.6693,0.2205],[0.6693,0.2126],[0.6693,0.2047],[0.6693,0.1968],[0.6693,0.189],[0.6693,0.1811],[0.6693,0.1732],[0.6693,0.1653],[0.6693,0.1575],[0.6693,0.1496],[0.6693,0.1417],[0.6693,0.1339],[0.6693,0.126],[0.6693,0.1181],[0.6693,0.1102],[0.6693,0.1024],[0.6693,0.0945],[0.6693,0.0866],[0.6693,0.0787],[0.6693,0.0709],[0.6693,0.063],[0.6693,0.0551],[0.6693,0.0472],[0.6693,0.0394],[0.6693,0.0315],[0.6693,0.0236],[0.6693,0.0157],[0.6693,0.0079],[0.6693,0],[0.6772,0.9999],[0.6772,0.9921],[0.6772,0.9842],[0.6772,0.9763],[0.6772,0.9684],[0.6772,0.9606],[0.6772,0.9527],[0.6772,0.9448],[0.6772,0.937],[0.6772,0.9291],[0.6772,0.9212],[0.6772,0.9133],[0.6772,0.9055],[0.6772,0.8976],[0.6772,0.8897],[0.6772,0.8818],[0.6772,0.874],[0.6772,0.8661],[0.6772,0.8582],[0.6772,0.8503],[0.6772,0.8425],[0.6772,0.8346],[0.6772,0.8267],[0.6772,0.8188],[0.6772,0.811],[0.6772,0.8031],[0.6772,0.7952],[0.6772,0.7874],[0.6772,0.7795],[0.6772,0.7716],[0.6772,0.7637],[0.6772,0.7559],[0.6772,0.748],[0.6772,0.7401],[0.6772,0.7322],[0.6772,0.7244],[0.6772,0.7165],[0.6772,0.7086],[0.6772,0.7007],[0.6772,0.6929],[0.6772,0.685],[0.6772,0.6771],[0.6772,0.6693],[0.6772,0.6614],[0.6772,0.6535],[0.6772,0.6456],[0.6772,0.6378],[0.6772,0.6299],[0.6772,0.622],[0.6772,0.6141],[0.6772,0.6063],[0.6772,0.5984],[0.6772,0.5905],[0.6772,0.5826],[0.6772,0.5748],[0.6772,0.5669],[0.6772,0.559],[0.6772,0.5511],[0.6772,0.5433],[0.6772,0.5354],[0.6772,0.5275],[0.6772,0.5197],[0.6772,0.5118],[0.6772,0.5039],[0.6772,0.496],[0.6772,0.4882],[0.6772,0.4803],[0.6772,0.4724],[0.6772,0.4645],[0.6772,0.4567],[0.6772,0.4488],[0.6772,0.4409],[0.6772,0.433],[0.6772,0.4252],[0.6772,0.4173],[0.6772,0.4094],[0.6772,0.4016],[0.6772,0.3937],[0.6772,0.3858],[0.6772,0.3779],[0.6772,0.3701],[0.6772,0.3622],[0.6772,0.3543],[0.6772,0.3464],[0.6772,0.3386],[0.6772,0.3307],[0.6772,0.3228],[0.6772,0.3149],[0.6772,0.3071],[0.6772,0.2992],[0.6772,0.2913],[0.6772,0.2834],[0.6772,0.2756],[0.6772,0.2677],[0.6772,0.2598],[0.6772,0.252],[0.6772,0.2441],[0.6772,0.2362],[0.6772,0.2283],[0.6772,0.2205],[0.6772,0.2126],[0.6772,0.2047],[0.6772,0.1968],[0.6772,0.189],[0.6772,0.1811],[0.6772,0.1732],[0.6772,0.1653],[0.6772,0.1575],[0.6772,0.1496],[0.6772,0.1417],[0.6772,0.1339],[0.6772,0.126],[0.6772,0.1181],[0.6772,0.1102],[0.6772,0.1024],[0.6772,0.0945],[0.6772,0.0866],[0.6772,0.0787],[0.6772,0.0709],[0.6772,0.063],[0.6772,0.0551],[0.6772,0.0472],[0.6772,0.0394],[0.6772,0.0315],[0.6772,0.0236],[0.6772,0.0157],[0.6772,0.0079],[0.6772,0],[0.6851,0.9999],[0.6851,0.9921],[0.6851,0.9842],[0.6851,0.9763],[0.6851,0.9684],[0.6851,0.9606],[0.6851,0.9527],[0.6851,0.9448],[0.6851,0.937],[0.6851,0.9291],[0.6851,0.9212],[0.6851,0.9133],[0.6851,0.9055],[0.6851,0.8976],[0.6851,0.8897],[0.6851,0.8818],[0.6851,0.874],[0.6851,0.8661],[0.6851,0.8582],[0.6851,0.8503],[0.6851,0.8425],[0.6851,0.8346],[0.6851,0.8267],[0.6851,0.8188],[0.6851,0.811],[0.6851,0.8031],[0.6851,0.7952],[0.6851,0.7874],[0.6851,0.7795],[0.6851,0.7716],[0.6851,0.7637],[0.6851,0.7559],[0.6851,0.748],[0.6851,0.7401],[0.6851,0.7322],[0.6851,0.7244],[0.6851,0.7165],[0.6851,0.7086],[0.6851,0.7007],[0.6851,0.6929],[0.6851,0.685],[0.6851,0.6771],[0.6851,0.6693],[0.6851,0.6614],[0.6851,0.6535],[0.6851,0.6456],[0.6851,0.6378],[0.6851,0.6299],[0.6851,0.622],[0.6851,0.6141],[0.6851,0.6063],[0.6851,0.5984],[0.6851,0.5905],[0.6851,0.5826],[0.6851,0.5748],[0.6851,0.5669],[0.6851,0.559],[0.6851,0.5511],[0.6851,0.5433],[0.6851,0.5354],[0.6851,0.5275],[0.6851,0.5197],[0.6851,0.5118],[0.6851,0.5039],[0.6851,0.496],[0.6851,0.4882],[0.6851,0.4803],[0.6851,0.4724],[0.6851,0.4645],[0.6851,0.4567],[0.6851,0.4488],[0.6851,0.4409],[0.6851,0.433],[0.6851,0.4252],[0.6851,0.4173],[0.6851,0.4094],[0.6851,0.4016],[0.6851,0.3937],[0.6851,0.3858],[0.6851,0.3779],[0.6851,0.3701],[0.6851,0.3622],[0.6851,0.3543],[0.6851,0.3464],[0.6851,0.3386],[0.6851,0.3307],[0.6851,0.3228],[0.6851,0.3149],[0.6851,0.3071],[0.6851,0.2992],[0.6851,0.2913],[0.6851,0.2834],[0.6851,0.2756],[0.6851,0.2677],[0.6851,0.2598],[0.6851,0.252],[0.6851,0.2441],[0.6851,0.2362],[0.6851,0.2283],[0.6851,0.2205],[0.6851,0.2126],[0.6851,0.2047],[0.6851,0.1968],[0.6851,0.189],[0.6851,0.1811],[0.6851,0.1732],[0.6851,0.1653],[0.6851,0.1575],[0.6851,0.1496],[0.6851,0.1417],[0.6851,0.1339],[0.6851,0.126],[0.6851,0.1181],[0.6851,0.1102],[0.6851,0.1024],[0.6851,0.0945],[0.6851,0.0866],[0.6851,0.0787],[0.6851,0.0709],[0.6851,0.063],[0.6851,0.0551],[0.6851,0.0472],[0.6851,0.0394],[0.6851,0.0315],[0.6851,0.0236],[0.6851,0.0157],[0.6851,0.0079],[0.6851,0],[0.6929,0.9999],[0.6929,0.9921],[0.6929,0.9842],[0.6929,0.9763],[0.6929,0.9684],[0.6929,0.9606],[0.6929,0.9527],[0.6929,0.9448],[0.6929,0.937],[0.6929,0.9291],[0.6929,0.9212],[0.6929,0.9133],[0.6929,0.9055],[0.6929,0.8976],[0.6929,0.8897],[0.6929,0.8818],[0.6929,0.874],[0.6929,0.8661],[0.6929,0.8582],[0.6929,0.8503],[0.6929,0.8425],[0.6929,0.8346],[0.6929,0.8267],[0.6929,0.8188],[0.6929,0.811],[0.6929,0.8031],[0.6929,0.7952],[0.6929,0.7874],[0.6929,0.7795],[0.6929,0.7716],[0.6929,0.7637],[0.6929,0.7559],[0.6929,0.748],[0.6929,0.7401],[0.6929,0.7322],[0.6929,0.7244],[0.6929,0.7165],[0.6929,0.7086],[0.6929,0.7007],[0.6929,0.6929],[0.6929,0.685],[0.6929,0.6771],[0.6929,0.6693],[0.6929,0.6614],[0.6929,0.6535],[0.6929,0.6456],[0.6929,0.6378],[0.6929,0.6299],[0.6929,0.622],[0.6929,0.6141],[0.6929,0.6063],[0.6929,0.5984],[0.6929,0.5905],[0.6929,0.5826],[0.6929,0.5748],[0.6929,0.5669],[0.6929,0.559],[0.6929,0.5511],[0.6929,0.5433],[0.6929,0.5354],[0.6929,0.5275],[0.6929,0.5197],[0.6929,0.5118],[0.6929,0.5039],[0.6929,0.496],[0.6929,0.4882],[0.6929,0.4803],[0.6929,0.4724],[0.6929,0.4645],[0.6929,0.4567],[0.6929,0.4488],[0.6929,0.4409],[0.6929,0.433],[0.6929,0.4252],[0.6929,0.4173],[0.6929,0.4094],[0.6929,0.4016],[0.6929,0.3937],[0.6929,0.3858],[0.6929,0.3779],[0.6929,0.3701],[0.6929,0.3622],[0.6929,0.3543],[0.6929,0.3464],[0.6929,0.3386],[0.6929,0.3307],[0.6929,0.3228],[0.6929,0.3149],[0.6929,0.3071],[0.6929,0.2992],[0.6929,0.2913],[0.6929,0.2834],[0.6929,0.2756],[0.6929,0.2677],[0.6929,0.2598],[0.6929,0.252],[0.6929,0.2441],[0.6929,0.2362],[0.6929,0.2283],[0.6929,0.2205],[0.6929,0.2126],[0.6929,0.2047],[0.6929,0.1968],[0.6929,0.189],[0.6929,0.1811],[0.6929,0.1732],[0.6929,0.1653],[0.6929,0.1575],[0.6929,0.1496],[0.6929,0.1417],[0.6929,0.1339],[0.6929,0.126],[0.6929,0.1181],[0.6929,0.1102],[0.6929,0.1024],[0.6929,0.0945],[0.6929,0.0866],[0.6929,0.0787],[0.6929,0.0709],[0.6929,0.063],[0.6929,0.0551],[0.6929,0.0472],[0.6929,0.0394],[0.6929,0.0315],[0.6929,0.0236],[0.6929,0.0157],[0.6929,0.0079],[0.6929,0],[0.7008,0.9999],[0.7008,0.9921],[0.7008,0.9842],[0.7008,0.9763],[0.7008,0.9684],[0.7008,0.9606],[0.7008,0.9527],[0.7008,0.9448],[0.7008,0.937],[0.7008,0.9291],[0.7008,0.9212],[0.7008,0.9133],[0.7008,0.9055],[0.7008,0.8976],[0.7008,0.8897],[0.7008,0.8818],[0.7008,0.874],[0.7008,0.8661],[0.7008,0.8582],[0.7008,0.8503],[0.7008,0.8425],[0.7008,0.8346],[0.7008,0.8267],[0.7008,0.8188],[0.7008,0.811],[0.7008,0.8031],[0.7008,0.7952],[0.7008,0.7874],[0.7008,0.7795],[0.7008,0.7716],[0.7008,0.7637],[0.7008,0.7559],[0.7008,0.748],[0.7008,0.7401],[0.7008,0.7322],[0.7008,0.7244],[0.7008,0.7165],[0.7008,0.7086],[0.7008,0.7007],[0.7008,0.6929],[0.7008,0.685],[0.7008,0.6771],[0.7008,0.6693],[0.7008,0.6614],[0.7008,0.6535],[0.7008,0.6456],[0.7008,0.6378],[0.7008,0.6299],[0.7008,0.622],[0.7008,0.6141],[0.7008,0.6063],[0.7008,0.5984],[0.7008,0.5905],[0.7008,0.5826],[0.7008,0.5748],[0.7008,0.5669],[0.7008,0.559],[0.7008,0.5511],[0.7008,0.5433],[0.7008,0.5354],[0.7008,0.5275],[0.7008,0.5197],[0.7008,0.5118],[0.7008,0.5039],[0.7008,0.496],[0.7008,0.4882],[0.7008,0.4803],[0.7008,0.4724],[0.7008,0.4645],[0.7008,0.4567],[0.7008,0.4488],[0.7008,0.4409],[0.7008,0.433],[0.7008,0.4252],[0.7008,0.4173],[0.7008,0.4094],[0.7008,0.4016],[0.7008,0.3937],[0.7008,0.3858],[0.7008,0.3779],[0.7008,0.3701],[0.7008,0.3622],[0.7008,0.3543],[0.7008,0.3464],[0.7008,0.3386],[0.7008,0.3307],[0.7008,0.3228],[0.7008,0.3149],[0.7008,0.3071],[0.7008,0.2992],[0.7008,0.2913],[0.7008,0.2834],[0.7008,0.2756],[0.7008,0.2677],[0.7008,0.2598],[0.7008,0.252],[0.7008,0.2441],[0.7008,0.2362],[0.7008,0.2283],[0.7008,0.2205],[0.7008,0.2126],[0.7008,0.2047],[0.7008,0.1968],[0.7008,0.189],[0.7008,0.1811],[0.7008,0.1732],[0.7008,0.1653],[0.7008,0.1575],[0.7008,0.1496],[0.7008,0.1417],[0.7008,0.1339],[0.7008,0.126],[0.7008,0.1181],[0.7008,0.1102],[0.7008,0.1024],[0.7008,0.0945],[0.7008,0.0866],[0.7008,0.0787],[0.7008,0.0709],[0.7008,0.063],[0.7008,0.0551],[0.7008,0.0472],[0.7008,0.0394],[0.7008,0.0315],[0.7008,0.0236],[0.7008,0.0157],[0.7008,0.0079],[0.7008,0],[0.7087,0.9999],[0.7087,0.9921],[0.7087,0.9842],[0.7087,0.9763],[0.7087,0.9684],[0.7087,0.9606],[0.7087,0.9527],[0.7087,0.9448],[0.7087,0.937],[0.7087,0.9291],[0.7087,0.9212],[0.7087,0.9133],[0.7087,0.9055],[0.7087,0.8976],[0.7087,0.8897],[0.7087,0.8818],[0.7087,0.874],[0.7087,0.8661],[0.7087,0.8582],[0.7087,0.8503],[0.7087,0.8425],[0.7087,0.8346],[0.7087,0.8267],[0.7087,0.8188],[0.7087,0.811],[0.7087,0.8031],[0.7087,0.7952],[0.7087,0.7874],[0.7087,0.7795],[0.7087,0.7716],[0.7087,0.7637],[0.7087,0.7559],[0.7087,0.748],[0.7087,0.7401],[0.7087,0.7322],[0.7087,0.7244],[0.7087,0.7165],[0.7087,0.7086],[0.7087,0.7007],[0.7087,0.6929],[0.7087,0.685],[0.7087,0.6771],[0.7087,0.6693],[0.7087,0.6614],[0.7087,0.6535],[0.7087,0.6456],[0.7087,0.6378],[0.7087,0.6299],[0.7087,0.622],[0.7087,0.6141],[0.7087,0.6063],[0.7087,0.5984],[0.7087,0.5905],[0.7087,0.5826],[0.7087,0.5748],[0.7087,0.5669],[0.7087,0.559],[0.7087,0.5511],[0.7087,0.5433],[0.7087,0.5354],[0.7087,0.5275],[0.7087,0.5197],[0.7087,0.5118],[0.7087,0.5039],[0.7087,0.496],[0.7087,0.4882],[0.7087,0.4803],[0.7087,0.4724],[0.7087,0.4645],[0.7087,0.4567],[0.7087,0.4488],[0.7087,0.4409],[0.7087,0.433],[0.7087,0.4252],[0.7087,0.4173],[0.7087,0.4094],[0.7087,0.4016],[0.7087,0.3937],[0.7087,0.3858],[0.7087,0.3779],[0.7087,0.3701],[0.7087,0.3622],[0.7087,0.3543],[0.7087,0.3464],[0.7087,0.3386],[0.7087,0.3307],[0.7087,0.3228],[0.7087,0.3149],[0.7087,0.3071],[0.7087,0.2992],[0.7087,0.2913],[0.7087,0.2834],[0.7087,0.2756],[0.7087,0.2677],[0.7087,0.2598],[0.7087,0.252],[0.7087,0.2441],[0.7087,0.2362],[0.7087,0.2283],[0.7087,0.2205],[0.7087,0.2126],[0.7087,0.2047],[0.7087,0.1968],[0.7087,0.189],[0.7087,0.1811],[0.7087,0.1732],[0.7087,0.1653],[0.7087,0.1575],[0.7087,0.1496],[0.7087,0.1417],[0.7087,0.1339],[0.7087,0.126],[0.7087,0.1181],[0.7087,0.1102],[0.7087,0.1024],[0.7087,0.0945],[0.7087,0.0866],[0.7087,0.0787],[0.7087,0.0709],[0.7087,0.063],[0.7087,0.0551],[0.7087,0.0472],[0.7087,0.0394],[0.7087,0.0315],[0.7087,0.0236],[0.7087,0.0157],[0.7087,0.0079],[0.7087,0],[0.7166,0.9999],[0.7166,0.9921],[0.7166,0.9842],[0.7166,0.9763],[0.7166,0.9684],[0.7166,0.9606],[0.7166,0.9527],[0.7166,0.9448],[0.7166,0.937],[0.7166,0.9291],[0.7166,0.9212],[0.7166,0.9133],[0.7166,0.9055],[0.7166,0.8976],[0.7166,0.8897],[0.7166,0.8818],[0.7166,0.874],[0.7166,0.8661],[0.7166,0.8582],[0.7166,0.8503],[0.7166,0.8425],[0.7166,0.8346],[0.7166,0.8267],[0.7166,0.8188],[0.7166,0.811],[0.7166,0.8031],[0.7166,0.7952],[0.7166,0.7874],[0.7166,0.7795],[0.7166,0.7716],[0.7166,0.7637],[0.7166,0.7559],[0.7166,0.748],[0.7166,0.7401],[0.7166,0.7322],[0.7166,0.7244],[0.7166,0.7165],[0.7166,0.7086],[0.7166,0.7007],[0.7166,0.6929],[0.7166,0.685],[0.7166,0.6771],[0.7166,0.6693],[0.7166,0.6614],[0.7166,0.6535],[0.7166,0.6456],[0.7166,0.6378],[0.7166,0.6299],[0.7166,0.622],[0.7166,0.6141],[0.7166,0.6063],[0.7166,0.5984],[0.7166,0.5905],[0.7166,0.5826],[0.7166,0.5748],[0.7166,0.5669],[0.7166,0.559],[0.7166,0.5511],[0.7166,0.5433],[0.7166,0.5354],[0.7166,0.5275],[0.7166,0.5197],[0.7166,0.5118],[0.7166,0.5039],[0.7166,0.496],[0.7166,0.4882],[0.7166,0.4803],[0.7166,0.4724],[0.7166,0.4645],[0.7166,0.4567],[0.7166,0.4488],[0.7166,0.4409],[0.7166,0.433],[0.7166,0.4252],[0.7166,0.4173],[0.7166,0.4094],[0.7166,0.4016],[0.7166,0.3937],[0.7166,0.3858],[0.7166,0.3779],[0.7166,0.3701],[0.7166,0.3622],[0.7166,0.3543],[0.7166,0.3464],[0.7166,0.3386],[0.7166,0.3307],[0.7166,0.3228],[0.7166,0.3149],[0.7166,0.3071],[0.7166,0.2992],[0.7166,0.2913],[0.7166,0.2834],[0.7166,0.2756],[0.7166,0.2677],[0.7166,0.2598],[0.7166,0.252],[0.7166,0.2441],[0.7166,0.2362],[0.7166,0.2283],[0.7166,0.2205],[0.7166,0.2126],[0.7166,0.2047],[0.7166,0.1968],[0.7166,0.189],[0.7166,0.1811],[0.7166,0.1732],[0.7166,0.1653],[0.7166,0.1575],[0.7166,0.1496],[0.7166,0.1417],[0.7166,0.1339],[0.7166,0.126],[0.7166,0.1181],[0.7166,0.1102],[0.7166,0.1024],[0.7166,0.0945],[0.7166,0.0866],[0.7166,0.0787],[0.7166,0.0709],[0.7166,0.063],[0.7166,0.0551],[0.7166,0.0472],[0.7166,0.0394],[0.7166,0.0315],[0.7166,0.0236],[0.7166,0.0157],[0.7166,0.0079],[0.7166,0],[0.7244,0.9999],[0.7244,0.9921],[0.7244,0.9842],[0.7244,0.9763],[0.7244,0.9684],[0.7244,0.9606],[0.7244,0.9527],[0.7244,0.9448],[0.7244,0.937],[0.7244,0.9291],[0.7244,0.9212],[0.7244,0.9133],[0.7244,0.9055],[0.7244,0.8976],[0.7244,0.8897],[0.7244,0.8818],[0.7244,0.874],[0.7244,0.8661],[0.7244,0.8582],[0.7244,0.8503],[0.7244,0.8425],[0.7244,0.8346],[0.7244,0.8267],[0.7244,0.8188],[0.7244,0.811],[0.7244,0.8031],[0.7244,0.7952],[0.7244,0.7874],[0.7244,0.7795],[0.7244,0.7716],[0.7244,0.7637],[0.7244,0.7559],[0.7244,0.748],[0.7244,0.7401],[0.7244,0.7322],[0.7244,0.7244],[0.7244,0.7165],[0.7244,0.7086],[0.7244,0.7007],[0.7244,0.6929],[0.7244,0.685],[0.7244,0.6771],[0.7244,0.6693],[0.7244,0.6614],[0.7244,0.6535],[0.7244,0.6456],[0.7244,0.6378],[0.7244,0.6299],[0.7244,0.622],[0.7244,0.6141],[0.7244,0.6063],[0.7244,0.5984],[0.7244,0.5905],[0.7244,0.5826],[0.7244,0.5748],[0.7244,0.5669],[0.7244,0.559],[0.7244,0.5511],[0.7244,0.5433],[0.7244,0.5354],[0.7244,0.5275],[0.7244,0.5197],[0.7244,0.5118],[0.7244,0.5039],[0.7244,0.496],[0.7244,0.4882],[0.7244,0.4803],[0.7244,0.4724],[0.7244,0.4645],[0.7244,0.4567],[0.7244,0.4488],[0.7244,0.4409],[0.7244,0.433],[0.7244,0.4252],[0.7244,0.4173],[0.7244,0.4094],[0.7244,0.4016],[0.7244,0.3937],[0.7244,0.3858],[0.7244,0.3779],[0.7244,0.3701],[0.7244,0.3622],[0.7244,0.3543],[0.7244,0.3464],[0.7244,0.3386],[0.7244,0.3307],[0.7244,0.3228],[0.7244,0.3149],[0.7244,0.3071],[0.7244,0.2992],[0.7244,0.2913],[0.7244,0.2834],[0.7244,0.2756],[0.7244,0.2677],[0.7244,0.2598],[0.7244,0.252],[0.7244,0.2441],[0.7244,0.2362],[0.7244,0.2283],[0.7244,0.2205],[0.7244,0.2126],[0.7244,0.2047],[0.7244,0.1968],[0.7244,0.189],[0.7244,0.1811],[0.7244,0.1732],[0.7244,0.1653],[0.7244,0.1575],[0.7244,0.1496],[0.7244,0.1417],[0.7244,0.1339],[0.7244,0.126],[0.7244,0.1181],[0.7244,0.1102],[0.7244,0.1024],[0.7244,0.0945],[0.7244,0.0866],[0.7244,0.0787],[0.7244,0.0709],[0.7244,0.063],[0.7244,0.0551],[0.7244,0.0472],[0.7244,0.0394],[0.7244,0.0315],[0.7244,0.0236],[0.7244,0.0157],[0.7244,0.0079],[0.7244,0],[0.7323,0.9999],[0.7323,0.9921],[0.7323,0.9842],[0.7323,0.9763],[0.7323,0.9684],[0.7323,0.9606],[0.7323,0.9527],[0.7323,0.9448],[0.7323,0.937],[0.7323,0.9291],[0.7323,0.9212],[0.7323,0.9133],[0.7323,0.9055],[0.7323,0.8976],[0.7323,0.8897],[0.7323,0.8818],[0.7323,0.874],[0.7323,0.8661],[0.7323,0.8582],[0.7323,0.8503],[0.7323,0.8425],[0.7323,0.8346],[0.7323,0.8267],[0.7323,0.8188],[0.7323,0.811],[0.7323,0.8031],[0.7323,0.7952],[0.7323,0.7874],[0.7323,0.7795],[0.7323,0.7716],[0.7323,0.7637],[0.7323,0.7559],[0.7323,0.748],[0.7323,0.7401],[0.7323,0.7322],[0.7323,0.7244],[0.7323,0.7165],[0.7323,0.7086],[0.7323,0.7007],[0.7323,0.6929],[0.7323,0.685],[0.7323,0.6771],[0.7323,0.6693],[0.7323,0.6614],[0.7323,0.6535],[0.7323,0.6456],[0.7323,0.6378],[0.7323,0.6299],[0.7323,0.622],[0.7323,0.6141],[0.7323,0.6063],[0.7323,0.5984],[0.7323,0.5905],[0.7323,0.5826],[0.7323,0.5748],[0.7323,0.5669],[0.7323,0.559],[0.7323,0.5511],[0.7323,0.5433],[0.7323,0.5354],[0.7323,0.5275],[0.7323,0.5197],[0.7323,0.5118],[0.7323,0.5039],[0.7323,0.496],[0.7323,0.4882],[0.7323,0.4803],[0.7323,0.4724],[0.7323,0.4645],[0.7323,0.4567],[0.7323,0.4488],[0.7323,0.4409],[0.7323,0.433],[0.7323,0.4252],[0.7323,0.4173],[0.7323,0.4094],[0.7323,0.4016],[0.7323,0.3937],[0.7323,0.3858],[0.7323,0.3779],[0.7323,0.3701],[0.7323,0.3622],[0.7323,0.3543],[0.7323,0.3464],[0.7323,0.3386],[0.7323,0.3307],[0.7323,0.3228],[0.7323,0.3149],[0.7323,0.3071],[0.7323,0.2992],[0.7323,0.2913],[0.7323,0.2834],[0.7323,0.2756],[0.7323,0.2677],[0.7323,0.2598],[0.7323,0.252],[0.7323,0.2441],[0.7323,0.2362],[0.7323,0.2283],[0.7323,0.2205],[0.7323,0.2126],[0.7323,0.2047],[0.7323,0.1968],[0.7323,0.189],[0.7323,0.1811],[0.7323,0.1732],[0.7323,0.1653],[0.7323,0.1575],[0.7323,0.1496],[0.7323,0.1417],[0.7323,0.1339],[0.7323,0.126],[0.7323,0.1181],[0.7323,0.1102],[0.7323,0.1024],[0.7323,0.0945],[0.7323,0.0866],[0.7323,0.0787],[0.7323,0.0709],[0.7323,0.063],[0.7323,0.0551],[0.7323,0.0472],[0.7323,0.0394],[0.7323,0.0315],[0.7323,0.0236],[0.7323,0.0157],[0.7323,0.0079],[0.7323,0],[0.7402,0.9999],[0.7402,0.9921],[0.7402,0.9842],[0.7402,0.9763],[0.7402,0.9684],[0.7402,0.9606],[0.7402,0.9527],[0.7402,0.9448],[0.7402,0.937],[0.7402,0.9291],[0.7402,0.9212],[0.7402,0.9133],[0.7402,0.9055],[0.7402,0.8976],[0.7402,0.8897],[0.7402,0.8818],[0.7402,0.874],[0.7402,0.8661],[0.7402,0.8582],[0.7402,0.8503],[0.7402,0.8425],[0.7402,0.8346],[0.7402,0.8267],[0.7402,0.8188],[0.7402,0.811],[0.7402,0.8031],[0.7402,0.7952],[0.7402,0.7874],[0.7402,0.7795],[0.7402,0.7716],[0.7402,0.7637],[0.7402,0.7559],[0.7402,0.748],[0.7402,0.7401],[0.7402,0.7322],[0.7402,0.7244],[0.7402,0.7165],[0.7402,0.7086],[0.7402,0.7007],[0.7402,0.6929],[0.7402,0.685],[0.7402,0.6771],[0.7402,0.6693],[0.7402,0.6614],[0.7402,0.6535],[0.7402,0.6456],[0.7402,0.6378],[0.7402,0.6299],[0.7402,0.622],[0.7402,0.6141],[0.7402,0.6063],[0.7402,0.5984],[0.7402,0.5905],[0.7402,0.5826],[0.7402,0.5748],[0.7402,0.5669],[0.7402,0.559],[0.7402,0.5511],[0.7402,0.5433],[0.7402,0.5354],[0.7402,0.5275],[0.7402,0.5197],[0.7402,0.5118],[0.7402,0.5039],[0.7402,0.496],[0.7402,0.4882],[0.7402,0.4803],[0.7402,0.4724],[0.7402,0.4645],[0.7402,0.4567],[0.7402,0.4488],[0.7402,0.4409],[0.7402,0.433],[0.7402,0.4252],[0.7402,0.4173],[0.7402,0.4094],[0.7402,0.4016],[0.7402,0.3937],[0.7402,0.3858],[0.7402,0.3779],[0.7402,0.3701],[0.7402,0.3622],[0.7402,0.3543],[0.7402,0.3464],[0.7402,0.3386],[0.7402,0.3307],[0.7402,0.3228],[0.7402,0.3149],[0.7402,0.3071],[0.7402,0.2992],[0.7402,0.2913],[0.7402,0.2834],[0.7402,0.2756],[0.7402,0.2677],[0.7402,0.2598],[0.7402,0.252],[0.7402,0.2441],[0.7402,0.2362],[0.7402,0.2283],[0.7402,0.2205],[0.7402,0.2126],[0.7402,0.2047],[0.7402,0.1968],[0.7402,0.189],[0.7402,0.1811],[0.7402,0.1732],[0.7402,0.1653],[0.7402,0.1575],[0.7402,0.1496],[0.7402,0.1417],[0.7402,0.1339],[0.7402,0.126],[0.7402,0.1181],[0.7402,0.1102],[0.7402,0.1024],[0.7402,0.0945],[0.7402,0.0866],[0.7402,0.0787],[0.7402,0.0709],[0.7402,0.063],[0.7402,0.0551],[0.7402,0.0472],[0.7402,0.0394],[0.7402,0.0315],[0.7402,0.0236],[0.7402,0.0157],[0.7402,0.0079],[0.7402,0],[0.748,0.9999],[0.748,0.9921],[0.748,0.9842],[0.748,0.9763],[0.748,0.9684],[0.748,0.9606],[0.748,0.9527],[0.748,0.9448],[0.748,0.937],[0.748,0.9291],[0.748,0.9212],[0.748,0.9133],[0.748,0.9055],[0.748,0.8976],[0.748,0.8897],[0.748,0.8818],[0.748,0.874],[0.748,0.8661],[0.748,0.8582],[0.748,0.8503],[0.748,0.8425],[0.748,0.8346],[0.748,0.8267],[0.748,0.8188],[0.748,0.811],[0.748,0.8031],[0.748,0.7952],[0.748,0.7874],[0.748,0.7795],[0.748,0.7716],[0.748,0.7637],[0.748,0.7559],[0.748,0.748],[0.748,0.7401],[0.748,0.7322],[0.748,0.7244],[0.748,0.7165],[0.748,0.7086],[0.748,0.7007],[0.748,0.6929],[0.748,0.685],[0.748,0.6771],[0.748,0.6693],[0.748,0.6614],[0.748,0.6535],[0.748,0.6456],[0.748,0.6378],[0.748,0.6299],[0.748,0.622],[0.748,0.6141],[0.748,0.6063],[0.748,0.5984],[0.748,0.5905],[0.748,0.5826],[0.748,0.5748],[0.748,0.5669],[0.748,0.559],[0.748,0.5511],[0.748,0.5433],[0.748,0.5354],[0.748,0.5275],[0.748,0.5197],[0.748,0.5118],[0.748,0.5039],[0.748,0.496],[0.748,0.4882],[0.748,0.4803],[0.748,0.4724],[0.748,0.4645],[0.748,0.4567],[0.748,0.4488],[0.748,0.4409],[0.748,0.433],[0.748,0.4252],[0.748,0.4173],[0.748,0.4094],[0.748,0.4016],[0.748,0.3937],[0.748,0.3858],[0.748,0.3779],[0.748,0.3701],[0.748,0.3622],[0.748,0.3543],[0.748,0.3464],[0.748,0.3386],[0.748,0.3307],[0.748,0.3228],[0.748,0.3149],[0.748,0.3071],[0.748,0.2992],[0.748,0.2913],[0.748,0.2834],[0.748,0.2756],[0.748,0.2677],[0.748,0.2598],[0.748,0.252],[0.748,0.2441],[0.748,0.2362],[0.748,0.2283],[0.748,0.2205],[0.748,0.2126],[0.748,0.2047],[0.748,0.1968],[0.748,0.189],[0.748,0.1811],[0.748,0.1732],[0.748,0.1653],[0.748,0.1575],[0.748,0.1496],[0.748,0.1417],[0.748,0.1339],[0.748,0.126],[0.748,0.1181],[0.748,0.1102],[0.748,0.1024],[0.748,0.0945],[0.748,0.0866],[0.748,0.0787],[0.748,0.0709],[0.748,0.063],[0.748,0.0551],[0.748,0.0472],[0.748,0.0394],[0.748,0.0315],[0.748,0.0236],[0.748,0.0157],[0.748,0.0079],[0.748,0],[0.7559,0.9999],[0.7559,0.9921],[0.7559,0.9842],[0.7559,0.9763],[0.7559,0.9684],[0.7559,0.9606],[0.7559,0.9527],[0.7559,0.9448],[0.7559,0.937],[0.7559,0.9291],[0.7559,0.9212],[0.7559,0.9133],[0.7559,0.9055],[0.7559,0.8976],[0.7559,0.8897],[0.7559,0.8818],[0.7559,0.874],[0.7559,0.8661],[0.7559,0.8582],[0.7559,0.8503],[0.7559,0.8425],[0.7559,0.8346],[0.7559,0.8267],[0.7559,0.8188],[0.7559,0.811],[0.7559,0.8031],[0.7559,0.7952],[0.7559,0.7874],[0.7559,0.7795],[0.7559,0.7716],[0.7559,0.7637],[0.7559,0.7559],[0.7559,0.748],[0.7559,0.7401],[0.7559,0.7322],[0.7559,0.7244],[0.7559,0.7165],[0.7559,0.7086],[0.7559,0.7007],[0.7559,0.6929],[0.7559,0.685],[0.7559,0.6771],[0.7559,0.6693],[0.7559,0.6614],[0.7559,0.6535],[0.7559,0.6456],[0.7559,0.6378],[0.7559,0.6299],[0.7559,0.622],[0.7559,0.6141],[0.7559,0.6063],[0.7559,0.5984],[0.7559,0.5905],[0.7559,0.5826],[0.7559,0.5748],[0.7559,0.5669],[0.7559,0.559],[0.7559,0.5511],[0.7559,0.5433],[0.7559,0.5354],[0.7559,0.5275],[0.7559,0.5197],[0.7559,0.5118],[0.7559,0.5039],[0.7559,0.496],[0.7559,0.4882],[0.7559,0.4803],[0.7559,0.4724],[0.7559,0.4645],[0.7559,0.4567],[0.7559,0.4488],[0.7559,0.4409],[0.7559,0.433],[0.7559,0.4252],[0.7559,0.4173],[0.7559,0.4094],[0.7559,0.4016],[0.7559,0.3937],[0.7559,0.3858],[0.7559,0.3779],[0.7559,0.3701],[0.7559,0.3622],[0.7559,0.3543],[0.7559,0.3464],[0.7559,0.3386],[0.7559,0.3307],[0.7559,0.3228],[0.7559,0.3149],[0.7559,0.3071],[0.7559,0.2992],[0.7559,0.2913],[0.7559,0.2834],[0.7559,0.2756],[0.7559,0.2677],[0.7559,0.2598],[0.7559,0.252],[0.7559,0.2441],[0.7559,0.2362],[0.7559,0.2283],[0.7559,0.2205],[0.7559,0.2126],[0.7559,0.2047],[0.7559,0.1968],[0.7559,0.189],[0.7559,0.1811],[0.7559,0.1732],[0.7559,0.1653],[0.7559,0.1575],[0.7559,0.1496],[0.7559,0.1417],[0.7559,0.1339],[0.7559,0.126],[0.7559,0.1181],[0.7559,0.1102],[0.7559,0.1024],[0.7559,0.0945],[0.7559,0.0866],[0.7559,0.0787],[0.7559,0.0709],[0.7559,0.063],[0.7559,0.0551],[0.7559,0.0472],[0.7559,0.0394],[0.7559,0.0315],[0.7559,0.0236],[0.7559,0.0157],[0.7559,0.0079],[0.7559,0],[0.7638,0.9999],[0.7638,0.9921],[0.7638,0.9842],[0.7638,0.9763],[0.7638,0.9684],[0.7638,0.9606],[0.7638,0.9527],[0.7638,0.9448],[0.7638,0.937],[0.7638,0.9291],[0.7638,0.9212],[0.7638,0.9133],[0.7638,0.9055],[0.7638,0.8976],[0.7638,0.8897],[0.7638,0.8818],[0.7638,0.874],[0.7638,0.8661],[0.7638,0.8582],[0.7638,0.8503],[0.7638,0.8425],[0.7638,0.8346],[0.7638,0.8267],[0.7638,0.8188],[0.7638,0.811],[0.7638,0.8031],[0.7638,0.7952],[0.7638,0.7874],[0.7638,0.7795],[0.7638,0.7716],[0.7638,0.7637],[0.7638,0.7559],[0.7638,0.748],[0.7638,0.7401],[0.7638,0.7322],[0.7638,0.7244],[0.7638,0.7165],[0.7638,0.7086],[0.7638,0.7007],[0.7638,0.6929],[0.7638,0.685],[0.7638,0.6771],[0.7638,0.6693],[0.7638,0.6614],[0.7638,0.6535],[0.7638,0.6456],[0.7638,0.6378],[0.7638,0.6299],[0.7638,0.622],[0.7638,0.6141],[0.7638,0.6063],[0.7638,0.5984],[0.7638,0.5905],[0.7638,0.5826],[0.7638,0.5748],[0.7638,0.5669],[0.7638,0.559],[0.7638,0.5511],[0.7638,0.5433],[0.7638,0.5354],[0.7638,0.5275],[0.7638,0.5197],[0.7638,0.5118],[0.7638,0.5039],[0.7638,0.496],[0.7638,0.4882],[0.7638,0.4803],[0.7638,0.4724],[0.7638,0.4645],[0.7638,0.4567],[0.7638,0.4488],[0.7638,0.4409],[0.7638,0.433],[0.7638,0.4252],[0.7638,0.4173],[0.7638,0.4094],[0.7638,0.4016],[0.7638,0.3937],[0.7638,0.3858],[0.7638,0.3779],[0.7638,0.3701],[0.7638,0.3622],[0.7638,0.3543],[0.7638,0.3464],[0.7638,0.3386],[0.7638,0.3307],[0.7638,0.3228],[0.7638,0.3149],[0.7638,0.3071],[0.7638,0.2992],[0.7638,0.2913],[0.7638,0.2834],[0.7638,0.2756],[0.7638,0.2677],[0.7638,0.2598],[0.7638,0.252],[0.7638,0.2441],[0.7638,0.2362],[0.7638,0.2283],[0.7638,0.2205],[0.7638,0.2126],[0.7638,0.2047],[0.7638,0.1968],[0.7638,0.189],[0.7638,0.1811],[0.7638,0.1732],[0.7638,0.1653],[0.7638,0.1575],[0.7638,0.1496],[0.7638,0.1417],[0.7638,0.1339],[0.7638,0.126],[0.7638,0.1181],[0.7638,0.1102],[0.7638,0.1024],[0.7638,0.0945],[0.7638,0.0866],[0.7638,0.0787],[0.7638,0.0709],[0.7638,0.063],[0.7638,0.0551],[0.7638,0.0472],[0.7638,0.0394],[0.7638,0.0315],[0.7638,0.0236],[0.7638,0.0157],[0.7638,0.0079],[0.7638,0],[0.7717,0.9999],[0.7717,0.9921],[0.7717,0.9842],[0.7717,0.9763],[0.7717,0.9684],[0.7717,0.9606],[0.7717,0.9527],[0.7717,0.9448],[0.7717,0.937],[0.7717,0.9291],[0.7717,0.9212],[0.7717,0.9133],[0.7717,0.9055],[0.7717,0.8976],[0.7717,0.8897],[0.7717,0.8818],[0.7717,0.874],[0.7717,0.8661],[0.7717,0.8582],[0.7717,0.8503],[0.7717,0.8425],[0.7717,0.8346],[0.7717,0.8267],[0.7717,0.8188],[0.7717,0.811],[0.7717,0.8031],[0.7717,0.7952],[0.7717,0.7874],[0.7717,0.7795],[0.7717,0.7716],[0.7717,0.7637],[0.7717,0.7559],[0.7717,0.748],[0.7717,0.7401],[0.7717,0.7322],[0.7717,0.7244],[0.7717,0.7165],[0.7717,0.7086],[0.7717,0.7007],[0.7717,0.6929],[0.7717,0.685],[0.7717,0.6771],[0.7717,0.6693],[0.7717,0.6614],[0.7717,0.6535],[0.7717,0.6456],[0.7717,0.6378],[0.7717,0.6299],[0.7717,0.622],[0.7717,0.6141],[0.7717,0.6063],[0.7717,0.5984],[0.7717,0.5905],[0.7717,0.5826],[0.7717,0.5748],[0.7717,0.5669],[0.7717,0.559],[0.7717,0.5511],[0.7717,0.5433],[0.7717,0.5354],[0.7717,0.5275],[0.7717,0.5197],[0.7717,0.5118],[0.7717,0.5039],[0.7717,0.496],[0.7717,0.4882],[0.7717,0.4803],[0.7717,0.4724],[0.7717,0.4645],[0.7717,0.4567],[0.7717,0.4488],[0.7717,0.4409],[0.7717,0.433],[0.7717,0.4252],[0.7717,0.4173],[0.7717,0.4094],[0.7717,0.4016],[0.7717,0.3937],[0.7717,0.3858],[0.7717,0.3779],[0.7717,0.3701],[0.7717,0.3622],[0.7717,0.3543],[0.7717,0.3464],[0.7717,0.3386],[0.7717,0.3307],[0.7717,0.3228],[0.7717,0.3149],[0.7717,0.3071],[0.7717,0.2992],[0.7717,0.2913],[0.7717,0.2834],[0.7717,0.2756],[0.7717,0.2677],[0.7717,0.2598],[0.7717,0.252],[0.7717,0.2441],[0.7717,0.2362],[0.7717,0.2283],[0.7717,0.2205],[0.7717,0.2126],[0.7717,0.2047],[0.7717,0.1968],[0.7717,0.189],[0.7717,0.1811],[0.7717,0.1732],[0.7717,0.1653],[0.7717,0.1575],[0.7717,0.1496],[0.7717,0.1417],[0.7717,0.1339],[0.7717,0.126],[0.7717,0.1181],[0.7717,0.1102],[0.7717,0.1024],[0.7717,0.0945],[0.7717,0.0866],[0.7717,0.0787],[0.7717,0.0709],[0.7717,0.063],[0.7717,0.0551],[0.7717,0.0472],[0.7717,0.0394],[0.7717,0.0315],[0.7717,0.0236],[0.7717,0.0157],[0.7717,0.0079],[0.7717,0],[0.7795,0.9999],[0.7795,0.9921],[0.7795,0.9842],[0.7795,0.9763],[0.7795,0.9684],[0.7795,0.9606],[0.7795,0.9527],[0.7795,0.9448],[0.7795,0.937],[0.7795,0.9291],[0.7795,0.9212],[0.7795,0.9133],[0.7795,0.9055],[0.7795,0.8976],[0.7795,0.8897],[0.7795,0.8818],[0.7795,0.874],[0.7795,0.8661],[0.7795,0.8582],[0.7795,0.8503],[0.7795,0.8425],[0.7795,0.8346],[0.7795,0.8267],[0.7795,0.8188],[0.7795,0.811],[0.7795,0.8031],[0.7795,0.7952],[0.7795,0.7874],[0.7795,0.7795],[0.7795,0.7716],[0.7795,0.7637],[0.7795,0.7559],[0.7795,0.748],[0.7795,0.7401],[0.7795,0.7322],[0.7795,0.7244],[0.7795,0.7165],[0.7795,0.7086],[0.7795,0.7007],[0.7795,0.6929],[0.7795,0.685],[0.7795,0.6771],[0.7795,0.6693],[0.7795,0.6614],[0.7795,0.6535],[0.7795,0.6456],[0.7795,0.6378],[0.7795,0.6299],[0.7795,0.622],[0.7795,0.6141],[0.7795,0.6063],[0.7795,0.5984],[0.7795,0.5905],[0.7795,0.5826],[0.7795,0.5748],[0.7795,0.5669],[0.7795,0.559],[0.7795,0.5511],[0.7795,0.5433],[0.7795,0.5354],[0.7795,0.5275],[0.7795,0.5197],[0.7795,0.5118],[0.7795,0.5039],[0.7795,0.496],[0.7795,0.4882],[0.7795,0.4803],[0.7795,0.4724],[0.7795,0.4645],[0.7795,0.4567],[0.7795,0.4488],[0.7795,0.4409],[0.7795,0.433],[0.7795,0.4252],[0.7795,0.4173],[0.7795,0.4094],[0.7795,0.4016],[0.7795,0.3937],[0.7795,0.3858],[0.7795,0.3779],[0.7795,0.3701],[0.7795,0.3622],[0.7795,0.3543],[0.7795,0.3464],[0.7795,0.3386],[0.7795,0.3307],[0.7795,0.3228],[0.7795,0.3149],[0.7795,0.3071],[0.7795,0.2992],[0.7795,0.2913],[0.7795,0.2834],[0.7795,0.2756],[0.7795,0.2677],[0.7795,0.2598],[0.7795,0.252],[0.7795,0.2441],[0.7795,0.2362],[0.7795,0.2283],[0.7795,0.2205],[0.7795,0.2126],[0.7795,0.2047],[0.7795,0.1968],[0.7795,0.189],[0.7795,0.1811],[0.7795,0.1732],[0.7795,0.1653],[0.7795,0.1575],[0.7795,0.1496],[0.7795,0.1417],[0.7795,0.1339],[0.7795,0.126],[0.7795,0.1181],[0.7795,0.1102],[0.7795,0.1024],[0.7795,0.0945],[0.7795,0.0866],[0.7795,0.0787],[0.7795,0.0709],[0.7795,0.063],[0.7795,0.0551],[0.7795,0.0472],[0.7795,0.0394],[0.7795,0.0315],[0.7795,0.0236],[0.7795,0.0157],[0.7795,0.0079],[0.7795,0],[0.7874,0.9999],[0.7874,0.9921],[0.7874,0.9842],[0.7874,0.9763],[0.7874,0.9684],[0.7874,0.9606],[0.7874,0.9527],[0.7874,0.9448],[0.7874,0.937],[0.7874,0.9291],[0.7874,0.9212],[0.7874,0.9133],[0.7874,0.9055],[0.7874,0.8976],[0.7874,0.8897],[0.7874,0.8818],[0.7874,0.874],[0.7874,0.8661],[0.7874,0.8582],[0.7874,0.8503],[0.7874,0.8425],[0.7874,0.8346],[0.7874,0.8267],[0.7874,0.8188],[0.7874,0.811],[0.7874,0.8031],[0.7874,0.7952],[0.7874,0.7874],[0.7874,0.7795],[0.7874,0.7716],[0.7874,0.7637],[0.7874,0.7559],[0.7874,0.748],[0.7874,0.7401],[0.7874,0.7322],[0.7874,0.7244],[0.7874,0.7165],[0.7874,0.7086],[0.7874,0.7007],[0.7874,0.6929],[0.7874,0.685],[0.7874,0.6771],[0.7874,0.6693],[0.7874,0.6614],[0.7874,0.6535],[0.7874,0.6456],[0.7874,0.6378],[0.7874,0.6299],[0.7874,0.622],[0.7874,0.6141],[0.7874,0.6063],[0.7874,0.5984],[0.7874,0.5905],[0.7874,0.5826],[0.7874,0.5748],[0.7874,0.5669],[0.7874,0.559],[0.7874,0.5511],[0.7874,0.5433],[0.7874,0.5354],[0.7874,0.5275],[0.7874,0.5197],[0.7874,0.5118],[0.7874,0.5039],[0.7874,0.496],[0.7874,0.4882],[0.7874,0.4803],[0.7874,0.4724],[0.7874,0.4645],[0.7874,0.4567],[0.7874,0.4488],[0.7874,0.4409],[0.7874,0.433],[0.7874,0.4252],[0.7874,0.4173],[0.7874,0.4094],[0.7874,0.4016],[0.7874,0.3937],[0.7874,0.3858],[0.7874,0.3779],[0.7874,0.3701],[0.7874,0.3622],[0.7874,0.3543],[0.7874,0.3464],[0.7874,0.3386],[0.7874,0.3307],[0.7874,0.3228],[0.7874,0.3149],[0.7874,0.3071],[0.7874,0.2992],[0.7874,0.2913],[0.7874,0.2834],[0.7874,0.2756],[0.7874,0.2677],[0.7874,0.2598],[0.7874,0.252],[0.7874,0.2441],[0.7874,0.2362],[0.7874,0.2283],[0.7874,0.2205],[0.7874,0.2126],[0.7874,0.2047],[0.7874,0.1968],[0.7874,0.189],[0.7874,0.1811],[0.7874,0.1732],[0.7874,0.1653],[0.7874,0.1575],[0.7874,0.1496],[0.7874,0.1417],[0.7874,0.1339],[0.7874,0.126],[0.7874,0.1181],[0.7874,0.1102],[0.7874,0.1024],[0.7874,0.0945],[0.7874,0.0866],[0.7874,0.0787],[0.7874,0.0709],[0.7874,0.063],[0.7874,0.0551],[0.7874,0.0472],[0.7874,0.0394],[0.7874,0.0315],[0.7874,0.0236],[0.7874,0.0157],[0.7874,0.0079],[0.7874,0],[0.7953,0.9999],[0.7953,0.9921],[0.7953,0.9842],[0.7953,0.9763],[0.7953,0.9684],[0.7953,0.9606],[0.7953,0.9527],[0.7953,0.9448],[0.7953,0.937],[0.7953,0.9291],[0.7953,0.9212],[0.7953,0.9133],[0.7953,0.9055],[0.7953,0.8976],[0.7953,0.8897],[0.7953,0.8818],[0.7953,0.874],[0.7953,0.8661],[0.7953,0.8582],[0.7953,0.8503],[0.7953,0.8425],[0.7953,0.8346],[0.7953,0.8267],[0.7953,0.8188],[0.7953,0.811],[0.7953,0.8031],[0.7953,0.7952],[0.7953,0.7874],[0.7953,0.7795],[0.7953,0.7716],[0.7953,0.7637],[0.7953,0.7559],[0.7953,0.748],[0.7953,0.7401],[0.7953,0.7322],[0.7953,0.7244],[0.7953,0.7165],[0.7953,0.7086],[0.7953,0.7007],[0.7953,0.6929],[0.7953,0.685],[0.7953,0.6771],[0.7953,0.6693],[0.7953,0.6614],[0.7953,0.6535],[0.7953,0.6456],[0.7953,0.6378],[0.7953,0.6299],[0.7953,0.622],[0.7953,0.6141],[0.7953,0.6063],[0.7953,0.5984],[0.7953,0.5905],[0.7953,0.5826],[0.7953,0.5748],[0.7953,0.5669],[0.7953,0.559],[0.7953,0.5511],[0.7953,0.5433],[0.7953,0.5354],[0.7953,0.5275],[0.7953,0.5197],[0.7953,0.5118],[0.7953,0.5039],[0.7953,0.496],[0.7953,0.4882],[0.7953,0.4803],[0.7953,0.4724],[0.7953,0.4645],[0.7953,0.4567],[0.7953,0.4488],[0.7953,0.4409],[0.7953,0.433],[0.7953,0.4252],[0.7953,0.4173],[0.7953,0.4094],[0.7953,0.4016],[0.7953,0.3937],[0.7953,0.3858],[0.7953,0.3779],[0.7953,0.3701],[0.7953,0.3622],[0.7953,0.3543],[0.7953,0.3464],[0.7953,0.3386],[0.7953,0.3307],[0.7953,0.3228],[0.7953,0.3149],[0.7953,0.3071],[0.7953,0.2992],[0.7953,0.2913],[0.7953,0.2834],[0.7953,0.2756],[0.7953,0.2677],[0.7953,0.2598],[0.7953,0.252],[0.7953,0.2441],[0.7953,0.2362],[0.7953,0.2283],[0.7953,0.2205],[0.7953,0.2126],[0.7953,0.2047],[0.7953,0.1968],[0.7953,0.189],[0.7953,0.1811],[0.7953,0.1732],[0.7953,0.1653],[0.7953,0.1575],[0.7953,0.1496],[0.7953,0.1417],[0.7953,0.1339],[0.7953,0.126],[0.7953,0.1181],[0.7953,0.1102],[0.7953,0.1024],[0.7953,0.0945],[0.7953,0.0866],[0.7953,0.0787],[0.7953,0.0709],[0.7953,0.063],[0.7953,0.0551],[0.7953,0.0472],[0.7953,0.0394],[0.7953,0.0315],[0.7953,0.0236],[0.7953,0.0157],[0.7953,0.0079],[0.7953,0],[0.8032,0.9999],[0.8032,0.9921],[0.8032,0.9842],[0.8032,0.9763],[0.8032,0.9684],[0.8032,0.9606],[0.8032,0.9527],[0.8032,0.9448],[0.8032,0.937],[0.8032,0.9291],[0.8032,0.9212],[0.8032,0.9133],[0.8032,0.9055],[0.8032,0.8976],[0.8032,0.8897],[0.8032,0.8818],[0.8032,0.874],[0.8032,0.8661],[0.8032,0.8582],[0.8032,0.8503],[0.8032,0.8425],[0.8032,0.8346],[0.8032,0.8267],[0.8032,0.8188],[0.8032,0.811],[0.8032,0.8031],[0.8032,0.7952],[0.8032,0.7874],[0.8032,0.7795],[0.8032,0.7716],[0.8032,0.7637],[0.8032,0.7559],[0.8032,0.748],[0.8032,0.7401],[0.8032,0.7322],[0.8032,0.7244],[0.8032,0.7165],[0.8032,0.7086],[0.8032,0.7007],[0.8032,0.6929],[0.8032,0.685],[0.8032,0.6771],[0.8032,0.6693],[0.8032,0.6614],[0.8032,0.6535],[0.8032,0.6456],[0.8032,0.6378],[0.8032,0.6299],[0.8032,0.622],[0.8032,0.6141],[0.8032,0.6063],[0.8032,0.5984],[0.8032,0.5905],[0.8032,0.5826],[0.8032,0.5748],[0.8032,0.5669],[0.8032,0.559],[0.8032,0.5511],[0.8032,0.5433],[0.8032,0.5354],[0.8032,0.5275],[0.8032,0.5197],[0.8032,0.5118],[0.8032,0.5039],[0.8032,0.496],[0.8032,0.4882],[0.8032,0.4803],[0.8032,0.4724],[0.8032,0.4645],[0.8032,0.4567],[0.8032,0.4488],[0.8032,0.4409],[0.8032,0.433],[0.8032,0.4252],[0.8032,0.4173],[0.8032,0.4094],[0.8032,0.4016],[0.8032,0.3937],[0.8032,0.3858],[0.8032,0.3779],[0.8032,0.3701],[0.8032,0.3622],[0.8032,0.3543],[0.8032,0.3464],[0.8032,0.3386],[0.8032,0.3307],[0.8032,0.3228],[0.8032,0.3149],[0.8032,0.3071],[0.8032,0.2992],[0.8032,0.2913],[0.8032,0.2834],[0.8032,0.2756],[0.8032,0.2677],[0.8032,0.2598],[0.8032,0.252],[0.8032,0.2441],[0.8032,0.2362],[0.8032,0.2283],[0.8032,0.2205],[0.8032,0.2126],[0.8032,0.2047],[0.8032,0.1968],[0.8032,0.189],[0.8032,0.1811],[0.8032,0.1732],[0.8032,0.1653],[0.8032,0.1575],[0.8032,0.1496],[0.8032,0.1417],[0.8032,0.1339],[0.8032,0.126],[0.8032,0.1181],[0.8032,0.1102],[0.8032,0.1024],[0.8032,0.0945],[0.8032,0.0866],[0.8032,0.0787],[0.8032,0.0709],[0.8032,0.063],[0.8032,0.0551],[0.8032,0.0472],[0.8032,0.0394],[0.8032,0.0315],[0.8032,0.0236],[0.8032,0.0157],[0.8032,0.0079],[0.8032,0],[0.811,0.9999],[0.811,0.9921],[0.811,0.9842],[0.811,0.9763],[0.811,0.9684],[0.811,0.9606],[0.811,0.9527],[0.811,0.9448],[0.811,0.937],[0.811,0.9291],[0.811,0.9212],[0.811,0.9133],[0.811,0.9055],[0.811,0.8976],[0.811,0.8897],[0.811,0.8818],[0.811,0.874],[0.811,0.8661],[0.811,0.8582],[0.811,0.8503],[0.811,0.8425],[0.811,0.8346],[0.811,0.8267],[0.811,0.8188],[0.811,0.811],[0.811,0.8031],[0.811,0.7952],[0.811,0.7874],[0.811,0.7795],[0.811,0.7716],[0.811,0.7637],[0.811,0.7559],[0.811,0.748],[0.811,0.7401],[0.811,0.7322],[0.811,0.7244],[0.811,0.7165],[0.811,0.7086],[0.811,0.7007],[0.811,0.6929],[0.811,0.685],[0.811,0.6771],[0.811,0.6693],[0.811,0.6614],[0.811,0.6535],[0.811,0.6456],[0.811,0.6378],[0.811,0.6299],[0.811,0.622],[0.811,0.6141],[0.811,0.6063],[0.811,0.5984],[0.811,0.5905],[0.811,0.5826],[0.811,0.5748],[0.811,0.5669],[0.811,0.559],[0.811,0.5511],[0.811,0.5433],[0.811,0.5354],[0.811,0.5275],[0.811,0.5197],[0.811,0.5118],[0.811,0.5039],[0.811,0.496],[0.811,0.4882],[0.811,0.4803],[0.811,0.4724],[0.811,0.4645],[0.811,0.4567],[0.811,0.4488],[0.811,0.4409],[0.811,0.433],[0.811,0.4252],[0.811,0.4173],[0.811,0.4094],[0.811,0.4016],[0.811,0.3937],[0.811,0.3858],[0.811,0.3779],[0.811,0.3701],[0.811,0.3622],[0.811,0.3543],[0.811,0.3464],[0.811,0.3386],[0.811,0.3307],[0.811,0.3228],[0.811,0.3149],[0.811,0.3071],[0.811,0.2992],[0.811,0.2913],[0.811,0.2834],[0.811,0.2756],[0.811,0.2677],[0.811,0.2598],[0.811,0.252],[0.811,0.2441],[0.811,0.2362],[0.811,0.2283],[0.811,0.2205],[0.811,0.2126],[0.811,0.2047],[0.811,0.1968],[0.811,0.189],[0.811,0.1811],[0.811,0.1732],[0.811,0.1653],[0.811,0.1575],[0.811,0.1496],[0.811,0.1417],[0.811,0.1339],[0.811,0.126],[0.811,0.1181],[0.811,0.1102],[0.811,0.1024],[0.811,0.0945],[0.811,0.0866],[0.811,0.0787],[0.811,0.0709],[0.811,0.063],[0.811,0.0551],[0.811,0.0472],[0.811,0.0394],[0.811,0.0315],[0.811,0.0236],[0.811,0.0157],[0.811,0.0079],[0.811,0],[0.8189,0.9999],[0.8189,0.9921],[0.8189,0.9842],[0.8189,0.9763],[0.8189,0.9684],[0.8189,0.9606],[0.8189,0.9527],[0.8189,0.9448],[0.8189,0.937],[0.8189,0.9291],[0.8189,0.9212],[0.8189,0.9133],[0.8189,0.9055],[0.8189,0.8976],[0.8189,0.8897],[0.8189,0.8818],[0.8189,0.874],[0.8189,0.8661],[0.8189,0.8582],[0.8189,0.8503],[0.8189,0.8425],[0.8189,0.8346],[0.8189,0.8267],[0.8189,0.8188],[0.8189,0.811],[0.8189,0.8031],[0.8189,0.7952],[0.8189,0.7874],[0.8189,0.7795],[0.8189,0.7716],[0.8189,0.7637],[0.8189,0.7559],[0.8189,0.748],[0.8189,0.7401],[0.8189,0.7322],[0.8189,0.7244],[0.8189,0.7165],[0.8189,0.7086],[0.8189,0.7007],[0.8189,0.6929],[0.8189,0.685],[0.8189,0.6771],[0.8189,0.6693],[0.8189,0.6614],[0.8189,0.6535],[0.8189,0.6456],[0.8189,0.6378],[0.8189,0.6299],[0.8189,0.622],[0.8189,0.6141],[0.8189,0.6063],[0.8189,0.5984],[0.8189,0.5905],[0.8189,0.5826],[0.8189,0.5748],[0.8189,0.5669],[0.8189,0.559],[0.8189,0.5511],[0.8189,0.5433],[0.8189,0.5354],[0.8189,0.5275],[0.8189,0.5197],[0.8189,0.5118],[0.8189,0.5039],[0.8189,0.496],[0.8189,0.4882],[0.8189,0.4803],[0.8189,0.4724],[0.8189,0.4645],[0.8189,0.4567],[0.8189,0.4488],[0.8189,0.4409],[0.8189,0.433],[0.8189,0.4252],[0.8189,0.4173],[0.8189,0.4094],[0.8189,0.4016],[0.8189,0.3937],[0.8189,0.3858],[0.8189,0.3779],[0.8189,0.3701],[0.8189,0.3622],[0.8189,0.3543],[0.8189,0.3464],[0.8189,0.3386],[0.8189,0.3307],[0.8189,0.3228],[0.8189,0.3149],[0.8189,0.3071],[0.8189,0.2992],[0.8189,0.2913],[0.8189,0.2834],[0.8189,0.2756],[0.8189,0.2677],[0.8189,0.2598],[0.8189,0.252],[0.8189,0.2441],[0.8189,0.2362],[0.8189,0.2283],[0.8189,0.2205],[0.8189,0.2126],[0.8189,0.2047],[0.8189,0.1968],[0.8189,0.189],[0.8189,0.1811],[0.8189,0.1732],[0.8189,0.1653],[0.8189,0.1575],[0.8189,0.1496],[0.8189,0.1417],[0.8189,0.1339],[0.8189,0.126],[0.8189,0.1181],[0.8189,0.1102],[0.8189,0.1024],[0.8189,0.0945],[0.8189,0.0866],[0.8189,0.0787],[0.8189,0.0709],[0.8189,0.063],[0.8189,0.0551],[0.8189,0.0472],[0.8189,0.0394],[0.8189,0.0315],[0.8189,0.0236],[0.8189,0.0157],[0.8189,0.0079],[0.8189,0],[0.8268,0.9999],[0.8268,0.9921],[0.8268,0.9842],[0.8268,0.9763],[0.8268,0.9684],[0.8268,0.9606],[0.8268,0.9527],[0.8268,0.9448],[0.8268,0.937],[0.8268,0.9291],[0.8268,0.9212],[0.8268,0.9133],[0.8268,0.9055],[0.8268,0.8976],[0.8268,0.8897],[0.8268,0.8818],[0.8268,0.874],[0.8268,0.8661],[0.8268,0.8582],[0.8268,0.8503],[0.8268,0.8425],[0.8268,0.8346],[0.8268,0.8267],[0.8268,0.8188],[0.8268,0.811],[0.8268,0.8031],[0.8268,0.7952],[0.8268,0.7874],[0.8268,0.7795],[0.8268,0.7716],[0.8268,0.7637],[0.8268,0.7559],[0.8268,0.748],[0.8268,0.7401],[0.8268,0.7322],[0.8268,0.7244],[0.8268,0.7165],[0.8268,0.7086],[0.8268,0.7007],[0.8268,0.6929],[0.8268,0.685],[0.8268,0.6771],[0.8268,0.6693],[0.8268,0.6614],[0.8268,0.6535],[0.8268,0.6456],[0.8268,0.6378],[0.8268,0.6299],[0.8268,0.622],[0.8268,0.6141],[0.8268,0.6063],[0.8268,0.5984],[0.8268,0.5905],[0.8268,0.5826],[0.8268,0.5748],[0.8268,0.5669],[0.8268,0.559],[0.8268,0.5511],[0.8268,0.5433],[0.8268,0.5354],[0.8268,0.5275],[0.8268,0.5197],[0.8268,0.5118],[0.8268,0.5039],[0.8268,0.496],[0.8268,0.4882],[0.8268,0.4803],[0.8268,0.4724],[0.8268,0.4645],[0.8268,0.4567],[0.8268,0.4488],[0.8268,0.4409],[0.8268,0.433],[0.8268,0.4252],[0.8268,0.4173],[0.8268,0.4094],[0.8268,0.4016],[0.8268,0.3937],[0.8268,0.3858],[0.8268,0.3779],[0.8268,0.3701],[0.8268,0.3622],[0.8268,0.3543],[0.8268,0.3464],[0.8268,0.3386],[0.8268,0.3307],[0.8268,0.3228],[0.8268,0.3149],[0.8268,0.3071],[0.8268,0.2992],[0.8268,0.2913],[0.8268,0.2834],[0.8268,0.2756],[0.8268,0.2677],[0.8268,0.2598],[0.8268,0.252],[0.8268,0.2441],[0.8268,0.2362],[0.8268,0.2283],[0.8268,0.2205],[0.8268,0.2126],[0.8268,0.2047],[0.8268,0.1968],[0.8268,0.189],[0.8268,0.1811],[0.8268,0.1732],[0.8268,0.1653],[0.8268,0.1575],[0.8268,0.1496],[0.8268,0.1417],[0.8268,0.1339],[0.8268,0.126],[0.8268,0.1181],[0.8268,0.1102],[0.8268,0.1024],[0.8268,0.0945],[0.8268,0.0866],[0.8268,0.0787],[0.8268,0.0709],[0.8268,0.063],[0.8268,0.0551],[0.8268,0.0472],[0.8268,0.0394],[0.8268,0.0315],[0.8268,0.0236],[0.8268,0.0157],[0.8268,0.0079],[0.8268,0],[0.8347,0.9999],[0.8347,0.9921],[0.8347,0.9842],[0.8347,0.9763],[0.8347,0.9684],[0.8347,0.9606],[0.8347,0.9527],[0.8347,0.9448],[0.8347,0.937],[0.8347,0.9291],[0.8347,0.9212],[0.8347,0.9133],[0.8347,0.9055],[0.8347,0.8976],[0.8347,0.8897],[0.8347,0.8818],[0.8347,0.874],[0.8347,0.8661],[0.8347,0.8582],[0.8347,0.8503],[0.8347,0.8425],[0.8347,0.8346],[0.8347,0.8267],[0.8347,0.8188],[0.8347,0.811],[0.8347,0.8031],[0.8347,0.7952],[0.8347,0.7874],[0.8347,0.7795],[0.8347,0.7716],[0.8347,0.7637],[0.8347,0.7559],[0.8347,0.748],[0.8347,0.7401],[0.8347,0.7322],[0.8347,0.7244],[0.8347,0.7165],[0.8347,0.7086],[0.8347,0.7007],[0.8347,0.6929],[0.8347,0.685],[0.8347,0.6771],[0.8347,0.6693],[0.8347,0.6614],[0.8347,0.6535],[0.8347,0.6456],[0.8347,0.6378],[0.8347,0.6299],[0.8347,0.622],[0.8347,0.6141],[0.8347,0.6063],[0.8347,0.5984],[0.8347,0.5905],[0.8347,0.5826],[0.8347,0.5748],[0.8347,0.5669],[0.8347,0.559],[0.8347,0.5511],[0.8347,0.5433],[0.8347,0.5354],[0.8347,0.5275],[0.8347,0.5197],[0.8347,0.5118],[0.8347,0.5039],[0.8347,0.496],[0.8347,0.4882],[0.8347,0.4803],[0.8347,0.4724],[0.8347,0.4645],[0.8347,0.4567],[0.8347,0.4488],[0.8347,0.4409],[0.8347,0.433],[0.8347,0.4252],[0.8347,0.4173],[0.8347,0.4094],[0.8347,0.4016],[0.8347,0.3937],[0.8347,0.3858],[0.8347,0.3779],[0.8347,0.3701],[0.8347,0.3622],[0.8347,0.3543],[0.8347,0.3464],[0.8347,0.3386],[0.8347,0.3307],[0.8347,0.3228],[0.8347,0.3149],[0.8347,0.3071],[0.8347,0.2992],[0.8347,0.2913],[0.8347,0.2834],[0.8347,0.2756],[0.8347,0.2677],[0.8347,0.2598],[0.8347,0.252],[0.8347,0.2441],[0.8347,0.2362],[0.8347,0.2283],[0.8347,0.2205],[0.8347,0.2126],[0.8347,0.2047],[0.8347,0.1968],[0.8347,0.189],[0.8347,0.1811],[0.8347,0.1732],[0.8347,0.1653],[0.8347,0.1575],[0.8347,0.1496],[0.8347,0.1417],[0.8347,0.1339],[0.8347,0.126],[0.8347,0.1181],[0.8347,0.1102],[0.8347,0.1024],[0.8347,0.0945],[0.8347,0.0866],[0.8347,0.0787],[0.8347,0.0709],[0.8347,0.063],[0.8347,0.0551],[0.8347,0.0472],[0.8347,0.0394],[0.8347,0.0315],[0.8347,0.0236],[0.8347,0.0157],[0.8347,0.0079],[0.8347,0],[0.8425,0.9999],[0.8425,0.9921],[0.8425,0.9842],[0.8425,0.9763],[0.8425,0.9684],[0.8425,0.9606],[0.8425,0.9527],[0.8425,0.9448],[0.8425,0.937],[0.8425,0.9291],[0.8425,0.9212],[0.8425,0.9133],[0.8425,0.9055],[0.8425,0.8976],[0.8425,0.8897],[0.8425,0.8818],[0.8425,0.874],[0.8425,0.8661],[0.8425,0.8582],[0.8425,0.8503],[0.8425,0.8425],[0.8425,0.8346],[0.8425,0.8267],[0.8425,0.8188],[0.8425,0.811],[0.8425,0.8031],[0.8425,0.7952],[0.8425,0.7874],[0.8425,0.7795],[0.8425,0.7716],[0.8425,0.7637],[0.8425,0.7559],[0.8425,0.748],[0.8425,0.7401],[0.8425,0.7322],[0.8425,0.7244],[0.8425,0.7165],[0.8425,0.7086],[0.8425,0.7007],[0.8425,0.6929],[0.8425,0.685],[0.8425,0.6771],[0.8425,0.6693],[0.8425,0.6614],[0.8425,0.6535],[0.8425,0.6456],[0.8425,0.6378],[0.8425,0.6299],[0.8425,0.622],[0.8425,0.6141],[0.8425,0.6063],[0.8425,0.5984],[0.8425,0.5905],[0.8425,0.5826],[0.8425,0.5748],[0.8425,0.5669],[0.8425,0.559],[0.8425,0.5511],[0.8425,0.5433],[0.8425,0.5354],[0.8425,0.5275],[0.8425,0.5197],[0.8425,0.5118],[0.8425,0.5039],[0.8425,0.496],[0.8425,0.4882],[0.8425,0.4803],[0.8425,0.4724],[0.8425,0.4645],[0.8425,0.4567],[0.8425,0.4488],[0.8425,0.4409],[0.8425,0.433],[0.8425,0.4252],[0.8425,0.4173],[0.8425,0.4094],[0.8425,0.4016],[0.8425,0.3937],[0.8425,0.3858],[0.8425,0.3779],[0.8425,0.3701],[0.8425,0.3622],[0.8425,0.3543],[0.8425,0.3464],[0.8425,0.3386],[0.8425,0.3307],[0.8425,0.3228],[0.8425,0.3149],[0.8425,0.3071],[0.8425,0.2992],[0.8425,0.2913],[0.8425,0.2834],[0.8425,0.2756],[0.8425,0.2677],[0.8425,0.2598],[0.8425,0.252],[0.8425,0.2441],[0.8425,0.2362],[0.8425,0.2283],[0.8425,0.2205],[0.8425,0.2126],[0.8425,0.2047],[0.8425,0.1968],[0.8425,0.189],[0.8425,0.1811],[0.8425,0.1732],[0.8425,0.1653],[0.8425,0.1575],[0.8425,0.1496],[0.8425,0.1417],[0.8425,0.1339],[0.8425,0.126],[0.8425,0.1181],[0.8425,0.1102],[0.8425,0.1024],[0.8425,0.0945],[0.8425,0.0866],[0.8425,0.0787],[0.8425,0.0709],[0.8425,0.063],[0.8425,0.0551],[0.8425,0.0472],[0.8425,0.0394],[0.8425,0.0315],[0.8425,0.0236],[0.8425,0.0157],[0.8425,0.0079],[0.8425,0],[0.8504,0.9999],[0.8504,0.9921],[0.8504,0.9842],[0.8504,0.9763],[0.8504,0.9684],[0.8504,0.9606],[0.8504,0.9527],[0.8504,0.9448],[0.8504,0.937],[0.8504,0.9291],[0.8504,0.9212],[0.8504,0.9133],[0.8504,0.9055],[0.8504,0.8976],[0.8504,0.8897],[0.8504,0.8818],[0.8504,0.874],[0.8504,0.8661],[0.8504,0.8582],[0.8504,0.8503],[0.8504,0.8425],[0.8504,0.8346],[0.8504,0.8267],[0.8504,0.8188],[0.8504,0.811],[0.8504,0.8031],[0.8504,0.7952],[0.8504,0.7874],[0.8504,0.7795],[0.8504,0.7716],[0.8504,0.7637],[0.8504,0.7559],[0.8504,0.748],[0.8504,0.7401],[0.8504,0.7322],[0.8504,0.7244],[0.8504,0.7165],[0.8504,0.7086],[0.8504,0.7007],[0.8504,0.6929],[0.8504,0.685],[0.8504,0.6771],[0.8504,0.6693],[0.8504,0.6614],[0.8504,0.6535],[0.8504,0.6456],[0.8504,0.6378],[0.8504,0.6299],[0.8504,0.622],[0.8504,0.6141],[0.8504,0.6063],[0.8504,0.5984],[0.8504,0.5905],[0.8504,0.5826],[0.8504,0.5748],[0.8504,0.5669],[0.8504,0.559],[0.8504,0.5511],[0.8504,0.5433],[0.8504,0.5354],[0.8504,0.5275],[0.8504,0.5197],[0.8504,0.5118],[0.8504,0.5039],[0.8504,0.496],[0.8504,0.4882],[0.8504,0.4803],[0.8504,0.4724],[0.8504,0.4645],[0.8504,0.4567],[0.8504,0.4488],[0.8504,0.4409],[0.8504,0.433],[0.8504,0.4252],[0.8504,0.4173],[0.8504,0.4094],[0.8504,0.4016],[0.8504,0.3937],[0.8504,0.3858],[0.8504,0.3779],[0.8504,0.3701],[0.8504,0.3622],[0.8504,0.3543],[0.8504,0.3464],[0.8504,0.3386],[0.8504,0.3307],[0.8504,0.3228],[0.8504,0.3149],[0.8504,0.3071],[0.8504,0.2992],[0.8504,0.2913],[0.8504,0.2834],[0.8504,0.2756],[0.8504,0.2677],[0.8504,0.2598],[0.8504,0.252],[0.8504,0.2441],[0.8504,0.2362],[0.8504,0.2283],[0.8504,0.2205],[0.8504,0.2126],[0.8504,0.2047],[0.8504,0.1968],[0.8504,0.189],[0.8504,0.1811],[0.8504,0.1732],[0.8504,0.1653],[0.8504,0.1575],[0.8504,0.1496],[0.8504,0.1417],[0.8504,0.1339],[0.8504,0.126],[0.8504,0.1181],[0.8504,0.1102],[0.8504,0.1024],[0.8504,0.0945],[0.8504,0.0866],[0.8504,0.0787],[0.8504,0.0709],[0.8504,0.063],[0.8504,0.0551],[0.8504,0.0472],[0.8504,0.0394],[0.8504,0.0315],[0.8504,0.0236],[0.8504,0.0157],[0.8504,0.0079],[0.8504,0],[0.8583,0.9999],[0.8583,0.9921],[0.8583,0.9842],[0.8583,0.9763],[0.8583,0.9684],[0.8583,0.9606],[0.8583,0.9527],[0.8583,0.9448],[0.8583,0.937],[0.8583,0.9291],[0.8583,0.9212],[0.8583,0.9133],[0.8583,0.9055],[0.8583,0.8976],[0.8583,0.8897],[0.8583,0.8818],[0.8583,0.874],[0.8583,0.8661],[0.8583,0.8582],[0.8583,0.8503],[0.8583,0.8425],[0.8583,0.8346],[0.8583,0.8267],[0.8583,0.8188],[0.8583,0.811],[0.8583,0.8031],[0.8583,0.7952],[0.8583,0.7874],[0.8583,0.7795],[0.8583,0.7716],[0.8583,0.7637],[0.8583,0.7559],[0.8583,0.748],[0.8583,0.7401],[0.8583,0.7322],[0.8583,0.7244],[0.8583,0.7165],[0.8583,0.7086],[0.8583,0.7007],[0.8583,0.6929],[0.8583,0.685],[0.8583,0.6771],[0.8583,0.6693],[0.8583,0.6614],[0.8583,0.6535],[0.8583,0.6456],[0.8583,0.6378],[0.8583,0.6299],[0.8583,0.622],[0.8583,0.6141],[0.8583,0.6063],[0.8583,0.5984],[0.8583,0.5905],[0.8583,0.5826],[0.8583,0.5748],[0.8583,0.5669],[0.8583,0.559],[0.8583,0.5511],[0.8583,0.5433],[0.8583,0.5354],[0.8583,0.5275],[0.8583,0.5197],[0.8583,0.5118],[0.8583,0.5039],[0.8583,0.496],[0.8583,0.4882],[0.8583,0.4803],[0.8583,0.4724],[0.8583,0.4645],[0.8583,0.4567],[0.8583,0.4488],[0.8583,0.4409],[0.8583,0.433],[0.8583,0.4252],[0.8583,0.4173],[0.8583,0.4094],[0.8583,0.4016],[0.8583,0.3937],[0.8583,0.3858],[0.8583,0.3779],[0.8583,0.3701],[0.8583,0.3622],[0.8583,0.3543],[0.8583,0.3464],[0.8583,0.3386],[0.8583,0.3307],[0.8583,0.3228],[0.8583,0.3149],[0.8583,0.3071],[0.8583,0.2992],[0.8583,0.2913],[0.8583,0.2834],[0.8583,0.2756],[0.8583,0.2677],[0.8583,0.2598],[0.8583,0.252],[0.8583,0.2441],[0.8583,0.2362],[0.8583,0.2283],[0.8583,0.2205],[0.8583,0.2126],[0.8583,0.2047],[0.8583,0.1968],[0.8583,0.189],[0.8583,0.1811],[0.8583,0.1732],[0.8583,0.1653],[0.8583,0.1575],[0.8583,0.1496],[0.8583,0.1417],[0.8583,0.1339],[0.8583,0.126],[0.8583,0.1181],[0.8583,0.1102],[0.8583,0.1024],[0.8583,0.0945],[0.8583,0.0866],[0.8583,0.0787],[0.8583,0.0709],[0.8583,0.063],[0.8583,0.0551],[0.8583,0.0472],[0.8583,0.0394],[0.8583,0.0315],[0.8583,0.0236],[0.8583,0.0157],[0.8583,0.0079],[0.8583,0],[0.8661,0.9999],[0.8661,0.9921],[0.8661,0.9842],[0.8661,0.9763],[0.8661,0.9684],[0.8661,0.9606],[0.8661,0.9527],[0.8661,0.9448],[0.8661,0.937],[0.8661,0.9291],[0.8661,0.9212],[0.8661,0.9133],[0.8661,0.9055],[0.8661,0.8976],[0.8661,0.8897],[0.8661,0.8818],[0.8661,0.874],[0.8661,0.8661],[0.8661,0.8582],[0.8661,0.8503],[0.8661,0.8425],[0.8661,0.8346],[0.8661,0.8267],[0.8661,0.8188],[0.8661,0.811],[0.8661,0.8031],[0.8661,0.7952],[0.8661,0.7874],[0.8661,0.7795],[0.8661,0.7716],[0.8661,0.7637],[0.8661,0.7559],[0.8661,0.748],[0.8661,0.7401],[0.8661,0.7322],[0.8661,0.7244],[0.8661,0.7165],[0.8661,0.7086],[0.8661,0.7007],[0.8661,0.6929],[0.8661,0.685],[0.8661,0.6771],[0.8661,0.6693],[0.8661,0.6614],[0.8661,0.6535],[0.8661,0.6456],[0.8661,0.6378],[0.8661,0.6299],[0.8661,0.622],[0.8661,0.6141],[0.8661,0.6063],[0.8661,0.5984],[0.8661,0.5905],[0.8661,0.5826],[0.8661,0.5748],[0.8661,0.5669],[0.8661,0.559],[0.8661,0.5511],[0.8661,0.5433],[0.8661,0.5354],[0.8661,0.5275],[0.8661,0.5197],[0.8661,0.5118],[0.8661,0.5039],[0.8661,0.496],[0.8661,0.4882],[0.8661,0.4803],[0.8661,0.4724],[0.8661,0.4645],[0.8661,0.4567],[0.8661,0.4488],[0.8661,0.4409],[0.8661,0.433],[0.8661,0.4252],[0.8661,0.4173],[0.8661,0.4094],[0.8661,0.4016],[0.8661,0.3937],[0.8661,0.3858],[0.8661,0.3779],[0.8661,0.3701],[0.8661,0.3622],[0.8661,0.3543],[0.8661,0.3464],[0.8661,0.3386],[0.8661,0.3307],[0.8661,0.3228],[0.8661,0.3149],[0.8661,0.3071],[0.8661,0.2992],[0.8661,0.2913],[0.8661,0.2834],[0.8661,0.2756],[0.8661,0.2677],[0.8661,0.2598],[0.8661,0.252],[0.8661,0.2441],[0.8661,0.2362],[0.8661,0.2283],[0.8661,0.2205],[0.8661,0.2126],[0.8661,0.2047],[0.8661,0.1968],[0.8661,0.189],[0.8661,0.1811],[0.8661,0.1732],[0.8661,0.1653],[0.8661,0.1575],[0.8661,0.1496],[0.8661,0.1417],[0.8661,0.1339],[0.8661,0.126],[0.8661,0.1181],[0.8661,0.1102],[0.8661,0.1024],[0.8661,0.0945],[0.8661,0.0866],[0.8661,0.0787],[0.8661,0.0709],[0.8661,0.063],[0.8661,0.0551],[0.8661,0.0472],[0.8661,0.0394],[0.8661,0.0315],[0.8661,0.0236],[0.8661,0.0157],[0.8661,0.0079],[0.8661,0],[0.874,0.9999],[0.874,0.9921],[0.874,0.9842],[0.874,0.9763],[0.874,0.9684],[0.874,0.9606],[0.874,0.9527],[0.874,0.9448],[0.874,0.937],[0.874,0.9291],[0.874,0.9212],[0.874,0.9133],[0.874,0.9055],[0.874,0.8976],[0.874,0.8897],[0.874,0.8818],[0.874,0.874],[0.874,0.8661],[0.874,0.8582],[0.874,0.8503],[0.874,0.8425],[0.874,0.8346],[0.874,0.8267],[0.874,0.8188],[0.874,0.811],[0.874,0.8031],[0.874,0.7952],[0.874,0.7874],[0.874,0.7795],[0.874,0.7716],[0.874,0.7637],[0.874,0.7559],[0.874,0.748],[0.874,0.7401],[0.874,0.7322],[0.874,0.7244],[0.874,0.7165],[0.874,0.7086],[0.874,0.7007],[0.874,0.6929],[0.874,0.685],[0.874,0.6771],[0.874,0.6693],[0.874,0.6614],[0.874,0.6535],[0.874,0.6456],[0.874,0.6378],[0.874,0.6299],[0.874,0.622],[0.874,0.6141],[0.874,0.6063],[0.874,0.5984],[0.874,0.5905],[0.874,0.5826],[0.874,0.5748],[0.874,0.5669],[0.874,0.559],[0.874,0.5511],[0.874,0.5433],[0.874,0.5354],[0.874,0.5275],[0.874,0.5197],[0.874,0.5118],[0.874,0.5039],[0.874,0.496],[0.874,0.4882],[0.874,0.4803],[0.874,0.4724],[0.874,0.4645],[0.874,0.4567],[0.874,0.4488],[0.874,0.4409],[0.874,0.433],[0.874,0.4252],[0.874,0.4173],[0.874,0.4094],[0.874,0.4016],[0.874,0.3937],[0.874,0.3858],[0.874,0.3779],[0.874,0.3701],[0.874,0.3622],[0.874,0.3543],[0.874,0.3464],[0.874,0.3386],[0.874,0.3307],[0.874,0.3228],[0.874,0.3149],[0.874,0.3071],[0.874,0.2992],[0.874,0.2913],[0.874,0.2834],[0.874,0.2756],[0.874,0.2677],[0.874,0.2598],[0.874,0.252],[0.874,0.2441],[0.874,0.2362],[0.874,0.2283],[0.874,0.2205],[0.874,0.2126],[0.874,0.2047],[0.874,0.1968],[0.874,0.189],[0.874,0.1811],[0.874,0.1732],[0.874,0.1653],[0.874,0.1575],[0.874,0.1496],[0.874,0.1417],[0.874,0.1339],[0.874,0.126],[0.874,0.1181],[0.874,0.1102],[0.874,0.1024],[0.874,0.0945],[0.874,0.0866],[0.874,0.0787],[0.874,0.0709],[0.874,0.063],[0.874,0.0551],[0.874,0.0472],[0.874,0.0394],[0.874,0.0315],[0.874,0.0236],[0.874,0.0157],[0.874,0.0079],[0.874,0],[0.8819,0.9999],[0.8819,0.9921],[0.8819,0.9842],[0.8819,0.9763],[0.8819,0.9684],[0.8819,0.9606],[0.8819,0.9527],[0.8819,0.9448],[0.8819,0.937],[0.8819,0.9291],[0.8819,0.9212],[0.8819,0.9133],[0.8819,0.9055],[0.8819,0.8976],[0.8819,0.8897],[0.8819,0.8818],[0.8819,0.874],[0.8819,0.8661],[0.8819,0.8582],[0.8819,0.8503],[0.8819,0.8425],[0.8819,0.8346],[0.8819,0.8267],[0.8819,0.8188],[0.8819,0.811],[0.8819,0.8031],[0.8819,0.7952],[0.8819,0.7874],[0.8819,0.7795],[0.8819,0.7716],[0.8819,0.7637],[0.8819,0.7559],[0.8819,0.748],[0.8819,0.7401],[0.8819,0.7322],[0.8819,0.7244],[0.8819,0.7165],[0.8819,0.7086],[0.8819,0.7007],[0.8819,0.6929],[0.8819,0.685],[0.8819,0.6771],[0.8819,0.6693],[0.8819,0.6614],[0.8819,0.6535],[0.8819,0.6456],[0.8819,0.6378],[0.8819,0.6299],[0.8819,0.622],[0.8819,0.6141],[0.8819,0.6063],[0.8819,0.5984],[0.8819,0.5905],[0.8819,0.5826],[0.8819,0.5748],[0.8819,0.5669],[0.8819,0.559],[0.8819,0.5511],[0.8819,0.5433],[0.8819,0.5354],[0.8819,0.5275],[0.8819,0.5197],[0.8819,0.5118],[0.8819,0.5039],[0.8819,0.496],[0.8819,0.4882],[0.8819,0.4803],[0.8819,0.4724],[0.8819,0.4645],[0.8819,0.4567],[0.8819,0.4488],[0.8819,0.4409],[0.8819,0.433],[0.8819,0.4252],[0.8819,0.4173],[0.8819,0.4094],[0.8819,0.4016],[0.8819,0.3937],[0.8819,0.3858],[0.8819,0.3779],[0.8819,0.3701],[0.8819,0.3622],[0.8819,0.3543],[0.8819,0.3464],[0.8819,0.3386],[0.8819,0.3307],[0.8819,0.3228],[0.8819,0.3149],[0.8819,0.3071],[0.8819,0.2992],[0.8819,0.2913],[0.8819,0.2834],[0.8819,0.2756],[0.8819,0.2677],[0.8819,0.2598],[0.8819,0.252],[0.8819,0.2441],[0.8819,0.2362],[0.8819,0.2283],[0.8819,0.2205],[0.8819,0.2126],[0.8819,0.2047],[0.8819,0.1968],[0.8819,0.189],[0.8819,0.1811],[0.8819,0.1732],[0.8819,0.1653],[0.8819,0.1575],[0.8819,0.1496],[0.8819,0.1417],[0.8819,0.1339],[0.8819,0.126],[0.8819,0.1181],[0.8819,0.1102],[0.8819,0.1024],[0.8819,0.0945],[0.8819,0.0866],[0.8819,0.0787],[0.8819,0.0709],[0.8819,0.063],[0.8819,0.0551],[0.8819,0.0472],[0.8819,0.0394],[0.8819,0.0315],[0.8819,0.0236],[0.8819,0.0157],[0.8819,0.0079],[0.8819,0],[0.8898,0.9999],[0.8898,0.9921],[0.8898,0.9842],[0.8898,0.9763],[0.8898,0.9684],[0.8898,0.9606],[0.8898,0.9527],[0.8898,0.9448],[0.8898,0.937],[0.8898,0.9291],[0.8898,0.9212],[0.8898,0.9133],[0.8898,0.9055],[0.8898,0.8976],[0.8898,0.8897],[0.8898,0.8818],[0.8898,0.874],[0.8898,0.8661],[0.8898,0.8582],[0.8898,0.8503],[0.8898,0.8425],[0.8898,0.8346],[0.8898,0.8267],[0.8898,0.8188],[0.8898,0.811],[0.8898,0.8031],[0.8898,0.7952],[0.8898,0.7874],[0.8898,0.7795],[0.8898,0.7716],[0.8898,0.7637],[0.8898,0.7559],[0.8898,0.748],[0.8898,0.7401],[0.8898,0.7322],[0.8898,0.7244],[0.8898,0.7165],[0.8898,0.7086],[0.8898,0.7007],[0.8898,0.6929],[0.8898,0.685],[0.8898,0.6771],[0.8898,0.6693],[0.8898,0.6614],[0.8898,0.6535],[0.8898,0.6456],[0.8898,0.6378],[0.8898,0.6299],[0.8898,0.622],[0.8898,0.6141],[0.8898,0.6063],[0.8898,0.5984],[0.8898,0.5905],[0.8898,0.5826],[0.8898,0.5748],[0.8898,0.5669],[0.8898,0.559],[0.8898,0.5511],[0.8898,0.5433],[0.8898,0.5354],[0.8898,0.5275],[0.8898,0.5197],[0.8898,0.5118],[0.8898,0.5039],[0.8898,0.496],[0.8898,0.4882],[0.8898,0.4803],[0.8898,0.4724],[0.8898,0.4645],[0.8898,0.4567],[0.8898,0.4488],[0.8898,0.4409],[0.8898,0.433],[0.8898,0.4252],[0.8898,0.4173],[0.8898,0.4094],[0.8898,0.4016],[0.8898,0.3937],[0.8898,0.3858],[0.8898,0.3779],[0.8898,0.3701],[0.8898,0.3622],[0.8898,0.3543],[0.8898,0.3464],[0.8898,0.3386],[0.8898,0.3307],[0.8898,0.3228],[0.8898,0.3149],[0.8898,0.3071],[0.8898,0.2992],[0.8898,0.2913],[0.8898,0.2834],[0.8898,0.2756],[0.8898,0.2677],[0.8898,0.2598],[0.8898,0.252],[0.8898,0.2441],[0.8898,0.2362],[0.8898,0.2283],[0.8898,0.2205],[0.8898,0.2126],[0.8898,0.2047],[0.8898,0.1968],[0.8898,0.189],[0.8898,0.1811],[0.8898,0.1732],[0.8898,0.1653],[0.8898,0.1575],[0.8898,0.1496],[0.8898,0.1417],[0.8898,0.1339],[0.8898,0.126],[0.8898,0.1181],[0.8898,0.1102],[0.8898,0.1024],[0.8898,0.0945],[0.8898,0.0866],[0.8898,0.0787],[0.8898,0.0709],[0.8898,0.063],[0.8898,0.0551],[0.8898,0.0472],[0.8898,0.0394],[0.8898,0.0315],[0.8898,0.0236],[0.8898,0.0157],[0.8898,0.0079],[0.8898,0],[0.8976,0.9999],[0.8976,0.9921],[0.8976,0.9842],[0.8976,0.9763],[0.8976,0.9684],[0.8976,0.9606],[0.8976,0.9527],[0.8976,0.9448],[0.8976,0.937],[0.8976,0.9291],[0.8976,0.9212],[0.8976,0.9133],[0.8976,0.9055],[0.8976,0.8976],[0.8976,0.8897],[0.8976,0.8818],[0.8976,0.874],[0.8976,0.8661],[0.8976,0.8582],[0.8976,0.8503],[0.8976,0.8425],[0.8976,0.8346],[0.8976,0.8267],[0.8976,0.8188],[0.8976,0.811],[0.8976,0.8031],[0.8976,0.7952],[0.8976,0.7874],[0.8976,0.7795],[0.8976,0.7716],[0.8976,0.7637],[0.8976,0.7559],[0.8976,0.748],[0.8976,0.7401],[0.8976,0.7322],[0.8976,0.7244],[0.8976,0.7165],[0.8976,0.7086],[0.8976,0.7007],[0.8976,0.6929],[0.8976,0.685],[0.8976,0.6771],[0.8976,0.6693],[0.8976,0.6614],[0.8976,0.6535],[0.8976,0.6456],[0.8976,0.6378],[0.8976,0.6299],[0.8976,0.622],[0.8976,0.6141],[0.8976,0.6063],[0.8976,0.5984],[0.8976,0.5905],[0.8976,0.5826],[0.8976,0.5748],[0.8976,0.5669],[0.8976,0.559],[0.8976,0.5511],[0.8976,0.5433],[0.8976,0.5354],[0.8976,0.5275],[0.8976,0.5197],[0.8976,0.5118],[0.8976,0.5039],[0.8976,0.496],[0.8976,0.4882],[0.8976,0.4803],[0.8976,0.4724],[0.8976,0.4645],[0.8976,0.4567],[0.8976,0.4488],[0.8976,0.4409],[0.8976,0.433],[0.8976,0.4252],[0.8976,0.4173],[0.8976,0.4094],[0.8976,0.4016],[0.8976,0.3937],[0.8976,0.3858],[0.8976,0.3779],[0.8976,0.3701],[0.8976,0.3622],[0.8976,0.3543],[0.8976,0.3464],[0.8976,0.3386],[0.8976,0.3307],[0.8976,0.3228],[0.8976,0.3149],[0.8976,0.3071],[0.8976,0.2992],[0.8976,0.2913],[0.8976,0.2834],[0.8976,0.2756],[0.8976,0.2677],[0.8976,0.2598],[0.8976,0.252],[0.8976,0.2441],[0.8976,0.2362],[0.8976,0.2283],[0.8976,0.2205],[0.8976,0.2126],[0.8976,0.2047],[0.8976,0.1968],[0.8976,0.189],[0.8976,0.1811],[0.8976,0.1732],[0.8976,0.1653],[0.8976,0.1575],[0.8976,0.1496],[0.8976,0.1417],[0.8976,0.1339],[0.8976,0.126],[0.8976,0.1181],[0.8976,0.1102],[0.8976,0.1024],[0.8976,0.0945],[0.8976,0.0866],[0.8976,0.0787],[0.8976,0.0709],[0.8976,0.063],[0.8976,0.0551],[0.8976,0.0472],[0.8976,0.0394],[0.8976,0.0315],[0.8976,0.0236],[0.8976,0.0157],[0.8976,0.0079],[0.8976,0],[0.9055,0.9999],[0.9055,0.9921],[0.9055,0.9842],[0.9055,0.9763],[0.9055,0.9684],[0.9055,0.9606],[0.9055,0.9527],[0.9055,0.9448],[0.9055,0.937],[0.9055,0.9291],[0.9055,0.9212],[0.9055,0.9133],[0.9055,0.9055],[0.9055,0.8976],[0.9055,0.8897],[0.9055,0.8818],[0.9055,0.874],[0.9055,0.8661],[0.9055,0.8582],[0.9055,0.8503],[0.9055,0.8425],[0.9055,0.8346],[0.9055,0.8267],[0.9055,0.8188],[0.9055,0.811],[0.9055,0.8031],[0.9055,0.7952],[0.9055,0.7874],[0.9055,0.7795],[0.9055,0.7716],[0.9055,0.7637],[0.9055,0.7559],[0.9055,0.748],[0.9055,0.7401],[0.9055,0.7322],[0.9055,0.7244],[0.9055,0.7165],[0.9055,0.7086],[0.9055,0.7007],[0.9055,0.6929],[0.9055,0.685],[0.9055,0.6771],[0.9055,0.6693],[0.9055,0.6614],[0.9055,0.6535],[0.9055,0.6456],[0.9055,0.6378],[0.9055,0.6299],[0.9055,0.622],[0.9055,0.6141],[0.9055,0.6063],[0.9055,0.5984],[0.9055,0.5905],[0.9055,0.5826],[0.9055,0.5748],[0.9055,0.5669],[0.9055,0.559],[0.9055,0.5511],[0.9055,0.5433],[0.9055,0.5354],[0.9055,0.5275],[0.9055,0.5197],[0.9055,0.5118],[0.9055,0.5039],[0.9055,0.496],[0.9055,0.4882],[0.9055,0.4803],[0.9055,0.4724],[0.9055,0.4645],[0.9055,0.4567],[0.9055,0.4488],[0.9055,0.4409],[0.9055,0.433],[0.9055,0.4252],[0.9055,0.4173],[0.9055,0.4094],[0.9055,0.4016],[0.9055,0.3937],[0.9055,0.3858],[0.9055,0.3779],[0.9055,0.3701],[0.9055,0.3622],[0.9055,0.3543],[0.9055,0.3464],[0.9055,0.3386],[0.9055,0.3307],[0.9055,0.3228],[0.9055,0.3149],[0.9055,0.3071],[0.9055,0.2992],[0.9055,0.2913],[0.9055,0.2834],[0.9055,0.2756],[0.9055,0.2677],[0.9055,0.2598],[0.9055,0.252],[0.9055,0.2441],[0.9055,0.2362],[0.9055,0.2283],[0.9055,0.2205],[0.9055,0.2126],[0.9055,0.2047],[0.9055,0.1968],[0.9055,0.189],[0.9055,0.1811],[0.9055,0.1732],[0.9055,0.1653],[0.9055,0.1575],[0.9055,0.1496],[0.9055,0.1417],[0.9055,0.1339],[0.9055,0.126],[0.9055,0.1181],[0.9055,0.1102],[0.9055,0.1024],[0.9055,0.0945],[0.9055,0.0866],[0.9055,0.0787],[0.9055,0.0709],[0.9055,0.063],[0.9055,0.0551],[0.9055,0.0472],[0.9055,0.0394],[0.9055,0.0315],[0.9055,0.0236],[0.9055,0.0157],[0.9055,0.0079],[0.9055,0],[0.9134,0.9999],[0.9134,0.9921],[0.9134,0.9842],[0.9134,0.9763],[0.9134,0.9684],[0.9134,0.9606],[0.9134,0.9527],[0.9134,0.9448],[0.9134,0.937],[0.9134,0.9291],[0.9134,0.9212],[0.9134,0.9133],[0.9134,0.9055],[0.9134,0.8976],[0.9134,0.8897],[0.9134,0.8818],[0.9134,0.874],[0.9134,0.8661],[0.9134,0.8582],[0.9134,0.8503],[0.9134,0.8425],[0.9134,0.8346],[0.9134,0.8267],[0.9134,0.8188],[0.9134,0.811],[0.9134,0.8031],[0.9134,0.7952],[0.9134,0.7874],[0.9134,0.7795],[0.9134,0.7716],[0.9134,0.7637],[0.9134,0.7559],[0.9134,0.748],[0.9134,0.7401],[0.9134,0.7322],[0.9134,0.7244],[0.9134,0.7165],[0.9134,0.7086],[0.9134,0.7007],[0.9134,0.6929],[0.9134,0.685],[0.9134,0.6771],[0.9134,0.6693],[0.9134,0.6614],[0.9134,0.6535],[0.9134,0.6456],[0.9134,0.6378],[0.9134,0.6299],[0.9134,0.622],[0.9134,0.6141],[0.9134,0.6063],[0.9134,0.5984],[0.9134,0.5905],[0.9134,0.5826],[0.9134,0.5748],[0.9134,0.5669],[0.9134,0.559],[0.9134,0.5511],[0.9134,0.5433],[0.9134,0.5354],[0.9134,0.5275],[0.9134,0.5197],[0.9134,0.5118],[0.9134,0.5039],[0.9134,0.496],[0.9134,0.4882],[0.9134,0.4803],[0.9134,0.4724],[0.9134,0.4645],[0.9134,0.4567],[0.9134,0.4488],[0.9134,0.4409],[0.9134,0.433],[0.9134,0.4252],[0.9134,0.4173],[0.9134,0.4094],[0.9134,0.4016],[0.9134,0.3937],[0.9134,0.3858],[0.9134,0.3779],[0.9134,0.3701],[0.9134,0.3622],[0.9134,0.3543],[0.9134,0.3464],[0.9134,0.3386],[0.9134,0.3307],[0.9134,0.3228],[0.9134,0.3149],[0.9134,0.3071],[0.9134,0.2992],[0.9134,0.2913],[0.9134,0.2834],[0.9134,0.2756],[0.9134,0.2677],[0.9134,0.2598],[0.9134,0.252],[0.9134,0.2441],[0.9134,0.2362],[0.9134,0.2283],[0.9134,0.2205],[0.9134,0.2126],[0.9134,0.2047],[0.9134,0.1968],[0.9134,0.189],[0.9134,0.1811],[0.9134,0.1732],[0.9134,0.1653],[0.9134,0.1575],[0.9134,0.1496],[0.9134,0.1417],[0.9134,0.1339],[0.9134,0.126],[0.9134,0.1181],[0.9134,0.1102],[0.9134,0.1024],[0.9134,0.0945],[0.9134,0.0866],[0.9134,0.0787],[0.9134,0.0709],[0.9134,0.063],[0.9134,0.0551],[0.9134,0.0472],[0.9134,0.0394],[0.9134,0.0315],[0.9134,0.0236],[0.9134,0.0157],[0.9134,0.0079],[0.9134,0],[0.9213,0.9999],[0.9213,0.9921],[0.9213,0.9842],[0.9213,0.9763],[0.9213,0.9684],[0.9213,0.9606],[0.9213,0.9527],[0.9213,0.9448],[0.9213,0.937],[0.9213,0.9291],[0.9213,0.9212],[0.9213,0.9133],[0.9213,0.9055],[0.9213,0.8976],[0.9213,0.8897],[0.9213,0.8818],[0.9213,0.874],[0.9213,0.8661],[0.9213,0.8582],[0.9213,0.8503],[0.9213,0.8425],[0.9213,0.8346],[0.9213,0.8267],[0.9213,0.8188],[0.9213,0.811],[0.9213,0.8031],[0.9213,0.7952],[0.9213,0.7874],[0.9213,0.7795],[0.9213,0.7716],[0.9213,0.7637],[0.9213,0.7559],[0.9213,0.748],[0.9213,0.7401],[0.9213,0.7322],[0.9213,0.7244],[0.9213,0.7165],[0.9213,0.7086],[0.9213,0.7007],[0.9213,0.6929],[0.9213,0.685],[0.9213,0.6771],[0.9213,0.6693],[0.9213,0.6614],[0.9213,0.6535],[0.9213,0.6456],[0.9213,0.6378],[0.9213,0.6299],[0.9213,0.622],[0.9213,0.6141],[0.9213,0.6063],[0.9213,0.5984],[0.9213,0.5905],[0.9213,0.5826],[0.9213,0.5748],[0.9213,0.5669],[0.9213,0.559],[0.9213,0.5511],[0.9213,0.5433],[0.9213,0.5354],[0.9213,0.5275],[0.9213,0.5197],[0.9213,0.5118],[0.9213,0.5039],[0.9213,0.496],[0.9213,0.4882],[0.9213,0.4803],[0.9213,0.4724],[0.9213,0.4645],[0.9213,0.4567],[0.9213,0.4488],[0.9213,0.4409],[0.9213,0.433],[0.9213,0.4252],[0.9213,0.4173],[0.9213,0.4094],[0.9213,0.4016],[0.9213,0.3937],[0.9213,0.3858],[0.9213,0.3779],[0.9213,0.3701],[0.9213,0.3622],[0.9213,0.3543],[0.9213,0.3464],[0.9213,0.3386],[0.9213,0.3307],[0.9213,0.3228],[0.9213,0.3149],[0.9213,0.3071],[0.9213,0.2992],[0.9213,0.2913],[0.9213,0.2834],[0.9213,0.2756],[0.9213,0.2677],[0.9213,0.2598],[0.9213,0.252],[0.9213,0.2441],[0.9213,0.2362],[0.9213,0.2283],[0.9213,0.2205],[0.9213,0.2126],[0.9213,0.2047],[0.9213,0.1968],[0.9213,0.189],[0.9213,0.1811],[0.9213,0.1732],[0.9213,0.1653],[0.9213,0.1575],[0.9213,0.1496],[0.9213,0.1417],[0.9213,0.1339],[0.9213,0.126],[0.9213,0.1181],[0.9213,0.1102],[0.9213,0.1024],[0.9213,0.0945],[0.9213,0.0866],[0.9213,0.0787],[0.9213,0.0709],[0.9213,0.063],[0.9213,0.0551],[0.9213,0.0472],[0.9213,0.0394],[0.9213,0.0315],[0.9213,0.0236],[0.9213,0.0157],[0.9213,0.0079],[0.9213,0],[0.9291,0.9999],[0.9291,0.9921],[0.9291,0.9842],[0.9291,0.9763],[0.9291,0.9684],[0.9291,0.9606],[0.9291,0.9527],[0.9291,0.9448],[0.9291,0.937],[0.9291,0.9291],[0.9291,0.9212],[0.9291,0.9133],[0.9291,0.9055],[0.9291,0.8976],[0.9291,0.8897],[0.9291,0.8818],[0.9291,0.874],[0.9291,0.8661],[0.9291,0.8582],[0.9291,0.8503],[0.9291,0.8425],[0.9291,0.8346],[0.9291,0.8267],[0.9291,0.8188],[0.9291,0.811],[0.9291,0.8031],[0.9291,0.7952],[0.9291,0.7874],[0.9291,0.7795],[0.9291,0.7716],[0.9291,0.7637],[0.9291,0.7559],[0.9291,0.748],[0.9291,0.7401],[0.9291,0.7322],[0.9291,0.7244],[0.9291,0.7165],[0.9291,0.7086],[0.9291,0.7007],[0.9291,0.6929],[0.9291,0.685],[0.9291,0.6771],[0.9291,0.6693],[0.9291,0.6614],[0.9291,0.6535],[0.9291,0.6456],[0.9291,0.6378],[0.9291,0.6299],[0.9291,0.622],[0.9291,0.6141],[0.9291,0.6063],[0.9291,0.5984],[0.9291,0.5905],[0.9291,0.5826],[0.9291,0.5748],[0.9291,0.5669],[0.9291,0.559],[0.9291,0.5511],[0.9291,0.5433],[0.9291,0.5354],[0.9291,0.5275],[0.9291,0.5197],[0.9291,0.5118],[0.9291,0.5039],[0.9291,0.496],[0.9291,0.4882],[0.9291,0.4803],[0.9291,0.4724],[0.9291,0.4645],[0.9291,0.4567],[0.9291,0.4488],[0.9291,0.4409],[0.9291,0.433],[0.9291,0.4252],[0.9291,0.4173],[0.9291,0.4094],[0.9291,0.4016],[0.9291,0.3937],[0.9291,0.3858],[0.9291,0.3779],[0.9291,0.3701],[0.9291,0.3622],[0.9291,0.3543],[0.9291,0.3464],[0.9291,0.3386],[0.9291,0.3307],[0.9291,0.3228],[0.9291,0.3149],[0.9291,0.3071],[0.9291,0.2992],[0.9291,0.2913],[0.9291,0.2834],[0.9291,0.2756],[0.9291,0.2677],[0.9291,0.2598],[0.9291,0.252],[0.9291,0.2441],[0.9291,0.2362],[0.9291,0.2283],[0.9291,0.2205],[0.9291,0.2126],[0.9291,0.2047],[0.9291,0.1968],[0.9291,0.189],[0.9291,0.1811],[0.9291,0.1732],[0.9291,0.1653],[0.9291,0.1575],[0.9291,0.1496],[0.9291,0.1417],[0.9291,0.1339],[0.9291,0.126],[0.9291,0.1181],[0.9291,0.1102],[0.9291,0.1024],[0.9291,0.0945],[0.9291,0.0866],[0.9291,0.0787],[0.9291,0.0709],[0.9291,0.063],[0.9291,0.0551],[0.9291,0.0472],[0.9291,0.0394],[0.9291,0.0315],[0.9291,0.0236],[0.9291,0.0157],[0.9291,0.0079],[0.9291,0],[0.937,0.9999],[0.937,0.9921],[0.937,0.9842],[0.937,0.9763],[0.937,0.9684],[0.937,0.9606],[0.937,0.9527],[0.937,0.9448],[0.937,0.937],[0.937,0.9291],[0.937,0.9212],[0.937,0.9133],[0.937,0.9055],[0.937,0.8976],[0.937,0.8897],[0.937,0.8818],[0.937,0.874],[0.937,0.8661],[0.937,0.8582],[0.937,0.8503],[0.937,0.8425],[0.937,0.8346],[0.937,0.8267],[0.937,0.8188],[0.937,0.811],[0.937,0.8031],[0.937,0.7952],[0.937,0.7874],[0.937,0.7795],[0.937,0.7716],[0.937,0.7637],[0.937,0.7559],[0.937,0.748],[0.937,0.7401],[0.937,0.7322],[0.937,0.7244],[0.937,0.7165],[0.937,0.7086],[0.937,0.7007],[0.937,0.6929],[0.937,0.685],[0.937,0.6771],[0.937,0.6693],[0.937,0.6614],[0.937,0.6535],[0.937,0.6456],[0.937,0.6378],[0.937,0.6299],[0.937,0.622],[0.937,0.6141],[0.937,0.6063],[0.937,0.5984],[0.937,0.5905],[0.937,0.5826],[0.937,0.5748],[0.937,0.5669],[0.937,0.559],[0.937,0.5511],[0.937,0.5433],[0.937,0.5354],[0.937,0.5275],[0.937,0.5197],[0.937,0.5118],[0.937,0.5039],[0.937,0.496],[0.937,0.4882],[0.937,0.4803],[0.937,0.4724],[0.937,0.4645],[0.937,0.4567],[0.937,0.4488],[0.937,0.4409],[0.937,0.433],[0.937,0.4252],[0.937,0.4173],[0.937,0.4094],[0.937,0.4016],[0.937,0.3937],[0.937,0.3858],[0.937,0.3779],[0.937,0.3701],[0.937,0.3622],[0.937,0.3543],[0.937,0.3464],[0.937,0.3386],[0.937,0.3307],[0.937,0.3228],[0.937,0.3149],[0.937,0.3071],[0.937,0.2992],[0.937,0.2913],[0.937,0.2834],[0.937,0.2756],[0.937,0.2677],[0.937,0.2598],[0.937,0.252],[0.937,0.2441],[0.937,0.2362],[0.937,0.2283],[0.937,0.2205],[0.937,0.2126],[0.937,0.2047],[0.937,0.1968],[0.937,0.189],[0.937,0.1811],[0.937,0.1732],[0.937,0.1653],[0.937,0.1575],[0.937,0.1496],[0.937,0.1417],[0.937,0.1339],[0.937,0.126],[0.937,0.1181],[0.937,0.1102],[0.937,0.1024],[0.937,0.0945],[0.937,0.0866],[0.937,0.0787],[0.937,0.0709],[0.937,0.063],[0.937,0.0551],[0.937,0.0472],[0.937,0.0394],[0.937,0.0315],[0.937,0.0236],[0.937,0.0157],[0.937,0.0079],[0.937,0],[0.9449,0.9999],[0.9449,0.9921],[0.9449,0.9842],[0.9449,0.9763],[0.9449,0.9684],[0.9449,0.9606],[0.9449,0.9527],[0.9449,0.9448],[0.9449,0.937],[0.9449,0.9291],[0.9449,0.9212],[0.9449,0.9133],[0.9449,0.9055],[0.9449,0.8976],[0.9449,0.8897],[0.9449,0.8818],[0.9449,0.874],[0.9449,0.8661],[0.9449,0.8582],[0.9449,0.8503],[0.9449,0.8425],[0.9449,0.8346],[0.9449,0.8267],[0.9449,0.8188],[0.9449,0.811],[0.9449,0.8031],[0.9449,0.7952],[0.9449,0.7874],[0.9449,0.7795],[0.9449,0.7716],[0.9449,0.7637],[0.9449,0.7559],[0.9449,0.748],[0.9449,0.7401],[0.9449,0.7322],[0.9449,0.7244],[0.9449,0.7165],[0.9449,0.7086],[0.9449,0.7007],[0.9449,0.6929],[0.9449,0.685],[0.9449,0.6771],[0.9449,0.6693],[0.9449,0.6614],[0.9449,0.6535],[0.9449,0.6456],[0.9449,0.6378],[0.9449,0.6299],[0.9449,0.622],[0.9449,0.6141],[0.9449,0.6063],[0.9449,0.5984],[0.9449,0.5905],[0.9449,0.5826],[0.9449,0.5748],[0.9449,0.5669],[0.9449,0.559],[0.9449,0.5511],[0.9449,0.5433],[0.9449,0.5354],[0.9449,0.5275],[0.9449,0.5197],[0.9449,0.5118],[0.9449,0.5039],[0.9449,0.496],[0.9449,0.4882],[0.9449,0.4803],[0.9449,0.4724],[0.9449,0.4645],[0.9449,0.4567],[0.9449,0.4488],[0.9449,0.4409],[0.9449,0.433],[0.9449,0.4252],[0.9449,0.4173],[0.9449,0.4094],[0.9449,0.4016],[0.9449,0.3937],[0.9449,0.3858],[0.9449,0.3779],[0.9449,0.3701],[0.9449,0.3622],[0.9449,0.3543],[0.9449,0.3464],[0.9449,0.3386],[0.9449,0.3307],[0.9449,0.3228],[0.9449,0.3149],[0.9449,0.3071],[0.9449,0.2992],[0.9449,0.2913],[0.9449,0.2834],[0.9449,0.2756],[0.9449,0.2677],[0.9449,0.2598],[0.9449,0.252],[0.9449,0.2441],[0.9449,0.2362],[0.9449,0.2283],[0.9449,0.2205],[0.9449,0.2126],[0.9449,0.2047],[0.9449,0.1968],[0.9449,0.189],[0.9449,0.1811],[0.9449,0.1732],[0.9449,0.1653],[0.9449,0.1575],[0.9449,0.1496],[0.9449,0.1417],[0.9449,0.1339],[0.9449,0.126],[0.9449,0.1181],[0.9449,0.1102],[0.9449,0.1024],[0.9449,0.0945],[0.9449,0.0866],[0.9449,0.0787],[0.9449,0.0709],[0.9449,0.063],[0.9449,0.0551],[0.9449,0.0472],[0.9449,0.0394],[0.9449,0.0315],[0.9449,0.0236],[0.9449,0.0157],[0.9449,0.0079],[0.9449,0],[0.9528,0.9999],[0.9528,0.9921],[0.9528,0.9842],[0.9528,0.9763],[0.9528,0.9684],[0.9528,0.9606],[0.9528,0.9527],[0.9528,0.9448],[0.9528,0.937],[0.9528,0.9291],[0.9528,0.9212],[0.9528,0.9133],[0.9528,0.9055],[0.9528,0.8976],[0.9528,0.8897],[0.9528,0.8818],[0.9528,0.874],[0.9528,0.8661],[0.9528,0.8582],[0.9528,0.8503],[0.9528,0.8425],[0.9528,0.8346],[0.9528,0.8267],[0.9528,0.8188],[0.9528,0.811],[0.9528,0.8031],[0.9528,0.7952],[0.9528,0.7874],[0.9528,0.7795],[0.9528,0.7716],[0.9528,0.7637],[0.9528,0.7559],[0.9528,0.748],[0.9528,0.7401],[0.9528,0.7322],[0.9528,0.7244],[0.9528,0.7165],[0.9528,0.7086],[0.9528,0.7007],[0.9528,0.6929],[0.9528,0.685],[0.9528,0.6771],[0.9528,0.6693],[0.9528,0.6614],[0.9528,0.6535],[0.9528,0.6456],[0.9528,0.6378],[0.9528,0.6299],[0.9528,0.622],[0.9528,0.6141],[0.9528,0.6063],[0.9528,0.5984],[0.9528,0.5905],[0.9528,0.5826],[0.9528,0.5748],[0.9528,0.5669],[0.9528,0.559],[0.9528,0.5511],[0.9528,0.5433],[0.9528,0.5354],[0.9528,0.5275],[0.9528,0.5197],[0.9528,0.5118],[0.9528,0.5039],[0.9528,0.496],[0.9528,0.4882],[0.9528,0.4803],[0.9528,0.4724],[0.9528,0.4645],[0.9528,0.4567],[0.9528,0.4488],[0.9528,0.4409],[0.9528,0.433],[0.9528,0.4252],[0.9528,0.4173],[0.9528,0.4094],[0.9528,0.4016],[0.9528,0.3937],[0.9528,0.3858],[0.9528,0.3779],[0.9528,0.3701],[0.9528,0.3622],[0.9528,0.3543],[0.9528,0.3464],[0.9528,0.3386],[0.9528,0.3307],[0.9528,0.3228],[0.9528,0.3149],[0.9528,0.3071],[0.9528,0.2992],[0.9528,0.2913],[0.9528,0.2834],[0.9528,0.2756],[0.9528,0.2677],[0.9528,0.2598],[0.9528,0.252],[0.9528,0.2441],[0.9528,0.2362],[0.9528,0.2283],[0.9528,0.2205],[0.9528,0.2126],[0.9528,0.2047],[0.9528,0.1968],[0.9528,0.189],[0.9528,0.1811],[0.9528,0.1732],[0.9528,0.1653],[0.9528,0.1575],[0.9528,0.1496],[0.9528,0.1417],[0.9528,0.1339],[0.9528,0.126],[0.9528,0.1181],[0.9528,0.1102],[0.9528,0.1024],[0.9528,0.0945],[0.9528,0.0866],[0.9528,0.0787],[0.9528,0.0709],[0.9528,0.063],[0.9528,0.0551],[0.9528,0.0472],[0.9528,0.0394],[0.9528,0.0315],[0.9528,0.0236],[0.9528,0.0157],[0.9528,0.0079],[0.9528,0],[0.9606,0.9999],[0.9606,0.9921],[0.9606,0.9842],[0.9606,0.9763],[0.9606,0.9684],[0.9606,0.9606],[0.9606,0.9527],[0.9606,0.9448],[0.9606,0.937],[0.9606,0.9291],[0.9606,0.9212],[0.9606,0.9133],[0.9606,0.9055],[0.9606,0.8976],[0.9606,0.8897],[0.9606,0.8818],[0.9606,0.874],[0.9606,0.8661],[0.9606,0.8582],[0.9606,0.8503],[0.9606,0.8425],[0.9606,0.8346],[0.9606,0.8267],[0.9606,0.8188],[0.9606,0.811],[0.9606,0.8031],[0.9606,0.7952],[0.9606,0.7874],[0.9606,0.7795],[0.9606,0.7716],[0.9606,0.7637],[0.9606,0.7559],[0.9606,0.748],[0.9606,0.7401],[0.9606,0.7322],[0.9606,0.7244],[0.9606,0.7165],[0.9606,0.7086],[0.9606,0.7007],[0.9606,0.6929],[0.9606,0.685],[0.9606,0.6771],[0.9606,0.6693],[0.9606,0.6614],[0.9606,0.6535],[0.9606,0.6456],[0.9606,0.6378],[0.9606,0.6299],[0.9606,0.622],[0.9606,0.6141],[0.9606,0.6063],[0.9606,0.5984],[0.9606,0.5905],[0.9606,0.5826],[0.9606,0.5748],[0.9606,0.5669],[0.9606,0.559],[0.9606,0.5511],[0.9606,0.5433],[0.9606,0.5354],[0.9606,0.5275],[0.9606,0.5197],[0.9606,0.5118],[0.9606,0.5039],[0.9606,0.496],[0.9606,0.4882],[0.9606,0.4803],[0.9606,0.4724],[0.9606,0.4645],[0.9606,0.4567],[0.9606,0.4488],[0.9606,0.4409],[0.9606,0.433],[0.9606,0.4252],[0.9606,0.4173],[0.9606,0.4094],[0.9606,0.4016],[0.9606,0.3937],[0.9606,0.3858],[0.9606,0.3779],[0.9606,0.3701],[0.9606,0.3622],[0.9606,0.3543],[0.9606,0.3464],[0.9606,0.3386],[0.9606,0.3307],[0.9606,0.3228],[0.9606,0.3149],[0.9606,0.3071],[0.9606,0.2992],[0.9606,0.2913],[0.9606,0.2834],[0.9606,0.2756],[0.9606,0.2677],[0.9606,0.2598],[0.9606,0.252],[0.9606,0.2441],[0.9606,0.2362],[0.9606,0.2283],[0.9606,0.2205],[0.9606,0.2126],[0.9606,0.2047],[0.9606,0.1968],[0.9606,0.189],[0.9606,0.1811],[0.9606,0.1732],[0.9606,0.1653],[0.9606,0.1575],[0.9606,0.1496],[0.9606,0.1417],[0.9606,0.1339],[0.9606,0.126],[0.9606,0.1181],[0.9606,0.1102],[0.9606,0.1024],[0.9606,0.0945],[0.9606,0.0866],[0.9606,0.0787],[0.9606,0.0709],[0.9606,0.063],[0.9606,0.0551],[0.9606,0.0472],[0.9606,0.0394],[0.9606,0.0315],[0.9606,0.0236],[0.9606,0.0157],[0.9606,0.0079],[0.9606,0],[0.9685,0.9999],[0.9685,0.9921],[0.9685,0.9842],[0.9685,0.9763],[0.9685,0.9684],[0.9685,0.9606],[0.9685,0.9527],[0.9685,0.9448],[0.9685,0.937],[0.9685,0.9291],[0.9685,0.9212],[0.9685,0.9133],[0.9685,0.9055],[0.9685,0.8976],[0.9685,0.8897],[0.9685,0.8818],[0.9685,0.874],[0.9685,0.8661],[0.9685,0.8582],[0.9685,0.8503],[0.9685,0.8425],[0.9685,0.8346],[0.9685,0.8267],[0.9685,0.8188],[0.9685,0.811],[0.9685,0.8031],[0.9685,0.7952],[0.9685,0.7874],[0.9685,0.7795],[0.9685,0.7716],[0.9685,0.7637],[0.9685,0.7559],[0.9685,0.748],[0.9685,0.7401],[0.9685,0.7322],[0.9685,0.7244],[0.9685,0.7165],[0.9685,0.7086],[0.9685,0.7007],[0.9685,0.6929],[0.9685,0.685],[0.9685,0.6771],[0.9685,0.6693],[0.9685,0.6614],[0.9685,0.6535],[0.9685,0.6456],[0.9685,0.6378],[0.9685,0.6299],[0.9685,0.622],[0.9685,0.6141],[0.9685,0.6063],[0.9685,0.5984],[0.9685,0.5905],[0.9685,0.5826],[0.9685,0.5748],[0.9685,0.5669],[0.9685,0.559],[0.9685,0.5511],[0.9685,0.5433],[0.9685,0.5354],[0.9685,0.5275],[0.9685,0.5197],[0.9685,0.5118],[0.9685,0.5039],[0.9685,0.496],[0.9685,0.4882],[0.9685,0.4803],[0.9685,0.4724],[0.9685,0.4645],[0.9685,0.4567],[0.9685,0.4488],[0.9685,0.4409],[0.9685,0.433],[0.9685,0.4252],[0.9685,0.4173],[0.9685,0.4094],[0.9685,0.4016],[0.9685,0.3937],[0.9685,0.3858],[0.9685,0.3779],[0.9685,0.3701],[0.9685,0.3622],[0.9685,0.3543],[0.9685,0.3464],[0.9685,0.3386],[0.9685,0.3307],[0.9685,0.3228],[0.9685,0.3149],[0.9685,0.3071],[0.9685,0.2992],[0.9685,0.2913],[0.9685,0.2834],[0.9685,0.2756],[0.9685,0.2677],[0.9685,0.2598],[0.9685,0.252],[0.9685,0.2441],[0.9685,0.2362],[0.9685,0.2283],[0.9685,0.2205],[0.9685,0.2126],[0.9685,0.2047],[0.9685,0.1968],[0.9685,0.189],[0.9685,0.1811],[0.9685,0.1732],[0.9685,0.1653],[0.9685,0.1575],[0.9685,0.1496],[0.9685,0.1417],[0.9685,0.1339],[0.9685,0.126],[0.9685,0.1181],[0.9685,0.1102],[0.9685,0.1024],[0.9685,0.0945],[0.9685,0.0866],[0.9685,0.0787],[0.9685,0.0709],[0.9685,0.063],[0.9685,0.0551],[0.9685,0.0472],[0.9685,0.0394],[0.9685,0.0315],[0.9685,0.0236],[0.9685,0.0157],[0.9685,0.0079],[0.9685,0],[0.9764,0.9999],[0.9764,0.9921],[0.9764,0.9842],[0.9764,0.9763],[0.9764,0.9684],[0.9764,0.9606],[0.9764,0.9527],[0.9764,0.9448],[0.9764,0.937],[0.9764,0.9291],[0.9764,0.9212],[0.9764,0.9133],[0.9764,0.9055],[0.9764,0.8976],[0.9764,0.8897],[0.9764,0.8818],[0.9764,0.874],[0.9764,0.8661],[0.9764,0.8582],[0.9764,0.8503],[0.9764,0.8425],[0.9764,0.8346],[0.9764,0.8267],[0.9764,0.8188],[0.9764,0.811],[0.9764,0.8031],[0.9764,0.7952],[0.9764,0.7874],[0.9764,0.7795],[0.9764,0.7716],[0.9764,0.7637],[0.9764,0.7559],[0.9764,0.748],[0.9764,0.7401],[0.9764,0.7322],[0.9764,0.7244],[0.9764,0.7165],[0.9764,0.7086],[0.9764,0.7007],[0.9764,0.6929],[0.9764,0.685],[0.9764,0.6771],[0.9764,0.6693],[0.9764,0.6614],[0.9764,0.6535],[0.9764,0.6456],[0.9764,0.6378],[0.9764,0.6299],[0.9764,0.622],[0.9764,0.6141],[0.9764,0.6063],[0.9764,0.5984],[0.9764,0.5905],[0.9764,0.5826],[0.9764,0.5748],[0.9764,0.5669],[0.9764,0.559],[0.9764,0.5511],[0.9764,0.5433],[0.9764,0.5354],[0.9764,0.5275],[0.9764,0.5197],[0.9764,0.5118],[0.9764,0.5039],[0.9764,0.496],[0.9764,0.4882],[0.9764,0.4803],[0.9764,0.4724],[0.9764,0.4645],[0.9764,0.4567],[0.9764,0.4488],[0.9764,0.4409],[0.9764,0.433],[0.9764,0.4252],[0.9764,0.4173],[0.9764,0.4094],[0.9764,0.4016],[0.9764,0.3937],[0.9764,0.3858],[0.9764,0.3779],[0.9764,0.3701],[0.9764,0.3622],[0.9764,0.3543],[0.9764,0.3464],[0.9764,0.3386],[0.9764,0.3307],[0.9764,0.3228],[0.9764,0.3149],[0.9764,0.3071],[0.9764,0.2992],[0.9764,0.2913],[0.9764,0.2834],[0.9764,0.2756],[0.9764,0.2677],[0.9764,0.2598],[0.9764,0.252],[0.9764,0.2441],[0.9764,0.2362],[0.9764,0.2283],[0.9764,0.2205],[0.9764,0.2126],[0.9764,0.2047],[0.9764,0.1968],[0.9764,0.189],[0.9764,0.1811],[0.9764,0.1732],[0.9764,0.1653],[0.9764,0.1575],[0.9764,0.1496],[0.9764,0.1417],[0.9764,0.1339],[0.9764,0.126],[0.9764,0.1181],[0.9764,0.1102],[0.9764,0.1024],[0.9764,0.0945],[0.9764,0.0866],[0.9764,0.0787],[0.9764,0.0709],[0.9764,0.063],[0.9764,0.0551],[0.9764,0.0472],[0.9764,0.0394],[0.9764,0.0315],[0.9764,0.0236],[0.9764,0.0157],[0.9764,0.0079],[0.9764,0],[0.9843,0.9999],[0.9843,0.9921],[0.9843,0.9842],[0.9843,0.9763],[0.9843,0.9684],[0.9843,0.9606],[0.9843,0.9527],[0.9843,0.9448],[0.9843,0.937],[0.9843,0.9291],[0.9843,0.9212],[0.9843,0.9133],[0.9843,0.9055],[0.9843,0.8976],[0.9843,0.8897],[0.9843,0.8818],[0.9843,0.874],[0.9843,0.8661],[0.9843,0.8582],[0.9843,0.8503],[0.9843,0.8425],[0.9843,0.8346],[0.9843,0.8267],[0.9843,0.8188],[0.9843,0.811],[0.9843,0.8031],[0.9843,0.7952],[0.9843,0.7874],[0.9843,0.7795],[0.9843,0.7716],[0.9843,0.7637],[0.9843,0.7559],[0.9843,0.748],[0.9843,0.7401],[0.9843,0.7322],[0.9843,0.7244],[0.9843,0.7165],[0.9843,0.7086],[0.9843,0.7007],[0.9843,0.6929],[0.9843,0.685],[0.9843,0.6771],[0.9843,0.6693],[0.9843,0.6614],[0.9843,0.6535],[0.9843,0.6456],[0.9843,0.6378],[0.9843,0.6299],[0.9843,0.622],[0.9843,0.6141],[0.9843,0.6063],[0.9843,0.5984],[0.9843,0.5905],[0.9843,0.5826],[0.9843,0.5748],[0.9843,0.5669],[0.9843,0.559],[0.9843,0.5511],[0.9843,0.5433],[0.9843,0.5354],[0.9843,0.5275],[0.9843,0.5197],[0.9843,0.5118],[0.9843,0.5039],[0.9843,0.496],[0.9843,0.4882],[0.9843,0.4803],[0.9843,0.4724],[0.9843,0.4645],[0.9843,0.4567],[0.9843,0.4488],[0.9843,0.4409],[0.9843,0.433],[0.9843,0.4252],[0.9843,0.4173],[0.9843,0.4094],[0.9843,0.4016],[0.9843,0.3937],[0.9843,0.3858],[0.9843,0.3779],[0.9843,0.3701],[0.9843,0.3622],[0.9843,0.3543],[0.9843,0.3464],[0.9843,0.3386],[0.9843,0.3307],[0.9843,0.3228],[0.9843,0.3149],[0.9843,0.3071],[0.9843,0.2992],[0.9843,0.2913],[0.9843,0.2834],[0.9843,0.2756],[0.9843,0.2677],[0.9843,0.2598],[0.9843,0.252],[0.9843,0.2441],[0.9843,0.2362],[0.9843,0.2283],[0.9843,0.2205],[0.9843,0.2126],[0.9843,0.2047],[0.9843,0.1968],[0.9843,0.189],[0.9843,0.1811],[0.9843,0.1732],[0.9843,0.1653],[0.9843,0.1575],[0.9843,0.1496],[0.9843,0.1417],[0.9843,0.1339],[0.9843,0.126],[0.9843,0.1181],[0.9843,0.1102],[0.9843,0.1024],[0.9843,0.0945],[0.9843,0.0866],[0.9843,0.0787],[0.9843,0.0709],[0.9843,0.063],[0.9843,0.0551],[0.9843,0.0472],[0.9843,0.0394],[0.9843,0.0315],[0.9843,0.0236],[0.9843,0.0157],[0.9843,0.0079],[0.9843,0],[0.9921,0.9999],[0.9921,0.9921],[0.9921,0.9842],[0.9921,0.9763],[0.9921,0.9684],[0.9921,0.9606],[0.9921,0.9527],[0.9921,0.9448],[0.9921,0.937],[0.9921,0.9291],[0.9921,0.9212],[0.9921,0.9133],[0.9921,0.9055],[0.9921,0.8976],[0.9921,0.8897],[0.9921,0.8818],[0.9921,0.874],[0.9921,0.8661],[0.9921,0.8582],[0.9921,0.8503],[0.9921,0.8425],[0.9921,0.8346],[0.9921,0.8267],[0.9921,0.8188],[0.9921,0.811],[0.9921,0.8031],[0.9921,0.7952],[0.9921,0.7874],[0.9921,0.7795],[0.9921,0.7716],[0.9921,0.7637],[0.9921,0.7559],[0.9921,0.748],[0.9921,0.7401],[0.9921,0.7322],[0.9921,0.7244],[0.9921,0.7165],[0.9921,0.7086],[0.9921,0.7007],[0.9921,0.6929],[0.9921,0.685],[0.9921,0.6771],[0.9921,0.6693],[0.9921,0.6614],[0.9921,0.6535],[0.9921,0.6456],[0.9921,0.6378],[0.9921,0.6299],[0.9921,0.622],[0.9921,0.6141],[0.9921,0.6063],[0.9921,0.5984],[0.9921,0.5905],[0.9921,0.5826],[0.9921,0.5748],[0.9921,0.5669],[0.9921,0.559],[0.9921,0.5511],[0.9921,0.5433],[0.9921,0.5354],[0.9921,0.5275],[0.9921,0.5197],[0.9921,0.5118],[0.9921,0.5039],[0.9921,0.496],[0.9921,0.4882],[0.9921,0.4803],[0.9921,0.4724],[0.9921,0.4645],[0.9921,0.4567],[0.9921,0.4488],[0.9921,0.4409],[0.9921,0.433],[0.9921,0.4252],[0.9921,0.4173],[0.9921,0.4094],[0.9921,0.4016],[0.9921,0.3937],[0.9921,0.3858],[0.9921,0.3779],[0.9921,0.3701],[0.9921,0.3622],[0.9921,0.3543],[0.9921,0.3464],[0.9921,0.3386],[0.9921,0.3307],[0.9921,0.3228],[0.9921,0.3149],[0.9921,0.3071],[0.9921,0.2992],[0.9921,0.2913],[0.9921,0.2834],[0.9921,0.2756],[0.9921,0.2677],[0.9921,0.2598],[0.9921,0.252],[0.9921,0.2441],[0.9921,0.2362],[0.9921,0.2283],[0.9921,0.2205],[0.9921,0.2126],[0.9921,0.2047],[0.9921,0.1968],[0.9921,0.189],[0.9921,0.1811],[0.9921,0.1732],[0.9921,0.1653],[0.9921,0.1575],[0.9921,0.1496],[0.9921,0.1417],[0.9921,0.1339],[0.9921,0.126],[0.9921,0.1181],[0.9921,0.1102],[0.9921,0.1024],[0.9921,0.0945],[0.9921,0.0866],[0.9921,0.0787],[0.9921,0.0709],[0.9921,0.063],[0.9921,0.0551],[0.9921,0.0472],[0.9921,0.0394],[0.9921,0.0315],[0.9921,0.0236],[0.9921,0.0157],[0.9921,0.0079],[0.9921,0],[1,0.9999],[1,0.9921],[1,0.9842],[1,0.9763],[1,0.9684],[1,0.9606],[1,0.9527],[1,0.9448],[1,0.937],[1,0.9291],[1,0.9212],[1,0.9133],[1,0.9055],[1,0.8976],[1,0.8897],[1,0.8818],[1,0.874],[1,0.8661],[1,0.8582],[1,0.8503],[1,0.8425],[1,0.8346],[1,0.8267],[1,0.8188],[1,0.811],[1,0.8031],[1,0.7952],[1,0.7874],[1,0.7795],[1,0.7716],[1,0.7637],[1,0.7559],[1,0.748],[1,0.7401],[1,0.7322],[1,0.7244],[1,0.7165],[1,0.7086],[1,0.7007],[1,0.6929],[1,0.685],[1,0.6771],[1,0.6693],[1,0.6614],[1,0.6535],[1,0.6456],[1,0.6378],[1,0.6299],[1,0.622],[1,0.6141],[1,0.6063],[1,0.5984],[1,0.5905],[1,0.5826],[1,0.5748],[1,0.5669],[1,0.559],[1,0.5511],[1,0.5433],[1,0.5354],[1,0.5275],[1,0.5197],[1,0.5118],[1,0.5039],[1,0.496],[1,0.4882],[1,0.4803],[1,0.4724],[1,0.4645],[1,0.4567],[1,0.4488],[1,0.4409],[1,0.433],[1,0.4252],[1,0.4173],[1,0.4094],[1,0.4016],[1,0.3937],[1,0.3858],[1,0.3779],[1,0.3701],[1,0.3622],[1,0.3543],[1,0.3464],[1,0.3386],[1,0.3307],[1,0.3228],[1,0.3149],[1,0.3071],[1,0.2992],[1,0.2913],[1,0.2834],[1,0.2756],[1,0.2677],[1,0.2598],[1,0.252],[1,0.2441],[1,0.2362],[1,0.2283],[1,0.2205],[1,0.2126],[1,0.2047],[1,0.1968],[1,0.189],[1,0.1811],[1,0.1732],[1,0.1653],[1,0.1575],[1,0.1496],[1,0.1417],[1,0.1339],[1,0.126],[1,0.1181],[1,0.1102],[1,0.1024],[1,0.0945],[1,0.0866],[1,0.0787],[1,0.0709],[1,0.063],[1,0.0551],[1,0.0472],[1,0.0394],[1,0.0315],[1,0.0236],[1,0.0157],[1,0.0079],[1,0]]
    			.flat(Infinity)),
    			size: 2
    		}
    	}, {
    		index: new Uint32Array(
    [127,126,255,254,255,126,126,125,254,253,254,125,125,124,253,252,253,124,124,123,252,251,252,123,123,122,251,250,251,122,122,121,250,249,250,121,121,120,249,248,249,120,120,119,248,247,248,119,119,118,247,246,247,118,118,117,246,245,246,117,117,116,245,244,245,116,116,115,244,243,244,115,115,114,243,242,243,114,114,113,242,241,242,113,113,112,241,240,241,112,112,111,240,239,240,111,111,110,239,238,239,110,110,109,238,237,238,109,109,108,237,236,237,108,108,107,236,235,236,107,107,106,235,234,235,106,106,105,234,233,234,105,105,104,233,232,233,104,104,103,232,231,232,103,103,102,231,230,231,102,102,101,230,229,230,101,101,100,229,228,229,100,100,99,228,227,228,99,99,98,227,226,227,98,98,97,226,225,226,97,97,96,225,224,225,96,96,95,224,223,224,95,95,94,223,222,223,94,94,93,222,221,222,93,93,92,221,220,221,92,92,91,220,219,220,91,91,90,219,218,219,90,90,89,218,217,218,89,89,88,217,216,217,88,88,87,216,215,216,87,87,86,215,214,215,86,86,85,214,213,214,85,85,84,213,212,213,84,84,83,212,211,212,83,83,82,211,210,211,82,82,81,210,209,210,81,81,80,209,208,209,80,80,79,208,207,208,79,79,78,207,206,207,78,78,77,206,205,206,77,77,76,205,204,205,76,76,75,204,203,204,75,75,74,203,202,203,74,74,73,202,201,202,73,73,72,201,200,201,72,72,71,200,199,200,71,71,70,199,198,199,70,70,69,198,197,198,69,69,68,197,196,197,68,68,67,196,195,196,67,67,66,195,194,195,66,66,65,194,193,194,65,65,64,193,192,193,64,64,63,192,191,192,63,63,62,191,190,191,62,62,61,190,189,190,61,61,60,189,188,189,60,60,59,188,187,188,59,59,58,187,186,187,58,58,57,186,185,186,57,57,56,185,184,185,56,56,55,184,183,184,55,55,54,183,182,183,54,54,53,182,181,182,53,53,52,181,180,181,52,52,51,180,179,180,51,51,50,179,178,179,50,50,49,178,177,178,49,49,48,177,176,177,48,48,47,176,175,176,47,47,46,175,174,175,46,46,45,174,173,174,45,45,44,173,172,173,44,44,43,172,171,172,43,43,42,171,170,171,42,42,41,170,169,170,41,41,40,169,168,169,40,40,39,168,167,168,39,39,38,167,166,167,38,38,37,166,165,166,37,37,36,165,164,165,36,36,35,164,163,164,35,35,34,163,162,163,34,34,33,162,161,162,33,33,32,161,160,161,32,32,31,160,159,160,31,31,30,159,158,159,30,30,29,158,157,158,29,29,28,157,156,157,28,28,27,156,155,156,27,27,26,155,154,155,26,26,25,154,153,154,25,25,24,153,152,153,24,24,23,152,151,152,23,23,22,151,150,151,22,22,21,150,149,150,21,21,20,149,148,149,20,20,19,148,147,148,19,19,18,147,146,147,18,18,17,146,145,146,17,17,16,145,144,145,16,16,15,144,143,144,15,15,14,143,142,143,14,14,13,142,141,142,13,13,12,141,140,141,12,12,11,140,139,140,11,11,10,139,138,139,10,10,9,138,137,138,9,9,8,137,136,137,8,8,7,136,135,136,7,7,6,135,134,135,6,6,5,134,133,134,5,5,4,133,132,133,4,4,3,132,131,132,3,3,2,131,130,131,2,2,1,130,129,130,1,1,0,129,128,129,0,255,254,383,382,383,254,254,253,382,381,382,253,253,252,381,380,381,252,252,251,380,379,380,251,251,250,379,378,379,250,250,249,378,377,378,249,249,248,377,376,377,248,248,247,376,375,376,247,247,246,375,374,375,246,246,245,374,373,374,245,245,244,373,372,373,244,244,243,372,371,372,243,243,242,371,370,371,242,242,241,370,369,370,241,241,240,369,368,369,240,240,239,368,367,368,239,239,238,367,366,367,238,238,237,366,365,366,237,237,236,365,364,365,236,236,235,364,363,364,235,235,234,363,362,363,234,234,233,362,361,362,233,233,232,361,360,361,232,232,231,360,359,360,231,231,230,359,358,359,230,230,229,358,357,358,229,229,228,357,356,357,228,228,227,356,355,356,227,227,226,355,354,355,226,226,225,354,353,354,225,225,224,353,352,353,224,224,223,352,351,352,223,223,222,351,350,351,222,222,221,350,349,350,221,221,220,349,348,349,220,220,219,348,347,348,219,219,218,347,346,347,218,218,217,346,345,346,217,217,216,345,344,345,216,216,215,344,343,344,215,215,214,343,342,343,214,214,213,342,341,342,213,213,212,341,340,341,212,212,211,340,339,340,211,211,210,339,338,339,210,210,209,338,337,338,209,209,208,337,336,337,208,208,207,336,335,336,207,207,206,335,334,335,206,206,205,334,333,334,205,205,204,333,332,333,204,204,203,332,331,332,203,203,202,331,330,331,202,202,201,330,329,330,201,201,200,329,328,329,200,200,199,328,327,328,199,199,198,327,326,327,198,198,197,326,325,326,197,197,196,325,324,325,196,196,195,324,323,324,195,195,194,323,322,323,194,194,193,322,321,322,193,193,192,321,320,321,192,192,191,320,319,320,191,191,190,319,318,319,190,190,189,318,317,318,189,189,188,317,316,317,188,188,187,316,315,316,187,187,186,315,314,315,186,186,185,314,313,314,185,185,184,313,312,313,184,184,183,312,311,312,183,183,182,311,310,311,182,182,181,310,309,310,181,181,180,309,308,309,180,180,179,308,307,308,179,179,178,307,306,307,178,178,177,306,305,306,177,177,176,305,304,305,176,176,175,304,303,304,175,175,174,303,302,303,174,174,173,302,301,302,173,173,172,301,300,301,172,172,171,300,299,300,171,171,170,299,298,299,170,170,169,298,297,298,169,169,168,297,296,297,168,168,167,296,295,296,167,167,166,295,294,295,166,166,165,294,293,294,165,165,164,293,292,293,164,164,163,292,291,292,163,163,162,291,290,291,162,162,161,290,289,290,161,161,160,289,288,289,160,160,159,288,287,288,159,159,158,287,286,287,158,158,157,286,285,286,157,157,156,285,284,285,156,156,155,284,283,284,155,155,154,283,282,283,154,154,153,282,281,282,153,153,152,281,280,281,152,152,151,280,279,280,151,151,150,279,278,279,150,150,149,278,277,278,149,149,148,277,276,277,148,148,147,276,275,276,147,147,146,275,274,275,146,146,145,274,273,274,145,145,144,273,272,273,144,144,143,272,271,272,143,143,142,271,270,271,142,142,141,270,269,270,141,141,140,269,268,269,140,140,139,268,267,268,139,139,138,267,266,267,138,138,137,266,265,266,137,137,136,265,264,265,136,136,135,264,263,264,135,135,134,263,262,263,134,134,133,262,261,262,133,133,132,261,260,261,132,132,131,260,259,260,131,131,130,259,258,259,130,130,129,258,257,258,129,129,128,257,256,257,128,383,382,511,510,511,382,382,381,510,509,510,381,381,380,509,508,509,380,380,379,508,507,508,379,379,378,507,506,507,378,378,377,506,505,506,377,377,376,505,504,505,376,376,375,504,503,504,375,375,374,503,502,503,374,374,373,502,501,502,373,373,372,501,500,501,372,372,371,500,499,500,371,371,370,499,498,499,370,370,369,498,497,498,369,369,368,497,496,497,368,368,367,496,495,496,367,367,366,495,494,495,366,366,365,494,493,494,365,365,364,493,492,493,364,364,363,492,491,492,363,363,362,491,490,491,362,362,361,490,489,490,361,361,360,489,488,489,360,360,359,488,487,488,359,359,358,487,486,487,358,358,357,486,485,486,357,357,356,485,484,485,356,356,355,484,483,484,355,355,354,483,482,483,354,354,353,482,481,482,353,353,352,481,480,481,352,352,351,480,479,480,351,351,350,479,478,479,350,350,349,478,477,478,349,349,348,477,476,477,348,348,347,476,475,476,347,347,346,475,474,475,346,346,345,474,473,474,345,345,344,473,472,473,344,344,343,472,471,472,343,343,342,471,470,471,342,342,341,470,469,470,341,341,340,469,468,469,340,340,339,468,467,468,339,339,338,467,466,467,338,338,337,466,465,466,337,337,336,465,464,465,336,336,335,464,463,464,335,335,334,463,462,463,334,334,333,462,461,462,333,333,332,461,460,461,332,332,331,460,459,460,331,331,330,459,458,459,330,330,329,458,457,458,329,329,328,457,456,457,328,328,327,456,455,456,327,327,326,455,454,455,326,326,325,454,453,454,325,325,324,453,452,453,324,324,323,452,451,452,323,323,322,451,450,451,322,322,321,450,449,450,321,321,320,449,448,449,320,320,319,448,447,448,319,319,318,447,446,447,318,318,317,446,445,446,317,317,316,445,444,445,316,316,315,444,443,444,315,315,314,443,442,443,314,314,313,442,441,442,313,313,312,441,440,441,312,312,311,440,439,440,311,311,310,439,438,439,310,310,309,438,437,438,309,309,308,437,436,437,308,308,307,436,435,436,307,307,306,435,434,435,306,306,305,434,433,434,305,305,304,433,432,433,304,304,303,432,431,432,303,303,302,431,430,431,302,302,301,430,429,430,301,301,300,429,428,429,300,300,299,428,427,428,299,299,298,427,426,427,298,298,297,426,425,426,297,297,296,425,424,425,296,296,295,424,423,424,295,295,294,423,422,423,294,294,293,422,421,422,293,293,292,421,420,421,292,292,291,420,419,420,291,291,290,419,418,419,290,290,289,418,417,418,289,289,288,417,416,417,288,288,287,416,415,416,287,287,286,415,414,415,286,286,285,414,413,414,285,285,284,413,412,413,284,284,283,412,411,412,283,283,282,411,410,411,282,282,281,410,409,410,281,281,280,409,408,409,280,280,279,408,407,408,279,279,278,407,406,407,278,278,277,406,405,406,277,277,276,405,404,405,276,276,275,404,403,404,275,275,274,403,402,403,274,274,273,402,401,402,273,273,272,401,400,401,272,272,271,400,399,400,271,271,270,399,398,399,270,270,269,398,397,398,269,269,268,397,396,397,268,268,267,396,395,396,267,267,266,395,394,395,266,266,265,394,393,394,265,265,264,393,392,393,264,264,263,392,391,392,263,263,262,391,390,391,262,262,261,390,389,390,261,261,260,389,388,389,260,260,259,388,387,388,259,259,258,387,386,387,258,258,257,386,385,386,257,257,256,385,384,385,256,511,510,639,638,639,510,510,509,638,637,638,509,509,508,637,636,637,508,508,507,636,635,636,507,507,506,635,634,635,506,506,505,634,633,634,505,505,504,633,632,633,504,504,503,632,631,632,503,503,502,631,630,631,502,502,501,630,629,630,501,501,500,629,628,629,500,500,499,628,627,628,499,499,498,627,626,627,498,498,497,626,625,626,497,497,496,625,624,625,496,496,495,624,623,624,495,495,494,623,622,623,494,494,493,622,621,622,493,493,492,621,620,621,492,492,491,620,619,620,491,491,490,619,618,619,490,490,489,618,617,618,489,489,488,617,616,617,488,488,487,616,615,616,487,487,486,615,614,615,486,486,485,614,613,614,485,485,484,613,612,613,484,484,483,612,611,612,483,483,482,611,610,611,482,482,481,610,609,610,481,481,480,609,608,609,480,480,479,608,607,608,479,479,478,607,606,607,478,478,477,606,605,606,477,477,476,605,604,605,476,476,475,604,603,604,475,475,474,603,602,603,474,474,473,602,601,602,473,473,472,601,600,601,472,472,471,600,599,600,471,471,470,599,598,599,470,470,469,598,597,598,469,469,468,597,596,597,468,468,467,596,595,596,467,467,466,595,594,595,466,466,465,594,593,594,465,465,464,593,592,593,464,464,463,592,591,592,463,463,462,591,590,591,462,462,461,590,589,590,461,461,460,589,588,589,460,460,459,588,587,588,459,459,458,587,586,587,458,458,457,586,585,586,457,457,456,585,584,585,456,456,455,584,583,584,455,455,454,583,582,583,454,454,453,582,581,582,453,453,452,581,580,581,452,452,451,580,579,580,451,451,450,579,578,579,450,450,449,578,577,578,449,449,448,577,576,577,448,448,447,576,575,576,447,447,446,575,574,575,446,446,445,574,573,574,445,445,444,573,572,573,444,444,443,572,571,572,443,443,442,571,570,571,442,442,441,570,569,570,441,441,440,569,568,569,440,440,439,568,567,568,439,439,438,567,566,567,438,438,437,566,565,566,437,437,436,565,564,565,436,436,435,564,563,564,435,435,434,563,562,563,434,434,433,562,561,562,433,433,432,561,560,561,432,432,431,560,559,560,431,431,430,559,558,559,430,430,429,558,557,558,429,429,428,557,556,557,428,428,427,556,555,556,427,427,426,555,554,555,426,426,425,554,553,554,425,425,424,553,552,553,424,424,423,552,551,552,423,423,422,551,550,551,422,422,421,550,549,550,421,421,420,549,548,549,420,420,419,548,547,548,419,419,418,547,546,547,418,418,417,546,545,546,417,417,416,545,544,545,416,416,415,544,543,544,415,415,414,543,542,543,414,414,413,542,541,542,413,413,412,541,540,541,412,412,411,540,539,540,411,411,410,539,538,539,410,410,409,538,537,538,409,409,408,537,536,537,408,408,407,536,535,536,407,407,406,535,534,535,406,406,405,534,533,534,405,405,404,533,532,533,404,404,403,532,531,532,403,403,402,531,530,531,402,402,401,530,529,530,401,401,400,529,528,529,400,400,399,528,527,528,399,399,398,527,526,527,398,398,397,526,525,526,397,397,396,525,524,525,396,396,395,524,523,524,395,395,394,523,522,523,394,394,393,522,521,522,393,393,392,521,520,521,392,392,391,520,519,520,391,391,390,519,518,519,390,390,389,518,517,518,389,389,388,517,516,517,388,388,387,516,515,516,387,387,386,515,514,515,386,386,385,514,513,514,385,385,384,513,512,513,384,639,638,767,766,767,638,638,637,766,765,766,637,637,636,765,764,765,636,636,635,764,763,764,635,635,634,763,762,763,634,634,633,762,761,762,633,633,632,761,760,761,632,632,631,760,759,760,631,631,630,759,758,759,630,630,629,758,757,758,629,629,628,757,756,757,628,628,627,756,755,756,627,627,626,755,754,755,626,626,625,754,753,754,625,625,624,753,752,753,624,624,623,752,751,752,623,623,622,751,750,751,622,622,621,750,749,750,621,621,620,749,748,749,620,620,619,748,747,748,619,619,618,747,746,747,618,618,617,746,745,746,617,617,616,745,744,745,616,616,615,744,743,744,615,615,614,743,742,743,614,614,613,742,741,742,613,613,612,741,740,741,612,612,611,740,739,740,611,611,610,739,738,739,610,610,609,738,737,738,609,609,608,737,736,737,608,608,607,736,735,736,607,607,606,735,734,735,606,606,605,734,733,734,605,605,604,733,732,733,604,604,603,732,731,732,603,603,602,731,730,731,602,602,601,730,729,730,601,601,600,729,728,729,600,600,599,728,727,728,599,599,598,727,726,727,598,598,597,726,725,726,597,597,596,725,724,725,596,596,595,724,723,724,595,595,594,723,722,723,594,594,593,722,721,722,593,593,592,721,720,721,592,592,591,720,719,720,591,591,590,719,718,719,590,590,589,718,717,718,589,589,588,717,716,717,588,588,587,716,715,716,587,587,586,715,714,715,586,586,585,714,713,714,585,585,584,713,712,713,584,584,583,712,711,712,583,583,582,711,710,711,582,582,581,710,709,710,581,581,580,709,708,709,580,580,579,708,707,708,579,579,578,707,706,707,578,578,577,706,705,706,577,577,576,705,704,705,576,576,575,704,703,704,575,575,574,703,702,703,574,574,573,702,701,702,573,573,572,701,700,701,572,572,571,700,699,700,571,571,570,699,698,699,570,570,569,698,697,698,569,569,568,697,696,697,568,568,567,696,695,696,567,567,566,695,694,695,566,566,565,694,693,694,565,565,564,693,692,693,564,564,563,692,691,692,563,563,562,691,690,691,562,562,561,690,689,690,561,561,560,689,688,689,560,560,559,688,687,688,559,559,558,687,686,687,558,558,557,686,685,686,557,557,556,685,684,685,556,556,555,684,683,684,555,555,554,683,682,683,554,554,553,682,681,682,553,553,552,681,680,681,552,552,551,680,679,680,551,551,550,679,678,679,550,550,549,678,677,678,549,549,548,677,676,677,548,548,547,676,675,676,547,547,546,675,674,675,546,546,545,674,673,674,545,545,544,673,672,673,544,544,543,672,671,672,543,543,542,671,670,671,542,542,541,670,669,670,541,541,540,669,668,669,540,540,539,668,667,668,539,539,538,667,666,667,538,538,537,666,665,666,537,537,536,665,664,665,536,536,535,664,663,664,535,535,534,663,662,663,534,534,533,662,661,662,533,533,532,661,660,661,532,532,531,660,659,660,531,531,530,659,658,659,530,530,529,658,657,658,529,529,528,657,656,657,528,528,527,656,655,656,527,527,526,655,654,655,526,526,525,654,653,654,525,525,524,653,652,653,524,524,523,652,651,652,523,523,522,651,650,651,522,522,521,650,649,650,521,521,520,649,648,649,520,520,519,648,647,648,519,519,518,647,646,647,518,518,517,646,645,646,517,517,516,645,644,645,516,516,515,644,643,644,515,515,514,643,642,643,514,514,513,642,641,642,513,513,512,641,640,641,512,767,766,895,894,895,766,766,765,894,893,894,765,765,764,893,892,893,764,764,763,892,891,892,763,763,762,891,890,891,762,762,761,890,889,890,761,761,760,889,888,889,760,760,759,888,887,888,759,759,758,887,886,887,758,758,757,886,885,886,757,757,756,885,884,885,756,756,755,884,883,884,755,755,754,883,882,883,754,754,753,882,881,882,753,753,752,881,880,881,752,752,751,880,879,880,751,751,750,879,878,879,750,750,749,878,877,878,749,749,748,877,876,877,748,748,747,876,875,876,747,747,746,875,874,875,746,746,745,874,873,874,745,745,744,873,872,873,744,744,743,872,871,872,743,743,742,871,870,871,742,742,741,870,869,870,741,741,740,869,868,869,740,740,739,868,867,868,739,739,738,867,866,867,738,738,737,866,865,866,737,737,736,865,864,865,736,736,735,864,863,864,735,735,734,863,862,863,734,734,733,862,861,862,733,733,732,861,860,861,732,732,731,860,859,860,731,731,730,859,858,859,730,730,729,858,857,858,729,729,728,857,856,857,728,728,727,856,855,856,727,727,726,855,854,855,726,726,725,854,853,854,725,725,724,853,852,853,724,724,723,852,851,852,723,723,722,851,850,851,722,722,721,850,849,850,721,721,720,849,848,849,720,720,719,848,847,848,719,719,718,847,846,847,718,718,717,846,845,846,717,717,716,845,844,845,716,716,715,844,843,844,715,715,714,843,842,843,714,714,713,842,841,842,713,713,712,841,840,841,712,712,711,840,839,840,711,711,710,839,838,839,710,710,709,838,837,838,709,709,708,837,836,837,708,708,707,836,835,836,707,707,706,835,834,835,706,706,705,834,833,834,705,705,704,833,832,833,704,704,703,832,831,832,703,703,702,831,830,831,702,702,701,830,829,830,701,701,700,829,828,829,700,700,699,828,827,828,699,699,698,827,826,827,698,698,697,826,825,826,697,697,696,825,824,825,696,696,695,824,823,824,695,695,694,823,822,823,694,694,693,822,821,822,693,693,692,821,820,821,692,692,691,820,819,820,691,691,690,819,818,819,690,690,689,818,817,818,689,689,688,817,816,817,688,688,687,816,815,816,687,687,686,815,814,815,686,686,685,814,813,814,685,685,684,813,812,813,684,684,683,812,811,812,683,683,682,811,810,811,682,682,681,810,809,810,681,681,680,809,808,809,680,680,679,808,807,808,679,679,678,807,806,807,678,678,677,806,805,806,677,677,676,805,804,805,676,676,675,804,803,804,675,675,674,803,802,803,674,674,673,802,801,802,673,673,672,801,800,801,672,672,671,800,799,800,671,671,670,799,798,799,670,670,669,798,797,798,669,669,668,797,796,797,668,668,667,796,795,796,667,667,666,795,794,795,666,666,665,794,793,794,665,665,664,793,792,793,664,664,663,792,791,792,663,663,662,791,790,791,662,662,661,790,789,790,661,661,660,789,788,789,660,660,659,788,787,788,659,659,658,787,786,787,658,658,657,786,785,786,657,657,656,785,784,785,656,656,655,784,783,784,655,655,654,783,782,783,654,654,653,782,781,782,653,653,652,781,780,781,652,652,651,780,779,780,651,651,650,779,778,779,650,650,649,778,777,778,649,649,648,777,776,777,648,648,647,776,775,776,647,647,646,775,774,775,646,646,645,774,773,774,645,645,644,773,772,773,644,644,643,772,771,772,643,643,642,771,770,771,642,642,641,770,769,770,641,641,640,769,768,769,640,895,894,1023,1022,1023,894,894,893,1022,1021,1022,893,893,892,1021,1020,1021,892,892,891,1020,1019,1020,891,891,890,1019,1018,1019,890,890,889,1018,1017,1018,889,889,888,1017,1016,1017,888,888,887,1016,1015,1016,887,887,886,1015,1014,1015,886,886,885,1014,1013,1014,885,885,884,1013,1012,1013,884,884,883,1012,1011,1012,883,883,882,1011,1010,1011,882,882,881,1010,1009,1010,881,881,880,1009,1008,1009,880,880,879,1008,1007,1008,879,879,878,1007,1006,1007,878,878,877,1006,1005,1006,877,877,876,1005,1004,1005,876,876,875,1004,1003,1004,875,875,874,1003,1002,1003,874,874,873,1002,1001,1002,873,873,872,1001,1000,1001,872,872,871,1000,999,1000,871,871,870,999,998,999,870,870,869,998,997,998,869,869,868,997,996,997,868,868,867,996,995,996,867,867,866,995,994,995,866,866,865,994,993,994,865,865,864,993,992,993,864,864,863,992,991,992,863,863,862,991,990,991,862,862,861,990,989,990,861,861,860,989,988,989,860,860,859,988,987,988,859,859,858,987,986,987,858,858,857,986,985,986,857,857,856,985,984,985,856,856,855,984,983,984,855,855,854,983,982,983,854,854,853,982,981,982,853,853,852,981,980,981,852,852,851,980,979,980,851,851,850,979,978,979,850,850,849,978,977,978,849,849,848,977,976,977,848,848,847,976,975,976,847,847,846,975,974,975,846,846,845,974,973,974,845,845,844,973,972,973,844,844,843,972,971,972,843,843,842,971,970,971,842,842,841,970,969,970,841,841,840,969,968,969,840,840,839,968,967,968,839,839,838,967,966,967,838,838,837,966,965,966,837,837,836,965,964,965,836,836,835,964,963,964,835,835,834,963,962,963,834,834,833,962,961,962,833,833,832,961,960,961,832,832,831,960,959,960,831,831,830,959,958,959,830,830,829,958,957,958,829,829,828,957,956,957,828,828,827,956,955,956,827,827,826,955,954,955,826,826,825,954,953,954,825,825,824,953,952,953,824,824,823,952,951,952,823,823,822,951,950,951,822,822,821,950,949,950,821,821,820,949,948,949,820,820,819,948,947,948,819,819,818,947,946,947,818,818,817,946,945,946,817,817,816,945,944,945,816,816,815,944,943,944,815,815,814,943,942,943,814,814,813,942,941,942,813,813,812,941,940,941,812,812,811,940,939,940,811,811,810,939,938,939,810,810,809,938,937,938,809,809,808,937,936,937,808,808,807,936,935,936,807,807,806,935,934,935,806,806,805,934,933,934,805,805,804,933,932,933,804,804,803,932,931,932,803,803,802,931,930,931,802,802,801,930,929,930,801,801,800,929,928,929,800,800,799,928,927,928,799,799,798,927,926,927,798,798,797,926,925,926,797,797,796,925,924,925,796,796,795,924,923,924,795,795,794,923,922,923,794,794,793,922,921,922,793,793,792,921,920,921,792,792,791,920,919,920,791,791,790,919,918,919,790,790,789,918,917,918,789,789,788,917,916,917,788,788,787,916,915,916,787,787,786,915,914,915,786,786,785,914,913,914,785,785,784,913,912,913,784,784,783,912,911,912,783,783,782,911,910,911,782,782,781,910,909,910,781,781,780,909,908,909,780,780,779,908,907,908,779,779,778,907,906,907,778,778,777,906,905,906,777,777,776,905,904,905,776,776,775,904,903,904,775,775,774,903,902,903,774,774,773,902,901,902,773,773,772,901,900,901,772,772,771,900,899,900,771,771,770,899,898,899,770,770,769,898,897,898,769,769,768,897,896,897,768,1023,1022,1151,1150,1151,1022,1022,1021,1150,1149,1150,1021,1021,1020,1149,1148,1149,1020,1020,1019,1148,1147,1148,1019,1019,1018,1147,1146,1147,1018,1018,1017,1146,1145,1146,1017,1017,1016,1145,1144,1145,1016,1016,1015,1144,1143,1144,1015,1015,1014,1143,1142,1143,1014,1014,1013,1142,1141,1142,1013,1013,1012,1141,1140,1141,1012,1012,1011,1140,1139,1140,1011,1011,1010,1139,1138,1139,1010,1010,1009,1138,1137,1138,1009,1009,1008,1137,1136,1137,1008,1008,1007,1136,1135,1136,1007,1007,1006,1135,1134,1135,1006,1006,1005,1134,1133,1134,1005,1005,1004,1133,1132,1133,1004,1004,1003,1132,1131,1132,1003,1003,1002,1131,1130,1131,1002,1002,1001,1130,1129,1130,1001,1001,1000,1129,1128,1129,1000,1000,999,1128,1127,1128,999,999,998,1127,1126,1127,998,998,997,1126,1125,1126,997,997,996,1125,1124,1125,996,996,995,1124,1123,1124,995,995,994,1123,1122,1123,994,994,993,1122,1121,1122,993,993,992,1121,1120,1121,992,992,991,1120,1119,1120,991,991,990,1119,1118,1119,990,990,989,1118,1117,1118,989,989,988,1117,1116,1117,988,988,987,1116,1115,1116,987,987,986,1115,1114,1115,986,986,985,1114,1113,1114,985,985,984,1113,1112,1113,984,984,983,1112,1111,1112,983,983,982,1111,1110,1111,982,982,981,1110,1109,1110,981,981,980,1109,1108,1109,980,980,979,1108,1107,1108,979,979,978,1107,1106,1107,978,978,977,1106,1105,1106,977,977,976,1105,1104,1105,976,976,975,1104,1103,1104,975,975,974,1103,1102,1103,974,974,973,1102,1101,1102,973,973,972,1101,1100,1101,972,972,971,1100,1099,1100,971,971,970,1099,1098,1099,970,970,969,1098,1097,1098,969,969,968,1097,1096,1097,968,968,967,1096,1095,1096,967,967,966,1095,1094,1095,966,966,965,1094,1093,1094,965,965,964,1093,1092,1093,964,964,963,1092,1091,1092,963,963,962,1091,1090,1091,962,962,961,1090,1089,1090,961,961,960,1089,1088,1089,960,960,959,1088,1087,1088,959,959,958,1087,1086,1087,958,958,957,1086,1085,1086,957,957,956,1085,1084,1085,956,956,955,1084,1083,1084,955,955,954,1083,1082,1083,954,954,953,1082,1081,1082,953,953,952,1081,1080,1081,952,952,951,1080,1079,1080,951,951,950,1079,1078,1079,950,950,949,1078,1077,1078,949,949,948,1077,1076,1077,948,948,947,1076,1075,1076,947,947,946,1075,1074,1075,946,946,945,1074,1073,1074,945,945,944,1073,1072,1073,944,944,943,1072,1071,1072,943,943,942,1071,1070,1071,942,942,941,1070,1069,1070,941,941,940,1069,1068,1069,940,940,939,1068,1067,1068,939,939,938,1067,1066,1067,938,938,937,1066,1065,1066,937,937,936,1065,1064,1065,936,936,935,1064,1063,1064,935,935,934,1063,1062,1063,934,934,933,1062,1061,1062,933,933,932,1061,1060,1061,932,932,931,1060,1059,1060,931,931,930,1059,1058,1059,930,930,929,1058,1057,1058,929,929,928,1057,1056,1057,928,928,927,1056,1055,1056,927,927,926,1055,1054,1055,926,926,925,1054,1053,1054,925,925,924,1053,1052,1053,924,924,923,1052,1051,1052,923,923,922,1051,1050,1051,922,922,921,1050,1049,1050,921,921,920,1049,1048,1049,920,920,919,1048,1047,1048,919,919,918,1047,1046,1047,918,918,917,1046,1045,1046,917,917,916,1045,1044,1045,916,916,915,1044,1043,1044,915,915,914,1043,1042,1043,914,914,913,1042,1041,1042,913,913,912,1041,1040,1041,912,912,911,1040,1039,1040,911,911,910,1039,1038,1039,910,910,909,1038,1037,1038,909,909,908,1037,1036,1037,908,908,907,1036,1035,1036,907,907,906,1035,1034,1035,906,906,905,1034,1033,1034,905,905,904,1033,1032,1033,904,904,903,1032,1031,1032,903,903,902,1031,1030,1031,902,902,901,1030,1029,1030,901,901,900,1029,1028,1029,900,900,899,1028,1027,1028,899,899,898,1027,1026,1027,898,898,897,1026,1025,1026,897,897,896,1025,1024,1025,896,1151,1150,1279,1278,1279,1150,1150,1149,1278,1277,1278,1149,1149,1148,1277,1276,1277,1148,1148,1147,1276,1275,1276,1147,1147,1146,1275,1274,1275,1146,1146,1145,1274,1273,1274,1145,1145,1144,1273,1272,1273,1144,1144,1143,1272,1271,1272,1143,1143,1142,1271,1270,1271,1142,1142,1141,1270,1269,1270,1141,1141,1140,1269,1268,1269,1140,1140,1139,1268,1267,1268,1139,1139,1138,1267,1266,1267,1138,1138,1137,1266,1265,1266,1137,1137,1136,1265,1264,1265,1136,1136,1135,1264,1263,1264,1135,1135,1134,1263,1262,1263,1134,1134,1133,1262,1261,1262,1133,1133,1132,1261,1260,1261,1132,1132,1131,1260,1259,1260,1131,1131,1130,1259,1258,1259,1130,1130,1129,1258,1257,1258,1129,1129,1128,1257,1256,1257,1128,1128,1127,1256,1255,1256,1127,1127,1126,1255,1254,1255,1126,1126,1125,1254,1253,1254,1125,1125,1124,1253,1252,1253,1124,1124,1123,1252,1251,1252,1123,1123,1122,1251,1250,1251,1122,1122,1121,1250,1249,1250,1121,1121,1120,1249,1248,1249,1120,1120,1119,1248,1247,1248,1119,1119,1118,1247,1246,1247,1118,1118,1117,1246,1245,1246,1117,1117,1116,1245,1244,1245,1116,1116,1115,1244,1243,1244,1115,1115,1114,1243,1242,1243,1114,1114,1113,1242,1241,1242,1113,1113,1112,1241,1240,1241,1112,1112,1111,1240,1239,1240,1111,1111,1110,1239,1238,1239,1110,1110,1109,1238,1237,1238,1109,1109,1108,1237,1236,1237,1108,1108,1107,1236,1235,1236,1107,1107,1106,1235,1234,1235,1106,1106,1105,1234,1233,1234,1105,1105,1104,1233,1232,1233,1104,1104,1103,1232,1231,1232,1103,1103,1102,1231,1230,1231,1102,1102,1101,1230,1229,1230,1101,1101,1100,1229,1228,1229,1100,1100,1099,1228,1227,1228,1099,1099,1098,1227,1226,1227,1098,1098,1097,1226,1225,1226,1097,1097,1096,1225,1224,1225,1096,1096,1095,1224,1223,1224,1095,1095,1094,1223,1222,1223,1094,1094,1093,1222,1221,1222,1093,1093,1092,1221,1220,1221,1092,1092,1091,1220,1219,1220,1091,1091,1090,1219,1218,1219,1090,1090,1089,1218,1217,1218,1089,1089,1088,1217,1216,1217,1088,1088,1087,1216,1215,1216,1087,1087,1086,1215,1214,1215,1086,1086,1085,1214,1213,1214,1085,1085,1084,1213,1212,1213,1084,1084,1083,1212,1211,1212,1083,1083,1082,1211,1210,1211,1082,1082,1081,1210,1209,1210,1081,1081,1080,1209,1208,1209,1080,1080,1079,1208,1207,1208,1079,1079,1078,1207,1206,1207,1078,1078,1077,1206,1205,1206,1077,1077,1076,1205,1204,1205,1076,1076,1075,1204,1203,1204,1075,1075,1074,1203,1202,1203,1074,1074,1073,1202,1201,1202,1073,1073,1072,1201,1200,1201,1072,1072,1071,1200,1199,1200,1071,1071,1070,1199,1198,1199,1070,1070,1069,1198,1197,1198,1069,1069,1068,1197,1196,1197,1068,1068,1067,1196,1195,1196,1067,1067,1066,1195,1194,1195,1066,1066,1065,1194,1193,1194,1065,1065,1064,1193,1192,1193,1064,1064,1063,1192,1191,1192,1063,1063,1062,1191,1190,1191,1062,1062,1061,1190,1189,1190,1061,1061,1060,1189,1188,1189,1060,1060,1059,1188,1187,1188,1059,1059,1058,1187,1186,1187,1058,1058,1057,1186,1185,1186,1057,1057,1056,1185,1184,1185,1056,1056,1055,1184,1183,1184,1055,1055,1054,1183,1182,1183,1054,1054,1053,1182,1181,1182,1053,1053,1052,1181,1180,1181,1052,1052,1051,1180,1179,1180,1051,1051,1050,1179,1178,1179,1050,1050,1049,1178,1177,1178,1049,1049,1048,1177,1176,1177,1048,1048,1047,1176,1175,1176,1047,1047,1046,1175,1174,1175,1046,1046,1045,1174,1173,1174,1045,1045,1044,1173,1172,1173,1044,1044,1043,1172,1171,1172,1043,1043,1042,1171,1170,1171,1042,1042,1041,1170,1169,1170,1041,1041,1040,1169,1168,1169,1040,1040,1039,1168,1167,1168,1039,1039,1038,1167,1166,1167,1038,1038,1037,1166,1165,1166,1037,1037,1036,1165,1164,1165,1036,1036,1035,1164,1163,1164,1035,1035,1034,1163,1162,1163,1034,1034,1033,1162,1161,1162,1033,1033,1032,1161,1160,1161,1032,1032,1031,1160,1159,1160,1031,1031,1030,1159,1158,1159,1030,1030,1029,1158,1157,1158,1029,1029,1028,1157,1156,1157,1028,1028,1027,1156,1155,1156,1027,1027,1026,1155,1154,1155,1026,1026,1025,1154,1153,1154,1025,1025,1024,1153,1152,1153,1024,1279,1278,1407,1406,1407,1278,1278,1277,1406,1405,1406,1277,1277,1276,1405,1404,1405,1276,1276,1275,1404,1403,1404,1275,1275,1274,1403,1402,1403,1274,1274,1273,1402,1401,1402,1273,1273,1272,1401,1400,1401,1272,1272,1271,1400,1399,1400,1271,1271,1270,1399,1398,1399,1270,1270,1269,1398,1397,1398,1269,1269,1268,1397,1396,1397,1268,1268,1267,1396,1395,1396,1267,1267,1266,1395,1394,1395,1266,1266,1265,1394,1393,1394,1265,1265,1264,1393,1392,1393,1264,1264,1263,1392,1391,1392,1263,1263,1262,1391,1390,1391,1262,1262,1261,1390,1389,1390,1261,1261,1260,1389,1388,1389,1260,1260,1259,1388,1387,1388,1259,1259,1258,1387,1386,1387,1258,1258,1257,1386,1385,1386,1257,1257,1256,1385,1384,1385,1256,1256,1255,1384,1383,1384,1255,1255,1254,1383,1382,1383,1254,1254,1253,1382,1381,1382,1253,1253,1252,1381,1380,1381,1252,1252,1251,1380,1379,1380,1251,1251,1250,1379,1378,1379,1250,1250,1249,1378,1377,1378,1249,1249,1248,1377,1376,1377,1248,1248,1247,1376,1375,1376,1247,1247,1246,1375,1374,1375,1246,1246,1245,1374,1373,1374,1245,1245,1244,1373,1372,1373,1244,1244,1243,1372,1371,1372,1243,1243,1242,1371,1370,1371,1242,1242,1241,1370,1369,1370,1241,1241,1240,1369,1368,1369,1240,1240,1239,1368,1367,1368,1239,1239,1238,1367,1366,1367,1238,1238,1237,1366,1365,1366,1237,1237,1236,1365,1364,1365,1236,1236,1235,1364,1363,1364,1235,1235,1234,1363,1362,1363,1234,1234,1233,1362,1361,1362,1233,1233,1232,1361,1360,1361,1232,1232,1231,1360,1359,1360,1231,1231,1230,1359,1358,1359,1230,1230,1229,1358,1357,1358,1229,1229,1228,1357,1356,1357,1228,1228,1227,1356,1355,1356,1227,1227,1226,1355,1354,1355,1226,1226,1225,1354,1353,1354,1225,1225,1224,1353,1352,1353,1224,1224,1223,1352,1351,1352,1223,1223,1222,1351,1350,1351,1222,1222,1221,1350,1349,1350,1221,1221,1220,1349,1348,1349,1220,1220,1219,1348,1347,1348,1219,1219,1218,1347,1346,1347,1218,1218,1217,1346,1345,1346,1217,1217,1216,1345,1344,1345,1216,1216,1215,1344,1343,1344,1215,1215,1214,1343,1342,1343,1214,1214,1213,1342,1341,1342,1213,1213,1212,1341,1340,1341,1212,1212,1211,1340,1339,1340,1211,1211,1210,1339,1338,1339,1210,1210,1209,1338,1337,1338,1209,1209,1208,1337,1336,1337,1208,1208,1207,1336,1335,1336,1207,1207,1206,1335,1334,1335,1206,1206,1205,1334,1333,1334,1205,1205,1204,1333,1332,1333,1204,1204,1203,1332,1331,1332,1203,1203,1202,1331,1330,1331,1202,1202,1201,1330,1329,1330,1201,1201,1200,1329,1328,1329,1200,1200,1199,1328,1327,1328,1199,1199,1198,1327,1326,1327,1198,1198,1197,1326,1325,1326,1197,1197,1196,1325,1324,1325,1196,1196,1195,1324,1323,1324,1195,1195,1194,1323,1322,1323,1194,1194,1193,1322,1321,1322,1193,1193,1192,1321,1320,1321,1192,1192,1191,1320,1319,1320,1191,1191,1190,1319,1318,1319,1190,1190,1189,1318,1317,1318,1189,1189,1188,1317,1316,1317,1188,1188,1187,1316,1315,1316,1187,1187,1186,1315,1314,1315,1186,1186,1185,1314,1313,1314,1185,1185,1184,1313,1312,1313,1184,1184,1183,1312,1311,1312,1183,1183,1182,1311,1310,1311,1182,1182,1181,1310,1309,1310,1181,1181,1180,1309,1308,1309,1180,1180,1179,1308,1307,1308,1179,1179,1178,1307,1306,1307,1178,1178,1177,1306,1305,1306,1177,1177,1176,1305,1304,1305,1176,1176,1175,1304,1303,1304,1175,1175,1174,1303,1302,1303,1174,1174,1173,1302,1301,1302,1173,1173,1172,1301,1300,1301,1172,1172,1171,1300,1299,1300,1171,1171,1170,1299,1298,1299,1170,1170,1169,1298,1297,1298,1169,1169,1168,1297,1296,1297,1168,1168,1167,1296,1295,1296,1167,1167,1166,1295,1294,1295,1166,1166,1165,1294,1293,1294,1165,1165,1164,1293,1292,1293,1164,1164,1163,1292,1291,1292,1163,1163,1162,1291,1290,1291,1162,1162,1161,1290,1289,1290,1161,1161,1160,1289,1288,1289,1160,1160,1159,1288,1287,1288,1159,1159,1158,1287,1286,1287,1158,1158,1157,1286,1285,1286,1157,1157,1156,1285,1284,1285,1156,1156,1155,1284,1283,1284,1155,1155,1154,1283,1282,1283,1154,1154,1153,1282,1281,1282,1153,1153,1152,1281,1280,1281,1152,1407,1406,1535,1534,1535,1406,1406,1405,1534,1533,1534,1405,1405,1404,1533,1532,1533,1404,1404,1403,1532,1531,1532,1403,1403,1402,1531,1530,1531,1402,1402,1401,1530,1529,1530,1401,1401,1400,1529,1528,1529,1400,1400,1399,1528,1527,1528,1399,1399,1398,1527,1526,1527,1398,1398,1397,1526,1525,1526,1397,1397,1396,1525,1524,1525,1396,1396,1395,1524,1523,1524,1395,1395,1394,1523,1522,1523,1394,1394,1393,1522,1521,1522,1393,1393,1392,1521,1520,1521,1392,1392,1391,1520,1519,1520,1391,1391,1390,1519,1518,1519,1390,1390,1389,1518,1517,1518,1389,1389,1388,1517,1516,1517,1388,1388,1387,1516,1515,1516,1387,1387,1386,1515,1514,1515,1386,1386,1385,1514,1513,1514,1385,1385,1384,1513,1512,1513,1384,1384,1383,1512,1511,1512,1383,1383,1382,1511,1510,1511,1382,1382,1381,1510,1509,1510,1381,1381,1380,1509,1508,1509,1380,1380,1379,1508,1507,1508,1379,1379,1378,1507,1506,1507,1378,1378,1377,1506,1505,1506,1377,1377,1376,1505,1504,1505,1376,1376,1375,1504,1503,1504,1375,1375,1374,1503,1502,1503,1374,1374,1373,1502,1501,1502,1373,1373,1372,1501,1500,1501,1372,1372,1371,1500,1499,1500,1371,1371,1370,1499,1498,1499,1370,1370,1369,1498,1497,1498,1369,1369,1368,1497,1496,1497,1368,1368,1367,1496,1495,1496,1367,1367,1366,1495,1494,1495,1366,1366,1365,1494,1493,1494,1365,1365,1364,1493,1492,1493,1364,1364,1363,1492,1491,1492,1363,1363,1362,1491,1490,1491,1362,1362,1361,1490,1489,1490,1361,1361,1360,1489,1488,1489,1360,1360,1359,1488,1487,1488,1359,1359,1358,1487,1486,1487,1358,1358,1357,1486,1485,1486,1357,1357,1356,1485,1484,1485,1356,1356,1355,1484,1483,1484,1355,1355,1354,1483,1482,1483,1354,1354,1353,1482,1481,1482,1353,1353,1352,1481,1480,1481,1352,1352,1351,1480,1479,1480,1351,1351,1350,1479,1478,1479,1350,1350,1349,1478,1477,1478,1349,1349,1348,1477,1476,1477,1348,1348,1347,1476,1475,1476,1347,1347,1346,1475,1474,1475,1346,1346,1345,1474,1473,1474,1345,1345,1344,1473,1472,1473,1344,1344,1343,1472,1471,1472,1343,1343,1342,1471,1470,1471,1342,1342,1341,1470,1469,1470,1341,1341,1340,1469,1468,1469,1340,1340,1339,1468,1467,1468,1339,1339,1338,1467,1466,1467,1338,1338,1337,1466,1465,1466,1337,1337,1336,1465,1464,1465,1336,1336,1335,1464,1463,1464,1335,1335,1334,1463,1462,1463,1334,1334,1333,1462,1461,1462,1333,1333,1332,1461,1460,1461,1332,1332,1331,1460,1459,1460,1331,1331,1330,1459,1458,1459,1330,1330,1329,1458,1457,1458,1329,1329,1328,1457,1456,1457,1328,1328,1327,1456,1455,1456,1327,1327,1326,1455,1454,1455,1326,1326,1325,1454,1453,1454,1325,1325,1324,1453,1452,1453,1324,1324,1323,1452,1451,1452,1323,1323,1322,1451,1450,1451,1322,1322,1321,1450,1449,1450,1321,1321,1320,1449,1448,1449,1320,1320,1319,1448,1447,1448,1319,1319,1318,1447,1446,1447,1318,1318,1317,1446,1445,1446,1317,1317,1316,1445,1444,1445,1316,1316,1315,1444,1443,1444,1315,1315,1314,1443,1442,1443,1314,1314,1313,1442,1441,1442,1313,1313,1312,1441,1440,1441,1312,1312,1311,1440,1439,1440,1311,1311,1310,1439,1438,1439,1310,1310,1309,1438,1437,1438,1309,1309,1308,1437,1436,1437,1308,1308,1307,1436,1435,1436,1307,1307,1306,1435,1434,1435,1306,1306,1305,1434,1433,1434,1305,1305,1304,1433,1432,1433,1304,1304,1303,1432,1431,1432,1303,1303,1302,1431,1430,1431,1302,1302,1301,1430,1429,1430,1301,1301,1300,1429,1428,1429,1300,1300,1299,1428,1427,1428,1299,1299,1298,1427,1426,1427,1298,1298,1297,1426,1425,1426,1297,1297,1296,1425,1424,1425,1296,1296,1295,1424,1423,1424,1295,1295,1294,1423,1422,1423,1294,1294,1293,1422,1421,1422,1293,1293,1292,1421,1420,1421,1292,1292,1291,1420,1419,1420,1291,1291,1290,1419,1418,1419,1290,1290,1289,1418,1417,1418,1289,1289,1288,1417,1416,1417,1288,1288,1287,1416,1415,1416,1287,1287,1286,1415,1414,1415,1286,1286,1285,1414,1413,1414,1285,1285,1284,1413,1412,1413,1284,1284,1283,1412,1411,1412,1283,1283,1282,1411,1410,1411,1282,1282,1281,1410,1409,1410,1281,1281,1280,1409,1408,1409,1280,1535,1534,1663,1662,1663,1534,1534,1533,1662,1661,1662,1533,1533,1532,1661,1660,1661,1532,1532,1531,1660,1659,1660,1531,1531,1530,1659,1658,1659,1530,1530,1529,1658,1657,1658,1529,1529,1528,1657,1656,1657,1528,1528,1527,1656,1655,1656,1527,1527,1526,1655,1654,1655,1526,1526,1525,1654,1653,1654,1525,1525,1524,1653,1652,1653,1524,1524,1523,1652,1651,1652,1523,1523,1522,1651,1650,1651,1522,1522,1521,1650,1649,1650,1521,1521,1520,1649,1648,1649,1520,1520,1519,1648,1647,1648,1519,1519,1518,1647,1646,1647,1518,1518,1517,1646,1645,1646,1517,1517,1516,1645,1644,1645,1516,1516,1515,1644,1643,1644,1515,1515,1514,1643,1642,1643,1514,1514,1513,1642,1641,1642,1513,1513,1512,1641,1640,1641,1512,1512,1511,1640,1639,1640,1511,1511,1510,1639,1638,1639,1510,1510,1509,1638,1637,1638,1509,1509,1508,1637,1636,1637,1508,1508,1507,1636,1635,1636,1507,1507,1506,1635,1634,1635,1506,1506,1505,1634,1633,1634,1505,1505,1504,1633,1632,1633,1504,1504,1503,1632,1631,1632,1503,1503,1502,1631,1630,1631,1502,1502,1501,1630,1629,1630,1501,1501,1500,1629,1628,1629,1500,1500,1499,1628,1627,1628,1499,1499,1498,1627,1626,1627,1498,1498,1497,1626,1625,1626,1497,1497,1496,1625,1624,1625,1496,1496,1495,1624,1623,1624,1495,1495,1494,1623,1622,1623,1494,1494,1493,1622,1621,1622,1493,1493,1492,1621,1620,1621,1492,1492,1491,1620,1619,1620,1491,1491,1490,1619,1618,1619,1490,1490,1489,1618,1617,1618,1489,1489,1488,1617,1616,1617,1488,1488,1487,1616,1615,1616,1487,1487,1486,1615,1614,1615,1486,1486,1485,1614,1613,1614,1485,1485,1484,1613,1612,1613,1484,1484,1483,1612,1611,1612,1483,1483,1482,1611,1610,1611,1482,1482,1481,1610,1609,1610,1481,1481,1480,1609,1608,1609,1480,1480,1479,1608,1607,1608,1479,1479,1478,1607,1606,1607,1478,1478,1477,1606,1605,1606,1477,1477,1476,1605,1604,1605,1476,1476,1475,1604,1603,1604,1475,1475,1474,1603,1602,1603,1474,1474,1473,1602,1601,1602,1473,1473,1472,1601,1600,1601,1472,1472,1471,1600,1599,1600,1471,1471,1470,1599,1598,1599,1470,1470,1469,1598,1597,1598,1469,1469,1468,1597,1596,1597,1468,1468,1467,1596,1595,1596,1467,1467,1466,1595,1594,1595,1466,1466,1465,1594,1593,1594,1465,1465,1464,1593,1592,1593,1464,1464,1463,1592,1591,1592,1463,1463,1462,1591,1590,1591,1462,1462,1461,1590,1589,1590,1461,1461,1460,1589,1588,1589,1460,1460,1459,1588,1587,1588,1459,1459,1458,1587,1586,1587,1458,1458,1457,1586,1585,1586,1457,1457,1456,1585,1584,1585,1456,1456,1455,1584,1583,1584,1455,1455,1454,1583,1582,1583,1454,1454,1453,1582,1581,1582,1453,1453,1452,1581,1580,1581,1452,1452,1451,1580,1579,1580,1451,1451,1450,1579,1578,1579,1450,1450,1449,1578,1577,1578,1449,1449,1448,1577,1576,1577,1448,1448,1447,1576,1575,1576,1447,1447,1446,1575,1574,1575,1446,1446,1445,1574,1573,1574,1445,1445,1444,1573,1572,1573,1444,1444,1443,1572,1571,1572,1443,1443,1442,1571,1570,1571,1442,1442,1441,1570,1569,1570,1441,1441,1440,1569,1568,1569,1440,1440,1439,1568,1567,1568,1439,1439,1438,1567,1566,1567,1438,1438,1437,1566,1565,1566,1437,1437,1436,1565,1564,1565,1436,1436,1435,1564,1563,1564,1435,1435,1434,1563,1562,1563,1434,1434,1433,1562,1561,1562,1433,1433,1432,1561,1560,1561,1432,1432,1431,1560,1559,1560,1431,1431,1430,1559,1558,1559,1430,1430,1429,1558,1557,1558,1429,1429,1428,1557,1556,1557,1428,1428,1427,1556,1555,1556,1427,1427,1426,1555,1554,1555,1426,1426,1425,1554,1553,1554,1425,1425,1424,1553,1552,1553,1424,1424,1423,1552,1551,1552,1423,1423,1422,1551,1550,1551,1422,1422,1421,1550,1549,1550,1421,1421,1420,1549,1548,1549,1420,1420,1419,1548,1547,1548,1419,1419,1418,1547,1546,1547,1418,1418,1417,1546,1545,1546,1417,1417,1416,1545,1544,1545,1416,1416,1415,1544,1543,1544,1415,1415,1414,1543,1542,1543,1414,1414,1413,1542,1541,1542,1413,1413,1412,1541,1540,1541,1412,1412,1411,1540,1539,1540,1411,1411,1410,1539,1538,1539,1410,1410,1409,1538,1537,1538,1409,1409,1408,1537,1536,1537,1408,1663,1662,1791,1790,1791,1662,1662,1661,1790,1789,1790,1661,1661,1660,1789,1788,1789,1660,1660,1659,1788,1787,1788,1659,1659,1658,1787,1786,1787,1658,1658,1657,1786,1785,1786,1657,1657,1656,1785,1784,1785,1656,1656,1655,1784,1783,1784,1655,1655,1654,1783,1782,1783,1654,1654,1653,1782,1781,1782,1653,1653,1652,1781,1780,1781,1652,1652,1651,1780,1779,1780,1651,1651,1650,1779,1778,1779,1650,1650,1649,1778,1777,1778,1649,1649,1648,1777,1776,1777,1648,1648,1647,1776,1775,1776,1647,1647,1646,1775,1774,1775,1646,1646,1645,1774,1773,1774,1645,1645,1644,1773,1772,1773,1644,1644,1643,1772,1771,1772,1643,1643,1642,1771,1770,1771,1642,1642,1641,1770,1769,1770,1641,1641,1640,1769,1768,1769,1640,1640,1639,1768,1767,1768,1639,1639,1638,1767,1766,1767,1638,1638,1637,1766,1765,1766,1637,1637,1636,1765,1764,1765,1636,1636,1635,1764,1763,1764,1635,1635,1634,1763,1762,1763,1634,1634,1633,1762,1761,1762,1633,1633,1632,1761,1760,1761,1632,1632,1631,1760,1759,1760,1631,1631,1630,1759,1758,1759,1630,1630,1629,1758,1757,1758,1629,1629,1628,1757,1756,1757,1628,1628,1627,1756,1755,1756,1627,1627,1626,1755,1754,1755,1626,1626,1625,1754,1753,1754,1625,1625,1624,1753,1752,1753,1624,1624,1623,1752,1751,1752,1623,1623,1622,1751,1750,1751,1622,1622,1621,1750,1749,1750,1621,1621,1620,1749,1748,1749,1620,1620,1619,1748,1747,1748,1619,1619,1618,1747,1746,1747,1618,1618,1617,1746,1745,1746,1617,1617,1616,1745,1744,1745,1616,1616,1615,1744,1743,1744,1615,1615,1614,1743,1742,1743,1614,1614,1613,1742,1741,1742,1613,1613,1612,1741,1740,1741,1612,1612,1611,1740,1739,1740,1611,1611,1610,1739,1738,1739,1610,1610,1609,1738,1737,1738,1609,1609,1608,1737,1736,1737,1608,1608,1607,1736,1735,1736,1607,1607,1606,1735,1734,1735,1606,1606,1605,1734,1733,1734,1605,1605,1604,1733,1732,1733,1604,1604,1603,1732,1731,1732,1603,1603,1602,1731,1730,1731,1602,1602,1601,1730,1729,1730,1601,1601,1600,1729,1728,1729,1600,1600,1599,1728,1727,1728,1599,1599,1598,1727,1726,1727,1598,1598,1597,1726,1725,1726,1597,1597,1596,1725,1724,1725,1596,1596,1595,1724,1723,1724,1595,1595,1594,1723,1722,1723,1594,1594,1593,1722,1721,1722,1593,1593,1592,1721,1720,1721,1592,1592,1591,1720,1719,1720,1591,1591,1590,1719,1718,1719,1590,1590,1589,1718,1717,1718,1589,1589,1588,1717,1716,1717,1588,1588,1587,1716,1715,1716,1587,1587,1586,1715,1714,1715,1586,1586,1585,1714,1713,1714,1585,1585,1584,1713,1712,1713,1584,1584,1583,1712,1711,1712,1583,1583,1582,1711,1710,1711,1582,1582,1581,1710,1709,1710,1581,1581,1580,1709,1708,1709,1580,1580,1579,1708,1707,1708,1579,1579,1578,1707,1706,1707,1578,1578,1577,1706,1705,1706,1577,1577,1576,1705,1704,1705,1576,1576,1575,1704,1703,1704,1575,1575,1574,1703,1702,1703,1574,1574,1573,1702,1701,1702,1573,1573,1572,1701,1700,1701,1572,1572,1571,1700,1699,1700,1571,1571,1570,1699,1698,1699,1570,1570,1569,1698,1697,1698,1569,1569,1568,1697,1696,1697,1568,1568,1567,1696,1695,1696,1567,1567,1566,1695,1694,1695,1566,1566,1565,1694,1693,1694,1565,1565,1564,1693,1692,1693,1564,1564,1563,1692,1691,1692,1563,1563,1562,1691,1690,1691,1562,1562,1561,1690,1689,1690,1561,1561,1560,1689,1688,1689,1560,1560,1559,1688,1687,1688,1559,1559,1558,1687,1686,1687,1558,1558,1557,1686,1685,1686,1557,1557,1556,1685,1684,1685,1556,1556,1555,1684,1683,1684,1555,1555,1554,1683,1682,1683,1554,1554,1553,1682,1681,1682,1553,1553,1552,1681,1680,1681,1552,1552,1551,1680,1679,1680,1551,1551,1550,1679,1678,1679,1550,1550,1549,1678,1677,1678,1549,1549,1548,1677,1676,1677,1548,1548,1547,1676,1675,1676,1547,1547,1546,1675,1674,1675,1546,1546,1545,1674,1673,1674,1545,1545,1544,1673,1672,1673,1544,1544,1543,1672,1671,1672,1543,1543,1542,1671,1670,1671,1542,1542,1541,1670,1669,1670,1541,1541,1540,1669,1668,1669,1540,1540,1539,1668,1667,1668,1539,1539,1538,1667,1666,1667,1538,1538,1537,1666,1665,1666,1537,1537,1536,1665,1664,1665,1536,1791,1790,1919,1918,1919,1790,1790,1789,1918,1917,1918,1789,1789,1788,1917,1916,1917,1788,1788,1787,1916,1915,1916,1787,1787,1786,1915,1914,1915,1786,1786,1785,1914,1913,1914,1785,1785,1784,1913,1912,1913,1784,1784,1783,1912,1911,1912,1783,1783,1782,1911,1910,1911,1782,1782,1781,1910,1909,1910,1781,1781,1780,1909,1908,1909,1780,1780,1779,1908,1907,1908,1779,1779,1778,1907,1906,1907,1778,1778,1777,1906,1905,1906,1777,1777,1776,1905,1904,1905,1776,1776,1775,1904,1903,1904,1775,1775,1774,1903,1902,1903,1774,1774,1773,1902,1901,1902,1773,1773,1772,1901,1900,1901,1772,1772,1771,1900,1899,1900,1771,1771,1770,1899,1898,1899,1770,1770,1769,1898,1897,1898,1769,1769,1768,1897,1896,1897,1768,1768,1767,1896,1895,1896,1767,1767,1766,1895,1894,1895,1766,1766,1765,1894,1893,1894,1765,1765,1764,1893,1892,1893,1764,1764,1763,1892,1891,1892,1763,1763,1762,1891,1890,1891,1762,1762,1761,1890,1889,1890,1761,1761,1760,1889,1888,1889,1760,1760,1759,1888,1887,1888,1759,1759,1758,1887,1886,1887,1758,1758,1757,1886,1885,1886,1757,1757,1756,1885,1884,1885,1756,1756,1755,1884,1883,1884,1755,1755,1754,1883,1882,1883,1754,1754,1753,1882,1881,1882,1753,1753,1752,1881,1880,1881,1752,1752,1751,1880,1879,1880,1751,1751,1750,1879,1878,1879,1750,1750,1749,1878,1877,1878,1749,1749,1748,1877,1876,1877,1748,1748,1747,1876,1875,1876,1747,1747,1746,1875,1874,1875,1746,1746,1745,1874,1873,1874,1745,1745,1744,1873,1872,1873,1744,1744,1743,1872,1871,1872,1743,1743,1742,1871,1870,1871,1742,1742,1741,1870,1869,1870,1741,1741,1740,1869,1868,1869,1740,1740,1739,1868,1867,1868,1739,1739,1738,1867,1866,1867,1738,1738,1737,1866,1865,1866,1737,1737,1736,1865,1864,1865,1736,1736,1735,1864,1863,1864,1735,1735,1734,1863,1862,1863,1734,1734,1733,1862,1861,1862,1733,1733,1732,1861,1860,1861,1732,1732,1731,1860,1859,1860,1731,1731,1730,1859,1858,1859,1730,1730,1729,1858,1857,1858,1729,1729,1728,1857,1856,1857,1728,1728,1727,1856,1855,1856,1727,1727,1726,1855,1854,1855,1726,1726,1725,1854,1853,1854,1725,1725,1724,1853,1852,1853,1724,1724,1723,1852,1851,1852,1723,1723,1722,1851,1850,1851,1722,1722,1721,1850,1849,1850,1721,1721,1720,1849,1848,1849,1720,1720,1719,1848,1847,1848,1719,1719,1718,1847,1846,1847,1718,1718,1717,1846,1845,1846,1717,1717,1716,1845,1844,1845,1716,1716,1715,1844,1843,1844,1715,1715,1714,1843,1842,1843,1714,1714,1713,1842,1841,1842,1713,1713,1712,1841,1840,1841,1712,1712,1711,1840,1839,1840,1711,1711,1710,1839,1838,1839,1710,1710,1709,1838,1837,1838,1709,1709,1708,1837,1836,1837,1708,1708,1707,1836,1835,1836,1707,1707,1706,1835,1834,1835,1706,1706,1705,1834,1833,1834,1705,1705,1704,1833,1832,1833,1704,1704,1703,1832,1831,1832,1703,1703,1702,1831,1830,1831,1702,1702,1701,1830,1829,1830,1701,1701,1700,1829,1828,1829,1700,1700,1699,1828,1827,1828,1699,1699,1698,1827,1826,1827,1698,1698,1697,1826,1825,1826,1697,1697,1696,1825,1824,1825,1696,1696,1695,1824,1823,1824,1695,1695,1694,1823,1822,1823,1694,1694,1693,1822,1821,1822,1693,1693,1692,1821,1820,1821,1692,1692,1691,1820,1819,1820,1691,1691,1690,1819,1818,1819,1690,1690,1689,1818,1817,1818,1689,1689,1688,1817,1816,1817,1688,1688,1687,1816,1815,1816,1687,1687,1686,1815,1814,1815,1686,1686,1685,1814,1813,1814,1685,1685,1684,1813,1812,1813,1684,1684,1683,1812,1811,1812,1683,1683,1682,1811,1810,1811,1682,1682,1681,1810,1809,1810,1681,1681,1680,1809,1808,1809,1680,1680,1679,1808,1807,1808,1679,1679,1678,1807,1806,1807,1678,1678,1677,1806,1805,1806,1677,1677,1676,1805,1804,1805,1676,1676,1675,1804,1803,1804,1675,1675,1674,1803,1802,1803,1674,1674,1673,1802,1801,1802,1673,1673,1672,1801,1800,1801,1672,1672,1671,1800,1799,1800,1671,1671,1670,1799,1798,1799,1670,1670,1669,1798,1797,1798,1669,1669,1668,1797,1796,1797,1668,1668,1667,1796,1795,1796,1667,1667,1666,1795,1794,1795,1666,1666,1665,1794,1793,1794,1665,1665,1664,1793,1792,1793,1664,1919,1918,2047,2046,2047,1918,1918,1917,2046,2045,2046,1917,1917,1916,2045,2044,2045,1916,1916,1915,2044,2043,2044,1915,1915,1914,2043,2042,2043,1914,1914,1913,2042,2041,2042,1913,1913,1912,2041,2040,2041,1912,1912,1911,2040,2039,2040,1911,1911,1910,2039,2038,2039,1910,1910,1909,2038,2037,2038,1909,1909,1908,2037,2036,2037,1908,1908,1907,2036,2035,2036,1907,1907,1906,2035,2034,2035,1906,1906,1905,2034,2033,2034,1905,1905,1904,2033,2032,2033,1904,1904,1903,2032,2031,2032,1903,1903,1902,2031,2030,2031,1902,1902,1901,2030,2029,2030,1901,1901,1900,2029,2028,2029,1900,1900,1899,2028,2027,2028,1899,1899,1898,2027,2026,2027,1898,1898,1897,2026,2025,2026,1897,1897,1896,2025,2024,2025,1896,1896,1895,2024,2023,2024,1895,1895,1894,2023,2022,2023,1894,1894,1893,2022,2021,2022,1893,1893,1892,2021,2020,2021,1892,1892,1891,2020,2019,2020,1891,1891,1890,2019,2018,2019,1890,1890,1889,2018,2017,2018,1889,1889,1888,2017,2016,2017,1888,1888,1887,2016,2015,2016,1887,1887,1886,2015,2014,2015,1886,1886,1885,2014,2013,2014,1885,1885,1884,2013,2012,2013,1884,1884,1883,2012,2011,2012,1883,1883,1882,2011,2010,2011,1882,1882,1881,2010,2009,2010,1881,1881,1880,2009,2008,2009,1880,1880,1879,2008,2007,2008,1879,1879,1878,2007,2006,2007,1878,1878,1877,2006,2005,2006,1877,1877,1876,2005,2004,2005,1876,1876,1875,2004,2003,2004,1875,1875,1874,2003,2002,2003,1874,1874,1873,2002,2001,2002,1873,1873,1872,2001,2000,2001,1872,1872,1871,2000,1999,2000,1871,1871,1870,1999,1998,1999,1870,1870,1869,1998,1997,1998,1869,1869,1868,1997,1996,1997,1868,1868,1867,1996,1995,1996,1867,1867,1866,1995,1994,1995,1866,1866,1865,1994,1993,1994,1865,1865,1864,1993,1992,1993,1864,1864,1863,1992,1991,1992,1863,1863,1862,1991,1990,1991,1862,1862,1861,1990,1989,1990,1861,1861,1860,1989,1988,1989,1860,1860,1859,1988,1987,1988,1859,1859,1858,1987,1986,1987,1858,1858,1857,1986,1985,1986,1857,1857,1856,1985,1984,1985,1856,1856,1855,1984,1983,1984,1855,1855,1854,1983,1982,1983,1854,1854,1853,1982,1981,1982,1853,1853,1852,1981,1980,1981,1852,1852,1851,1980,1979,1980,1851,1851,1850,1979,1978,1979,1850,1850,1849,1978,1977,1978,1849,1849,1848,1977,1976,1977,1848,1848,1847,1976,1975,1976,1847,1847,1846,1975,1974,1975,1846,1846,1845,1974,1973,1974,1845,1845,1844,1973,1972,1973,1844,1844,1843,1972,1971,1972,1843,1843,1842,1971,1970,1971,1842,1842,1841,1970,1969,1970,1841,1841,1840,1969,1968,1969,1840,1840,1839,1968,1967,1968,1839,1839,1838,1967,1966,1967,1838,1838,1837,1966,1965,1966,1837,1837,1836,1965,1964,1965,1836,1836,1835,1964,1963,1964,1835,1835,1834,1963,1962,1963,1834,1834,1833,1962,1961,1962,1833,1833,1832,1961,1960,1961,1832,1832,1831,1960,1959,1960,1831,1831,1830,1959,1958,1959,1830,1830,1829,1958,1957,1958,1829,1829,1828,1957,1956,1957,1828,1828,1827,1956,1955,1956,1827,1827,1826,1955,1954,1955,1826,1826,1825,1954,1953,1954,1825,1825,1824,1953,1952,1953,1824,1824,1823,1952,1951,1952,1823,1823,1822,1951,1950,1951,1822,1822,1821,1950,1949,1950,1821,1821,1820,1949,1948,1949,1820,1820,1819,1948,1947,1948,1819,1819,1818,1947,1946,1947,1818,1818,1817,1946,1945,1946,1817,1817,1816,1945,1944,1945,1816,1816,1815,1944,1943,1944,1815,1815,1814,1943,1942,1943,1814,1814,1813,1942,1941,1942,1813,1813,1812,1941,1940,1941,1812,1812,1811,1940,1939,1940,1811,1811,1810,1939,1938,1939,1810,1810,1809,1938,1937,1938,1809,1809,1808,1937,1936,1937,1808,1808,1807,1936,1935,1936,1807,1807,1806,1935,1934,1935,1806,1806,1805,1934,1933,1934,1805,1805,1804,1933,1932,1933,1804,1804,1803,1932,1931,1932,1803,1803,1802,1931,1930,1931,1802,1802,1801,1930,1929,1930,1801,1801,1800,1929,1928,1929,1800,1800,1799,1928,1927,1928,1799,1799,1798,1927,1926,1927,1798,1798,1797,1926,1925,1926,1797,1797,1796,1925,1924,1925,1796,1796,1795,1924,1923,1924,1795,1795,1794,1923,1922,1923,1794,1794,1793,1922,1921,1922,1793,1793,1792,1921,1920,1921,1792,2047,2046,2175,2174,2175,2046,2046,2045,2174,2173,2174,2045,2045,2044,2173,2172,2173,2044,2044,2043,2172,2171,2172,2043,2043,2042,2171,2170,2171,2042,2042,2041,2170,2169,2170,2041,2041,2040,2169,2168,2169,2040,2040,2039,2168,2167,2168,2039,2039,2038,2167,2166,2167,2038,2038,2037,2166,2165,2166,2037,2037,2036,2165,2164,2165,2036,2036,2035,2164,2163,2164,2035,2035,2034,2163,2162,2163,2034,2034,2033,2162,2161,2162,2033,2033,2032,2161,2160,2161,2032,2032,2031,2160,2159,2160,2031,2031,2030,2159,2158,2159,2030,2030,2029,2158,2157,2158,2029,2029,2028,2157,2156,2157,2028,2028,2027,2156,2155,2156,2027,2027,2026,2155,2154,2155,2026,2026,2025,2154,2153,2154,2025,2025,2024,2153,2152,2153,2024,2024,2023,2152,2151,2152,2023,2023,2022,2151,2150,2151,2022,2022,2021,2150,2149,2150,2021,2021,2020,2149,2148,2149,2020,2020,2019,2148,2147,2148,2019,2019,2018,2147,2146,2147,2018,2018,2017,2146,2145,2146,2017,2017,2016,2145,2144,2145,2016,2016,2015,2144,2143,2144,2015,2015,2014,2143,2142,2143,2014,2014,2013,2142,2141,2142,2013,2013,2012,2141,2140,2141,2012,2012,2011,2140,2139,2140,2011,2011,2010,2139,2138,2139,2010,2010,2009,2138,2137,2138,2009,2009,2008,2137,2136,2137,2008,2008,2007,2136,2135,2136,2007,2007,2006,2135,2134,2135,2006,2006,2005,2134,2133,2134,2005,2005,2004,2133,2132,2133,2004,2004,2003,2132,2131,2132,2003,2003,2002,2131,2130,2131,2002,2002,2001,2130,2129,2130,2001,2001,2000,2129,2128,2129,2000,2000,1999,2128,2127,2128,1999,1999,1998,2127,2126,2127,1998,1998,1997,2126,2125,2126,1997,1997,1996,2125,2124,2125,1996,1996,1995,2124,2123,2124,1995,1995,1994,2123,2122,2123,1994,1994,1993,2122,2121,2122,1993,1993,1992,2121,2120,2121,1992,1992,1991,2120,2119,2120,1991,1991,1990,2119,2118,2119,1990,1990,1989,2118,2117,2118,1989,1989,1988,2117,2116,2117,1988,1988,1987,2116,2115,2116,1987,1987,1986,2115,2114,2115,1986,1986,1985,2114,2113,2114,1985,1985,1984,2113,2112,2113,1984,1984,1983,2112,2111,2112,1983,1983,1982,2111,2110,2111,1982,1982,1981,2110,2109,2110,1981,1981,1980,2109,2108,2109,1980,1980,1979,2108,2107,2108,1979,1979,1978,2107,2106,2107,1978,1978,1977,2106,2105,2106,1977,1977,1976,2105,2104,2105,1976,1976,1975,2104,2103,2104,1975,1975,1974,2103,2102,2103,1974,1974,1973,2102,2101,2102,1973,1973,1972,2101,2100,2101,1972,1972,1971,2100,2099,2100,1971,1971,1970,2099,2098,2099,1970,1970,1969,2098,2097,2098,1969,1969,1968,2097,2096,2097,1968,1968,1967,2096,2095,2096,1967,1967,1966,2095,2094,2095,1966,1966,1965,2094,2093,2094,1965,1965,1964,2093,2092,2093,1964,1964,1963,2092,2091,2092,1963,1963,1962,2091,2090,2091,1962,1962,1961,2090,2089,2090,1961,1961,1960,2089,2088,2089,1960,1960,1959,2088,2087,2088,1959,1959,1958,2087,2086,2087,1958,1958,1957,2086,2085,2086,1957,1957,1956,2085,2084,2085,1956,1956,1955,2084,2083,2084,1955,1955,1954,2083,2082,2083,1954,1954,1953,2082,2081,2082,1953,1953,1952,2081,2080,2081,1952,1952,1951,2080,2079,2080,1951,1951,1950,2079,2078,2079,1950,1950,1949,2078,2077,2078,1949,1949,1948,2077,2076,2077,1948,1948,1947,2076,2075,2076,1947,1947,1946,2075,2074,2075,1946,1946,1945,2074,2073,2074,1945,1945,1944,2073,2072,2073,1944,1944,1943,2072,2071,2072,1943,1943,1942,2071,2070,2071,1942,1942,1941,2070,2069,2070,1941,1941,1940,2069,2068,2069,1940,1940,1939,2068,2067,2068,1939,1939,1938,2067,2066,2067,1938,1938,1937,2066,2065,2066,1937,1937,1936,2065,2064,2065,1936,1936,1935,2064,2063,2064,1935,1935,1934,2063,2062,2063,1934,1934,1933,2062,2061,2062,1933,1933,1932,2061,2060,2061,1932,1932,1931,2060,2059,2060,1931,1931,1930,2059,2058,2059,1930,1930,1929,2058,2057,2058,1929,1929,1928,2057,2056,2057,1928,1928,1927,2056,2055,2056,1927,1927,1926,2055,2054,2055,1926,1926,1925,2054,2053,2054,1925,1925,1924,2053,2052,2053,1924,1924,1923,2052,2051,2052,1923,1923,1922,2051,2050,2051,1922,1922,1921,2050,2049,2050,1921,1921,1920,2049,2048,2049,1920,2175,2174,2303,2302,2303,2174,2174,2173,2302,2301,2302,2173,2173,2172,2301,2300,2301,2172,2172,2171,2300,2299,2300,2171,2171,2170,2299,2298,2299,2170,2170,2169,2298,2297,2298,2169,2169,2168,2297,2296,2297,2168,2168,2167,2296,2295,2296,2167,2167,2166,2295,2294,2295,2166,2166,2165,2294,2293,2294,2165,2165,2164,2293,2292,2293,2164,2164,2163,2292,2291,2292,2163,2163,2162,2291,2290,2291,2162,2162,2161,2290,2289,2290,2161,2161,2160,2289,2288,2289,2160,2160,2159,2288,2287,2288,2159,2159,2158,2287,2286,2287,2158,2158,2157,2286,2285,2286,2157,2157,2156,2285,2284,2285,2156,2156,2155,2284,2283,2284,2155,2155,2154,2283,2282,2283,2154,2154,2153,2282,2281,2282,2153,2153,2152,2281,2280,2281,2152,2152,2151,2280,2279,2280,2151,2151,2150,2279,2278,2279,2150,2150,2149,2278,2277,2278,2149,2149,2148,2277,2276,2277,2148,2148,2147,2276,2275,2276,2147,2147,2146,2275,2274,2275,2146,2146,2145,2274,2273,2274,2145,2145,2144,2273,2272,2273,2144,2144,2143,2272,2271,2272,2143,2143,2142,2271,2270,2271,2142,2142,2141,2270,2269,2270,2141,2141,2140,2269,2268,2269,2140,2140,2139,2268,2267,2268,2139,2139,2138,2267,2266,2267,2138,2138,2137,2266,2265,2266,2137,2137,2136,2265,2264,2265,2136,2136,2135,2264,2263,2264,2135,2135,2134,2263,2262,2263,2134,2134,2133,2262,2261,2262,2133,2133,2132,2261,2260,2261,2132,2132,2131,2260,2259,2260,2131,2131,2130,2259,2258,2259,2130,2130,2129,2258,2257,2258,2129,2129,2128,2257,2256,2257,2128,2128,2127,2256,2255,2256,2127,2127,2126,2255,2254,2255,2126,2126,2125,2254,2253,2254,2125,2125,2124,2253,2252,2253,2124,2124,2123,2252,2251,2252,2123,2123,2122,2251,2250,2251,2122,2122,2121,2250,2249,2250,2121,2121,2120,2249,2248,2249,2120,2120,2119,2248,2247,2248,2119,2119,2118,2247,2246,2247,2118,2118,2117,2246,2245,2246,2117,2117,2116,2245,2244,2245,2116,2116,2115,2244,2243,2244,2115,2115,2114,2243,2242,2243,2114,2114,2113,2242,2241,2242,2113,2113,2112,2241,2240,2241,2112,2112,2111,2240,2239,2240,2111,2111,2110,2239,2238,2239,2110,2110,2109,2238,2237,2238,2109,2109,2108,2237,2236,2237,2108,2108,2107,2236,2235,2236,2107,2107,2106,2235,2234,2235,2106,2106,2105,2234,2233,2234,2105,2105,2104,2233,2232,2233,2104,2104,2103,2232,2231,2232,2103,2103,2102,2231,2230,2231,2102,2102,2101,2230,2229,2230,2101,2101,2100,2229,2228,2229,2100,2100,2099,2228,2227,2228,2099,2099,2098,2227,2226,2227,2098,2098,2097,2226,2225,2226,2097,2097,2096,2225,2224,2225,2096,2096,2095,2224,2223,2224,2095,2095,2094,2223,2222,2223,2094,2094,2093,2222,2221,2222,2093,2093,2092,2221,2220,2221,2092,2092,2091,2220,2219,2220,2091,2091,2090,2219,2218,2219,2090,2090,2089,2218,2217,2218,2089,2089,2088,2217,2216,2217,2088,2088,2087,2216,2215,2216,2087,2087,2086,2215,2214,2215,2086,2086,2085,2214,2213,2214,2085,2085,2084,2213,2212,2213,2084,2084,2083,2212,2211,2212,2083,2083,2082,2211,2210,2211,2082,2082,2081,2210,2209,2210,2081,2081,2080,2209,2208,2209,2080,2080,2079,2208,2207,2208,2079,2079,2078,2207,2206,2207,2078,2078,2077,2206,2205,2206,2077,2077,2076,2205,2204,2205,2076,2076,2075,2204,2203,2204,2075,2075,2074,2203,2202,2203,2074,2074,2073,2202,2201,2202,2073,2073,2072,2201,2200,2201,2072,2072,2071,2200,2199,2200,2071,2071,2070,2199,2198,2199,2070,2070,2069,2198,2197,2198,2069,2069,2068,2197,2196,2197,2068,2068,2067,2196,2195,2196,2067,2067,2066,2195,2194,2195,2066,2066,2065,2194,2193,2194,2065,2065,2064,2193,2192,2193,2064,2064,2063,2192,2191,2192,2063,2063,2062,2191,2190,2191,2062,2062,2061,2190,2189,2190,2061,2061,2060,2189,2188,2189,2060,2060,2059,2188,2187,2188,2059,2059,2058,2187,2186,2187,2058,2058,2057,2186,2185,2186,2057,2057,2056,2185,2184,2185,2056,2056,2055,2184,2183,2184,2055,2055,2054,2183,2182,2183,2054,2054,2053,2182,2181,2182,2053,2053,2052,2181,2180,2181,2052,2052,2051,2180,2179,2180,2051,2051,2050,2179,2178,2179,2050,2050,2049,2178,2177,2178,2049,2049,2048,2177,2176,2177,2048,2303,2302,2431,2430,2431,2302,2302,2301,2430,2429,2430,2301,2301,2300,2429,2428,2429,2300,2300,2299,2428,2427,2428,2299,2299,2298,2427,2426,2427,2298,2298,2297,2426,2425,2426,2297,2297,2296,2425,2424,2425,2296,2296,2295,2424,2423,2424,2295,2295,2294,2423,2422,2423,2294,2294,2293,2422,2421,2422,2293,2293,2292,2421,2420,2421,2292,2292,2291,2420,2419,2420,2291,2291,2290,2419,2418,2419,2290,2290,2289,2418,2417,2418,2289,2289,2288,2417,2416,2417,2288,2288,2287,2416,2415,2416,2287,2287,2286,2415,2414,2415,2286,2286,2285,2414,2413,2414,2285,2285,2284,2413,2412,2413,2284,2284,2283,2412,2411,2412,2283,2283,2282,2411,2410,2411,2282,2282,2281,2410,2409,2410,2281,2281,2280,2409,2408,2409,2280,2280,2279,2408,2407,2408,2279,2279,2278,2407,2406,2407,2278,2278,2277,2406,2405,2406,2277,2277,2276,2405,2404,2405,2276,2276,2275,2404,2403,2404,2275,2275,2274,2403,2402,2403,2274,2274,2273,2402,2401,2402,2273,2273,2272,2401,2400,2401,2272,2272,2271,2400,2399,2400,2271,2271,2270,2399,2398,2399,2270,2270,2269,2398,2397,2398,2269,2269,2268,2397,2396,2397,2268,2268,2267,2396,2395,2396,2267,2267,2266,2395,2394,2395,2266,2266,2265,2394,2393,2394,2265,2265,2264,2393,2392,2393,2264,2264,2263,2392,2391,2392,2263,2263,2262,2391,2390,2391,2262,2262,2261,2390,2389,2390,2261,2261,2260,2389,2388,2389,2260,2260,2259,2388,2387,2388,2259,2259,2258,2387,2386,2387,2258,2258,2257,2386,2385,2386,2257,2257,2256,2385,2384,2385,2256,2256,2255,2384,2383,2384,2255,2255,2254,2383,2382,2383,2254,2254,2253,2382,2381,2382,2253,2253,2252,2381,2380,2381,2252,2252,2251,2380,2379,2380,2251,2251,2250,2379,2378,2379,2250,2250,2249,2378,2377,2378,2249,2249,2248,2377,2376,2377,2248,2248,2247,2376,2375,2376,2247,2247,2246,2375,2374,2375,2246,2246,2245,2374,2373,2374,2245,2245,2244,2373,2372,2373,2244,2244,2243,2372,2371,2372,2243,2243,2242,2371,2370,2371,2242,2242,2241,2370,2369,2370,2241,2241,2240,2369,2368,2369,2240,2240,2239,2368,2367,2368,2239,2239,2238,2367,2366,2367,2238,2238,2237,2366,2365,2366,2237,2237,2236,2365,2364,2365,2236,2236,2235,2364,2363,2364,2235,2235,2234,2363,2362,2363,2234,2234,2233,2362,2361,2362,2233,2233,2232,2361,2360,2361,2232,2232,2231,2360,2359,2360,2231,2231,2230,2359,2358,2359,2230,2230,2229,2358,2357,2358,2229,2229,2228,2357,2356,2357,2228,2228,2227,2356,2355,2356,2227,2227,2226,2355,2354,2355,2226,2226,2225,2354,2353,2354,2225,2225,2224,2353,2352,2353,2224,2224,2223,2352,2351,2352,2223,2223,2222,2351,2350,2351,2222,2222,2221,2350,2349,2350,2221,2221,2220,2349,2348,2349,2220,2220,2219,2348,2347,2348,2219,2219,2218,2347,2346,2347,2218,2218,2217,2346,2345,2346,2217,2217,2216,2345,2344,2345,2216,2216,2215,2344,2343,2344,2215,2215,2214,2343,2342,2343,2214,2214,2213,2342,2341,2342,2213,2213,2212,2341,2340,2341,2212,2212,2211,2340,2339,2340,2211,2211,2210,2339,2338,2339,2210,2210,2209,2338,2337,2338,2209,2209,2208,2337,2336,2337,2208,2208,2207,2336,2335,2336,2207,2207,2206,2335,2334,2335,2206,2206,2205,2334,2333,2334,2205,2205,2204,2333,2332,2333,2204,2204,2203,2332,2331,2332,2203,2203,2202,2331,2330,2331,2202,2202,2201,2330,2329,2330,2201,2201,2200,2329,2328,2329,2200,2200,2199,2328,2327,2328,2199,2199,2198,2327,2326,2327,2198,2198,2197,2326,2325,2326,2197,2197,2196,2325,2324,2325,2196,2196,2195,2324,2323,2324,2195,2195,2194,2323,2322,2323,2194,2194,2193,2322,2321,2322,2193,2193,2192,2321,2320,2321,2192,2192,2191,2320,2319,2320,2191,2191,2190,2319,2318,2319,2190,2190,2189,2318,2317,2318,2189,2189,2188,2317,2316,2317,2188,2188,2187,2316,2315,2316,2187,2187,2186,2315,2314,2315,2186,2186,2185,2314,2313,2314,2185,2185,2184,2313,2312,2313,2184,2184,2183,2312,2311,2312,2183,2183,2182,2311,2310,2311,2182,2182,2181,2310,2309,2310,2181,2181,2180,2309,2308,2309,2180,2180,2179,2308,2307,2308,2179,2179,2178,2307,2306,2307,2178,2178,2177,2306,2305,2306,2177,2177,2176,2305,2304,2305,2176,2431,2430,2559,2558,2559,2430,2430,2429,2558,2557,2558,2429,2429,2428,2557,2556,2557,2428,2428,2427,2556,2555,2556,2427,2427,2426,2555,2554,2555,2426,2426,2425,2554,2553,2554,2425,2425,2424,2553,2552,2553,2424,2424,2423,2552,2551,2552,2423,2423,2422,2551,2550,2551,2422,2422,2421,2550,2549,2550,2421,2421,2420,2549,2548,2549,2420,2420,2419,2548,2547,2548,2419,2419,2418,2547,2546,2547,2418,2418,2417,2546,2545,2546,2417,2417,2416,2545,2544,2545,2416,2416,2415,2544,2543,2544,2415,2415,2414,2543,2542,2543,2414,2414,2413,2542,2541,2542,2413,2413,2412,2541,2540,2541,2412,2412,2411,2540,2539,2540,2411,2411,2410,2539,2538,2539,2410,2410,2409,2538,2537,2538,2409,2409,2408,2537,2536,2537,2408,2408,2407,2536,2535,2536,2407,2407,2406,2535,2534,2535,2406,2406,2405,2534,2533,2534,2405,2405,2404,2533,2532,2533,2404,2404,2403,2532,2531,2532,2403,2403,2402,2531,2530,2531,2402,2402,2401,2530,2529,2530,2401,2401,2400,2529,2528,2529,2400,2400,2399,2528,2527,2528,2399,2399,2398,2527,2526,2527,2398,2398,2397,2526,2525,2526,2397,2397,2396,2525,2524,2525,2396,2396,2395,2524,2523,2524,2395,2395,2394,2523,2522,2523,2394,2394,2393,2522,2521,2522,2393,2393,2392,2521,2520,2521,2392,2392,2391,2520,2519,2520,2391,2391,2390,2519,2518,2519,2390,2390,2389,2518,2517,2518,2389,2389,2388,2517,2516,2517,2388,2388,2387,2516,2515,2516,2387,2387,2386,2515,2514,2515,2386,2386,2385,2514,2513,2514,2385,2385,2384,2513,2512,2513,2384,2384,2383,2512,2511,2512,2383,2383,2382,2511,2510,2511,2382,2382,2381,2510,2509,2510,2381,2381,2380,2509,2508,2509,2380,2380,2379,2508,2507,2508,2379,2379,2378,2507,2506,2507,2378,2378,2377,2506,2505,2506,2377,2377,2376,2505,2504,2505,2376,2376,2375,2504,2503,2504,2375,2375,2374,2503,2502,2503,2374,2374,2373,2502,2501,2502,2373,2373,2372,2501,2500,2501,2372,2372,2371,2500,2499,2500,2371,2371,2370,2499,2498,2499,2370,2370,2369,2498,2497,2498,2369,2369,2368,2497,2496,2497,2368,2368,2367,2496,2495,2496,2367,2367,2366,2495,2494,2495,2366,2366,2365,2494,2493,2494,2365,2365,2364,2493,2492,2493,2364,2364,2363,2492,2491,2492,2363,2363,2362,2491,2490,2491,2362,2362,2361,2490,2489,2490,2361,2361,2360,2489,2488,2489,2360,2360,2359,2488,2487,2488,2359,2359,2358,2487,2486,2487,2358,2358,2357,2486,2485,2486,2357,2357,2356,2485,2484,2485,2356,2356,2355,2484,2483,2484,2355,2355,2354,2483,2482,2483,2354,2354,2353,2482,2481,2482,2353,2353,2352,2481,2480,2481,2352,2352,2351,2480,2479,2480,2351,2351,2350,2479,2478,2479,2350,2350,2349,2478,2477,2478,2349,2349,2348,2477,2476,2477,2348,2348,2347,2476,2475,2476,2347,2347,2346,2475,2474,2475,2346,2346,2345,2474,2473,2474,2345,2345,2344,2473,2472,2473,2344,2344,2343,2472,2471,2472,2343,2343,2342,2471,2470,2471,2342,2342,2341,2470,2469,2470,2341,2341,2340,2469,2468,2469,2340,2340,2339,2468,2467,2468,2339,2339,2338,2467,2466,2467,2338,2338,2337,2466,2465,2466,2337,2337,2336,2465,2464,2465,2336,2336,2335,2464,2463,2464,2335,2335,2334,2463,2462,2463,2334,2334,2333,2462,2461,2462,2333,2333,2332,2461,2460,2461,2332,2332,2331,2460,2459,2460,2331,2331,2330,2459,2458,2459,2330,2330,2329,2458,2457,2458,2329,2329,2328,2457,2456,2457,2328,2328,2327,2456,2455,2456,2327,2327,2326,2455,2454,2455,2326,2326,2325,2454,2453,2454,2325,2325,2324,2453,2452,2453,2324,2324,2323,2452,2451,2452,2323,2323,2322,2451,2450,2451,2322,2322,2321,2450,2449,2450,2321,2321,2320,2449,2448,2449,2320,2320,2319,2448,2447,2448,2319,2319,2318,2447,2446,2447,2318,2318,2317,2446,2445,2446,2317,2317,2316,2445,2444,2445,2316,2316,2315,2444,2443,2444,2315,2315,2314,2443,2442,2443,2314,2314,2313,2442,2441,2442,2313,2313,2312,2441,2440,2441,2312,2312,2311,2440,2439,2440,2311,2311,2310,2439,2438,2439,2310,2310,2309,2438,2437,2438,2309,2309,2308,2437,2436,2437,2308,2308,2307,2436,2435,2436,2307,2307,2306,2435,2434,2435,2306,2306,2305,2434,2433,2434,2305,2305,2304,2433,2432,2433,2304,2559,2558,2687,2686,2687,2558,2558,2557,2686,2685,2686,2557,2557,2556,2685,2684,2685,2556,2556,2555,2684,2683,2684,2555,2555,2554,2683,2682,2683,2554,2554,2553,2682,2681,2682,2553,2553,2552,2681,2680,2681,2552,2552,2551,2680,2679,2680,2551,2551,2550,2679,2678,2679,2550,2550,2549,2678,2677,2678,2549,2549,2548,2677,2676,2677,2548,2548,2547,2676,2675,2676,2547,2547,2546,2675,2674,2675,2546,2546,2545,2674,2673,2674,2545,2545,2544,2673,2672,2673,2544,2544,2543,2672,2671,2672,2543,2543,2542,2671,2670,2671,2542,2542,2541,2670,2669,2670,2541,2541,2540,2669,2668,2669,2540,2540,2539,2668,2667,2668,2539,2539,2538,2667,2666,2667,2538,2538,2537,2666,2665,2666,2537,2537,2536,2665,2664,2665,2536,2536,2535,2664,2663,2664,2535,2535,2534,2663,2662,2663,2534,2534,2533,2662,2661,2662,2533,2533,2532,2661,2660,2661,2532,2532,2531,2660,2659,2660,2531,2531,2530,2659,2658,2659,2530,2530,2529,2658,2657,2658,2529,2529,2528,2657,2656,2657,2528,2528,2527,2656,2655,2656,2527,2527,2526,2655,2654,2655,2526,2526,2525,2654,2653,2654,2525,2525,2524,2653,2652,2653,2524,2524,2523,2652,2651,2652,2523,2523,2522,2651,2650,2651,2522,2522,2521,2650,2649,2650,2521,2521,2520,2649,2648,2649,2520,2520,2519,2648,2647,2648,2519,2519,2518,2647,2646,2647,2518,2518,2517,2646,2645,2646,2517,2517,2516,2645,2644,2645,2516,2516,2515,2644,2643,2644,2515,2515,2514,2643,2642,2643,2514,2514,2513,2642,2641,2642,2513,2513,2512,2641,2640,2641,2512,2512,2511,2640,2639,2640,2511,2511,2510,2639,2638,2639,2510,2510,2509,2638,2637,2638,2509,2509,2508,2637,2636,2637,2508,2508,2507,2636,2635,2636,2507,2507,2506,2635,2634,2635,2506,2506,2505,2634,2633,2634,2505,2505,2504,2633,2632,2633,2504,2504,2503,2632,2631,2632,2503,2503,2502,2631,2630,2631,2502,2502,2501,2630,2629,2630,2501,2501,2500,2629,2628,2629,2500,2500,2499,2628,2627,2628,2499,2499,2498,2627,2626,2627,2498,2498,2497,2626,2625,2626,2497,2497,2496,2625,2624,2625,2496,2496,2495,2624,2623,2624,2495,2495,2494,2623,2622,2623,2494,2494,2493,2622,2621,2622,2493,2493,2492,2621,2620,2621,2492,2492,2491,2620,2619,2620,2491,2491,2490,2619,2618,2619,2490,2490,2489,2618,2617,2618,2489,2489,2488,2617,2616,2617,2488,2488,2487,2616,2615,2616,2487,2487,2486,2615,2614,2615,2486,2486,2485,2614,2613,2614,2485,2485,2484,2613,2612,2613,2484,2484,2483,2612,2611,2612,2483,2483,2482,2611,2610,2611,2482,2482,2481,2610,2609,2610,2481,2481,2480,2609,2608,2609,2480,2480,2479,2608,2607,2608,2479,2479,2478,2607,2606,2607,2478,2478,2477,2606,2605,2606,2477,2477,2476,2605,2604,2605,2476,2476,2475,2604,2603,2604,2475,2475,2474,2603,2602,2603,2474,2474,2473,2602,2601,2602,2473,2473,2472,2601,2600,2601,2472,2472,2471,2600,2599,2600,2471,2471,2470,2599,2598,2599,2470,2470,2469,2598,2597,2598,2469,2469,2468,2597,2596,2597,2468,2468,2467,2596,2595,2596,2467,2467,2466,2595,2594,2595,2466,2466,2465,2594,2593,2594,2465,2465,2464,2593,2592,2593,2464,2464,2463,2592,2591,2592,2463,2463,2462,2591,2590,2591,2462,2462,2461,2590,2589,2590,2461,2461,2460,2589,2588,2589,2460,2460,2459,2588,2587,2588,2459,2459,2458,2587,2586,2587,2458,2458,2457,2586,2585,2586,2457,2457,2456,2585,2584,2585,2456,2456,2455,2584,2583,2584,2455,2455,2454,2583,2582,2583,2454,2454,2453,2582,2581,2582,2453,2453,2452,2581,2580,2581,2452,2452,2451,2580,2579,2580,2451,2451,2450,2579,2578,2579,2450,2450,2449,2578,2577,2578,2449,2449,2448,2577,2576,2577,2448,2448,2447,2576,2575,2576,2447,2447,2446,2575,2574,2575,2446,2446,2445,2574,2573,2574,2445,2445,2444,2573,2572,2573,2444,2444,2443,2572,2571,2572,2443,2443,2442,2571,2570,2571,2442,2442,2441,2570,2569,2570,2441,2441,2440,2569,2568,2569,2440,2440,2439,2568,2567,2568,2439,2439,2438,2567,2566,2567,2438,2438,2437,2566,2565,2566,2437,2437,2436,2565,2564,2565,2436,2436,2435,2564,2563,2564,2435,2435,2434,2563,2562,2563,2434,2434,2433,2562,2561,2562,2433,2433,2432,2561,2560,2561,2432,2687,2686,2815,2814,2815,2686,2686,2685,2814,2813,2814,2685,2685,2684,2813,2812,2813,2684,2684,2683,2812,2811,2812,2683,2683,2682,2811,2810,2811,2682,2682,2681,2810,2809,2810,2681,2681,2680,2809,2808,2809,2680,2680,2679,2808,2807,2808,2679,2679,2678,2807,2806,2807,2678,2678,2677,2806,2805,2806,2677,2677,2676,2805,2804,2805,2676,2676,2675,2804,2803,2804,2675,2675,2674,2803,2802,2803,2674,2674,2673,2802,2801,2802,2673,2673,2672,2801,2800,2801,2672,2672,2671,2800,2799,2800,2671,2671,2670,2799,2798,2799,2670,2670,2669,2798,2797,2798,2669,2669,2668,2797,2796,2797,2668,2668,2667,2796,2795,2796,2667,2667,2666,2795,2794,2795,2666,2666,2665,2794,2793,2794,2665,2665,2664,2793,2792,2793,2664,2664,2663,2792,2791,2792,2663,2663,2662,2791,2790,2791,2662,2662,2661,2790,2789,2790,2661,2661,2660,2789,2788,2789,2660,2660,2659,2788,2787,2788,2659,2659,2658,2787,2786,2787,2658,2658,2657,2786,2785,2786,2657,2657,2656,2785,2784,2785,2656,2656,2655,2784,2783,2784,2655,2655,2654,2783,2782,2783,2654,2654,2653,2782,2781,2782,2653,2653,2652,2781,2780,2781,2652,2652,2651,2780,2779,2780,2651,2651,2650,2779,2778,2779,2650,2650,2649,2778,2777,2778,2649,2649,2648,2777,2776,2777,2648,2648,2647,2776,2775,2776,2647,2647,2646,2775,2774,2775,2646,2646,2645,2774,2773,2774,2645,2645,2644,2773,2772,2773,2644,2644,2643,2772,2771,2772,2643,2643,2642,2771,2770,2771,2642,2642,2641,2770,2769,2770,2641,2641,2640,2769,2768,2769,2640,2640,2639,2768,2767,2768,2639,2639,2638,2767,2766,2767,2638,2638,2637,2766,2765,2766,2637,2637,2636,2765,2764,2765,2636,2636,2635,2764,2763,2764,2635,2635,2634,2763,2762,2763,2634,2634,2633,2762,2761,2762,2633,2633,2632,2761,2760,2761,2632,2632,2631,2760,2759,2760,2631,2631,2630,2759,2758,2759,2630,2630,2629,2758,2757,2758,2629,2629,2628,2757,2756,2757,2628,2628,2627,2756,2755,2756,2627,2627,2626,2755,2754,2755,2626,2626,2625,2754,2753,2754,2625,2625,2624,2753,2752,2753,2624,2624,2623,2752,2751,2752,2623,2623,2622,2751,2750,2751,2622,2622,2621,2750,2749,2750,2621,2621,2620,2749,2748,2749,2620,2620,2619,2748,2747,2748,2619,2619,2618,2747,2746,2747,2618,2618,2617,2746,2745,2746,2617,2617,2616,2745,2744,2745,2616,2616,2615,2744,2743,2744,2615,2615,2614,2743,2742,2743,2614,2614,2613,2742,2741,2742,2613,2613,2612,2741,2740,2741,2612,2612,2611,2740,2739,2740,2611,2611,2610,2739,2738,2739,2610,2610,2609,2738,2737,2738,2609,2609,2608,2737,2736,2737,2608,2608,2607,2736,2735,2736,2607,2607,2606,2735,2734,2735,2606,2606,2605,2734,2733,2734,2605,2605,2604,2733,2732,2733,2604,2604,2603,2732,2731,2732,2603,2603,2602,2731,2730,2731,2602,2602,2601,2730,2729,2730,2601,2601,2600,2729,2728,2729,2600,2600,2599,2728,2727,2728,2599,2599,2598,2727,2726,2727,2598,2598,2597,2726,2725,2726,2597,2597,2596,2725,2724,2725,2596,2596,2595,2724,2723,2724,2595,2595,2594,2723,2722,2723,2594,2594,2593,2722,2721,2722,2593,2593,2592,2721,2720,2721,2592,2592,2591,2720,2719,2720,2591,2591,2590,2719,2718,2719,2590,2590,2589,2718,2717,2718,2589,2589,2588,2717,2716,2717,2588,2588,2587,2716,2715,2716,2587,2587,2586,2715,2714,2715,2586,2586,2585,2714,2713,2714,2585,2585,2584,2713,2712,2713,2584,2584,2583,2712,2711,2712,2583,2583,2582,2711,2710,2711,2582,2582,2581,2710,2709,2710,2581,2581,2580,2709,2708,2709,2580,2580,2579,2708,2707,2708,2579,2579,2578,2707,2706,2707,2578,2578,2577,2706,2705,2706,2577,2577,2576,2705,2704,2705,2576,2576,2575,2704,2703,2704,2575,2575,2574,2703,2702,2703,2574,2574,2573,2702,2701,2702,2573,2573,2572,2701,2700,2701,2572,2572,2571,2700,2699,2700,2571,2571,2570,2699,2698,2699,2570,2570,2569,2698,2697,2698,2569,2569,2568,2697,2696,2697,2568,2568,2567,2696,2695,2696,2567,2567,2566,2695,2694,2695,2566,2566,2565,2694,2693,2694,2565,2565,2564,2693,2692,2693,2564,2564,2563,2692,2691,2692,2563,2563,2562,2691,2690,2691,2562,2562,2561,2690,2689,2690,2561,2561,2560,2689,2688,2689,2560,2815,2814,2943,2942,2943,2814,2814,2813,2942,2941,2942,2813,2813,2812,2941,2940,2941,2812,2812,2811,2940,2939,2940,2811,2811,2810,2939,2938,2939,2810,2810,2809,2938,2937,2938,2809,2809,2808,2937,2936,2937,2808,2808,2807,2936,2935,2936,2807,2807,2806,2935,2934,2935,2806,2806,2805,2934,2933,2934,2805,2805,2804,2933,2932,2933,2804,2804,2803,2932,2931,2932,2803,2803,2802,2931,2930,2931,2802,2802,2801,2930,2929,2930,2801,2801,2800,2929,2928,2929,2800,2800,2799,2928,2927,2928,2799,2799,2798,2927,2926,2927,2798,2798,2797,2926,2925,2926,2797,2797,2796,2925,2924,2925,2796,2796,2795,2924,2923,2924,2795,2795,2794,2923,2922,2923,2794,2794,2793,2922,2921,2922,2793,2793,2792,2921,2920,2921,2792,2792,2791,2920,2919,2920,2791,2791,2790,2919,2918,2919,2790,2790,2789,2918,2917,2918,2789,2789,2788,2917,2916,2917,2788,2788,2787,2916,2915,2916,2787,2787,2786,2915,2914,2915,2786,2786,2785,2914,2913,2914,2785,2785,2784,2913,2912,2913,2784,2784,2783,2912,2911,2912,2783,2783,2782,2911,2910,2911,2782,2782,2781,2910,2909,2910,2781,2781,2780,2909,2908,2909,2780,2780,2779,2908,2907,2908,2779,2779,2778,2907,2906,2907,2778,2778,2777,2906,2905,2906,2777,2777,2776,2905,2904,2905,2776,2776,2775,2904,2903,2904,2775,2775,2774,2903,2902,2903,2774,2774,2773,2902,2901,2902,2773,2773,2772,2901,2900,2901,2772,2772,2771,2900,2899,2900,2771,2771,2770,2899,2898,2899,2770,2770,2769,2898,2897,2898,2769,2769,2768,2897,2896,2897,2768,2768,2767,2896,2895,2896,2767,2767,2766,2895,2894,2895,2766,2766,2765,2894,2893,2894,2765,2765,2764,2893,2892,2893,2764,2764,2763,2892,2891,2892,2763,2763,2762,2891,2890,2891,2762,2762,2761,2890,2889,2890,2761,2761,2760,2889,2888,2889,2760,2760,2759,2888,2887,2888,2759,2759,2758,2887,2886,2887,2758,2758,2757,2886,2885,2886,2757,2757,2756,2885,2884,2885,2756,2756,2755,2884,2883,2884,2755,2755,2754,2883,2882,2883,2754,2754,2753,2882,2881,2882,2753,2753,2752,2881,2880,2881,2752,2752,2751,2880,2879,2880,2751,2751,2750,2879,2878,2879,2750,2750,2749,2878,2877,2878,2749,2749,2748,2877,2876,2877,2748,2748,2747,2876,2875,2876,2747,2747,2746,2875,2874,2875,2746,2746,2745,2874,2873,2874,2745,2745,2744,2873,2872,2873,2744,2744,2743,2872,2871,2872,2743,2743,2742,2871,2870,2871,2742,2742,2741,2870,2869,2870,2741,2741,2740,2869,2868,2869,2740,2740,2739,2868,2867,2868,2739,2739,2738,2867,2866,2867,2738,2738,2737,2866,2865,2866,2737,2737,2736,2865,2864,2865,2736,2736,2735,2864,2863,2864,2735,2735,2734,2863,2862,2863,2734,2734,2733,2862,2861,2862,2733,2733,2732,2861,2860,2861,2732,2732,2731,2860,2859,2860,2731,2731,2730,2859,2858,2859,2730,2730,2729,2858,2857,2858,2729,2729,2728,2857,2856,2857,2728,2728,2727,2856,2855,2856,2727,2727,2726,2855,2854,2855,2726,2726,2725,2854,2853,2854,2725,2725,2724,2853,2852,2853,2724,2724,2723,2852,2851,2852,2723,2723,2722,2851,2850,2851,2722,2722,2721,2850,2849,2850,2721,2721,2720,2849,2848,2849,2720,2720,2719,2848,2847,2848,2719,2719,2718,2847,2846,2847,2718,2718,2717,2846,2845,2846,2717,2717,2716,2845,2844,2845,2716,2716,2715,2844,2843,2844,2715,2715,2714,2843,2842,2843,2714,2714,2713,2842,2841,2842,2713,2713,2712,2841,2840,2841,2712,2712,2711,2840,2839,2840,2711,2711,2710,2839,2838,2839,2710,2710,2709,2838,2837,2838,2709,2709,2708,2837,2836,2837,2708,2708,2707,2836,2835,2836,2707,2707,2706,2835,2834,2835,2706,2706,2705,2834,2833,2834,2705,2705,2704,2833,2832,2833,2704,2704,2703,2832,2831,2832,2703,2703,2702,2831,2830,2831,2702,2702,2701,2830,2829,2830,2701,2701,2700,2829,2828,2829,2700,2700,2699,2828,2827,2828,2699,2699,2698,2827,2826,2827,2698,2698,2697,2826,2825,2826,2697,2697,2696,2825,2824,2825,2696,2696,2695,2824,2823,2824,2695,2695,2694,2823,2822,2823,2694,2694,2693,2822,2821,2822,2693,2693,2692,2821,2820,2821,2692,2692,2691,2820,2819,2820,2691,2691,2690,2819,2818,2819,2690,2690,2689,2818,2817,2818,2689,2689,2688,2817,2816,2817,2688,2943,2942,3071,3070,3071,2942,2942,2941,3070,3069,3070,2941,2941,2940,3069,3068,3069,2940,2940,2939,3068,3067,3068,2939,2939,2938,3067,3066,3067,2938,2938,2937,3066,3065,3066,2937,2937,2936,3065,3064,3065,2936,2936,2935,3064,3063,3064,2935,2935,2934,3063,3062,3063,2934,2934,2933,3062,3061,3062,2933,2933,2932,3061,3060,3061,2932,2932,2931,3060,3059,3060,2931,2931,2930,3059,3058,3059,2930,2930,2929,3058,3057,3058,2929,2929,2928,3057,3056,3057,2928,2928,2927,3056,3055,3056,2927,2927,2926,3055,3054,3055,2926,2926,2925,3054,3053,3054,2925,2925,2924,3053,3052,3053,2924,2924,2923,3052,3051,3052,2923,2923,2922,3051,3050,3051,2922,2922,2921,3050,3049,3050,2921,2921,2920,3049,3048,3049,2920,2920,2919,3048,3047,3048,2919,2919,2918,3047,3046,3047,2918,2918,2917,3046,3045,3046,2917,2917,2916,3045,3044,3045,2916,2916,2915,3044,3043,3044,2915,2915,2914,3043,3042,3043,2914,2914,2913,3042,3041,3042,2913,2913,2912,3041,3040,3041,2912,2912,2911,3040,3039,3040,2911,2911,2910,3039,3038,3039,2910,2910,2909,3038,3037,3038,2909,2909,2908,3037,3036,3037,2908,2908,2907,3036,3035,3036,2907,2907,2906,3035,3034,3035,2906,2906,2905,3034,3033,3034,2905,2905,2904,3033,3032,3033,2904,2904,2903,3032,3031,3032,2903,2903,2902,3031,3030,3031,2902,2902,2901,3030,3029,3030,2901,2901,2900,3029,3028,3029,2900,2900,2899,3028,3027,3028,2899,2899,2898,3027,3026,3027,2898,2898,2897,3026,3025,3026,2897,2897,2896,3025,3024,3025,2896,2896,2895,3024,3023,3024,2895,2895,2894,3023,3022,3023,2894,2894,2893,3022,3021,3022,2893,2893,2892,3021,3020,3021,2892,2892,2891,3020,3019,3020,2891,2891,2890,3019,3018,3019,2890,2890,2889,3018,3017,3018,2889,2889,2888,3017,3016,3017,2888,2888,2887,3016,3015,3016,2887,2887,2886,3015,3014,3015,2886,2886,2885,3014,3013,3014,2885,2885,2884,3013,3012,3013,2884,2884,2883,3012,3011,3012,2883,2883,2882,3011,3010,3011,2882,2882,2881,3010,3009,3010,2881,2881,2880,3009,3008,3009,2880,2880,2879,3008,3007,3008,2879,2879,2878,3007,3006,3007,2878,2878,2877,3006,3005,3006,2877,2877,2876,3005,3004,3005,2876,2876,2875,3004,3003,3004,2875,2875,2874,3003,3002,3003,2874,2874,2873,3002,3001,3002,2873,2873,2872,3001,3000,3001,2872,2872,2871,3000,2999,3000,2871,2871,2870,2999,2998,2999,2870,2870,2869,2998,2997,2998,2869,2869,2868,2997,2996,2997,2868,2868,2867,2996,2995,2996,2867,2867,2866,2995,2994,2995,2866,2866,2865,2994,2993,2994,2865,2865,2864,2993,2992,2993,2864,2864,2863,2992,2991,2992,2863,2863,2862,2991,2990,2991,2862,2862,2861,2990,2989,2990,2861,2861,2860,2989,2988,2989,2860,2860,2859,2988,2987,2988,2859,2859,2858,2987,2986,2987,2858,2858,2857,2986,2985,2986,2857,2857,2856,2985,2984,2985,2856,2856,2855,2984,2983,2984,2855,2855,2854,2983,2982,2983,2854,2854,2853,2982,2981,2982,2853,2853,2852,2981,2980,2981,2852,2852,2851,2980,2979,2980,2851,2851,2850,2979,2978,2979,2850,2850,2849,2978,2977,2978,2849,2849,2848,2977,2976,2977,2848,2848,2847,2976,2975,2976,2847,2847,2846,2975,2974,2975,2846,2846,2845,2974,2973,2974,2845,2845,2844,2973,2972,2973,2844,2844,2843,2972,2971,2972,2843,2843,2842,2971,2970,2971,2842,2842,2841,2970,2969,2970,2841,2841,2840,2969,2968,2969,2840,2840,2839,2968,2967,2968,2839,2839,2838,2967,2966,2967,2838,2838,2837,2966,2965,2966,2837,2837,2836,2965,2964,2965,2836,2836,2835,2964,2963,2964,2835,2835,2834,2963,2962,2963,2834,2834,2833,2962,2961,2962,2833,2833,2832,2961,2960,2961,2832,2832,2831,2960,2959,2960,2831,2831,2830,2959,2958,2959,2830,2830,2829,2958,2957,2958,2829,2829,2828,2957,2956,2957,2828,2828,2827,2956,2955,2956,2827,2827,2826,2955,2954,2955,2826,2826,2825,2954,2953,2954,2825,2825,2824,2953,2952,2953,2824,2824,2823,2952,2951,2952,2823,2823,2822,2951,2950,2951,2822,2822,2821,2950,2949,2950,2821,2821,2820,2949,2948,2949,2820,2820,2819,2948,2947,2948,2819,2819,2818,2947,2946,2947,2818,2818,2817,2946,2945,2946,2817,2817,2816,2945,2944,2945,2816,3071,3070,3199,3198,3199,3070,3070,3069,3198,3197,3198,3069,3069,3068,3197,3196,3197,3068,3068,3067,3196,3195,3196,3067,3067,3066,3195,3194,3195,3066,3066,3065,3194,3193,3194,3065,3065,3064,3193,3192,3193,3064,3064,3063,3192,3191,3192,3063,3063,3062,3191,3190,3191,3062,3062,3061,3190,3189,3190,3061,3061,3060,3189,3188,3189,3060,3060,3059,3188,3187,3188,3059,3059,3058,3187,3186,3187,3058,3058,3057,3186,3185,3186,3057,3057,3056,3185,3184,3185,3056,3056,3055,3184,3183,3184,3055,3055,3054,3183,3182,3183,3054,3054,3053,3182,3181,3182,3053,3053,3052,3181,3180,3181,3052,3052,3051,3180,3179,3180,3051,3051,3050,3179,3178,3179,3050,3050,3049,3178,3177,3178,3049,3049,3048,3177,3176,3177,3048,3048,3047,3176,3175,3176,3047,3047,3046,3175,3174,3175,3046,3046,3045,3174,3173,3174,3045,3045,3044,3173,3172,3173,3044,3044,3043,3172,3171,3172,3043,3043,3042,3171,3170,3171,3042,3042,3041,3170,3169,3170,3041,3041,3040,3169,3168,3169,3040,3040,3039,3168,3167,3168,3039,3039,3038,3167,3166,3167,3038,3038,3037,3166,3165,3166,3037,3037,3036,3165,3164,3165,3036,3036,3035,3164,3163,3164,3035,3035,3034,3163,3162,3163,3034,3034,3033,3162,3161,3162,3033,3033,3032,3161,3160,3161,3032,3032,3031,3160,3159,3160,3031,3031,3030,3159,3158,3159,3030,3030,3029,3158,3157,3158,3029,3029,3028,3157,3156,3157,3028,3028,3027,3156,3155,3156,3027,3027,3026,3155,3154,3155,3026,3026,3025,3154,3153,3154,3025,3025,3024,3153,3152,3153,3024,3024,3023,3152,3151,3152,3023,3023,3022,3151,3150,3151,3022,3022,3021,3150,3149,3150,3021,3021,3020,3149,3148,3149,3020,3020,3019,3148,3147,3148,3019,3019,3018,3147,3146,3147,3018,3018,3017,3146,3145,3146,3017,3017,3016,3145,3144,3145,3016,3016,3015,3144,3143,3144,3015,3015,3014,3143,3142,3143,3014,3014,3013,3142,3141,3142,3013,3013,3012,3141,3140,3141,3012,3012,3011,3140,3139,3140,3011,3011,3010,3139,3138,3139,3010,3010,3009,3138,3137,3138,3009,3009,3008,3137,3136,3137,3008,3008,3007,3136,3135,3136,3007,3007,3006,3135,3134,3135,3006,3006,3005,3134,3133,3134,3005,3005,3004,3133,3132,3133,3004,3004,3003,3132,3131,3132,3003,3003,3002,3131,3130,3131,3002,3002,3001,3130,3129,3130,3001,3001,3000,3129,3128,3129,3000,3000,2999,3128,3127,3128,2999,2999,2998,3127,3126,3127,2998,2998,2997,3126,3125,3126,2997,2997,2996,3125,3124,3125,2996,2996,2995,3124,3123,3124,2995,2995,2994,3123,3122,3123,2994,2994,2993,3122,3121,3122,2993,2993,2992,3121,3120,3121,2992,2992,2991,3120,3119,3120,2991,2991,2990,3119,3118,3119,2990,2990,2989,3118,3117,3118,2989,2989,2988,3117,3116,3117,2988,2988,2987,3116,3115,3116,2987,2987,2986,3115,3114,3115,2986,2986,2985,3114,3113,3114,2985,2985,2984,3113,3112,3113,2984,2984,2983,3112,3111,3112,2983,2983,2982,3111,3110,3111,2982,2982,2981,3110,3109,3110,2981,2981,2980,3109,3108,3109,2980,2980,2979,3108,3107,3108,2979,2979,2978,3107,3106,3107,2978,2978,2977,3106,3105,3106,2977,2977,2976,3105,3104,3105,2976,2976,2975,3104,3103,3104,2975,2975,2974,3103,3102,3103,2974,2974,2973,3102,3101,3102,2973,2973,2972,3101,3100,3101,2972,2972,2971,3100,3099,3100,2971,2971,2970,3099,3098,3099,2970,2970,2969,3098,3097,3098,2969,2969,2968,3097,3096,3097,2968,2968,2967,3096,3095,3096,2967,2967,2966,3095,3094,3095,2966,2966,2965,3094,3093,3094,2965,2965,2964,3093,3092,3093,2964,2964,2963,3092,3091,3092,2963,2963,2962,3091,3090,3091,2962,2962,2961,3090,3089,3090,2961,2961,2960,3089,3088,3089,2960,2960,2959,3088,3087,3088,2959,2959,2958,3087,3086,3087,2958,2958,2957,3086,3085,3086,2957,2957,2956,3085,3084,3085,2956,2956,2955,3084,3083,3084,2955,2955,2954,3083,3082,3083,2954,2954,2953,3082,3081,3082,2953,2953,2952,3081,3080,3081,2952,2952,2951,3080,3079,3080,2951,2951,2950,3079,3078,3079,2950,2950,2949,3078,3077,3078,2949,2949,2948,3077,3076,3077,2948,2948,2947,3076,3075,3076,2947,2947,2946,3075,3074,3075,2946,2946,2945,3074,3073,3074,2945,2945,2944,3073,3072,3073,2944,3199,3198,3327,3326,3327,3198,3198,3197,3326,3325,3326,3197,3197,3196,3325,3324,3325,3196,3196,3195,3324,3323,3324,3195,3195,3194,3323,3322,3323,3194,3194,3193,3322,3321,3322,3193,3193,3192,3321,3320,3321,3192,3192,3191,3320,3319,3320,3191,3191,3190,3319,3318,3319,3190,3190,3189,3318,3317,3318,3189,3189,3188,3317,3316,3317,3188,3188,3187,3316,3315,3316,3187,3187,3186,3315,3314,3315,3186,3186,3185,3314,3313,3314,3185,3185,3184,3313,3312,3313,3184,3184,3183,3312,3311,3312,3183,3183,3182,3311,3310,3311,3182,3182,3181,3310,3309,3310,3181,3181,3180,3309,3308,3309,3180,3180,3179,3308,3307,3308,3179,3179,3178,3307,3306,3307,3178,3178,3177,3306,3305,3306,3177,3177,3176,3305,3304,3305,3176,3176,3175,3304,3303,3304,3175,3175,3174,3303,3302,3303,3174,3174,3173,3302,3301,3302,3173,3173,3172,3301,3300,3301,3172,3172,3171,3300,3299,3300,3171,3171,3170,3299,3298,3299,3170,3170,3169,3298,3297,3298,3169,3169,3168,3297,3296,3297,3168,3168,3167,3296,3295,3296,3167,3167,3166,3295,3294,3295,3166,3166,3165,3294,3293,3294,3165,3165,3164,3293,3292,3293,3164,3164,3163,3292,3291,3292,3163,3163,3162,3291,3290,3291,3162,3162,3161,3290,3289,3290,3161,3161,3160,3289,3288,3289,3160,3160,3159,3288,3287,3288,3159,3159,3158,3287,3286,3287,3158,3158,3157,3286,3285,3286,3157,3157,3156,3285,3284,3285,3156,3156,3155,3284,3283,3284,3155,3155,3154,3283,3282,3283,3154,3154,3153,3282,3281,3282,3153,3153,3152,3281,3280,3281,3152,3152,3151,3280,3279,3280,3151,3151,3150,3279,3278,3279,3150,3150,3149,3278,3277,3278,3149,3149,3148,3277,3276,3277,3148,3148,3147,3276,3275,3276,3147,3147,3146,3275,3274,3275,3146,3146,3145,3274,3273,3274,3145,3145,3144,3273,3272,3273,3144,3144,3143,3272,3271,3272,3143,3143,3142,3271,3270,3271,3142,3142,3141,3270,3269,3270,3141,3141,3140,3269,3268,3269,3140,3140,3139,3268,3267,3268,3139,3139,3138,3267,3266,3267,3138,3138,3137,3266,3265,3266,3137,3137,3136,3265,3264,3265,3136,3136,3135,3264,3263,3264,3135,3135,3134,3263,3262,3263,3134,3134,3133,3262,3261,3262,3133,3133,3132,3261,3260,3261,3132,3132,3131,3260,3259,3260,3131,3131,3130,3259,3258,3259,3130,3130,3129,3258,3257,3258,3129,3129,3128,3257,3256,3257,3128,3128,3127,3256,3255,3256,3127,3127,3126,3255,3254,3255,3126,3126,3125,3254,3253,3254,3125,3125,3124,3253,3252,3253,3124,3124,3123,3252,3251,3252,3123,3123,3122,3251,3250,3251,3122,3122,3121,3250,3249,3250,3121,3121,3120,3249,3248,3249,3120,3120,3119,3248,3247,3248,3119,3119,3118,3247,3246,3247,3118,3118,3117,3246,3245,3246,3117,3117,3116,3245,3244,3245,3116,3116,3115,3244,3243,3244,3115,3115,3114,3243,3242,3243,3114,3114,3113,3242,3241,3242,3113,3113,3112,3241,3240,3241,3112,3112,3111,3240,3239,3240,3111,3111,3110,3239,3238,3239,3110,3110,3109,3238,3237,3238,3109,3109,3108,3237,3236,3237,3108,3108,3107,3236,3235,3236,3107,3107,3106,3235,3234,3235,3106,3106,3105,3234,3233,3234,3105,3105,3104,3233,3232,3233,3104,3104,3103,3232,3231,3232,3103,3103,3102,3231,3230,3231,3102,3102,3101,3230,3229,3230,3101,3101,3100,3229,3228,3229,3100,3100,3099,3228,3227,3228,3099,3099,3098,3227,3226,3227,3098,3098,3097,3226,3225,3226,3097,3097,3096,3225,3224,3225,3096,3096,3095,3224,3223,3224,3095,3095,3094,3223,3222,3223,3094,3094,3093,3222,3221,3222,3093,3093,3092,3221,3220,3221,3092,3092,3091,3220,3219,3220,3091,3091,3090,3219,3218,3219,3090,3090,3089,3218,3217,3218,3089,3089,3088,3217,3216,3217,3088,3088,3087,3216,3215,3216,3087,3087,3086,3215,3214,3215,3086,3086,3085,3214,3213,3214,3085,3085,3084,3213,3212,3213,3084,3084,3083,3212,3211,3212,3083,3083,3082,3211,3210,3211,3082,3082,3081,3210,3209,3210,3081,3081,3080,3209,3208,3209,3080,3080,3079,3208,3207,3208,3079,3079,3078,3207,3206,3207,3078,3078,3077,3206,3205,3206,3077,3077,3076,3205,3204,3205,3076,3076,3075,3204,3203,3204,3075,3075,3074,3203,3202,3203,3074,3074,3073,3202,3201,3202,3073,3073,3072,3201,3200,3201,3072,3327,3326,3455,3454,3455,3326,3326,3325,3454,3453,3454,3325,3325,3324,3453,3452,3453,3324,3324,3323,3452,3451,3452,3323,3323,3322,3451,3450,3451,3322,3322,3321,3450,3449,3450,3321,3321,3320,3449,3448,3449,3320,3320,3319,3448,3447,3448,3319,3319,3318,3447,3446,3447,3318,3318,3317,3446,3445,3446,3317,3317,3316,3445,3444,3445,3316,3316,3315,3444,3443,3444,3315,3315,3314,3443,3442,3443,3314,3314,3313,3442,3441,3442,3313,3313,3312,3441,3440,3441,3312,3312,3311,3440,3439,3440,3311,3311,3310,3439,3438,3439,3310,3310,3309,3438,3437,3438,3309,3309,3308,3437,3436,3437,3308,3308,3307,3436,3435,3436,3307,3307,3306,3435,3434,3435,3306,3306,3305,3434,3433,3434,3305,3305,3304,3433,3432,3433,3304,3304,3303,3432,3431,3432,3303,3303,3302,3431,3430,3431,3302,3302,3301,3430,3429,3430,3301,3301,3300,3429,3428,3429,3300,3300,3299,3428,3427,3428,3299,3299,3298,3427,3426,3427,3298,3298,3297,3426,3425,3426,3297,3297,3296,3425,3424,3425,3296,3296,3295,3424,3423,3424,3295,3295,3294,3423,3422,3423,3294,3294,3293,3422,3421,3422,3293,3293,3292,3421,3420,3421,3292,3292,3291,3420,3419,3420,3291,3291,3290,3419,3418,3419,3290,3290,3289,3418,3417,3418,3289,3289,3288,3417,3416,3417,3288,3288,3287,3416,3415,3416,3287,3287,3286,3415,3414,3415,3286,3286,3285,3414,3413,3414,3285,3285,3284,3413,3412,3413,3284,3284,3283,3412,3411,3412,3283,3283,3282,3411,3410,3411,3282,3282,3281,3410,3409,3410,3281,3281,3280,3409,3408,3409,3280,3280,3279,3408,3407,3408,3279,3279,3278,3407,3406,3407,3278,3278,3277,3406,3405,3406,3277,3277,3276,3405,3404,3405,3276,3276,3275,3404,3403,3404,3275,3275,3274,3403,3402,3403,3274,3274,3273,3402,3401,3402,3273,3273,3272,3401,3400,3401,3272,3272,3271,3400,3399,3400,3271,3271,3270,3399,3398,3399,3270,3270,3269,3398,3397,3398,3269,3269,3268,3397,3396,3397,3268,3268,3267,3396,3395,3396,3267,3267,3266,3395,3394,3395,3266,3266,3265,3394,3393,3394,3265,3265,3264,3393,3392,3393,3264,3264,3263,3392,3391,3392,3263,3263,3262,3391,3390,3391,3262,3262,3261,3390,3389,3390,3261,3261,3260,3389,3388,3389,3260,3260,3259,3388,3387,3388,3259,3259,3258,3387,3386,3387,3258,3258,3257,3386,3385,3386,3257,3257,3256,3385,3384,3385,3256,3256,3255,3384,3383,3384,3255,3255,3254,3383,3382,3383,3254,3254,3253,3382,3381,3382,3253,3253,3252,3381,3380,3381,3252,3252,3251,3380,3379,3380,3251,3251,3250,3379,3378,3379,3250,3250,3249,3378,3377,3378,3249,3249,3248,3377,3376,3377,3248,3248,3247,3376,3375,3376,3247,3247,3246,3375,3374,3375,3246,3246,3245,3374,3373,3374,3245,3245,3244,3373,3372,3373,3244,3244,3243,3372,3371,3372,3243,3243,3242,3371,3370,3371,3242,3242,3241,3370,3369,3370,3241,3241,3240,3369,3368,3369,3240,3240,3239,3368,3367,3368,3239,3239,3238,3367,3366,3367,3238,3238,3237,3366,3365,3366,3237,3237,3236,3365,3364,3365,3236,3236,3235,3364,3363,3364,3235,3235,3234,3363,3362,3363,3234,3234,3233,3362,3361,3362,3233,3233,3232,3361,3360,3361,3232,3232,3231,3360,3359,3360,3231,3231,3230,3359,3358,3359,3230,3230,3229,3358,3357,3358,3229,3229,3228,3357,3356,3357,3228,3228,3227,3356,3355,3356,3227,3227,3226,3355,3354,3355,3226,3226,3225,3354,3353,3354,3225,3225,3224,3353,3352,3353,3224,3224,3223,3352,3351,3352,3223,3223,3222,3351,3350,3351,3222,3222,3221,3350,3349,3350,3221,3221,3220,3349,3348,3349,3220,3220,3219,3348,3347,3348,3219,3219,3218,3347,3346,3347,3218,3218,3217,3346,3345,3346,3217,3217,3216,3345,3344,3345,3216,3216,3215,3344,3343,3344,3215,3215,3214,3343,3342,3343,3214,3214,3213,3342,3341,3342,3213,3213,3212,3341,3340,3341,3212,3212,3211,3340,3339,3340,3211,3211,3210,3339,3338,3339,3210,3210,3209,3338,3337,3338,3209,3209,3208,3337,3336,3337,3208,3208,3207,3336,3335,3336,3207,3207,3206,3335,3334,3335,3206,3206,3205,3334,3333,3334,3205,3205,3204,3333,3332,3333,3204,3204,3203,3332,3331,3332,3203,3203,3202,3331,3330,3331,3202,3202,3201,3330,3329,3330,3201,3201,3200,3329,3328,3329,3200,3455,3454,3583,3582,3583,3454,3454,3453,3582,3581,3582,3453,3453,3452,3581,3580,3581,3452,3452,3451,3580,3579,3580,3451,3451,3450,3579,3578,3579,3450,3450,3449,3578,3577,3578,3449,3449,3448,3577,3576,3577,3448,3448,3447,3576,3575,3576,3447,3447,3446,3575,3574,3575,3446,3446,3445,3574,3573,3574,3445,3445,3444,3573,3572,3573,3444,3444,3443,3572,3571,3572,3443,3443,3442,3571,3570,3571,3442,3442,3441,3570,3569,3570,3441,3441,3440,3569,3568,3569,3440,3440,3439,3568,3567,3568,3439,3439,3438,3567,3566,3567,3438,3438,3437,3566,3565,3566,3437,3437,3436,3565,3564,3565,3436,3436,3435,3564,3563,3564,3435,3435,3434,3563,3562,3563,3434,3434,3433,3562,3561,3562,3433,3433,3432,3561,3560,3561,3432,3432,3431,3560,3559,3560,3431,3431,3430,3559,3558,3559,3430,3430,3429,3558,3557,3558,3429,3429,3428,3557,3556,3557,3428,3428,3427,3556,3555,3556,3427,3427,3426,3555,3554,3555,3426,3426,3425,3554,3553,3554,3425,3425,3424,3553,3552,3553,3424,3424,3423,3552,3551,3552,3423,3423,3422,3551,3550,3551,3422,3422,3421,3550,3549,3550,3421,3421,3420,3549,3548,3549,3420,3420,3419,3548,3547,3548,3419,3419,3418,3547,3546,3547,3418,3418,3417,3546,3545,3546,3417,3417,3416,3545,3544,3545,3416,3416,3415,3544,3543,3544,3415,3415,3414,3543,3542,3543,3414,3414,3413,3542,3541,3542,3413,3413,3412,3541,3540,3541,3412,3412,3411,3540,3539,3540,3411,3411,3410,3539,3538,3539,3410,3410,3409,3538,3537,3538,3409,3409,3408,3537,3536,3537,3408,3408,3407,3536,3535,3536,3407,3407,3406,3535,3534,3535,3406,3406,3405,3534,3533,3534,3405,3405,3404,3533,3532,3533,3404,3404,3403,3532,3531,3532,3403,3403,3402,3531,3530,3531,3402,3402,3401,3530,3529,3530,3401,3401,3400,3529,3528,3529,3400,3400,3399,3528,3527,3528,3399,3399,3398,3527,3526,3527,3398,3398,3397,3526,3525,3526,3397,3397,3396,3525,3524,3525,3396,3396,3395,3524,3523,3524,3395,3395,3394,3523,3522,3523,3394,3394,3393,3522,3521,3522,3393,3393,3392,3521,3520,3521,3392,3392,3391,3520,3519,3520,3391,3391,3390,3519,3518,3519,3390,3390,3389,3518,3517,3518,3389,3389,3388,3517,3516,3517,3388,3388,3387,3516,3515,3516,3387,3387,3386,3515,3514,3515,3386,3386,3385,3514,3513,3514,3385,3385,3384,3513,3512,3513,3384,3384,3383,3512,3511,3512,3383,3383,3382,3511,3510,3511,3382,3382,3381,3510,3509,3510,3381,3381,3380,3509,3508,3509,3380,3380,3379,3508,3507,3508,3379,3379,3378,3507,3506,3507,3378,3378,3377,3506,3505,3506,3377,3377,3376,3505,3504,3505,3376,3376,3375,3504,3503,3504,3375,3375,3374,3503,3502,3503,3374,3374,3373,3502,3501,3502,3373,3373,3372,3501,3500,3501,3372,3372,3371,3500,3499,3500,3371,3371,3370,3499,3498,3499,3370,3370,3369,3498,3497,3498,3369,3369,3368,3497,3496,3497,3368,3368,3367,3496,3495,3496,3367,3367,3366,3495,3494,3495,3366,3366,3365,3494,3493,3494,3365,3365,3364,3493,3492,3493,3364,3364,3363,3492,3491,3492,3363,3363,3362,3491,3490,3491,3362,3362,3361,3490,3489,3490,3361,3361,3360,3489,3488,3489,3360,3360,3359,3488,3487,3488,3359,3359,3358,3487,3486,3487,3358,3358,3357,3486,3485,3486,3357,3357,3356,3485,3484,3485,3356,3356,3355,3484,3483,3484,3355,3355,3354,3483,3482,3483,3354,3354,3353,3482,3481,3482,3353,3353,3352,3481,3480,3481,3352,3352,3351,3480,3479,3480,3351,3351,3350,3479,3478,3479,3350,3350,3349,3478,3477,3478,3349,3349,3348,3477,3476,3477,3348,3348,3347,3476,3475,3476,3347,3347,3346,3475,3474,3475,3346,3346,3345,3474,3473,3474,3345,3345,3344,3473,3472,3473,3344,3344,3343,3472,3471,3472,3343,3343,3342,3471,3470,3471,3342,3342,3341,3470,3469,3470,3341,3341,3340,3469,3468,3469,3340,3340,3339,3468,3467,3468,3339,3339,3338,3467,3466,3467,3338,3338,3337,3466,3465,3466,3337,3337,3336,3465,3464,3465,3336,3336,3335,3464,3463,3464,3335,3335,3334,3463,3462,3463,3334,3334,3333,3462,3461,3462,3333,3333,3332,3461,3460,3461,3332,3332,3331,3460,3459,3460,3331,3331,3330,3459,3458,3459,3330,3330,3329,3458,3457,3458,3329,3329,3328,3457,3456,3457,3328,3583,3582,3711,3710,3711,3582,3582,3581,3710,3709,3710,3581,3581,3580,3709,3708,3709,3580,3580,3579,3708,3707,3708,3579,3579,3578,3707,3706,3707,3578,3578,3577,3706,3705,3706,3577,3577,3576,3705,3704,3705,3576,3576,3575,3704,3703,3704,3575,3575,3574,3703,3702,3703,3574,3574,3573,3702,3701,3702,3573,3573,3572,3701,3700,3701,3572,3572,3571,3700,3699,3700,3571,3571,3570,3699,3698,3699,3570,3570,3569,3698,3697,3698,3569,3569,3568,3697,3696,3697,3568,3568,3567,3696,3695,3696,3567,3567,3566,3695,3694,3695,3566,3566,3565,3694,3693,3694,3565,3565,3564,3693,3692,3693,3564,3564,3563,3692,3691,3692,3563,3563,3562,3691,3690,3691,3562,3562,3561,3690,3689,3690,3561,3561,3560,3689,3688,3689,3560,3560,3559,3688,3687,3688,3559,3559,3558,3687,3686,3687,3558,3558,3557,3686,3685,3686,3557,3557,3556,3685,3684,3685,3556,3556,3555,3684,3683,3684,3555,3555,3554,3683,3682,3683,3554,3554,3553,3682,3681,3682,3553,3553,3552,3681,3680,3681,3552,3552,3551,3680,3679,3680,3551,3551,3550,3679,3678,3679,3550,3550,3549,3678,3677,3678,3549,3549,3548,3677,3676,3677,3548,3548,3547,3676,3675,3676,3547,3547,3546,3675,3674,3675,3546,3546,3545,3674,3673,3674,3545,3545,3544,3673,3672,3673,3544,3544,3543,3672,3671,3672,3543,3543,3542,3671,3670,3671,3542,3542,3541,3670,3669,3670,3541,3541,3540,3669,3668,3669,3540,3540,3539,3668,3667,3668,3539,3539,3538,3667,3666,3667,3538,3538,3537,3666,3665,3666,3537,3537,3536,3665,3664,3665,3536,3536,3535,3664,3663,3664,3535,3535,3534,3663,3662,3663,3534,3534,3533,3662,3661,3662,3533,3533,3532,3661,3660,3661,3532,3532,3531,3660,3659,3660,3531,3531,3530,3659,3658,3659,3530,3530,3529,3658,3657,3658,3529,3529,3528,3657,3656,3657,3528,3528,3527,3656,3655,3656,3527,3527,3526,3655,3654,3655,3526,3526,3525,3654,3653,3654,3525,3525,3524,3653,3652,3653,3524,3524,3523,3652,3651,3652,3523,3523,3522,3651,3650,3651,3522,3522,3521,3650,3649,3650,3521,3521,3520,3649,3648,3649,3520,3520,3519,3648,3647,3648,3519,3519,3518,3647,3646,3647,3518,3518,3517,3646,3645,3646,3517,3517,3516,3645,3644,3645,3516,3516,3515,3644,3643,3644,3515,3515,3514,3643,3642,3643,3514,3514,3513,3642,3641,3642,3513,3513,3512,3641,3640,3641,3512,3512,3511,3640,3639,3640,3511,3511,3510,3639,3638,3639,3510,3510,3509,3638,3637,3638,3509,3509,3508,3637,3636,3637,3508,3508,3507,3636,3635,3636,3507,3507,3506,3635,3634,3635,3506,3506,3505,3634,3633,3634,3505,3505,3504,3633,3632,3633,3504,3504,3503,3632,3631,3632,3503,3503,3502,3631,3630,3631,3502,3502,3501,3630,3629,3630,3501,3501,3500,3629,3628,3629,3500,3500,3499,3628,3627,3628,3499,3499,3498,3627,3626,3627,3498,3498,3497,3626,3625,3626,3497,3497,3496,3625,3624,3625,3496,3496,3495,3624,3623,3624,3495,3495,3494,3623,3622,3623,3494,3494,3493,3622,3621,3622,3493,3493,3492,3621,3620,3621,3492,3492,3491,3620,3619,3620,3491,3491,3490,3619,3618,3619,3490,3490,3489,3618,3617,3618,3489,3489,3488,3617,3616,3617,3488,3488,3487,3616,3615,3616,3487,3487,3486,3615,3614,3615,3486,3486,3485,3614,3613,3614,3485,3485,3484,3613,3612,3613,3484,3484,3483,3612,3611,3612,3483,3483,3482,3611,3610,3611,3482,3482,3481,3610,3609,3610,3481,3481,3480,3609,3608,3609,3480,3480,3479,3608,3607,3608,3479,3479,3478,3607,3606,3607,3478,3478,3477,3606,3605,3606,3477,3477,3476,3605,3604,3605,3476,3476,3475,3604,3603,3604,3475,3475,3474,3603,3602,3603,3474,3474,3473,3602,3601,3602,3473,3473,3472,3601,3600,3601,3472,3472,3471,3600,3599,3600,3471,3471,3470,3599,3598,3599,3470,3470,3469,3598,3597,3598,3469,3469,3468,3597,3596,3597,3468,3468,3467,3596,3595,3596,3467,3467,3466,3595,3594,3595,3466,3466,3465,3594,3593,3594,3465,3465,3464,3593,3592,3593,3464,3464,3463,3592,3591,3592,3463,3463,3462,3591,3590,3591,3462,3462,3461,3590,3589,3590,3461,3461,3460,3589,3588,3589,3460,3460,3459,3588,3587,3588,3459,3459,3458,3587,3586,3587,3458,3458,3457,3586,3585,3586,3457,3457,3456,3585,3584,3585,3456,3711,3710,3839,3838,3839,3710,3710,3709,3838,3837,3838,3709,3709,3708,3837,3836,3837,3708,3708,3707,3836,3835,3836,3707,3707,3706,3835,3834,3835,3706,3706,3705,3834,3833,3834,3705,3705,3704,3833,3832,3833,3704,3704,3703,3832,3831,3832,3703,3703,3702,3831,3830,3831,3702,3702,3701,3830,3829,3830,3701,3701,3700,3829,3828,3829,3700,3700,3699,3828,3827,3828,3699,3699,3698,3827,3826,3827,3698,3698,3697,3826,3825,3826,3697,3697,3696,3825,3824,3825,3696,3696,3695,3824,3823,3824,3695,3695,3694,3823,3822,3823,3694,3694,3693,3822,3821,3822,3693,3693,3692,3821,3820,3821,3692,3692,3691,3820,3819,3820,3691,3691,3690,3819,3818,3819,3690,3690,3689,3818,3817,3818,3689,3689,3688,3817,3816,3817,3688,3688,3687,3816,3815,3816,3687,3687,3686,3815,3814,3815,3686,3686,3685,3814,3813,3814,3685,3685,3684,3813,3812,3813,3684,3684,3683,3812,3811,3812,3683,3683,3682,3811,3810,3811,3682,3682,3681,3810,3809,3810,3681,3681,3680,3809,3808,3809,3680,3680,3679,3808,3807,3808,3679,3679,3678,3807,3806,3807,3678,3678,3677,3806,3805,3806,3677,3677,3676,3805,3804,3805,3676,3676,3675,3804,3803,3804,3675,3675,3674,3803,3802,3803,3674,3674,3673,3802,3801,3802,3673,3673,3672,3801,3800,3801,3672,3672,3671,3800,3799,3800,3671,3671,3670,3799,3798,3799,3670,3670,3669,3798,3797,3798,3669,3669,3668,3797,3796,3797,3668,3668,3667,3796,3795,3796,3667,3667,3666,3795,3794,3795,3666,3666,3665,3794,3793,3794,3665,3665,3664,3793,3792,3793,3664,3664,3663,3792,3791,3792,3663,3663,3662,3791,3790,3791,3662,3662,3661,3790,3789,3790,3661,3661,3660,3789,3788,3789,3660,3660,3659,3788,3787,3788,3659,3659,3658,3787,3786,3787,3658,3658,3657,3786,3785,3786,3657,3657,3656,3785,3784,3785,3656,3656,3655,3784,3783,3784,3655,3655,3654,3783,3782,3783,3654,3654,3653,3782,3781,3782,3653,3653,3652,3781,3780,3781,3652,3652,3651,3780,3779,3780,3651,3651,3650,3779,3778,3779,3650,3650,3649,3778,3777,3778,3649,3649,3648,3777,3776,3777,3648,3648,3647,3776,3775,3776,3647,3647,3646,3775,3774,3775,3646,3646,3645,3774,3773,3774,3645,3645,3644,3773,3772,3773,3644,3644,3643,3772,3771,3772,3643,3643,3642,3771,3770,3771,3642,3642,3641,3770,3769,3770,3641,3641,3640,3769,3768,3769,3640,3640,3639,3768,3767,3768,3639,3639,3638,3767,3766,3767,3638,3638,3637,3766,3765,3766,3637,3637,3636,3765,3764,3765,3636,3636,3635,3764,3763,3764,3635,3635,3634,3763,3762,3763,3634,3634,3633,3762,3761,3762,3633,3633,3632,3761,3760,3761,3632,3632,3631,3760,3759,3760,3631,3631,3630,3759,3758,3759,3630,3630,3629,3758,3757,3758,3629,3629,3628,3757,3756,3757,3628,3628,3627,3756,3755,3756,3627,3627,3626,3755,3754,3755,3626,3626,3625,3754,3753,3754,3625,3625,3624,3753,3752,3753,3624,3624,3623,3752,3751,3752,3623,3623,3622,3751,3750,3751,3622,3622,3621,3750,3749,3750,3621,3621,3620,3749,3748,3749,3620,3620,3619,3748,3747,3748,3619,3619,3618,3747,3746,3747,3618,3618,3617,3746,3745,3746,3617,3617,3616,3745,3744,3745,3616,3616,3615,3744,3743,3744,3615,3615,3614,3743,3742,3743,3614,3614,3613,3742,3741,3742,3613,3613,3612,3741,3740,3741,3612,3612,3611,3740,3739,3740,3611,3611,3610,3739,3738,3739,3610,3610,3609,3738,3737,3738,3609,3609,3608,3737,3736,3737,3608,3608,3607,3736,3735,3736,3607,3607,3606,3735,3734,3735,3606,3606,3605,3734,3733,3734,3605,3605,3604,3733,3732,3733,3604,3604,3603,3732,3731,3732,3603,3603,3602,3731,3730,3731,3602,3602,3601,3730,3729,3730,3601,3601,3600,3729,3728,3729,3600,3600,3599,3728,3727,3728,3599,3599,3598,3727,3726,3727,3598,3598,3597,3726,3725,3726,3597,3597,3596,3725,3724,3725,3596,3596,3595,3724,3723,3724,3595,3595,3594,3723,3722,3723,3594,3594,3593,3722,3721,3722,3593,3593,3592,3721,3720,3721,3592,3592,3591,3720,3719,3720,3591,3591,3590,3719,3718,3719,3590,3590,3589,3718,3717,3718,3589,3589,3588,3717,3716,3717,3588,3588,3587,3716,3715,3716,3587,3587,3586,3715,3714,3715,3586,3586,3585,3714,3713,3714,3585,3585,3584,3713,3712,3713,3584,3839,3838,3967,3966,3967,3838,3838,3837,3966,3965,3966,3837,3837,3836,3965,3964,3965,3836,3836,3835,3964,3963,3964,3835,3835,3834,3963,3962,3963,3834,3834,3833,3962,3961,3962,3833,3833,3832,3961,3960,3961,3832,3832,3831,3960,3959,3960,3831,3831,3830,3959,3958,3959,3830,3830,3829,3958,3957,3958,3829,3829,3828,3957,3956,3957,3828,3828,3827,3956,3955,3956,3827,3827,3826,3955,3954,3955,3826,3826,3825,3954,3953,3954,3825,3825,3824,3953,3952,3953,3824,3824,3823,3952,3951,3952,3823,3823,3822,3951,3950,3951,3822,3822,3821,3950,3949,3950,3821,3821,3820,3949,3948,3949,3820,3820,3819,3948,3947,3948,3819,3819,3818,3947,3946,3947,3818,3818,3817,3946,3945,3946,3817,3817,3816,3945,3944,3945,3816,3816,3815,3944,3943,3944,3815,3815,3814,3943,3942,3943,3814,3814,3813,3942,3941,3942,3813,3813,3812,3941,3940,3941,3812,3812,3811,3940,3939,3940,3811,3811,3810,3939,3938,3939,3810,3810,3809,3938,3937,3938,3809,3809,3808,3937,3936,3937,3808,3808,3807,3936,3935,3936,3807,3807,3806,3935,3934,3935,3806,3806,3805,3934,3933,3934,3805,3805,3804,3933,3932,3933,3804,3804,3803,3932,3931,3932,3803,3803,3802,3931,3930,3931,3802,3802,3801,3930,3929,3930,3801,3801,3800,3929,3928,3929,3800,3800,3799,3928,3927,3928,3799,3799,3798,3927,3926,3927,3798,3798,3797,3926,3925,3926,3797,3797,3796,3925,3924,3925,3796,3796,3795,3924,3923,3924,3795,3795,3794,3923,3922,3923,3794,3794,3793,3922,3921,3922,3793,3793,3792,3921,3920,3921,3792,3792,3791,3920,3919,3920,3791,3791,3790,3919,3918,3919,3790,3790,3789,3918,3917,3918,3789,3789,3788,3917,3916,3917,3788,3788,3787,3916,3915,3916,3787,3787,3786,3915,3914,3915,3786,3786,3785,3914,3913,3914,3785,3785,3784,3913,3912,3913,3784,3784,3783,3912,3911,3912,3783,3783,3782,3911,3910,3911,3782,3782,3781,3910,3909,3910,3781,3781,3780,3909,3908,3909,3780,3780,3779,3908,3907,3908,3779,3779,3778,3907,3906,3907,3778,3778,3777,3906,3905,3906,3777,3777,3776,3905,3904,3905,3776,3776,3775,3904,3903,3904,3775,3775,3774,3903,3902,3903,3774,3774,3773,3902,3901,3902,3773,3773,3772,3901,3900,3901,3772,3772,3771,3900,3899,3900,3771,3771,3770,3899,3898,3899,3770,3770,3769,3898,3897,3898,3769,3769,3768,3897,3896,3897,3768,3768,3767,3896,3895,3896,3767,3767,3766,3895,3894,3895,3766,3766,3765,3894,3893,3894,3765,3765,3764,3893,3892,3893,3764,3764,3763,3892,3891,3892,3763,3763,3762,3891,3890,3891,3762,3762,3761,3890,3889,3890,3761,3761,3760,3889,3888,3889,3760,3760,3759,3888,3887,3888,3759,3759,3758,3887,3886,3887,3758,3758,3757,3886,3885,3886,3757,3757,3756,3885,3884,3885,3756,3756,3755,3884,3883,3884,3755,3755,3754,3883,3882,3883,3754,3754,3753,3882,3881,3882,3753,3753,3752,3881,3880,3881,3752,3752,3751,3880,3879,3880,3751,3751,3750,3879,3878,3879,3750,3750,3749,3878,3877,3878,3749,3749,3748,3877,3876,3877,3748,3748,3747,3876,3875,3876,3747,3747,3746,3875,3874,3875,3746,3746,3745,3874,3873,3874,3745,3745,3744,3873,3872,3873,3744,3744,3743,3872,3871,3872,3743,3743,3742,3871,3870,3871,3742,3742,3741,3870,3869,3870,3741,3741,3740,3869,3868,3869,3740,3740,3739,3868,3867,3868,3739,3739,3738,3867,3866,3867,3738,3738,3737,3866,3865,3866,3737,3737,3736,3865,3864,3865,3736,3736,3735,3864,3863,3864,3735,3735,3734,3863,3862,3863,3734,3734,3733,3862,3861,3862,3733,3733,3732,3861,3860,3861,3732,3732,3731,3860,3859,3860,3731,3731,3730,3859,3858,3859,3730,3730,3729,3858,3857,3858,3729,3729,3728,3857,3856,3857,3728,3728,3727,3856,3855,3856,3727,3727,3726,3855,3854,3855,3726,3726,3725,3854,3853,3854,3725,3725,3724,3853,3852,3853,3724,3724,3723,3852,3851,3852,3723,3723,3722,3851,3850,3851,3722,3722,3721,3850,3849,3850,3721,3721,3720,3849,3848,3849,3720,3720,3719,3848,3847,3848,3719,3719,3718,3847,3846,3847,3718,3718,3717,3846,3845,3846,3717,3717,3716,3845,3844,3845,3716,3716,3715,3844,3843,3844,3715,3715,3714,3843,3842,3843,3714,3714,3713,3842,3841,3842,3713,3713,3712,3841,3840,3841,3712,3967,3966,4095,4094,4095,3966,3966,3965,4094,4093,4094,3965,3965,3964,4093,4092,4093,3964,3964,3963,4092,4091,4092,3963,3963,3962,4091,4090,4091,3962,3962,3961,4090,4089,4090,3961,3961,3960,4089,4088,4089,3960,3960,3959,4088,4087,4088,3959,3959,3958,4087,4086,4087,3958,3958,3957,4086,4085,4086,3957,3957,3956,4085,4084,4085,3956,3956,3955,4084,4083,4084,3955,3955,3954,4083,4082,4083,3954,3954,3953,4082,4081,4082,3953,3953,3952,4081,4080,4081,3952,3952,3951,4080,4079,4080,3951,3951,3950,4079,4078,4079,3950,3950,3949,4078,4077,4078,3949,3949,3948,4077,4076,4077,3948,3948,3947,4076,4075,4076,3947,3947,3946,4075,4074,4075,3946,3946,3945,4074,4073,4074,3945,3945,3944,4073,4072,4073,3944,3944,3943,4072,4071,4072,3943,3943,3942,4071,4070,4071,3942,3942,3941,4070,4069,4070,3941,3941,3940,4069,4068,4069,3940,3940,3939,4068,4067,4068,3939,3939,3938,4067,4066,4067,3938,3938,3937,4066,4065,4066,3937,3937,3936,4065,4064,4065,3936,3936,3935,4064,4063,4064,3935,3935,3934,4063,4062,4063,3934,3934,3933,4062,4061,4062,3933,3933,3932,4061,4060,4061,3932,3932,3931,4060,4059,4060,3931,3931,3930,4059,4058,4059,3930,3930,3929,4058,4057,4058,3929,3929,3928,4057,4056,4057,3928,3928,3927,4056,4055,4056,3927,3927,3926,4055,4054,4055,3926,3926,3925,4054,4053,4054,3925,3925,3924,4053,4052,4053,3924,3924,3923,4052,4051,4052,3923,3923,3922,4051,4050,4051,3922,3922,3921,4050,4049,4050,3921,3921,3920,4049,4048,4049,3920,3920,3919,4048,4047,4048,3919,3919,3918,4047,4046,4047,3918,3918,3917,4046,4045,4046,3917,3917,3916,4045,4044,4045,3916,3916,3915,4044,4043,4044,3915,3915,3914,4043,4042,4043,3914,3914,3913,4042,4041,4042,3913,3913,3912,4041,4040,4041,3912,3912,3911,4040,4039,4040,3911,3911,3910,4039,4038,4039,3910,3910,3909,4038,4037,4038,3909,3909,3908,4037,4036,4037,3908,3908,3907,4036,4035,4036,3907,3907,3906,4035,4034,4035,3906,3906,3905,4034,4033,4034,3905,3905,3904,4033,4032,4033,3904,3904,3903,4032,4031,4032,3903,3903,3902,4031,4030,4031,3902,3902,3901,4030,4029,4030,3901,3901,3900,4029,4028,4029,3900,3900,3899,4028,4027,4028,3899,3899,3898,4027,4026,4027,3898,3898,3897,4026,4025,4026,3897,3897,3896,4025,4024,4025,3896,3896,3895,4024,4023,4024,3895,3895,3894,4023,4022,4023,3894,3894,3893,4022,4021,4022,3893,3893,3892,4021,4020,4021,3892,3892,3891,4020,4019,4020,3891,3891,3890,4019,4018,4019,3890,3890,3889,4018,4017,4018,3889,3889,3888,4017,4016,4017,3888,3888,3887,4016,4015,4016,3887,3887,3886,4015,4014,4015,3886,3886,3885,4014,4013,4014,3885,3885,3884,4013,4012,4013,3884,3884,3883,4012,4011,4012,3883,3883,3882,4011,4010,4011,3882,3882,3881,4010,4009,4010,3881,3881,3880,4009,4008,4009,3880,3880,3879,4008,4007,4008,3879,3879,3878,4007,4006,4007,3878,3878,3877,4006,4005,4006,3877,3877,3876,4005,4004,4005,3876,3876,3875,4004,4003,4004,3875,3875,3874,4003,4002,4003,3874,3874,3873,4002,4001,4002,3873,3873,3872,4001,4000,4001,3872,3872,3871,4000,3999,4000,3871,3871,3870,3999,3998,3999,3870,3870,3869,3998,3997,3998,3869,3869,3868,3997,3996,3997,3868,3868,3867,3996,3995,3996,3867,3867,3866,3995,3994,3995,3866,3866,3865,3994,3993,3994,3865,3865,3864,3993,3992,3993,3864,3864,3863,3992,3991,3992,3863,3863,3862,3991,3990,3991,3862,3862,3861,3990,3989,3990,3861,3861,3860,3989,3988,3989,3860,3860,3859,3988,3987,3988,3859,3859,3858,3987,3986,3987,3858,3858,3857,3986,3985,3986,3857,3857,3856,3985,3984,3985,3856,3856,3855,3984,3983,3984,3855,3855,3854,3983,3982,3983,3854,3854,3853,3982,3981,3982,3853,3853,3852,3981,3980,3981,3852,3852,3851,3980,3979,3980,3851,3851,3850,3979,3978,3979,3850,3850,3849,3978,3977,3978,3849,3849,3848,3977,3976,3977,3848,3848,3847,3976,3975,3976,3847,3847,3846,3975,3974,3975,3846,3846,3845,3974,3973,3974,3845,3845,3844,3973,3972,3973,3844,3844,3843,3972,3971,3972,3843,3843,3842,3971,3970,3971,3842,3842,3841,3970,3969,3970,3841,3841,3840,3969,3968,3969,3840,4095,4094,4223,4222,4223,4094,4094,4093,4222,4221,4222,4093,4093,4092,4221,4220,4221,4092,4092,4091,4220,4219,4220,4091,4091,4090,4219,4218,4219,4090,4090,4089,4218,4217,4218,4089,4089,4088,4217,4216,4217,4088,4088,4087,4216,4215,4216,4087,4087,4086,4215,4214,4215,4086,4086,4085,4214,4213,4214,4085,4085,4084,4213,4212,4213,4084,4084,4083,4212,4211,4212,4083,4083,4082,4211,4210,4211,4082,4082,4081,4210,4209,4210,4081,4081,4080,4209,4208,4209,4080,4080,4079,4208,4207,4208,4079,4079,4078,4207,4206,4207,4078,4078,4077,4206,4205,4206,4077,4077,4076,4205,4204,4205,4076,4076,4075,4204,4203,4204,4075,4075,4074,4203,4202,4203,4074,4074,4073,4202,4201,4202,4073,4073,4072,4201,4200,4201,4072,4072,4071,4200,4199,4200,4071,4071,4070,4199,4198,4199,4070,4070,4069,4198,4197,4198,4069,4069,4068,4197,4196,4197,4068,4068,4067,4196,4195,4196,4067,4067,4066,4195,4194,4195,4066,4066,4065,4194,4193,4194,4065,4065,4064,4193,4192,4193,4064,4064,4063,4192,4191,4192,4063,4063,4062,4191,4190,4191,4062,4062,4061,4190,4189,4190,4061,4061,4060,4189,4188,4189,4060,4060,4059,4188,4187,4188,4059,4059,4058,4187,4186,4187,4058,4058,4057,4186,4185,4186,4057,4057,4056,4185,4184,4185,4056,4056,4055,4184,4183,4184,4055,4055,4054,4183,4182,4183,4054,4054,4053,4182,4181,4182,4053,4053,4052,4181,4180,4181,4052,4052,4051,4180,4179,4180,4051,4051,4050,4179,4178,4179,4050,4050,4049,4178,4177,4178,4049,4049,4048,4177,4176,4177,4048,4048,4047,4176,4175,4176,4047,4047,4046,4175,4174,4175,4046,4046,4045,4174,4173,4174,4045,4045,4044,4173,4172,4173,4044,4044,4043,4172,4171,4172,4043,4043,4042,4171,4170,4171,4042,4042,4041,4170,4169,4170,4041,4041,4040,4169,4168,4169,4040,4040,4039,4168,4167,4168,4039,4039,4038,4167,4166,4167,4038,4038,4037,4166,4165,4166,4037,4037,4036,4165,4164,4165,4036,4036,4035,4164,4163,4164,4035,4035,4034,4163,4162,4163,4034,4034,4033,4162,4161,4162,4033,4033,4032,4161,4160,4161,4032,4032,4031,4160,4159,4160,4031,4031,4030,4159,4158,4159,4030,4030,4029,4158,4157,4158,4029,4029,4028,4157,4156,4157,4028,4028,4027,4156,4155,4156,4027,4027,4026,4155,4154,4155,4026,4026,4025,4154,4153,4154,4025,4025,4024,4153,4152,4153,4024,4024,4023,4152,4151,4152,4023,4023,4022,4151,4150,4151,4022,4022,4021,4150,4149,4150,4021,4021,4020,4149,4148,4149,4020,4020,4019,4148,4147,4148,4019,4019,4018,4147,4146,4147,4018,4018,4017,4146,4145,4146,4017,4017,4016,4145,4144,4145,4016,4016,4015,4144,4143,4144,4015,4015,4014,4143,4142,4143,4014,4014,4013,4142,4141,4142,4013,4013,4012,4141,4140,4141,4012,4012,4011,4140,4139,4140,4011,4011,4010,4139,4138,4139,4010,4010,4009,4138,4137,4138,4009,4009,4008,4137,4136,4137,4008,4008,4007,4136,4135,4136,4007,4007,4006,4135,4134,4135,4006,4006,4005,4134,4133,4134,4005,4005,4004,4133,4132,4133,4004,4004,4003,4132,4131,4132,4003,4003,4002,4131,4130,4131,4002,4002,4001,4130,4129,4130,4001,4001,4000,4129,4128,4129,4000,4000,3999,4128,4127,4128,3999,3999,3998,4127,4126,4127,3998,3998,3997,4126,4125,4126,3997,3997,3996,4125,4124,4125,3996,3996,3995,4124,4123,4124,3995,3995,3994,4123,4122,4123,3994,3994,3993,4122,4121,4122,3993,3993,3992,4121,4120,4121,3992,3992,3991,4120,4119,4120,3991,3991,3990,4119,4118,4119,3990,3990,3989,4118,4117,4118,3989,3989,3988,4117,4116,4117,3988,3988,3987,4116,4115,4116,3987,3987,3986,4115,4114,4115,3986,3986,3985,4114,4113,4114,3985,3985,3984,4113,4112,4113,3984,3984,3983,4112,4111,4112,3983,3983,3982,4111,4110,4111,3982,3982,3981,4110,4109,4110,3981,3981,3980,4109,4108,4109,3980,3980,3979,4108,4107,4108,3979,3979,3978,4107,4106,4107,3978,3978,3977,4106,4105,4106,3977,3977,3976,4105,4104,4105,3976,3976,3975,4104,4103,4104,3975,3975,3974,4103,4102,4103,3974,3974,3973,4102,4101,4102,3973,3973,3972,4101,4100,4101,3972,3972,3971,4100,4099,4100,3971,3971,3970,4099,4098,4099,3970,3970,3969,4098,4097,4098,3969,3969,3968,4097,4096,4097,3968,4223,4222,4351,4350,4351,4222,4222,4221,4350,4349,4350,4221,4221,4220,4349,4348,4349,4220,4220,4219,4348,4347,4348,4219,4219,4218,4347,4346,4347,4218,4218,4217,4346,4345,4346,4217,4217,4216,4345,4344,4345,4216,4216,4215,4344,4343,4344,4215,4215,4214,4343,4342,4343,4214,4214,4213,4342,4341,4342,4213,4213,4212,4341,4340,4341,4212,4212,4211,4340,4339,4340,4211,4211,4210,4339,4338,4339,4210,4210,4209,4338,4337,4338,4209,4209,4208,4337,4336,4337,4208,4208,4207,4336,4335,4336,4207,4207,4206,4335,4334,4335,4206,4206,4205,4334,4333,4334,4205,4205,4204,4333,4332,4333,4204,4204,4203,4332,4331,4332,4203,4203,4202,4331,4330,4331,4202,4202,4201,4330,4329,4330,4201,4201,4200,4329,4328,4329,4200,4200,4199,4328,4327,4328,4199,4199,4198,4327,4326,4327,4198,4198,4197,4326,4325,4326,4197,4197,4196,4325,4324,4325,4196,4196,4195,4324,4323,4324,4195,4195,4194,4323,4322,4323,4194,4194,4193,4322,4321,4322,4193,4193,4192,4321,4320,4321,4192,4192,4191,4320,4319,4320,4191,4191,4190,4319,4318,4319,4190,4190,4189,4318,4317,4318,4189,4189,4188,4317,4316,4317,4188,4188,4187,4316,4315,4316,4187,4187,4186,4315,4314,4315,4186,4186,4185,4314,4313,4314,4185,4185,4184,4313,4312,4313,4184,4184,4183,4312,4311,4312,4183,4183,4182,4311,4310,4311,4182,4182,4181,4310,4309,4310,4181,4181,4180,4309,4308,4309,4180,4180,4179,4308,4307,4308,4179,4179,4178,4307,4306,4307,4178,4178,4177,4306,4305,4306,4177,4177,4176,4305,4304,4305,4176,4176,4175,4304,4303,4304,4175,4175,4174,4303,4302,4303,4174,4174,4173,4302,4301,4302,4173,4173,4172,4301,4300,4301,4172,4172,4171,4300,4299,4300,4171,4171,4170,4299,4298,4299,4170,4170,4169,4298,4297,4298,4169,4169,4168,4297,4296,4297,4168,4168,4167,4296,4295,4296,4167,4167,4166,4295,4294,4295,4166,4166,4165,4294,4293,4294,4165,4165,4164,4293,4292,4293,4164,4164,4163,4292,4291,4292,4163,4163,4162,4291,4290,4291,4162,4162,4161,4290,4289,4290,4161,4161,4160,4289,4288,4289,4160,4160,4159,4288,4287,4288,4159,4159,4158,4287,4286,4287,4158,4158,4157,4286,4285,4286,4157,4157,4156,4285,4284,4285,4156,4156,4155,4284,4283,4284,4155,4155,4154,4283,4282,4283,4154,4154,4153,4282,4281,4282,4153,4153,4152,4281,4280,4281,4152,4152,4151,4280,4279,4280,4151,4151,4150,4279,4278,4279,4150,4150,4149,4278,4277,4278,4149,4149,4148,4277,4276,4277,4148,4148,4147,4276,4275,4276,4147,4147,4146,4275,4274,4275,4146,4146,4145,4274,4273,4274,4145,4145,4144,4273,4272,4273,4144,4144,4143,4272,4271,4272,4143,4143,4142,4271,4270,4271,4142,4142,4141,4270,4269,4270,4141,4141,4140,4269,4268,4269,4140,4140,4139,4268,4267,4268,4139,4139,4138,4267,4266,4267,4138,4138,4137,4266,4265,4266,4137,4137,4136,4265,4264,4265,4136,4136,4135,4264,4263,4264,4135,4135,4134,4263,4262,4263,4134,4134,4133,4262,4261,4262,4133,4133,4132,4261,4260,4261,4132,4132,4131,4260,4259,4260,4131,4131,4130,4259,4258,4259,4130,4130,4129,4258,4257,4258,4129,4129,4128,4257,4256,4257,4128,4128,4127,4256,4255,4256,4127,4127,4126,4255,4254,4255,4126,4126,4125,4254,4253,4254,4125,4125,4124,4253,4252,4253,4124,4124,4123,4252,4251,4252,4123,4123,4122,4251,4250,4251,4122,4122,4121,4250,4249,4250,4121,4121,4120,4249,4248,4249,4120,4120,4119,4248,4247,4248,4119,4119,4118,4247,4246,4247,4118,4118,4117,4246,4245,4246,4117,4117,4116,4245,4244,4245,4116,4116,4115,4244,4243,4244,4115,4115,4114,4243,4242,4243,4114,4114,4113,4242,4241,4242,4113,4113,4112,4241,4240,4241,4112,4112,4111,4240,4239,4240,4111,4111,4110,4239,4238,4239,4110,4110,4109,4238,4237,4238,4109,4109,4108,4237,4236,4237,4108,4108,4107,4236,4235,4236,4107,4107,4106,4235,4234,4235,4106,4106,4105,4234,4233,4234,4105,4105,4104,4233,4232,4233,4104,4104,4103,4232,4231,4232,4103,4103,4102,4231,4230,4231,4102,4102,4101,4230,4229,4230,4101,4101,4100,4229,4228,4229,4100,4100,4099,4228,4227,4228,4099,4099,4098,4227,4226,4227,4098,4098,4097,4226,4225,4226,4097,4097,4096,4225,4224,4225,4096,4351,4350,4479,4478,4479,4350,4350,4349,4478,4477,4478,4349,4349,4348,4477,4476,4477,4348,4348,4347,4476,4475,4476,4347,4347,4346,4475,4474,4475,4346,4346,4345,4474,4473,4474,4345,4345,4344,4473,4472,4473,4344,4344,4343,4472,4471,4472,4343,4343,4342,4471,4470,4471,4342,4342,4341,4470,4469,4470,4341,4341,4340,4469,4468,4469,4340,4340,4339,4468,4467,4468,4339,4339,4338,4467,4466,4467,4338,4338,4337,4466,4465,4466,4337,4337,4336,4465,4464,4465,4336,4336,4335,4464,4463,4464,4335,4335,4334,4463,4462,4463,4334,4334,4333,4462,4461,4462,4333,4333,4332,4461,4460,4461,4332,4332,4331,4460,4459,4460,4331,4331,4330,4459,4458,4459,4330,4330,4329,4458,4457,4458,4329,4329,4328,4457,4456,4457,4328,4328,4327,4456,4455,4456,4327,4327,4326,4455,4454,4455,4326,4326,4325,4454,4453,4454,4325,4325,4324,4453,4452,4453,4324,4324,4323,4452,4451,4452,4323,4323,4322,4451,4450,4451,4322,4322,4321,4450,4449,4450,4321,4321,4320,4449,4448,4449,4320,4320,4319,4448,4447,4448,4319,4319,4318,4447,4446,4447,4318,4318,4317,4446,4445,4446,4317,4317,4316,4445,4444,4445,4316,4316,4315,4444,4443,4444,4315,4315,4314,4443,4442,4443,4314,4314,4313,4442,4441,4442,4313,4313,4312,4441,4440,4441,4312,4312,4311,4440,4439,4440,4311,4311,4310,4439,4438,4439,4310,4310,4309,4438,4437,4438,4309,4309,4308,4437,4436,4437,4308,4308,4307,4436,4435,4436,4307,4307,4306,4435,4434,4435,4306,4306,4305,4434,4433,4434,4305,4305,4304,4433,4432,4433,4304,4304,4303,4432,4431,4432,4303,4303,4302,4431,4430,4431,4302,4302,4301,4430,4429,4430,4301,4301,4300,4429,4428,4429,4300,4300,4299,4428,4427,4428,4299,4299,4298,4427,4426,4427,4298,4298,4297,4426,4425,4426,4297,4297,4296,4425,4424,4425,4296,4296,4295,4424,4423,4424,4295,4295,4294,4423,4422,4423,4294,4294,4293,4422,4421,4422,4293,4293,4292,4421,4420,4421,4292,4292,4291,4420,4419,4420,4291,4291,4290,4419,4418,4419,4290,4290,4289,4418,4417,4418,4289,4289,4288,4417,4416,4417,4288,4288,4287,4416,4415,4416,4287,4287,4286,4415,4414,4415,4286,4286,4285,4414,4413,4414,4285,4285,4284,4413,4412,4413,4284,4284,4283,4412,4411,4412,4283,4283,4282,4411,4410,4411,4282,4282,4281,4410,4409,4410,4281,4281,4280,4409,4408,4409,4280,4280,4279,4408,4407,4408,4279,4279,4278,4407,4406,4407,4278,4278,4277,4406,4405,4406,4277,4277,4276,4405,4404,4405,4276,4276,4275,4404,4403,4404,4275,4275,4274,4403,4402,4403,4274,4274,4273,4402,4401,4402,4273,4273,4272,4401,4400,4401,4272,4272,4271,4400,4399,4400,4271,4271,4270,4399,4398,4399,4270,4270,4269,4398,4397,4398,4269,4269,4268,4397,4396,4397,4268,4268,4267,4396,4395,4396,4267,4267,4266,4395,4394,4395,4266,4266,4265,4394,4393,4394,4265,4265,4264,4393,4392,4393,4264,4264,4263,4392,4391,4392,4263,4263,4262,4391,4390,4391,4262,4262,4261,4390,4389,4390,4261,4261,4260,4389,4388,4389,4260,4260,4259,4388,4387,4388,4259,4259,4258,4387,4386,4387,4258,4258,4257,4386,4385,4386,4257,4257,4256,4385,4384,4385,4256,4256,4255,4384,4383,4384,4255,4255,4254,4383,4382,4383,4254,4254,4253,4382,4381,4382,4253,4253,4252,4381,4380,4381,4252,4252,4251,4380,4379,4380,4251,4251,4250,4379,4378,4379,4250,4250,4249,4378,4377,4378,4249,4249,4248,4377,4376,4377,4248,4248,4247,4376,4375,4376,4247,4247,4246,4375,4374,4375,4246,4246,4245,4374,4373,4374,4245,4245,4244,4373,4372,4373,4244,4244,4243,4372,4371,4372,4243,4243,4242,4371,4370,4371,4242,4242,4241,4370,4369,4370,4241,4241,4240,4369,4368,4369,4240,4240,4239,4368,4367,4368,4239,4239,4238,4367,4366,4367,4238,4238,4237,4366,4365,4366,4237,4237,4236,4365,4364,4365,4236,4236,4235,4364,4363,4364,4235,4235,4234,4363,4362,4363,4234,4234,4233,4362,4361,4362,4233,4233,4232,4361,4360,4361,4232,4232,4231,4360,4359,4360,4231,4231,4230,4359,4358,4359,4230,4230,4229,4358,4357,4358,4229,4229,4228,4357,4356,4357,4228,4228,4227,4356,4355,4356,4227,4227,4226,4355,4354,4355,4226,4226,4225,4354,4353,4354,4225,4225,4224,4353,4352,4353,4224,4479,4478,4607,4606,4607,4478,4478,4477,4606,4605,4606,4477,4477,4476,4605,4604,4605,4476,4476,4475,4604,4603,4604,4475,4475,4474,4603,4602,4603,4474,4474,4473,4602,4601,4602,4473,4473,4472,4601,4600,4601,4472,4472,4471,4600,4599,4600,4471,4471,4470,4599,4598,4599,4470,4470,4469,4598,4597,4598,4469,4469,4468,4597,4596,4597,4468,4468,4467,4596,4595,4596,4467,4467,4466,4595,4594,4595,4466,4466,4465,4594,4593,4594,4465,4465,4464,4593,4592,4593,4464,4464,4463,4592,4591,4592,4463,4463,4462,4591,4590,4591,4462,4462,4461,4590,4589,4590,4461,4461,4460,4589,4588,4589,4460,4460,4459,4588,4587,4588,4459,4459,4458,4587,4586,4587,4458,4458,4457,4586,4585,4586,4457,4457,4456,4585,4584,4585,4456,4456,4455,4584,4583,4584,4455,4455,4454,4583,4582,4583,4454,4454,4453,4582,4581,4582,4453,4453,4452,4581,4580,4581,4452,4452,4451,4580,4579,4580,4451,4451,4450,4579,4578,4579,4450,4450,4449,4578,4577,4578,4449,4449,4448,4577,4576,4577,4448,4448,4447,4576,4575,4576,4447,4447,4446,4575,4574,4575,4446,4446,4445,4574,4573,4574,4445,4445,4444,4573,4572,4573,4444,4444,4443,4572,4571,4572,4443,4443,4442,4571,4570,4571,4442,4442,4441,4570,4569,4570,4441,4441,4440,4569,4568,4569,4440,4440,4439,4568,4567,4568,4439,4439,4438,4567,4566,4567,4438,4438,4437,4566,4565,4566,4437,4437,4436,4565,4564,4565,4436,4436,4435,4564,4563,4564,4435,4435,4434,4563,4562,4563,4434,4434,4433,4562,4561,4562,4433,4433,4432,4561,4560,4561,4432,4432,4431,4560,4559,4560,4431,4431,4430,4559,4558,4559,4430,4430,4429,4558,4557,4558,4429,4429,4428,4557,4556,4557,4428,4428,4427,4556,4555,4556,4427,4427,4426,4555,4554,4555,4426,4426,4425,4554,4553,4554,4425,4425,4424,4553,4552,4553,4424,4424,4423,4552,4551,4552,4423,4423,4422,4551,4550,4551,4422,4422,4421,4550,4549,4550,4421,4421,4420,4549,4548,4549,4420,4420,4419,4548,4547,4548,4419,4419,4418,4547,4546,4547,4418,4418,4417,4546,4545,4546,4417,4417,4416,4545,4544,4545,4416,4416,4415,4544,4543,4544,4415,4415,4414,4543,4542,4543,4414,4414,4413,4542,4541,4542,4413,4413,4412,4541,4540,4541,4412,4412,4411,4540,4539,4540,4411,4411,4410,4539,4538,4539,4410,4410,4409,4538,4537,4538,4409,4409,4408,4537,4536,4537,4408,4408,4407,4536,4535,4536,4407,4407,4406,4535,4534,4535,4406,4406,4405,4534,4533,4534,4405,4405,4404,4533,4532,4533,4404,4404,4403,4532,4531,4532,4403,4403,4402,4531,4530,4531,4402,4402,4401,4530,4529,4530,4401,4401,4400,4529,4528,4529,4400,4400,4399,4528,4527,4528,4399,4399,4398,4527,4526,4527,4398,4398,4397,4526,4525,4526,4397,4397,4396,4525,4524,4525,4396,4396,4395,4524,4523,4524,4395,4395,4394,4523,4522,4523,4394,4394,4393,4522,4521,4522,4393,4393,4392,4521,4520,4521,4392,4392,4391,4520,4519,4520,4391,4391,4390,4519,4518,4519,4390,4390,4389,4518,4517,4518,4389,4389,4388,4517,4516,4517,4388,4388,4387,4516,4515,4516,4387,4387,4386,4515,4514,4515,4386,4386,4385,4514,4513,4514,4385,4385,4384,4513,4512,4513,4384,4384,4383,4512,4511,4512,4383,4383,4382,4511,4510,4511,4382,4382,4381,4510,4509,4510,4381,4381,4380,4509,4508,4509,4380,4380,4379,4508,4507,4508,4379,4379,4378,4507,4506,4507,4378,4378,4377,4506,4505,4506,4377,4377,4376,4505,4504,4505,4376,4376,4375,4504,4503,4504,4375,4375,4374,4503,4502,4503,4374,4374,4373,4502,4501,4502,4373,4373,4372,4501,4500,4501,4372,4372,4371,4500,4499,4500,4371,4371,4370,4499,4498,4499,4370,4370,4369,4498,4497,4498,4369,4369,4368,4497,4496,4497,4368,4368,4367,4496,4495,4496,4367,4367,4366,4495,4494,4495,4366,4366,4365,4494,4493,4494,4365,4365,4364,4493,4492,4493,4364,4364,4363,4492,4491,4492,4363,4363,4362,4491,4490,4491,4362,4362,4361,4490,4489,4490,4361,4361,4360,4489,4488,4489,4360,4360,4359,4488,4487,4488,4359,4359,4358,4487,4486,4487,4358,4358,4357,4486,4485,4486,4357,4357,4356,4485,4484,4485,4356,4356,4355,4484,4483,4484,4355,4355,4354,4483,4482,4483,4354,4354,4353,4482,4481,4482,4353,4353,4352,4481,4480,4481,4352,4607,4606,4735,4734,4735,4606,4606,4605,4734,4733,4734,4605,4605,4604,4733,4732,4733,4604,4604,4603,4732,4731,4732,4603,4603,4602,4731,4730,4731,4602,4602,4601,4730,4729,4730,4601,4601,4600,4729,4728,4729,4600,4600,4599,4728,4727,4728,4599,4599,4598,4727,4726,4727,4598,4598,4597,4726,4725,4726,4597,4597,4596,4725,4724,4725,4596,4596,4595,4724,4723,4724,4595,4595,4594,4723,4722,4723,4594,4594,4593,4722,4721,4722,4593,4593,4592,4721,4720,4721,4592,4592,4591,4720,4719,4720,4591,4591,4590,4719,4718,4719,4590,4590,4589,4718,4717,4718,4589,4589,4588,4717,4716,4717,4588,4588,4587,4716,4715,4716,4587,4587,4586,4715,4714,4715,4586,4586,4585,4714,4713,4714,4585,4585,4584,4713,4712,4713,4584,4584,4583,4712,4711,4712,4583,4583,4582,4711,4710,4711,4582,4582,4581,4710,4709,4710,4581,4581,4580,4709,4708,4709,4580,4580,4579,4708,4707,4708,4579,4579,4578,4707,4706,4707,4578,4578,4577,4706,4705,4706,4577,4577,4576,4705,4704,4705,4576,4576,4575,4704,4703,4704,4575,4575,4574,4703,4702,4703,4574,4574,4573,4702,4701,4702,4573,4573,4572,4701,4700,4701,4572,4572,4571,4700,4699,4700,4571,4571,4570,4699,4698,4699,4570,4570,4569,4698,4697,4698,4569,4569,4568,4697,4696,4697,4568,4568,4567,4696,4695,4696,4567,4567,4566,4695,4694,4695,4566,4566,4565,4694,4693,4694,4565,4565,4564,4693,4692,4693,4564,4564,4563,4692,4691,4692,4563,4563,4562,4691,4690,4691,4562,4562,4561,4690,4689,4690,4561,4561,4560,4689,4688,4689,4560,4560,4559,4688,4687,4688,4559,4559,4558,4687,4686,4687,4558,4558,4557,4686,4685,4686,4557,4557,4556,4685,4684,4685,4556,4556,4555,4684,4683,4684,4555,4555,4554,4683,4682,4683,4554,4554,4553,4682,4681,4682,4553,4553,4552,4681,4680,4681,4552,4552,4551,4680,4679,4680,4551,4551,4550,4679,4678,4679,4550,4550,4549,4678,4677,4678,4549,4549,4548,4677,4676,4677,4548,4548,4547,4676,4675,4676,4547,4547,4546,4675,4674,4675,4546,4546,4545,4674,4673,4674,4545,4545,4544,4673,4672,4673,4544,4544,4543,4672,4671,4672,4543,4543,4542,4671,4670,4671,4542,4542,4541,4670,4669,4670,4541,4541,4540,4669,4668,4669,4540,4540,4539,4668,4667,4668,4539,4539,4538,4667,4666,4667,4538,4538,4537,4666,4665,4666,4537,4537,4536,4665,4664,4665,4536,4536,4535,4664,4663,4664,4535,4535,4534,4663,4662,4663,4534,4534,4533,4662,4661,4662,4533,4533,4532,4661,4660,4661,4532,4532,4531,4660,4659,4660,4531,4531,4530,4659,4658,4659,4530,4530,4529,4658,4657,4658,4529,4529,4528,4657,4656,4657,4528,4528,4527,4656,4655,4656,4527,4527,4526,4655,4654,4655,4526,4526,4525,4654,4653,4654,4525,4525,4524,4653,4652,4653,4524,4524,4523,4652,4651,4652,4523,4523,4522,4651,4650,4651,4522,4522,4521,4650,4649,4650,4521,4521,4520,4649,4648,4649,4520,4520,4519,4648,4647,4648,4519,4519,4518,4647,4646,4647,4518,4518,4517,4646,4645,4646,4517,4517,4516,4645,4644,4645,4516,4516,4515,4644,4643,4644,4515,4515,4514,4643,4642,4643,4514,4514,4513,4642,4641,4642,4513,4513,4512,4641,4640,4641,4512,4512,4511,4640,4639,4640,4511,4511,4510,4639,4638,4639,4510,4510,4509,4638,4637,4638,4509,4509,4508,4637,4636,4637,4508,4508,4507,4636,4635,4636,4507,4507,4506,4635,4634,4635,4506,4506,4505,4634,4633,4634,4505,4505,4504,4633,4632,4633,4504,4504,4503,4632,4631,4632,4503,4503,4502,4631,4630,4631,4502,4502,4501,4630,4629,4630,4501,4501,4500,4629,4628,4629,4500,4500,4499,4628,4627,4628,4499,4499,4498,4627,4626,4627,4498,4498,4497,4626,4625,4626,4497,4497,4496,4625,4624,4625,4496,4496,4495,4624,4623,4624,4495,4495,4494,4623,4622,4623,4494,4494,4493,4622,4621,4622,4493,4493,4492,4621,4620,4621,4492,4492,4491,4620,4619,4620,4491,4491,4490,4619,4618,4619,4490,4490,4489,4618,4617,4618,4489,4489,4488,4617,4616,4617,4488,4488,4487,4616,4615,4616,4487,4487,4486,4615,4614,4615,4486,4486,4485,4614,4613,4614,4485,4485,4484,4613,4612,4613,4484,4484,4483,4612,4611,4612,4483,4483,4482,4611,4610,4611,4482,4482,4481,4610,4609,4610,4481,4481,4480,4609,4608,4609,4480,4735,4734,4863,4862,4863,4734,4734,4733,4862,4861,4862,4733,4733,4732,4861,4860,4861,4732,4732,4731,4860,4859,4860,4731,4731,4730,4859,4858,4859,4730,4730,4729,4858,4857,4858,4729,4729,4728,4857,4856,4857,4728,4728,4727,4856,4855,4856,4727,4727,4726,4855,4854,4855,4726,4726,4725,4854,4853,4854,4725,4725,4724,4853,4852,4853,4724,4724,4723,4852,4851,4852,4723,4723,4722,4851,4850,4851,4722,4722,4721,4850,4849,4850,4721,4721,4720,4849,4848,4849,4720,4720,4719,4848,4847,4848,4719,4719,4718,4847,4846,4847,4718,4718,4717,4846,4845,4846,4717,4717,4716,4845,4844,4845,4716,4716,4715,4844,4843,4844,4715,4715,4714,4843,4842,4843,4714,4714,4713,4842,4841,4842,4713,4713,4712,4841,4840,4841,4712,4712,4711,4840,4839,4840,4711,4711,4710,4839,4838,4839,4710,4710,4709,4838,4837,4838,4709,4709,4708,4837,4836,4837,4708,4708,4707,4836,4835,4836,4707,4707,4706,4835,4834,4835,4706,4706,4705,4834,4833,4834,4705,4705,4704,4833,4832,4833,4704,4704,4703,4832,4831,4832,4703,4703,4702,4831,4830,4831,4702,4702,4701,4830,4829,4830,4701,4701,4700,4829,4828,4829,4700,4700,4699,4828,4827,4828,4699,4699,4698,4827,4826,4827,4698,4698,4697,4826,4825,4826,4697,4697,4696,4825,4824,4825,4696,4696,4695,4824,4823,4824,4695,4695,4694,4823,4822,4823,4694,4694,4693,4822,4821,4822,4693,4693,4692,4821,4820,4821,4692,4692,4691,4820,4819,4820,4691,4691,4690,4819,4818,4819,4690,4690,4689,4818,4817,4818,4689,4689,4688,4817,4816,4817,4688,4688,4687,4816,4815,4816,4687,4687,4686,4815,4814,4815,4686,4686,4685,4814,4813,4814,4685,4685,4684,4813,4812,4813,4684,4684,4683,4812,4811,4812,4683,4683,4682,4811,4810,4811,4682,4682,4681,4810,4809,4810,4681,4681,4680,4809,4808,4809,4680,4680,4679,4808,4807,4808,4679,4679,4678,4807,4806,4807,4678,4678,4677,4806,4805,4806,4677,4677,4676,4805,4804,4805,4676,4676,4675,4804,4803,4804,4675,4675,4674,4803,4802,4803,4674,4674,4673,4802,4801,4802,4673,4673,4672,4801,4800,4801,4672,4672,4671,4800,4799,4800,4671,4671,4670,4799,4798,4799,4670,4670,4669,4798,4797,4798,4669,4669,4668,4797,4796,4797,4668,4668,4667,4796,4795,4796,4667,4667,4666,4795,4794,4795,4666,4666,4665,4794,4793,4794,4665,4665,4664,4793,4792,4793,4664,4664,4663,4792,4791,4792,4663,4663,4662,4791,4790,4791,4662,4662,4661,4790,4789,4790,4661,4661,4660,4789,4788,4789,4660,4660,4659,4788,4787,4788,4659,4659,4658,4787,4786,4787,4658,4658,4657,4786,4785,4786,4657,4657,4656,4785,4784,4785,4656,4656,4655,4784,4783,4784,4655,4655,4654,4783,4782,4783,4654,4654,4653,4782,4781,4782,4653,4653,4652,4781,4780,4781,4652,4652,4651,4780,4779,4780,4651,4651,4650,4779,4778,4779,4650,4650,4649,4778,4777,4778,4649,4649,4648,4777,4776,4777,4648,4648,4647,4776,4775,4776,4647,4647,4646,4775,4774,4775,4646,4646,4645,4774,4773,4774,4645,4645,4644,4773,4772,4773,4644,4644,4643,4772,4771,4772,4643,4643,4642,4771,4770,4771,4642,4642,4641,4770,4769,4770,4641,4641,4640,4769,4768,4769,4640,4640,4639,4768,4767,4768,4639,4639,4638,4767,4766,4767,4638,4638,4637,4766,4765,4766,4637,4637,4636,4765,4764,4765,4636,4636,4635,4764,4763,4764,4635,4635,4634,4763,4762,4763,4634,4634,4633,4762,4761,4762,4633,4633,4632,4761,4760,4761,4632,4632,4631,4760,4759,4760,4631,4631,4630,4759,4758,4759,4630,4630,4629,4758,4757,4758,4629,4629,4628,4757,4756,4757,4628,4628,4627,4756,4755,4756,4627,4627,4626,4755,4754,4755,4626,4626,4625,4754,4753,4754,4625,4625,4624,4753,4752,4753,4624,4624,4623,4752,4751,4752,4623,4623,4622,4751,4750,4751,4622,4622,4621,4750,4749,4750,4621,4621,4620,4749,4748,4749,4620,4620,4619,4748,4747,4748,4619,4619,4618,4747,4746,4747,4618,4618,4617,4746,4745,4746,4617,4617,4616,4745,4744,4745,4616,4616,4615,4744,4743,4744,4615,4615,4614,4743,4742,4743,4614,4614,4613,4742,4741,4742,4613,4613,4612,4741,4740,4741,4612,4612,4611,4740,4739,4740,4611,4611,4610,4739,4738,4739,4610,4610,4609,4738,4737,4738,4609,4609,4608,4737,4736,4737,4608,4863,4862,4991,4990,4991,4862,4862,4861,4990,4989,4990,4861,4861,4860,4989,4988,4989,4860,4860,4859,4988,4987,4988,4859,4859,4858,4987,4986,4987,4858,4858,4857,4986,4985,4986,4857,4857,4856,4985,4984,4985,4856,4856,4855,4984,4983,4984,4855,4855,4854,4983,4982,4983,4854,4854,4853,4982,4981,4982,4853,4853,4852,4981,4980,4981,4852,4852,4851,4980,4979,4980,4851,4851,4850,4979,4978,4979,4850,4850,4849,4978,4977,4978,4849,4849,4848,4977,4976,4977,4848,4848,4847,4976,4975,4976,4847,4847,4846,4975,4974,4975,4846,4846,4845,4974,4973,4974,4845,4845,4844,4973,4972,4973,4844,4844,4843,4972,4971,4972,4843,4843,4842,4971,4970,4971,4842,4842,4841,4970,4969,4970,4841,4841,4840,4969,4968,4969,4840,4840,4839,4968,4967,4968,4839,4839,4838,4967,4966,4967,4838,4838,4837,4966,4965,4966,4837,4837,4836,4965,4964,4965,4836,4836,4835,4964,4963,4964,4835,4835,4834,4963,4962,4963,4834,4834,4833,4962,4961,4962,4833,4833,4832,4961,4960,4961,4832,4832,4831,4960,4959,4960,4831,4831,4830,4959,4958,4959,4830,4830,4829,4958,4957,4958,4829,4829,4828,4957,4956,4957,4828,4828,4827,4956,4955,4956,4827,4827,4826,4955,4954,4955,4826,4826,4825,4954,4953,4954,4825,4825,4824,4953,4952,4953,4824,4824,4823,4952,4951,4952,4823,4823,4822,4951,4950,4951,4822,4822,4821,4950,4949,4950,4821,4821,4820,4949,4948,4949,4820,4820,4819,4948,4947,4948,4819,4819,4818,4947,4946,4947,4818,4818,4817,4946,4945,4946,4817,4817,4816,4945,4944,4945,4816,4816,4815,4944,4943,4944,4815,4815,4814,4943,4942,4943,4814,4814,4813,4942,4941,4942,4813,4813,4812,4941,4940,4941,4812,4812,4811,4940,4939,4940,4811,4811,4810,4939,4938,4939,4810,4810,4809,4938,4937,4938,4809,4809,4808,4937,4936,4937,4808,4808,4807,4936,4935,4936,4807,4807,4806,4935,4934,4935,4806,4806,4805,4934,4933,4934,4805,4805,4804,4933,4932,4933,4804,4804,4803,4932,4931,4932,4803,4803,4802,4931,4930,4931,4802,4802,4801,4930,4929,4930,4801,4801,4800,4929,4928,4929,4800,4800,4799,4928,4927,4928,4799,4799,4798,4927,4926,4927,4798,4798,4797,4926,4925,4926,4797,4797,4796,4925,4924,4925,4796,4796,4795,4924,4923,4924,4795,4795,4794,4923,4922,4923,4794,4794,4793,4922,4921,4922,4793,4793,4792,4921,4920,4921,4792,4792,4791,4920,4919,4920,4791,4791,4790,4919,4918,4919,4790,4790,4789,4918,4917,4918,4789,4789,4788,4917,4916,4917,4788,4788,4787,4916,4915,4916,4787,4787,4786,4915,4914,4915,4786,4786,4785,4914,4913,4914,4785,4785,4784,4913,4912,4913,4784,4784,4783,4912,4911,4912,4783,4783,4782,4911,4910,4911,4782,4782,4781,4910,4909,4910,4781,4781,4780,4909,4908,4909,4780,4780,4779,4908,4907,4908,4779,4779,4778,4907,4906,4907,4778,4778,4777,4906,4905,4906,4777,4777,4776,4905,4904,4905,4776,4776,4775,4904,4903,4904,4775,4775,4774,4903,4902,4903,4774,4774,4773,4902,4901,4902,4773,4773,4772,4901,4900,4901,4772,4772,4771,4900,4899,4900,4771,4771,4770,4899,4898,4899,4770,4770,4769,4898,4897,4898,4769,4769,4768,4897,4896,4897,4768,4768,4767,4896,4895,4896,4767,4767,4766,4895,4894,4895,4766,4766,4765,4894,4893,4894,4765,4765,4764,4893,4892,4893,4764,4764,4763,4892,4891,4892,4763,4763,4762,4891,4890,4891,4762,4762,4761,4890,4889,4890,4761,4761,4760,4889,4888,4889,4760,4760,4759,4888,4887,4888,4759,4759,4758,4887,4886,4887,4758,4758,4757,4886,4885,4886,4757,4757,4756,4885,4884,4885,4756,4756,4755,4884,4883,4884,4755,4755,4754,4883,4882,4883,4754,4754,4753,4882,4881,4882,4753,4753,4752,4881,4880,4881,4752,4752,4751,4880,4879,4880,4751,4751,4750,4879,4878,4879,4750,4750,4749,4878,4877,4878,4749,4749,4748,4877,4876,4877,4748,4748,4747,4876,4875,4876,4747,4747,4746,4875,4874,4875,4746,4746,4745,4874,4873,4874,4745,4745,4744,4873,4872,4873,4744,4744,4743,4872,4871,4872,4743,4743,4742,4871,4870,4871,4742,4742,4741,4870,4869,4870,4741,4741,4740,4869,4868,4869,4740,4740,4739,4868,4867,4868,4739,4739,4738,4867,4866,4867,4738,4738,4737,4866,4865,4866,4737,4737,4736,4865,4864,4865,4736,4991,4990,5119,5118,5119,4990,4990,4989,5118,5117,5118,4989,4989,4988,5117,5116,5117,4988,4988,4987,5116,5115,5116,4987,4987,4986,5115,5114,5115,4986,4986,4985,5114,5113,5114,4985,4985,4984,5113,5112,5113,4984,4984,4983,5112,5111,5112,4983,4983,4982,5111,5110,5111,4982,4982,4981,5110,5109,5110,4981,4981,4980,5109,5108,5109,4980,4980,4979,5108,5107,5108,4979,4979,4978,5107,5106,5107,4978,4978,4977,5106,5105,5106,4977,4977,4976,5105,5104,5105,4976,4976,4975,5104,5103,5104,4975,4975,4974,5103,5102,5103,4974,4974,4973,5102,5101,5102,4973,4973,4972,5101,5100,5101,4972,4972,4971,5100,5099,5100,4971,4971,4970,5099,5098,5099,4970,4970,4969,5098,5097,5098,4969,4969,4968,5097,5096,5097,4968,4968,4967,5096,5095,5096,4967,4967,4966,5095,5094,5095,4966,4966,4965,5094,5093,5094,4965,4965,4964,5093,5092,5093,4964,4964,4963,5092,5091,5092,4963,4963,4962,5091,5090,5091,4962,4962,4961,5090,5089,5090,4961,4961,4960,5089,5088,5089,4960,4960,4959,5088,5087,5088,4959,4959,4958,5087,5086,5087,4958,4958,4957,5086,5085,5086,4957,4957,4956,5085,5084,5085,4956,4956,4955,5084,5083,5084,4955,4955,4954,5083,5082,5083,4954,4954,4953,5082,5081,5082,4953,4953,4952,5081,5080,5081,4952,4952,4951,5080,5079,5080,4951,4951,4950,5079,5078,5079,4950,4950,4949,5078,5077,5078,4949,4949,4948,5077,5076,5077,4948,4948,4947,5076,5075,5076,4947,4947,4946,5075,5074,5075,4946,4946,4945,5074,5073,5074,4945,4945,4944,5073,5072,5073,4944,4944,4943,5072,5071,5072,4943,4943,4942,5071,5070,5071,4942,4942,4941,5070,5069,5070,4941,4941,4940,5069,5068,5069,4940,4940,4939,5068,5067,5068,4939,4939,4938,5067,5066,5067,4938,4938,4937,5066,5065,5066,4937,4937,4936,5065,5064,5065,4936,4936,4935,5064,5063,5064,4935,4935,4934,5063,5062,5063,4934,4934,4933,5062,5061,5062,4933,4933,4932,5061,5060,5061,4932,4932,4931,5060,5059,5060,4931,4931,4930,5059,5058,5059,4930,4930,4929,5058,5057,5058,4929,4929,4928,5057,5056,5057,4928,4928,4927,5056,5055,5056,4927,4927,4926,5055,5054,5055,4926,4926,4925,5054,5053,5054,4925,4925,4924,5053,5052,5053,4924,4924,4923,5052,5051,5052,4923,4923,4922,5051,5050,5051,4922,4922,4921,5050,5049,5050,4921,4921,4920,5049,5048,5049,4920,4920,4919,5048,5047,5048,4919,4919,4918,5047,5046,5047,4918,4918,4917,5046,5045,5046,4917,4917,4916,5045,5044,5045,4916,4916,4915,5044,5043,5044,4915,4915,4914,5043,5042,5043,4914,4914,4913,5042,5041,5042,4913,4913,4912,5041,5040,5041,4912,4912,4911,5040,5039,5040,4911,4911,4910,5039,5038,5039,4910,4910,4909,5038,5037,5038,4909,4909,4908,5037,5036,5037,4908,4908,4907,5036,5035,5036,4907,4907,4906,5035,5034,5035,4906,4906,4905,5034,5033,5034,4905,4905,4904,5033,5032,5033,4904,4904,4903,5032,5031,5032,4903,4903,4902,5031,5030,5031,4902,4902,4901,5030,5029,5030,4901,4901,4900,5029,5028,5029,4900,4900,4899,5028,5027,5028,4899,4899,4898,5027,5026,5027,4898,4898,4897,5026,5025,5026,4897,4897,4896,5025,5024,5025,4896,4896,4895,5024,5023,5024,4895,4895,4894,5023,5022,5023,4894,4894,4893,5022,5021,5022,4893,4893,4892,5021,5020,5021,4892,4892,4891,5020,5019,5020,4891,4891,4890,5019,5018,5019,4890,4890,4889,5018,5017,5018,4889,4889,4888,5017,5016,5017,4888,4888,4887,5016,5015,5016,4887,4887,4886,5015,5014,5015,4886,4886,4885,5014,5013,5014,4885,4885,4884,5013,5012,5013,4884,4884,4883,5012,5011,5012,4883,4883,4882,5011,5010,5011,4882,4882,4881,5010,5009,5010,4881,4881,4880,5009,5008,5009,4880,4880,4879,5008,5007,5008,4879,4879,4878,5007,5006,5007,4878,4878,4877,5006,5005,5006,4877,4877,4876,5005,5004,5005,4876,4876,4875,5004,5003,5004,4875,4875,4874,5003,5002,5003,4874,4874,4873,5002,5001,5002,4873,4873,4872,5001,5000,5001,4872,4872,4871,5000,4999,5000,4871,4871,4870,4999,4998,4999,4870,4870,4869,4998,4997,4998,4869,4869,4868,4997,4996,4997,4868,4868,4867,4996,4995,4996,4867,4867,4866,4995,4994,4995,4866,4866,4865,4994,4993,4994,4865,4865,4864,4993,4992,4993,4864,5119,5118,5247,5246,5247,5118,5118,5117,5246,5245,5246,5117,5117,5116,5245,5244,5245,5116,5116,5115,5244,5243,5244,5115,5115,5114,5243,5242,5243,5114,5114,5113,5242,5241,5242,5113,5113,5112,5241,5240,5241,5112,5112,5111,5240,5239,5240,5111,5111,5110,5239,5238,5239,5110,5110,5109,5238,5237,5238,5109,5109,5108,5237,5236,5237,5108,5108,5107,5236,5235,5236,5107,5107,5106,5235,5234,5235,5106,5106,5105,5234,5233,5234,5105,5105,5104,5233,5232,5233,5104,5104,5103,5232,5231,5232,5103,5103,5102,5231,5230,5231,5102,5102,5101,5230,5229,5230,5101,5101,5100,5229,5228,5229,5100,5100,5099,5228,5227,5228,5099,5099,5098,5227,5226,5227,5098,5098,5097,5226,5225,5226,5097,5097,5096,5225,5224,5225,5096,5096,5095,5224,5223,5224,5095,5095,5094,5223,5222,5223,5094,5094,5093,5222,5221,5222,5093,5093,5092,5221,5220,5221,5092,5092,5091,5220,5219,5220,5091,5091,5090,5219,5218,5219,5090,5090,5089,5218,5217,5218,5089,5089,5088,5217,5216,5217,5088,5088,5087,5216,5215,5216,5087,5087,5086,5215,5214,5215,5086,5086,5085,5214,5213,5214,5085,5085,5084,5213,5212,5213,5084,5084,5083,5212,5211,5212,5083,5083,5082,5211,5210,5211,5082,5082,5081,5210,5209,5210,5081,5081,5080,5209,5208,5209,5080,5080,5079,5208,5207,5208,5079,5079,5078,5207,5206,5207,5078,5078,5077,5206,5205,5206,5077,5077,5076,5205,5204,5205,5076,5076,5075,5204,5203,5204,5075,5075,5074,5203,5202,5203,5074,5074,5073,5202,5201,5202,5073,5073,5072,5201,5200,5201,5072,5072,5071,5200,5199,5200,5071,5071,5070,5199,5198,5199,5070,5070,5069,5198,5197,5198,5069,5069,5068,5197,5196,5197,5068,5068,5067,5196,5195,5196,5067,5067,5066,5195,5194,5195,5066,5066,5065,5194,5193,5194,5065,5065,5064,5193,5192,5193,5064,5064,5063,5192,5191,5192,5063,5063,5062,5191,5190,5191,5062,5062,5061,5190,5189,5190,5061,5061,5060,5189,5188,5189,5060,5060,5059,5188,5187,5188,5059,5059,5058,5187,5186,5187,5058,5058,5057,5186,5185,5186,5057,5057,5056,5185,5184,5185,5056,5056,5055,5184,5183,5184,5055,5055,5054,5183,5182,5183,5054,5054,5053,5182,5181,5182,5053,5053,5052,5181,5180,5181,5052,5052,5051,5180,5179,5180,5051,5051,5050,5179,5178,5179,5050,5050,5049,5178,5177,5178,5049,5049,5048,5177,5176,5177,5048,5048,5047,5176,5175,5176,5047,5047,5046,5175,5174,5175,5046,5046,5045,5174,5173,5174,5045,5045,5044,5173,5172,5173,5044,5044,5043,5172,5171,5172,5043,5043,5042,5171,5170,5171,5042,5042,5041,5170,5169,5170,5041,5041,5040,5169,5168,5169,5040,5040,5039,5168,5167,5168,5039,5039,5038,5167,5166,5167,5038,5038,5037,5166,5165,5166,5037,5037,5036,5165,5164,5165,5036,5036,5035,5164,5163,5164,5035,5035,5034,5163,5162,5163,5034,5034,5033,5162,5161,5162,5033,5033,5032,5161,5160,5161,5032,5032,5031,5160,5159,5160,5031,5031,5030,5159,5158,5159,5030,5030,5029,5158,5157,5158,5029,5029,5028,5157,5156,5157,5028,5028,5027,5156,5155,5156,5027,5027,5026,5155,5154,5155,5026,5026,5025,5154,5153,5154,5025,5025,5024,5153,5152,5153,5024,5024,5023,5152,5151,5152,5023,5023,5022,5151,5150,5151,5022,5022,5021,5150,5149,5150,5021,5021,5020,5149,5148,5149,5020,5020,5019,5148,5147,5148,5019,5019,5018,5147,5146,5147,5018,5018,5017,5146,5145,5146,5017,5017,5016,5145,5144,5145,5016,5016,5015,5144,5143,5144,5015,5015,5014,5143,5142,5143,5014,5014,5013,5142,5141,5142,5013,5013,5012,5141,5140,5141,5012,5012,5011,5140,5139,5140,5011,5011,5010,5139,5138,5139,5010,5010,5009,5138,5137,5138,5009,5009,5008,5137,5136,5137,5008,5008,5007,5136,5135,5136,5007,5007,5006,5135,5134,5135,5006,5006,5005,5134,5133,5134,5005,5005,5004,5133,5132,5133,5004,5004,5003,5132,5131,5132,5003,5003,5002,5131,5130,5131,5002,5002,5001,5130,5129,5130,5001,5001,5000,5129,5128,5129,5000,5000,4999,5128,5127,5128,4999,4999,4998,5127,5126,5127,4998,4998,4997,5126,5125,5126,4997,4997,4996,5125,5124,5125,4996,4996,4995,5124,5123,5124,4995,4995,4994,5123,5122,5123,4994,4994,4993,5122,5121,5122,4993,4993,4992,5121,5120,5121,4992,5247,5246,5375,5374,5375,5246,5246,5245,5374,5373,5374,5245,5245,5244,5373,5372,5373,5244,5244,5243,5372,5371,5372,5243,5243,5242,5371,5370,5371,5242,5242,5241,5370,5369,5370,5241,5241,5240,5369,5368,5369,5240,5240,5239,5368,5367,5368,5239,5239,5238,5367,5366,5367,5238,5238,5237,5366,5365,5366,5237,5237,5236,5365,5364,5365,5236,5236,5235,5364,5363,5364,5235,5235,5234,5363,5362,5363,5234,5234,5233,5362,5361,5362,5233,5233,5232,5361,5360,5361,5232,5232,5231,5360,5359,5360,5231,5231,5230,5359,5358,5359,5230,5230,5229,5358,5357,5358,5229,5229,5228,5357,5356,5357,5228,5228,5227,5356,5355,5356,5227,5227,5226,5355,5354,5355,5226,5226,5225,5354,5353,5354,5225,5225,5224,5353,5352,5353,5224,5224,5223,5352,5351,5352,5223,5223,5222,5351,5350,5351,5222,5222,5221,5350,5349,5350,5221,5221,5220,5349,5348,5349,5220,5220,5219,5348,5347,5348,5219,5219,5218,5347,5346,5347,5218,5218,5217,5346,5345,5346,5217,5217,5216,5345,5344,5345,5216,5216,5215,5344,5343,5344,5215,5215,5214,5343,5342,5343,5214,5214,5213,5342,5341,5342,5213,5213,5212,5341,5340,5341,5212,5212,5211,5340,5339,5340,5211,5211,5210,5339,5338,5339,5210,5210,5209,5338,5337,5338,5209,5209,5208,5337,5336,5337,5208,5208,5207,5336,5335,5336,5207,5207,5206,5335,5334,5335,5206,5206,5205,5334,5333,5334,5205,5205,5204,5333,5332,5333,5204,5204,5203,5332,5331,5332,5203,5203,5202,5331,5330,5331,5202,5202,5201,5330,5329,5330,5201,5201,5200,5329,5328,5329,5200,5200,5199,5328,5327,5328,5199,5199,5198,5327,5326,5327,5198,5198,5197,5326,5325,5326,5197,5197,5196,5325,5324,5325,5196,5196,5195,5324,5323,5324,5195,5195,5194,5323,5322,5323,5194,5194,5193,5322,5321,5322,5193,5193,5192,5321,5320,5321,5192,5192,5191,5320,5319,5320,5191,5191,5190,5319,5318,5319,5190,5190,5189,5318,5317,5318,5189,5189,5188,5317,5316,5317,5188,5188,5187,5316,5315,5316,5187,5187,5186,5315,5314,5315,5186,5186,5185,5314,5313,5314,5185,5185,5184,5313,5312,5313,5184,5184,5183,5312,5311,5312,5183,5183,5182,5311,5310,5311,5182,5182,5181,5310,5309,5310,5181,5181,5180,5309,5308,5309,5180,5180,5179,5308,5307,5308,5179,5179,5178,5307,5306,5307,5178,5178,5177,5306,5305,5306,5177,5177,5176,5305,5304,5305,5176,5176,5175,5304,5303,5304,5175,5175,5174,5303,5302,5303,5174,5174,5173,5302,5301,5302,5173,5173,5172,5301,5300,5301,5172,5172,5171,5300,5299,5300,5171,5171,5170,5299,5298,5299,5170,5170,5169,5298,5297,5298,5169,5169,5168,5297,5296,5297,5168,5168,5167,5296,5295,5296,5167,5167,5166,5295,5294,5295,5166,5166,5165,5294,5293,5294,5165,5165,5164,5293,5292,5293,5164,5164,5163,5292,5291,5292,5163,5163,5162,5291,5290,5291,5162,5162,5161,5290,5289,5290,5161,5161,5160,5289,5288,5289,5160,5160,5159,5288,5287,5288,5159,5159,5158,5287,5286,5287,5158,5158,5157,5286,5285,5286,5157,5157,5156,5285,5284,5285,5156,5156,5155,5284,5283,5284,5155,5155,5154,5283,5282,5283,5154,5154,5153,5282,5281,5282,5153,5153,5152,5281,5280,5281,5152,5152,5151,5280,5279,5280,5151,5151,5150,5279,5278,5279,5150,5150,5149,5278,5277,5278,5149,5149,5148,5277,5276,5277,5148,5148,5147,5276,5275,5276,5147,5147,5146,5275,5274,5275,5146,5146,5145,5274,5273,5274,5145,5145,5144,5273,5272,5273,5144,5144,5143,5272,5271,5272,5143,5143,5142,5271,5270,5271,5142,5142,5141,5270,5269,5270,5141,5141,5140,5269,5268,5269,5140,5140,5139,5268,5267,5268,5139,5139,5138,5267,5266,5267,5138,5138,5137,5266,5265,5266,5137,5137,5136,5265,5264,5265,5136,5136,5135,5264,5263,5264,5135,5135,5134,5263,5262,5263,5134,5134,5133,5262,5261,5262,5133,5133,5132,5261,5260,5261,5132,5132,5131,5260,5259,5260,5131,5131,5130,5259,5258,5259,5130,5130,5129,5258,5257,5258,5129,5129,5128,5257,5256,5257,5128,5128,5127,5256,5255,5256,5127,5127,5126,5255,5254,5255,5126,5126,5125,5254,5253,5254,5125,5125,5124,5253,5252,5253,5124,5124,5123,5252,5251,5252,5123,5123,5122,5251,5250,5251,5122,5122,5121,5250,5249,5250,5121,5121,5120,5249,5248,5249,5120,5375,5374,5503,5502,5503,5374,5374,5373,5502,5501,5502,5373,5373,5372,5501,5500,5501,5372,5372,5371,5500,5499,5500,5371,5371,5370,5499,5498,5499,5370,5370,5369,5498,5497,5498,5369,5369,5368,5497,5496,5497,5368,5368,5367,5496,5495,5496,5367,5367,5366,5495,5494,5495,5366,5366,5365,5494,5493,5494,5365,5365,5364,5493,5492,5493,5364,5364,5363,5492,5491,5492,5363,5363,5362,5491,5490,5491,5362,5362,5361,5490,5489,5490,5361,5361,5360,5489,5488,5489,5360,5360,5359,5488,5487,5488,5359,5359,5358,5487,5486,5487,5358,5358,5357,5486,5485,5486,5357,5357,5356,5485,5484,5485,5356,5356,5355,5484,5483,5484,5355,5355,5354,5483,5482,5483,5354,5354,5353,5482,5481,5482,5353,5353,5352,5481,5480,5481,5352,5352,5351,5480,5479,5480,5351,5351,5350,5479,5478,5479,5350,5350,5349,5478,5477,5478,5349,5349,5348,5477,5476,5477,5348,5348,5347,5476,5475,5476,5347,5347,5346,5475,5474,5475,5346,5346,5345,5474,5473,5474,5345,5345,5344,5473,5472,5473,5344,5344,5343,5472,5471,5472,5343,5343,5342,5471,5470,5471,5342,5342,5341,5470,5469,5470,5341,5341,5340,5469,5468,5469,5340,5340,5339,5468,5467,5468,5339,5339,5338,5467,5466,5467,5338,5338,5337,5466,5465,5466,5337,5337,5336,5465,5464,5465,5336,5336,5335,5464,5463,5464,5335,5335,5334,5463,5462,5463,5334,5334,5333,5462,5461,5462,5333,5333,5332,5461,5460,5461,5332,5332,5331,5460,5459,5460,5331,5331,5330,5459,5458,5459,5330,5330,5329,5458,5457,5458,5329,5329,5328,5457,5456,5457,5328,5328,5327,5456,5455,5456,5327,5327,5326,5455,5454,5455,5326,5326,5325,5454,5453,5454,5325,5325,5324,5453,5452,5453,5324,5324,5323,5452,5451,5452,5323,5323,5322,5451,5450,5451,5322,5322,5321,5450,5449,5450,5321,5321,5320,5449,5448,5449,5320,5320,5319,5448,5447,5448,5319,5319,5318,5447,5446,5447,5318,5318,5317,5446,5445,5446,5317,5317,5316,5445,5444,5445,5316,5316,5315,5444,5443,5444,5315,5315,5314,5443,5442,5443,5314,5314,5313,5442,5441,5442,5313,5313,5312,5441,5440,5441,5312,5312,5311,5440,5439,5440,5311,5311,5310,5439,5438,5439,5310,5310,5309,5438,5437,5438,5309,5309,5308,5437,5436,5437,5308,5308,5307,5436,5435,5436,5307,5307,5306,5435,5434,5435,5306,5306,5305,5434,5433,5434,5305,5305,5304,5433,5432,5433,5304,5304,5303,5432,5431,5432,5303,5303,5302,5431,5430,5431,5302,5302,5301,5430,5429,5430,5301,5301,5300,5429,5428,5429,5300,5300,5299,5428,5427,5428,5299,5299,5298,5427,5426,5427,5298,5298,5297,5426,5425,5426,5297,5297,5296,5425,5424,5425,5296,5296,5295,5424,5423,5424,5295,5295,5294,5423,5422,5423,5294,5294,5293,5422,5421,5422,5293,5293,5292,5421,5420,5421,5292,5292,5291,5420,5419,5420,5291,5291,5290,5419,5418,5419,5290,5290,5289,5418,5417,5418,5289,5289,5288,5417,5416,5417,5288,5288,5287,5416,5415,5416,5287,5287,5286,5415,5414,5415,5286,5286,5285,5414,5413,5414,5285,5285,5284,5413,5412,5413,5284,5284,5283,5412,5411,5412,5283,5283,5282,5411,5410,5411,5282,5282,5281,5410,5409,5410,5281,5281,5280,5409,5408,5409,5280,5280,5279,5408,5407,5408,5279,5279,5278,5407,5406,5407,5278,5278,5277,5406,5405,5406,5277,5277,5276,5405,5404,5405,5276,5276,5275,5404,5403,5404,5275,5275,5274,5403,5402,5403,5274,5274,5273,5402,5401,5402,5273,5273,5272,5401,5400,5401,5272,5272,5271,5400,5399,5400,5271,5271,5270,5399,5398,5399,5270,5270,5269,5398,5397,5398,5269,5269,5268,5397,5396,5397,5268,5268,5267,5396,5395,5396,5267,5267,5266,5395,5394,5395,5266,5266,5265,5394,5393,5394,5265,5265,5264,5393,5392,5393,5264,5264,5263,5392,5391,5392,5263,5263,5262,5391,5390,5391,5262,5262,5261,5390,5389,5390,5261,5261,5260,5389,5388,5389,5260,5260,5259,5388,5387,5388,5259,5259,5258,5387,5386,5387,5258,5258,5257,5386,5385,5386,5257,5257,5256,5385,5384,5385,5256,5256,5255,5384,5383,5384,5255,5255,5254,5383,5382,5383,5254,5254,5253,5382,5381,5382,5253,5253,5252,5381,5380,5381,5252,5252,5251,5380,5379,5380,5251,5251,5250,5379,5378,5379,5250,5250,5249,5378,5377,5378,5249,5249,5248,5377,5376,5377,5248,5503,5502,5631,5630,5631,5502,5502,5501,5630,5629,5630,5501,5501,5500,5629,5628,5629,5500,5500,5499,5628,5627,5628,5499,5499,5498,5627,5626,5627,5498,5498,5497,5626,5625,5626,5497,5497,5496,5625,5624,5625,5496,5496,5495,5624,5623,5624,5495,5495,5494,5623,5622,5623,5494,5494,5493,5622,5621,5622,5493,5493,5492,5621,5620,5621,5492,5492,5491,5620,5619,5620,5491,5491,5490,5619,5618,5619,5490,5490,5489,5618,5617,5618,5489,5489,5488,5617,5616,5617,5488,5488,5487,5616,5615,5616,5487,5487,5486,5615,5614,5615,5486,5486,5485,5614,5613,5614,5485,5485,5484,5613,5612,5613,5484,5484,5483,5612,5611,5612,5483,5483,5482,5611,5610,5611,5482,5482,5481,5610,5609,5610,5481,5481,5480,5609,5608,5609,5480,5480,5479,5608,5607,5608,5479,5479,5478,5607,5606,5607,5478,5478,5477,5606,5605,5606,5477,5477,5476,5605,5604,5605,5476,5476,5475,5604,5603,5604,5475,5475,5474,5603,5602,5603,5474,5474,5473,5602,5601,5602,5473,5473,5472,5601,5600,5601,5472,5472,5471,5600,5599,5600,5471,5471,5470,5599,5598,5599,5470,5470,5469,5598,5597,5598,5469,5469,5468,5597,5596,5597,5468,5468,5467,5596,5595,5596,5467,5467,5466,5595,5594,5595,5466,5466,5465,5594,5593,5594,5465,5465,5464,5593,5592,5593,5464,5464,5463,5592,5591,5592,5463,5463,5462,5591,5590,5591,5462,5462,5461,5590,5589,5590,5461,5461,5460,5589,5588,5589,5460,5460,5459,5588,5587,5588,5459,5459,5458,5587,5586,5587,5458,5458,5457,5586,5585,5586,5457,5457,5456,5585,5584,5585,5456,5456,5455,5584,5583,5584,5455,5455,5454,5583,5582,5583,5454,5454,5453,5582,5581,5582,5453,5453,5452,5581,5580,5581,5452,5452,5451,5580,5579,5580,5451,5451,5450,5579,5578,5579,5450,5450,5449,5578,5577,5578,5449,5449,5448,5577,5576,5577,5448,5448,5447,5576,5575,5576,5447,5447,5446,5575,5574,5575,5446,5446,5445,5574,5573,5574,5445,5445,5444,5573,5572,5573,5444,5444,5443,5572,5571,5572,5443,5443,5442,5571,5570,5571,5442,5442,5441,5570,5569,5570,5441,5441,5440,5569,5568,5569,5440,5440,5439,5568,5567,5568,5439,5439,5438,5567,5566,5567,5438,5438,5437,5566,5565,5566,5437,5437,5436,5565,5564,5565,5436,5436,5435,5564,5563,5564,5435,5435,5434,5563,5562,5563,5434,5434,5433,5562,5561,5562,5433,5433,5432,5561,5560,5561,5432,5432,5431,5560,5559,5560,5431,5431,5430,5559,5558,5559,5430,5430,5429,5558,5557,5558,5429,5429,5428,5557,5556,5557,5428,5428,5427,5556,5555,5556,5427,5427,5426,5555,5554,5555,5426,5426,5425,5554,5553,5554,5425,5425,5424,5553,5552,5553,5424,5424,5423,5552,5551,5552,5423,5423,5422,5551,5550,5551,5422,5422,5421,5550,5549,5550,5421,5421,5420,5549,5548,5549,5420,5420,5419,5548,5547,5548,5419,5419,5418,5547,5546,5547,5418,5418,5417,5546,5545,5546,5417,5417,5416,5545,5544,5545,5416,5416,5415,5544,5543,5544,5415,5415,5414,5543,5542,5543,5414,5414,5413,5542,5541,5542,5413,5413,5412,5541,5540,5541,5412,5412,5411,5540,5539,5540,5411,5411,5410,5539,5538,5539,5410,5410,5409,5538,5537,5538,5409,5409,5408,5537,5536,5537,5408,5408,5407,5536,5535,5536,5407,5407,5406,5535,5534,5535,5406,5406,5405,5534,5533,5534,5405,5405,5404,5533,5532,5533,5404,5404,5403,5532,5531,5532,5403,5403,5402,5531,5530,5531,5402,5402,5401,5530,5529,5530,5401,5401,5400,5529,5528,5529,5400,5400,5399,5528,5527,5528,5399,5399,5398,5527,5526,5527,5398,5398,5397,5526,5525,5526,5397,5397,5396,5525,5524,5525,5396,5396,5395,5524,5523,5524,5395,5395,5394,5523,5522,5523,5394,5394,5393,5522,5521,5522,5393,5393,5392,5521,5520,5521,5392,5392,5391,5520,5519,5520,5391,5391,5390,5519,5518,5519,5390,5390,5389,5518,5517,5518,5389,5389,5388,5517,5516,5517,5388,5388,5387,5516,5515,5516,5387,5387,5386,5515,5514,5515,5386,5386,5385,5514,5513,5514,5385,5385,5384,5513,5512,5513,5384,5384,5383,5512,5511,5512,5383,5383,5382,5511,5510,5511,5382,5382,5381,5510,5509,5510,5381,5381,5380,5509,5508,5509,5380,5380,5379,5508,5507,5508,5379,5379,5378,5507,5506,5507,5378,5378,5377,5506,5505,5506,5377,5377,5376,5505,5504,5505,5376,5631,5630,5759,5758,5759,5630,5630,5629,5758,5757,5758,5629,5629,5628,5757,5756,5757,5628,5628,5627,5756,5755,5756,5627,5627,5626,5755,5754,5755,5626,5626,5625,5754,5753,5754,5625,5625,5624,5753,5752,5753,5624,5624,5623,5752,5751,5752,5623,5623,5622,5751,5750,5751,5622,5622,5621,5750,5749,5750,5621,5621,5620,5749,5748,5749,5620,5620,5619,5748,5747,5748,5619,5619,5618,5747,5746,5747,5618,5618,5617,5746,5745,5746,5617,5617,5616,5745,5744,5745,5616,5616,5615,5744,5743,5744,5615,5615,5614,5743,5742,5743,5614,5614,5613,5742,5741,5742,5613,5613,5612,5741,5740,5741,5612,5612,5611,5740,5739,5740,5611,5611,5610,5739,5738,5739,5610,5610,5609,5738,5737,5738,5609,5609,5608,5737,5736,5737,5608,5608,5607,5736,5735,5736,5607,5607,5606,5735,5734,5735,5606,5606,5605,5734,5733,5734,5605,5605,5604,5733,5732,5733,5604,5604,5603,5732,5731,5732,5603,5603,5602,5731,5730,5731,5602,5602,5601,5730,5729,5730,5601,5601,5600,5729,5728,5729,5600,5600,5599,5728,5727,5728,5599,5599,5598,5727,5726,5727,5598,5598,5597,5726,5725,5726,5597,5597,5596,5725,5724,5725,5596,5596,5595,5724,5723,5724,5595,5595,5594,5723,5722,5723,5594,5594,5593,5722,5721,5722,5593,5593,5592,5721,5720,5721,5592,5592,5591,5720,5719,5720,5591,5591,5590,5719,5718,5719,5590,5590,5589,5718,5717,5718,5589,5589,5588,5717,5716,5717,5588,5588,5587,5716,5715,5716,5587,5587,5586,5715,5714,5715,5586,5586,5585,5714,5713,5714,5585,5585,5584,5713,5712,5713,5584,5584,5583,5712,5711,5712,5583,5583,5582,5711,5710,5711,5582,5582,5581,5710,5709,5710,5581,5581,5580,5709,5708,5709,5580,5580,5579,5708,5707,5708,5579,5579,5578,5707,5706,5707,5578,5578,5577,5706,5705,5706,5577,5577,5576,5705,5704,5705,5576,5576,5575,5704,5703,5704,5575,5575,5574,5703,5702,5703,5574,5574,5573,5702,5701,5702,5573,5573,5572,5701,5700,5701,5572,5572,5571,5700,5699,5700,5571,5571,5570,5699,5698,5699,5570,5570,5569,5698,5697,5698,5569,5569,5568,5697,5696,5697,5568,5568,5567,5696,5695,5696,5567,5567,5566,5695,5694,5695,5566,5566,5565,5694,5693,5694,5565,5565,5564,5693,5692,5693,5564,5564,5563,5692,5691,5692,5563,5563,5562,5691,5690,5691,5562,5562,5561,5690,5689,5690,5561,5561,5560,5689,5688,5689,5560,5560,5559,5688,5687,5688,5559,5559,5558,5687,5686,5687,5558,5558,5557,5686,5685,5686,5557,5557,5556,5685,5684,5685,5556,5556,5555,5684,5683,5684,5555,5555,5554,5683,5682,5683,5554,5554,5553,5682,5681,5682,5553,5553,5552,5681,5680,5681,5552,5552,5551,5680,5679,5680,5551,5551,5550,5679,5678,5679,5550,5550,5549,5678,5677,5678,5549,5549,5548,5677,5676,5677,5548,5548,5547,5676,5675,5676,5547,5547,5546,5675,5674,5675,5546,5546,5545,5674,5673,5674,5545,5545,5544,5673,5672,5673,5544,5544,5543,5672,5671,5672,5543,5543,5542,5671,5670,5671,5542,5542,5541,5670,5669,5670,5541,5541,5540,5669,5668,5669,5540,5540,5539,5668,5667,5668,5539,5539,5538,5667,5666,5667,5538,5538,5537,5666,5665,5666,5537,5537,5536,5665,5664,5665,5536,5536,5535,5664,5663,5664,5535,5535,5534,5663,5662,5663,5534,5534,5533,5662,5661,5662,5533,5533,5532,5661,5660,5661,5532,5532,5531,5660,5659,5660,5531,5531,5530,5659,5658,5659,5530,5530,5529,5658,5657,5658,5529,5529,5528,5657,5656,5657,5528,5528,5527,5656,5655,5656,5527,5527,5526,5655,5654,5655,5526,5526,5525,5654,5653,5654,5525,5525,5524,5653,5652,5653,5524,5524,5523,5652,5651,5652,5523,5523,5522,5651,5650,5651,5522,5522,5521,5650,5649,5650,5521,5521,5520,5649,5648,5649,5520,5520,5519,5648,5647,5648,5519,5519,5518,5647,5646,5647,5518,5518,5517,5646,5645,5646,5517,5517,5516,5645,5644,5645,5516,5516,5515,5644,5643,5644,5515,5515,5514,5643,5642,5643,5514,5514,5513,5642,5641,5642,5513,5513,5512,5641,5640,5641,5512,5512,5511,5640,5639,5640,5511,5511,5510,5639,5638,5639,5510,5510,5509,5638,5637,5638,5509,5509,5508,5637,5636,5637,5508,5508,5507,5636,5635,5636,5507,5507,5506,5635,5634,5635,5506,5506,5505,5634,5633,5634,5505,5505,5504,5633,5632,5633,5504,5759,5758,5887,5886,5887,5758,5758,5757,5886,5885,5886,5757,5757,5756,5885,5884,5885,5756,5756,5755,5884,5883,5884,5755,5755,5754,5883,5882,5883,5754,5754,5753,5882,5881,5882,5753,5753,5752,5881,5880,5881,5752,5752,5751,5880,5879,5880,5751,5751,5750,5879,5878,5879,5750,5750,5749,5878,5877,5878,5749,5749,5748,5877,5876,5877,5748,5748,5747,5876,5875,5876,5747,5747,5746,5875,5874,5875,5746,5746,5745,5874,5873,5874,5745,5745,5744,5873,5872,5873,5744,5744,5743,5872,5871,5872,5743,5743,5742,5871,5870,5871,5742,5742,5741,5870,5869,5870,5741,5741,5740,5869,5868,5869,5740,5740,5739,5868,5867,5868,5739,5739,5738,5867,5866,5867,5738,5738,5737,5866,5865,5866,5737,5737,5736,5865,5864,5865,5736,5736,5735,5864,5863,5864,5735,5735,5734,5863,5862,5863,5734,5734,5733,5862,5861,5862,5733,5733,5732,5861,5860,5861,5732,5732,5731,5860,5859,5860,5731,5731,5730,5859,5858,5859,5730,5730,5729,5858,5857,5858,5729,5729,5728,5857,5856,5857,5728,5728,5727,5856,5855,5856,5727,5727,5726,5855,5854,5855,5726,5726,5725,5854,5853,5854,5725,5725,5724,5853,5852,5853,5724,5724,5723,5852,5851,5852,5723,5723,5722,5851,5850,5851,5722,5722,5721,5850,5849,5850,5721,5721,5720,5849,5848,5849,5720,5720,5719,5848,5847,5848,5719,5719,5718,5847,5846,5847,5718,5718,5717,5846,5845,5846,5717,5717,5716,5845,5844,5845,5716,5716,5715,5844,5843,5844,5715,5715,5714,5843,5842,5843,5714,5714,5713,5842,5841,5842,5713,5713,5712,5841,5840,5841,5712,5712,5711,5840,5839,5840,5711,5711,5710,5839,5838,5839,5710,5710,5709,5838,5837,5838,5709,5709,5708,5837,5836,5837,5708,5708,5707,5836,5835,5836,5707,5707,5706,5835,5834,5835,5706,5706,5705,5834,5833,5834,5705,5705,5704,5833,5832,5833,5704,5704,5703,5832,5831,5832,5703,5703,5702,5831,5830,5831,5702,5702,5701,5830,5829,5830,5701,5701,5700,5829,5828,5829,5700,5700,5699,5828,5827,5828,5699,5699,5698,5827,5826,5827,5698,5698,5697,5826,5825,5826,5697,5697,5696,5825,5824,5825,5696,5696,5695,5824,5823,5824,5695,5695,5694,5823,5822,5823,5694,5694,5693,5822,5821,5822,5693,5693,5692,5821,5820,5821,5692,5692,5691,5820,5819,5820,5691,5691,5690,5819,5818,5819,5690,5690,5689,5818,5817,5818,5689,5689,5688,5817,5816,5817,5688,5688,5687,5816,5815,5816,5687,5687,5686,5815,5814,5815,5686,5686,5685,5814,5813,5814,5685,5685,5684,5813,5812,5813,5684,5684,5683,5812,5811,5812,5683,5683,5682,5811,5810,5811,5682,5682,5681,5810,5809,5810,5681,5681,5680,5809,5808,5809,5680,5680,5679,5808,5807,5808,5679,5679,5678,5807,5806,5807,5678,5678,5677,5806,5805,5806,5677,5677,5676,5805,5804,5805,5676,5676,5675,5804,5803,5804,5675,5675,5674,5803,5802,5803,5674,5674,5673,5802,5801,5802,5673,5673,5672,5801,5800,5801,5672,5672,5671,5800,5799,5800,5671,5671,5670,5799,5798,5799,5670,5670,5669,5798,5797,5798,5669,5669,5668,5797,5796,5797,5668,5668,5667,5796,5795,5796,5667,5667,5666,5795,5794,5795,5666,5666,5665,5794,5793,5794,5665,5665,5664,5793,5792,5793,5664,5664,5663,5792,5791,5792,5663,5663,5662,5791,5790,5791,5662,5662,5661,5790,5789,5790,5661,5661,5660,5789,5788,5789,5660,5660,5659,5788,5787,5788,5659,5659,5658,5787,5786,5787,5658,5658,5657,5786,5785,5786,5657,5657,5656,5785,5784,5785,5656,5656,5655,5784,5783,5784,5655,5655,5654,5783,5782,5783,5654,5654,5653,5782,5781,5782,5653,5653,5652,5781,5780,5781,5652,5652,5651,5780,5779,5780,5651,5651,5650,5779,5778,5779,5650,5650,5649,5778,5777,5778,5649,5649,5648,5777,5776,5777,5648,5648,5647,5776,5775,5776,5647,5647,5646,5775,5774,5775,5646,5646,5645,5774,5773,5774,5645,5645,5644,5773,5772,5773,5644,5644,5643,5772,5771,5772,5643,5643,5642,5771,5770,5771,5642,5642,5641,5770,5769,5770,5641,5641,5640,5769,5768,5769,5640,5640,5639,5768,5767,5768,5639,5639,5638,5767,5766,5767,5638,5638,5637,5766,5765,5766,5637,5637,5636,5765,5764,5765,5636,5636,5635,5764,5763,5764,5635,5635,5634,5763,5762,5763,5634,5634,5633,5762,5761,5762,5633,5633,5632,5761,5760,5761,5632,5887,5886,6015,6014,6015,5886,5886,5885,6014,6013,6014,5885,5885,5884,6013,6012,6013,5884,5884,5883,6012,6011,6012,5883,5883,5882,6011,6010,6011,5882,5882,5881,6010,6009,6010,5881,5881,5880,6009,6008,6009,5880,5880,5879,6008,6007,6008,5879,5879,5878,6007,6006,6007,5878,5878,5877,6006,6005,6006,5877,5877,5876,6005,6004,6005,5876,5876,5875,6004,6003,6004,5875,5875,5874,6003,6002,6003,5874,5874,5873,6002,6001,6002,5873,5873,5872,6001,6000,6001,5872,5872,5871,6000,5999,6000,5871,5871,5870,5999,5998,5999,5870,5870,5869,5998,5997,5998,5869,5869,5868,5997,5996,5997,5868,5868,5867,5996,5995,5996,5867,5867,5866,5995,5994,5995,5866,5866,5865,5994,5993,5994,5865,5865,5864,5993,5992,5993,5864,5864,5863,5992,5991,5992,5863,5863,5862,5991,5990,5991,5862,5862,5861,5990,5989,5990,5861,5861,5860,5989,5988,5989,5860,5860,5859,5988,5987,5988,5859,5859,5858,5987,5986,5987,5858,5858,5857,5986,5985,5986,5857,5857,5856,5985,5984,5985,5856,5856,5855,5984,5983,5984,5855,5855,5854,5983,5982,5983,5854,5854,5853,5982,5981,5982,5853,5853,5852,5981,5980,5981,5852,5852,5851,5980,5979,5980,5851,5851,5850,5979,5978,5979,5850,5850,5849,5978,5977,5978,5849,5849,5848,5977,5976,5977,5848,5848,5847,5976,5975,5976,5847,5847,5846,5975,5974,5975,5846,5846,5845,5974,5973,5974,5845,5845,5844,5973,5972,5973,5844,5844,5843,5972,5971,5972,5843,5843,5842,5971,5970,5971,5842,5842,5841,5970,5969,5970,5841,5841,5840,5969,5968,5969,5840,5840,5839,5968,5967,5968,5839,5839,5838,5967,5966,5967,5838,5838,5837,5966,5965,5966,5837,5837,5836,5965,5964,5965,5836,5836,5835,5964,5963,5964,5835,5835,5834,5963,5962,5963,5834,5834,5833,5962,5961,5962,5833,5833,5832,5961,5960,5961,5832,5832,5831,5960,5959,5960,5831,5831,5830,5959,5958,5959,5830,5830,5829,5958,5957,5958,5829,5829,5828,5957,5956,5957,5828,5828,5827,5956,5955,5956,5827,5827,5826,5955,5954,5955,5826,5826,5825,5954,5953,5954,5825,5825,5824,5953,5952,5953,5824,5824,5823,5952,5951,5952,5823,5823,5822,5951,5950,5951,5822,5822,5821,5950,5949,5950,5821,5821,5820,5949,5948,5949,5820,5820,5819,5948,5947,5948,5819,5819,5818,5947,5946,5947,5818,5818,5817,5946,5945,5946,5817,5817,5816,5945,5944,5945,5816,5816,5815,5944,5943,5944,5815,5815,5814,5943,5942,5943,5814,5814,5813,5942,5941,5942,5813,5813,5812,5941,5940,5941,5812,5812,5811,5940,5939,5940,5811,5811,5810,5939,5938,5939,5810,5810,5809,5938,5937,5938,5809,5809,5808,5937,5936,5937,5808,5808,5807,5936,5935,5936,5807,5807,5806,5935,5934,5935,5806,5806,5805,5934,5933,5934,5805,5805,5804,5933,5932,5933,5804,5804,5803,5932,5931,5932,5803,5803,5802,5931,5930,5931,5802,5802,5801,5930,5929,5930,5801,5801,5800,5929,5928,5929,5800,5800,5799,5928,5927,5928,5799,5799,5798,5927,5926,5927,5798,5798,5797,5926,5925,5926,5797,5797,5796,5925,5924,5925,5796,5796,5795,5924,5923,5924,5795,5795,5794,5923,5922,5923,5794,5794,5793,5922,5921,5922,5793,5793,5792,5921,5920,5921,5792,5792,5791,5920,5919,5920,5791,5791,5790,5919,5918,5919,5790,5790,5789,5918,5917,5918,5789,5789,5788,5917,5916,5917,5788,5788,5787,5916,5915,5916,5787,5787,5786,5915,5914,5915,5786,5786,5785,5914,5913,5914,5785,5785,5784,5913,5912,5913,5784,5784,5783,5912,5911,5912,5783,5783,5782,5911,5910,5911,5782,5782,5781,5910,5909,5910,5781,5781,5780,5909,5908,5909,5780,5780,5779,5908,5907,5908,5779,5779,5778,5907,5906,5907,5778,5778,5777,5906,5905,5906,5777,5777,5776,5905,5904,5905,5776,5776,5775,5904,5903,5904,5775,5775,5774,5903,5902,5903,5774,5774,5773,5902,5901,5902,5773,5773,5772,5901,5900,5901,5772,5772,5771,5900,5899,5900,5771,5771,5770,5899,5898,5899,5770,5770,5769,5898,5897,5898,5769,5769,5768,5897,5896,5897,5768,5768,5767,5896,5895,5896,5767,5767,5766,5895,5894,5895,5766,5766,5765,5894,5893,5894,5765,5765,5764,5893,5892,5893,5764,5764,5763,5892,5891,5892,5763,5763,5762,5891,5890,5891,5762,5762,5761,5890,5889,5890,5761,5761,5760,5889,5888,5889,5760,6015,6014,6143,6142,6143,6014,6014,6013,6142,6141,6142,6013,6013,6012,6141,6140,6141,6012,6012,6011,6140,6139,6140,6011,6011,6010,6139,6138,6139,6010,6010,6009,6138,6137,6138,6009,6009,6008,6137,6136,6137,6008,6008,6007,6136,6135,6136,6007,6007,6006,6135,6134,6135,6006,6006,6005,6134,6133,6134,6005,6005,6004,6133,6132,6133,6004,6004,6003,6132,6131,6132,6003,6003,6002,6131,6130,6131,6002,6002,6001,6130,6129,6130,6001,6001,6000,6129,6128,6129,6000,6000,5999,6128,6127,6128,5999,5999,5998,6127,6126,6127,5998,5998,5997,6126,6125,6126,5997,5997,5996,6125,6124,6125,5996,5996,5995,6124,6123,6124,5995,5995,5994,6123,6122,6123,5994,5994,5993,6122,6121,6122,5993,5993,5992,6121,6120,6121,5992,5992,5991,6120,6119,6120,5991,5991,5990,6119,6118,6119,5990,5990,5989,6118,6117,6118,5989,5989,5988,6117,6116,6117,5988,5988,5987,6116,6115,6116,5987,5987,5986,6115,6114,6115,5986,5986,5985,6114,6113,6114,5985,5985,5984,6113,6112,6113,5984,5984,5983,6112,6111,6112,5983,5983,5982,6111,6110,6111,5982,5982,5981,6110,6109,6110,5981,5981,5980,6109,6108,6109,5980,5980,5979,6108,6107,6108,5979,5979,5978,6107,6106,6107,5978,5978,5977,6106,6105,6106,5977,5977,5976,6105,6104,6105,5976,5976,5975,6104,6103,6104,5975,5975,5974,6103,6102,6103,5974,5974,5973,6102,6101,6102,5973,5973,5972,6101,6100,6101,5972,5972,5971,6100,6099,6100,5971,5971,5970,6099,6098,6099,5970,5970,5969,6098,6097,6098,5969,5969,5968,6097,6096,6097,5968,5968,5967,6096,6095,6096,5967,5967,5966,6095,6094,6095,5966,5966,5965,6094,6093,6094,5965,5965,5964,6093,6092,6093,5964,5964,5963,6092,6091,6092,5963,5963,5962,6091,6090,6091,5962,5962,5961,6090,6089,6090,5961,5961,5960,6089,6088,6089,5960,5960,5959,6088,6087,6088,5959,5959,5958,6087,6086,6087,5958,5958,5957,6086,6085,6086,5957,5957,5956,6085,6084,6085,5956,5956,5955,6084,6083,6084,5955,5955,5954,6083,6082,6083,5954,5954,5953,6082,6081,6082,5953,5953,5952,6081,6080,6081,5952,5952,5951,6080,6079,6080,5951,5951,5950,6079,6078,6079,5950,5950,5949,6078,6077,6078,5949,5949,5948,6077,6076,6077,5948,5948,5947,6076,6075,6076,5947,5947,5946,6075,6074,6075,5946,5946,5945,6074,6073,6074,5945,5945,5944,6073,6072,6073,5944,5944,5943,6072,6071,6072,5943,5943,5942,6071,6070,6071,5942,5942,5941,6070,6069,6070,5941,5941,5940,6069,6068,6069,5940,5940,5939,6068,6067,6068,5939,5939,5938,6067,6066,6067,5938,5938,5937,6066,6065,6066,5937,5937,5936,6065,6064,6065,5936,5936,5935,6064,6063,6064,5935,5935,5934,6063,6062,6063,5934,5934,5933,6062,6061,6062,5933,5933,5932,6061,6060,6061,5932,5932,5931,6060,6059,6060,5931,5931,5930,6059,6058,6059,5930,5930,5929,6058,6057,6058,5929,5929,5928,6057,6056,6057,5928,5928,5927,6056,6055,6056,5927,5927,5926,6055,6054,6055,5926,5926,5925,6054,6053,6054,5925,5925,5924,6053,6052,6053,5924,5924,5923,6052,6051,6052,5923,5923,5922,6051,6050,6051,5922,5922,5921,6050,6049,6050,5921,5921,5920,6049,6048,6049,5920,5920,5919,6048,6047,6048,5919,5919,5918,6047,6046,6047,5918,5918,5917,6046,6045,6046,5917,5917,5916,6045,6044,6045,5916,5916,5915,6044,6043,6044,5915,5915,5914,6043,6042,6043,5914,5914,5913,6042,6041,6042,5913,5913,5912,6041,6040,6041,5912,5912,5911,6040,6039,6040,5911,5911,5910,6039,6038,6039,5910,5910,5909,6038,6037,6038,5909,5909,5908,6037,6036,6037,5908,5908,5907,6036,6035,6036,5907,5907,5906,6035,6034,6035,5906,5906,5905,6034,6033,6034,5905,5905,5904,6033,6032,6033,5904,5904,5903,6032,6031,6032,5903,5903,5902,6031,6030,6031,5902,5902,5901,6030,6029,6030,5901,5901,5900,6029,6028,6029,5900,5900,5899,6028,6027,6028,5899,5899,5898,6027,6026,6027,5898,5898,5897,6026,6025,6026,5897,5897,5896,6025,6024,6025,5896,5896,5895,6024,6023,6024,5895,5895,5894,6023,6022,6023,5894,5894,5893,6022,6021,6022,5893,5893,5892,6021,6020,6021,5892,5892,5891,6020,6019,6020,5891,5891,5890,6019,6018,6019,5890,5890,5889,6018,6017,6018,5889,5889,5888,6017,6016,6017,5888,6143,6142,6271,6270,6271,6142,6142,6141,6270,6269,6270,6141,6141,6140,6269,6268,6269,6140,6140,6139,6268,6267,6268,6139,6139,6138,6267,6266,6267,6138,6138,6137,6266,6265,6266,6137,6137,6136,6265,6264,6265,6136,6136,6135,6264,6263,6264,6135,6135,6134,6263,6262,6263,6134,6134,6133,6262,6261,6262,6133,6133,6132,6261,6260,6261,6132,6132,6131,6260,6259,6260,6131,6131,6130,6259,6258,6259,6130,6130,6129,6258,6257,6258,6129,6129,6128,6257,6256,6257,6128,6128,6127,6256,6255,6256,6127,6127,6126,6255,6254,6255,6126,6126,6125,6254,6253,6254,6125,6125,6124,6253,6252,6253,6124,6124,6123,6252,6251,6252,6123,6123,6122,6251,6250,6251,6122,6122,6121,6250,6249,6250,6121,6121,6120,6249,6248,6249,6120,6120,6119,6248,6247,6248,6119,6119,6118,6247,6246,6247,6118,6118,6117,6246,6245,6246,6117,6117,6116,6245,6244,6245,6116,6116,6115,6244,6243,6244,6115,6115,6114,6243,6242,6243,6114,6114,6113,6242,6241,6242,6113,6113,6112,6241,6240,6241,6112,6112,6111,6240,6239,6240,6111,6111,6110,6239,6238,6239,6110,6110,6109,6238,6237,6238,6109,6109,6108,6237,6236,6237,6108,6108,6107,6236,6235,6236,6107,6107,6106,6235,6234,6235,6106,6106,6105,6234,6233,6234,6105,6105,6104,6233,6232,6233,6104,6104,6103,6232,6231,6232,6103,6103,6102,6231,6230,6231,6102,6102,6101,6230,6229,6230,6101,6101,6100,6229,6228,6229,6100,6100,6099,6228,6227,6228,6099,6099,6098,6227,6226,6227,6098,6098,6097,6226,6225,6226,6097,6097,6096,6225,6224,6225,6096,6096,6095,6224,6223,6224,6095,6095,6094,6223,6222,6223,6094,6094,6093,6222,6221,6222,6093,6093,6092,6221,6220,6221,6092,6092,6091,6220,6219,6220,6091,6091,6090,6219,6218,6219,6090,6090,6089,6218,6217,6218,6089,6089,6088,6217,6216,6217,6088,6088,6087,6216,6215,6216,6087,6087,6086,6215,6214,6215,6086,6086,6085,6214,6213,6214,6085,6085,6084,6213,6212,6213,6084,6084,6083,6212,6211,6212,6083,6083,6082,6211,6210,6211,6082,6082,6081,6210,6209,6210,6081,6081,6080,6209,6208,6209,6080,6080,6079,6208,6207,6208,6079,6079,6078,6207,6206,6207,6078,6078,6077,6206,6205,6206,6077,6077,6076,6205,6204,6205,6076,6076,6075,6204,6203,6204,6075,6075,6074,6203,6202,6203,6074,6074,6073,6202,6201,6202,6073,6073,6072,6201,6200,6201,6072,6072,6071,6200,6199,6200,6071,6071,6070,6199,6198,6199,6070,6070,6069,6198,6197,6198,6069,6069,6068,6197,6196,6197,6068,6068,6067,6196,6195,6196,6067,6067,6066,6195,6194,6195,6066,6066,6065,6194,6193,6194,6065,6065,6064,6193,6192,6193,6064,6064,6063,6192,6191,6192,6063,6063,6062,6191,6190,6191,6062,6062,6061,6190,6189,6190,6061,6061,6060,6189,6188,6189,6060,6060,6059,6188,6187,6188,6059,6059,6058,6187,6186,6187,6058,6058,6057,6186,6185,6186,6057,6057,6056,6185,6184,6185,6056,6056,6055,6184,6183,6184,6055,6055,6054,6183,6182,6183,6054,6054,6053,6182,6181,6182,6053,6053,6052,6181,6180,6181,6052,6052,6051,6180,6179,6180,6051,6051,6050,6179,6178,6179,6050,6050,6049,6178,6177,6178,6049,6049,6048,6177,6176,6177,6048,6048,6047,6176,6175,6176,6047,6047,6046,6175,6174,6175,6046,6046,6045,6174,6173,6174,6045,6045,6044,6173,6172,6173,6044,6044,6043,6172,6171,6172,6043,6043,6042,6171,6170,6171,6042,6042,6041,6170,6169,6170,6041,6041,6040,6169,6168,6169,6040,6040,6039,6168,6167,6168,6039,6039,6038,6167,6166,6167,6038,6038,6037,6166,6165,6166,6037,6037,6036,6165,6164,6165,6036,6036,6035,6164,6163,6164,6035,6035,6034,6163,6162,6163,6034,6034,6033,6162,6161,6162,6033,6033,6032,6161,6160,6161,6032,6032,6031,6160,6159,6160,6031,6031,6030,6159,6158,6159,6030,6030,6029,6158,6157,6158,6029,6029,6028,6157,6156,6157,6028,6028,6027,6156,6155,6156,6027,6027,6026,6155,6154,6155,6026,6026,6025,6154,6153,6154,6025,6025,6024,6153,6152,6153,6024,6024,6023,6152,6151,6152,6023,6023,6022,6151,6150,6151,6022,6022,6021,6150,6149,6150,6021,6021,6020,6149,6148,6149,6020,6020,6019,6148,6147,6148,6019,6019,6018,6147,6146,6147,6018,6018,6017,6146,6145,6146,6017,6017,6016,6145,6144,6145,6016,6271,6270,6399,6398,6399,6270,6270,6269,6398,6397,6398,6269,6269,6268,6397,6396,6397,6268,6268,6267,6396,6395,6396,6267,6267,6266,6395,6394,6395,6266,6266,6265,6394,6393,6394,6265,6265,6264,6393,6392,6393,6264,6264,6263,6392,6391,6392,6263,6263,6262,6391,6390,6391,6262,6262,6261,6390,6389,6390,6261,6261,6260,6389,6388,6389,6260,6260,6259,6388,6387,6388,6259,6259,6258,6387,6386,6387,6258,6258,6257,6386,6385,6386,6257,6257,6256,6385,6384,6385,6256,6256,6255,6384,6383,6384,6255,6255,6254,6383,6382,6383,6254,6254,6253,6382,6381,6382,6253,6253,6252,6381,6380,6381,6252,6252,6251,6380,6379,6380,6251,6251,6250,6379,6378,6379,6250,6250,6249,6378,6377,6378,6249,6249,6248,6377,6376,6377,6248,6248,6247,6376,6375,6376,6247,6247,6246,6375,6374,6375,6246,6246,6245,6374,6373,6374,6245,6245,6244,6373,6372,6373,6244,6244,6243,6372,6371,6372,6243,6243,6242,6371,6370,6371,6242,6242,6241,6370,6369,6370,6241,6241,6240,6369,6368,6369,6240,6240,6239,6368,6367,6368,6239,6239,6238,6367,6366,6367,6238,6238,6237,6366,6365,6366,6237,6237,6236,6365,6364,6365,6236,6236,6235,6364,6363,6364,6235,6235,6234,6363,6362,6363,6234,6234,6233,6362,6361,6362,6233,6233,6232,6361,6360,6361,6232,6232,6231,6360,6359,6360,6231,6231,6230,6359,6358,6359,6230,6230,6229,6358,6357,6358,6229,6229,6228,6357,6356,6357,6228,6228,6227,6356,6355,6356,6227,6227,6226,6355,6354,6355,6226,6226,6225,6354,6353,6354,6225,6225,6224,6353,6352,6353,6224,6224,6223,6352,6351,6352,6223,6223,6222,6351,6350,6351,6222,6222,6221,6350,6349,6350,6221,6221,6220,6349,6348,6349,6220,6220,6219,6348,6347,6348,6219,6219,6218,6347,6346,6347,6218,6218,6217,6346,6345,6346,6217,6217,6216,6345,6344,6345,6216,6216,6215,6344,6343,6344,6215,6215,6214,6343,6342,6343,6214,6214,6213,6342,6341,6342,6213,6213,6212,6341,6340,6341,6212,6212,6211,6340,6339,6340,6211,6211,6210,6339,6338,6339,6210,6210,6209,6338,6337,6338,6209,6209,6208,6337,6336,6337,6208,6208,6207,6336,6335,6336,6207,6207,6206,6335,6334,6335,6206,6206,6205,6334,6333,6334,6205,6205,6204,6333,6332,6333,6204,6204,6203,6332,6331,6332,6203,6203,6202,6331,6330,6331,6202,6202,6201,6330,6329,6330,6201,6201,6200,6329,6328,6329,6200,6200,6199,6328,6327,6328,6199,6199,6198,6327,6326,6327,6198,6198,6197,6326,6325,6326,6197,6197,6196,6325,6324,6325,6196,6196,6195,6324,6323,6324,6195,6195,6194,6323,6322,6323,6194,6194,6193,6322,6321,6322,6193,6193,6192,6321,6320,6321,6192,6192,6191,6320,6319,6320,6191,6191,6190,6319,6318,6319,6190,6190,6189,6318,6317,6318,6189,6189,6188,6317,6316,6317,6188,6188,6187,6316,6315,6316,6187,6187,6186,6315,6314,6315,6186,6186,6185,6314,6313,6314,6185,6185,6184,6313,6312,6313,6184,6184,6183,6312,6311,6312,6183,6183,6182,6311,6310,6311,6182,6182,6181,6310,6309,6310,6181,6181,6180,6309,6308,6309,6180,6180,6179,6308,6307,6308,6179,6179,6178,6307,6306,6307,6178,6178,6177,6306,6305,6306,6177,6177,6176,6305,6304,6305,6176,6176,6175,6304,6303,6304,6175,6175,6174,6303,6302,6303,6174,6174,6173,6302,6301,6302,6173,6173,6172,6301,6300,6301,6172,6172,6171,6300,6299,6300,6171,6171,6170,6299,6298,6299,6170,6170,6169,6298,6297,6298,6169,6169,6168,6297,6296,6297,6168,6168,6167,6296,6295,6296,6167,6167,6166,6295,6294,6295,6166,6166,6165,6294,6293,6294,6165,6165,6164,6293,6292,6293,6164,6164,6163,6292,6291,6292,6163,6163,6162,6291,6290,6291,6162,6162,6161,6290,6289,6290,6161,6161,6160,6289,6288,6289,6160,6160,6159,6288,6287,6288,6159,6159,6158,6287,6286,6287,6158,6158,6157,6286,6285,6286,6157,6157,6156,6285,6284,6285,6156,6156,6155,6284,6283,6284,6155,6155,6154,6283,6282,6283,6154,6154,6153,6282,6281,6282,6153,6153,6152,6281,6280,6281,6152,6152,6151,6280,6279,6280,6151,6151,6150,6279,6278,6279,6150,6150,6149,6278,6277,6278,6149,6149,6148,6277,6276,6277,6148,6148,6147,6276,6275,6276,6147,6147,6146,6275,6274,6275,6146,6146,6145,6274,6273,6274,6145,6145,6144,6273,6272,6273,6144,6399,6398,6527,6526,6527,6398,6398,6397,6526,6525,6526,6397,6397,6396,6525,6524,6525,6396,6396,6395,6524,6523,6524,6395,6395,6394,6523,6522,6523,6394,6394,6393,6522,6521,6522,6393,6393,6392,6521,6520,6521,6392,6392,6391,6520,6519,6520,6391,6391,6390,6519,6518,6519,6390,6390,6389,6518,6517,6518,6389,6389,6388,6517,6516,6517,6388,6388,6387,6516,6515,6516,6387,6387,6386,6515,6514,6515,6386,6386,6385,6514,6513,6514,6385,6385,6384,6513,6512,6513,6384,6384,6383,6512,6511,6512,6383,6383,6382,6511,6510,6511,6382,6382,6381,6510,6509,6510,6381,6381,6380,6509,6508,6509,6380,6380,6379,6508,6507,6508,6379,6379,6378,6507,6506,6507,6378,6378,6377,6506,6505,6506,6377,6377,6376,6505,6504,6505,6376,6376,6375,6504,6503,6504,6375,6375,6374,6503,6502,6503,6374,6374,6373,6502,6501,6502,6373,6373,6372,6501,6500,6501,6372,6372,6371,6500,6499,6500,6371,6371,6370,6499,6498,6499,6370,6370,6369,6498,6497,6498,6369,6369,6368,6497,6496,6497,6368,6368,6367,6496,6495,6496,6367,6367,6366,6495,6494,6495,6366,6366,6365,6494,6493,6494,6365,6365,6364,6493,6492,6493,6364,6364,6363,6492,6491,6492,6363,6363,6362,6491,6490,6491,6362,6362,6361,6490,6489,6490,6361,6361,6360,6489,6488,6489,6360,6360,6359,6488,6487,6488,6359,6359,6358,6487,6486,6487,6358,6358,6357,6486,6485,6486,6357,6357,6356,6485,6484,6485,6356,6356,6355,6484,6483,6484,6355,6355,6354,6483,6482,6483,6354,6354,6353,6482,6481,6482,6353,6353,6352,6481,6480,6481,6352,6352,6351,6480,6479,6480,6351,6351,6350,6479,6478,6479,6350,6350,6349,6478,6477,6478,6349,6349,6348,6477,6476,6477,6348,6348,6347,6476,6475,6476,6347,6347,6346,6475,6474,6475,6346,6346,6345,6474,6473,6474,6345,6345,6344,6473,6472,6473,6344,6344,6343,6472,6471,6472,6343,6343,6342,6471,6470,6471,6342,6342,6341,6470,6469,6470,6341,6341,6340,6469,6468,6469,6340,6340,6339,6468,6467,6468,6339,6339,6338,6467,6466,6467,6338,6338,6337,6466,6465,6466,6337,6337,6336,6465,6464,6465,6336,6336,6335,6464,6463,6464,6335,6335,6334,6463,6462,6463,6334,6334,6333,6462,6461,6462,6333,6333,6332,6461,6460,6461,6332,6332,6331,6460,6459,6460,6331,6331,6330,6459,6458,6459,6330,6330,6329,6458,6457,6458,6329,6329,6328,6457,6456,6457,6328,6328,6327,6456,6455,6456,6327,6327,6326,6455,6454,6455,6326,6326,6325,6454,6453,6454,6325,6325,6324,6453,6452,6453,6324,6324,6323,6452,6451,6452,6323,6323,6322,6451,6450,6451,6322,6322,6321,6450,6449,6450,6321,6321,6320,6449,6448,6449,6320,6320,6319,6448,6447,6448,6319,6319,6318,6447,6446,6447,6318,6318,6317,6446,6445,6446,6317,6317,6316,6445,6444,6445,6316,6316,6315,6444,6443,6444,6315,6315,6314,6443,6442,6443,6314,6314,6313,6442,6441,6442,6313,6313,6312,6441,6440,6441,6312,6312,6311,6440,6439,6440,6311,6311,6310,6439,6438,6439,6310,6310,6309,6438,6437,6438,6309,6309,6308,6437,6436,6437,6308,6308,6307,6436,6435,6436,6307,6307,6306,6435,6434,6435,6306,6306,6305,6434,6433,6434,6305,6305,6304,6433,6432,6433,6304,6304,6303,6432,6431,6432,6303,6303,6302,6431,6430,6431,6302,6302,6301,6430,6429,6430,6301,6301,6300,6429,6428,6429,6300,6300,6299,6428,6427,6428,6299,6299,6298,6427,6426,6427,6298,6298,6297,6426,6425,6426,6297,6297,6296,6425,6424,6425,6296,6296,6295,6424,6423,6424,6295,6295,6294,6423,6422,6423,6294,6294,6293,6422,6421,6422,6293,6293,6292,6421,6420,6421,6292,6292,6291,6420,6419,6420,6291,6291,6290,6419,6418,6419,6290,6290,6289,6418,6417,6418,6289,6289,6288,6417,6416,6417,6288,6288,6287,6416,6415,6416,6287,6287,6286,6415,6414,6415,6286,6286,6285,6414,6413,6414,6285,6285,6284,6413,6412,6413,6284,6284,6283,6412,6411,6412,6283,6283,6282,6411,6410,6411,6282,6282,6281,6410,6409,6410,6281,6281,6280,6409,6408,6409,6280,6280,6279,6408,6407,6408,6279,6279,6278,6407,6406,6407,6278,6278,6277,6406,6405,6406,6277,6277,6276,6405,6404,6405,6276,6276,6275,6404,6403,6404,6275,6275,6274,6403,6402,6403,6274,6274,6273,6402,6401,6402,6273,6273,6272,6401,6400,6401,6272,6527,6526,6655,6654,6655,6526,6526,6525,6654,6653,6654,6525,6525,6524,6653,6652,6653,6524,6524,6523,6652,6651,6652,6523,6523,6522,6651,6650,6651,6522,6522,6521,6650,6649,6650,6521,6521,6520,6649,6648,6649,6520,6520,6519,6648,6647,6648,6519,6519,6518,6647,6646,6647,6518,6518,6517,6646,6645,6646,6517,6517,6516,6645,6644,6645,6516,6516,6515,6644,6643,6644,6515,6515,6514,6643,6642,6643,6514,6514,6513,6642,6641,6642,6513,6513,6512,6641,6640,6641,6512,6512,6511,6640,6639,6640,6511,6511,6510,6639,6638,6639,6510,6510,6509,6638,6637,6638,6509,6509,6508,6637,6636,6637,6508,6508,6507,6636,6635,6636,6507,6507,6506,6635,6634,6635,6506,6506,6505,6634,6633,6634,6505,6505,6504,6633,6632,6633,6504,6504,6503,6632,6631,6632,6503,6503,6502,6631,6630,6631,6502,6502,6501,6630,6629,6630,6501,6501,6500,6629,6628,6629,6500,6500,6499,6628,6627,6628,6499,6499,6498,6627,6626,6627,6498,6498,6497,6626,6625,6626,6497,6497,6496,6625,6624,6625,6496,6496,6495,6624,6623,6624,6495,6495,6494,6623,6622,6623,6494,6494,6493,6622,6621,6622,6493,6493,6492,6621,6620,6621,6492,6492,6491,6620,6619,6620,6491,6491,6490,6619,6618,6619,6490,6490,6489,6618,6617,6618,6489,6489,6488,6617,6616,6617,6488,6488,6487,6616,6615,6616,6487,6487,6486,6615,6614,6615,6486,6486,6485,6614,6613,6614,6485,6485,6484,6613,6612,6613,6484,6484,6483,6612,6611,6612,6483,6483,6482,6611,6610,6611,6482,6482,6481,6610,6609,6610,6481,6481,6480,6609,6608,6609,6480,6480,6479,6608,6607,6608,6479,6479,6478,6607,6606,6607,6478,6478,6477,6606,6605,6606,6477,6477,6476,6605,6604,6605,6476,6476,6475,6604,6603,6604,6475,6475,6474,6603,6602,6603,6474,6474,6473,6602,6601,6602,6473,6473,6472,6601,6600,6601,6472,6472,6471,6600,6599,6600,6471,6471,6470,6599,6598,6599,6470,6470,6469,6598,6597,6598,6469,6469,6468,6597,6596,6597,6468,6468,6467,6596,6595,6596,6467,6467,6466,6595,6594,6595,6466,6466,6465,6594,6593,6594,6465,6465,6464,6593,6592,6593,6464,6464,6463,6592,6591,6592,6463,6463,6462,6591,6590,6591,6462,6462,6461,6590,6589,6590,6461,6461,6460,6589,6588,6589,6460,6460,6459,6588,6587,6588,6459,6459,6458,6587,6586,6587,6458,6458,6457,6586,6585,6586,6457,6457,6456,6585,6584,6585,6456,6456,6455,6584,6583,6584,6455,6455,6454,6583,6582,6583,6454,6454,6453,6582,6581,6582,6453,6453,6452,6581,6580,6581,6452,6452,6451,6580,6579,6580,6451,6451,6450,6579,6578,6579,6450,6450,6449,6578,6577,6578,6449,6449,6448,6577,6576,6577,6448,6448,6447,6576,6575,6576,6447,6447,6446,6575,6574,6575,6446,6446,6445,6574,6573,6574,6445,6445,6444,6573,6572,6573,6444,6444,6443,6572,6571,6572,6443,6443,6442,6571,6570,6571,6442,6442,6441,6570,6569,6570,6441,6441,6440,6569,6568,6569,6440,6440,6439,6568,6567,6568,6439,6439,6438,6567,6566,6567,6438,6438,6437,6566,6565,6566,6437,6437,6436,6565,6564,6565,6436,6436,6435,6564,6563,6564,6435,6435,6434,6563,6562,6563,6434,6434,6433,6562,6561,6562,6433,6433,6432,6561,6560,6561,6432,6432,6431,6560,6559,6560,6431,6431,6430,6559,6558,6559,6430,6430,6429,6558,6557,6558,6429,6429,6428,6557,6556,6557,6428,6428,6427,6556,6555,6556,6427,6427,6426,6555,6554,6555,6426,6426,6425,6554,6553,6554,6425,6425,6424,6553,6552,6553,6424,6424,6423,6552,6551,6552,6423,6423,6422,6551,6550,6551,6422,6422,6421,6550,6549,6550,6421,6421,6420,6549,6548,6549,6420,6420,6419,6548,6547,6548,6419,6419,6418,6547,6546,6547,6418,6418,6417,6546,6545,6546,6417,6417,6416,6545,6544,6545,6416,6416,6415,6544,6543,6544,6415,6415,6414,6543,6542,6543,6414,6414,6413,6542,6541,6542,6413,6413,6412,6541,6540,6541,6412,6412,6411,6540,6539,6540,6411,6411,6410,6539,6538,6539,6410,6410,6409,6538,6537,6538,6409,6409,6408,6537,6536,6537,6408,6408,6407,6536,6535,6536,6407,6407,6406,6535,6534,6535,6406,6406,6405,6534,6533,6534,6405,6405,6404,6533,6532,6533,6404,6404,6403,6532,6531,6532,6403,6403,6402,6531,6530,6531,6402,6402,6401,6530,6529,6530,6401,6401,6400,6529,6528,6529,6400,6655,6654,6783,6782,6783,6654,6654,6653,6782,6781,6782,6653,6653,6652,6781,6780,6781,6652,6652,6651,6780,6779,6780,6651,6651,6650,6779,6778,6779,6650,6650,6649,6778,6777,6778,6649,6649,6648,6777,6776,6777,6648,6648,6647,6776,6775,6776,6647,6647,6646,6775,6774,6775,6646,6646,6645,6774,6773,6774,6645,6645,6644,6773,6772,6773,6644,6644,6643,6772,6771,6772,6643,6643,6642,6771,6770,6771,6642,6642,6641,6770,6769,6770,6641,6641,6640,6769,6768,6769,6640,6640,6639,6768,6767,6768,6639,6639,6638,6767,6766,6767,6638,6638,6637,6766,6765,6766,6637,6637,6636,6765,6764,6765,6636,6636,6635,6764,6763,6764,6635,6635,6634,6763,6762,6763,6634,6634,6633,6762,6761,6762,6633,6633,6632,6761,6760,6761,6632,6632,6631,6760,6759,6760,6631,6631,6630,6759,6758,6759,6630,6630,6629,6758,6757,6758,6629,6629,6628,6757,6756,6757,6628,6628,6627,6756,6755,6756,6627,6627,6626,6755,6754,6755,6626,6626,6625,6754,6753,6754,6625,6625,6624,6753,6752,6753,6624,6624,6623,6752,6751,6752,6623,6623,6622,6751,6750,6751,6622,6622,6621,6750,6749,6750,6621,6621,6620,6749,6748,6749,6620,6620,6619,6748,6747,6748,6619,6619,6618,6747,6746,6747,6618,6618,6617,6746,6745,6746,6617,6617,6616,6745,6744,6745,6616,6616,6615,6744,6743,6744,6615,6615,6614,6743,6742,6743,6614,6614,6613,6742,6741,6742,6613,6613,6612,6741,6740,6741,6612,6612,6611,6740,6739,6740,6611,6611,6610,6739,6738,6739,6610,6610,6609,6738,6737,6738,6609,6609,6608,6737,6736,6737,6608,6608,6607,6736,6735,6736,6607,6607,6606,6735,6734,6735,6606,6606,6605,6734,6733,6734,6605,6605,6604,6733,6732,6733,6604,6604,6603,6732,6731,6732,6603,6603,6602,6731,6730,6731,6602,6602,6601,6730,6729,6730,6601,6601,6600,6729,6728,6729,6600,6600,6599,6728,6727,6728,6599,6599,6598,6727,6726,6727,6598,6598,6597,6726,6725,6726,6597,6597,6596,6725,6724,6725,6596,6596,6595,6724,6723,6724,6595,6595,6594,6723,6722,6723,6594,6594,6593,6722,6721,6722,6593,6593,6592,6721,6720,6721,6592,6592,6591,6720,6719,6720,6591,6591,6590,6719,6718,6719,6590,6590,6589,6718,6717,6718,6589,6589,6588,6717,6716,6717,6588,6588,6587,6716,6715,6716,6587,6587,6586,6715,6714,6715,6586,6586,6585,6714,6713,6714,6585,6585,6584,6713,6712,6713,6584,6584,6583,6712,6711,6712,6583,6583,6582,6711,6710,6711,6582,6582,6581,6710,6709,6710,6581,6581,6580,6709,6708,6709,6580,6580,6579,6708,6707,6708,6579,6579,6578,6707,6706,6707,6578,6578,6577,6706,6705,6706,6577,6577,6576,6705,6704,6705,6576,6576,6575,6704,6703,6704,6575,6575,6574,6703,6702,6703,6574,6574,6573,6702,6701,6702,6573,6573,6572,6701,6700,6701,6572,6572,6571,6700,6699,6700,6571,6571,6570,6699,6698,6699,6570,6570,6569,6698,6697,6698,6569,6569,6568,6697,6696,6697,6568,6568,6567,6696,6695,6696,6567,6567,6566,6695,6694,6695,6566,6566,6565,6694,6693,6694,6565,6565,6564,6693,6692,6693,6564,6564,6563,6692,6691,6692,6563,6563,6562,6691,6690,6691,6562,6562,6561,6690,6689,6690,6561,6561,6560,6689,6688,6689,6560,6560,6559,6688,6687,6688,6559,6559,6558,6687,6686,6687,6558,6558,6557,6686,6685,6686,6557,6557,6556,6685,6684,6685,6556,6556,6555,6684,6683,6684,6555,6555,6554,6683,6682,6683,6554,6554,6553,6682,6681,6682,6553,6553,6552,6681,6680,6681,6552,6552,6551,6680,6679,6680,6551,6551,6550,6679,6678,6679,6550,6550,6549,6678,6677,6678,6549,6549,6548,6677,6676,6677,6548,6548,6547,6676,6675,6676,6547,6547,6546,6675,6674,6675,6546,6546,6545,6674,6673,6674,6545,6545,6544,6673,6672,6673,6544,6544,6543,6672,6671,6672,6543,6543,6542,6671,6670,6671,6542,6542,6541,6670,6669,6670,6541,6541,6540,6669,6668,6669,6540,6540,6539,6668,6667,6668,6539,6539,6538,6667,6666,6667,6538,6538,6537,6666,6665,6666,6537,6537,6536,6665,6664,6665,6536,6536,6535,6664,6663,6664,6535,6535,6534,6663,6662,6663,6534,6534,6533,6662,6661,6662,6533,6533,6532,6661,6660,6661,6532,6532,6531,6660,6659,6660,6531,6531,6530,6659,6658,6659,6530,6530,6529,6658,6657,6658,6529,6529,6528,6657,6656,6657,6528,6783,6782,6911,6910,6911,6782,6782,6781,6910,6909,6910,6781,6781,6780,6909,6908,6909,6780,6780,6779,6908,6907,6908,6779,6779,6778,6907,6906,6907,6778,6778,6777,6906,6905,6906,6777,6777,6776,6905,6904,6905,6776,6776,6775,6904,6903,6904,6775,6775,6774,6903,6902,6903,6774,6774,6773,6902,6901,6902,6773,6773,6772,6901,6900,6901,6772,6772,6771,6900,6899,6900,6771,6771,6770,6899,6898,6899,6770,6770,6769,6898,6897,6898,6769,6769,6768,6897,6896,6897,6768,6768,6767,6896,6895,6896,6767,6767,6766,6895,6894,6895,6766,6766,6765,6894,6893,6894,6765,6765,6764,6893,6892,6893,6764,6764,6763,6892,6891,6892,6763,6763,6762,6891,6890,6891,6762,6762,6761,6890,6889,6890,6761,6761,6760,6889,6888,6889,6760,6760,6759,6888,6887,6888,6759,6759,6758,6887,6886,6887,6758,6758,6757,6886,6885,6886,6757,6757,6756,6885,6884,6885,6756,6756,6755,6884,6883,6884,6755,6755,6754,6883,6882,6883,6754,6754,6753,6882,6881,6882,6753,6753,6752,6881,6880,6881,6752,6752,6751,6880,6879,6880,6751,6751,6750,6879,6878,6879,6750,6750,6749,6878,6877,6878,6749,6749,6748,6877,6876,6877,6748,6748,6747,6876,6875,6876,6747,6747,6746,6875,6874,6875,6746,6746,6745,6874,6873,6874,6745,6745,6744,6873,6872,6873,6744,6744,6743,6872,6871,6872,6743,6743,6742,6871,6870,6871,6742,6742,6741,6870,6869,6870,6741,6741,6740,6869,6868,6869,6740,6740,6739,6868,6867,6868,6739,6739,6738,6867,6866,6867,6738,6738,6737,6866,6865,6866,6737,6737,6736,6865,6864,6865,6736,6736,6735,6864,6863,6864,6735,6735,6734,6863,6862,6863,6734,6734,6733,6862,6861,6862,6733,6733,6732,6861,6860,6861,6732,6732,6731,6860,6859,6860,6731,6731,6730,6859,6858,6859,6730,6730,6729,6858,6857,6858,6729,6729,6728,6857,6856,6857,6728,6728,6727,6856,6855,6856,6727,6727,6726,6855,6854,6855,6726,6726,6725,6854,6853,6854,6725,6725,6724,6853,6852,6853,6724,6724,6723,6852,6851,6852,6723,6723,6722,6851,6850,6851,6722,6722,6721,6850,6849,6850,6721,6721,6720,6849,6848,6849,6720,6720,6719,6848,6847,6848,6719,6719,6718,6847,6846,6847,6718,6718,6717,6846,6845,6846,6717,6717,6716,6845,6844,6845,6716,6716,6715,6844,6843,6844,6715,6715,6714,6843,6842,6843,6714,6714,6713,6842,6841,6842,6713,6713,6712,6841,6840,6841,6712,6712,6711,6840,6839,6840,6711,6711,6710,6839,6838,6839,6710,6710,6709,6838,6837,6838,6709,6709,6708,6837,6836,6837,6708,6708,6707,6836,6835,6836,6707,6707,6706,6835,6834,6835,6706,6706,6705,6834,6833,6834,6705,6705,6704,6833,6832,6833,6704,6704,6703,6832,6831,6832,6703,6703,6702,6831,6830,6831,6702,6702,6701,6830,6829,6830,6701,6701,6700,6829,6828,6829,6700,6700,6699,6828,6827,6828,6699,6699,6698,6827,6826,6827,6698,6698,6697,6826,6825,6826,6697,6697,6696,6825,6824,6825,6696,6696,6695,6824,6823,6824,6695,6695,6694,6823,6822,6823,6694,6694,6693,6822,6821,6822,6693,6693,6692,6821,6820,6821,6692,6692,6691,6820,6819,6820,6691,6691,6690,6819,6818,6819,6690,6690,6689,6818,6817,6818,6689,6689,6688,6817,6816,6817,6688,6688,6687,6816,6815,6816,6687,6687,6686,6815,6814,6815,6686,6686,6685,6814,6813,6814,6685,6685,6684,6813,6812,6813,6684,6684,6683,6812,6811,6812,6683,6683,6682,6811,6810,6811,6682,6682,6681,6810,6809,6810,6681,6681,6680,6809,6808,6809,6680,6680,6679,6808,6807,6808,6679,6679,6678,6807,6806,6807,6678,6678,6677,6806,6805,6806,6677,6677,6676,6805,6804,6805,6676,6676,6675,6804,6803,6804,6675,6675,6674,6803,6802,6803,6674,6674,6673,6802,6801,6802,6673,6673,6672,6801,6800,6801,6672,6672,6671,6800,6799,6800,6671,6671,6670,6799,6798,6799,6670,6670,6669,6798,6797,6798,6669,6669,6668,6797,6796,6797,6668,6668,6667,6796,6795,6796,6667,6667,6666,6795,6794,6795,6666,6666,6665,6794,6793,6794,6665,6665,6664,6793,6792,6793,6664,6664,6663,6792,6791,6792,6663,6663,6662,6791,6790,6791,6662,6662,6661,6790,6789,6790,6661,6661,6660,6789,6788,6789,6660,6660,6659,6788,6787,6788,6659,6659,6658,6787,6786,6787,6658,6658,6657,6786,6785,6786,6657,6657,6656,6785,6784,6785,6656,6911,6910,7039,7038,7039,6910,6910,6909,7038,7037,7038,6909,6909,6908,7037,7036,7037,6908,6908,6907,7036,7035,7036,6907,6907,6906,7035,7034,7035,6906,6906,6905,7034,7033,7034,6905,6905,6904,7033,7032,7033,6904,6904,6903,7032,7031,7032,6903,6903,6902,7031,7030,7031,6902,6902,6901,7030,7029,7030,6901,6901,6900,7029,7028,7029,6900,6900,6899,7028,7027,7028,6899,6899,6898,7027,7026,7027,6898,6898,6897,7026,7025,7026,6897,6897,6896,7025,7024,7025,6896,6896,6895,7024,7023,7024,6895,6895,6894,7023,7022,7023,6894,6894,6893,7022,7021,7022,6893,6893,6892,7021,7020,7021,6892,6892,6891,7020,7019,7020,6891,6891,6890,7019,7018,7019,6890,6890,6889,7018,7017,7018,6889,6889,6888,7017,7016,7017,6888,6888,6887,7016,7015,7016,6887,6887,6886,7015,7014,7015,6886,6886,6885,7014,7013,7014,6885,6885,6884,7013,7012,7013,6884,6884,6883,7012,7011,7012,6883,6883,6882,7011,7010,7011,6882,6882,6881,7010,7009,7010,6881,6881,6880,7009,7008,7009,6880,6880,6879,7008,7007,7008,6879,6879,6878,7007,7006,7007,6878,6878,6877,7006,7005,7006,6877,6877,6876,7005,7004,7005,6876,6876,6875,7004,7003,7004,6875,6875,6874,7003,7002,7003,6874,6874,6873,7002,7001,7002,6873,6873,6872,7001,7000,7001,6872,6872,6871,7000,6999,7000,6871,6871,6870,6999,6998,6999,6870,6870,6869,6998,6997,6998,6869,6869,6868,6997,6996,6997,6868,6868,6867,6996,6995,6996,6867,6867,6866,6995,6994,6995,6866,6866,6865,6994,6993,6994,6865,6865,6864,6993,6992,6993,6864,6864,6863,6992,6991,6992,6863,6863,6862,6991,6990,6991,6862,6862,6861,6990,6989,6990,6861,6861,6860,6989,6988,6989,6860,6860,6859,6988,6987,6988,6859,6859,6858,6987,6986,6987,6858,6858,6857,6986,6985,6986,6857,6857,6856,6985,6984,6985,6856,6856,6855,6984,6983,6984,6855,6855,6854,6983,6982,6983,6854,6854,6853,6982,6981,6982,6853,6853,6852,6981,6980,6981,6852,6852,6851,6980,6979,6980,6851,6851,6850,6979,6978,6979,6850,6850,6849,6978,6977,6978,6849,6849,6848,6977,6976,6977,6848,6848,6847,6976,6975,6976,6847,6847,6846,6975,6974,6975,6846,6846,6845,6974,6973,6974,6845,6845,6844,6973,6972,6973,6844,6844,6843,6972,6971,6972,6843,6843,6842,6971,6970,6971,6842,6842,6841,6970,6969,6970,6841,6841,6840,6969,6968,6969,6840,6840,6839,6968,6967,6968,6839,6839,6838,6967,6966,6967,6838,6838,6837,6966,6965,6966,6837,6837,6836,6965,6964,6965,6836,6836,6835,6964,6963,6964,6835,6835,6834,6963,6962,6963,6834,6834,6833,6962,6961,6962,6833,6833,6832,6961,6960,6961,6832,6832,6831,6960,6959,6960,6831,6831,6830,6959,6958,6959,6830,6830,6829,6958,6957,6958,6829,6829,6828,6957,6956,6957,6828,6828,6827,6956,6955,6956,6827,6827,6826,6955,6954,6955,6826,6826,6825,6954,6953,6954,6825,6825,6824,6953,6952,6953,6824,6824,6823,6952,6951,6952,6823,6823,6822,6951,6950,6951,6822,6822,6821,6950,6949,6950,6821,6821,6820,6949,6948,6949,6820,6820,6819,6948,6947,6948,6819,6819,6818,6947,6946,6947,6818,6818,6817,6946,6945,6946,6817,6817,6816,6945,6944,6945,6816,6816,6815,6944,6943,6944,6815,6815,6814,6943,6942,6943,6814,6814,6813,6942,6941,6942,6813,6813,6812,6941,6940,6941,6812,6812,6811,6940,6939,6940,6811,6811,6810,6939,6938,6939,6810,6810,6809,6938,6937,6938,6809,6809,6808,6937,6936,6937,6808,6808,6807,6936,6935,6936,6807,6807,6806,6935,6934,6935,6806,6806,6805,6934,6933,6934,6805,6805,6804,6933,6932,6933,6804,6804,6803,6932,6931,6932,6803,6803,6802,6931,6930,6931,6802,6802,6801,6930,6929,6930,6801,6801,6800,6929,6928,6929,6800,6800,6799,6928,6927,6928,6799,6799,6798,6927,6926,6927,6798,6798,6797,6926,6925,6926,6797,6797,6796,6925,6924,6925,6796,6796,6795,6924,6923,6924,6795,6795,6794,6923,6922,6923,6794,6794,6793,6922,6921,6922,6793,6793,6792,6921,6920,6921,6792,6792,6791,6920,6919,6920,6791,6791,6790,6919,6918,6919,6790,6790,6789,6918,6917,6918,6789,6789,6788,6917,6916,6917,6788,6788,6787,6916,6915,6916,6787,6787,6786,6915,6914,6915,6786,6786,6785,6914,6913,6914,6785,6785,6784,6913,6912,6913,6784,7039,7038,7167,7166,7167,7038,7038,7037,7166,7165,7166,7037,7037,7036,7165,7164,7165,7036,7036,7035,7164,7163,7164,7035,7035,7034,7163,7162,7163,7034,7034,7033,7162,7161,7162,7033,7033,7032,7161,7160,7161,7032,7032,7031,7160,7159,7160,7031,7031,7030,7159,7158,7159,7030,7030,7029,7158,7157,7158,7029,7029,7028,7157,7156,7157,7028,7028,7027,7156,7155,7156,7027,7027,7026,7155,7154,7155,7026,7026,7025,7154,7153,7154,7025,7025,7024,7153,7152,7153,7024,7024,7023,7152,7151,7152,7023,7023,7022,7151,7150,7151,7022,7022,7021,7150,7149,7150,7021,7021,7020,7149,7148,7149,7020,7020,7019,7148,7147,7148,7019,7019,7018,7147,7146,7147,7018,7018,7017,7146,7145,7146,7017,7017,7016,7145,7144,7145,7016,7016,7015,7144,7143,7144,7015,7015,7014,7143,7142,7143,7014,7014,7013,7142,7141,7142,7013,7013,7012,7141,7140,7141,7012,7012,7011,7140,7139,7140,7011,7011,7010,7139,7138,7139,7010,7010,7009,7138,7137,7138,7009,7009,7008,7137,7136,7137,7008,7008,7007,7136,7135,7136,7007,7007,7006,7135,7134,7135,7006,7006,7005,7134,7133,7134,7005,7005,7004,7133,7132,7133,7004,7004,7003,7132,7131,7132,7003,7003,7002,7131,7130,7131,7002,7002,7001,7130,7129,7130,7001,7001,7000,7129,7128,7129,7000,7000,6999,7128,7127,7128,6999,6999,6998,7127,7126,7127,6998,6998,6997,7126,7125,7126,6997,6997,6996,7125,7124,7125,6996,6996,6995,7124,7123,7124,6995,6995,6994,7123,7122,7123,6994,6994,6993,7122,7121,7122,6993,6993,6992,7121,7120,7121,6992,6992,6991,7120,7119,7120,6991,6991,6990,7119,7118,7119,6990,6990,6989,7118,7117,7118,6989,6989,6988,7117,7116,7117,6988,6988,6987,7116,7115,7116,6987,6987,6986,7115,7114,7115,6986,6986,6985,7114,7113,7114,6985,6985,6984,7113,7112,7113,6984,6984,6983,7112,7111,7112,6983,6983,6982,7111,7110,7111,6982,6982,6981,7110,7109,7110,6981,6981,6980,7109,7108,7109,6980,6980,6979,7108,7107,7108,6979,6979,6978,7107,7106,7107,6978,6978,6977,7106,7105,7106,6977,6977,6976,7105,7104,7105,6976,6976,6975,7104,7103,7104,6975,6975,6974,7103,7102,7103,6974,6974,6973,7102,7101,7102,6973,6973,6972,7101,7100,7101,6972,6972,6971,7100,7099,7100,6971,6971,6970,7099,7098,7099,6970,6970,6969,7098,7097,7098,6969,6969,6968,7097,7096,7097,6968,6968,6967,7096,7095,7096,6967,6967,6966,7095,7094,7095,6966,6966,6965,7094,7093,7094,6965,6965,6964,7093,7092,7093,6964,6964,6963,7092,7091,7092,6963,6963,6962,7091,7090,7091,6962,6962,6961,7090,7089,7090,6961,6961,6960,7089,7088,7089,6960,6960,6959,7088,7087,7088,6959,6959,6958,7087,7086,7087,6958,6958,6957,7086,7085,7086,6957,6957,6956,7085,7084,7085,6956,6956,6955,7084,7083,7084,6955,6955,6954,7083,7082,7083,6954,6954,6953,7082,7081,7082,6953,6953,6952,7081,7080,7081,6952,6952,6951,7080,7079,7080,6951,6951,6950,7079,7078,7079,6950,6950,6949,7078,7077,7078,6949,6949,6948,7077,7076,7077,6948,6948,6947,7076,7075,7076,6947,6947,6946,7075,7074,7075,6946,6946,6945,7074,7073,7074,6945,6945,6944,7073,7072,7073,6944,6944,6943,7072,7071,7072,6943,6943,6942,7071,7070,7071,6942,6942,6941,7070,7069,7070,6941,6941,6940,7069,7068,7069,6940,6940,6939,7068,7067,7068,6939,6939,6938,7067,7066,7067,6938,6938,6937,7066,7065,7066,6937,6937,6936,7065,7064,7065,6936,6936,6935,7064,7063,7064,6935,6935,6934,7063,7062,7063,6934,6934,6933,7062,7061,7062,6933,6933,6932,7061,7060,7061,6932,6932,6931,7060,7059,7060,6931,6931,6930,7059,7058,7059,6930,6930,6929,7058,7057,7058,6929,6929,6928,7057,7056,7057,6928,6928,6927,7056,7055,7056,6927,6927,6926,7055,7054,7055,6926,6926,6925,7054,7053,7054,6925,6925,6924,7053,7052,7053,6924,6924,6923,7052,7051,7052,6923,6923,6922,7051,7050,7051,6922,6922,6921,7050,7049,7050,6921,6921,6920,7049,7048,7049,6920,6920,6919,7048,7047,7048,6919,6919,6918,7047,7046,7047,6918,6918,6917,7046,7045,7046,6917,6917,6916,7045,7044,7045,6916,6916,6915,7044,7043,7044,6915,6915,6914,7043,7042,7043,6914,6914,6913,7042,7041,7042,6913,6913,6912,7041,7040,7041,6912,7167,7166,7295,7294,7295,7166,7166,7165,7294,7293,7294,7165,7165,7164,7293,7292,7293,7164,7164,7163,7292,7291,7292,7163,7163,7162,7291,7290,7291,7162,7162,7161,7290,7289,7290,7161,7161,7160,7289,7288,7289,7160,7160,7159,7288,7287,7288,7159,7159,7158,7287,7286,7287,7158,7158,7157,7286,7285,7286,7157,7157,7156,7285,7284,7285,7156,7156,7155,7284,7283,7284,7155,7155,7154,7283,7282,7283,7154,7154,7153,7282,7281,7282,7153,7153,7152,7281,7280,7281,7152,7152,7151,7280,7279,7280,7151,7151,7150,7279,7278,7279,7150,7150,7149,7278,7277,7278,7149,7149,7148,7277,7276,7277,7148,7148,7147,7276,7275,7276,7147,7147,7146,7275,7274,7275,7146,7146,7145,7274,7273,7274,7145,7145,7144,7273,7272,7273,7144,7144,7143,7272,7271,7272,7143,7143,7142,7271,7270,7271,7142,7142,7141,7270,7269,7270,7141,7141,7140,7269,7268,7269,7140,7140,7139,7268,7267,7268,7139,7139,7138,7267,7266,7267,7138,7138,7137,7266,7265,7266,7137,7137,7136,7265,7264,7265,7136,7136,7135,7264,7263,7264,7135,7135,7134,7263,7262,7263,7134,7134,7133,7262,7261,7262,7133,7133,7132,7261,7260,7261,7132,7132,7131,7260,7259,7260,7131,7131,7130,7259,7258,7259,7130,7130,7129,7258,7257,7258,7129,7129,7128,7257,7256,7257,7128,7128,7127,7256,7255,7256,7127,7127,7126,7255,7254,7255,7126,7126,7125,7254,7253,7254,7125,7125,7124,7253,7252,7253,7124,7124,7123,7252,7251,7252,7123,7123,7122,7251,7250,7251,7122,7122,7121,7250,7249,7250,7121,7121,7120,7249,7248,7249,7120,7120,7119,7248,7247,7248,7119,7119,7118,7247,7246,7247,7118,7118,7117,7246,7245,7246,7117,7117,7116,7245,7244,7245,7116,7116,7115,7244,7243,7244,7115,7115,7114,7243,7242,7243,7114,7114,7113,7242,7241,7242,7113,7113,7112,7241,7240,7241,7112,7112,7111,7240,7239,7240,7111,7111,7110,7239,7238,7239,7110,7110,7109,7238,7237,7238,7109,7109,7108,7237,7236,7237,7108,7108,7107,7236,7235,7236,7107,7107,7106,7235,7234,7235,7106,7106,7105,7234,7233,7234,7105,7105,7104,7233,7232,7233,7104,7104,7103,7232,7231,7232,7103,7103,7102,7231,7230,7231,7102,7102,7101,7230,7229,7230,7101,7101,7100,7229,7228,7229,7100,7100,7099,7228,7227,7228,7099,7099,7098,7227,7226,7227,7098,7098,7097,7226,7225,7226,7097,7097,7096,7225,7224,7225,7096,7096,7095,7224,7223,7224,7095,7095,7094,7223,7222,7223,7094,7094,7093,7222,7221,7222,7093,7093,7092,7221,7220,7221,7092,7092,7091,7220,7219,7220,7091,7091,7090,7219,7218,7219,7090,7090,7089,7218,7217,7218,7089,7089,7088,7217,7216,7217,7088,7088,7087,7216,7215,7216,7087,7087,7086,7215,7214,7215,7086,7086,7085,7214,7213,7214,7085,7085,7084,7213,7212,7213,7084,7084,7083,7212,7211,7212,7083,7083,7082,7211,7210,7211,7082,7082,7081,7210,7209,7210,7081,7081,7080,7209,7208,7209,7080,7080,7079,7208,7207,7208,7079,7079,7078,7207,7206,7207,7078,7078,7077,7206,7205,7206,7077,7077,7076,7205,7204,7205,7076,7076,7075,7204,7203,7204,7075,7075,7074,7203,7202,7203,7074,7074,7073,7202,7201,7202,7073,7073,7072,7201,7200,7201,7072,7072,7071,7200,7199,7200,7071,7071,7070,7199,7198,7199,7070,7070,7069,7198,7197,7198,7069,7069,7068,7197,7196,7197,7068,7068,7067,7196,7195,7196,7067,7067,7066,7195,7194,7195,7066,7066,7065,7194,7193,7194,7065,7065,7064,7193,7192,7193,7064,7064,7063,7192,7191,7192,7063,7063,7062,7191,7190,7191,7062,7062,7061,7190,7189,7190,7061,7061,7060,7189,7188,7189,7060,7060,7059,7188,7187,7188,7059,7059,7058,7187,7186,7187,7058,7058,7057,7186,7185,7186,7057,7057,7056,7185,7184,7185,7056,7056,7055,7184,7183,7184,7055,7055,7054,7183,7182,7183,7054,7054,7053,7182,7181,7182,7053,7053,7052,7181,7180,7181,7052,7052,7051,7180,7179,7180,7051,7051,7050,7179,7178,7179,7050,7050,7049,7178,7177,7178,7049,7049,7048,7177,7176,7177,7048,7048,7047,7176,7175,7176,7047,7047,7046,7175,7174,7175,7046,7046,7045,7174,7173,7174,7045,7045,7044,7173,7172,7173,7044,7044,7043,7172,7171,7172,7043,7043,7042,7171,7170,7171,7042,7042,7041,7170,7169,7170,7041,7041,7040,7169,7168,7169,7040,7295,7294,7423,7422,7423,7294,7294,7293,7422,7421,7422,7293,7293,7292,7421,7420,7421,7292,7292,7291,7420,7419,7420,7291,7291,7290,7419,7418,7419,7290,7290,7289,7418,7417,7418,7289,7289,7288,7417,7416,7417,7288,7288,7287,7416,7415,7416,7287,7287,7286,7415,7414,7415,7286,7286,7285,7414,7413,7414,7285,7285,7284,7413,7412,7413,7284,7284,7283,7412,7411,7412,7283,7283,7282,7411,7410,7411,7282,7282,7281,7410,7409,7410,7281,7281,7280,7409,7408,7409,7280,7280,7279,7408,7407,7408,7279,7279,7278,7407,7406,7407,7278,7278,7277,7406,7405,7406,7277,7277,7276,7405,7404,7405,7276,7276,7275,7404,7403,7404,7275,7275,7274,7403,7402,7403,7274,7274,7273,7402,7401,7402,7273,7273,7272,7401,7400,7401,7272,7272,7271,7400,7399,7400,7271,7271,7270,7399,7398,7399,7270,7270,7269,7398,7397,7398,7269,7269,7268,7397,7396,7397,7268,7268,7267,7396,7395,7396,7267,7267,7266,7395,7394,7395,7266,7266,7265,7394,7393,7394,7265,7265,7264,7393,7392,7393,7264,7264,7263,7392,7391,7392,7263,7263,7262,7391,7390,7391,7262,7262,7261,7390,7389,7390,7261,7261,7260,7389,7388,7389,7260,7260,7259,7388,7387,7388,7259,7259,7258,7387,7386,7387,7258,7258,7257,7386,7385,7386,7257,7257,7256,7385,7384,7385,7256,7256,7255,7384,7383,7384,7255,7255,7254,7383,7382,7383,7254,7254,7253,7382,7381,7382,7253,7253,7252,7381,7380,7381,7252,7252,7251,7380,7379,7380,7251,7251,7250,7379,7378,7379,7250,7250,7249,7378,7377,7378,7249,7249,7248,7377,7376,7377,7248,7248,7247,7376,7375,7376,7247,7247,7246,7375,7374,7375,7246,7246,7245,7374,7373,7374,7245,7245,7244,7373,7372,7373,7244,7244,7243,7372,7371,7372,7243,7243,7242,7371,7370,7371,7242,7242,7241,7370,7369,7370,7241,7241,7240,7369,7368,7369,7240,7240,7239,7368,7367,7368,7239,7239,7238,7367,7366,7367,7238,7238,7237,7366,7365,7366,7237,7237,7236,7365,7364,7365,7236,7236,7235,7364,7363,7364,7235,7235,7234,7363,7362,7363,7234,7234,7233,7362,7361,7362,7233,7233,7232,7361,7360,7361,7232,7232,7231,7360,7359,7360,7231,7231,7230,7359,7358,7359,7230,7230,7229,7358,7357,7358,7229,7229,7228,7357,7356,7357,7228,7228,7227,7356,7355,7356,7227,7227,7226,7355,7354,7355,7226,7226,7225,7354,7353,7354,7225,7225,7224,7353,7352,7353,7224,7224,7223,7352,7351,7352,7223,7223,7222,7351,7350,7351,7222,7222,7221,7350,7349,7350,7221,7221,7220,7349,7348,7349,7220,7220,7219,7348,7347,7348,7219,7219,7218,7347,7346,7347,7218,7218,7217,7346,7345,7346,7217,7217,7216,7345,7344,7345,7216,7216,7215,7344,7343,7344,7215,7215,7214,7343,7342,7343,7214,7214,7213,7342,7341,7342,7213,7213,7212,7341,7340,7341,7212,7212,7211,7340,7339,7340,7211,7211,7210,7339,7338,7339,7210,7210,7209,7338,7337,7338,7209,7209,7208,7337,7336,7337,7208,7208,7207,7336,7335,7336,7207,7207,7206,7335,7334,7335,7206,7206,7205,7334,7333,7334,7205,7205,7204,7333,7332,7333,7204,7204,7203,7332,7331,7332,7203,7203,7202,7331,7330,7331,7202,7202,7201,7330,7329,7330,7201,7201,7200,7329,7328,7329,7200,7200,7199,7328,7327,7328,7199,7199,7198,7327,7326,7327,7198,7198,7197,7326,7325,7326,7197,7197,7196,7325,7324,7325,7196,7196,7195,7324,7323,7324,7195,7195,7194,7323,7322,7323,7194,7194,7193,7322,7321,7322,7193,7193,7192,7321,7320,7321,7192,7192,7191,7320,7319,7320,7191,7191,7190,7319,7318,7319,7190,7190,7189,7318,7317,7318,7189,7189,7188,7317,7316,7317,7188,7188,7187,7316,7315,7316,7187,7187,7186,7315,7314,7315,7186,7186,7185,7314,7313,7314,7185,7185,7184,7313,7312,7313,7184,7184,7183,7312,7311,7312,7183,7183,7182,7311,7310,7311,7182,7182,7181,7310,7309,7310,7181,7181,7180,7309,7308,7309,7180,7180,7179,7308,7307,7308,7179,7179,7178,7307,7306,7307,7178,7178,7177,7306,7305,7306,7177,7177,7176,7305,7304,7305,7176,7176,7175,7304,7303,7304,7175,7175,7174,7303,7302,7303,7174,7174,7173,7302,7301,7302,7173,7173,7172,7301,7300,7301,7172,7172,7171,7300,7299,7300,7171,7171,7170,7299,7298,7299,7170,7170,7169,7298,7297,7298,7169,7169,7168,7297,7296,7297,7168,7423,7422,7551,7550,7551,7422,7422,7421,7550,7549,7550,7421,7421,7420,7549,7548,7549,7420,7420,7419,7548,7547,7548,7419,7419,7418,7547,7546,7547,7418,7418,7417,7546,7545,7546,7417,7417,7416,7545,7544,7545,7416,7416,7415,7544,7543,7544,7415,7415,7414,7543,7542,7543,7414,7414,7413,7542,7541,7542,7413,7413,7412,7541,7540,7541,7412,7412,7411,7540,7539,7540,7411,7411,7410,7539,7538,7539,7410,7410,7409,7538,7537,7538,7409,7409,7408,7537,7536,7537,7408,7408,7407,7536,7535,7536,7407,7407,7406,7535,7534,7535,7406,7406,7405,7534,7533,7534,7405,7405,7404,7533,7532,7533,7404,7404,7403,7532,7531,7532,7403,7403,7402,7531,7530,7531,7402,7402,7401,7530,7529,7530,7401,7401,7400,7529,7528,7529,7400,7400,7399,7528,7527,7528,7399,7399,7398,7527,7526,7527,7398,7398,7397,7526,7525,7526,7397,7397,7396,7525,7524,7525,7396,7396,7395,7524,7523,7524,7395,7395,7394,7523,7522,7523,7394,7394,7393,7522,7521,7522,7393,7393,7392,7521,7520,7521,7392,7392,7391,7520,7519,7520,7391,7391,7390,7519,7518,7519,7390,7390,7389,7518,7517,7518,7389,7389,7388,7517,7516,7517,7388,7388,7387,7516,7515,7516,7387,7387,7386,7515,7514,7515,7386,7386,7385,7514,7513,7514,7385,7385,7384,7513,7512,7513,7384,7384,7383,7512,7511,7512,7383,7383,7382,7511,7510,7511,7382,7382,7381,7510,7509,7510,7381,7381,7380,7509,7508,7509,7380,7380,7379,7508,7507,7508,7379,7379,7378,7507,7506,7507,7378,7378,7377,7506,7505,7506,7377,7377,7376,7505,7504,7505,7376,7376,7375,7504,7503,7504,7375,7375,7374,7503,7502,7503,7374,7374,7373,7502,7501,7502,7373,7373,7372,7501,7500,7501,7372,7372,7371,7500,7499,7500,7371,7371,7370,7499,7498,7499,7370,7370,7369,7498,7497,7498,7369,7369,7368,7497,7496,7497,7368,7368,7367,7496,7495,7496,7367,7367,7366,7495,7494,7495,7366,7366,7365,7494,7493,7494,7365,7365,7364,7493,7492,7493,7364,7364,7363,7492,7491,7492,7363,7363,7362,7491,7490,7491,7362,7362,7361,7490,7489,7490,7361,7361,7360,7489,7488,7489,7360,7360,7359,7488,7487,7488,7359,7359,7358,7487,7486,7487,7358,7358,7357,7486,7485,7486,7357,7357,7356,7485,7484,7485,7356,7356,7355,7484,7483,7484,7355,7355,7354,7483,7482,7483,7354,7354,7353,7482,7481,7482,7353,7353,7352,7481,7480,7481,7352,7352,7351,7480,7479,7480,7351,7351,7350,7479,7478,7479,7350,7350,7349,7478,7477,7478,7349,7349,7348,7477,7476,7477,7348,7348,7347,7476,7475,7476,7347,7347,7346,7475,7474,7475,7346,7346,7345,7474,7473,7474,7345,7345,7344,7473,7472,7473,7344,7344,7343,7472,7471,7472,7343,7343,7342,7471,7470,7471,7342,7342,7341,7470,7469,7470,7341,7341,7340,7469,7468,7469,7340,7340,7339,7468,7467,7468,7339,7339,7338,7467,7466,7467,7338,7338,7337,7466,7465,7466,7337,7337,7336,7465,7464,7465,7336,7336,7335,7464,7463,7464,7335,7335,7334,7463,7462,7463,7334,7334,7333,7462,7461,7462,7333,7333,7332,7461,7460,7461,7332,7332,7331,7460,7459,7460,7331,7331,7330,7459,7458,7459,7330,7330,7329,7458,7457,7458,7329,7329,7328,7457,7456,7457,7328,7328,7327,7456,7455,7456,7327,7327,7326,7455,7454,7455,7326,7326,7325,7454,7453,7454,7325,7325,7324,7453,7452,7453,7324,7324,7323,7452,7451,7452,7323,7323,7322,7451,7450,7451,7322,7322,7321,7450,7449,7450,7321,7321,7320,7449,7448,7449,7320,7320,7319,7448,7447,7448,7319,7319,7318,7447,7446,7447,7318,7318,7317,7446,7445,7446,7317,7317,7316,7445,7444,7445,7316,7316,7315,7444,7443,7444,7315,7315,7314,7443,7442,7443,7314,7314,7313,7442,7441,7442,7313,7313,7312,7441,7440,7441,7312,7312,7311,7440,7439,7440,7311,7311,7310,7439,7438,7439,7310,7310,7309,7438,7437,7438,7309,7309,7308,7437,7436,7437,7308,7308,7307,7436,7435,7436,7307,7307,7306,7435,7434,7435,7306,7306,7305,7434,7433,7434,7305,7305,7304,7433,7432,7433,7304,7304,7303,7432,7431,7432,7303,7303,7302,7431,7430,7431,7302,7302,7301,7430,7429,7430,7301,7301,7300,7429,7428,7429,7300,7300,7299,7428,7427,7428,7299,7299,7298,7427,7426,7427,7298,7298,7297,7426,7425,7426,7297,7297,7296,7425,7424,7425,7296,7551,7550,7679,7678,7679,7550,7550,7549,7678,7677,7678,7549,7549,7548,7677,7676,7677,7548,7548,7547,7676,7675,7676,7547,7547,7546,7675,7674,7675,7546,7546,7545,7674,7673,7674,7545,7545,7544,7673,7672,7673,7544,7544,7543,7672,7671,7672,7543,7543,7542,7671,7670,7671,7542,7542,7541,7670,7669,7670,7541,7541,7540,7669,7668,7669,7540,7540,7539,7668,7667,7668,7539,7539,7538,7667,7666,7667,7538,7538,7537,7666,7665,7666,7537,7537,7536,7665,7664,7665,7536,7536,7535,7664,7663,7664,7535,7535,7534,7663,7662,7663,7534,7534,7533,7662,7661,7662,7533,7533,7532,7661,7660,7661,7532,7532,7531,7660,7659,7660,7531,7531,7530,7659,7658,7659,7530,7530,7529,7658,7657,7658,7529,7529,7528,7657,7656,7657,7528,7528,7527,7656,7655,7656,7527,7527,7526,7655,7654,7655,7526,7526,7525,7654,7653,7654,7525,7525,7524,7653,7652,7653,7524,7524,7523,7652,7651,7652,7523,7523,7522,7651,7650,7651,7522,7522,7521,7650,7649,7650,7521,7521,7520,7649,7648,7649,7520,7520,7519,7648,7647,7648,7519,7519,7518,7647,7646,7647,7518,7518,7517,7646,7645,7646,7517,7517,7516,7645,7644,7645,7516,7516,7515,7644,7643,7644,7515,7515,7514,7643,7642,7643,7514,7514,7513,7642,7641,7642,7513,7513,7512,7641,7640,7641,7512,7512,7511,7640,7639,7640,7511,7511,7510,7639,7638,7639,7510,7510,7509,7638,7637,7638,7509,7509,7508,7637,7636,7637,7508,7508,7507,7636,7635,7636,7507,7507,7506,7635,7634,7635,7506,7506,7505,7634,7633,7634,7505,7505,7504,7633,7632,7633,7504,7504,7503,7632,7631,7632,7503,7503,7502,7631,7630,7631,7502,7502,7501,7630,7629,7630,7501,7501,7500,7629,7628,7629,7500,7500,7499,7628,7627,7628,7499,7499,7498,7627,7626,7627,7498,7498,7497,7626,7625,7626,7497,7497,7496,7625,7624,7625,7496,7496,7495,7624,7623,7624,7495,7495,7494,7623,7622,7623,7494,7494,7493,7622,7621,7622,7493,7493,7492,7621,7620,7621,7492,7492,7491,7620,7619,7620,7491,7491,7490,7619,7618,7619,7490,7490,7489,7618,7617,7618,7489,7489,7488,7617,7616,7617,7488,7488,7487,7616,7615,7616,7487,7487,7486,7615,7614,7615,7486,7486,7485,7614,7613,7614,7485,7485,7484,7613,7612,7613,7484,7484,7483,7612,7611,7612,7483,7483,7482,7611,7610,7611,7482,7482,7481,7610,7609,7610,7481,7481,7480,7609,7608,7609,7480,7480,7479,7608,7607,7608,7479,7479,7478,7607,7606,7607,7478,7478,7477,7606,7605,7606,7477,7477,7476,7605,7604,7605,7476,7476,7475,7604,7603,7604,7475,7475,7474,7603,7602,7603,7474,7474,7473,7602,7601,7602,7473,7473,7472,7601,7600,7601,7472,7472,7471,7600,7599,7600,7471,7471,7470,7599,7598,7599,7470,7470,7469,7598,7597,7598,7469,7469,7468,7597,7596,7597,7468,7468,7467,7596,7595,7596,7467,7467,7466,7595,7594,7595,7466,7466,7465,7594,7593,7594,7465,7465,7464,7593,7592,7593,7464,7464,7463,7592,7591,7592,7463,7463,7462,7591,7590,7591,7462,7462,7461,7590,7589,7590,7461,7461,7460,7589,7588,7589,7460,7460,7459,7588,7587,7588,7459,7459,7458,7587,7586,7587,7458,7458,7457,7586,7585,7586,7457,7457,7456,7585,7584,7585,7456,7456,7455,7584,7583,7584,7455,7455,7454,7583,7582,7583,7454,7454,7453,7582,7581,7582,7453,7453,7452,7581,7580,7581,7452,7452,7451,7580,7579,7580,7451,7451,7450,7579,7578,7579,7450,7450,7449,7578,7577,7578,7449,7449,7448,7577,7576,7577,7448,7448,7447,7576,7575,7576,7447,7447,7446,7575,7574,7575,7446,7446,7445,7574,7573,7574,7445,7445,7444,7573,7572,7573,7444,7444,7443,7572,7571,7572,7443,7443,7442,7571,7570,7571,7442,7442,7441,7570,7569,7570,7441,7441,7440,7569,7568,7569,7440,7440,7439,7568,7567,7568,7439,7439,7438,7567,7566,7567,7438,7438,7437,7566,7565,7566,7437,7437,7436,7565,7564,7565,7436,7436,7435,7564,7563,7564,7435,7435,7434,7563,7562,7563,7434,7434,7433,7562,7561,7562,7433,7433,7432,7561,7560,7561,7432,7432,7431,7560,7559,7560,7431,7431,7430,7559,7558,7559,7430,7430,7429,7558,7557,7558,7429,7429,7428,7557,7556,7557,7428,7428,7427,7556,7555,7556,7427,7427,7426,7555,7554,7555,7426,7426,7425,7554,7553,7554,7425,7425,7424,7553,7552,7553,7424,7679,7678,7807,7806,7807,7678,7678,7677,7806,7805,7806,7677,7677,7676,7805,7804,7805,7676,7676,7675,7804,7803,7804,7675,7675,7674,7803,7802,7803,7674,7674,7673,7802,7801,7802,7673,7673,7672,7801,7800,7801,7672,7672,7671,7800,7799,7800,7671,7671,7670,7799,7798,7799,7670,7670,7669,7798,7797,7798,7669,7669,7668,7797,7796,7797,7668,7668,7667,7796,7795,7796,7667,7667,7666,7795,7794,7795,7666,7666,7665,7794,7793,7794,7665,7665,7664,7793,7792,7793,7664,7664,7663,7792,7791,7792,7663,7663,7662,7791,7790,7791,7662,7662,7661,7790,7789,7790,7661,7661,7660,7789,7788,7789,7660,7660,7659,7788,7787,7788,7659,7659,7658,7787,7786,7787,7658,7658,7657,7786,7785,7786,7657,7657,7656,7785,7784,7785,7656,7656,7655,7784,7783,7784,7655,7655,7654,7783,7782,7783,7654,7654,7653,7782,7781,7782,7653,7653,7652,7781,7780,7781,7652,7652,7651,7780,7779,7780,7651,7651,7650,7779,7778,7779,7650,7650,7649,7778,7777,7778,7649,7649,7648,7777,7776,7777,7648,7648,7647,7776,7775,7776,7647,7647,7646,7775,7774,7775,7646,7646,7645,7774,7773,7774,7645,7645,7644,7773,7772,7773,7644,7644,7643,7772,7771,7772,7643,7643,7642,7771,7770,7771,7642,7642,7641,7770,7769,7770,7641,7641,7640,7769,7768,7769,7640,7640,7639,7768,7767,7768,7639,7639,7638,7767,7766,7767,7638,7638,7637,7766,7765,7766,7637,7637,7636,7765,7764,7765,7636,7636,7635,7764,7763,7764,7635,7635,7634,7763,7762,7763,7634,7634,7633,7762,7761,7762,7633,7633,7632,7761,7760,7761,7632,7632,7631,7760,7759,7760,7631,7631,7630,7759,7758,7759,7630,7630,7629,7758,7757,7758,7629,7629,7628,7757,7756,7757,7628,7628,7627,7756,7755,7756,7627,7627,7626,7755,7754,7755,7626,7626,7625,7754,7753,7754,7625,7625,7624,7753,7752,7753,7624,7624,7623,7752,7751,7752,7623,7623,7622,7751,7750,7751,7622,7622,7621,7750,7749,7750,7621,7621,7620,7749,7748,7749,7620,7620,7619,7748,7747,7748,7619,7619,7618,7747,7746,7747,7618,7618,7617,7746,7745,7746,7617,7617,7616,7745,7744,7745,7616,7616,7615,7744,7743,7744,7615,7615,7614,7743,7742,7743,7614,7614,7613,7742,7741,7742,7613,7613,7612,7741,7740,7741,7612,7612,7611,7740,7739,7740,7611,7611,7610,7739,7738,7739,7610,7610,7609,7738,7737,7738,7609,7609,7608,7737,7736,7737,7608,7608,7607,7736,7735,7736,7607,7607,7606,7735,7734,7735,7606,7606,7605,7734,7733,7734,7605,7605,7604,7733,7732,7733,7604,7604,7603,7732,7731,7732,7603,7603,7602,7731,7730,7731,7602,7602,7601,7730,7729,7730,7601,7601,7600,7729,7728,7729,7600,7600,7599,7728,7727,7728,7599,7599,7598,7727,7726,7727,7598,7598,7597,7726,7725,7726,7597,7597,7596,7725,7724,7725,7596,7596,7595,7724,7723,7724,7595,7595,7594,7723,7722,7723,7594,7594,7593,7722,7721,7722,7593,7593,7592,7721,7720,7721,7592,7592,7591,7720,7719,7720,7591,7591,7590,7719,7718,7719,7590,7590,7589,7718,7717,7718,7589,7589,7588,7717,7716,7717,7588,7588,7587,7716,7715,7716,7587,7587,7586,7715,7714,7715,7586,7586,7585,7714,7713,7714,7585,7585,7584,7713,7712,7713,7584,7584,7583,7712,7711,7712,7583,7583,7582,7711,7710,7711,7582,7582,7581,7710,7709,7710,7581,7581,7580,7709,7708,7709,7580,7580,7579,7708,7707,7708,7579,7579,7578,7707,7706,7707,7578,7578,7577,7706,7705,7706,7577,7577,7576,7705,7704,7705,7576,7576,7575,7704,7703,7704,7575,7575,7574,7703,7702,7703,7574,7574,7573,7702,7701,7702,7573,7573,7572,7701,7700,7701,7572,7572,7571,7700,7699,7700,7571,7571,7570,7699,7698,7699,7570,7570,7569,7698,7697,7698,7569,7569,7568,7697,7696,7697,7568,7568,7567,7696,7695,7696,7567,7567,7566,7695,7694,7695,7566,7566,7565,7694,7693,7694,7565,7565,7564,7693,7692,7693,7564,7564,7563,7692,7691,7692,7563,7563,7562,7691,7690,7691,7562,7562,7561,7690,7689,7690,7561,7561,7560,7689,7688,7689,7560,7560,7559,7688,7687,7688,7559,7559,7558,7687,7686,7687,7558,7558,7557,7686,7685,7686,7557,7557,7556,7685,7684,7685,7556,7556,7555,7684,7683,7684,7555,7555,7554,7683,7682,7683,7554,7554,7553,7682,7681,7682,7553,7553,7552,7681,7680,7681,7552,7807,7806,7935,7934,7935,7806,7806,7805,7934,7933,7934,7805,7805,7804,7933,7932,7933,7804,7804,7803,7932,7931,7932,7803,7803,7802,7931,7930,7931,7802,7802,7801,7930,7929,7930,7801,7801,7800,7929,7928,7929,7800,7800,7799,7928,7927,7928,7799,7799,7798,7927,7926,7927,7798,7798,7797,7926,7925,7926,7797,7797,7796,7925,7924,7925,7796,7796,7795,7924,7923,7924,7795,7795,7794,7923,7922,7923,7794,7794,7793,7922,7921,7922,7793,7793,7792,7921,7920,7921,7792,7792,7791,7920,7919,7920,7791,7791,7790,7919,7918,7919,7790,7790,7789,7918,7917,7918,7789,7789,7788,7917,7916,7917,7788,7788,7787,7916,7915,7916,7787,7787,7786,7915,7914,7915,7786,7786,7785,7914,7913,7914,7785,7785,7784,7913,7912,7913,7784,7784,7783,7912,7911,7912,7783,7783,7782,7911,7910,7911,7782,7782,7781,7910,7909,7910,7781,7781,7780,7909,7908,7909,7780,7780,7779,7908,7907,7908,7779,7779,7778,7907,7906,7907,7778,7778,7777,7906,7905,7906,7777,7777,7776,7905,7904,7905,7776,7776,7775,7904,7903,7904,7775,7775,7774,7903,7902,7903,7774,7774,7773,7902,7901,7902,7773,7773,7772,7901,7900,7901,7772,7772,7771,7900,7899,7900,7771,7771,7770,7899,7898,7899,7770,7770,7769,7898,7897,7898,7769,7769,7768,7897,7896,7897,7768,7768,7767,7896,7895,7896,7767,7767,7766,7895,7894,7895,7766,7766,7765,7894,7893,7894,7765,7765,7764,7893,7892,7893,7764,7764,7763,7892,7891,7892,7763,7763,7762,7891,7890,7891,7762,7762,7761,7890,7889,7890,7761,7761,7760,7889,7888,7889,7760,7760,7759,7888,7887,7888,7759,7759,7758,7887,7886,7887,7758,7758,7757,7886,7885,7886,7757,7757,7756,7885,7884,7885,7756,7756,7755,7884,7883,7884,7755,7755,7754,7883,7882,7883,7754,7754,7753,7882,7881,7882,7753,7753,7752,7881,7880,7881,7752,7752,7751,7880,7879,7880,7751,7751,7750,7879,7878,7879,7750,7750,7749,7878,7877,7878,7749,7749,7748,7877,7876,7877,7748,7748,7747,7876,7875,7876,7747,7747,7746,7875,7874,7875,7746,7746,7745,7874,7873,7874,7745,7745,7744,7873,7872,7873,7744,7744,7743,7872,7871,7872,7743,7743,7742,7871,7870,7871,7742,7742,7741,7870,7869,7870,7741,7741,7740,7869,7868,7869,7740,7740,7739,7868,7867,7868,7739,7739,7738,7867,7866,7867,7738,7738,7737,7866,7865,7866,7737,7737,7736,7865,7864,7865,7736,7736,7735,7864,7863,7864,7735,7735,7734,7863,7862,7863,7734,7734,7733,7862,7861,7862,7733,7733,7732,7861,7860,7861,7732,7732,7731,7860,7859,7860,7731,7731,7730,7859,7858,7859,7730,7730,7729,7858,7857,7858,7729,7729,7728,7857,7856,7857,7728,7728,7727,7856,7855,7856,7727,7727,7726,7855,7854,7855,7726,7726,7725,7854,7853,7854,7725,7725,7724,7853,7852,7853,7724,7724,7723,7852,7851,7852,7723,7723,7722,7851,7850,7851,7722,7722,7721,7850,7849,7850,7721,7721,7720,7849,7848,7849,7720,7720,7719,7848,7847,7848,7719,7719,7718,7847,7846,7847,7718,7718,7717,7846,7845,7846,7717,7717,7716,7845,7844,7845,7716,7716,7715,7844,7843,7844,7715,7715,7714,7843,7842,7843,7714,7714,7713,7842,7841,7842,7713,7713,7712,7841,7840,7841,7712,7712,7711,7840,7839,7840,7711,7711,7710,7839,7838,7839,7710,7710,7709,7838,7837,7838,7709,7709,7708,7837,7836,7837,7708,7708,7707,7836,7835,7836,7707,7707,7706,7835,7834,7835,7706,7706,7705,7834,7833,7834,7705,7705,7704,7833,7832,7833,7704,7704,7703,7832,7831,7832,7703,7703,7702,7831,7830,7831,7702,7702,7701,7830,7829,7830,7701,7701,7700,7829,7828,7829,7700,7700,7699,7828,7827,7828,7699,7699,7698,7827,7826,7827,7698,7698,7697,7826,7825,7826,7697,7697,7696,7825,7824,7825,7696,7696,7695,7824,7823,7824,7695,7695,7694,7823,7822,7823,7694,7694,7693,7822,7821,7822,7693,7693,7692,7821,7820,7821,7692,7692,7691,7820,7819,7820,7691,7691,7690,7819,7818,7819,7690,7690,7689,7818,7817,7818,7689,7689,7688,7817,7816,7817,7688,7688,7687,7816,7815,7816,7687,7687,7686,7815,7814,7815,7686,7686,7685,7814,7813,7814,7685,7685,7684,7813,7812,7813,7684,7684,7683,7812,7811,7812,7683,7683,7682,7811,7810,7811,7682,7682,7681,7810,7809,7810,7681,7681,7680,7809,7808,7809,7680,7935,7934,8063,8062,8063,7934,7934,7933,8062,8061,8062,7933,7933,7932,8061,8060,8061,7932,7932,7931,8060,8059,8060,7931,7931,7930,8059,8058,8059,7930,7930,7929,8058,8057,8058,7929,7929,7928,8057,8056,8057,7928,7928,7927,8056,8055,8056,7927,7927,7926,8055,8054,8055,7926,7926,7925,8054,8053,8054,7925,7925,7924,8053,8052,8053,7924,7924,7923,8052,8051,8052,7923,7923,7922,8051,8050,8051,7922,7922,7921,8050,8049,8050,7921,7921,7920,8049,8048,8049,7920,7920,7919,8048,8047,8048,7919,7919,7918,8047,8046,8047,7918,7918,7917,8046,8045,8046,7917,7917,7916,8045,8044,8045,7916,7916,7915,8044,8043,8044,7915,7915,7914,8043,8042,8043,7914,7914,7913,8042,8041,8042,7913,7913,7912,8041,8040,8041,7912,7912,7911,8040,8039,8040,7911,7911,7910,8039,8038,8039,7910,7910,7909,8038,8037,8038,7909,7909,7908,8037,8036,8037,7908,7908,7907,8036,8035,8036,7907,7907,7906,8035,8034,8035,7906,7906,7905,8034,8033,8034,7905,7905,7904,8033,8032,8033,7904,7904,7903,8032,8031,8032,7903,7903,7902,8031,8030,8031,7902,7902,7901,8030,8029,8030,7901,7901,7900,8029,8028,8029,7900,7900,7899,8028,8027,8028,7899,7899,7898,8027,8026,8027,7898,7898,7897,8026,8025,8026,7897,7897,7896,8025,8024,8025,7896,7896,7895,8024,8023,8024,7895,7895,7894,8023,8022,8023,7894,7894,7893,8022,8021,8022,7893,7893,7892,8021,8020,8021,7892,7892,7891,8020,8019,8020,7891,7891,7890,8019,8018,8019,7890,7890,7889,8018,8017,8018,7889,7889,7888,8017,8016,8017,7888,7888,7887,8016,8015,8016,7887,7887,7886,8015,8014,8015,7886,7886,7885,8014,8013,8014,7885,7885,7884,8013,8012,8013,7884,7884,7883,8012,8011,8012,7883,7883,7882,8011,8010,8011,7882,7882,7881,8010,8009,8010,7881,7881,7880,8009,8008,8009,7880,7880,7879,8008,8007,8008,7879,7879,7878,8007,8006,8007,7878,7878,7877,8006,8005,8006,7877,7877,7876,8005,8004,8005,7876,7876,7875,8004,8003,8004,7875,7875,7874,8003,8002,8003,7874,7874,7873,8002,8001,8002,7873,7873,7872,8001,8000,8001,7872,7872,7871,8000,7999,8000,7871,7871,7870,7999,7998,7999,7870,7870,7869,7998,7997,7998,7869,7869,7868,7997,7996,7997,7868,7868,7867,7996,7995,7996,7867,7867,7866,7995,7994,7995,7866,7866,7865,7994,7993,7994,7865,7865,7864,7993,7992,7993,7864,7864,7863,7992,7991,7992,7863,7863,7862,7991,7990,7991,7862,7862,7861,7990,7989,7990,7861,7861,7860,7989,7988,7989,7860,7860,7859,7988,7987,7988,7859,7859,7858,7987,7986,7987,7858,7858,7857,7986,7985,7986,7857,7857,7856,7985,7984,7985,7856,7856,7855,7984,7983,7984,7855,7855,7854,7983,7982,7983,7854,7854,7853,7982,7981,7982,7853,7853,7852,7981,7980,7981,7852,7852,7851,7980,7979,7980,7851,7851,7850,7979,7978,7979,7850,7850,7849,7978,7977,7978,7849,7849,7848,7977,7976,7977,7848,7848,7847,7976,7975,7976,7847,7847,7846,7975,7974,7975,7846,7846,7845,7974,7973,7974,7845,7845,7844,7973,7972,7973,7844,7844,7843,7972,7971,7972,7843,7843,7842,7971,7970,7971,7842,7842,7841,7970,7969,7970,7841,7841,7840,7969,7968,7969,7840,7840,7839,7968,7967,7968,7839,7839,7838,7967,7966,7967,7838,7838,7837,7966,7965,7966,7837,7837,7836,7965,7964,7965,7836,7836,7835,7964,7963,7964,7835,7835,7834,7963,7962,7963,7834,7834,7833,7962,7961,7962,7833,7833,7832,7961,7960,7961,7832,7832,7831,7960,7959,7960,7831,7831,7830,7959,7958,7959,7830,7830,7829,7958,7957,7958,7829,7829,7828,7957,7956,7957,7828,7828,7827,7956,7955,7956,7827,7827,7826,7955,7954,7955,7826,7826,7825,7954,7953,7954,7825,7825,7824,7953,7952,7953,7824,7824,7823,7952,7951,7952,7823,7823,7822,7951,7950,7951,7822,7822,7821,7950,7949,7950,7821,7821,7820,7949,7948,7949,7820,7820,7819,7948,7947,7948,7819,7819,7818,7947,7946,7947,7818,7818,7817,7946,7945,7946,7817,7817,7816,7945,7944,7945,7816,7816,7815,7944,7943,7944,7815,7815,7814,7943,7942,7943,7814,7814,7813,7942,7941,7942,7813,7813,7812,7941,7940,7941,7812,7812,7811,7940,7939,7940,7811,7811,7810,7939,7938,7939,7810,7810,7809,7938,7937,7938,7809,7809,7808,7937,7936,7937,7808,8063,8062,8191,8190,8191,8062,8062,8061,8190,8189,8190,8061,8061,8060,8189,8188,8189,8060,8060,8059,8188,8187,8188,8059,8059,8058,8187,8186,8187,8058,8058,8057,8186,8185,8186,8057,8057,8056,8185,8184,8185,8056,8056,8055,8184,8183,8184,8055,8055,8054,8183,8182,8183,8054,8054,8053,8182,8181,8182,8053,8053,8052,8181,8180,8181,8052,8052,8051,8180,8179,8180,8051,8051,8050,8179,8178,8179,8050,8050,8049,8178,8177,8178,8049,8049,8048,8177,8176,8177,8048,8048,8047,8176,8175,8176,8047,8047,8046,8175,8174,8175,8046,8046,8045,8174,8173,8174,8045,8045,8044,8173,8172,8173,8044,8044,8043,8172,8171,8172,8043,8043,8042,8171,8170,8171,8042,8042,8041,8170,8169,8170,8041,8041,8040,8169,8168,8169,8040,8040,8039,8168,8167,8168,8039,8039,8038,8167,8166,8167,8038,8038,8037,8166,8165,8166,8037,8037,8036,8165,8164,8165,8036,8036,8035,8164,8163,8164,8035,8035,8034,8163,8162,8163,8034,8034,8033,8162,8161,8162,8033,8033,8032,8161,8160,8161,8032,8032,8031,8160,8159,8160,8031,8031,8030,8159,8158,8159,8030,8030,8029,8158,8157,8158,8029,8029,8028,8157,8156,8157,8028,8028,8027,8156,8155,8156,8027,8027,8026,8155,8154,8155,8026,8026,8025,8154,8153,8154,8025,8025,8024,8153,8152,8153,8024,8024,8023,8152,8151,8152,8023,8023,8022,8151,8150,8151,8022,8022,8021,8150,8149,8150,8021,8021,8020,8149,8148,8149,8020,8020,8019,8148,8147,8148,8019,8019,8018,8147,8146,8147,8018,8018,8017,8146,8145,8146,8017,8017,8016,8145,8144,8145,8016,8016,8015,8144,8143,8144,8015,8015,8014,8143,8142,8143,8014,8014,8013,8142,8141,8142,8013,8013,8012,8141,8140,8141,8012,8012,8011,8140,8139,8140,8011,8011,8010,8139,8138,8139,8010,8010,8009,8138,8137,8138,8009,8009,8008,8137,8136,8137,8008,8008,8007,8136,8135,8136,8007,8007,8006,8135,8134,8135,8006,8006,8005,8134,8133,8134,8005,8005,8004,8133,8132,8133,8004,8004,8003,8132,8131,8132,8003,8003,8002,8131,8130,8131,8002,8002,8001,8130,8129,8130,8001,8001,8000,8129,8128,8129,8000,8000,7999,8128,8127,8128,7999,7999,7998,8127,8126,8127,7998,7998,7997,8126,8125,8126,7997,7997,7996,8125,8124,8125,7996,7996,7995,8124,8123,8124,7995,7995,7994,8123,8122,8123,7994,7994,7993,8122,8121,8122,7993,7993,7992,8121,8120,8121,7992,7992,7991,8120,8119,8120,7991,7991,7990,8119,8118,8119,7990,7990,7989,8118,8117,8118,7989,7989,7988,8117,8116,8117,7988,7988,7987,8116,8115,8116,7987,7987,7986,8115,8114,8115,7986,7986,7985,8114,8113,8114,7985,7985,7984,8113,8112,8113,7984,7984,7983,8112,8111,8112,7983,7983,7982,8111,8110,8111,7982,7982,7981,8110,8109,8110,7981,7981,7980,8109,8108,8109,7980,7980,7979,8108,8107,8108,7979,7979,7978,8107,8106,8107,7978,7978,7977,8106,8105,8106,7977,7977,7976,8105,8104,8105,7976,7976,7975,8104,8103,8104,7975,7975,7974,8103,8102,8103,7974,7974,7973,8102,8101,8102,7973,7973,7972,8101,8100,8101,7972,7972,7971,8100,8099,8100,7971,7971,7970,8099,8098,8099,7970,7970,7969,8098,8097,8098,7969,7969,7968,8097,8096,8097,7968,7968,7967,8096,8095,8096,7967,7967,7966,8095,8094,8095,7966,7966,7965,8094,8093,8094,7965,7965,7964,8093,8092,8093,7964,7964,7963,8092,8091,8092,7963,7963,7962,8091,8090,8091,7962,7962,7961,8090,8089,8090,7961,7961,7960,8089,8088,8089,7960,7960,7959,8088,8087,8088,7959,7959,7958,8087,8086,8087,7958,7958,7957,8086,8085,8086,7957,7957,7956,8085,8084,8085,7956,7956,7955,8084,8083,8084,7955,7955,7954,8083,8082,8083,7954,7954,7953,8082,8081,8082,7953,7953,7952,8081,8080,8081,7952,7952,7951,8080,8079,8080,7951,7951,7950,8079,8078,8079,7950,7950,7949,8078,8077,8078,7949,7949,7948,8077,8076,8077,7948,7948,7947,8076,8075,8076,7947,7947,7946,8075,8074,8075,7946,7946,7945,8074,8073,8074,7945,7945,7944,8073,8072,8073,7944,7944,7943,8072,8071,8072,7943,7943,7942,8071,8070,8071,7942,7942,7941,8070,8069,8070,7941,7941,7940,8069,8068,8069,7940,7940,7939,8068,8067,8068,7939,7939,7938,8067,8066,8067,7938,7938,7937,8066,8065,8066,7937,7937,7936,8065,8064,8065,7936,8191,8190,8319,8318,8319,8190,8190,8189,8318,8317,8318,8189,8189,8188,8317,8316,8317,8188,8188,8187,8316,8315,8316,8187,8187,8186,8315,8314,8315,8186,8186,8185,8314,8313,8314,8185,8185,8184,8313,8312,8313,8184,8184,8183,8312,8311,8312,8183,8183,8182,8311,8310,8311,8182,8182,8181,8310,8309,8310,8181,8181,8180,8309,8308,8309,8180,8180,8179,8308,8307,8308,8179,8179,8178,8307,8306,8307,8178,8178,8177,8306,8305,8306,8177,8177,8176,8305,8304,8305,8176,8176,8175,8304,8303,8304,8175,8175,8174,8303,8302,8303,8174,8174,8173,8302,8301,8302,8173,8173,8172,8301,8300,8301,8172,8172,8171,8300,8299,8300,8171,8171,8170,8299,8298,8299,8170,8170,8169,8298,8297,8298,8169,8169,8168,8297,8296,8297,8168,8168,8167,8296,8295,8296,8167,8167,8166,8295,8294,8295,8166,8166,8165,8294,8293,8294,8165,8165,8164,8293,8292,8293,8164,8164,8163,8292,8291,8292,8163,8163,8162,8291,8290,8291,8162,8162,8161,8290,8289,8290,8161,8161,8160,8289,8288,8289,8160,8160,8159,8288,8287,8288,8159,8159,8158,8287,8286,8287,8158,8158,8157,8286,8285,8286,8157,8157,8156,8285,8284,8285,8156,8156,8155,8284,8283,8284,8155,8155,8154,8283,8282,8283,8154,8154,8153,8282,8281,8282,8153,8153,8152,8281,8280,8281,8152,8152,8151,8280,8279,8280,8151,8151,8150,8279,8278,8279,8150,8150,8149,8278,8277,8278,8149,8149,8148,8277,8276,8277,8148,8148,8147,8276,8275,8276,8147,8147,8146,8275,8274,8275,8146,8146,8145,8274,8273,8274,8145,8145,8144,8273,8272,8273,8144,8144,8143,8272,8271,8272,8143,8143,8142,8271,8270,8271,8142,8142,8141,8270,8269,8270,8141,8141,8140,8269,8268,8269,8140,8140,8139,8268,8267,8268,8139,8139,8138,8267,8266,8267,8138,8138,8137,8266,8265,8266,8137,8137,8136,8265,8264,8265,8136,8136,8135,8264,8263,8264,8135,8135,8134,8263,8262,8263,8134,8134,8133,8262,8261,8262,8133,8133,8132,8261,8260,8261,8132,8132,8131,8260,8259,8260,8131,8131,8130,8259,8258,8259,8130,8130,8129,8258,8257,8258,8129,8129,8128,8257,8256,8257,8128,8128,8127,8256,8255,8256,8127,8127,8126,8255,8254,8255,8126,8126,8125,8254,8253,8254,8125,8125,8124,8253,8252,8253,8124,8124,8123,8252,8251,8252,8123,8123,8122,8251,8250,8251,8122,8122,8121,8250,8249,8250,8121,8121,8120,8249,8248,8249,8120,8120,8119,8248,8247,8248,8119,8119,8118,8247,8246,8247,8118,8118,8117,8246,8245,8246,8117,8117,8116,8245,8244,8245,8116,8116,8115,8244,8243,8244,8115,8115,8114,8243,8242,8243,8114,8114,8113,8242,8241,8242,8113,8113,8112,8241,8240,8241,8112,8112,8111,8240,8239,8240,8111,8111,8110,8239,8238,8239,8110,8110,8109,8238,8237,8238,8109,8109,8108,8237,8236,8237,8108,8108,8107,8236,8235,8236,8107,8107,8106,8235,8234,8235,8106,8106,8105,8234,8233,8234,8105,8105,8104,8233,8232,8233,8104,8104,8103,8232,8231,8232,8103,8103,8102,8231,8230,8231,8102,8102,8101,8230,8229,8230,8101,8101,8100,8229,8228,8229,8100,8100,8099,8228,8227,8228,8099,8099,8098,8227,8226,8227,8098,8098,8097,8226,8225,8226,8097,8097,8096,8225,8224,8225,8096,8096,8095,8224,8223,8224,8095,8095,8094,8223,8222,8223,8094,8094,8093,8222,8221,8222,8093,8093,8092,8221,8220,8221,8092,8092,8091,8220,8219,8220,8091,8091,8090,8219,8218,8219,8090,8090,8089,8218,8217,8218,8089,8089,8088,8217,8216,8217,8088,8088,8087,8216,8215,8216,8087,8087,8086,8215,8214,8215,8086,8086,8085,8214,8213,8214,8085,8085,8084,8213,8212,8213,8084,8084,8083,8212,8211,8212,8083,8083,8082,8211,8210,8211,8082,8082,8081,8210,8209,8210,8081,8081,8080,8209,8208,8209,8080,8080,8079,8208,8207,8208,8079,8079,8078,8207,8206,8207,8078,8078,8077,8206,8205,8206,8077,8077,8076,8205,8204,8205,8076,8076,8075,8204,8203,8204,8075,8075,8074,8203,8202,8203,8074,8074,8073,8202,8201,8202,8073,8073,8072,8201,8200,8201,8072,8072,8071,8200,8199,8200,8071,8071,8070,8199,8198,8199,8070,8070,8069,8198,8197,8198,8069,8069,8068,8197,8196,8197,8068,8068,8067,8196,8195,8196,8067,8067,8066,8195,8194,8195,8066,8066,8065,8194,8193,8194,8065,8065,8064,8193,8192,8193,8064,8319,8318,8447,8446,8447,8318,8318,8317,8446,8445,8446,8317,8317,8316,8445,8444,8445,8316,8316,8315,8444,8443,8444,8315,8315,8314,8443,8442,8443,8314,8314,8313,8442,8441,8442,8313,8313,8312,8441,8440,8441,8312,8312,8311,8440,8439,8440,8311,8311,8310,8439,8438,8439,8310,8310,8309,8438,8437,8438,8309,8309,8308,8437,8436,8437,8308,8308,8307,8436,8435,8436,8307,8307,8306,8435,8434,8435,8306,8306,8305,8434,8433,8434,8305,8305,8304,8433,8432,8433,8304,8304,8303,8432,8431,8432,8303,8303,8302,8431,8430,8431,8302,8302,8301,8430,8429,8430,8301,8301,8300,8429,8428,8429,8300,8300,8299,8428,8427,8428,8299,8299,8298,8427,8426,8427,8298,8298,8297,8426,8425,8426,8297,8297,8296,8425,8424,8425,8296,8296,8295,8424,8423,8424,8295,8295,8294,8423,8422,8423,8294,8294,8293,8422,8421,8422,8293,8293,8292,8421,8420,8421,8292,8292,8291,8420,8419,8420,8291,8291,8290,8419,8418,8419,8290,8290,8289,8418,8417,8418,8289,8289,8288,8417,8416,8417,8288,8288,8287,8416,8415,8416,8287,8287,8286,8415,8414,8415,8286,8286,8285,8414,8413,8414,8285,8285,8284,8413,8412,8413,8284,8284,8283,8412,8411,8412,8283,8283,8282,8411,8410,8411,8282,8282,8281,8410,8409,8410,8281,8281,8280,8409,8408,8409,8280,8280,8279,8408,8407,8408,8279,8279,8278,8407,8406,8407,8278,8278,8277,8406,8405,8406,8277,8277,8276,8405,8404,8405,8276,8276,8275,8404,8403,8404,8275,8275,8274,8403,8402,8403,8274,8274,8273,8402,8401,8402,8273,8273,8272,8401,8400,8401,8272,8272,8271,8400,8399,8400,8271,8271,8270,8399,8398,8399,8270,8270,8269,8398,8397,8398,8269,8269,8268,8397,8396,8397,8268,8268,8267,8396,8395,8396,8267,8267,8266,8395,8394,8395,8266,8266,8265,8394,8393,8394,8265,8265,8264,8393,8392,8393,8264,8264,8263,8392,8391,8392,8263,8263,8262,8391,8390,8391,8262,8262,8261,8390,8389,8390,8261,8261,8260,8389,8388,8389,8260,8260,8259,8388,8387,8388,8259,8259,8258,8387,8386,8387,8258,8258,8257,8386,8385,8386,8257,8257,8256,8385,8384,8385,8256,8256,8255,8384,8383,8384,8255,8255,8254,8383,8382,8383,8254,8254,8253,8382,8381,8382,8253,8253,8252,8381,8380,8381,8252,8252,8251,8380,8379,8380,8251,8251,8250,8379,8378,8379,8250,8250,8249,8378,8377,8378,8249,8249,8248,8377,8376,8377,8248,8248,8247,8376,8375,8376,8247,8247,8246,8375,8374,8375,8246,8246,8245,8374,8373,8374,8245,8245,8244,8373,8372,8373,8244,8244,8243,8372,8371,8372,8243,8243,8242,8371,8370,8371,8242,8242,8241,8370,8369,8370,8241,8241,8240,8369,8368,8369,8240,8240,8239,8368,8367,8368,8239,8239,8238,8367,8366,8367,8238,8238,8237,8366,8365,8366,8237,8237,8236,8365,8364,8365,8236,8236,8235,8364,8363,8364,8235,8235,8234,8363,8362,8363,8234,8234,8233,8362,8361,8362,8233,8233,8232,8361,8360,8361,8232,8232,8231,8360,8359,8360,8231,8231,8230,8359,8358,8359,8230,8230,8229,8358,8357,8358,8229,8229,8228,8357,8356,8357,8228,8228,8227,8356,8355,8356,8227,8227,8226,8355,8354,8355,8226,8226,8225,8354,8353,8354,8225,8225,8224,8353,8352,8353,8224,8224,8223,8352,8351,8352,8223,8223,8222,8351,8350,8351,8222,8222,8221,8350,8349,8350,8221,8221,8220,8349,8348,8349,8220,8220,8219,8348,8347,8348,8219,8219,8218,8347,8346,8347,8218,8218,8217,8346,8345,8346,8217,8217,8216,8345,8344,8345,8216,8216,8215,8344,8343,8344,8215,8215,8214,8343,8342,8343,8214,8214,8213,8342,8341,8342,8213,8213,8212,8341,8340,8341,8212,8212,8211,8340,8339,8340,8211,8211,8210,8339,8338,8339,8210,8210,8209,8338,8337,8338,8209,8209,8208,8337,8336,8337,8208,8208,8207,8336,8335,8336,8207,8207,8206,8335,8334,8335,8206,8206,8205,8334,8333,8334,8205,8205,8204,8333,8332,8333,8204,8204,8203,8332,8331,8332,8203,8203,8202,8331,8330,8331,8202,8202,8201,8330,8329,8330,8201,8201,8200,8329,8328,8329,8200,8200,8199,8328,8327,8328,8199,8199,8198,8327,8326,8327,8198,8198,8197,8326,8325,8326,8197,8197,8196,8325,8324,8325,8196,8196,8195,8324,8323,8324,8195,8195,8194,8323,8322,8323,8194,8194,8193,8322,8321,8322,8193,8193,8192,8321,8320,8321,8192,8447,8446,8575,8574,8575,8446,8446,8445,8574,8573,8574,8445,8445,8444,8573,8572,8573,8444,8444,8443,8572,8571,8572,8443,8443,8442,8571,8570,8571,8442,8442,8441,8570,8569,8570,8441,8441,8440,8569,8568,8569,8440,8440,8439,8568,8567,8568,8439,8439,8438,8567,8566,8567,8438,8438,8437,8566,8565,8566,8437,8437,8436,8565,8564,8565,8436,8436,8435,8564,8563,8564,8435,8435,8434,8563,8562,8563,8434,8434,8433,8562,8561,8562,8433,8433,8432,8561,8560,8561,8432,8432,8431,8560,8559,8560,8431,8431,8430,8559,8558,8559,8430,8430,8429,8558,8557,8558,8429,8429,8428,8557,8556,8557,8428,8428,8427,8556,8555,8556,8427,8427,8426,8555,8554,8555,8426,8426,8425,8554,8553,8554,8425,8425,8424,8553,8552,8553,8424,8424,8423,8552,8551,8552,8423,8423,8422,8551,8550,8551,8422,8422,8421,8550,8549,8550,8421,8421,8420,8549,8548,8549,8420,8420,8419,8548,8547,8548,8419,8419,8418,8547,8546,8547,8418,8418,8417,8546,8545,8546,8417,8417,8416,8545,8544,8545,8416,8416,8415,8544,8543,8544,8415,8415,8414,8543,8542,8543,8414,8414,8413,8542,8541,8542,8413,8413,8412,8541,8540,8541,8412,8412,8411,8540,8539,8540,8411,8411,8410,8539,8538,8539,8410,8410,8409,8538,8537,8538,8409,8409,8408,8537,8536,8537,8408,8408,8407,8536,8535,8536,8407,8407,8406,8535,8534,8535,8406,8406,8405,8534,8533,8534,8405,8405,8404,8533,8532,8533,8404,8404,8403,8532,8531,8532,8403,8403,8402,8531,8530,8531,8402,8402,8401,8530,8529,8530,8401,8401,8400,8529,8528,8529,8400,8400,8399,8528,8527,8528,8399,8399,8398,8527,8526,8527,8398,8398,8397,8526,8525,8526,8397,8397,8396,8525,8524,8525,8396,8396,8395,8524,8523,8524,8395,8395,8394,8523,8522,8523,8394,8394,8393,8522,8521,8522,8393,8393,8392,8521,8520,8521,8392,8392,8391,8520,8519,8520,8391,8391,8390,8519,8518,8519,8390,8390,8389,8518,8517,8518,8389,8389,8388,8517,8516,8517,8388,8388,8387,8516,8515,8516,8387,8387,8386,8515,8514,8515,8386,8386,8385,8514,8513,8514,8385,8385,8384,8513,8512,8513,8384,8384,8383,8512,8511,8512,8383,8383,8382,8511,8510,8511,8382,8382,8381,8510,8509,8510,8381,8381,8380,8509,8508,8509,8380,8380,8379,8508,8507,8508,8379,8379,8378,8507,8506,8507,8378,8378,8377,8506,8505,8506,8377,8377,8376,8505,8504,8505,8376,8376,8375,8504,8503,8504,8375,8375,8374,8503,8502,8503,8374,8374,8373,8502,8501,8502,8373,8373,8372,8501,8500,8501,8372,8372,8371,8500,8499,8500,8371,8371,8370,8499,8498,8499,8370,8370,8369,8498,8497,8498,8369,8369,8368,8497,8496,8497,8368,8368,8367,8496,8495,8496,8367,8367,8366,8495,8494,8495,8366,8366,8365,8494,8493,8494,8365,8365,8364,8493,8492,8493,8364,8364,8363,8492,8491,8492,8363,8363,8362,8491,8490,8491,8362,8362,8361,8490,8489,8490,8361,8361,8360,8489,8488,8489,8360,8360,8359,8488,8487,8488,8359,8359,8358,8487,8486,8487,8358,8358,8357,8486,8485,8486,8357,8357,8356,8485,8484,8485,8356,8356,8355,8484,8483,8484,8355,8355,8354,8483,8482,8483,8354,8354,8353,8482,8481,8482,8353,8353,8352,8481,8480,8481,8352,8352,8351,8480,8479,8480,8351,8351,8350,8479,8478,8479,8350,8350,8349,8478,8477,8478,8349,8349,8348,8477,8476,8477,8348,8348,8347,8476,8475,8476,8347,8347,8346,8475,8474,8475,8346,8346,8345,8474,8473,8474,8345,8345,8344,8473,8472,8473,8344,8344,8343,8472,8471,8472,8343,8343,8342,8471,8470,8471,8342,8342,8341,8470,8469,8470,8341,8341,8340,8469,8468,8469,8340,8340,8339,8468,8467,8468,8339,8339,8338,8467,8466,8467,8338,8338,8337,8466,8465,8466,8337,8337,8336,8465,8464,8465,8336,8336,8335,8464,8463,8464,8335,8335,8334,8463,8462,8463,8334,8334,8333,8462,8461,8462,8333,8333,8332,8461,8460,8461,8332,8332,8331,8460,8459,8460,8331,8331,8330,8459,8458,8459,8330,8330,8329,8458,8457,8458,8329,8329,8328,8457,8456,8457,8328,8328,8327,8456,8455,8456,8327,8327,8326,8455,8454,8455,8326,8326,8325,8454,8453,8454,8325,8325,8324,8453,8452,8453,8324,8324,8323,8452,8451,8452,8323,8323,8322,8451,8450,8451,8322,8322,8321,8450,8449,8450,8321,8321,8320,8449,8448,8449,8320,8575,8574,8703,8702,8703,8574,8574,8573,8702,8701,8702,8573,8573,8572,8701,8700,8701,8572,8572,8571,8700,8699,8700,8571,8571,8570,8699,8698,8699,8570,8570,8569,8698,8697,8698,8569,8569,8568,8697,8696,8697,8568,8568,8567,8696,8695,8696,8567,8567,8566,8695,8694,8695,8566,8566,8565,8694,8693,8694,8565,8565,8564,8693,8692,8693,8564,8564,8563,8692,8691,8692,8563,8563,8562,8691,8690,8691,8562,8562,8561,8690,8689,8690,8561,8561,8560,8689,8688,8689,8560,8560,8559,8688,8687,8688,8559,8559,8558,8687,8686,8687,8558,8558,8557,8686,8685,8686,8557,8557,8556,8685,8684,8685,8556,8556,8555,8684,8683,8684,8555,8555,8554,8683,8682,8683,8554,8554,8553,8682,8681,8682,8553,8553,8552,8681,8680,8681,8552,8552,8551,8680,8679,8680,8551,8551,8550,8679,8678,8679,8550,8550,8549,8678,8677,8678,8549,8549,8548,8677,8676,8677,8548,8548,8547,8676,8675,8676,8547,8547,8546,8675,8674,8675,8546,8546,8545,8674,8673,8674,8545,8545,8544,8673,8672,8673,8544,8544,8543,8672,8671,8672,8543,8543,8542,8671,8670,8671,8542,8542,8541,8670,8669,8670,8541,8541,8540,8669,8668,8669,8540,8540,8539,8668,8667,8668,8539,8539,8538,8667,8666,8667,8538,8538,8537,8666,8665,8666,8537,8537,8536,8665,8664,8665,8536,8536,8535,8664,8663,8664,8535,8535,8534,8663,8662,8663,8534,8534,8533,8662,8661,8662,8533,8533,8532,8661,8660,8661,8532,8532,8531,8660,8659,8660,8531,8531,8530,8659,8658,8659,8530,8530,8529,8658,8657,8658,8529,8529,8528,8657,8656,8657,8528,8528,8527,8656,8655,8656,8527,8527,8526,8655,8654,8655,8526,8526,8525,8654,8653,8654,8525,8525,8524,8653,8652,8653,8524,8524,8523,8652,8651,8652,8523,8523,8522,8651,8650,8651,8522,8522,8521,8650,8649,8650,8521,8521,8520,8649,8648,8649,8520,8520,8519,8648,8647,8648,8519,8519,8518,8647,8646,8647,8518,8518,8517,8646,8645,8646,8517,8517,8516,8645,8644,8645,8516,8516,8515,8644,8643,8644,8515,8515,8514,8643,8642,8643,8514,8514,8513,8642,8641,8642,8513,8513,8512,8641,8640,8641,8512,8512,8511,8640,8639,8640,8511,8511,8510,8639,8638,8639,8510,8510,8509,8638,8637,8638,8509,8509,8508,8637,8636,8637,8508,8508,8507,8636,8635,8636,8507,8507,8506,8635,8634,8635,8506,8506,8505,8634,8633,8634,8505,8505,8504,8633,8632,8633,8504,8504,8503,8632,8631,8632,8503,8503,8502,8631,8630,8631,8502,8502,8501,8630,8629,8630,8501,8501,8500,8629,8628,8629,8500,8500,8499,8628,8627,8628,8499,8499,8498,8627,8626,8627,8498,8498,8497,8626,8625,8626,8497,8497,8496,8625,8624,8625,8496,8496,8495,8624,8623,8624,8495,8495,8494,8623,8622,8623,8494,8494,8493,8622,8621,8622,8493,8493,8492,8621,8620,8621,8492,8492,8491,8620,8619,8620,8491,8491,8490,8619,8618,8619,8490,8490,8489,8618,8617,8618,8489,8489,8488,8617,8616,8617,8488,8488,8487,8616,8615,8616,8487,8487,8486,8615,8614,8615,8486,8486,8485,8614,8613,8614,8485,8485,8484,8613,8612,8613,8484,8484,8483,8612,8611,8612,8483,8483,8482,8611,8610,8611,8482,8482,8481,8610,8609,8610,8481,8481,8480,8609,8608,8609,8480,8480,8479,8608,8607,8608,8479,8479,8478,8607,8606,8607,8478,8478,8477,8606,8605,8606,8477,8477,8476,8605,8604,8605,8476,8476,8475,8604,8603,8604,8475,8475,8474,8603,8602,8603,8474,8474,8473,8602,8601,8602,8473,8473,8472,8601,8600,8601,8472,8472,8471,8600,8599,8600,8471,8471,8470,8599,8598,8599,8470,8470,8469,8598,8597,8598,8469,8469,8468,8597,8596,8597,8468,8468,8467,8596,8595,8596,8467,8467,8466,8595,8594,8595,8466,8466,8465,8594,8593,8594,8465,8465,8464,8593,8592,8593,8464,8464,8463,8592,8591,8592,8463,8463,8462,8591,8590,8591,8462,8462,8461,8590,8589,8590,8461,8461,8460,8589,8588,8589,8460,8460,8459,8588,8587,8588,8459,8459,8458,8587,8586,8587,8458,8458,8457,8586,8585,8586,8457,8457,8456,8585,8584,8585,8456,8456,8455,8584,8583,8584,8455,8455,8454,8583,8582,8583,8454,8454,8453,8582,8581,8582,8453,8453,8452,8581,8580,8581,8452,8452,8451,8580,8579,8580,8451,8451,8450,8579,8578,8579,8450,8450,8449,8578,8577,8578,8449,8449,8448,8577,8576,8577,8448,8703,8702,8831,8830,8831,8702,8702,8701,8830,8829,8830,8701,8701,8700,8829,8828,8829,8700,8700,8699,8828,8827,8828,8699,8699,8698,8827,8826,8827,8698,8698,8697,8826,8825,8826,8697,8697,8696,8825,8824,8825,8696,8696,8695,8824,8823,8824,8695,8695,8694,8823,8822,8823,8694,8694,8693,8822,8821,8822,8693,8693,8692,8821,8820,8821,8692,8692,8691,8820,8819,8820,8691,8691,8690,8819,8818,8819,8690,8690,8689,8818,8817,8818,8689,8689,8688,8817,8816,8817,8688,8688,8687,8816,8815,8816,8687,8687,8686,8815,8814,8815,8686,8686,8685,8814,8813,8814,8685,8685,8684,8813,8812,8813,8684,8684,8683,8812,8811,8812,8683,8683,8682,8811,8810,8811,8682,8682,8681,8810,8809,8810,8681,8681,8680,8809,8808,8809,8680,8680,8679,8808,8807,8808,8679,8679,8678,8807,8806,8807,8678,8678,8677,8806,8805,8806,8677,8677,8676,8805,8804,8805,8676,8676,8675,8804,8803,8804,8675,8675,8674,8803,8802,8803,8674,8674,8673,8802,8801,8802,8673,8673,8672,8801,8800,8801,8672,8672,8671,8800,8799,8800,8671,8671,8670,8799,8798,8799,8670,8670,8669,8798,8797,8798,8669,8669,8668,8797,8796,8797,8668,8668,8667,8796,8795,8796,8667,8667,8666,8795,8794,8795,8666,8666,8665,8794,8793,8794,8665,8665,8664,8793,8792,8793,8664,8664,8663,8792,8791,8792,8663,8663,8662,8791,8790,8791,8662,8662,8661,8790,8789,8790,8661,8661,8660,8789,8788,8789,8660,8660,8659,8788,8787,8788,8659,8659,8658,8787,8786,8787,8658,8658,8657,8786,8785,8786,8657,8657,8656,8785,8784,8785,8656,8656,8655,8784,8783,8784,8655,8655,8654,8783,8782,8783,8654,8654,8653,8782,8781,8782,8653,8653,8652,8781,8780,8781,8652,8652,8651,8780,8779,8780,8651,8651,8650,8779,8778,8779,8650,8650,8649,8778,8777,8778,8649,8649,8648,8777,8776,8777,8648,8648,8647,8776,8775,8776,8647,8647,8646,8775,8774,8775,8646,8646,8645,8774,8773,8774,8645,8645,8644,8773,8772,8773,8644,8644,8643,8772,8771,8772,8643,8643,8642,8771,8770,8771,8642,8642,8641,8770,8769,8770,8641,8641,8640,8769,8768,8769,8640,8640,8639,8768,8767,8768,8639,8639,8638,8767,8766,8767,8638,8638,8637,8766,8765,8766,8637,8637,8636,8765,8764,8765,8636,8636,8635,8764,8763,8764,8635,8635,8634,8763,8762,8763,8634,8634,8633,8762,8761,8762,8633,8633,8632,8761,8760,8761,8632,8632,8631,8760,8759,8760,8631,8631,8630,8759,8758,8759,8630,8630,8629,8758,8757,8758,8629,8629,8628,8757,8756,8757,8628,8628,8627,8756,8755,8756,8627,8627,8626,8755,8754,8755,8626,8626,8625,8754,8753,8754,8625,8625,8624,8753,8752,8753,8624,8624,8623,8752,8751,8752,8623,8623,8622,8751,8750,8751,8622,8622,8621,8750,8749,8750,8621,8621,8620,8749,8748,8749,8620,8620,8619,8748,8747,8748,8619,8619,8618,8747,8746,8747,8618,8618,8617,8746,8745,8746,8617,8617,8616,8745,8744,8745,8616,8616,8615,8744,8743,8744,8615,8615,8614,8743,8742,8743,8614,8614,8613,8742,8741,8742,8613,8613,8612,8741,8740,8741,8612,8612,8611,8740,8739,8740,8611,8611,8610,8739,8738,8739,8610,8610,8609,8738,8737,8738,8609,8609,8608,8737,8736,8737,8608,8608,8607,8736,8735,8736,8607,8607,8606,8735,8734,8735,8606,8606,8605,8734,8733,8734,8605,8605,8604,8733,8732,8733,8604,8604,8603,8732,8731,8732,8603,8603,8602,8731,8730,8731,8602,8602,8601,8730,8729,8730,8601,8601,8600,8729,8728,8729,8600,8600,8599,8728,8727,8728,8599,8599,8598,8727,8726,8727,8598,8598,8597,8726,8725,8726,8597,8597,8596,8725,8724,8725,8596,8596,8595,8724,8723,8724,8595,8595,8594,8723,8722,8723,8594,8594,8593,8722,8721,8722,8593,8593,8592,8721,8720,8721,8592,8592,8591,8720,8719,8720,8591,8591,8590,8719,8718,8719,8590,8590,8589,8718,8717,8718,8589,8589,8588,8717,8716,8717,8588,8588,8587,8716,8715,8716,8587,8587,8586,8715,8714,8715,8586,8586,8585,8714,8713,8714,8585,8585,8584,8713,8712,8713,8584,8584,8583,8712,8711,8712,8583,8583,8582,8711,8710,8711,8582,8582,8581,8710,8709,8710,8581,8581,8580,8709,8708,8709,8580,8580,8579,8708,8707,8708,8579,8579,8578,8707,8706,8707,8578,8578,8577,8706,8705,8706,8577,8577,8576,8705,8704,8705,8576,8831,8830,8959,8958,8959,8830,8830,8829,8958,8957,8958,8829,8829,8828,8957,8956,8957,8828,8828,8827,8956,8955,8956,8827,8827,8826,8955,8954,8955,8826,8826,8825,8954,8953,8954,8825,8825,8824,8953,8952,8953,8824,8824,8823,8952,8951,8952,8823,8823,8822,8951,8950,8951,8822,8822,8821,8950,8949,8950,8821,8821,8820,8949,8948,8949,8820,8820,8819,8948,8947,8948,8819,8819,8818,8947,8946,8947,8818,8818,8817,8946,8945,8946,8817,8817,8816,8945,8944,8945,8816,8816,8815,8944,8943,8944,8815,8815,8814,8943,8942,8943,8814,8814,8813,8942,8941,8942,8813,8813,8812,8941,8940,8941,8812,8812,8811,8940,8939,8940,8811,8811,8810,8939,8938,8939,8810,8810,8809,8938,8937,8938,8809,8809,8808,8937,8936,8937,8808,8808,8807,8936,8935,8936,8807,8807,8806,8935,8934,8935,8806,8806,8805,8934,8933,8934,8805,8805,8804,8933,8932,8933,8804,8804,8803,8932,8931,8932,8803,8803,8802,8931,8930,8931,8802,8802,8801,8930,8929,8930,8801,8801,8800,8929,8928,8929,8800,8800,8799,8928,8927,8928,8799,8799,8798,8927,8926,8927,8798,8798,8797,8926,8925,8926,8797,8797,8796,8925,8924,8925,8796,8796,8795,8924,8923,8924,8795,8795,8794,8923,8922,8923,8794,8794,8793,8922,8921,8922,8793,8793,8792,8921,8920,8921,8792,8792,8791,8920,8919,8920,8791,8791,8790,8919,8918,8919,8790,8790,8789,8918,8917,8918,8789,8789,8788,8917,8916,8917,8788,8788,8787,8916,8915,8916,8787,8787,8786,8915,8914,8915,8786,8786,8785,8914,8913,8914,8785,8785,8784,8913,8912,8913,8784,8784,8783,8912,8911,8912,8783,8783,8782,8911,8910,8911,8782,8782,8781,8910,8909,8910,8781,8781,8780,8909,8908,8909,8780,8780,8779,8908,8907,8908,8779,8779,8778,8907,8906,8907,8778,8778,8777,8906,8905,8906,8777,8777,8776,8905,8904,8905,8776,8776,8775,8904,8903,8904,8775,8775,8774,8903,8902,8903,8774,8774,8773,8902,8901,8902,8773,8773,8772,8901,8900,8901,8772,8772,8771,8900,8899,8900,8771,8771,8770,8899,8898,8899,8770,8770,8769,8898,8897,8898,8769,8769,8768,8897,8896,8897,8768,8768,8767,8896,8895,8896,8767,8767,8766,8895,8894,8895,8766,8766,8765,8894,8893,8894,8765,8765,8764,8893,8892,8893,8764,8764,8763,8892,8891,8892,8763,8763,8762,8891,8890,8891,8762,8762,8761,8890,8889,8890,8761,8761,8760,8889,8888,8889,8760,8760,8759,8888,8887,8888,8759,8759,8758,8887,8886,8887,8758,8758,8757,8886,8885,8886,8757,8757,8756,8885,8884,8885,8756,8756,8755,8884,8883,8884,8755,8755,8754,8883,8882,8883,8754,8754,8753,8882,8881,8882,8753,8753,8752,8881,8880,8881,8752,8752,8751,8880,8879,8880,8751,8751,8750,8879,8878,8879,8750,8750,8749,8878,8877,8878,8749,8749,8748,8877,8876,8877,8748,8748,8747,8876,8875,8876,8747,8747,8746,8875,8874,8875,8746,8746,8745,8874,8873,8874,8745,8745,8744,8873,8872,8873,8744,8744,8743,8872,8871,8872,8743,8743,8742,8871,8870,8871,8742,8742,8741,8870,8869,8870,8741,8741,8740,8869,8868,8869,8740,8740,8739,8868,8867,8868,8739,8739,8738,8867,8866,8867,8738,8738,8737,8866,8865,8866,8737,8737,8736,8865,8864,8865,8736,8736,8735,8864,8863,8864,8735,8735,8734,8863,8862,8863,8734,8734,8733,8862,8861,8862,8733,8733,8732,8861,8860,8861,8732,8732,8731,8860,8859,8860,8731,8731,8730,8859,8858,8859,8730,8730,8729,8858,8857,8858,8729,8729,8728,8857,8856,8857,8728,8728,8727,8856,8855,8856,8727,8727,8726,8855,8854,8855,8726,8726,8725,8854,8853,8854,8725,8725,8724,8853,8852,8853,8724,8724,8723,8852,8851,8852,8723,8723,8722,8851,8850,8851,8722,8722,8721,8850,8849,8850,8721,8721,8720,8849,8848,8849,8720,8720,8719,8848,8847,8848,8719,8719,8718,8847,8846,8847,8718,8718,8717,8846,8845,8846,8717,8717,8716,8845,8844,8845,8716,8716,8715,8844,8843,8844,8715,8715,8714,8843,8842,8843,8714,8714,8713,8842,8841,8842,8713,8713,8712,8841,8840,8841,8712,8712,8711,8840,8839,8840,8711,8711,8710,8839,8838,8839,8710,8710,8709,8838,8837,8838,8709,8709,8708,8837,8836,8837,8708,8708,8707,8836,8835,8836,8707,8707,8706,8835,8834,8835,8706,8706,8705,8834,8833,8834,8705,8705,8704,8833,8832,8833,8704,8959,8958,9087,9086,9087,8958,8958,8957,9086,9085,9086,8957,8957,8956,9085,9084,9085,8956,8956,8955,9084,9083,9084,8955,8955,8954,9083,9082,9083,8954,8954,8953,9082,9081,9082,8953,8953,8952,9081,9080,9081,8952,8952,8951,9080,9079,9080,8951,8951,8950,9079,9078,9079,8950,8950,8949,9078,9077,9078,8949,8949,8948,9077,9076,9077,8948,8948,8947,9076,9075,9076,8947,8947,8946,9075,9074,9075,8946,8946,8945,9074,9073,9074,8945,8945,8944,9073,9072,9073,8944,8944,8943,9072,9071,9072,8943,8943,8942,9071,9070,9071,8942,8942,8941,9070,9069,9070,8941,8941,8940,9069,9068,9069,8940,8940,8939,9068,9067,9068,8939,8939,8938,9067,9066,9067,8938,8938,8937,9066,9065,9066,8937,8937,8936,9065,9064,9065,8936,8936,8935,9064,9063,9064,8935,8935,8934,9063,9062,9063,8934,8934,8933,9062,9061,9062,8933,8933,8932,9061,9060,9061,8932,8932,8931,9060,9059,9060,8931,8931,8930,9059,9058,9059,8930,8930,8929,9058,9057,9058,8929,8929,8928,9057,9056,9057,8928,8928,8927,9056,9055,9056,8927,8927,8926,9055,9054,9055,8926,8926,8925,9054,9053,9054,8925,8925,8924,9053,9052,9053,8924,8924,8923,9052,9051,9052,8923,8923,8922,9051,9050,9051,8922,8922,8921,9050,9049,9050,8921,8921,8920,9049,9048,9049,8920,8920,8919,9048,9047,9048,8919,8919,8918,9047,9046,9047,8918,8918,8917,9046,9045,9046,8917,8917,8916,9045,9044,9045,8916,8916,8915,9044,9043,9044,8915,8915,8914,9043,9042,9043,8914,8914,8913,9042,9041,9042,8913,8913,8912,9041,9040,9041,8912,8912,8911,9040,9039,9040,8911,8911,8910,9039,9038,9039,8910,8910,8909,9038,9037,9038,8909,8909,8908,9037,9036,9037,8908,8908,8907,9036,9035,9036,8907,8907,8906,9035,9034,9035,8906,8906,8905,9034,9033,9034,8905,8905,8904,9033,9032,9033,8904,8904,8903,9032,9031,9032,8903,8903,8902,9031,9030,9031,8902,8902,8901,9030,9029,9030,8901,8901,8900,9029,9028,9029,8900,8900,8899,9028,9027,9028,8899,8899,8898,9027,9026,9027,8898,8898,8897,9026,9025,9026,8897,8897,8896,9025,9024,9025,8896,8896,8895,9024,9023,9024,8895,8895,8894,9023,9022,9023,8894,8894,8893,9022,9021,9022,8893,8893,8892,9021,9020,9021,8892,8892,8891,9020,9019,9020,8891,8891,8890,9019,9018,9019,8890,8890,8889,9018,9017,9018,8889,8889,8888,9017,9016,9017,8888,8888,8887,9016,9015,9016,8887,8887,8886,9015,9014,9015,8886,8886,8885,9014,9013,9014,8885,8885,8884,9013,9012,9013,8884,8884,8883,9012,9011,9012,8883,8883,8882,9011,9010,9011,8882,8882,8881,9010,9009,9010,8881,8881,8880,9009,9008,9009,8880,8880,8879,9008,9007,9008,8879,8879,8878,9007,9006,9007,8878,8878,8877,9006,9005,9006,8877,8877,8876,9005,9004,9005,8876,8876,8875,9004,9003,9004,8875,8875,8874,9003,9002,9003,8874,8874,8873,9002,9001,9002,8873,8873,8872,9001,9000,9001,8872,8872,8871,9000,8999,9000,8871,8871,8870,8999,8998,8999,8870,8870,8869,8998,8997,8998,8869,8869,8868,8997,8996,8997,8868,8868,8867,8996,8995,8996,8867,8867,8866,8995,8994,8995,8866,8866,8865,8994,8993,8994,8865,8865,8864,8993,8992,8993,8864,8864,8863,8992,8991,8992,8863,8863,8862,8991,8990,8991,8862,8862,8861,8990,8989,8990,8861,8861,8860,8989,8988,8989,8860,8860,8859,8988,8987,8988,8859,8859,8858,8987,8986,8987,8858,8858,8857,8986,8985,8986,8857,8857,8856,8985,8984,8985,8856,8856,8855,8984,8983,8984,8855,8855,8854,8983,8982,8983,8854,8854,8853,8982,8981,8982,8853,8853,8852,8981,8980,8981,8852,8852,8851,8980,8979,8980,8851,8851,8850,8979,8978,8979,8850,8850,8849,8978,8977,8978,8849,8849,8848,8977,8976,8977,8848,8848,8847,8976,8975,8976,8847,8847,8846,8975,8974,8975,8846,8846,8845,8974,8973,8974,8845,8845,8844,8973,8972,8973,8844,8844,8843,8972,8971,8972,8843,8843,8842,8971,8970,8971,8842,8842,8841,8970,8969,8970,8841,8841,8840,8969,8968,8969,8840,8840,8839,8968,8967,8968,8839,8839,8838,8967,8966,8967,8838,8838,8837,8966,8965,8966,8837,8837,8836,8965,8964,8965,8836,8836,8835,8964,8963,8964,8835,8835,8834,8963,8962,8963,8834,8834,8833,8962,8961,8962,8833,8833,8832,8961,8960,8961,8832,9087,9086,9215,9214,9215,9086,9086,9085,9214,9213,9214,9085,9085,9084,9213,9212,9213,9084,9084,9083,9212,9211,9212,9083,9083,9082,9211,9210,9211,9082,9082,9081,9210,9209,9210,9081,9081,9080,9209,9208,9209,9080,9080,9079,9208,9207,9208,9079,9079,9078,9207,9206,9207,9078,9078,9077,9206,9205,9206,9077,9077,9076,9205,9204,9205,9076,9076,9075,9204,9203,9204,9075,9075,9074,9203,9202,9203,9074,9074,9073,9202,9201,9202,9073,9073,9072,9201,9200,9201,9072,9072,9071,9200,9199,9200,9071,9071,9070,9199,9198,9199,9070,9070,9069,9198,9197,9198,9069,9069,9068,9197,9196,9197,9068,9068,9067,9196,9195,9196,9067,9067,9066,9195,9194,9195,9066,9066,9065,9194,9193,9194,9065,9065,9064,9193,9192,9193,9064,9064,9063,9192,9191,9192,9063,9063,9062,9191,9190,9191,9062,9062,9061,9190,9189,9190,9061,9061,9060,9189,9188,9189,9060,9060,9059,9188,9187,9188,9059,9059,9058,9187,9186,9187,9058,9058,9057,9186,9185,9186,9057,9057,9056,9185,9184,9185,9056,9056,9055,9184,9183,9184,9055,9055,9054,9183,9182,9183,9054,9054,9053,9182,9181,9182,9053,9053,9052,9181,9180,9181,9052,9052,9051,9180,9179,9180,9051,9051,9050,9179,9178,9179,9050,9050,9049,9178,9177,9178,9049,9049,9048,9177,9176,9177,9048,9048,9047,9176,9175,9176,9047,9047,9046,9175,9174,9175,9046,9046,9045,9174,9173,9174,9045,9045,9044,9173,9172,9173,9044,9044,9043,9172,9171,9172,9043,9043,9042,9171,9170,9171,9042,9042,9041,9170,9169,9170,9041,9041,9040,9169,9168,9169,9040,9040,9039,9168,9167,9168,9039,9039,9038,9167,9166,9167,9038,9038,9037,9166,9165,9166,9037,9037,9036,9165,9164,9165,9036,9036,9035,9164,9163,9164,9035,9035,9034,9163,9162,9163,9034,9034,9033,9162,9161,9162,9033,9033,9032,9161,9160,9161,9032,9032,9031,9160,9159,9160,9031,9031,9030,9159,9158,9159,9030,9030,9029,9158,9157,9158,9029,9029,9028,9157,9156,9157,9028,9028,9027,9156,9155,9156,9027,9027,9026,9155,9154,9155,9026,9026,9025,9154,9153,9154,9025,9025,9024,9153,9152,9153,9024,9024,9023,9152,9151,9152,9023,9023,9022,9151,9150,9151,9022,9022,9021,9150,9149,9150,9021,9021,9020,9149,9148,9149,9020,9020,9019,9148,9147,9148,9019,9019,9018,9147,9146,9147,9018,9018,9017,9146,9145,9146,9017,9017,9016,9145,9144,9145,9016,9016,9015,9144,9143,9144,9015,9015,9014,9143,9142,9143,9014,9014,9013,9142,9141,9142,9013,9013,9012,9141,9140,9141,9012,9012,9011,9140,9139,9140,9011,9011,9010,9139,9138,9139,9010,9010,9009,9138,9137,9138,9009,9009,9008,9137,9136,9137,9008,9008,9007,9136,9135,9136,9007,9007,9006,9135,9134,9135,9006,9006,9005,9134,9133,9134,9005,9005,9004,9133,9132,9133,9004,9004,9003,9132,9131,9132,9003,9003,9002,9131,9130,9131,9002,9002,9001,9130,9129,9130,9001,9001,9000,9129,9128,9129,9000,9000,8999,9128,9127,9128,8999,8999,8998,9127,9126,9127,8998,8998,8997,9126,9125,9126,8997,8997,8996,9125,9124,9125,8996,8996,8995,9124,9123,9124,8995,8995,8994,9123,9122,9123,8994,8994,8993,9122,9121,9122,8993,8993,8992,9121,9120,9121,8992,8992,8991,9120,9119,9120,8991,8991,8990,9119,9118,9119,8990,8990,8989,9118,9117,9118,8989,8989,8988,9117,9116,9117,8988,8988,8987,9116,9115,9116,8987,8987,8986,9115,9114,9115,8986,8986,8985,9114,9113,9114,8985,8985,8984,9113,9112,9113,8984,8984,8983,9112,9111,9112,8983,8983,8982,9111,9110,9111,8982,8982,8981,9110,9109,9110,8981,8981,8980,9109,9108,9109,8980,8980,8979,9108,9107,9108,8979,8979,8978,9107,9106,9107,8978,8978,8977,9106,9105,9106,8977,8977,8976,9105,9104,9105,8976,8976,8975,9104,9103,9104,8975,8975,8974,9103,9102,9103,8974,8974,8973,9102,9101,9102,8973,8973,8972,9101,9100,9101,8972,8972,8971,9100,9099,9100,8971,8971,8970,9099,9098,9099,8970,8970,8969,9098,9097,9098,8969,8969,8968,9097,9096,9097,8968,8968,8967,9096,9095,9096,8967,8967,8966,9095,9094,9095,8966,8966,8965,9094,9093,9094,8965,8965,8964,9093,9092,9093,8964,8964,8963,9092,9091,9092,8963,8963,8962,9091,9090,9091,8962,8962,8961,9090,9089,9090,8961,8961,8960,9089,9088,9089,8960,9215,9214,9343,9342,9343,9214,9214,9213,9342,9341,9342,9213,9213,9212,9341,9340,9341,9212,9212,9211,9340,9339,9340,9211,9211,9210,9339,9338,9339,9210,9210,9209,9338,9337,9338,9209,9209,9208,9337,9336,9337,9208,9208,9207,9336,9335,9336,9207,9207,9206,9335,9334,9335,9206,9206,9205,9334,9333,9334,9205,9205,9204,9333,9332,9333,9204,9204,9203,9332,9331,9332,9203,9203,9202,9331,9330,9331,9202,9202,9201,9330,9329,9330,9201,9201,9200,9329,9328,9329,9200,9200,9199,9328,9327,9328,9199,9199,9198,9327,9326,9327,9198,9198,9197,9326,9325,9326,9197,9197,9196,9325,9324,9325,9196,9196,9195,9324,9323,9324,9195,9195,9194,9323,9322,9323,9194,9194,9193,9322,9321,9322,9193,9193,9192,9321,9320,9321,9192,9192,9191,9320,9319,9320,9191,9191,9190,9319,9318,9319,9190,9190,9189,9318,9317,9318,9189,9189,9188,9317,9316,9317,9188,9188,9187,9316,9315,9316,9187,9187,9186,9315,9314,9315,9186,9186,9185,9314,9313,9314,9185,9185,9184,9313,9312,9313,9184,9184,9183,9312,9311,9312,9183,9183,9182,9311,9310,9311,9182,9182,9181,9310,9309,9310,9181,9181,9180,9309,9308,9309,9180,9180,9179,9308,9307,9308,9179,9179,9178,9307,9306,9307,9178,9178,9177,9306,9305,9306,9177,9177,9176,9305,9304,9305,9176,9176,9175,9304,9303,9304,9175,9175,9174,9303,9302,9303,9174,9174,9173,9302,9301,9302,9173,9173,9172,9301,9300,9301,9172,9172,9171,9300,9299,9300,9171,9171,9170,9299,9298,9299,9170,9170,9169,9298,9297,9298,9169,9169,9168,9297,9296,9297,9168,9168,9167,9296,9295,9296,9167,9167,9166,9295,9294,9295,9166,9166,9165,9294,9293,9294,9165,9165,9164,9293,9292,9293,9164,9164,9163,9292,9291,9292,9163,9163,9162,9291,9290,9291,9162,9162,9161,9290,9289,9290,9161,9161,9160,9289,9288,9289,9160,9160,9159,9288,9287,9288,9159,9159,9158,9287,9286,9287,9158,9158,9157,9286,9285,9286,9157,9157,9156,9285,9284,9285,9156,9156,9155,9284,9283,9284,9155,9155,9154,9283,9282,9283,9154,9154,9153,9282,9281,9282,9153,9153,9152,9281,9280,9281,9152,9152,9151,9280,9279,9280,9151,9151,9150,9279,9278,9279,9150,9150,9149,9278,9277,9278,9149,9149,9148,9277,9276,9277,9148,9148,9147,9276,9275,9276,9147,9147,9146,9275,9274,9275,9146,9146,9145,9274,9273,9274,9145,9145,9144,9273,9272,9273,9144,9144,9143,9272,9271,9272,9143,9143,9142,9271,9270,9271,9142,9142,9141,9270,9269,9270,9141,9141,9140,9269,9268,9269,9140,9140,9139,9268,9267,9268,9139,9139,9138,9267,9266,9267,9138,9138,9137,9266,9265,9266,9137,9137,9136,9265,9264,9265,9136,9136,9135,9264,9263,9264,9135,9135,9134,9263,9262,9263,9134,9134,9133,9262,9261,9262,9133,9133,9132,9261,9260,9261,9132,9132,9131,9260,9259,9260,9131,9131,9130,9259,9258,9259,9130,9130,9129,9258,9257,9258,9129,9129,9128,9257,9256,9257,9128,9128,9127,9256,9255,9256,9127,9127,9126,9255,9254,9255,9126,9126,9125,9254,9253,9254,9125,9125,9124,9253,9252,9253,9124,9124,9123,9252,9251,9252,9123,9123,9122,9251,9250,9251,9122,9122,9121,9250,9249,9250,9121,9121,9120,9249,9248,9249,9120,9120,9119,9248,9247,9248,9119,9119,9118,9247,9246,9247,9118,9118,9117,9246,9245,9246,9117,9117,9116,9245,9244,9245,9116,9116,9115,9244,9243,9244,9115,9115,9114,9243,9242,9243,9114,9114,9113,9242,9241,9242,9113,9113,9112,9241,9240,9241,9112,9112,9111,9240,9239,9240,9111,9111,9110,9239,9238,9239,9110,9110,9109,9238,9237,9238,9109,9109,9108,9237,9236,9237,9108,9108,9107,9236,9235,9236,9107,9107,9106,9235,9234,9235,9106,9106,9105,9234,9233,9234,9105,9105,9104,9233,9232,9233,9104,9104,9103,9232,9231,9232,9103,9103,9102,9231,9230,9231,9102,9102,9101,9230,9229,9230,9101,9101,9100,9229,9228,9229,9100,9100,9099,9228,9227,9228,9099,9099,9098,9227,9226,9227,9098,9098,9097,9226,9225,9226,9097,9097,9096,9225,9224,9225,9096,9096,9095,9224,9223,9224,9095,9095,9094,9223,9222,9223,9094,9094,9093,9222,9221,9222,9093,9093,9092,9221,9220,9221,9092,9092,9091,9220,9219,9220,9091,9091,9090,9219,9218,9219,9090,9090,9089,9218,9217,9218,9089,9089,9088,9217,9216,9217,9088,9343,9342,9471,9470,9471,9342,9342,9341,9470,9469,9470,9341,9341,9340,9469,9468,9469,9340,9340,9339,9468,9467,9468,9339,9339,9338,9467,9466,9467,9338,9338,9337,9466,9465,9466,9337,9337,9336,9465,9464,9465,9336,9336,9335,9464,9463,9464,9335,9335,9334,9463,9462,9463,9334,9334,9333,9462,9461,9462,9333,9333,9332,9461,9460,9461,9332,9332,9331,9460,9459,9460,9331,9331,9330,9459,9458,9459,9330,9330,9329,9458,9457,9458,9329,9329,9328,9457,9456,9457,9328,9328,9327,9456,9455,9456,9327,9327,9326,9455,9454,9455,9326,9326,9325,9454,9453,9454,9325,9325,9324,9453,9452,9453,9324,9324,9323,9452,9451,9452,9323,9323,9322,9451,9450,9451,9322,9322,9321,9450,9449,9450,9321,9321,9320,9449,9448,9449,9320,9320,9319,9448,9447,9448,9319,9319,9318,9447,9446,9447,9318,9318,9317,9446,9445,9446,9317,9317,9316,9445,9444,9445,9316,9316,9315,9444,9443,9444,9315,9315,9314,9443,9442,9443,9314,9314,9313,9442,9441,9442,9313,9313,9312,9441,9440,9441,9312,9312,9311,9440,9439,9440,9311,9311,9310,9439,9438,9439,9310,9310,9309,9438,9437,9438,9309,9309,9308,9437,9436,9437,9308,9308,9307,9436,9435,9436,9307,9307,9306,9435,9434,9435,9306,9306,9305,9434,9433,9434,9305,9305,9304,9433,9432,9433,9304,9304,9303,9432,9431,9432,9303,9303,9302,9431,9430,9431,9302,9302,9301,9430,9429,9430,9301,9301,9300,9429,9428,9429,9300,9300,9299,9428,9427,9428,9299,9299,9298,9427,9426,9427,9298,9298,9297,9426,9425,9426,9297,9297,9296,9425,9424,9425,9296,9296,9295,9424,9423,9424,9295,9295,9294,9423,9422,9423,9294,9294,9293,9422,9421,9422,9293,9293,9292,9421,9420,9421,9292,9292,9291,9420,9419,9420,9291,9291,9290,9419,9418,9419,9290,9290,9289,9418,9417,9418,9289,9289,9288,9417,9416,9417,9288,9288,9287,9416,9415,9416,9287,9287,9286,9415,9414,9415,9286,9286,9285,9414,9413,9414,9285,9285,9284,9413,9412,9413,9284,9284,9283,9412,9411,9412,9283,9283,9282,9411,9410,9411,9282,9282,9281,9410,9409,9410,9281,9281,9280,9409,9408,9409,9280,9280,9279,9408,9407,9408,9279,9279,9278,9407,9406,9407,9278,9278,9277,9406,9405,9406,9277,9277,9276,9405,9404,9405,9276,9276,9275,9404,9403,9404,9275,9275,9274,9403,9402,9403,9274,9274,9273,9402,9401,9402,9273,9273,9272,9401,9400,9401,9272,9272,9271,9400,9399,9400,9271,9271,9270,9399,9398,9399,9270,9270,9269,9398,9397,9398,9269,9269,9268,9397,9396,9397,9268,9268,9267,9396,9395,9396,9267,9267,9266,9395,9394,9395,9266,9266,9265,9394,9393,9394,9265,9265,9264,9393,9392,9393,9264,9264,9263,9392,9391,9392,9263,9263,9262,9391,9390,9391,9262,9262,9261,9390,9389,9390,9261,9261,9260,9389,9388,9389,9260,9260,9259,9388,9387,9388,9259,9259,9258,9387,9386,9387,9258,9258,9257,9386,9385,9386,9257,9257,9256,9385,9384,9385,9256,9256,9255,9384,9383,9384,9255,9255,9254,9383,9382,9383,9254,9254,9253,9382,9381,9382,9253,9253,9252,9381,9380,9381,9252,9252,9251,9380,9379,9380,9251,9251,9250,9379,9378,9379,9250,9250,9249,9378,9377,9378,9249,9249,9248,9377,9376,9377,9248,9248,9247,9376,9375,9376,9247,9247,9246,9375,9374,9375,9246,9246,9245,9374,9373,9374,9245,9245,9244,9373,9372,9373,9244,9244,9243,9372,9371,9372,9243,9243,9242,9371,9370,9371,9242,9242,9241,9370,9369,9370,9241,9241,9240,9369,9368,9369,9240,9240,9239,9368,9367,9368,9239,9239,9238,9367,9366,9367,9238,9238,9237,9366,9365,9366,9237,9237,9236,9365,9364,9365,9236,9236,9235,9364,9363,9364,9235,9235,9234,9363,9362,9363,9234,9234,9233,9362,9361,9362,9233,9233,9232,9361,9360,9361,9232,9232,9231,9360,9359,9360,9231,9231,9230,9359,9358,9359,9230,9230,9229,9358,9357,9358,9229,9229,9228,9357,9356,9357,9228,9228,9227,9356,9355,9356,9227,9227,9226,9355,9354,9355,9226,9226,9225,9354,9353,9354,9225,9225,9224,9353,9352,9353,9224,9224,9223,9352,9351,9352,9223,9223,9222,9351,9350,9351,9222,9222,9221,9350,9349,9350,9221,9221,9220,9349,9348,9349,9220,9220,9219,9348,9347,9348,9219,9219,9218,9347,9346,9347,9218,9218,9217,9346,9345,9346,9217,9217,9216,9345,9344,9345,9216,9471,9470,9599,9598,9599,9470,9470,9469,9598,9597,9598,9469,9469,9468,9597,9596,9597,9468,9468,9467,9596,9595,9596,9467,9467,9466,9595,9594,9595,9466,9466,9465,9594,9593,9594,9465,9465,9464,9593,9592,9593,9464,9464,9463,9592,9591,9592,9463,9463,9462,9591,9590,9591,9462,9462,9461,9590,9589,9590,9461,9461,9460,9589,9588,9589,9460,9460,9459,9588,9587,9588,9459,9459,9458,9587,9586,9587,9458,9458,9457,9586,9585,9586,9457,9457,9456,9585,9584,9585,9456,9456,9455,9584,9583,9584,9455,9455,9454,9583,9582,9583,9454,9454,9453,9582,9581,9582,9453,9453,9452,9581,9580,9581,9452,9452,9451,9580,9579,9580,9451,9451,9450,9579,9578,9579,9450,9450,9449,9578,9577,9578,9449,9449,9448,9577,9576,9577,9448,9448,9447,9576,9575,9576,9447,9447,9446,9575,9574,9575,9446,9446,9445,9574,9573,9574,9445,9445,9444,9573,9572,9573,9444,9444,9443,9572,9571,9572,9443,9443,9442,9571,9570,9571,9442,9442,9441,9570,9569,9570,9441,9441,9440,9569,9568,9569,9440,9440,9439,9568,9567,9568,9439,9439,9438,9567,9566,9567,9438,9438,9437,9566,9565,9566,9437,9437,9436,9565,9564,9565,9436,9436,9435,9564,9563,9564,9435,9435,9434,9563,9562,9563,9434,9434,9433,9562,9561,9562,9433,9433,9432,9561,9560,9561,9432,9432,9431,9560,9559,9560,9431,9431,9430,9559,9558,9559,9430,9430,9429,9558,9557,9558,9429,9429,9428,9557,9556,9557,9428,9428,9427,9556,9555,9556,9427,9427,9426,9555,9554,9555,9426,9426,9425,9554,9553,9554,9425,9425,9424,9553,9552,9553,9424,9424,9423,9552,9551,9552,9423,9423,9422,9551,9550,9551,9422,9422,9421,9550,9549,9550,9421,9421,9420,9549,9548,9549,9420,9420,9419,9548,9547,9548,9419,9419,9418,9547,9546,9547,9418,9418,9417,9546,9545,9546,9417,9417,9416,9545,9544,9545,9416,9416,9415,9544,9543,9544,9415,9415,9414,9543,9542,9543,9414,9414,9413,9542,9541,9542,9413,9413,9412,9541,9540,9541,9412,9412,9411,9540,9539,9540,9411,9411,9410,9539,9538,9539,9410,9410,9409,9538,9537,9538,9409,9409,9408,9537,9536,9537,9408,9408,9407,9536,9535,9536,9407,9407,9406,9535,9534,9535,9406,9406,9405,9534,9533,9534,9405,9405,9404,9533,9532,9533,9404,9404,9403,9532,9531,9532,9403,9403,9402,9531,9530,9531,9402,9402,9401,9530,9529,9530,9401,9401,9400,9529,9528,9529,9400,9400,9399,9528,9527,9528,9399,9399,9398,9527,9526,9527,9398,9398,9397,9526,9525,9526,9397,9397,9396,9525,9524,9525,9396,9396,9395,9524,9523,9524,9395,9395,9394,9523,9522,9523,9394,9394,9393,9522,9521,9522,9393,9393,9392,9521,9520,9521,9392,9392,9391,9520,9519,9520,9391,9391,9390,9519,9518,9519,9390,9390,9389,9518,9517,9518,9389,9389,9388,9517,9516,9517,9388,9388,9387,9516,9515,9516,9387,9387,9386,9515,9514,9515,9386,9386,9385,9514,9513,9514,9385,9385,9384,9513,9512,9513,9384,9384,9383,9512,9511,9512,9383,9383,9382,9511,9510,9511,9382,9382,9381,9510,9509,9510,9381,9381,9380,9509,9508,9509,9380,9380,9379,9508,9507,9508,9379,9379,9378,9507,9506,9507,9378,9378,9377,9506,9505,9506,9377,9377,9376,9505,9504,9505,9376,9376,9375,9504,9503,9504,9375,9375,9374,9503,9502,9503,9374,9374,9373,9502,9501,9502,9373,9373,9372,9501,9500,9501,9372,9372,9371,9500,9499,9500,9371,9371,9370,9499,9498,9499,9370,9370,9369,9498,9497,9498,9369,9369,9368,9497,9496,9497,9368,9368,9367,9496,9495,9496,9367,9367,9366,9495,9494,9495,9366,9366,9365,9494,9493,9494,9365,9365,9364,9493,9492,9493,9364,9364,9363,9492,9491,9492,9363,9363,9362,9491,9490,9491,9362,9362,9361,9490,9489,9490,9361,9361,9360,9489,9488,9489,9360,9360,9359,9488,9487,9488,9359,9359,9358,9487,9486,9487,9358,9358,9357,9486,9485,9486,9357,9357,9356,9485,9484,9485,9356,9356,9355,9484,9483,9484,9355,9355,9354,9483,9482,9483,9354,9354,9353,9482,9481,9482,9353,9353,9352,9481,9480,9481,9352,9352,9351,9480,9479,9480,9351,9351,9350,9479,9478,9479,9350,9350,9349,9478,9477,9478,9349,9349,9348,9477,9476,9477,9348,9348,9347,9476,9475,9476,9347,9347,9346,9475,9474,9475,9346,9346,9345,9474,9473,9474,9345,9345,9344,9473,9472,9473,9344,9599,9598,9727,9726,9727,9598,9598,9597,9726,9725,9726,9597,9597,9596,9725,9724,9725,9596,9596,9595,9724,9723,9724,9595,9595,9594,9723,9722,9723,9594,9594,9593,9722,9721,9722,9593,9593,9592,9721,9720,9721,9592,9592,9591,9720,9719,9720,9591,9591,9590,9719,9718,9719,9590,9590,9589,9718,9717,9718,9589,9589,9588,9717,9716,9717,9588,9588,9587,9716,9715,9716,9587,9587,9586,9715,9714,9715,9586,9586,9585,9714,9713,9714,9585,9585,9584,9713,9712,9713,9584,9584,9583,9712,9711,9712,9583,9583,9582,9711,9710,9711,9582,9582,9581,9710,9709,9710,9581,9581,9580,9709,9708,9709,9580,9580,9579,9708,9707,9708,9579,9579,9578,9707,9706,9707,9578,9578,9577,9706,9705,9706,9577,9577,9576,9705,9704,9705,9576,9576,9575,9704,9703,9704,9575,9575,9574,9703,9702,9703,9574,9574,9573,9702,9701,9702,9573,9573,9572,9701,9700,9701,9572,9572,9571,9700,9699,9700,9571,9571,9570,9699,9698,9699,9570,9570,9569,9698,9697,9698,9569,9569,9568,9697,9696,9697,9568,9568,9567,9696,9695,9696,9567,9567,9566,9695,9694,9695,9566,9566,9565,9694,9693,9694,9565,9565,9564,9693,9692,9693,9564,9564,9563,9692,9691,9692,9563,9563,9562,9691,9690,9691,9562,9562,9561,9690,9689,9690,9561,9561,9560,9689,9688,9689,9560,9560,9559,9688,9687,9688,9559,9559,9558,9687,9686,9687,9558,9558,9557,9686,9685,9686,9557,9557,9556,9685,9684,9685,9556,9556,9555,9684,9683,9684,9555,9555,9554,9683,9682,9683,9554,9554,9553,9682,9681,9682,9553,9553,9552,9681,9680,9681,9552,9552,9551,9680,9679,9680,9551,9551,9550,9679,9678,9679,9550,9550,9549,9678,9677,9678,9549,9549,9548,9677,9676,9677,9548,9548,9547,9676,9675,9676,9547,9547,9546,9675,9674,9675,9546,9546,9545,9674,9673,9674,9545,9545,9544,9673,9672,9673,9544,9544,9543,9672,9671,9672,9543,9543,9542,9671,9670,9671,9542,9542,9541,9670,9669,9670,9541,9541,9540,9669,9668,9669,9540,9540,9539,9668,9667,9668,9539,9539,9538,9667,9666,9667,9538,9538,9537,9666,9665,9666,9537,9537,9536,9665,9664,9665,9536,9536,9535,9664,9663,9664,9535,9535,9534,9663,9662,9663,9534,9534,9533,9662,9661,9662,9533,9533,9532,9661,9660,9661,9532,9532,9531,9660,9659,9660,9531,9531,9530,9659,9658,9659,9530,9530,9529,9658,9657,9658,9529,9529,9528,9657,9656,9657,9528,9528,9527,9656,9655,9656,9527,9527,9526,9655,9654,9655,9526,9526,9525,9654,9653,9654,9525,9525,9524,9653,9652,9653,9524,9524,9523,9652,9651,9652,9523,9523,9522,9651,9650,9651,9522,9522,9521,9650,9649,9650,9521,9521,9520,9649,9648,9649,9520,9520,9519,9648,9647,9648,9519,9519,9518,9647,9646,9647,9518,9518,9517,9646,9645,9646,9517,9517,9516,9645,9644,9645,9516,9516,9515,9644,9643,9644,9515,9515,9514,9643,9642,9643,9514,9514,9513,9642,9641,9642,9513,9513,9512,9641,9640,9641,9512,9512,9511,9640,9639,9640,9511,9511,9510,9639,9638,9639,9510,9510,9509,9638,9637,9638,9509,9509,9508,9637,9636,9637,9508,9508,9507,9636,9635,9636,9507,9507,9506,9635,9634,9635,9506,9506,9505,9634,9633,9634,9505,9505,9504,9633,9632,9633,9504,9504,9503,9632,9631,9632,9503,9503,9502,9631,9630,9631,9502,9502,9501,9630,9629,9630,9501,9501,9500,9629,9628,9629,9500,9500,9499,9628,9627,9628,9499,9499,9498,9627,9626,9627,9498,9498,9497,9626,9625,9626,9497,9497,9496,9625,9624,9625,9496,9496,9495,9624,9623,9624,9495,9495,9494,9623,9622,9623,9494,9494,9493,9622,9621,9622,9493,9493,9492,9621,9620,9621,9492,9492,9491,9620,9619,9620,9491,9491,9490,9619,9618,9619,9490,9490,9489,9618,9617,9618,9489,9489,9488,9617,9616,9617,9488,9488,9487,9616,9615,9616,9487,9487,9486,9615,9614,9615,9486,9486,9485,9614,9613,9614,9485,9485,9484,9613,9612,9613,9484,9484,9483,9612,9611,9612,9483,9483,9482,9611,9610,9611,9482,9482,9481,9610,9609,9610,9481,9481,9480,9609,9608,9609,9480,9480,9479,9608,9607,9608,9479,9479,9478,9607,9606,9607,9478,9478,9477,9606,9605,9606,9477,9477,9476,9605,9604,9605,9476,9476,9475,9604,9603,9604,9475,9475,9474,9603,9602,9603,9474,9474,9473,9602,9601,9602,9473,9473,9472,9601,9600,9601,9472,9727,9726,9855,9854,9855,9726,9726,9725,9854,9853,9854,9725,9725,9724,9853,9852,9853,9724,9724,9723,9852,9851,9852,9723,9723,9722,9851,9850,9851,9722,9722,9721,9850,9849,9850,9721,9721,9720,9849,9848,9849,9720,9720,9719,9848,9847,9848,9719,9719,9718,9847,9846,9847,9718,9718,9717,9846,9845,9846,9717,9717,9716,9845,9844,9845,9716,9716,9715,9844,9843,9844,9715,9715,9714,9843,9842,9843,9714,9714,9713,9842,9841,9842,9713,9713,9712,9841,9840,9841,9712,9712,9711,9840,9839,9840,9711,9711,9710,9839,9838,9839,9710,9710,9709,9838,9837,9838,9709,9709,9708,9837,9836,9837,9708,9708,9707,9836,9835,9836,9707,9707,9706,9835,9834,9835,9706,9706,9705,9834,9833,9834,9705,9705,9704,9833,9832,9833,9704,9704,9703,9832,9831,9832,9703,9703,9702,9831,9830,9831,9702,9702,9701,9830,9829,9830,9701,9701,9700,9829,9828,9829,9700,9700,9699,9828,9827,9828,9699,9699,9698,9827,9826,9827,9698,9698,9697,9826,9825,9826,9697,9697,9696,9825,9824,9825,9696,9696,9695,9824,9823,9824,9695,9695,9694,9823,9822,9823,9694,9694,9693,9822,9821,9822,9693,9693,9692,9821,9820,9821,9692,9692,9691,9820,9819,9820,9691,9691,9690,9819,9818,9819,9690,9690,9689,9818,9817,9818,9689,9689,9688,9817,9816,9817,9688,9688,9687,9816,9815,9816,9687,9687,9686,9815,9814,9815,9686,9686,9685,9814,9813,9814,9685,9685,9684,9813,9812,9813,9684,9684,9683,9812,9811,9812,9683,9683,9682,9811,9810,9811,9682,9682,9681,9810,9809,9810,9681,9681,9680,9809,9808,9809,9680,9680,9679,9808,9807,9808,9679,9679,9678,9807,9806,9807,9678,9678,9677,9806,9805,9806,9677,9677,9676,9805,9804,9805,9676,9676,9675,9804,9803,9804,9675,9675,9674,9803,9802,9803,9674,9674,9673,9802,9801,9802,9673,9673,9672,9801,9800,9801,9672,9672,9671,9800,9799,9800,9671,9671,9670,9799,9798,9799,9670,9670,9669,9798,9797,9798,9669,9669,9668,9797,9796,9797,9668,9668,9667,9796,9795,9796,9667,9667,9666,9795,9794,9795,9666,9666,9665,9794,9793,9794,9665,9665,9664,9793,9792,9793,9664,9664,9663,9792,9791,9792,9663,9663,9662,9791,9790,9791,9662,9662,9661,9790,9789,9790,9661,9661,9660,9789,9788,9789,9660,9660,9659,9788,9787,9788,9659,9659,9658,9787,9786,9787,9658,9658,9657,9786,9785,9786,9657,9657,9656,9785,9784,9785,9656,9656,9655,9784,9783,9784,9655,9655,9654,9783,9782,9783,9654,9654,9653,9782,9781,9782,9653,9653,9652,9781,9780,9781,9652,9652,9651,9780,9779,9780,9651,9651,9650,9779,9778,9779,9650,9650,9649,9778,9777,9778,9649,9649,9648,9777,9776,9777,9648,9648,9647,9776,9775,9776,9647,9647,9646,9775,9774,9775,9646,9646,9645,9774,9773,9774,9645,9645,9644,9773,9772,9773,9644,9644,9643,9772,9771,9772,9643,9643,9642,9771,9770,9771,9642,9642,9641,9770,9769,9770,9641,9641,9640,9769,9768,9769,9640,9640,9639,9768,9767,9768,9639,9639,9638,9767,9766,9767,9638,9638,9637,9766,9765,9766,9637,9637,9636,9765,9764,9765,9636,9636,9635,9764,9763,9764,9635,9635,9634,9763,9762,9763,9634,9634,9633,9762,9761,9762,9633,9633,9632,9761,9760,9761,9632,9632,9631,9760,9759,9760,9631,9631,9630,9759,9758,9759,9630,9630,9629,9758,9757,9758,9629,9629,9628,9757,9756,9757,9628,9628,9627,9756,9755,9756,9627,9627,9626,9755,9754,9755,9626,9626,9625,9754,9753,9754,9625,9625,9624,9753,9752,9753,9624,9624,9623,9752,9751,9752,9623,9623,9622,9751,9750,9751,9622,9622,9621,9750,9749,9750,9621,9621,9620,9749,9748,9749,9620,9620,9619,9748,9747,9748,9619,9619,9618,9747,9746,9747,9618,9618,9617,9746,9745,9746,9617,9617,9616,9745,9744,9745,9616,9616,9615,9744,9743,9744,9615,9615,9614,9743,9742,9743,9614,9614,9613,9742,9741,9742,9613,9613,9612,9741,9740,9741,9612,9612,9611,9740,9739,9740,9611,9611,9610,9739,9738,9739,9610,9610,9609,9738,9737,9738,9609,9609,9608,9737,9736,9737,9608,9608,9607,9736,9735,9736,9607,9607,9606,9735,9734,9735,9606,9606,9605,9734,9733,9734,9605,9605,9604,9733,9732,9733,9604,9604,9603,9732,9731,9732,9603,9603,9602,9731,9730,9731,9602,9602,9601,9730,9729,9730,9601,9601,9600,9729,9728,9729,9600,9855,9854,9983,9982,9983,9854,9854,9853,9982,9981,9982,9853,9853,9852,9981,9980,9981,9852,9852,9851,9980,9979,9980,9851,9851,9850,9979,9978,9979,9850,9850,9849,9978,9977,9978,9849,9849,9848,9977,9976,9977,9848,9848,9847,9976,9975,9976,9847,9847,9846,9975,9974,9975,9846,9846,9845,9974,9973,9974,9845,9845,9844,9973,9972,9973,9844,9844,9843,9972,9971,9972,9843,9843,9842,9971,9970,9971,9842,9842,9841,9970,9969,9970,9841,9841,9840,9969,9968,9969,9840,9840,9839,9968,9967,9968,9839,9839,9838,9967,9966,9967,9838,9838,9837,9966,9965,9966,9837,9837,9836,9965,9964,9965,9836,9836,9835,9964,9963,9964,9835,9835,9834,9963,9962,9963,9834,9834,9833,9962,9961,9962,9833,9833,9832,9961,9960,9961,9832,9832,9831,9960,9959,9960,9831,9831,9830,9959,9958,9959,9830,9830,9829,9958,9957,9958,9829,9829,9828,9957,9956,9957,9828,9828,9827,9956,9955,9956,9827,9827,9826,9955,9954,9955,9826,9826,9825,9954,9953,9954,9825,9825,9824,9953,9952,9953,9824,9824,9823,9952,9951,9952,9823,9823,9822,9951,9950,9951,9822,9822,9821,9950,9949,9950,9821,9821,9820,9949,9948,9949,9820,9820,9819,9948,9947,9948,9819,9819,9818,9947,9946,9947,9818,9818,9817,9946,9945,9946,9817,9817,9816,9945,9944,9945,9816,9816,9815,9944,9943,9944,9815,9815,9814,9943,9942,9943,9814,9814,9813,9942,9941,9942,9813,9813,9812,9941,9940,9941,9812,9812,9811,9940,9939,9940,9811,9811,9810,9939,9938,9939,9810,9810,9809,9938,9937,9938,9809,9809,9808,9937,9936,9937,9808,9808,9807,9936,9935,9936,9807,9807,9806,9935,9934,9935,9806,9806,9805,9934,9933,9934,9805,9805,9804,9933,9932,9933,9804,9804,9803,9932,9931,9932,9803,9803,9802,9931,9930,9931,9802,9802,9801,9930,9929,9930,9801,9801,9800,9929,9928,9929,9800,9800,9799,9928,9927,9928,9799,9799,9798,9927,9926,9927,9798,9798,9797,9926,9925,9926,9797,9797,9796,9925,9924,9925,9796,9796,9795,9924,9923,9924,9795,9795,9794,9923,9922,9923,9794,9794,9793,9922,9921,9922,9793,9793,9792,9921,9920,9921,9792,9792,9791,9920,9919,9920,9791,9791,9790,9919,9918,9919,9790,9790,9789,9918,9917,9918,9789,9789,9788,9917,9916,9917,9788,9788,9787,9916,9915,9916,9787,9787,9786,9915,9914,9915,9786,9786,9785,9914,9913,9914,9785,9785,9784,9913,9912,9913,9784,9784,9783,9912,9911,9912,9783,9783,9782,9911,9910,9911,9782,9782,9781,9910,9909,9910,9781,9781,9780,9909,9908,9909,9780,9780,9779,9908,9907,9908,9779,9779,9778,9907,9906,9907,9778,9778,9777,9906,9905,9906,9777,9777,9776,9905,9904,9905,9776,9776,9775,9904,9903,9904,9775,9775,9774,9903,9902,9903,9774,9774,9773,9902,9901,9902,9773,9773,9772,9901,9900,9901,9772,9772,9771,9900,9899,9900,9771,9771,9770,9899,9898,9899,9770,9770,9769,9898,9897,9898,9769,9769,9768,9897,9896,9897,9768,9768,9767,9896,9895,9896,9767,9767,9766,9895,9894,9895,9766,9766,9765,9894,9893,9894,9765,9765,9764,9893,9892,9893,9764,9764,9763,9892,9891,9892,9763,9763,9762,9891,9890,9891,9762,9762,9761,9890,9889,9890,9761,9761,9760,9889,9888,9889,9760,9760,9759,9888,9887,9888,9759,9759,9758,9887,9886,9887,9758,9758,9757,9886,9885,9886,9757,9757,9756,9885,9884,9885,9756,9756,9755,9884,9883,9884,9755,9755,9754,9883,9882,9883,9754,9754,9753,9882,9881,9882,9753,9753,9752,9881,9880,9881,9752,9752,9751,9880,9879,9880,9751,9751,9750,9879,9878,9879,9750,9750,9749,9878,9877,9878,9749,9749,9748,9877,9876,9877,9748,9748,9747,9876,9875,9876,9747,9747,9746,9875,9874,9875,9746,9746,9745,9874,9873,9874,9745,9745,9744,9873,9872,9873,9744,9744,9743,9872,9871,9872,9743,9743,9742,9871,9870,9871,9742,9742,9741,9870,9869,9870,9741,9741,9740,9869,9868,9869,9740,9740,9739,9868,9867,9868,9739,9739,9738,9867,9866,9867,9738,9738,9737,9866,9865,9866,9737,9737,9736,9865,9864,9865,9736,9736,9735,9864,9863,9864,9735,9735,9734,9863,9862,9863,9734,9734,9733,9862,9861,9862,9733,9733,9732,9861,9860,9861,9732,9732,9731,9860,9859,9860,9731,9731,9730,9859,9858,9859,9730,9730,9729,9858,9857,9858,9729,9729,9728,9857,9856,9857,9728,9983,9982,10111,10110,10111,9982,9982,9981,10110,10109,10110,9981,9981,9980,10109,10108,10109,9980,9980,9979,10108,10107,10108,9979,9979,9978,10107,10106,10107,9978,9978,9977,10106,10105,10106,9977,9977,9976,10105,10104,10105,9976,9976,9975,10104,10103,10104,9975,9975,9974,10103,10102,10103,9974,9974,9973,10102,10101,10102,9973,9973,9972,10101,10100,10101,9972,9972,9971,10100,10099,10100,9971,9971,9970,10099,10098,10099,9970,9970,9969,10098,10097,10098,9969,9969,9968,10097,10096,10097,9968,9968,9967,10096,10095,10096,9967,9967,9966,10095,10094,10095,9966,9966,9965,10094,10093,10094,9965,9965,9964,10093,10092,10093,9964,9964,9963,10092,10091,10092,9963,9963,9962,10091,10090,10091,9962,9962,9961,10090,10089,10090,9961,9961,9960,10089,10088,10089,9960,9960,9959,10088,10087,10088,9959,9959,9958,10087,10086,10087,9958,9958,9957,10086,10085,10086,9957,9957,9956,10085,10084,10085,9956,9956,9955,10084,10083,10084,9955,9955,9954,10083,10082,10083,9954,9954,9953,10082,10081,10082,9953,9953,9952,10081,10080,10081,9952,9952,9951,10080,10079,10080,9951,9951,9950,10079,10078,10079,9950,9950,9949,10078,10077,10078,9949,9949,9948,10077,10076,10077,9948,9948,9947,10076,10075,10076,9947,9947,9946,10075,10074,10075,9946,9946,9945,10074,10073,10074,9945,9945,9944,10073,10072,10073,9944,9944,9943,10072,10071,10072,9943,9943,9942,10071,10070,10071,9942,9942,9941,10070,10069,10070,9941,9941,9940,10069,10068,10069,9940,9940,9939,10068,10067,10068,9939,9939,9938,10067,10066,10067,9938,9938,9937,10066,10065,10066,9937,9937,9936,10065,10064,10065,9936,9936,9935,10064,10063,10064,9935,9935,9934,10063,10062,10063,9934,9934,9933,10062,10061,10062,9933,9933,9932,10061,10060,10061,9932,9932,9931,10060,10059,10060,9931,9931,9930,10059,10058,10059,9930,9930,9929,10058,10057,10058,9929,9929,9928,10057,10056,10057,9928,9928,9927,10056,10055,10056,9927,9927,9926,10055,10054,10055,9926,9926,9925,10054,10053,10054,9925,9925,9924,10053,10052,10053,9924,9924,9923,10052,10051,10052,9923,9923,9922,10051,10050,10051,9922,9922,9921,10050,10049,10050,9921,9921,9920,10049,10048,10049,9920,9920,9919,10048,10047,10048,9919,9919,9918,10047,10046,10047,9918,9918,9917,10046,10045,10046,9917,9917,9916,10045,10044,10045,9916,9916,9915,10044,10043,10044,9915,9915,9914,10043,10042,10043,9914,9914,9913,10042,10041,10042,9913,9913,9912,10041,10040,10041,9912,9912,9911,10040,10039,10040,9911,9911,9910,10039,10038,10039,9910,9910,9909,10038,10037,10038,9909,9909,9908,10037,10036,10037,9908,9908,9907,10036,10035,10036,9907,9907,9906,10035,10034,10035,9906,9906,9905,10034,10033,10034,9905,9905,9904,10033,10032,10033,9904,9904,9903,10032,10031,10032,9903,9903,9902,10031,10030,10031,9902,9902,9901,10030,10029,10030,9901,9901,9900,10029,10028,10029,9900,9900,9899,10028,10027,10028,9899,9899,9898,10027,10026,10027,9898,9898,9897,10026,10025,10026,9897,9897,9896,10025,10024,10025,9896,9896,9895,10024,10023,10024,9895,9895,9894,10023,10022,10023,9894,9894,9893,10022,10021,10022,9893,9893,9892,10021,10020,10021,9892,9892,9891,10020,10019,10020,9891,9891,9890,10019,10018,10019,9890,9890,9889,10018,10017,10018,9889,9889,9888,10017,10016,10017,9888,9888,9887,10016,10015,10016,9887,9887,9886,10015,10014,10015,9886,9886,9885,10014,10013,10014,9885,9885,9884,10013,10012,10013,9884,9884,9883,10012,10011,10012,9883,9883,9882,10011,10010,10011,9882,9882,9881,10010,10009,10010,9881,9881,9880,10009,10008,10009,9880,9880,9879,10008,10007,10008,9879,9879,9878,10007,10006,10007,9878,9878,9877,10006,10005,10006,9877,9877,9876,10005,10004,10005,9876,9876,9875,10004,10003,10004,9875,9875,9874,10003,10002,10003,9874,9874,9873,10002,10001,10002,9873,9873,9872,10001,10000,10001,9872,9872,9871,10000,9999,10000,9871,9871,9870,9999,9998,9999,9870,9870,9869,9998,9997,9998,9869,9869,9868,9997,9996,9997,9868,9868,9867,9996,9995,9996,9867,9867,9866,9995,9994,9995,9866,9866,9865,9994,9993,9994,9865,9865,9864,9993,9992,9993,9864,9864,9863,9992,9991,9992,9863,9863,9862,9991,9990,9991,9862,9862,9861,9990,9989,9990,9861,9861,9860,9989,9988,9989,9860,9860,9859,9988,9987,9988,9859,9859,9858,9987,9986,9987,9858,9858,9857,9986,9985,9986,9857,9857,9856,9985,9984,9985,9856,10111,10110,10239,10238,10239,10110,10110,10109,10238,10237,10238,10109,10109,10108,10237,10236,10237,10108,10108,10107,10236,10235,10236,10107,10107,10106,10235,10234,10235,10106,10106,10105,10234,10233,10234,10105,10105,10104,10233,10232,10233,10104,10104,10103,10232,10231,10232,10103,10103,10102,10231,10230,10231,10102,10102,10101,10230,10229,10230,10101,10101,10100,10229,10228,10229,10100,10100,10099,10228,10227,10228,10099,10099,10098,10227,10226,10227,10098,10098,10097,10226,10225,10226,10097,10097,10096,10225,10224,10225,10096,10096,10095,10224,10223,10224,10095,10095,10094,10223,10222,10223,10094,10094,10093,10222,10221,10222,10093,10093,10092,10221,10220,10221,10092,10092,10091,10220,10219,10220,10091,10091,10090,10219,10218,10219,10090,10090,10089,10218,10217,10218,10089,10089,10088,10217,10216,10217,10088,10088,10087,10216,10215,10216,10087,10087,10086,10215,10214,10215,10086,10086,10085,10214,10213,10214,10085,10085,10084,10213,10212,10213,10084,10084,10083,10212,10211,10212,10083,10083,10082,10211,10210,10211,10082,10082,10081,10210,10209,10210,10081,10081,10080,10209,10208,10209,10080,10080,10079,10208,10207,10208,10079,10079,10078,10207,10206,10207,10078,10078,10077,10206,10205,10206,10077,10077,10076,10205,10204,10205,10076,10076,10075,10204,10203,10204,10075,10075,10074,10203,10202,10203,10074,10074,10073,10202,10201,10202,10073,10073,10072,10201,10200,10201,10072,10072,10071,10200,10199,10200,10071,10071,10070,10199,10198,10199,10070,10070,10069,10198,10197,10198,10069,10069,10068,10197,10196,10197,10068,10068,10067,10196,10195,10196,10067,10067,10066,10195,10194,10195,10066,10066,10065,10194,10193,10194,10065,10065,10064,10193,10192,10193,10064,10064,10063,10192,10191,10192,10063,10063,10062,10191,10190,10191,10062,10062,10061,10190,10189,10190,10061,10061,10060,10189,10188,10189,10060,10060,10059,10188,10187,10188,10059,10059,10058,10187,10186,10187,10058,10058,10057,10186,10185,10186,10057,10057,10056,10185,10184,10185,10056,10056,10055,10184,10183,10184,10055,10055,10054,10183,10182,10183,10054,10054,10053,10182,10181,10182,10053,10053,10052,10181,10180,10181,10052,10052,10051,10180,10179,10180,10051,10051,10050,10179,10178,10179,10050,10050,10049,10178,10177,10178,10049,10049,10048,10177,10176,10177,10048,10048,10047,10176,10175,10176,10047,10047,10046,10175,10174,10175,10046,10046,10045,10174,10173,10174,10045,10045,10044,10173,10172,10173,10044,10044,10043,10172,10171,10172,10043,10043,10042,10171,10170,10171,10042,10042,10041,10170,10169,10170,10041,10041,10040,10169,10168,10169,10040,10040,10039,10168,10167,10168,10039,10039,10038,10167,10166,10167,10038,10038,10037,10166,10165,10166,10037,10037,10036,10165,10164,10165,10036,10036,10035,10164,10163,10164,10035,10035,10034,10163,10162,10163,10034,10034,10033,10162,10161,10162,10033,10033,10032,10161,10160,10161,10032,10032,10031,10160,10159,10160,10031,10031,10030,10159,10158,10159,10030,10030,10029,10158,10157,10158,10029,10029,10028,10157,10156,10157,10028,10028,10027,10156,10155,10156,10027,10027,10026,10155,10154,10155,10026,10026,10025,10154,10153,10154,10025,10025,10024,10153,10152,10153,10024,10024,10023,10152,10151,10152,10023,10023,10022,10151,10150,10151,10022,10022,10021,10150,10149,10150,10021,10021,10020,10149,10148,10149,10020,10020,10019,10148,10147,10148,10019,10019,10018,10147,10146,10147,10018,10018,10017,10146,10145,10146,10017,10017,10016,10145,10144,10145,10016,10016,10015,10144,10143,10144,10015,10015,10014,10143,10142,10143,10014,10014,10013,10142,10141,10142,10013,10013,10012,10141,10140,10141,10012,10012,10011,10140,10139,10140,10011,10011,10010,10139,10138,10139,10010,10010,10009,10138,10137,10138,10009,10009,10008,10137,10136,10137,10008,10008,10007,10136,10135,10136,10007,10007,10006,10135,10134,10135,10006,10006,10005,10134,10133,10134,10005,10005,10004,10133,10132,10133,10004,10004,10003,10132,10131,10132,10003,10003,10002,10131,10130,10131,10002,10002,10001,10130,10129,10130,10001,10001,10000,10129,10128,10129,10000,10000,9999,10128,10127,10128,9999,9999,9998,10127,10126,10127,9998,9998,9997,10126,10125,10126,9997,9997,9996,10125,10124,10125,9996,9996,9995,10124,10123,10124,9995,9995,9994,10123,10122,10123,9994,9994,9993,10122,10121,10122,9993,9993,9992,10121,10120,10121,9992,9992,9991,10120,10119,10120,9991,9991,9990,10119,10118,10119,9990,9990,9989,10118,10117,10118,9989,9989,9988,10117,10116,10117,9988,9988,9987,10116,10115,10116,9987,9987,9986,10115,10114,10115,9986,9986,9985,10114,10113,10114,9985,9985,9984,10113,10112,10113,9984,10239,10238,10367,10366,10367,10238,10238,10237,10366,10365,10366,10237,10237,10236,10365,10364,10365,10236,10236,10235,10364,10363,10364,10235,10235,10234,10363,10362,10363,10234,10234,10233,10362,10361,10362,10233,10233,10232,10361,10360,10361,10232,10232,10231,10360,10359,10360,10231,10231,10230,10359,10358,10359,10230,10230,10229,10358,10357,10358,10229,10229,10228,10357,10356,10357,10228,10228,10227,10356,10355,10356,10227,10227,10226,10355,10354,10355,10226,10226,10225,10354,10353,10354,10225,10225,10224,10353,10352,10353,10224,10224,10223,10352,10351,10352,10223,10223,10222,10351,10350,10351,10222,10222,10221,10350,10349,10350,10221,10221,10220,10349,10348,10349,10220,10220,10219,10348,10347,10348,10219,10219,10218,10347,10346,10347,10218,10218,10217,10346,10345,10346,10217,10217,10216,10345,10344,10345,10216,10216,10215,10344,10343,10344,10215,10215,10214,10343,10342,10343,10214,10214,10213,10342,10341,10342,10213,10213,10212,10341,10340,10341,10212,10212,10211,10340,10339,10340,10211,10211,10210,10339,10338,10339,10210,10210,10209,10338,10337,10338,10209,10209,10208,10337,10336,10337,10208,10208,10207,10336,10335,10336,10207,10207,10206,10335,10334,10335,10206,10206,10205,10334,10333,10334,10205,10205,10204,10333,10332,10333,10204,10204,10203,10332,10331,10332,10203,10203,10202,10331,10330,10331,10202,10202,10201,10330,10329,10330,10201,10201,10200,10329,10328,10329,10200,10200,10199,10328,10327,10328,10199,10199,10198,10327,10326,10327,10198,10198,10197,10326,10325,10326,10197,10197,10196,10325,10324,10325,10196,10196,10195,10324,10323,10324,10195,10195,10194,10323,10322,10323,10194,10194,10193,10322,10321,10322,10193,10193,10192,10321,10320,10321,10192,10192,10191,10320,10319,10320,10191,10191,10190,10319,10318,10319,10190,10190,10189,10318,10317,10318,10189,10189,10188,10317,10316,10317,10188,10188,10187,10316,10315,10316,10187,10187,10186,10315,10314,10315,10186,10186,10185,10314,10313,10314,10185,10185,10184,10313,10312,10313,10184,10184,10183,10312,10311,10312,10183,10183,10182,10311,10310,10311,10182,10182,10181,10310,10309,10310,10181,10181,10180,10309,10308,10309,10180,10180,10179,10308,10307,10308,10179,10179,10178,10307,10306,10307,10178,10178,10177,10306,10305,10306,10177,10177,10176,10305,10304,10305,10176,10176,10175,10304,10303,10304,10175,10175,10174,10303,10302,10303,10174,10174,10173,10302,10301,10302,10173,10173,10172,10301,10300,10301,10172,10172,10171,10300,10299,10300,10171,10171,10170,10299,10298,10299,10170,10170,10169,10298,10297,10298,10169,10169,10168,10297,10296,10297,10168,10168,10167,10296,10295,10296,10167,10167,10166,10295,10294,10295,10166,10166,10165,10294,10293,10294,10165,10165,10164,10293,10292,10293,10164,10164,10163,10292,10291,10292,10163,10163,10162,10291,10290,10291,10162,10162,10161,10290,10289,10290,10161,10161,10160,10289,10288,10289,10160,10160,10159,10288,10287,10288,10159,10159,10158,10287,10286,10287,10158,10158,10157,10286,10285,10286,10157,10157,10156,10285,10284,10285,10156,10156,10155,10284,10283,10284,10155,10155,10154,10283,10282,10283,10154,10154,10153,10282,10281,10282,10153,10153,10152,10281,10280,10281,10152,10152,10151,10280,10279,10280,10151,10151,10150,10279,10278,10279,10150,10150,10149,10278,10277,10278,10149,10149,10148,10277,10276,10277,10148,10148,10147,10276,10275,10276,10147,10147,10146,10275,10274,10275,10146,10146,10145,10274,10273,10274,10145,10145,10144,10273,10272,10273,10144,10144,10143,10272,10271,10272,10143,10143,10142,10271,10270,10271,10142,10142,10141,10270,10269,10270,10141,10141,10140,10269,10268,10269,10140,10140,10139,10268,10267,10268,10139,10139,10138,10267,10266,10267,10138,10138,10137,10266,10265,10266,10137,10137,10136,10265,10264,10265,10136,10136,10135,10264,10263,10264,10135,10135,10134,10263,10262,10263,10134,10134,10133,10262,10261,10262,10133,10133,10132,10261,10260,10261,10132,10132,10131,10260,10259,10260,10131,10131,10130,10259,10258,10259,10130,10130,10129,10258,10257,10258,10129,10129,10128,10257,10256,10257,10128,10128,10127,10256,10255,10256,10127,10127,10126,10255,10254,10255,10126,10126,10125,10254,10253,10254,10125,10125,10124,10253,10252,10253,10124,10124,10123,10252,10251,10252,10123,10123,10122,10251,10250,10251,10122,10122,10121,10250,10249,10250,10121,10121,10120,10249,10248,10249,10120,10120,10119,10248,10247,10248,10119,10119,10118,10247,10246,10247,10118,10118,10117,10246,10245,10246,10117,10117,10116,10245,10244,10245,10116,10116,10115,10244,10243,10244,10115,10115,10114,10243,10242,10243,10114,10114,10113,10242,10241,10242,10113,10113,10112,10241,10240,10241,10112,10367,10366,10495,10494,10495,10366,10366,10365,10494,10493,10494,10365,10365,10364,10493,10492,10493,10364,10364,10363,10492,10491,10492,10363,10363,10362,10491,10490,10491,10362,10362,10361,10490,10489,10490,10361,10361,10360,10489,10488,10489,10360,10360,10359,10488,10487,10488,10359,10359,10358,10487,10486,10487,10358,10358,10357,10486,10485,10486,10357,10357,10356,10485,10484,10485,10356,10356,10355,10484,10483,10484,10355,10355,10354,10483,10482,10483,10354,10354,10353,10482,10481,10482,10353,10353,10352,10481,10480,10481,10352,10352,10351,10480,10479,10480,10351,10351,10350,10479,10478,10479,10350,10350,10349,10478,10477,10478,10349,10349,10348,10477,10476,10477,10348,10348,10347,10476,10475,10476,10347,10347,10346,10475,10474,10475,10346,10346,10345,10474,10473,10474,10345,10345,10344,10473,10472,10473,10344,10344,10343,10472,10471,10472,10343,10343,10342,10471,10470,10471,10342,10342,10341,10470,10469,10470,10341,10341,10340,10469,10468,10469,10340,10340,10339,10468,10467,10468,10339,10339,10338,10467,10466,10467,10338,10338,10337,10466,10465,10466,10337,10337,10336,10465,10464,10465,10336,10336,10335,10464,10463,10464,10335,10335,10334,10463,10462,10463,10334,10334,10333,10462,10461,10462,10333,10333,10332,10461,10460,10461,10332,10332,10331,10460,10459,10460,10331,10331,10330,10459,10458,10459,10330,10330,10329,10458,10457,10458,10329,10329,10328,10457,10456,10457,10328,10328,10327,10456,10455,10456,10327,10327,10326,10455,10454,10455,10326,10326,10325,10454,10453,10454,10325,10325,10324,10453,10452,10453,10324,10324,10323,10452,10451,10452,10323,10323,10322,10451,10450,10451,10322,10322,10321,10450,10449,10450,10321,10321,10320,10449,10448,10449,10320,10320,10319,10448,10447,10448,10319,10319,10318,10447,10446,10447,10318,10318,10317,10446,10445,10446,10317,10317,10316,10445,10444,10445,10316,10316,10315,10444,10443,10444,10315,10315,10314,10443,10442,10443,10314,10314,10313,10442,10441,10442,10313,10313,10312,10441,10440,10441,10312,10312,10311,10440,10439,10440,10311,10311,10310,10439,10438,10439,10310,10310,10309,10438,10437,10438,10309,10309,10308,10437,10436,10437,10308,10308,10307,10436,10435,10436,10307,10307,10306,10435,10434,10435,10306,10306,10305,10434,10433,10434,10305,10305,10304,10433,10432,10433,10304,10304,10303,10432,10431,10432,10303,10303,10302,10431,10430,10431,10302,10302,10301,10430,10429,10430,10301,10301,10300,10429,10428,10429,10300,10300,10299,10428,10427,10428,10299,10299,10298,10427,10426,10427,10298,10298,10297,10426,10425,10426,10297,10297,10296,10425,10424,10425,10296,10296,10295,10424,10423,10424,10295,10295,10294,10423,10422,10423,10294,10294,10293,10422,10421,10422,10293,10293,10292,10421,10420,10421,10292,10292,10291,10420,10419,10420,10291,10291,10290,10419,10418,10419,10290,10290,10289,10418,10417,10418,10289,10289,10288,10417,10416,10417,10288,10288,10287,10416,10415,10416,10287,10287,10286,10415,10414,10415,10286,10286,10285,10414,10413,10414,10285,10285,10284,10413,10412,10413,10284,10284,10283,10412,10411,10412,10283,10283,10282,10411,10410,10411,10282,10282,10281,10410,10409,10410,10281,10281,10280,10409,10408,10409,10280,10280,10279,10408,10407,10408,10279,10279,10278,10407,10406,10407,10278,10278,10277,10406,10405,10406,10277,10277,10276,10405,10404,10405,10276,10276,10275,10404,10403,10404,10275,10275,10274,10403,10402,10403,10274,10274,10273,10402,10401,10402,10273,10273,10272,10401,10400,10401,10272,10272,10271,10400,10399,10400,10271,10271,10270,10399,10398,10399,10270,10270,10269,10398,10397,10398,10269,10269,10268,10397,10396,10397,10268,10268,10267,10396,10395,10396,10267,10267,10266,10395,10394,10395,10266,10266,10265,10394,10393,10394,10265,10265,10264,10393,10392,10393,10264,10264,10263,10392,10391,10392,10263,10263,10262,10391,10390,10391,10262,10262,10261,10390,10389,10390,10261,10261,10260,10389,10388,10389,10260,10260,10259,10388,10387,10388,10259,10259,10258,10387,10386,10387,10258,10258,10257,10386,10385,10386,10257,10257,10256,10385,10384,10385,10256,10256,10255,10384,10383,10384,10255,10255,10254,10383,10382,10383,10254,10254,10253,10382,10381,10382,10253,10253,10252,10381,10380,10381,10252,10252,10251,10380,10379,10380,10251,10251,10250,10379,10378,10379,10250,10250,10249,10378,10377,10378,10249,10249,10248,10377,10376,10377,10248,10248,10247,10376,10375,10376,10247,10247,10246,10375,10374,10375,10246,10246,10245,10374,10373,10374,10245,10245,10244,10373,10372,10373,10244,10244,10243,10372,10371,10372,10243,10243,10242,10371,10370,10371,10242,10242,10241,10370,10369,10370,10241,10241,10240,10369,10368,10369,10240,10495,10494,10623,10622,10623,10494,10494,10493,10622,10621,10622,10493,10493,10492,10621,10620,10621,10492,10492,10491,10620,10619,10620,10491,10491,10490,10619,10618,10619,10490,10490,10489,10618,10617,10618,10489,10489,10488,10617,10616,10617,10488,10488,10487,10616,10615,10616,10487,10487,10486,10615,10614,10615,10486,10486,10485,10614,10613,10614,10485,10485,10484,10613,10612,10613,10484,10484,10483,10612,10611,10612,10483,10483,10482,10611,10610,10611,10482,10482,10481,10610,10609,10610,10481,10481,10480,10609,10608,10609,10480,10480,10479,10608,10607,10608,10479,10479,10478,10607,10606,10607,10478,10478,10477,10606,10605,10606,10477,10477,10476,10605,10604,10605,10476,10476,10475,10604,10603,10604,10475,10475,10474,10603,10602,10603,10474,10474,10473,10602,10601,10602,10473,10473,10472,10601,10600,10601,10472,10472,10471,10600,10599,10600,10471,10471,10470,10599,10598,10599,10470,10470,10469,10598,10597,10598,10469,10469,10468,10597,10596,10597,10468,10468,10467,10596,10595,10596,10467,10467,10466,10595,10594,10595,10466,10466,10465,10594,10593,10594,10465,10465,10464,10593,10592,10593,10464,10464,10463,10592,10591,10592,10463,10463,10462,10591,10590,10591,10462,10462,10461,10590,10589,10590,10461,10461,10460,10589,10588,10589,10460,10460,10459,10588,10587,10588,10459,10459,10458,10587,10586,10587,10458,10458,10457,10586,10585,10586,10457,10457,10456,10585,10584,10585,10456,10456,10455,10584,10583,10584,10455,10455,10454,10583,10582,10583,10454,10454,10453,10582,10581,10582,10453,10453,10452,10581,10580,10581,10452,10452,10451,10580,10579,10580,10451,10451,10450,10579,10578,10579,10450,10450,10449,10578,10577,10578,10449,10449,10448,10577,10576,10577,10448,10448,10447,10576,10575,10576,10447,10447,10446,10575,10574,10575,10446,10446,10445,10574,10573,10574,10445,10445,10444,10573,10572,10573,10444,10444,10443,10572,10571,10572,10443,10443,10442,10571,10570,10571,10442,10442,10441,10570,10569,10570,10441,10441,10440,10569,10568,10569,10440,10440,10439,10568,10567,10568,10439,10439,10438,10567,10566,10567,10438,10438,10437,10566,10565,10566,10437,10437,10436,10565,10564,10565,10436,10436,10435,10564,10563,10564,10435,10435,10434,10563,10562,10563,10434,10434,10433,10562,10561,10562,10433,10433,10432,10561,10560,10561,10432,10432,10431,10560,10559,10560,10431,10431,10430,10559,10558,10559,10430,10430,10429,10558,10557,10558,10429,10429,10428,10557,10556,10557,10428,10428,10427,10556,10555,10556,10427,10427,10426,10555,10554,10555,10426,10426,10425,10554,10553,10554,10425,10425,10424,10553,10552,10553,10424,10424,10423,10552,10551,10552,10423,10423,10422,10551,10550,10551,10422,10422,10421,10550,10549,10550,10421,10421,10420,10549,10548,10549,10420,10420,10419,10548,10547,10548,10419,10419,10418,10547,10546,10547,10418,10418,10417,10546,10545,10546,10417,10417,10416,10545,10544,10545,10416,10416,10415,10544,10543,10544,10415,10415,10414,10543,10542,10543,10414,10414,10413,10542,10541,10542,10413,10413,10412,10541,10540,10541,10412,10412,10411,10540,10539,10540,10411,10411,10410,10539,10538,10539,10410,10410,10409,10538,10537,10538,10409,10409,10408,10537,10536,10537,10408,10408,10407,10536,10535,10536,10407,10407,10406,10535,10534,10535,10406,10406,10405,10534,10533,10534,10405,10405,10404,10533,10532,10533,10404,10404,10403,10532,10531,10532,10403,10403,10402,10531,10530,10531,10402,10402,10401,10530,10529,10530,10401,10401,10400,10529,10528,10529,10400,10400,10399,10528,10527,10528,10399,10399,10398,10527,10526,10527,10398,10398,10397,10526,10525,10526,10397,10397,10396,10525,10524,10525,10396,10396,10395,10524,10523,10524,10395,10395,10394,10523,10522,10523,10394,10394,10393,10522,10521,10522,10393,10393,10392,10521,10520,10521,10392,10392,10391,10520,10519,10520,10391,10391,10390,10519,10518,10519,10390,10390,10389,10518,10517,10518,10389,10389,10388,10517,10516,10517,10388,10388,10387,10516,10515,10516,10387,10387,10386,10515,10514,10515,10386,10386,10385,10514,10513,10514,10385,10385,10384,10513,10512,10513,10384,10384,10383,10512,10511,10512,10383,10383,10382,10511,10510,10511,10382,10382,10381,10510,10509,10510,10381,10381,10380,10509,10508,10509,10380,10380,10379,10508,10507,10508,10379,10379,10378,10507,10506,10507,10378,10378,10377,10506,10505,10506,10377,10377,10376,10505,10504,10505,10376,10376,10375,10504,10503,10504,10375,10375,10374,10503,10502,10503,10374,10374,10373,10502,10501,10502,10373,10373,10372,10501,10500,10501,10372,10372,10371,10500,10499,10500,10371,10371,10370,10499,10498,10499,10370,10370,10369,10498,10497,10498,10369,10369,10368,10497,10496,10497,10368,10623,10622,10751,10750,10751,10622,10622,10621,10750,10749,10750,10621,10621,10620,10749,10748,10749,10620,10620,10619,10748,10747,10748,10619,10619,10618,10747,10746,10747,10618,10618,10617,10746,10745,10746,10617,10617,10616,10745,10744,10745,10616,10616,10615,10744,10743,10744,10615,10615,10614,10743,10742,10743,10614,10614,10613,10742,10741,10742,10613,10613,10612,10741,10740,10741,10612,10612,10611,10740,10739,10740,10611,10611,10610,10739,10738,10739,10610,10610,10609,10738,10737,10738,10609,10609,10608,10737,10736,10737,10608,10608,10607,10736,10735,10736,10607,10607,10606,10735,10734,10735,10606,10606,10605,10734,10733,10734,10605,10605,10604,10733,10732,10733,10604,10604,10603,10732,10731,10732,10603,10603,10602,10731,10730,10731,10602,10602,10601,10730,10729,10730,10601,10601,10600,10729,10728,10729,10600,10600,10599,10728,10727,10728,10599,10599,10598,10727,10726,10727,10598,10598,10597,10726,10725,10726,10597,10597,10596,10725,10724,10725,10596,10596,10595,10724,10723,10724,10595,10595,10594,10723,10722,10723,10594,10594,10593,10722,10721,10722,10593,10593,10592,10721,10720,10721,10592,10592,10591,10720,10719,10720,10591,10591,10590,10719,10718,10719,10590,10590,10589,10718,10717,10718,10589,10589,10588,10717,10716,10717,10588,10588,10587,10716,10715,10716,10587,10587,10586,10715,10714,10715,10586,10586,10585,10714,10713,10714,10585,10585,10584,10713,10712,10713,10584,10584,10583,10712,10711,10712,10583,10583,10582,10711,10710,10711,10582,10582,10581,10710,10709,10710,10581,10581,10580,10709,10708,10709,10580,10580,10579,10708,10707,10708,10579,10579,10578,10707,10706,10707,10578,10578,10577,10706,10705,10706,10577,10577,10576,10705,10704,10705,10576,10576,10575,10704,10703,10704,10575,10575,10574,10703,10702,10703,10574,10574,10573,10702,10701,10702,10573,10573,10572,10701,10700,10701,10572,10572,10571,10700,10699,10700,10571,10571,10570,10699,10698,10699,10570,10570,10569,10698,10697,10698,10569,10569,10568,10697,10696,10697,10568,10568,10567,10696,10695,10696,10567,10567,10566,10695,10694,10695,10566,10566,10565,10694,10693,10694,10565,10565,10564,10693,10692,10693,10564,10564,10563,10692,10691,10692,10563,10563,10562,10691,10690,10691,10562,10562,10561,10690,10689,10690,10561,10561,10560,10689,10688,10689,10560,10560,10559,10688,10687,10688,10559,10559,10558,10687,10686,10687,10558,10558,10557,10686,10685,10686,10557,10557,10556,10685,10684,10685,10556,10556,10555,10684,10683,10684,10555,10555,10554,10683,10682,10683,10554,10554,10553,10682,10681,10682,10553,10553,10552,10681,10680,10681,10552,10552,10551,10680,10679,10680,10551,10551,10550,10679,10678,10679,10550,10550,10549,10678,10677,10678,10549,10549,10548,10677,10676,10677,10548,10548,10547,10676,10675,10676,10547,10547,10546,10675,10674,10675,10546,10546,10545,10674,10673,10674,10545,10545,10544,10673,10672,10673,10544,10544,10543,10672,10671,10672,10543,10543,10542,10671,10670,10671,10542,10542,10541,10670,10669,10670,10541,10541,10540,10669,10668,10669,10540,10540,10539,10668,10667,10668,10539,10539,10538,10667,10666,10667,10538,10538,10537,10666,10665,10666,10537,10537,10536,10665,10664,10665,10536,10536,10535,10664,10663,10664,10535,10535,10534,10663,10662,10663,10534,10534,10533,10662,10661,10662,10533,10533,10532,10661,10660,10661,10532,10532,10531,10660,10659,10660,10531,10531,10530,10659,10658,10659,10530,10530,10529,10658,10657,10658,10529,10529,10528,10657,10656,10657,10528,10528,10527,10656,10655,10656,10527,10527,10526,10655,10654,10655,10526,10526,10525,10654,10653,10654,10525,10525,10524,10653,10652,10653,10524,10524,10523,10652,10651,10652,10523,10523,10522,10651,10650,10651,10522,10522,10521,10650,10649,10650,10521,10521,10520,10649,10648,10649,10520,10520,10519,10648,10647,10648,10519,10519,10518,10647,10646,10647,10518,10518,10517,10646,10645,10646,10517,10517,10516,10645,10644,10645,10516,10516,10515,10644,10643,10644,10515,10515,10514,10643,10642,10643,10514,10514,10513,10642,10641,10642,10513,10513,10512,10641,10640,10641,10512,10512,10511,10640,10639,10640,10511,10511,10510,10639,10638,10639,10510,10510,10509,10638,10637,10638,10509,10509,10508,10637,10636,10637,10508,10508,10507,10636,10635,10636,10507,10507,10506,10635,10634,10635,10506,10506,10505,10634,10633,10634,10505,10505,10504,10633,10632,10633,10504,10504,10503,10632,10631,10632,10503,10503,10502,10631,10630,10631,10502,10502,10501,10630,10629,10630,10501,10501,10500,10629,10628,10629,10500,10500,10499,10628,10627,10628,10499,10499,10498,10627,10626,10627,10498,10498,10497,10626,10625,10626,10497,10497,10496,10625,10624,10625,10496,10751,10750,10879,10878,10879,10750,10750,10749,10878,10877,10878,10749,10749,10748,10877,10876,10877,10748,10748,10747,10876,10875,10876,10747,10747,10746,10875,10874,10875,10746,10746,10745,10874,10873,10874,10745,10745,10744,10873,10872,10873,10744,10744,10743,10872,10871,10872,10743,10743,10742,10871,10870,10871,10742,10742,10741,10870,10869,10870,10741,10741,10740,10869,10868,10869,10740,10740,10739,10868,10867,10868,10739,10739,10738,10867,10866,10867,10738,10738,10737,10866,10865,10866,10737,10737,10736,10865,10864,10865,10736,10736,10735,10864,10863,10864,10735,10735,10734,10863,10862,10863,10734,10734,10733,10862,10861,10862,10733,10733,10732,10861,10860,10861,10732,10732,10731,10860,10859,10860,10731,10731,10730,10859,10858,10859,10730,10730,10729,10858,10857,10858,10729,10729,10728,10857,10856,10857,10728,10728,10727,10856,10855,10856,10727,10727,10726,10855,10854,10855,10726,10726,10725,10854,10853,10854,10725,10725,10724,10853,10852,10853,10724,10724,10723,10852,10851,10852,10723,10723,10722,10851,10850,10851,10722,10722,10721,10850,10849,10850,10721,10721,10720,10849,10848,10849,10720,10720,10719,10848,10847,10848,10719,10719,10718,10847,10846,10847,10718,10718,10717,10846,10845,10846,10717,10717,10716,10845,10844,10845,10716,10716,10715,10844,10843,10844,10715,10715,10714,10843,10842,10843,10714,10714,10713,10842,10841,10842,10713,10713,10712,10841,10840,10841,10712,10712,10711,10840,10839,10840,10711,10711,10710,10839,10838,10839,10710,10710,10709,10838,10837,10838,10709,10709,10708,10837,10836,10837,10708,10708,10707,10836,10835,10836,10707,10707,10706,10835,10834,10835,10706,10706,10705,10834,10833,10834,10705,10705,10704,10833,10832,10833,10704,10704,10703,10832,10831,10832,10703,10703,10702,10831,10830,10831,10702,10702,10701,10830,10829,10830,10701,10701,10700,10829,10828,10829,10700,10700,10699,10828,10827,10828,10699,10699,10698,10827,10826,10827,10698,10698,10697,10826,10825,10826,10697,10697,10696,10825,10824,10825,10696,10696,10695,10824,10823,10824,10695,10695,10694,10823,10822,10823,10694,10694,10693,10822,10821,10822,10693,10693,10692,10821,10820,10821,10692,10692,10691,10820,10819,10820,10691,10691,10690,10819,10818,10819,10690,10690,10689,10818,10817,10818,10689,10689,10688,10817,10816,10817,10688,10688,10687,10816,10815,10816,10687,10687,10686,10815,10814,10815,10686,10686,10685,10814,10813,10814,10685,10685,10684,10813,10812,10813,10684,10684,10683,10812,10811,10812,10683,10683,10682,10811,10810,10811,10682,10682,10681,10810,10809,10810,10681,10681,10680,10809,10808,10809,10680,10680,10679,10808,10807,10808,10679,10679,10678,10807,10806,10807,10678,10678,10677,10806,10805,10806,10677,10677,10676,10805,10804,10805,10676,10676,10675,10804,10803,10804,10675,10675,10674,10803,10802,10803,10674,10674,10673,10802,10801,10802,10673,10673,10672,10801,10800,10801,10672,10672,10671,10800,10799,10800,10671,10671,10670,10799,10798,10799,10670,10670,10669,10798,10797,10798,10669,10669,10668,10797,10796,10797,10668,10668,10667,10796,10795,10796,10667,10667,10666,10795,10794,10795,10666,10666,10665,10794,10793,10794,10665,10665,10664,10793,10792,10793,10664,10664,10663,10792,10791,10792,10663,10663,10662,10791,10790,10791,10662,10662,10661,10790,10789,10790,10661,10661,10660,10789,10788,10789,10660,10660,10659,10788,10787,10788,10659,10659,10658,10787,10786,10787,10658,10658,10657,10786,10785,10786,10657,10657,10656,10785,10784,10785,10656,10656,10655,10784,10783,10784,10655,10655,10654,10783,10782,10783,10654,10654,10653,10782,10781,10782,10653,10653,10652,10781,10780,10781,10652,10652,10651,10780,10779,10780,10651,10651,10650,10779,10778,10779,10650,10650,10649,10778,10777,10778,10649,10649,10648,10777,10776,10777,10648,10648,10647,10776,10775,10776,10647,10647,10646,10775,10774,10775,10646,10646,10645,10774,10773,10774,10645,10645,10644,10773,10772,10773,10644,10644,10643,10772,10771,10772,10643,10643,10642,10771,10770,10771,10642,10642,10641,10770,10769,10770,10641,10641,10640,10769,10768,10769,10640,10640,10639,10768,10767,10768,10639,10639,10638,10767,10766,10767,10638,10638,10637,10766,10765,10766,10637,10637,10636,10765,10764,10765,10636,10636,10635,10764,10763,10764,10635,10635,10634,10763,10762,10763,10634,10634,10633,10762,10761,10762,10633,10633,10632,10761,10760,10761,10632,10632,10631,10760,10759,10760,10631,10631,10630,10759,10758,10759,10630,10630,10629,10758,10757,10758,10629,10629,10628,10757,10756,10757,10628,10628,10627,10756,10755,10756,10627,10627,10626,10755,10754,10755,10626,10626,10625,10754,10753,10754,10625,10625,10624,10753,10752,10753,10624,10879,10878,11007,11006,11007,10878,10878,10877,11006,11005,11006,10877,10877,10876,11005,11004,11005,10876,10876,10875,11004,11003,11004,10875,10875,10874,11003,11002,11003,10874,10874,10873,11002,11001,11002,10873,10873,10872,11001,11000,11001,10872,10872,10871,11000,10999,11000,10871,10871,10870,10999,10998,10999,10870,10870,10869,10998,10997,10998,10869,10869,10868,10997,10996,10997,10868,10868,10867,10996,10995,10996,10867,10867,10866,10995,10994,10995,10866,10866,10865,10994,10993,10994,10865,10865,10864,10993,10992,10993,10864,10864,10863,10992,10991,10992,10863,10863,10862,10991,10990,10991,10862,10862,10861,10990,10989,10990,10861,10861,10860,10989,10988,10989,10860,10860,10859,10988,10987,10988,10859,10859,10858,10987,10986,10987,10858,10858,10857,10986,10985,10986,10857,10857,10856,10985,10984,10985,10856,10856,10855,10984,10983,10984,10855,10855,10854,10983,10982,10983,10854,10854,10853,10982,10981,10982,10853,10853,10852,10981,10980,10981,10852,10852,10851,10980,10979,10980,10851,10851,10850,10979,10978,10979,10850,10850,10849,10978,10977,10978,10849,10849,10848,10977,10976,10977,10848,10848,10847,10976,10975,10976,10847,10847,10846,10975,10974,10975,10846,10846,10845,10974,10973,10974,10845,10845,10844,10973,10972,10973,10844,10844,10843,10972,10971,10972,10843,10843,10842,10971,10970,10971,10842,10842,10841,10970,10969,10970,10841,10841,10840,10969,10968,10969,10840,10840,10839,10968,10967,10968,10839,10839,10838,10967,10966,10967,10838,10838,10837,10966,10965,10966,10837,10837,10836,10965,10964,10965,10836,10836,10835,10964,10963,10964,10835,10835,10834,10963,10962,10963,10834,10834,10833,10962,10961,10962,10833,10833,10832,10961,10960,10961,10832,10832,10831,10960,10959,10960,10831,10831,10830,10959,10958,10959,10830,10830,10829,10958,10957,10958,10829,10829,10828,10957,10956,10957,10828,10828,10827,10956,10955,10956,10827,10827,10826,10955,10954,10955,10826,10826,10825,10954,10953,10954,10825,10825,10824,10953,10952,10953,10824,10824,10823,10952,10951,10952,10823,10823,10822,10951,10950,10951,10822,10822,10821,10950,10949,10950,10821,10821,10820,10949,10948,10949,10820,10820,10819,10948,10947,10948,10819,10819,10818,10947,10946,10947,10818,10818,10817,10946,10945,10946,10817,10817,10816,10945,10944,10945,10816,10816,10815,10944,10943,10944,10815,10815,10814,10943,10942,10943,10814,10814,10813,10942,10941,10942,10813,10813,10812,10941,10940,10941,10812,10812,10811,10940,10939,10940,10811,10811,10810,10939,10938,10939,10810,10810,10809,10938,10937,10938,10809,10809,10808,10937,10936,10937,10808,10808,10807,10936,10935,10936,10807,10807,10806,10935,10934,10935,10806,10806,10805,10934,10933,10934,10805,10805,10804,10933,10932,10933,10804,10804,10803,10932,10931,10932,10803,10803,10802,10931,10930,10931,10802,10802,10801,10930,10929,10930,10801,10801,10800,10929,10928,10929,10800,10800,10799,10928,10927,10928,10799,10799,10798,10927,10926,10927,10798,10798,10797,10926,10925,10926,10797,10797,10796,10925,10924,10925,10796,10796,10795,10924,10923,10924,10795,10795,10794,10923,10922,10923,10794,10794,10793,10922,10921,10922,10793,10793,10792,10921,10920,10921,10792,10792,10791,10920,10919,10920,10791,10791,10790,10919,10918,10919,10790,10790,10789,10918,10917,10918,10789,10789,10788,10917,10916,10917,10788,10788,10787,10916,10915,10916,10787,10787,10786,10915,10914,10915,10786,10786,10785,10914,10913,10914,10785,10785,10784,10913,10912,10913,10784,10784,10783,10912,10911,10912,10783,10783,10782,10911,10910,10911,10782,10782,10781,10910,10909,10910,10781,10781,10780,10909,10908,10909,10780,10780,10779,10908,10907,10908,10779,10779,10778,10907,10906,10907,10778,10778,10777,10906,10905,10906,10777,10777,10776,10905,10904,10905,10776,10776,10775,10904,10903,10904,10775,10775,10774,10903,10902,10903,10774,10774,10773,10902,10901,10902,10773,10773,10772,10901,10900,10901,10772,10772,10771,10900,10899,10900,10771,10771,10770,10899,10898,10899,10770,10770,10769,10898,10897,10898,10769,10769,10768,10897,10896,10897,10768,10768,10767,10896,10895,10896,10767,10767,10766,10895,10894,10895,10766,10766,10765,10894,10893,10894,10765,10765,10764,10893,10892,10893,10764,10764,10763,10892,10891,10892,10763,10763,10762,10891,10890,10891,10762,10762,10761,10890,10889,10890,10761,10761,10760,10889,10888,10889,10760,10760,10759,10888,10887,10888,10759,10759,10758,10887,10886,10887,10758,10758,10757,10886,10885,10886,10757,10757,10756,10885,10884,10885,10756,10756,10755,10884,10883,10884,10755,10755,10754,10883,10882,10883,10754,10754,10753,10882,10881,10882,10753,10753,10752,10881,10880,10881,10752,11007,11006,11135,11134,11135,11006,11006,11005,11134,11133,11134,11005,11005,11004,11133,11132,11133,11004,11004,11003,11132,11131,11132,11003,11003,11002,11131,11130,11131,11002,11002,11001,11130,11129,11130,11001,11001,11000,11129,11128,11129,11000,11000,10999,11128,11127,11128,10999,10999,10998,11127,11126,11127,10998,10998,10997,11126,11125,11126,10997,10997,10996,11125,11124,11125,10996,10996,10995,11124,11123,11124,10995,10995,10994,11123,11122,11123,10994,10994,10993,11122,11121,11122,10993,10993,10992,11121,11120,11121,10992,10992,10991,11120,11119,11120,10991,10991,10990,11119,11118,11119,10990,10990,10989,11118,11117,11118,10989,10989,10988,11117,11116,11117,10988,10988,10987,11116,11115,11116,10987,10987,10986,11115,11114,11115,10986,10986,10985,11114,11113,11114,10985,10985,10984,11113,11112,11113,10984,10984,10983,11112,11111,11112,10983,10983,10982,11111,11110,11111,10982,10982,10981,11110,11109,11110,10981,10981,10980,11109,11108,11109,10980,10980,10979,11108,11107,11108,10979,10979,10978,11107,11106,11107,10978,10978,10977,11106,11105,11106,10977,10977,10976,11105,11104,11105,10976,10976,10975,11104,11103,11104,10975,10975,10974,11103,11102,11103,10974,10974,10973,11102,11101,11102,10973,10973,10972,11101,11100,11101,10972,10972,10971,11100,11099,11100,10971,10971,10970,11099,11098,11099,10970,10970,10969,11098,11097,11098,10969,10969,10968,11097,11096,11097,10968,10968,10967,11096,11095,11096,10967,10967,10966,11095,11094,11095,10966,10966,10965,11094,11093,11094,10965,10965,10964,11093,11092,11093,10964,10964,10963,11092,11091,11092,10963,10963,10962,11091,11090,11091,10962,10962,10961,11090,11089,11090,10961,10961,10960,11089,11088,11089,10960,10960,10959,11088,11087,11088,10959,10959,10958,11087,11086,11087,10958,10958,10957,11086,11085,11086,10957,10957,10956,11085,11084,11085,10956,10956,10955,11084,11083,11084,10955,10955,10954,11083,11082,11083,10954,10954,10953,11082,11081,11082,10953,10953,10952,11081,11080,11081,10952,10952,10951,11080,11079,11080,10951,10951,10950,11079,11078,11079,10950,10950,10949,11078,11077,11078,10949,10949,10948,11077,11076,11077,10948,10948,10947,11076,11075,11076,10947,10947,10946,11075,11074,11075,10946,10946,10945,11074,11073,11074,10945,10945,10944,11073,11072,11073,10944,10944,10943,11072,11071,11072,10943,10943,10942,11071,11070,11071,10942,10942,10941,11070,11069,11070,10941,10941,10940,11069,11068,11069,10940,10940,10939,11068,11067,11068,10939,10939,10938,11067,11066,11067,10938,10938,10937,11066,11065,11066,10937,10937,10936,11065,11064,11065,10936,10936,10935,11064,11063,11064,10935,10935,10934,11063,11062,11063,10934,10934,10933,11062,11061,11062,10933,10933,10932,11061,11060,11061,10932,10932,10931,11060,11059,11060,10931,10931,10930,11059,11058,11059,10930,10930,10929,11058,11057,11058,10929,10929,10928,11057,11056,11057,10928,10928,10927,11056,11055,11056,10927,10927,10926,11055,11054,11055,10926,10926,10925,11054,11053,11054,10925,10925,10924,11053,11052,11053,10924,10924,10923,11052,11051,11052,10923,10923,10922,11051,11050,11051,10922,10922,10921,11050,11049,11050,10921,10921,10920,11049,11048,11049,10920,10920,10919,11048,11047,11048,10919,10919,10918,11047,11046,11047,10918,10918,10917,11046,11045,11046,10917,10917,10916,11045,11044,11045,10916,10916,10915,11044,11043,11044,10915,10915,10914,11043,11042,11043,10914,10914,10913,11042,11041,11042,10913,10913,10912,11041,11040,11041,10912,10912,10911,11040,11039,11040,10911,10911,10910,11039,11038,11039,10910,10910,10909,11038,11037,11038,10909,10909,10908,11037,11036,11037,10908,10908,10907,11036,11035,11036,10907,10907,10906,11035,11034,11035,10906,10906,10905,11034,11033,11034,10905,10905,10904,11033,11032,11033,10904,10904,10903,11032,11031,11032,10903,10903,10902,11031,11030,11031,10902,10902,10901,11030,11029,11030,10901,10901,10900,11029,11028,11029,10900,10900,10899,11028,11027,11028,10899,10899,10898,11027,11026,11027,10898,10898,10897,11026,11025,11026,10897,10897,10896,11025,11024,11025,10896,10896,10895,11024,11023,11024,10895,10895,10894,11023,11022,11023,10894,10894,10893,11022,11021,11022,10893,10893,10892,11021,11020,11021,10892,10892,10891,11020,11019,11020,10891,10891,10890,11019,11018,11019,10890,10890,10889,11018,11017,11018,10889,10889,10888,11017,11016,11017,10888,10888,10887,11016,11015,11016,10887,10887,10886,11015,11014,11015,10886,10886,10885,11014,11013,11014,10885,10885,10884,11013,11012,11013,10884,10884,10883,11012,11011,11012,10883,10883,10882,11011,11010,11011,10882,10882,10881,11010,11009,11010,10881,10881,10880,11009,11008,11009,10880,11135,11134,11263,11262,11263,11134,11134,11133,11262,11261,11262,11133,11133,11132,11261,11260,11261,11132,11132,11131,11260,11259,11260,11131,11131,11130,11259,11258,11259,11130,11130,11129,11258,11257,11258,11129,11129,11128,11257,11256,11257,11128,11128,11127,11256,11255,11256,11127,11127,11126,11255,11254,11255,11126,11126,11125,11254,11253,11254,11125,11125,11124,11253,11252,11253,11124,11124,11123,11252,11251,11252,11123,11123,11122,11251,11250,11251,11122,11122,11121,11250,11249,11250,11121,11121,11120,11249,11248,11249,11120,11120,11119,11248,11247,11248,11119,11119,11118,11247,11246,11247,11118,11118,11117,11246,11245,11246,11117,11117,11116,11245,11244,11245,11116,11116,11115,11244,11243,11244,11115,11115,11114,11243,11242,11243,11114,11114,11113,11242,11241,11242,11113,11113,11112,11241,11240,11241,11112,11112,11111,11240,11239,11240,11111,11111,11110,11239,11238,11239,11110,11110,11109,11238,11237,11238,11109,11109,11108,11237,11236,11237,11108,11108,11107,11236,11235,11236,11107,11107,11106,11235,11234,11235,11106,11106,11105,11234,11233,11234,11105,11105,11104,11233,11232,11233,11104,11104,11103,11232,11231,11232,11103,11103,11102,11231,11230,11231,11102,11102,11101,11230,11229,11230,11101,11101,11100,11229,11228,11229,11100,11100,11099,11228,11227,11228,11099,11099,11098,11227,11226,11227,11098,11098,11097,11226,11225,11226,11097,11097,11096,11225,11224,11225,11096,11096,11095,11224,11223,11224,11095,11095,11094,11223,11222,11223,11094,11094,11093,11222,11221,11222,11093,11093,11092,11221,11220,11221,11092,11092,11091,11220,11219,11220,11091,11091,11090,11219,11218,11219,11090,11090,11089,11218,11217,11218,11089,11089,11088,11217,11216,11217,11088,11088,11087,11216,11215,11216,11087,11087,11086,11215,11214,11215,11086,11086,11085,11214,11213,11214,11085,11085,11084,11213,11212,11213,11084,11084,11083,11212,11211,11212,11083,11083,11082,11211,11210,11211,11082,11082,11081,11210,11209,11210,11081,11081,11080,11209,11208,11209,11080,11080,11079,11208,11207,11208,11079,11079,11078,11207,11206,11207,11078,11078,11077,11206,11205,11206,11077,11077,11076,11205,11204,11205,11076,11076,11075,11204,11203,11204,11075,11075,11074,11203,11202,11203,11074,11074,11073,11202,11201,11202,11073,11073,11072,11201,11200,11201,11072,11072,11071,11200,11199,11200,11071,11071,11070,11199,11198,11199,11070,11070,11069,11198,11197,11198,11069,11069,11068,11197,11196,11197,11068,11068,11067,11196,11195,11196,11067,11067,11066,11195,11194,11195,11066,11066,11065,11194,11193,11194,11065,11065,11064,11193,11192,11193,11064,11064,11063,11192,11191,11192,11063,11063,11062,11191,11190,11191,11062,11062,11061,11190,11189,11190,11061,11061,11060,11189,11188,11189,11060,11060,11059,11188,11187,11188,11059,11059,11058,11187,11186,11187,11058,11058,11057,11186,11185,11186,11057,11057,11056,11185,11184,11185,11056,11056,11055,11184,11183,11184,11055,11055,11054,11183,11182,11183,11054,11054,11053,11182,11181,11182,11053,11053,11052,11181,11180,11181,11052,11052,11051,11180,11179,11180,11051,11051,11050,11179,11178,11179,11050,11050,11049,11178,11177,11178,11049,11049,11048,11177,11176,11177,11048,11048,11047,11176,11175,11176,11047,11047,11046,11175,11174,11175,11046,11046,11045,11174,11173,11174,11045,11045,11044,11173,11172,11173,11044,11044,11043,11172,11171,11172,11043,11043,11042,11171,11170,11171,11042,11042,11041,11170,11169,11170,11041,11041,11040,11169,11168,11169,11040,11040,11039,11168,11167,11168,11039,11039,11038,11167,11166,11167,11038,11038,11037,11166,11165,11166,11037,11037,11036,11165,11164,11165,11036,11036,11035,11164,11163,11164,11035,11035,11034,11163,11162,11163,11034,11034,11033,11162,11161,11162,11033,11033,11032,11161,11160,11161,11032,11032,11031,11160,11159,11160,11031,11031,11030,11159,11158,11159,11030,11030,11029,11158,11157,11158,11029,11029,11028,11157,11156,11157,11028,11028,11027,11156,11155,11156,11027,11027,11026,11155,11154,11155,11026,11026,11025,11154,11153,11154,11025,11025,11024,11153,11152,11153,11024,11024,11023,11152,11151,11152,11023,11023,11022,11151,11150,11151,11022,11022,11021,11150,11149,11150,11021,11021,11020,11149,11148,11149,11020,11020,11019,11148,11147,11148,11019,11019,11018,11147,11146,11147,11018,11018,11017,11146,11145,11146,11017,11017,11016,11145,11144,11145,11016,11016,11015,11144,11143,11144,11015,11015,11014,11143,11142,11143,11014,11014,11013,11142,11141,11142,11013,11013,11012,11141,11140,11141,11012,11012,11011,11140,11139,11140,11011,11011,11010,11139,11138,11139,11010,11010,11009,11138,11137,11138,11009,11009,11008,11137,11136,11137,11008,11263,11262,11391,11390,11391,11262,11262,11261,11390,11389,11390,11261,11261,11260,11389,11388,11389,11260,11260,11259,11388,11387,11388,11259,11259,11258,11387,11386,11387,11258,11258,11257,11386,11385,11386,11257,11257,11256,11385,11384,11385,11256,11256,11255,11384,11383,11384,11255,11255,11254,11383,11382,11383,11254,11254,11253,11382,11381,11382,11253,11253,11252,11381,11380,11381,11252,11252,11251,11380,11379,11380,11251,11251,11250,11379,11378,11379,11250,11250,11249,11378,11377,11378,11249,11249,11248,11377,11376,11377,11248,11248,11247,11376,11375,11376,11247,11247,11246,11375,11374,11375,11246,11246,11245,11374,11373,11374,11245,11245,11244,11373,11372,11373,11244,11244,11243,11372,11371,11372,11243,11243,11242,11371,11370,11371,11242,11242,11241,11370,11369,11370,11241,11241,11240,11369,11368,11369,11240,11240,11239,11368,11367,11368,11239,11239,11238,11367,11366,11367,11238,11238,11237,11366,11365,11366,11237,11237,11236,11365,11364,11365,11236,11236,11235,11364,11363,11364,11235,11235,11234,11363,11362,11363,11234,11234,11233,11362,11361,11362,11233,11233,11232,11361,11360,11361,11232,11232,11231,11360,11359,11360,11231,11231,11230,11359,11358,11359,11230,11230,11229,11358,11357,11358,11229,11229,11228,11357,11356,11357,11228,11228,11227,11356,11355,11356,11227,11227,11226,11355,11354,11355,11226,11226,11225,11354,11353,11354,11225,11225,11224,11353,11352,11353,11224,11224,11223,11352,11351,11352,11223,11223,11222,11351,11350,11351,11222,11222,11221,11350,11349,11350,11221,11221,11220,11349,11348,11349,11220,11220,11219,11348,11347,11348,11219,11219,11218,11347,11346,11347,11218,11218,11217,11346,11345,11346,11217,11217,11216,11345,11344,11345,11216,11216,11215,11344,11343,11344,11215,11215,11214,11343,11342,11343,11214,11214,11213,11342,11341,11342,11213,11213,11212,11341,11340,11341,11212,11212,11211,11340,11339,11340,11211,11211,11210,11339,11338,11339,11210,11210,11209,11338,11337,11338,11209,11209,11208,11337,11336,11337,11208,11208,11207,11336,11335,11336,11207,11207,11206,11335,11334,11335,11206,11206,11205,11334,11333,11334,11205,11205,11204,11333,11332,11333,11204,11204,11203,11332,11331,11332,11203,11203,11202,11331,11330,11331,11202,11202,11201,11330,11329,11330,11201,11201,11200,11329,11328,11329,11200,11200,11199,11328,11327,11328,11199,11199,11198,11327,11326,11327,11198,11198,11197,11326,11325,11326,11197,11197,11196,11325,11324,11325,11196,11196,11195,11324,11323,11324,11195,11195,11194,11323,11322,11323,11194,11194,11193,11322,11321,11322,11193,11193,11192,11321,11320,11321,11192,11192,11191,11320,11319,11320,11191,11191,11190,11319,11318,11319,11190,11190,11189,11318,11317,11318,11189,11189,11188,11317,11316,11317,11188,11188,11187,11316,11315,11316,11187,11187,11186,11315,11314,11315,11186,11186,11185,11314,11313,11314,11185,11185,11184,11313,11312,11313,11184,11184,11183,11312,11311,11312,11183,11183,11182,11311,11310,11311,11182,11182,11181,11310,11309,11310,11181,11181,11180,11309,11308,11309,11180,11180,11179,11308,11307,11308,11179,11179,11178,11307,11306,11307,11178,11178,11177,11306,11305,11306,11177,11177,11176,11305,11304,11305,11176,11176,11175,11304,11303,11304,11175,11175,11174,11303,11302,11303,11174,11174,11173,11302,11301,11302,11173,11173,11172,11301,11300,11301,11172,11172,11171,11300,11299,11300,11171,11171,11170,11299,11298,11299,11170,11170,11169,11298,11297,11298,11169,11169,11168,11297,11296,11297,11168,11168,11167,11296,11295,11296,11167,11167,11166,11295,11294,11295,11166,11166,11165,11294,11293,11294,11165,11165,11164,11293,11292,11293,11164,11164,11163,11292,11291,11292,11163,11163,11162,11291,11290,11291,11162,11162,11161,11290,11289,11290,11161,11161,11160,11289,11288,11289,11160,11160,11159,11288,11287,11288,11159,11159,11158,11287,11286,11287,11158,11158,11157,11286,11285,11286,11157,11157,11156,11285,11284,11285,11156,11156,11155,11284,11283,11284,11155,11155,11154,11283,11282,11283,11154,11154,11153,11282,11281,11282,11153,11153,11152,11281,11280,11281,11152,11152,11151,11280,11279,11280,11151,11151,11150,11279,11278,11279,11150,11150,11149,11278,11277,11278,11149,11149,11148,11277,11276,11277,11148,11148,11147,11276,11275,11276,11147,11147,11146,11275,11274,11275,11146,11146,11145,11274,11273,11274,11145,11145,11144,11273,11272,11273,11144,11144,11143,11272,11271,11272,11143,11143,11142,11271,11270,11271,11142,11142,11141,11270,11269,11270,11141,11141,11140,11269,11268,11269,11140,11140,11139,11268,11267,11268,11139,11139,11138,11267,11266,11267,11138,11138,11137,11266,11265,11266,11137,11137,11136,11265,11264,11265,11136,11391,11390,11519,11518,11519,11390,11390,11389,11518,11517,11518,11389,11389,11388,11517,11516,11517,11388,11388,11387,11516,11515,11516,11387,11387,11386,11515,11514,11515,11386,11386,11385,11514,11513,11514,11385,11385,11384,11513,11512,11513,11384,11384,11383,11512,11511,11512,11383,11383,11382,11511,11510,11511,11382,11382,11381,11510,11509,11510,11381,11381,11380,11509,11508,11509,11380,11380,11379,11508,11507,11508,11379,11379,11378,11507,11506,11507,11378,11378,11377,11506,11505,11506,11377,11377,11376,11505,11504,11505,11376,11376,11375,11504,11503,11504,11375,11375,11374,11503,11502,11503,11374,11374,11373,11502,11501,11502,11373,11373,11372,11501,11500,11501,11372,11372,11371,11500,11499,11500,11371,11371,11370,11499,11498,11499,11370,11370,11369,11498,11497,11498,11369,11369,11368,11497,11496,11497,11368,11368,11367,11496,11495,11496,11367,11367,11366,11495,11494,11495,11366,11366,11365,11494,11493,11494,11365,11365,11364,11493,11492,11493,11364,11364,11363,11492,11491,11492,11363,11363,11362,11491,11490,11491,11362,11362,11361,11490,11489,11490,11361,11361,11360,11489,11488,11489,11360,11360,11359,11488,11487,11488,11359,11359,11358,11487,11486,11487,11358,11358,11357,11486,11485,11486,11357,11357,11356,11485,11484,11485,11356,11356,11355,11484,11483,11484,11355,11355,11354,11483,11482,11483,11354,11354,11353,11482,11481,11482,11353,11353,11352,11481,11480,11481,11352,11352,11351,11480,11479,11480,11351,11351,11350,11479,11478,11479,11350,11350,11349,11478,11477,11478,11349,11349,11348,11477,11476,11477,11348,11348,11347,11476,11475,11476,11347,11347,11346,11475,11474,11475,11346,11346,11345,11474,11473,11474,11345,11345,11344,11473,11472,11473,11344,11344,11343,11472,11471,11472,11343,11343,11342,11471,11470,11471,11342,11342,11341,11470,11469,11470,11341,11341,11340,11469,11468,11469,11340,11340,11339,11468,11467,11468,11339,11339,11338,11467,11466,11467,11338,11338,11337,11466,11465,11466,11337,11337,11336,11465,11464,11465,11336,11336,11335,11464,11463,11464,11335,11335,11334,11463,11462,11463,11334,11334,11333,11462,11461,11462,11333,11333,11332,11461,11460,11461,11332,11332,11331,11460,11459,11460,11331,11331,11330,11459,11458,11459,11330,11330,11329,11458,11457,11458,11329,11329,11328,11457,11456,11457,11328,11328,11327,11456,11455,11456,11327,11327,11326,11455,11454,11455,11326,11326,11325,11454,11453,11454,11325,11325,11324,11453,11452,11453,11324,11324,11323,11452,11451,11452,11323,11323,11322,11451,11450,11451,11322,11322,11321,11450,11449,11450,11321,11321,11320,11449,11448,11449,11320,11320,11319,11448,11447,11448,11319,11319,11318,11447,11446,11447,11318,11318,11317,11446,11445,11446,11317,11317,11316,11445,11444,11445,11316,11316,11315,11444,11443,11444,11315,11315,11314,11443,11442,11443,11314,11314,11313,11442,11441,11442,11313,11313,11312,11441,11440,11441,11312,11312,11311,11440,11439,11440,11311,11311,11310,11439,11438,11439,11310,11310,11309,11438,11437,11438,11309,11309,11308,11437,11436,11437,11308,11308,11307,11436,11435,11436,11307,11307,11306,11435,11434,11435,11306,11306,11305,11434,11433,11434,11305,11305,11304,11433,11432,11433,11304,11304,11303,11432,11431,11432,11303,11303,11302,11431,11430,11431,11302,11302,11301,11430,11429,11430,11301,11301,11300,11429,11428,11429,11300,11300,11299,11428,11427,11428,11299,11299,11298,11427,11426,11427,11298,11298,11297,11426,11425,11426,11297,11297,11296,11425,11424,11425,11296,11296,11295,11424,11423,11424,11295,11295,11294,11423,11422,11423,11294,11294,11293,11422,11421,11422,11293,11293,11292,11421,11420,11421,11292,11292,11291,11420,11419,11420,11291,11291,11290,11419,11418,11419,11290,11290,11289,11418,11417,11418,11289,11289,11288,11417,11416,11417,11288,11288,11287,11416,11415,11416,11287,11287,11286,11415,11414,11415,11286,11286,11285,11414,11413,11414,11285,11285,11284,11413,11412,11413,11284,11284,11283,11412,11411,11412,11283,11283,11282,11411,11410,11411,11282,11282,11281,11410,11409,11410,11281,11281,11280,11409,11408,11409,11280,11280,11279,11408,11407,11408,11279,11279,11278,11407,11406,11407,11278,11278,11277,11406,11405,11406,11277,11277,11276,11405,11404,11405,11276,11276,11275,11404,11403,11404,11275,11275,11274,11403,11402,11403,11274,11274,11273,11402,11401,11402,11273,11273,11272,11401,11400,11401,11272,11272,11271,11400,11399,11400,11271,11271,11270,11399,11398,11399,11270,11270,11269,11398,11397,11398,11269,11269,11268,11397,11396,11397,11268,11268,11267,11396,11395,11396,11267,11267,11266,11395,11394,11395,11266,11266,11265,11394,11393,11394,11265,11265,11264,11393,11392,11393,11264,11519,11518,11647,11646,11647,11518,11518,11517,11646,11645,11646,11517,11517,11516,11645,11644,11645,11516,11516,11515,11644,11643,11644,11515,11515,11514,11643,11642,11643,11514,11514,11513,11642,11641,11642,11513,11513,11512,11641,11640,11641,11512,11512,11511,11640,11639,11640,11511,11511,11510,11639,11638,11639,11510,11510,11509,11638,11637,11638,11509,11509,11508,11637,11636,11637,11508,11508,11507,11636,11635,11636,11507,11507,11506,11635,11634,11635,11506,11506,11505,11634,11633,11634,11505,11505,11504,11633,11632,11633,11504,11504,11503,11632,11631,11632,11503,11503,11502,11631,11630,11631,11502,11502,11501,11630,11629,11630,11501,11501,11500,11629,11628,11629,11500,11500,11499,11628,11627,11628,11499,11499,11498,11627,11626,11627,11498,11498,11497,11626,11625,11626,11497,11497,11496,11625,11624,11625,11496,11496,11495,11624,11623,11624,11495,11495,11494,11623,11622,11623,11494,11494,11493,11622,11621,11622,11493,11493,11492,11621,11620,11621,11492,11492,11491,11620,11619,11620,11491,11491,11490,11619,11618,11619,11490,11490,11489,11618,11617,11618,11489,11489,11488,11617,11616,11617,11488,11488,11487,11616,11615,11616,11487,11487,11486,11615,11614,11615,11486,11486,11485,11614,11613,11614,11485,11485,11484,11613,11612,11613,11484,11484,11483,11612,11611,11612,11483,11483,11482,11611,11610,11611,11482,11482,11481,11610,11609,11610,11481,11481,11480,11609,11608,11609,11480,11480,11479,11608,11607,11608,11479,11479,11478,11607,11606,11607,11478,11478,11477,11606,11605,11606,11477,11477,11476,11605,11604,11605,11476,11476,11475,11604,11603,11604,11475,11475,11474,11603,11602,11603,11474,11474,11473,11602,11601,11602,11473,11473,11472,11601,11600,11601,11472,11472,11471,11600,11599,11600,11471,11471,11470,11599,11598,11599,11470,11470,11469,11598,11597,11598,11469,11469,11468,11597,11596,11597,11468,11468,11467,11596,11595,11596,11467,11467,11466,11595,11594,11595,11466,11466,11465,11594,11593,11594,11465,11465,11464,11593,11592,11593,11464,11464,11463,11592,11591,11592,11463,11463,11462,11591,11590,11591,11462,11462,11461,11590,11589,11590,11461,11461,11460,11589,11588,11589,11460,11460,11459,11588,11587,11588,11459,11459,11458,11587,11586,11587,11458,11458,11457,11586,11585,11586,11457,11457,11456,11585,11584,11585,11456,11456,11455,11584,11583,11584,11455,11455,11454,11583,11582,11583,11454,11454,11453,11582,11581,11582,11453,11453,11452,11581,11580,11581,11452,11452,11451,11580,11579,11580,11451,11451,11450,11579,11578,11579,11450,11450,11449,11578,11577,11578,11449,11449,11448,11577,11576,11577,11448,11448,11447,11576,11575,11576,11447,11447,11446,11575,11574,11575,11446,11446,11445,11574,11573,11574,11445,11445,11444,11573,11572,11573,11444,11444,11443,11572,11571,11572,11443,11443,11442,11571,11570,11571,11442,11442,11441,11570,11569,11570,11441,11441,11440,11569,11568,11569,11440,11440,11439,11568,11567,11568,11439,11439,11438,11567,11566,11567,11438,11438,11437,11566,11565,11566,11437,11437,11436,11565,11564,11565,11436,11436,11435,11564,11563,11564,11435,11435,11434,11563,11562,11563,11434,11434,11433,11562,11561,11562,11433,11433,11432,11561,11560,11561,11432,11432,11431,11560,11559,11560,11431,11431,11430,11559,11558,11559,11430,11430,11429,11558,11557,11558,11429,11429,11428,11557,11556,11557,11428,11428,11427,11556,11555,11556,11427,11427,11426,11555,11554,11555,11426,11426,11425,11554,11553,11554,11425,11425,11424,11553,11552,11553,11424,11424,11423,11552,11551,11552,11423,11423,11422,11551,11550,11551,11422,11422,11421,11550,11549,11550,11421,11421,11420,11549,11548,11549,11420,11420,11419,11548,11547,11548,11419,11419,11418,11547,11546,11547,11418,11418,11417,11546,11545,11546,11417,11417,11416,11545,11544,11545,11416,11416,11415,11544,11543,11544,11415,11415,11414,11543,11542,11543,11414,11414,11413,11542,11541,11542,11413,11413,11412,11541,11540,11541,11412,11412,11411,11540,11539,11540,11411,11411,11410,11539,11538,11539,11410,11410,11409,11538,11537,11538,11409,11409,11408,11537,11536,11537,11408,11408,11407,11536,11535,11536,11407,11407,11406,11535,11534,11535,11406,11406,11405,11534,11533,11534,11405,11405,11404,11533,11532,11533,11404,11404,11403,11532,11531,11532,11403,11403,11402,11531,11530,11531,11402,11402,11401,11530,11529,11530,11401,11401,11400,11529,11528,11529,11400,11400,11399,11528,11527,11528,11399,11399,11398,11527,11526,11527,11398,11398,11397,11526,11525,11526,11397,11397,11396,11525,11524,11525,11396,11396,11395,11524,11523,11524,11395,11395,11394,11523,11522,11523,11394,11394,11393,11522,11521,11522,11393,11393,11392,11521,11520,11521,11392,11647,11646,11775,11774,11775,11646,11646,11645,11774,11773,11774,11645,11645,11644,11773,11772,11773,11644,11644,11643,11772,11771,11772,11643,11643,11642,11771,11770,11771,11642,11642,11641,11770,11769,11770,11641,11641,11640,11769,11768,11769,11640,11640,11639,11768,11767,11768,11639,11639,11638,11767,11766,11767,11638,11638,11637,11766,11765,11766,11637,11637,11636,11765,11764,11765,11636,11636,11635,11764,11763,11764,11635,11635,11634,11763,11762,11763,11634,11634,11633,11762,11761,11762,11633,11633,11632,11761,11760,11761,11632,11632,11631,11760,11759,11760,11631,11631,11630,11759,11758,11759,11630,11630,11629,11758,11757,11758,11629,11629,11628,11757,11756,11757,11628,11628,11627,11756,11755,11756,11627,11627,11626,11755,11754,11755,11626,11626,11625,11754,11753,11754,11625,11625,11624,11753,11752,11753,11624,11624,11623,11752,11751,11752,11623,11623,11622,11751,11750,11751,11622,11622,11621,11750,11749,11750,11621,11621,11620,11749,11748,11749,11620,11620,11619,11748,11747,11748,11619,11619,11618,11747,11746,11747,11618,11618,11617,11746,11745,11746,11617,11617,11616,11745,11744,11745,11616,11616,11615,11744,11743,11744,11615,11615,11614,11743,11742,11743,11614,11614,11613,11742,11741,11742,11613,11613,11612,11741,11740,11741,11612,11612,11611,11740,11739,11740,11611,11611,11610,11739,11738,11739,11610,11610,11609,11738,11737,11738,11609,11609,11608,11737,11736,11737,11608,11608,11607,11736,11735,11736,11607,11607,11606,11735,11734,11735,11606,11606,11605,11734,11733,11734,11605,11605,11604,11733,11732,11733,11604,11604,11603,11732,11731,11732,11603,11603,11602,11731,11730,11731,11602,11602,11601,11730,11729,11730,11601,11601,11600,11729,11728,11729,11600,11600,11599,11728,11727,11728,11599,11599,11598,11727,11726,11727,11598,11598,11597,11726,11725,11726,11597,11597,11596,11725,11724,11725,11596,11596,11595,11724,11723,11724,11595,11595,11594,11723,11722,11723,11594,11594,11593,11722,11721,11722,11593,11593,11592,11721,11720,11721,11592,11592,11591,11720,11719,11720,11591,11591,11590,11719,11718,11719,11590,11590,11589,11718,11717,11718,11589,11589,11588,11717,11716,11717,11588,11588,11587,11716,11715,11716,11587,11587,11586,11715,11714,11715,11586,11586,11585,11714,11713,11714,11585,11585,11584,11713,11712,11713,11584,11584,11583,11712,11711,11712,11583,11583,11582,11711,11710,11711,11582,11582,11581,11710,11709,11710,11581,11581,11580,11709,11708,11709,11580,11580,11579,11708,11707,11708,11579,11579,11578,11707,11706,11707,11578,11578,11577,11706,11705,11706,11577,11577,11576,11705,11704,11705,11576,11576,11575,11704,11703,11704,11575,11575,11574,11703,11702,11703,11574,11574,11573,11702,11701,11702,11573,11573,11572,11701,11700,11701,11572,11572,11571,11700,11699,11700,11571,11571,11570,11699,11698,11699,11570,11570,11569,11698,11697,11698,11569,11569,11568,11697,11696,11697,11568,11568,11567,11696,11695,11696,11567,11567,11566,11695,11694,11695,11566,11566,11565,11694,11693,11694,11565,11565,11564,11693,11692,11693,11564,11564,11563,11692,11691,11692,11563,11563,11562,11691,11690,11691,11562,11562,11561,11690,11689,11690,11561,11561,11560,11689,11688,11689,11560,11560,11559,11688,11687,11688,11559,11559,11558,11687,11686,11687,11558,11558,11557,11686,11685,11686,11557,11557,11556,11685,11684,11685,11556,11556,11555,11684,11683,11684,11555,11555,11554,11683,11682,11683,11554,11554,11553,11682,11681,11682,11553,11553,11552,11681,11680,11681,11552,11552,11551,11680,11679,11680,11551,11551,11550,11679,11678,11679,11550,11550,11549,11678,11677,11678,11549,11549,11548,11677,11676,11677,11548,11548,11547,11676,11675,11676,11547,11547,11546,11675,11674,11675,11546,11546,11545,11674,11673,11674,11545,11545,11544,11673,11672,11673,11544,11544,11543,11672,11671,11672,11543,11543,11542,11671,11670,11671,11542,11542,11541,11670,11669,11670,11541,11541,11540,11669,11668,11669,11540,11540,11539,11668,11667,11668,11539,11539,11538,11667,11666,11667,11538,11538,11537,11666,11665,11666,11537,11537,11536,11665,11664,11665,11536,11536,11535,11664,11663,11664,11535,11535,11534,11663,11662,11663,11534,11534,11533,11662,11661,11662,11533,11533,11532,11661,11660,11661,11532,11532,11531,11660,11659,11660,11531,11531,11530,11659,11658,11659,11530,11530,11529,11658,11657,11658,11529,11529,11528,11657,11656,11657,11528,11528,11527,11656,11655,11656,11527,11527,11526,11655,11654,11655,11526,11526,11525,11654,11653,11654,11525,11525,11524,11653,11652,11653,11524,11524,11523,11652,11651,11652,11523,11523,11522,11651,11650,11651,11522,11522,11521,11650,11649,11650,11521,11521,11520,11649,11648,11649,11520,11775,11774,11903,11902,11903,11774,11774,11773,11902,11901,11902,11773,11773,11772,11901,11900,11901,11772,11772,11771,11900,11899,11900,11771,11771,11770,11899,11898,11899,11770,11770,11769,11898,11897,11898,11769,11769,11768,11897,11896,11897,11768,11768,11767,11896,11895,11896,11767,11767,11766,11895,11894,11895,11766,11766,11765,11894,11893,11894,11765,11765,11764,11893,11892,11893,11764,11764,11763,11892,11891,11892,11763,11763,11762,11891,11890,11891,11762,11762,11761,11890,11889,11890,11761,11761,11760,11889,11888,11889,11760,11760,11759,11888,11887,11888,11759,11759,11758,11887,11886,11887,11758,11758,11757,11886,11885,11886,11757,11757,11756,11885,11884,11885,11756,11756,11755,11884,11883,11884,11755,11755,11754,11883,11882,11883,11754,11754,11753,11882,11881,11882,11753,11753,11752,11881,11880,11881,11752,11752,11751,11880,11879,11880,11751,11751,11750,11879,11878,11879,11750,11750,11749,11878,11877,11878,11749,11749,11748,11877,11876,11877,11748,11748,11747,11876,11875,11876,11747,11747,11746,11875,11874,11875,11746,11746,11745,11874,11873,11874,11745,11745,11744,11873,11872,11873,11744,11744,11743,11872,11871,11872,11743,11743,11742,11871,11870,11871,11742,11742,11741,11870,11869,11870,11741,11741,11740,11869,11868,11869,11740,11740,11739,11868,11867,11868,11739,11739,11738,11867,11866,11867,11738,11738,11737,11866,11865,11866,11737,11737,11736,11865,11864,11865,11736,11736,11735,11864,11863,11864,11735,11735,11734,11863,11862,11863,11734,11734,11733,11862,11861,11862,11733,11733,11732,11861,11860,11861,11732,11732,11731,11860,11859,11860,11731,11731,11730,11859,11858,11859,11730,11730,11729,11858,11857,11858,11729,11729,11728,11857,11856,11857,11728,11728,11727,11856,11855,11856,11727,11727,11726,11855,11854,11855,11726,11726,11725,11854,11853,11854,11725,11725,11724,11853,11852,11853,11724,11724,11723,11852,11851,11852,11723,11723,11722,11851,11850,11851,11722,11722,11721,11850,11849,11850,11721,11721,11720,11849,11848,11849,11720,11720,11719,11848,11847,11848,11719,11719,11718,11847,11846,11847,11718,11718,11717,11846,11845,11846,11717,11717,11716,11845,11844,11845,11716,11716,11715,11844,11843,11844,11715,11715,11714,11843,11842,11843,11714,11714,11713,11842,11841,11842,11713,11713,11712,11841,11840,11841,11712,11712,11711,11840,11839,11840,11711,11711,11710,11839,11838,11839,11710,11710,11709,11838,11837,11838,11709,11709,11708,11837,11836,11837,11708,11708,11707,11836,11835,11836,11707,11707,11706,11835,11834,11835,11706,11706,11705,11834,11833,11834,11705,11705,11704,11833,11832,11833,11704,11704,11703,11832,11831,11832,11703,11703,11702,11831,11830,11831,11702,11702,11701,11830,11829,11830,11701,11701,11700,11829,11828,11829,11700,11700,11699,11828,11827,11828,11699,11699,11698,11827,11826,11827,11698,11698,11697,11826,11825,11826,11697,11697,11696,11825,11824,11825,11696,11696,11695,11824,11823,11824,11695,11695,11694,11823,11822,11823,11694,11694,11693,11822,11821,11822,11693,11693,11692,11821,11820,11821,11692,11692,11691,11820,11819,11820,11691,11691,11690,11819,11818,11819,11690,11690,11689,11818,11817,11818,11689,11689,11688,11817,11816,11817,11688,11688,11687,11816,11815,11816,11687,11687,11686,11815,11814,11815,11686,11686,11685,11814,11813,11814,11685,11685,11684,11813,11812,11813,11684,11684,11683,11812,11811,11812,11683,11683,11682,11811,11810,11811,11682,11682,11681,11810,11809,11810,11681,11681,11680,11809,11808,11809,11680,11680,11679,11808,11807,11808,11679,11679,11678,11807,11806,11807,11678,11678,11677,11806,11805,11806,11677,11677,11676,11805,11804,11805,11676,11676,11675,11804,11803,11804,11675,11675,11674,11803,11802,11803,11674,11674,11673,11802,11801,11802,11673,11673,11672,11801,11800,11801,11672,11672,11671,11800,11799,11800,11671,11671,11670,11799,11798,11799,11670,11670,11669,11798,11797,11798,11669,11669,11668,11797,11796,11797,11668,11668,11667,11796,11795,11796,11667,11667,11666,11795,11794,11795,11666,11666,11665,11794,11793,11794,11665,11665,11664,11793,11792,11793,11664,11664,11663,11792,11791,11792,11663,11663,11662,11791,11790,11791,11662,11662,11661,11790,11789,11790,11661,11661,11660,11789,11788,11789,11660,11660,11659,11788,11787,11788,11659,11659,11658,11787,11786,11787,11658,11658,11657,11786,11785,11786,11657,11657,11656,11785,11784,11785,11656,11656,11655,11784,11783,11784,11655,11655,11654,11783,11782,11783,11654,11654,11653,11782,11781,11782,11653,11653,11652,11781,11780,11781,11652,11652,11651,11780,11779,11780,11651,11651,11650,11779,11778,11779,11650,11650,11649,11778,11777,11778,11649,11649,11648,11777,11776,11777,11648,11903,11902,12031,12030,12031,11902,11902,11901,12030,12029,12030,11901,11901,11900,12029,12028,12029,11900,11900,11899,12028,12027,12028,11899,11899,11898,12027,12026,12027,11898,11898,11897,12026,12025,12026,11897,11897,11896,12025,12024,12025,11896,11896,11895,12024,12023,12024,11895,11895,11894,12023,12022,12023,11894,11894,11893,12022,12021,12022,11893,11893,11892,12021,12020,12021,11892,11892,11891,12020,12019,12020,11891,11891,11890,12019,12018,12019,11890,11890,11889,12018,12017,12018,11889,11889,11888,12017,12016,12017,11888,11888,11887,12016,12015,12016,11887,11887,11886,12015,12014,12015,11886,11886,11885,12014,12013,12014,11885,11885,11884,12013,12012,12013,11884,11884,11883,12012,12011,12012,11883,11883,11882,12011,12010,12011,11882,11882,11881,12010,12009,12010,11881,11881,11880,12009,12008,12009,11880,11880,11879,12008,12007,12008,11879,11879,11878,12007,12006,12007,11878,11878,11877,12006,12005,12006,11877,11877,11876,12005,12004,12005,11876,11876,11875,12004,12003,12004,11875,11875,11874,12003,12002,12003,11874,11874,11873,12002,12001,12002,11873,11873,11872,12001,12000,12001,11872,11872,11871,12000,11999,12000,11871,11871,11870,11999,11998,11999,11870,11870,11869,11998,11997,11998,11869,11869,11868,11997,11996,11997,11868,11868,11867,11996,11995,11996,11867,11867,11866,11995,11994,11995,11866,11866,11865,11994,11993,11994,11865,11865,11864,11993,11992,11993,11864,11864,11863,11992,11991,11992,11863,11863,11862,11991,11990,11991,11862,11862,11861,11990,11989,11990,11861,11861,11860,11989,11988,11989,11860,11860,11859,11988,11987,11988,11859,11859,11858,11987,11986,11987,11858,11858,11857,11986,11985,11986,11857,11857,11856,11985,11984,11985,11856,11856,11855,11984,11983,11984,11855,11855,11854,11983,11982,11983,11854,11854,11853,11982,11981,11982,11853,11853,11852,11981,11980,11981,11852,11852,11851,11980,11979,11980,11851,11851,11850,11979,11978,11979,11850,11850,11849,11978,11977,11978,11849,11849,11848,11977,11976,11977,11848,11848,11847,11976,11975,11976,11847,11847,11846,11975,11974,11975,11846,11846,11845,11974,11973,11974,11845,11845,11844,11973,11972,11973,11844,11844,11843,11972,11971,11972,11843,11843,11842,11971,11970,11971,11842,11842,11841,11970,11969,11970,11841,11841,11840,11969,11968,11969,11840,11840,11839,11968,11967,11968,11839,11839,11838,11967,11966,11967,11838,11838,11837,11966,11965,11966,11837,11837,11836,11965,11964,11965,11836,11836,11835,11964,11963,11964,11835,11835,11834,11963,11962,11963,11834,11834,11833,11962,11961,11962,11833,11833,11832,11961,11960,11961,11832,11832,11831,11960,11959,11960,11831,11831,11830,11959,11958,11959,11830,11830,11829,11958,11957,11958,11829,11829,11828,11957,11956,11957,11828,11828,11827,11956,11955,11956,11827,11827,11826,11955,11954,11955,11826,11826,11825,11954,11953,11954,11825,11825,11824,11953,11952,11953,11824,11824,11823,11952,11951,11952,11823,11823,11822,11951,11950,11951,11822,11822,11821,11950,11949,11950,11821,11821,11820,11949,11948,11949,11820,11820,11819,11948,11947,11948,11819,11819,11818,11947,11946,11947,11818,11818,11817,11946,11945,11946,11817,11817,11816,11945,11944,11945,11816,11816,11815,11944,11943,11944,11815,11815,11814,11943,11942,11943,11814,11814,11813,11942,11941,11942,11813,11813,11812,11941,11940,11941,11812,11812,11811,11940,11939,11940,11811,11811,11810,11939,11938,11939,11810,11810,11809,11938,11937,11938,11809,11809,11808,11937,11936,11937,11808,11808,11807,11936,11935,11936,11807,11807,11806,11935,11934,11935,11806,11806,11805,11934,11933,11934,11805,11805,11804,11933,11932,11933,11804,11804,11803,11932,11931,11932,11803,11803,11802,11931,11930,11931,11802,11802,11801,11930,11929,11930,11801,11801,11800,11929,11928,11929,11800,11800,11799,11928,11927,11928,11799,11799,11798,11927,11926,11927,11798,11798,11797,11926,11925,11926,11797,11797,11796,11925,11924,11925,11796,11796,11795,11924,11923,11924,11795,11795,11794,11923,11922,11923,11794,11794,11793,11922,11921,11922,11793,11793,11792,11921,11920,11921,11792,11792,11791,11920,11919,11920,11791,11791,11790,11919,11918,11919,11790,11790,11789,11918,11917,11918,11789,11789,11788,11917,11916,11917,11788,11788,11787,11916,11915,11916,11787,11787,11786,11915,11914,11915,11786,11786,11785,11914,11913,11914,11785,11785,11784,11913,11912,11913,11784,11784,11783,11912,11911,11912,11783,11783,11782,11911,11910,11911,11782,11782,11781,11910,11909,11910,11781,11781,11780,11909,11908,11909,11780,11780,11779,11908,11907,11908,11779,11779,11778,11907,11906,11907,11778,11778,11777,11906,11905,11906,11777,11777,11776,11905,11904,11905,11776,12031,12030,12159,12158,12159,12030,12030,12029,12158,12157,12158,12029,12029,12028,12157,12156,12157,12028,12028,12027,12156,12155,12156,12027,12027,12026,12155,12154,12155,12026,12026,12025,12154,12153,12154,12025,12025,12024,12153,12152,12153,12024,12024,12023,12152,12151,12152,12023,12023,12022,12151,12150,12151,12022,12022,12021,12150,12149,12150,12021,12021,12020,12149,12148,12149,12020,12020,12019,12148,12147,12148,12019,12019,12018,12147,12146,12147,12018,12018,12017,12146,12145,12146,12017,12017,12016,12145,12144,12145,12016,12016,12015,12144,12143,12144,12015,12015,12014,12143,12142,12143,12014,12014,12013,12142,12141,12142,12013,12013,12012,12141,12140,12141,12012,12012,12011,12140,12139,12140,12011,12011,12010,12139,12138,12139,12010,12010,12009,12138,12137,12138,12009,12009,12008,12137,12136,12137,12008,12008,12007,12136,12135,12136,12007,12007,12006,12135,12134,12135,12006,12006,12005,12134,12133,12134,12005,12005,12004,12133,12132,12133,12004,12004,12003,12132,12131,12132,12003,12003,12002,12131,12130,12131,12002,12002,12001,12130,12129,12130,12001,12001,12000,12129,12128,12129,12000,12000,11999,12128,12127,12128,11999,11999,11998,12127,12126,12127,11998,11998,11997,12126,12125,12126,11997,11997,11996,12125,12124,12125,11996,11996,11995,12124,12123,12124,11995,11995,11994,12123,12122,12123,11994,11994,11993,12122,12121,12122,11993,11993,11992,12121,12120,12121,11992,11992,11991,12120,12119,12120,11991,11991,11990,12119,12118,12119,11990,11990,11989,12118,12117,12118,11989,11989,11988,12117,12116,12117,11988,11988,11987,12116,12115,12116,11987,11987,11986,12115,12114,12115,11986,11986,11985,12114,12113,12114,11985,11985,11984,12113,12112,12113,11984,11984,11983,12112,12111,12112,11983,11983,11982,12111,12110,12111,11982,11982,11981,12110,12109,12110,11981,11981,11980,12109,12108,12109,11980,11980,11979,12108,12107,12108,11979,11979,11978,12107,12106,12107,11978,11978,11977,12106,12105,12106,11977,11977,11976,12105,12104,12105,11976,11976,11975,12104,12103,12104,11975,11975,11974,12103,12102,12103,11974,11974,11973,12102,12101,12102,11973,11973,11972,12101,12100,12101,11972,11972,11971,12100,12099,12100,11971,11971,11970,12099,12098,12099,11970,11970,11969,12098,12097,12098,11969,11969,11968,12097,12096,12097,11968,11968,11967,12096,12095,12096,11967,11967,11966,12095,12094,12095,11966,11966,11965,12094,12093,12094,11965,11965,11964,12093,12092,12093,11964,11964,11963,12092,12091,12092,11963,11963,11962,12091,12090,12091,11962,11962,11961,12090,12089,12090,11961,11961,11960,12089,12088,12089,11960,11960,11959,12088,12087,12088,11959,11959,11958,12087,12086,12087,11958,11958,11957,12086,12085,12086,11957,11957,11956,12085,12084,12085,11956,11956,11955,12084,12083,12084,11955,11955,11954,12083,12082,12083,11954,11954,11953,12082,12081,12082,11953,11953,11952,12081,12080,12081,11952,11952,11951,12080,12079,12080,11951,11951,11950,12079,12078,12079,11950,11950,11949,12078,12077,12078,11949,11949,11948,12077,12076,12077,11948,11948,11947,12076,12075,12076,11947,11947,11946,12075,12074,12075,11946,11946,11945,12074,12073,12074,11945,11945,11944,12073,12072,12073,11944,11944,11943,12072,12071,12072,11943,11943,11942,12071,12070,12071,11942,11942,11941,12070,12069,12070,11941,11941,11940,12069,12068,12069,11940,11940,11939,12068,12067,12068,11939,11939,11938,12067,12066,12067,11938,11938,11937,12066,12065,12066,11937,11937,11936,12065,12064,12065,11936,11936,11935,12064,12063,12064,11935,11935,11934,12063,12062,12063,11934,11934,11933,12062,12061,12062,11933,11933,11932,12061,12060,12061,11932,11932,11931,12060,12059,12060,11931,11931,11930,12059,12058,12059,11930,11930,11929,12058,12057,12058,11929,11929,11928,12057,12056,12057,11928,11928,11927,12056,12055,12056,11927,11927,11926,12055,12054,12055,11926,11926,11925,12054,12053,12054,11925,11925,11924,12053,12052,12053,11924,11924,11923,12052,12051,12052,11923,11923,11922,12051,12050,12051,11922,11922,11921,12050,12049,12050,11921,11921,11920,12049,12048,12049,11920,11920,11919,12048,12047,12048,11919,11919,11918,12047,12046,12047,11918,11918,11917,12046,12045,12046,11917,11917,11916,12045,12044,12045,11916,11916,11915,12044,12043,12044,11915,11915,11914,12043,12042,12043,11914,11914,11913,12042,12041,12042,11913,11913,11912,12041,12040,12041,11912,11912,11911,12040,12039,12040,11911,11911,11910,12039,12038,12039,11910,11910,11909,12038,12037,12038,11909,11909,11908,12037,12036,12037,11908,11908,11907,12036,12035,12036,11907,11907,11906,12035,12034,12035,11906,11906,11905,12034,12033,12034,11905,11905,11904,12033,12032,12033,11904,12159,12158,12287,12286,12287,12158,12158,12157,12286,12285,12286,12157,12157,12156,12285,12284,12285,12156,12156,12155,12284,12283,12284,12155,12155,12154,12283,12282,12283,12154,12154,12153,12282,12281,12282,12153,12153,12152,12281,12280,12281,12152,12152,12151,12280,12279,12280,12151,12151,12150,12279,12278,12279,12150,12150,12149,12278,12277,12278,12149,12149,12148,12277,12276,12277,12148,12148,12147,12276,12275,12276,12147,12147,12146,12275,12274,12275,12146,12146,12145,12274,12273,12274,12145,12145,12144,12273,12272,12273,12144,12144,12143,12272,12271,12272,12143,12143,12142,12271,12270,12271,12142,12142,12141,12270,12269,12270,12141,12141,12140,12269,12268,12269,12140,12140,12139,12268,12267,12268,12139,12139,12138,12267,12266,12267,12138,12138,12137,12266,12265,12266,12137,12137,12136,12265,12264,12265,12136,12136,12135,12264,12263,12264,12135,12135,12134,12263,12262,12263,12134,12134,12133,12262,12261,12262,12133,12133,12132,12261,12260,12261,12132,12132,12131,12260,12259,12260,12131,12131,12130,12259,12258,12259,12130,12130,12129,12258,12257,12258,12129,12129,12128,12257,12256,12257,12128,12128,12127,12256,12255,12256,12127,12127,12126,12255,12254,12255,12126,12126,12125,12254,12253,12254,12125,12125,12124,12253,12252,12253,12124,12124,12123,12252,12251,12252,12123,12123,12122,12251,12250,12251,12122,12122,12121,12250,12249,12250,12121,12121,12120,12249,12248,12249,12120,12120,12119,12248,12247,12248,12119,12119,12118,12247,12246,12247,12118,12118,12117,12246,12245,12246,12117,12117,12116,12245,12244,12245,12116,12116,12115,12244,12243,12244,12115,12115,12114,12243,12242,12243,12114,12114,12113,12242,12241,12242,12113,12113,12112,12241,12240,12241,12112,12112,12111,12240,12239,12240,12111,12111,12110,12239,12238,12239,12110,12110,12109,12238,12237,12238,12109,12109,12108,12237,12236,12237,12108,12108,12107,12236,12235,12236,12107,12107,12106,12235,12234,12235,12106,12106,12105,12234,12233,12234,12105,12105,12104,12233,12232,12233,12104,12104,12103,12232,12231,12232,12103,12103,12102,12231,12230,12231,12102,12102,12101,12230,12229,12230,12101,12101,12100,12229,12228,12229,12100,12100,12099,12228,12227,12228,12099,12099,12098,12227,12226,12227,12098,12098,12097,12226,12225,12226,12097,12097,12096,12225,12224,12225,12096,12096,12095,12224,12223,12224,12095,12095,12094,12223,12222,12223,12094,12094,12093,12222,12221,12222,12093,12093,12092,12221,12220,12221,12092,12092,12091,12220,12219,12220,12091,12091,12090,12219,12218,12219,12090,12090,12089,12218,12217,12218,12089,12089,12088,12217,12216,12217,12088,12088,12087,12216,12215,12216,12087,12087,12086,12215,12214,12215,12086,12086,12085,12214,12213,12214,12085,12085,12084,12213,12212,12213,12084,12084,12083,12212,12211,12212,12083,12083,12082,12211,12210,12211,12082,12082,12081,12210,12209,12210,12081,12081,12080,12209,12208,12209,12080,12080,12079,12208,12207,12208,12079,12079,12078,12207,12206,12207,12078,12078,12077,12206,12205,12206,12077,12077,12076,12205,12204,12205,12076,12076,12075,12204,12203,12204,12075,12075,12074,12203,12202,12203,12074,12074,12073,12202,12201,12202,12073,12073,12072,12201,12200,12201,12072,12072,12071,12200,12199,12200,12071,12071,12070,12199,12198,12199,12070,12070,12069,12198,12197,12198,12069,12069,12068,12197,12196,12197,12068,12068,12067,12196,12195,12196,12067,12067,12066,12195,12194,12195,12066,12066,12065,12194,12193,12194,12065,12065,12064,12193,12192,12193,12064,12064,12063,12192,12191,12192,12063,12063,12062,12191,12190,12191,12062,12062,12061,12190,12189,12190,12061,12061,12060,12189,12188,12189,12060,12060,12059,12188,12187,12188,12059,12059,12058,12187,12186,12187,12058,12058,12057,12186,12185,12186,12057,12057,12056,12185,12184,12185,12056,12056,12055,12184,12183,12184,12055,12055,12054,12183,12182,12183,12054,12054,12053,12182,12181,12182,12053,12053,12052,12181,12180,12181,12052,12052,12051,12180,12179,12180,12051,12051,12050,12179,12178,12179,12050,12050,12049,12178,12177,12178,12049,12049,12048,12177,12176,12177,12048,12048,12047,12176,12175,12176,12047,12047,12046,12175,12174,12175,12046,12046,12045,12174,12173,12174,12045,12045,12044,12173,12172,12173,12044,12044,12043,12172,12171,12172,12043,12043,12042,12171,12170,12171,12042,12042,12041,12170,12169,12170,12041,12041,12040,12169,12168,12169,12040,12040,12039,12168,12167,12168,12039,12039,12038,12167,12166,12167,12038,12038,12037,12166,12165,12166,12037,12037,12036,12165,12164,12165,12036,12036,12035,12164,12163,12164,12035,12035,12034,12163,12162,12163,12034,12034,12033,12162,12161,12162,12033,12033,12032,12161,12160,12161,12032,12287,12286,12415,12414,12415,12286,12286,12285,12414,12413,12414,12285,12285,12284,12413,12412,12413,12284,12284,12283,12412,12411,12412,12283,12283,12282,12411,12410,12411,12282,12282,12281,12410,12409,12410,12281,12281,12280,12409,12408,12409,12280,12280,12279,12408,12407,12408,12279,12279,12278,12407,12406,12407,12278,12278,12277,12406,12405,12406,12277,12277,12276,12405,12404,12405,12276,12276,12275,12404,12403,12404,12275,12275,12274,12403,12402,12403,12274,12274,12273,12402,12401,12402,12273,12273,12272,12401,12400,12401,12272,12272,12271,12400,12399,12400,12271,12271,12270,12399,12398,12399,12270,12270,12269,12398,12397,12398,12269,12269,12268,12397,12396,12397,12268,12268,12267,12396,12395,12396,12267,12267,12266,12395,12394,12395,12266,12266,12265,12394,12393,12394,12265,12265,12264,12393,12392,12393,12264,12264,12263,12392,12391,12392,12263,12263,12262,12391,12390,12391,12262,12262,12261,12390,12389,12390,12261,12261,12260,12389,12388,12389,12260,12260,12259,12388,12387,12388,12259,12259,12258,12387,12386,12387,12258,12258,12257,12386,12385,12386,12257,12257,12256,12385,12384,12385,12256,12256,12255,12384,12383,12384,12255,12255,12254,12383,12382,12383,12254,12254,12253,12382,12381,12382,12253,12253,12252,12381,12380,12381,12252,12252,12251,12380,12379,12380,12251,12251,12250,12379,12378,12379,12250,12250,12249,12378,12377,12378,12249,12249,12248,12377,12376,12377,12248,12248,12247,12376,12375,12376,12247,12247,12246,12375,12374,12375,12246,12246,12245,12374,12373,12374,12245,12245,12244,12373,12372,12373,12244,12244,12243,12372,12371,12372,12243,12243,12242,12371,12370,12371,12242,12242,12241,12370,12369,12370,12241,12241,12240,12369,12368,12369,12240,12240,12239,12368,12367,12368,12239,12239,12238,12367,12366,12367,12238,12238,12237,12366,12365,12366,12237,12237,12236,12365,12364,12365,12236,12236,12235,12364,12363,12364,12235,12235,12234,12363,12362,12363,12234,12234,12233,12362,12361,12362,12233,12233,12232,12361,12360,12361,12232,12232,12231,12360,12359,12360,12231,12231,12230,12359,12358,12359,12230,12230,12229,12358,12357,12358,12229,12229,12228,12357,12356,12357,12228,12228,12227,12356,12355,12356,12227,12227,12226,12355,12354,12355,12226,12226,12225,12354,12353,12354,12225,12225,12224,12353,12352,12353,12224,12224,12223,12352,12351,12352,12223,12223,12222,12351,12350,12351,12222,12222,12221,12350,12349,12350,12221,12221,12220,12349,12348,12349,12220,12220,12219,12348,12347,12348,12219,12219,12218,12347,12346,12347,12218,12218,12217,12346,12345,12346,12217,12217,12216,12345,12344,12345,12216,12216,12215,12344,12343,12344,12215,12215,12214,12343,12342,12343,12214,12214,12213,12342,12341,12342,12213,12213,12212,12341,12340,12341,12212,12212,12211,12340,12339,12340,12211,12211,12210,12339,12338,12339,12210,12210,12209,12338,12337,12338,12209,12209,12208,12337,12336,12337,12208,12208,12207,12336,12335,12336,12207,12207,12206,12335,12334,12335,12206,12206,12205,12334,12333,12334,12205,12205,12204,12333,12332,12333,12204,12204,12203,12332,12331,12332,12203,12203,12202,12331,12330,12331,12202,12202,12201,12330,12329,12330,12201,12201,12200,12329,12328,12329,12200,12200,12199,12328,12327,12328,12199,12199,12198,12327,12326,12327,12198,12198,12197,12326,12325,12326,12197,12197,12196,12325,12324,12325,12196,12196,12195,12324,12323,12324,12195,12195,12194,12323,12322,12323,12194,12194,12193,12322,12321,12322,12193,12193,12192,12321,12320,12321,12192,12192,12191,12320,12319,12320,12191,12191,12190,12319,12318,12319,12190,12190,12189,12318,12317,12318,12189,12189,12188,12317,12316,12317,12188,12188,12187,12316,12315,12316,12187,12187,12186,12315,12314,12315,12186,12186,12185,12314,12313,12314,12185,12185,12184,12313,12312,12313,12184,12184,12183,12312,12311,12312,12183,12183,12182,12311,12310,12311,12182,12182,12181,12310,12309,12310,12181,12181,12180,12309,12308,12309,12180,12180,12179,12308,12307,12308,12179,12179,12178,12307,12306,12307,12178,12178,12177,12306,12305,12306,12177,12177,12176,12305,12304,12305,12176,12176,12175,12304,12303,12304,12175,12175,12174,12303,12302,12303,12174,12174,12173,12302,12301,12302,12173,12173,12172,12301,12300,12301,12172,12172,12171,12300,12299,12300,12171,12171,12170,12299,12298,12299,12170,12170,12169,12298,12297,12298,12169,12169,12168,12297,12296,12297,12168,12168,12167,12296,12295,12296,12167,12167,12166,12295,12294,12295,12166,12166,12165,12294,12293,12294,12165,12165,12164,12293,12292,12293,12164,12164,12163,12292,12291,12292,12163,12163,12162,12291,12290,12291,12162,12162,12161,12290,12289,12290,12161,12161,12160,12289,12288,12289,12160,12415,12414,12543,12542,12543,12414,12414,12413,12542,12541,12542,12413,12413,12412,12541,12540,12541,12412,12412,12411,12540,12539,12540,12411,12411,12410,12539,12538,12539,12410,12410,12409,12538,12537,12538,12409,12409,12408,12537,12536,12537,12408,12408,12407,12536,12535,12536,12407,12407,12406,12535,12534,12535,12406,12406,12405,12534,12533,12534,12405,12405,12404,12533,12532,12533,12404,12404,12403,12532,12531,12532,12403,12403,12402,12531,12530,12531,12402,12402,12401,12530,12529,12530,12401,12401,12400,12529,12528,12529,12400,12400,12399,12528,12527,12528,12399,12399,12398,12527,12526,12527,12398,12398,12397,12526,12525,12526,12397,12397,12396,12525,12524,12525,12396,12396,12395,12524,12523,12524,12395,12395,12394,12523,12522,12523,12394,12394,12393,12522,12521,12522,12393,12393,12392,12521,12520,12521,12392,12392,12391,12520,12519,12520,12391,12391,12390,12519,12518,12519,12390,12390,12389,12518,12517,12518,12389,12389,12388,12517,12516,12517,12388,12388,12387,12516,12515,12516,12387,12387,12386,12515,12514,12515,12386,12386,12385,12514,12513,12514,12385,12385,12384,12513,12512,12513,12384,12384,12383,12512,12511,12512,12383,12383,12382,12511,12510,12511,12382,12382,12381,12510,12509,12510,12381,12381,12380,12509,12508,12509,12380,12380,12379,12508,12507,12508,12379,12379,12378,12507,12506,12507,12378,12378,12377,12506,12505,12506,12377,12377,12376,12505,12504,12505,12376,12376,12375,12504,12503,12504,12375,12375,12374,12503,12502,12503,12374,12374,12373,12502,12501,12502,12373,12373,12372,12501,12500,12501,12372,12372,12371,12500,12499,12500,12371,12371,12370,12499,12498,12499,12370,12370,12369,12498,12497,12498,12369,12369,12368,12497,12496,12497,12368,12368,12367,12496,12495,12496,12367,12367,12366,12495,12494,12495,12366,12366,12365,12494,12493,12494,12365,12365,12364,12493,12492,12493,12364,12364,12363,12492,12491,12492,12363,12363,12362,12491,12490,12491,12362,12362,12361,12490,12489,12490,12361,12361,12360,12489,12488,12489,12360,12360,12359,12488,12487,12488,12359,12359,12358,12487,12486,12487,12358,12358,12357,12486,12485,12486,12357,12357,12356,12485,12484,12485,12356,12356,12355,12484,12483,12484,12355,12355,12354,12483,12482,12483,12354,12354,12353,12482,12481,12482,12353,12353,12352,12481,12480,12481,12352,12352,12351,12480,12479,12480,12351,12351,12350,12479,12478,12479,12350,12350,12349,12478,12477,12478,12349,12349,12348,12477,12476,12477,12348,12348,12347,12476,12475,12476,12347,12347,12346,12475,12474,12475,12346,12346,12345,12474,12473,12474,12345,12345,12344,12473,12472,12473,12344,12344,12343,12472,12471,12472,12343,12343,12342,12471,12470,12471,12342,12342,12341,12470,12469,12470,12341,12341,12340,12469,12468,12469,12340,12340,12339,12468,12467,12468,12339,12339,12338,12467,12466,12467,12338,12338,12337,12466,12465,12466,12337,12337,12336,12465,12464,12465,12336,12336,12335,12464,12463,12464,12335,12335,12334,12463,12462,12463,12334,12334,12333,12462,12461,12462,12333,12333,12332,12461,12460,12461,12332,12332,12331,12460,12459,12460,12331,12331,12330,12459,12458,12459,12330,12330,12329,12458,12457,12458,12329,12329,12328,12457,12456,12457,12328,12328,12327,12456,12455,12456,12327,12327,12326,12455,12454,12455,12326,12326,12325,12454,12453,12454,12325,12325,12324,12453,12452,12453,12324,12324,12323,12452,12451,12452,12323,12323,12322,12451,12450,12451,12322,12322,12321,12450,12449,12450,12321,12321,12320,12449,12448,12449,12320,12320,12319,12448,12447,12448,12319,12319,12318,12447,12446,12447,12318,12318,12317,12446,12445,12446,12317,12317,12316,12445,12444,12445,12316,12316,12315,12444,12443,12444,12315,12315,12314,12443,12442,12443,12314,12314,12313,12442,12441,12442,12313,12313,12312,12441,12440,12441,12312,12312,12311,12440,12439,12440,12311,12311,12310,12439,12438,12439,12310,12310,12309,12438,12437,12438,12309,12309,12308,12437,12436,12437,12308,12308,12307,12436,12435,12436,12307,12307,12306,12435,12434,12435,12306,12306,12305,12434,12433,12434,12305,12305,12304,12433,12432,12433,12304,12304,12303,12432,12431,12432,12303,12303,12302,12431,12430,12431,12302,12302,12301,12430,12429,12430,12301,12301,12300,12429,12428,12429,12300,12300,12299,12428,12427,12428,12299,12299,12298,12427,12426,12427,12298,12298,12297,12426,12425,12426,12297,12297,12296,12425,12424,12425,12296,12296,12295,12424,12423,12424,12295,12295,12294,12423,12422,12423,12294,12294,12293,12422,12421,12422,12293,12293,12292,12421,12420,12421,12292,12292,12291,12420,12419,12420,12291,12291,12290,12419,12418,12419,12290,12290,12289,12418,12417,12418,12289,12289,12288,12417,12416,12417,12288,12543,12542,12671,12670,12671,12542,12542,12541,12670,12669,12670,12541,12541,12540,12669,12668,12669,12540,12540,12539,12668,12667,12668,12539,12539,12538,12667,12666,12667,12538,12538,12537,12666,12665,12666,12537,12537,12536,12665,12664,12665,12536,12536,12535,12664,12663,12664,12535,12535,12534,12663,12662,12663,12534,12534,12533,12662,12661,12662,12533,12533,12532,12661,12660,12661,12532,12532,12531,12660,12659,12660,12531,12531,12530,12659,12658,12659,12530,12530,12529,12658,12657,12658,12529,12529,12528,12657,12656,12657,12528,12528,12527,12656,12655,12656,12527,12527,12526,12655,12654,12655,12526,12526,12525,12654,12653,12654,12525,12525,12524,12653,12652,12653,12524,12524,12523,12652,12651,12652,12523,12523,12522,12651,12650,12651,12522,12522,12521,12650,12649,12650,12521,12521,12520,12649,12648,12649,12520,12520,12519,12648,12647,12648,12519,12519,12518,12647,12646,12647,12518,12518,12517,12646,12645,12646,12517,12517,12516,12645,12644,12645,12516,12516,12515,12644,12643,12644,12515,12515,12514,12643,12642,12643,12514,12514,12513,12642,12641,12642,12513,12513,12512,12641,12640,12641,12512,12512,12511,12640,12639,12640,12511,12511,12510,12639,12638,12639,12510,12510,12509,12638,12637,12638,12509,12509,12508,12637,12636,12637,12508,12508,12507,12636,12635,12636,12507,12507,12506,12635,12634,12635,12506,12506,12505,12634,12633,12634,12505,12505,12504,12633,12632,12633,12504,12504,12503,12632,12631,12632,12503,12503,12502,12631,12630,12631,12502,12502,12501,12630,12629,12630,12501,12501,12500,12629,12628,12629,12500,12500,12499,12628,12627,12628,12499,12499,12498,12627,12626,12627,12498,12498,12497,12626,12625,12626,12497,12497,12496,12625,12624,12625,12496,12496,12495,12624,12623,12624,12495,12495,12494,12623,12622,12623,12494,12494,12493,12622,12621,12622,12493,12493,12492,12621,12620,12621,12492,12492,12491,12620,12619,12620,12491,12491,12490,12619,12618,12619,12490,12490,12489,12618,12617,12618,12489,12489,12488,12617,12616,12617,12488,12488,12487,12616,12615,12616,12487,12487,12486,12615,12614,12615,12486,12486,12485,12614,12613,12614,12485,12485,12484,12613,12612,12613,12484,12484,12483,12612,12611,12612,12483,12483,12482,12611,12610,12611,12482,12482,12481,12610,12609,12610,12481,12481,12480,12609,12608,12609,12480,12480,12479,12608,12607,12608,12479,12479,12478,12607,12606,12607,12478,12478,12477,12606,12605,12606,12477,12477,12476,12605,12604,12605,12476,12476,12475,12604,12603,12604,12475,12475,12474,12603,12602,12603,12474,12474,12473,12602,12601,12602,12473,12473,12472,12601,12600,12601,12472,12472,12471,12600,12599,12600,12471,12471,12470,12599,12598,12599,12470,12470,12469,12598,12597,12598,12469,12469,12468,12597,12596,12597,12468,12468,12467,12596,12595,12596,12467,12467,12466,12595,12594,12595,12466,12466,12465,12594,12593,12594,12465,12465,12464,12593,12592,12593,12464,12464,12463,12592,12591,12592,12463,12463,12462,12591,12590,12591,12462,12462,12461,12590,12589,12590,12461,12461,12460,12589,12588,12589,12460,12460,12459,12588,12587,12588,12459,12459,12458,12587,12586,12587,12458,12458,12457,12586,12585,12586,12457,12457,12456,12585,12584,12585,12456,12456,12455,12584,12583,12584,12455,12455,12454,12583,12582,12583,12454,12454,12453,12582,12581,12582,12453,12453,12452,12581,12580,12581,12452,12452,12451,12580,12579,12580,12451,12451,12450,12579,12578,12579,12450,12450,12449,12578,12577,12578,12449,12449,12448,12577,12576,12577,12448,12448,12447,12576,12575,12576,12447,12447,12446,12575,12574,12575,12446,12446,12445,12574,12573,12574,12445,12445,12444,12573,12572,12573,12444,12444,12443,12572,12571,12572,12443,12443,12442,12571,12570,12571,12442,12442,12441,12570,12569,12570,12441,12441,12440,12569,12568,12569,12440,12440,12439,12568,12567,12568,12439,12439,12438,12567,12566,12567,12438,12438,12437,12566,12565,12566,12437,12437,12436,12565,12564,12565,12436,12436,12435,12564,12563,12564,12435,12435,12434,12563,12562,12563,12434,12434,12433,12562,12561,12562,12433,12433,12432,12561,12560,12561,12432,12432,12431,12560,12559,12560,12431,12431,12430,12559,12558,12559,12430,12430,12429,12558,12557,12558,12429,12429,12428,12557,12556,12557,12428,12428,12427,12556,12555,12556,12427,12427,12426,12555,12554,12555,12426,12426,12425,12554,12553,12554,12425,12425,12424,12553,12552,12553,12424,12424,12423,12552,12551,12552,12423,12423,12422,12551,12550,12551,12422,12422,12421,12550,12549,12550,12421,12421,12420,12549,12548,12549,12420,12420,12419,12548,12547,12548,12419,12419,12418,12547,12546,12547,12418,12418,12417,12546,12545,12546,12417,12417,12416,12545,12544,12545,12416,12671,12670,12799,12798,12799,12670,12670,12669,12798,12797,12798,12669,12669,12668,12797,12796,12797,12668,12668,12667,12796,12795,12796,12667,12667,12666,12795,12794,12795,12666,12666,12665,12794,12793,12794,12665,12665,12664,12793,12792,12793,12664,12664,12663,12792,12791,12792,12663,12663,12662,12791,12790,12791,12662,12662,12661,12790,12789,12790,12661,12661,12660,12789,12788,12789,12660,12660,12659,12788,12787,12788,12659,12659,12658,12787,12786,12787,12658,12658,12657,12786,12785,12786,12657,12657,12656,12785,12784,12785,12656,12656,12655,12784,12783,12784,12655,12655,12654,12783,12782,12783,12654,12654,12653,12782,12781,12782,12653,12653,12652,12781,12780,12781,12652,12652,12651,12780,12779,12780,12651,12651,12650,12779,12778,12779,12650,12650,12649,12778,12777,12778,12649,12649,12648,12777,12776,12777,12648,12648,12647,12776,12775,12776,12647,12647,12646,12775,12774,12775,12646,12646,12645,12774,12773,12774,12645,12645,12644,12773,12772,12773,12644,12644,12643,12772,12771,12772,12643,12643,12642,12771,12770,12771,12642,12642,12641,12770,12769,12770,12641,12641,12640,12769,12768,12769,12640,12640,12639,12768,12767,12768,12639,12639,12638,12767,12766,12767,12638,12638,12637,12766,12765,12766,12637,12637,12636,12765,12764,12765,12636,12636,12635,12764,12763,12764,12635,12635,12634,12763,12762,12763,12634,12634,12633,12762,12761,12762,12633,12633,12632,12761,12760,12761,12632,12632,12631,12760,12759,12760,12631,12631,12630,12759,12758,12759,12630,12630,12629,12758,12757,12758,12629,12629,12628,12757,12756,12757,12628,12628,12627,12756,12755,12756,12627,12627,12626,12755,12754,12755,12626,12626,12625,12754,12753,12754,12625,12625,12624,12753,12752,12753,12624,12624,12623,12752,12751,12752,12623,12623,12622,12751,12750,12751,12622,12622,12621,12750,12749,12750,12621,12621,12620,12749,12748,12749,12620,12620,12619,12748,12747,12748,12619,12619,12618,12747,12746,12747,12618,12618,12617,12746,12745,12746,12617,12617,12616,12745,12744,12745,12616,12616,12615,12744,12743,12744,12615,12615,12614,12743,12742,12743,12614,12614,12613,12742,12741,12742,12613,12613,12612,12741,12740,12741,12612,12612,12611,12740,12739,12740,12611,12611,12610,12739,12738,12739,12610,12610,12609,12738,12737,12738,12609,12609,12608,12737,12736,12737,12608,12608,12607,12736,12735,12736,12607,12607,12606,12735,12734,12735,12606,12606,12605,12734,12733,12734,12605,12605,12604,12733,12732,12733,12604,12604,12603,12732,12731,12732,12603,12603,12602,12731,12730,12731,12602,12602,12601,12730,12729,12730,12601,12601,12600,12729,12728,12729,12600,12600,12599,12728,12727,12728,12599,12599,12598,12727,12726,12727,12598,12598,12597,12726,12725,12726,12597,12597,12596,12725,12724,12725,12596,12596,12595,12724,12723,12724,12595,12595,12594,12723,12722,12723,12594,12594,12593,12722,12721,12722,12593,12593,12592,12721,12720,12721,12592,12592,12591,12720,12719,12720,12591,12591,12590,12719,12718,12719,12590,12590,12589,12718,12717,12718,12589,12589,12588,12717,12716,12717,12588,12588,12587,12716,12715,12716,12587,12587,12586,12715,12714,12715,12586,12586,12585,12714,12713,12714,12585,12585,12584,12713,12712,12713,12584,12584,12583,12712,12711,12712,12583,12583,12582,12711,12710,12711,12582,12582,12581,12710,12709,12710,12581,12581,12580,12709,12708,12709,12580,12580,12579,12708,12707,12708,12579,12579,12578,12707,12706,12707,12578,12578,12577,12706,12705,12706,12577,12577,12576,12705,12704,12705,12576,12576,12575,12704,12703,12704,12575,12575,12574,12703,12702,12703,12574,12574,12573,12702,12701,12702,12573,12573,12572,12701,12700,12701,12572,12572,12571,12700,12699,12700,12571,12571,12570,12699,12698,12699,12570,12570,12569,12698,12697,12698,12569,12569,12568,12697,12696,12697,12568,12568,12567,12696,12695,12696,12567,12567,12566,12695,12694,12695,12566,12566,12565,12694,12693,12694,12565,12565,12564,12693,12692,12693,12564,12564,12563,12692,12691,12692,12563,12563,12562,12691,12690,12691,12562,12562,12561,12690,12689,12690,12561,12561,12560,12689,12688,12689,12560,12560,12559,12688,12687,12688,12559,12559,12558,12687,12686,12687,12558,12558,12557,12686,12685,12686,12557,12557,12556,12685,12684,12685,12556,12556,12555,12684,12683,12684,12555,12555,12554,12683,12682,12683,12554,12554,12553,12682,12681,12682,12553,12553,12552,12681,12680,12681,12552,12552,12551,12680,12679,12680,12551,12551,12550,12679,12678,12679,12550,12550,12549,12678,12677,12678,12549,12549,12548,12677,12676,12677,12548,12548,12547,12676,12675,12676,12547,12547,12546,12675,12674,12675,12546,12546,12545,12674,12673,12674,12545,12545,12544,12673,12672,12673,12544,12799,12798,12927,12926,12927,12798,12798,12797,12926,12925,12926,12797,12797,12796,12925,12924,12925,12796,12796,12795,12924,12923,12924,12795,12795,12794,12923,12922,12923,12794,12794,12793,12922,12921,12922,12793,12793,12792,12921,12920,12921,12792,12792,12791,12920,12919,12920,12791,12791,12790,12919,12918,12919,12790,12790,12789,12918,12917,12918,12789,12789,12788,12917,12916,12917,12788,12788,12787,12916,12915,12916,12787,12787,12786,12915,12914,12915,12786,12786,12785,12914,12913,12914,12785,12785,12784,12913,12912,12913,12784,12784,12783,12912,12911,12912,12783,12783,12782,12911,12910,12911,12782,12782,12781,12910,12909,12910,12781,12781,12780,12909,12908,12909,12780,12780,12779,12908,12907,12908,12779,12779,12778,12907,12906,12907,12778,12778,12777,12906,12905,12906,12777,12777,12776,12905,12904,12905,12776,12776,12775,12904,12903,12904,12775,12775,12774,12903,12902,12903,12774,12774,12773,12902,12901,12902,12773,12773,12772,12901,12900,12901,12772,12772,12771,12900,12899,12900,12771,12771,12770,12899,12898,12899,12770,12770,12769,12898,12897,12898,12769,12769,12768,12897,12896,12897,12768,12768,12767,12896,12895,12896,12767,12767,12766,12895,12894,12895,12766,12766,12765,12894,12893,12894,12765,12765,12764,12893,12892,12893,12764,12764,12763,12892,12891,12892,12763,12763,12762,12891,12890,12891,12762,12762,12761,12890,12889,12890,12761,12761,12760,12889,12888,12889,12760,12760,12759,12888,12887,12888,12759,12759,12758,12887,12886,12887,12758,12758,12757,12886,12885,12886,12757,12757,12756,12885,12884,12885,12756,12756,12755,12884,12883,12884,12755,12755,12754,12883,12882,12883,12754,12754,12753,12882,12881,12882,12753,12753,12752,12881,12880,12881,12752,12752,12751,12880,12879,12880,12751,12751,12750,12879,12878,12879,12750,12750,12749,12878,12877,12878,12749,12749,12748,12877,12876,12877,12748,12748,12747,12876,12875,12876,12747,12747,12746,12875,12874,12875,12746,12746,12745,12874,12873,12874,12745,12745,12744,12873,12872,12873,12744,12744,12743,12872,12871,12872,12743,12743,12742,12871,12870,12871,12742,12742,12741,12870,12869,12870,12741,12741,12740,12869,12868,12869,12740,12740,12739,12868,12867,12868,12739,12739,12738,12867,12866,12867,12738,12738,12737,12866,12865,12866,12737,12737,12736,12865,12864,12865,12736,12736,12735,12864,12863,12864,12735,12735,12734,12863,12862,12863,12734,12734,12733,12862,12861,12862,12733,12733,12732,12861,12860,12861,12732,12732,12731,12860,12859,12860,12731,12731,12730,12859,12858,12859,12730,12730,12729,12858,12857,12858,12729,12729,12728,12857,12856,12857,12728,12728,12727,12856,12855,12856,12727,12727,12726,12855,12854,12855,12726,12726,12725,12854,12853,12854,12725,12725,12724,12853,12852,12853,12724,12724,12723,12852,12851,12852,12723,12723,12722,12851,12850,12851,12722,12722,12721,12850,12849,12850,12721,12721,12720,12849,12848,12849,12720,12720,12719,12848,12847,12848,12719,12719,12718,12847,12846,12847,12718,12718,12717,12846,12845,12846,12717,12717,12716,12845,12844,12845,12716,12716,12715,12844,12843,12844,12715,12715,12714,12843,12842,12843,12714,12714,12713,12842,12841,12842,12713,12713,12712,12841,12840,12841,12712,12712,12711,12840,12839,12840,12711,12711,12710,12839,12838,12839,12710,12710,12709,12838,12837,12838,12709,12709,12708,12837,12836,12837,12708,12708,12707,12836,12835,12836,12707,12707,12706,12835,12834,12835,12706,12706,12705,12834,12833,12834,12705,12705,12704,12833,12832,12833,12704,12704,12703,12832,12831,12832,12703,12703,12702,12831,12830,12831,12702,12702,12701,12830,12829,12830,12701,12701,12700,12829,12828,12829,12700,12700,12699,12828,12827,12828,12699,12699,12698,12827,12826,12827,12698,12698,12697,12826,12825,12826,12697,12697,12696,12825,12824,12825,12696,12696,12695,12824,12823,12824,12695,12695,12694,12823,12822,12823,12694,12694,12693,12822,12821,12822,12693,12693,12692,12821,12820,12821,12692,12692,12691,12820,12819,12820,12691,12691,12690,12819,12818,12819,12690,12690,12689,12818,12817,12818,12689,12689,12688,12817,12816,12817,12688,12688,12687,12816,12815,12816,12687,12687,12686,12815,12814,12815,12686,12686,12685,12814,12813,12814,12685,12685,12684,12813,12812,12813,12684,12684,12683,12812,12811,12812,12683,12683,12682,12811,12810,12811,12682,12682,12681,12810,12809,12810,12681,12681,12680,12809,12808,12809,12680,12680,12679,12808,12807,12808,12679,12679,12678,12807,12806,12807,12678,12678,12677,12806,12805,12806,12677,12677,12676,12805,12804,12805,12676,12676,12675,12804,12803,12804,12675,12675,12674,12803,12802,12803,12674,12674,12673,12802,12801,12802,12673,12673,12672,12801,12800,12801,12672,12927,12926,13055,13054,13055,12926,12926,12925,13054,13053,13054,12925,12925,12924,13053,13052,13053,12924,12924,12923,13052,13051,13052,12923,12923,12922,13051,13050,13051,12922,12922,12921,13050,13049,13050,12921,12921,12920,13049,13048,13049,12920,12920,12919,13048,13047,13048,12919,12919,12918,13047,13046,13047,12918,12918,12917,13046,13045,13046,12917,12917,12916,13045,13044,13045,12916,12916,12915,13044,13043,13044,12915,12915,12914,13043,13042,13043,12914,12914,12913,13042,13041,13042,12913,12913,12912,13041,13040,13041,12912,12912,12911,13040,13039,13040,12911,12911,12910,13039,13038,13039,12910,12910,12909,13038,13037,13038,12909,12909,12908,13037,13036,13037,12908,12908,12907,13036,13035,13036,12907,12907,12906,13035,13034,13035,12906,12906,12905,13034,13033,13034,12905,12905,12904,13033,13032,13033,12904,12904,12903,13032,13031,13032,12903,12903,12902,13031,13030,13031,12902,12902,12901,13030,13029,13030,12901,12901,12900,13029,13028,13029,12900,12900,12899,13028,13027,13028,12899,12899,12898,13027,13026,13027,12898,12898,12897,13026,13025,13026,12897,12897,12896,13025,13024,13025,12896,12896,12895,13024,13023,13024,12895,12895,12894,13023,13022,13023,12894,12894,12893,13022,13021,13022,12893,12893,12892,13021,13020,13021,12892,12892,12891,13020,13019,13020,12891,12891,12890,13019,13018,13019,12890,12890,12889,13018,13017,13018,12889,12889,12888,13017,13016,13017,12888,12888,12887,13016,13015,13016,12887,12887,12886,13015,13014,13015,12886,12886,12885,13014,13013,13014,12885,12885,12884,13013,13012,13013,12884,12884,12883,13012,13011,13012,12883,12883,12882,13011,13010,13011,12882,12882,12881,13010,13009,13010,12881,12881,12880,13009,13008,13009,12880,12880,12879,13008,13007,13008,12879,12879,12878,13007,13006,13007,12878,12878,12877,13006,13005,13006,12877,12877,12876,13005,13004,13005,12876,12876,12875,13004,13003,13004,12875,12875,12874,13003,13002,13003,12874,12874,12873,13002,13001,13002,12873,12873,12872,13001,13000,13001,12872,12872,12871,13000,12999,13000,12871,12871,12870,12999,12998,12999,12870,12870,12869,12998,12997,12998,12869,12869,12868,12997,12996,12997,12868,12868,12867,12996,12995,12996,12867,12867,12866,12995,12994,12995,12866,12866,12865,12994,12993,12994,12865,12865,12864,12993,12992,12993,12864,12864,12863,12992,12991,12992,12863,12863,12862,12991,12990,12991,12862,12862,12861,12990,12989,12990,12861,12861,12860,12989,12988,12989,12860,12860,12859,12988,12987,12988,12859,12859,12858,12987,12986,12987,12858,12858,12857,12986,12985,12986,12857,12857,12856,12985,12984,12985,12856,12856,12855,12984,12983,12984,12855,12855,12854,12983,12982,12983,12854,12854,12853,12982,12981,12982,12853,12853,12852,12981,12980,12981,12852,12852,12851,12980,12979,12980,12851,12851,12850,12979,12978,12979,12850,12850,12849,12978,12977,12978,12849,12849,12848,12977,12976,12977,12848,12848,12847,12976,12975,12976,12847,12847,12846,12975,12974,12975,12846,12846,12845,12974,12973,12974,12845,12845,12844,12973,12972,12973,12844,12844,12843,12972,12971,12972,12843,12843,12842,12971,12970,12971,12842,12842,12841,12970,12969,12970,12841,12841,12840,12969,12968,12969,12840,12840,12839,12968,12967,12968,12839,12839,12838,12967,12966,12967,12838,12838,12837,12966,12965,12966,12837,12837,12836,12965,12964,12965,12836,12836,12835,12964,12963,12964,12835,12835,12834,12963,12962,12963,12834,12834,12833,12962,12961,12962,12833,12833,12832,12961,12960,12961,12832,12832,12831,12960,12959,12960,12831,12831,12830,12959,12958,12959,12830,12830,12829,12958,12957,12958,12829,12829,12828,12957,12956,12957,12828,12828,12827,12956,12955,12956,12827,12827,12826,12955,12954,12955,12826,12826,12825,12954,12953,12954,12825,12825,12824,12953,12952,12953,12824,12824,12823,12952,12951,12952,12823,12823,12822,12951,12950,12951,12822,12822,12821,12950,12949,12950,12821,12821,12820,12949,12948,12949,12820,12820,12819,12948,12947,12948,12819,12819,12818,12947,12946,12947,12818,12818,12817,12946,12945,12946,12817,12817,12816,12945,12944,12945,12816,12816,12815,12944,12943,12944,12815,12815,12814,12943,12942,12943,12814,12814,12813,12942,12941,12942,12813,12813,12812,12941,12940,12941,12812,12812,12811,12940,12939,12940,12811,12811,12810,12939,12938,12939,12810,12810,12809,12938,12937,12938,12809,12809,12808,12937,12936,12937,12808,12808,12807,12936,12935,12936,12807,12807,12806,12935,12934,12935,12806,12806,12805,12934,12933,12934,12805,12805,12804,12933,12932,12933,12804,12804,12803,12932,12931,12932,12803,12803,12802,12931,12930,12931,12802,12802,12801,12930,12929,12930,12801,12801,12800,12929,12928,12929,12800,13055,13054,13183,13182,13183,13054,13054,13053,13182,13181,13182,13053,13053,13052,13181,13180,13181,13052,13052,13051,13180,13179,13180,13051,13051,13050,13179,13178,13179,13050,13050,13049,13178,13177,13178,13049,13049,13048,13177,13176,13177,13048,13048,13047,13176,13175,13176,13047,13047,13046,13175,13174,13175,13046,13046,13045,13174,13173,13174,13045,13045,13044,13173,13172,13173,13044,13044,13043,13172,13171,13172,13043,13043,13042,13171,13170,13171,13042,13042,13041,13170,13169,13170,13041,13041,13040,13169,13168,13169,13040,13040,13039,13168,13167,13168,13039,13039,13038,13167,13166,13167,13038,13038,13037,13166,13165,13166,13037,13037,13036,13165,13164,13165,13036,13036,13035,13164,13163,13164,13035,13035,13034,13163,13162,13163,13034,13034,13033,13162,13161,13162,13033,13033,13032,13161,13160,13161,13032,13032,13031,13160,13159,13160,13031,13031,13030,13159,13158,13159,13030,13030,13029,13158,13157,13158,13029,13029,13028,13157,13156,13157,13028,13028,13027,13156,13155,13156,13027,13027,13026,13155,13154,13155,13026,13026,13025,13154,13153,13154,13025,13025,13024,13153,13152,13153,13024,13024,13023,13152,13151,13152,13023,13023,13022,13151,13150,13151,13022,13022,13021,13150,13149,13150,13021,13021,13020,13149,13148,13149,13020,13020,13019,13148,13147,13148,13019,13019,13018,13147,13146,13147,13018,13018,13017,13146,13145,13146,13017,13017,13016,13145,13144,13145,13016,13016,13015,13144,13143,13144,13015,13015,13014,13143,13142,13143,13014,13014,13013,13142,13141,13142,13013,13013,13012,13141,13140,13141,13012,13012,13011,13140,13139,13140,13011,13011,13010,13139,13138,13139,13010,13010,13009,13138,13137,13138,13009,13009,13008,13137,13136,13137,13008,13008,13007,13136,13135,13136,13007,13007,13006,13135,13134,13135,13006,13006,13005,13134,13133,13134,13005,13005,13004,13133,13132,13133,13004,13004,13003,13132,13131,13132,13003,13003,13002,13131,13130,13131,13002,13002,13001,13130,13129,13130,13001,13001,13000,13129,13128,13129,13000,13000,12999,13128,13127,13128,12999,12999,12998,13127,13126,13127,12998,12998,12997,13126,13125,13126,12997,12997,12996,13125,13124,13125,12996,12996,12995,13124,13123,13124,12995,12995,12994,13123,13122,13123,12994,12994,12993,13122,13121,13122,12993,12993,12992,13121,13120,13121,12992,12992,12991,13120,13119,13120,12991,12991,12990,13119,13118,13119,12990,12990,12989,13118,13117,13118,12989,12989,12988,13117,13116,13117,12988,12988,12987,13116,13115,13116,12987,12987,12986,13115,13114,13115,12986,12986,12985,13114,13113,13114,12985,12985,12984,13113,13112,13113,12984,12984,12983,13112,13111,13112,12983,12983,12982,13111,13110,13111,12982,12982,12981,13110,13109,13110,12981,12981,12980,13109,13108,13109,12980,12980,12979,13108,13107,13108,12979,12979,12978,13107,13106,13107,12978,12978,12977,13106,13105,13106,12977,12977,12976,13105,13104,13105,12976,12976,12975,13104,13103,13104,12975,12975,12974,13103,13102,13103,12974,12974,12973,13102,13101,13102,12973,12973,12972,13101,13100,13101,12972,12972,12971,13100,13099,13100,12971,12971,12970,13099,13098,13099,12970,12970,12969,13098,13097,13098,12969,12969,12968,13097,13096,13097,12968,12968,12967,13096,13095,13096,12967,12967,12966,13095,13094,13095,12966,12966,12965,13094,13093,13094,12965,12965,12964,13093,13092,13093,12964,12964,12963,13092,13091,13092,12963,12963,12962,13091,13090,13091,12962,12962,12961,13090,13089,13090,12961,12961,12960,13089,13088,13089,12960,12960,12959,13088,13087,13088,12959,12959,12958,13087,13086,13087,12958,12958,12957,13086,13085,13086,12957,12957,12956,13085,13084,13085,12956,12956,12955,13084,13083,13084,12955,12955,12954,13083,13082,13083,12954,12954,12953,13082,13081,13082,12953,12953,12952,13081,13080,13081,12952,12952,12951,13080,13079,13080,12951,12951,12950,13079,13078,13079,12950,12950,12949,13078,13077,13078,12949,12949,12948,13077,13076,13077,12948,12948,12947,13076,13075,13076,12947,12947,12946,13075,13074,13075,12946,12946,12945,13074,13073,13074,12945,12945,12944,13073,13072,13073,12944,12944,12943,13072,13071,13072,12943,12943,12942,13071,13070,13071,12942,12942,12941,13070,13069,13070,12941,12941,12940,13069,13068,13069,12940,12940,12939,13068,13067,13068,12939,12939,12938,13067,13066,13067,12938,12938,12937,13066,13065,13066,12937,12937,12936,13065,13064,13065,12936,12936,12935,13064,13063,13064,12935,12935,12934,13063,13062,13063,12934,12934,12933,13062,13061,13062,12933,12933,12932,13061,13060,13061,12932,12932,12931,13060,13059,13060,12931,12931,12930,13059,13058,13059,12930,12930,12929,13058,13057,13058,12929,12929,12928,13057,13056,13057,12928,13183,13182,13311,13310,13311,13182,13182,13181,13310,13309,13310,13181,13181,13180,13309,13308,13309,13180,13180,13179,13308,13307,13308,13179,13179,13178,13307,13306,13307,13178,13178,13177,13306,13305,13306,13177,13177,13176,13305,13304,13305,13176,13176,13175,13304,13303,13304,13175,13175,13174,13303,13302,13303,13174,13174,13173,13302,13301,13302,13173,13173,13172,13301,13300,13301,13172,13172,13171,13300,13299,13300,13171,13171,13170,13299,13298,13299,13170,13170,13169,13298,13297,13298,13169,13169,13168,13297,13296,13297,13168,13168,13167,13296,13295,13296,13167,13167,13166,13295,13294,13295,13166,13166,13165,13294,13293,13294,13165,13165,13164,13293,13292,13293,13164,13164,13163,13292,13291,13292,13163,13163,13162,13291,13290,13291,13162,13162,13161,13290,13289,13290,13161,13161,13160,13289,13288,13289,13160,13160,13159,13288,13287,13288,13159,13159,13158,13287,13286,13287,13158,13158,13157,13286,13285,13286,13157,13157,13156,13285,13284,13285,13156,13156,13155,13284,13283,13284,13155,13155,13154,13283,13282,13283,13154,13154,13153,13282,13281,13282,13153,13153,13152,13281,13280,13281,13152,13152,13151,13280,13279,13280,13151,13151,13150,13279,13278,13279,13150,13150,13149,13278,13277,13278,13149,13149,13148,13277,13276,13277,13148,13148,13147,13276,13275,13276,13147,13147,13146,13275,13274,13275,13146,13146,13145,13274,13273,13274,13145,13145,13144,13273,13272,13273,13144,13144,13143,13272,13271,13272,13143,13143,13142,13271,13270,13271,13142,13142,13141,13270,13269,13270,13141,13141,13140,13269,13268,13269,13140,13140,13139,13268,13267,13268,13139,13139,13138,13267,13266,13267,13138,13138,13137,13266,13265,13266,13137,13137,13136,13265,13264,13265,13136,13136,13135,13264,13263,13264,13135,13135,13134,13263,13262,13263,13134,13134,13133,13262,13261,13262,13133,13133,13132,13261,13260,13261,13132,13132,13131,13260,13259,13260,13131,13131,13130,13259,13258,13259,13130,13130,13129,13258,13257,13258,13129,13129,13128,13257,13256,13257,13128,13128,13127,13256,13255,13256,13127,13127,13126,13255,13254,13255,13126,13126,13125,13254,13253,13254,13125,13125,13124,13253,13252,13253,13124,13124,13123,13252,13251,13252,13123,13123,13122,13251,13250,13251,13122,13122,13121,13250,13249,13250,13121,13121,13120,13249,13248,13249,13120,13120,13119,13248,13247,13248,13119,13119,13118,13247,13246,13247,13118,13118,13117,13246,13245,13246,13117,13117,13116,13245,13244,13245,13116,13116,13115,13244,13243,13244,13115,13115,13114,13243,13242,13243,13114,13114,13113,13242,13241,13242,13113,13113,13112,13241,13240,13241,13112,13112,13111,13240,13239,13240,13111,13111,13110,13239,13238,13239,13110,13110,13109,13238,13237,13238,13109,13109,13108,13237,13236,13237,13108,13108,13107,13236,13235,13236,13107,13107,13106,13235,13234,13235,13106,13106,13105,13234,13233,13234,13105,13105,13104,13233,13232,13233,13104,13104,13103,13232,13231,13232,13103,13103,13102,13231,13230,13231,13102,13102,13101,13230,13229,13230,13101,13101,13100,13229,13228,13229,13100,13100,13099,13228,13227,13228,13099,13099,13098,13227,13226,13227,13098,13098,13097,13226,13225,13226,13097,13097,13096,13225,13224,13225,13096,13096,13095,13224,13223,13224,13095,13095,13094,13223,13222,13223,13094,13094,13093,13222,13221,13222,13093,13093,13092,13221,13220,13221,13092,13092,13091,13220,13219,13220,13091,13091,13090,13219,13218,13219,13090,13090,13089,13218,13217,13218,13089,13089,13088,13217,13216,13217,13088,13088,13087,13216,13215,13216,13087,13087,13086,13215,13214,13215,13086,13086,13085,13214,13213,13214,13085,13085,13084,13213,13212,13213,13084,13084,13083,13212,13211,13212,13083,13083,13082,13211,13210,13211,13082,13082,13081,13210,13209,13210,13081,13081,13080,13209,13208,13209,13080,13080,13079,13208,13207,13208,13079,13079,13078,13207,13206,13207,13078,13078,13077,13206,13205,13206,13077,13077,13076,13205,13204,13205,13076,13076,13075,13204,13203,13204,13075,13075,13074,13203,13202,13203,13074,13074,13073,13202,13201,13202,13073,13073,13072,13201,13200,13201,13072,13072,13071,13200,13199,13200,13071,13071,13070,13199,13198,13199,13070,13070,13069,13198,13197,13198,13069,13069,13068,13197,13196,13197,13068,13068,13067,13196,13195,13196,13067,13067,13066,13195,13194,13195,13066,13066,13065,13194,13193,13194,13065,13065,13064,13193,13192,13193,13064,13064,13063,13192,13191,13192,13063,13063,13062,13191,13190,13191,13062,13062,13061,13190,13189,13190,13061,13061,13060,13189,13188,13189,13060,13060,13059,13188,13187,13188,13059,13059,13058,13187,13186,13187,13058,13058,13057,13186,13185,13186,13057,13057,13056,13185,13184,13185,13056,13311,13310,13439,13438,13439,13310,13310,13309,13438,13437,13438,13309,13309,13308,13437,13436,13437,13308,13308,13307,13436,13435,13436,13307,13307,13306,13435,13434,13435,13306,13306,13305,13434,13433,13434,13305,13305,13304,13433,13432,13433,13304,13304,13303,13432,13431,13432,13303,13303,13302,13431,13430,13431,13302,13302,13301,13430,13429,13430,13301,13301,13300,13429,13428,13429,13300,13300,13299,13428,13427,13428,13299,13299,13298,13427,13426,13427,13298,13298,13297,13426,13425,13426,13297,13297,13296,13425,13424,13425,13296,13296,13295,13424,13423,13424,13295,13295,13294,13423,13422,13423,13294,13294,13293,13422,13421,13422,13293,13293,13292,13421,13420,13421,13292,13292,13291,13420,13419,13420,13291,13291,13290,13419,13418,13419,13290,13290,13289,13418,13417,13418,13289,13289,13288,13417,13416,13417,13288,13288,13287,13416,13415,13416,13287,13287,13286,13415,13414,13415,13286,13286,13285,13414,13413,13414,13285,13285,13284,13413,13412,13413,13284,13284,13283,13412,13411,13412,13283,13283,13282,13411,13410,13411,13282,13282,13281,13410,13409,13410,13281,13281,13280,13409,13408,13409,13280,13280,13279,13408,13407,13408,13279,13279,13278,13407,13406,13407,13278,13278,13277,13406,13405,13406,13277,13277,13276,13405,13404,13405,13276,13276,13275,13404,13403,13404,13275,13275,13274,13403,13402,13403,13274,13274,13273,13402,13401,13402,13273,13273,13272,13401,13400,13401,13272,13272,13271,13400,13399,13400,13271,13271,13270,13399,13398,13399,13270,13270,13269,13398,13397,13398,13269,13269,13268,13397,13396,13397,13268,13268,13267,13396,13395,13396,13267,13267,13266,13395,13394,13395,13266,13266,13265,13394,13393,13394,13265,13265,13264,13393,13392,13393,13264,13264,13263,13392,13391,13392,13263,13263,13262,13391,13390,13391,13262,13262,13261,13390,13389,13390,13261,13261,13260,13389,13388,13389,13260,13260,13259,13388,13387,13388,13259,13259,13258,13387,13386,13387,13258,13258,13257,13386,13385,13386,13257,13257,13256,13385,13384,13385,13256,13256,13255,13384,13383,13384,13255,13255,13254,13383,13382,13383,13254,13254,13253,13382,13381,13382,13253,13253,13252,13381,13380,13381,13252,13252,13251,13380,13379,13380,13251,13251,13250,13379,13378,13379,13250,13250,13249,13378,13377,13378,13249,13249,13248,13377,13376,13377,13248,13248,13247,13376,13375,13376,13247,13247,13246,13375,13374,13375,13246,13246,13245,13374,13373,13374,13245,13245,13244,13373,13372,13373,13244,13244,13243,13372,13371,13372,13243,13243,13242,13371,13370,13371,13242,13242,13241,13370,13369,13370,13241,13241,13240,13369,13368,13369,13240,13240,13239,13368,13367,13368,13239,13239,13238,13367,13366,13367,13238,13238,13237,13366,13365,13366,13237,13237,13236,13365,13364,13365,13236,13236,13235,13364,13363,13364,13235,13235,13234,13363,13362,13363,13234,13234,13233,13362,13361,13362,13233,13233,13232,13361,13360,13361,13232,13232,13231,13360,13359,13360,13231,13231,13230,13359,13358,13359,13230,13230,13229,13358,13357,13358,13229,13229,13228,13357,13356,13357,13228,13228,13227,13356,13355,13356,13227,13227,13226,13355,13354,13355,13226,13226,13225,13354,13353,13354,13225,13225,13224,13353,13352,13353,13224,13224,13223,13352,13351,13352,13223,13223,13222,13351,13350,13351,13222,13222,13221,13350,13349,13350,13221,13221,13220,13349,13348,13349,13220,13220,13219,13348,13347,13348,13219,13219,13218,13347,13346,13347,13218,13218,13217,13346,13345,13346,13217,13217,13216,13345,13344,13345,13216,13216,13215,13344,13343,13344,13215,13215,13214,13343,13342,13343,13214,13214,13213,13342,13341,13342,13213,13213,13212,13341,13340,13341,13212,13212,13211,13340,13339,13340,13211,13211,13210,13339,13338,13339,13210,13210,13209,13338,13337,13338,13209,13209,13208,13337,13336,13337,13208,13208,13207,13336,13335,13336,13207,13207,13206,13335,13334,13335,13206,13206,13205,13334,13333,13334,13205,13205,13204,13333,13332,13333,13204,13204,13203,13332,13331,13332,13203,13203,13202,13331,13330,13331,13202,13202,13201,13330,13329,13330,13201,13201,13200,13329,13328,13329,13200,13200,13199,13328,13327,13328,13199,13199,13198,13327,13326,13327,13198,13198,13197,13326,13325,13326,13197,13197,13196,13325,13324,13325,13196,13196,13195,13324,13323,13324,13195,13195,13194,13323,13322,13323,13194,13194,13193,13322,13321,13322,13193,13193,13192,13321,13320,13321,13192,13192,13191,13320,13319,13320,13191,13191,13190,13319,13318,13319,13190,13190,13189,13318,13317,13318,13189,13189,13188,13317,13316,13317,13188,13188,13187,13316,13315,13316,13187,13187,13186,13315,13314,13315,13186,13186,13185,13314,13313,13314,13185,13185,13184,13313,13312,13313,13184,13439,13438,13567,13566,13567,13438,13438,13437,13566,13565,13566,13437,13437,13436,13565,13564,13565,13436,13436,13435,13564,13563,13564,13435,13435,13434,13563,13562,13563,13434,13434,13433,13562,13561,13562,13433,13433,13432,13561,13560,13561,13432,13432,13431,13560,13559,13560,13431,13431,13430,13559,13558,13559,13430,13430,13429,13558,13557,13558,13429,13429,13428,13557,13556,13557,13428,13428,13427,13556,13555,13556,13427,13427,13426,13555,13554,13555,13426,13426,13425,13554,13553,13554,13425,13425,13424,13553,13552,13553,13424,13424,13423,13552,13551,13552,13423,13423,13422,13551,13550,13551,13422,13422,13421,13550,13549,13550,13421,13421,13420,13549,13548,13549,13420,13420,13419,13548,13547,13548,13419,13419,13418,13547,13546,13547,13418,13418,13417,13546,13545,13546,13417,13417,13416,13545,13544,13545,13416,13416,13415,13544,13543,13544,13415,13415,13414,13543,13542,13543,13414,13414,13413,13542,13541,13542,13413,13413,13412,13541,13540,13541,13412,13412,13411,13540,13539,13540,13411,13411,13410,13539,13538,13539,13410,13410,13409,13538,13537,13538,13409,13409,13408,13537,13536,13537,13408,13408,13407,13536,13535,13536,13407,13407,13406,13535,13534,13535,13406,13406,13405,13534,13533,13534,13405,13405,13404,13533,13532,13533,13404,13404,13403,13532,13531,13532,13403,13403,13402,13531,13530,13531,13402,13402,13401,13530,13529,13530,13401,13401,13400,13529,13528,13529,13400,13400,13399,13528,13527,13528,13399,13399,13398,13527,13526,13527,13398,13398,13397,13526,13525,13526,13397,13397,13396,13525,13524,13525,13396,13396,13395,13524,13523,13524,13395,13395,13394,13523,13522,13523,13394,13394,13393,13522,13521,13522,13393,13393,13392,13521,13520,13521,13392,13392,13391,13520,13519,13520,13391,13391,13390,13519,13518,13519,13390,13390,13389,13518,13517,13518,13389,13389,13388,13517,13516,13517,13388,13388,13387,13516,13515,13516,13387,13387,13386,13515,13514,13515,13386,13386,13385,13514,13513,13514,13385,13385,13384,13513,13512,13513,13384,13384,13383,13512,13511,13512,13383,13383,13382,13511,13510,13511,13382,13382,13381,13510,13509,13510,13381,13381,13380,13509,13508,13509,13380,13380,13379,13508,13507,13508,13379,13379,13378,13507,13506,13507,13378,13378,13377,13506,13505,13506,13377,13377,13376,13505,13504,13505,13376,13376,13375,13504,13503,13504,13375,13375,13374,13503,13502,13503,13374,13374,13373,13502,13501,13502,13373,13373,13372,13501,13500,13501,13372,13372,13371,13500,13499,13500,13371,13371,13370,13499,13498,13499,13370,13370,13369,13498,13497,13498,13369,13369,13368,13497,13496,13497,13368,13368,13367,13496,13495,13496,13367,13367,13366,13495,13494,13495,13366,13366,13365,13494,13493,13494,13365,13365,13364,13493,13492,13493,13364,13364,13363,13492,13491,13492,13363,13363,13362,13491,13490,13491,13362,13362,13361,13490,13489,13490,13361,13361,13360,13489,13488,13489,13360,13360,13359,13488,13487,13488,13359,13359,13358,13487,13486,13487,13358,13358,13357,13486,13485,13486,13357,13357,13356,13485,13484,13485,13356,13356,13355,13484,13483,13484,13355,13355,13354,13483,13482,13483,13354,13354,13353,13482,13481,13482,13353,13353,13352,13481,13480,13481,13352,13352,13351,13480,13479,13480,13351,13351,13350,13479,13478,13479,13350,13350,13349,13478,13477,13478,13349,13349,13348,13477,13476,13477,13348,13348,13347,13476,13475,13476,13347,13347,13346,13475,13474,13475,13346,13346,13345,13474,13473,13474,13345,13345,13344,13473,13472,13473,13344,13344,13343,13472,13471,13472,13343,13343,13342,13471,13470,13471,13342,13342,13341,13470,13469,13470,13341,13341,13340,13469,13468,13469,13340,13340,13339,13468,13467,13468,13339,13339,13338,13467,13466,13467,13338,13338,13337,13466,13465,13466,13337,13337,13336,13465,13464,13465,13336,13336,13335,13464,13463,13464,13335,13335,13334,13463,13462,13463,13334,13334,13333,13462,13461,13462,13333,13333,13332,13461,13460,13461,13332,13332,13331,13460,13459,13460,13331,13331,13330,13459,13458,13459,13330,13330,13329,13458,13457,13458,13329,13329,13328,13457,13456,13457,13328,13328,13327,13456,13455,13456,13327,13327,13326,13455,13454,13455,13326,13326,13325,13454,13453,13454,13325,13325,13324,13453,13452,13453,13324,13324,13323,13452,13451,13452,13323,13323,13322,13451,13450,13451,13322,13322,13321,13450,13449,13450,13321,13321,13320,13449,13448,13449,13320,13320,13319,13448,13447,13448,13319,13319,13318,13447,13446,13447,13318,13318,13317,13446,13445,13446,13317,13317,13316,13445,13444,13445,13316,13316,13315,13444,13443,13444,13315,13315,13314,13443,13442,13443,13314,13314,13313,13442,13441,13442,13313,13313,13312,13441,13440,13441,13312,13567,13566,13695,13694,13695,13566,13566,13565,13694,13693,13694,13565,13565,13564,13693,13692,13693,13564,13564,13563,13692,13691,13692,13563,13563,13562,13691,13690,13691,13562,13562,13561,13690,13689,13690,13561,13561,13560,13689,13688,13689,13560,13560,13559,13688,13687,13688,13559,13559,13558,13687,13686,13687,13558,13558,13557,13686,13685,13686,13557,13557,13556,13685,13684,13685,13556,13556,13555,13684,13683,13684,13555,13555,13554,13683,13682,13683,13554,13554,13553,13682,13681,13682,13553,13553,13552,13681,13680,13681,13552,13552,13551,13680,13679,13680,13551,13551,13550,13679,13678,13679,13550,13550,13549,13678,13677,13678,13549,13549,13548,13677,13676,13677,13548,13548,13547,13676,13675,13676,13547,13547,13546,13675,13674,13675,13546,13546,13545,13674,13673,13674,13545,13545,13544,13673,13672,13673,13544,13544,13543,13672,13671,13672,13543,13543,13542,13671,13670,13671,13542,13542,13541,13670,13669,13670,13541,13541,13540,13669,13668,13669,13540,13540,13539,13668,13667,13668,13539,13539,13538,13667,13666,13667,13538,13538,13537,13666,13665,13666,13537,13537,13536,13665,13664,13665,13536,13536,13535,13664,13663,13664,13535,13535,13534,13663,13662,13663,13534,13534,13533,13662,13661,13662,13533,13533,13532,13661,13660,13661,13532,13532,13531,13660,13659,13660,13531,13531,13530,13659,13658,13659,13530,13530,13529,13658,13657,13658,13529,13529,13528,13657,13656,13657,13528,13528,13527,13656,13655,13656,13527,13527,13526,13655,13654,13655,13526,13526,13525,13654,13653,13654,13525,13525,13524,13653,13652,13653,13524,13524,13523,13652,13651,13652,13523,13523,13522,13651,13650,13651,13522,13522,13521,13650,13649,13650,13521,13521,13520,13649,13648,13649,13520,13520,13519,13648,13647,13648,13519,13519,13518,13647,13646,13647,13518,13518,13517,13646,13645,13646,13517,13517,13516,13645,13644,13645,13516,13516,13515,13644,13643,13644,13515,13515,13514,13643,13642,13643,13514,13514,13513,13642,13641,13642,13513,13513,13512,13641,13640,13641,13512,13512,13511,13640,13639,13640,13511,13511,13510,13639,13638,13639,13510,13510,13509,13638,13637,13638,13509,13509,13508,13637,13636,13637,13508,13508,13507,13636,13635,13636,13507,13507,13506,13635,13634,13635,13506,13506,13505,13634,13633,13634,13505,13505,13504,13633,13632,13633,13504,13504,13503,13632,13631,13632,13503,13503,13502,13631,13630,13631,13502,13502,13501,13630,13629,13630,13501,13501,13500,13629,13628,13629,13500,13500,13499,13628,13627,13628,13499,13499,13498,13627,13626,13627,13498,13498,13497,13626,13625,13626,13497,13497,13496,13625,13624,13625,13496,13496,13495,13624,13623,13624,13495,13495,13494,13623,13622,13623,13494,13494,13493,13622,13621,13622,13493,13493,13492,13621,13620,13621,13492,13492,13491,13620,13619,13620,13491,13491,13490,13619,13618,13619,13490,13490,13489,13618,13617,13618,13489,13489,13488,13617,13616,13617,13488,13488,13487,13616,13615,13616,13487,13487,13486,13615,13614,13615,13486,13486,13485,13614,13613,13614,13485,13485,13484,13613,13612,13613,13484,13484,13483,13612,13611,13612,13483,13483,13482,13611,13610,13611,13482,13482,13481,13610,13609,13610,13481,13481,13480,13609,13608,13609,13480,13480,13479,13608,13607,13608,13479,13479,13478,13607,13606,13607,13478,13478,13477,13606,13605,13606,13477,13477,13476,13605,13604,13605,13476,13476,13475,13604,13603,13604,13475,13475,13474,13603,13602,13603,13474,13474,13473,13602,13601,13602,13473,13473,13472,13601,13600,13601,13472,13472,13471,13600,13599,13600,13471,13471,13470,13599,13598,13599,13470,13470,13469,13598,13597,13598,13469,13469,13468,13597,13596,13597,13468,13468,13467,13596,13595,13596,13467,13467,13466,13595,13594,13595,13466,13466,13465,13594,13593,13594,13465,13465,13464,13593,13592,13593,13464,13464,13463,13592,13591,13592,13463,13463,13462,13591,13590,13591,13462,13462,13461,13590,13589,13590,13461,13461,13460,13589,13588,13589,13460,13460,13459,13588,13587,13588,13459,13459,13458,13587,13586,13587,13458,13458,13457,13586,13585,13586,13457,13457,13456,13585,13584,13585,13456,13456,13455,13584,13583,13584,13455,13455,13454,13583,13582,13583,13454,13454,13453,13582,13581,13582,13453,13453,13452,13581,13580,13581,13452,13452,13451,13580,13579,13580,13451,13451,13450,13579,13578,13579,13450,13450,13449,13578,13577,13578,13449,13449,13448,13577,13576,13577,13448,13448,13447,13576,13575,13576,13447,13447,13446,13575,13574,13575,13446,13446,13445,13574,13573,13574,13445,13445,13444,13573,13572,13573,13444,13444,13443,13572,13571,13572,13443,13443,13442,13571,13570,13571,13442,13442,13441,13570,13569,13570,13441,13441,13440,13569,13568,13569,13440,13695,13694,13823,13822,13823,13694,13694,13693,13822,13821,13822,13693,13693,13692,13821,13820,13821,13692,13692,13691,13820,13819,13820,13691,13691,13690,13819,13818,13819,13690,13690,13689,13818,13817,13818,13689,13689,13688,13817,13816,13817,13688,13688,13687,13816,13815,13816,13687,13687,13686,13815,13814,13815,13686,13686,13685,13814,13813,13814,13685,13685,13684,13813,13812,13813,13684,13684,13683,13812,13811,13812,13683,13683,13682,13811,13810,13811,13682,13682,13681,13810,13809,13810,13681,13681,13680,13809,13808,13809,13680,13680,13679,13808,13807,13808,13679,13679,13678,13807,13806,13807,13678,13678,13677,13806,13805,13806,13677,13677,13676,13805,13804,13805,13676,13676,13675,13804,13803,13804,13675,13675,13674,13803,13802,13803,13674,13674,13673,13802,13801,13802,13673,13673,13672,13801,13800,13801,13672,13672,13671,13800,13799,13800,13671,13671,13670,13799,13798,13799,13670,13670,13669,13798,13797,13798,13669,13669,13668,13797,13796,13797,13668,13668,13667,13796,13795,13796,13667,13667,13666,13795,13794,13795,13666,13666,13665,13794,13793,13794,13665,13665,13664,13793,13792,13793,13664,13664,13663,13792,13791,13792,13663,13663,13662,13791,13790,13791,13662,13662,13661,13790,13789,13790,13661,13661,13660,13789,13788,13789,13660,13660,13659,13788,13787,13788,13659,13659,13658,13787,13786,13787,13658,13658,13657,13786,13785,13786,13657,13657,13656,13785,13784,13785,13656,13656,13655,13784,13783,13784,13655,13655,13654,13783,13782,13783,13654,13654,13653,13782,13781,13782,13653,13653,13652,13781,13780,13781,13652,13652,13651,13780,13779,13780,13651,13651,13650,13779,13778,13779,13650,13650,13649,13778,13777,13778,13649,13649,13648,13777,13776,13777,13648,13648,13647,13776,13775,13776,13647,13647,13646,13775,13774,13775,13646,13646,13645,13774,13773,13774,13645,13645,13644,13773,13772,13773,13644,13644,13643,13772,13771,13772,13643,13643,13642,13771,13770,13771,13642,13642,13641,13770,13769,13770,13641,13641,13640,13769,13768,13769,13640,13640,13639,13768,13767,13768,13639,13639,13638,13767,13766,13767,13638,13638,13637,13766,13765,13766,13637,13637,13636,13765,13764,13765,13636,13636,13635,13764,13763,13764,13635,13635,13634,13763,13762,13763,13634,13634,13633,13762,13761,13762,13633,13633,13632,13761,13760,13761,13632,13632,13631,13760,13759,13760,13631,13631,13630,13759,13758,13759,13630,13630,13629,13758,13757,13758,13629,13629,13628,13757,13756,13757,13628,13628,13627,13756,13755,13756,13627,13627,13626,13755,13754,13755,13626,13626,13625,13754,13753,13754,13625,13625,13624,13753,13752,13753,13624,13624,13623,13752,13751,13752,13623,13623,13622,13751,13750,13751,13622,13622,13621,13750,13749,13750,13621,13621,13620,13749,13748,13749,13620,13620,13619,13748,13747,13748,13619,13619,13618,13747,13746,13747,13618,13618,13617,13746,13745,13746,13617,13617,13616,13745,13744,13745,13616,13616,13615,13744,13743,13744,13615,13615,13614,13743,13742,13743,13614,13614,13613,13742,13741,13742,13613,13613,13612,13741,13740,13741,13612,13612,13611,13740,13739,13740,13611,13611,13610,13739,13738,13739,13610,13610,13609,13738,13737,13738,13609,13609,13608,13737,13736,13737,13608,13608,13607,13736,13735,13736,13607,13607,13606,13735,13734,13735,13606,13606,13605,13734,13733,13734,13605,13605,13604,13733,13732,13733,13604,13604,13603,13732,13731,13732,13603,13603,13602,13731,13730,13731,13602,13602,13601,13730,13729,13730,13601,13601,13600,13729,13728,13729,13600,13600,13599,13728,13727,13728,13599,13599,13598,13727,13726,13727,13598,13598,13597,13726,13725,13726,13597,13597,13596,13725,13724,13725,13596,13596,13595,13724,13723,13724,13595,13595,13594,13723,13722,13723,13594,13594,13593,13722,13721,13722,13593,13593,13592,13721,13720,13721,13592,13592,13591,13720,13719,13720,13591,13591,13590,13719,13718,13719,13590,13590,13589,13718,13717,13718,13589,13589,13588,13717,13716,13717,13588,13588,13587,13716,13715,13716,13587,13587,13586,13715,13714,13715,13586,13586,13585,13714,13713,13714,13585,13585,13584,13713,13712,13713,13584,13584,13583,13712,13711,13712,13583,13583,13582,13711,13710,13711,13582,13582,13581,13710,13709,13710,13581,13581,13580,13709,13708,13709,13580,13580,13579,13708,13707,13708,13579,13579,13578,13707,13706,13707,13578,13578,13577,13706,13705,13706,13577,13577,13576,13705,13704,13705,13576,13576,13575,13704,13703,13704,13575,13575,13574,13703,13702,13703,13574,13574,13573,13702,13701,13702,13573,13573,13572,13701,13700,13701,13572,13572,13571,13700,13699,13700,13571,13571,13570,13699,13698,13699,13570,13570,13569,13698,13697,13698,13569,13569,13568,13697,13696,13697,13568,13823,13822,13951,13950,13951,13822,13822,13821,13950,13949,13950,13821,13821,13820,13949,13948,13949,13820,13820,13819,13948,13947,13948,13819,13819,13818,13947,13946,13947,13818,13818,13817,13946,13945,13946,13817,13817,13816,13945,13944,13945,13816,13816,13815,13944,13943,13944,13815,13815,13814,13943,13942,13943,13814,13814,13813,13942,13941,13942,13813,13813,13812,13941,13940,13941,13812,13812,13811,13940,13939,13940,13811,13811,13810,13939,13938,13939,13810,13810,13809,13938,13937,13938,13809,13809,13808,13937,13936,13937,13808,13808,13807,13936,13935,13936,13807,13807,13806,13935,13934,13935,13806,13806,13805,13934,13933,13934,13805,13805,13804,13933,13932,13933,13804,13804,13803,13932,13931,13932,13803,13803,13802,13931,13930,13931,13802,13802,13801,13930,13929,13930,13801,13801,13800,13929,13928,13929,13800,13800,13799,13928,13927,13928,13799,13799,13798,13927,13926,13927,13798,13798,13797,13926,13925,13926,13797,13797,13796,13925,13924,13925,13796,13796,13795,13924,13923,13924,13795,13795,13794,13923,13922,13923,13794,13794,13793,13922,13921,13922,13793,13793,13792,13921,13920,13921,13792,13792,13791,13920,13919,13920,13791,13791,13790,13919,13918,13919,13790,13790,13789,13918,13917,13918,13789,13789,13788,13917,13916,13917,13788,13788,13787,13916,13915,13916,13787,13787,13786,13915,13914,13915,13786,13786,13785,13914,13913,13914,13785,13785,13784,13913,13912,13913,13784,13784,13783,13912,13911,13912,13783,13783,13782,13911,13910,13911,13782,13782,13781,13910,13909,13910,13781,13781,13780,13909,13908,13909,13780,13780,13779,13908,13907,13908,13779,13779,13778,13907,13906,13907,13778,13778,13777,13906,13905,13906,13777,13777,13776,13905,13904,13905,13776,13776,13775,13904,13903,13904,13775,13775,13774,13903,13902,13903,13774,13774,13773,13902,13901,13902,13773,13773,13772,13901,13900,13901,13772,13772,13771,13900,13899,13900,13771,13771,13770,13899,13898,13899,13770,13770,13769,13898,13897,13898,13769,13769,13768,13897,13896,13897,13768,13768,13767,13896,13895,13896,13767,13767,13766,13895,13894,13895,13766,13766,13765,13894,13893,13894,13765,13765,13764,13893,13892,13893,13764,13764,13763,13892,13891,13892,13763,13763,13762,13891,13890,13891,13762,13762,13761,13890,13889,13890,13761,13761,13760,13889,13888,13889,13760,13760,13759,13888,13887,13888,13759,13759,13758,13887,13886,13887,13758,13758,13757,13886,13885,13886,13757,13757,13756,13885,13884,13885,13756,13756,13755,13884,13883,13884,13755,13755,13754,13883,13882,13883,13754,13754,13753,13882,13881,13882,13753,13753,13752,13881,13880,13881,13752,13752,13751,13880,13879,13880,13751,13751,13750,13879,13878,13879,13750,13750,13749,13878,13877,13878,13749,13749,13748,13877,13876,13877,13748,13748,13747,13876,13875,13876,13747,13747,13746,13875,13874,13875,13746,13746,13745,13874,13873,13874,13745,13745,13744,13873,13872,13873,13744,13744,13743,13872,13871,13872,13743,13743,13742,13871,13870,13871,13742,13742,13741,13870,13869,13870,13741,13741,13740,13869,13868,13869,13740,13740,13739,13868,13867,13868,13739,13739,13738,13867,13866,13867,13738,13738,13737,13866,13865,13866,13737,13737,13736,13865,13864,13865,13736,13736,13735,13864,13863,13864,13735,13735,13734,13863,13862,13863,13734,13734,13733,13862,13861,13862,13733,13733,13732,13861,13860,13861,13732,13732,13731,13860,13859,13860,13731,13731,13730,13859,13858,13859,13730,13730,13729,13858,13857,13858,13729,13729,13728,13857,13856,13857,13728,13728,13727,13856,13855,13856,13727,13727,13726,13855,13854,13855,13726,13726,13725,13854,13853,13854,13725,13725,13724,13853,13852,13853,13724,13724,13723,13852,13851,13852,13723,13723,13722,13851,13850,13851,13722,13722,13721,13850,13849,13850,13721,13721,13720,13849,13848,13849,13720,13720,13719,13848,13847,13848,13719,13719,13718,13847,13846,13847,13718,13718,13717,13846,13845,13846,13717,13717,13716,13845,13844,13845,13716,13716,13715,13844,13843,13844,13715,13715,13714,13843,13842,13843,13714,13714,13713,13842,13841,13842,13713,13713,13712,13841,13840,13841,13712,13712,13711,13840,13839,13840,13711,13711,13710,13839,13838,13839,13710,13710,13709,13838,13837,13838,13709,13709,13708,13837,13836,13837,13708,13708,13707,13836,13835,13836,13707,13707,13706,13835,13834,13835,13706,13706,13705,13834,13833,13834,13705,13705,13704,13833,13832,13833,13704,13704,13703,13832,13831,13832,13703,13703,13702,13831,13830,13831,13702,13702,13701,13830,13829,13830,13701,13701,13700,13829,13828,13829,13700,13700,13699,13828,13827,13828,13699,13699,13698,13827,13826,13827,13698,13698,13697,13826,13825,13826,13697,13697,13696,13825,13824,13825,13696,13951,13950,14079,14078,14079,13950,13950,13949,14078,14077,14078,13949,13949,13948,14077,14076,14077,13948,13948,13947,14076,14075,14076,13947,13947,13946,14075,14074,14075,13946,13946,13945,14074,14073,14074,13945,13945,13944,14073,14072,14073,13944,13944,13943,14072,14071,14072,13943,13943,13942,14071,14070,14071,13942,13942,13941,14070,14069,14070,13941,13941,13940,14069,14068,14069,13940,13940,13939,14068,14067,14068,13939,13939,13938,14067,14066,14067,13938,13938,13937,14066,14065,14066,13937,13937,13936,14065,14064,14065,13936,13936,13935,14064,14063,14064,13935,13935,13934,14063,14062,14063,13934,13934,13933,14062,14061,14062,13933,13933,13932,14061,14060,14061,13932,13932,13931,14060,14059,14060,13931,13931,13930,14059,14058,14059,13930,13930,13929,14058,14057,14058,13929,13929,13928,14057,14056,14057,13928,13928,13927,14056,14055,14056,13927,13927,13926,14055,14054,14055,13926,13926,13925,14054,14053,14054,13925,13925,13924,14053,14052,14053,13924,13924,13923,14052,14051,14052,13923,13923,13922,14051,14050,14051,13922,13922,13921,14050,14049,14050,13921,13921,13920,14049,14048,14049,13920,13920,13919,14048,14047,14048,13919,13919,13918,14047,14046,14047,13918,13918,13917,14046,14045,14046,13917,13917,13916,14045,14044,14045,13916,13916,13915,14044,14043,14044,13915,13915,13914,14043,14042,14043,13914,13914,13913,14042,14041,14042,13913,13913,13912,14041,14040,14041,13912,13912,13911,14040,14039,14040,13911,13911,13910,14039,14038,14039,13910,13910,13909,14038,14037,14038,13909,13909,13908,14037,14036,14037,13908,13908,13907,14036,14035,14036,13907,13907,13906,14035,14034,14035,13906,13906,13905,14034,14033,14034,13905,13905,13904,14033,14032,14033,13904,13904,13903,14032,14031,14032,13903,13903,13902,14031,14030,14031,13902,13902,13901,14030,14029,14030,13901,13901,13900,14029,14028,14029,13900,13900,13899,14028,14027,14028,13899,13899,13898,14027,14026,14027,13898,13898,13897,14026,14025,14026,13897,13897,13896,14025,14024,14025,13896,13896,13895,14024,14023,14024,13895,13895,13894,14023,14022,14023,13894,13894,13893,14022,14021,14022,13893,13893,13892,14021,14020,14021,13892,13892,13891,14020,14019,14020,13891,13891,13890,14019,14018,14019,13890,13890,13889,14018,14017,14018,13889,13889,13888,14017,14016,14017,13888,13888,13887,14016,14015,14016,13887,13887,13886,14015,14014,14015,13886,13886,13885,14014,14013,14014,13885,13885,13884,14013,14012,14013,13884,13884,13883,14012,14011,14012,13883,13883,13882,14011,14010,14011,13882,13882,13881,14010,14009,14010,13881,13881,13880,14009,14008,14009,13880,13880,13879,14008,14007,14008,13879,13879,13878,14007,14006,14007,13878,13878,13877,14006,14005,14006,13877,13877,13876,14005,14004,14005,13876,13876,13875,14004,14003,14004,13875,13875,13874,14003,14002,14003,13874,13874,13873,14002,14001,14002,13873,13873,13872,14001,14000,14001,13872,13872,13871,14000,13999,14000,13871,13871,13870,13999,13998,13999,13870,13870,13869,13998,13997,13998,13869,13869,13868,13997,13996,13997,13868,13868,13867,13996,13995,13996,13867,13867,13866,13995,13994,13995,13866,13866,13865,13994,13993,13994,13865,13865,13864,13993,13992,13993,13864,13864,13863,13992,13991,13992,13863,13863,13862,13991,13990,13991,13862,13862,13861,13990,13989,13990,13861,13861,13860,13989,13988,13989,13860,13860,13859,13988,13987,13988,13859,13859,13858,13987,13986,13987,13858,13858,13857,13986,13985,13986,13857,13857,13856,13985,13984,13985,13856,13856,13855,13984,13983,13984,13855,13855,13854,13983,13982,13983,13854,13854,13853,13982,13981,13982,13853,13853,13852,13981,13980,13981,13852,13852,13851,13980,13979,13980,13851,13851,13850,13979,13978,13979,13850,13850,13849,13978,13977,13978,13849,13849,13848,13977,13976,13977,13848,13848,13847,13976,13975,13976,13847,13847,13846,13975,13974,13975,13846,13846,13845,13974,13973,13974,13845,13845,13844,13973,13972,13973,13844,13844,13843,13972,13971,13972,13843,13843,13842,13971,13970,13971,13842,13842,13841,13970,13969,13970,13841,13841,13840,13969,13968,13969,13840,13840,13839,13968,13967,13968,13839,13839,13838,13967,13966,13967,13838,13838,13837,13966,13965,13966,13837,13837,13836,13965,13964,13965,13836,13836,13835,13964,13963,13964,13835,13835,13834,13963,13962,13963,13834,13834,13833,13962,13961,13962,13833,13833,13832,13961,13960,13961,13832,13832,13831,13960,13959,13960,13831,13831,13830,13959,13958,13959,13830,13830,13829,13958,13957,13958,13829,13829,13828,13957,13956,13957,13828,13828,13827,13956,13955,13956,13827,13827,13826,13955,13954,13955,13826,13826,13825,13954,13953,13954,13825,13825,13824,13953,13952,13953,13824,14079,14078,14207,14206,14207,14078,14078,14077,14206,14205,14206,14077,14077,14076,14205,14204,14205,14076,14076,14075,14204,14203,14204,14075,14075,14074,14203,14202,14203,14074,14074,14073,14202,14201,14202,14073,14073,14072,14201,14200,14201,14072,14072,14071,14200,14199,14200,14071,14071,14070,14199,14198,14199,14070,14070,14069,14198,14197,14198,14069,14069,14068,14197,14196,14197,14068,14068,14067,14196,14195,14196,14067,14067,14066,14195,14194,14195,14066,14066,14065,14194,14193,14194,14065,14065,14064,14193,14192,14193,14064,14064,14063,14192,14191,14192,14063,14063,14062,14191,14190,14191,14062,14062,14061,14190,14189,14190,14061,14061,14060,14189,14188,14189,14060,14060,14059,14188,14187,14188,14059,14059,14058,14187,14186,14187,14058,14058,14057,14186,14185,14186,14057,14057,14056,14185,14184,14185,14056,14056,14055,14184,14183,14184,14055,14055,14054,14183,14182,14183,14054,14054,14053,14182,14181,14182,14053,14053,14052,14181,14180,14181,14052,14052,14051,14180,14179,14180,14051,14051,14050,14179,14178,14179,14050,14050,14049,14178,14177,14178,14049,14049,14048,14177,14176,14177,14048,14048,14047,14176,14175,14176,14047,14047,14046,14175,14174,14175,14046,14046,14045,14174,14173,14174,14045,14045,14044,14173,14172,14173,14044,14044,14043,14172,14171,14172,14043,14043,14042,14171,14170,14171,14042,14042,14041,14170,14169,14170,14041,14041,14040,14169,14168,14169,14040,14040,14039,14168,14167,14168,14039,14039,14038,14167,14166,14167,14038,14038,14037,14166,14165,14166,14037,14037,14036,14165,14164,14165,14036,14036,14035,14164,14163,14164,14035,14035,14034,14163,14162,14163,14034,14034,14033,14162,14161,14162,14033,14033,14032,14161,14160,14161,14032,14032,14031,14160,14159,14160,14031,14031,14030,14159,14158,14159,14030,14030,14029,14158,14157,14158,14029,14029,14028,14157,14156,14157,14028,14028,14027,14156,14155,14156,14027,14027,14026,14155,14154,14155,14026,14026,14025,14154,14153,14154,14025,14025,14024,14153,14152,14153,14024,14024,14023,14152,14151,14152,14023,14023,14022,14151,14150,14151,14022,14022,14021,14150,14149,14150,14021,14021,14020,14149,14148,14149,14020,14020,14019,14148,14147,14148,14019,14019,14018,14147,14146,14147,14018,14018,14017,14146,14145,14146,14017,14017,14016,14145,14144,14145,14016,14016,14015,14144,14143,14144,14015,14015,14014,14143,14142,14143,14014,14014,14013,14142,14141,14142,14013,14013,14012,14141,14140,14141,14012,14012,14011,14140,14139,14140,14011,14011,14010,14139,14138,14139,14010,14010,14009,14138,14137,14138,14009,14009,14008,14137,14136,14137,14008,14008,14007,14136,14135,14136,14007,14007,14006,14135,14134,14135,14006,14006,14005,14134,14133,14134,14005,14005,14004,14133,14132,14133,14004,14004,14003,14132,14131,14132,14003,14003,14002,14131,14130,14131,14002,14002,14001,14130,14129,14130,14001,14001,14000,14129,14128,14129,14000,14000,13999,14128,14127,14128,13999,13999,13998,14127,14126,14127,13998,13998,13997,14126,14125,14126,13997,13997,13996,14125,14124,14125,13996,13996,13995,14124,14123,14124,13995,13995,13994,14123,14122,14123,13994,13994,13993,14122,14121,14122,13993,13993,13992,14121,14120,14121,13992,13992,13991,14120,14119,14120,13991,13991,13990,14119,14118,14119,13990,13990,13989,14118,14117,14118,13989,13989,13988,14117,14116,14117,13988,13988,13987,14116,14115,14116,13987,13987,13986,14115,14114,14115,13986,13986,13985,14114,14113,14114,13985,13985,13984,14113,14112,14113,13984,13984,13983,14112,14111,14112,13983,13983,13982,14111,14110,14111,13982,13982,13981,14110,14109,14110,13981,13981,13980,14109,14108,14109,13980,13980,13979,14108,14107,14108,13979,13979,13978,14107,14106,14107,13978,13978,13977,14106,14105,14106,13977,13977,13976,14105,14104,14105,13976,13976,13975,14104,14103,14104,13975,13975,13974,14103,14102,14103,13974,13974,13973,14102,14101,14102,13973,13973,13972,14101,14100,14101,13972,13972,13971,14100,14099,14100,13971,13971,13970,14099,14098,14099,13970,13970,13969,14098,14097,14098,13969,13969,13968,14097,14096,14097,13968,13968,13967,14096,14095,14096,13967,13967,13966,14095,14094,14095,13966,13966,13965,14094,14093,14094,13965,13965,13964,14093,14092,14093,13964,13964,13963,14092,14091,14092,13963,13963,13962,14091,14090,14091,13962,13962,13961,14090,14089,14090,13961,13961,13960,14089,14088,14089,13960,13960,13959,14088,14087,14088,13959,13959,13958,14087,14086,14087,13958,13958,13957,14086,14085,14086,13957,13957,13956,14085,14084,14085,13956,13956,13955,14084,14083,14084,13955,13955,13954,14083,14082,14083,13954,13954,13953,14082,14081,14082,13953,13953,13952,14081,14080,14081,13952,14207,14206,14335,14334,14335,14206,14206,14205,14334,14333,14334,14205,14205,14204,14333,14332,14333,14204,14204,14203,14332,14331,14332,14203,14203,14202,14331,14330,14331,14202,14202,14201,14330,14329,14330,14201,14201,14200,14329,14328,14329,14200,14200,14199,14328,14327,14328,14199,14199,14198,14327,14326,14327,14198,14198,14197,14326,14325,14326,14197,14197,14196,14325,14324,14325,14196,14196,14195,14324,14323,14324,14195,14195,14194,14323,14322,14323,14194,14194,14193,14322,14321,14322,14193,14193,14192,14321,14320,14321,14192,14192,14191,14320,14319,14320,14191,14191,14190,14319,14318,14319,14190,14190,14189,14318,14317,14318,14189,14189,14188,14317,14316,14317,14188,14188,14187,14316,14315,14316,14187,14187,14186,14315,14314,14315,14186,14186,14185,14314,14313,14314,14185,14185,14184,14313,14312,14313,14184,14184,14183,14312,14311,14312,14183,14183,14182,14311,14310,14311,14182,14182,14181,14310,14309,14310,14181,14181,14180,14309,14308,14309,14180,14180,14179,14308,14307,14308,14179,14179,14178,14307,14306,14307,14178,14178,14177,14306,14305,14306,14177,14177,14176,14305,14304,14305,14176,14176,14175,14304,14303,14304,14175,14175,14174,14303,14302,14303,14174,14174,14173,14302,14301,14302,14173,14173,14172,14301,14300,14301,14172,14172,14171,14300,14299,14300,14171,14171,14170,14299,14298,14299,14170,14170,14169,14298,14297,14298,14169,14169,14168,14297,14296,14297,14168,14168,14167,14296,14295,14296,14167,14167,14166,14295,14294,14295,14166,14166,14165,14294,14293,14294,14165,14165,14164,14293,14292,14293,14164,14164,14163,14292,14291,14292,14163,14163,14162,14291,14290,14291,14162,14162,14161,14290,14289,14290,14161,14161,14160,14289,14288,14289,14160,14160,14159,14288,14287,14288,14159,14159,14158,14287,14286,14287,14158,14158,14157,14286,14285,14286,14157,14157,14156,14285,14284,14285,14156,14156,14155,14284,14283,14284,14155,14155,14154,14283,14282,14283,14154,14154,14153,14282,14281,14282,14153,14153,14152,14281,14280,14281,14152,14152,14151,14280,14279,14280,14151,14151,14150,14279,14278,14279,14150,14150,14149,14278,14277,14278,14149,14149,14148,14277,14276,14277,14148,14148,14147,14276,14275,14276,14147,14147,14146,14275,14274,14275,14146,14146,14145,14274,14273,14274,14145,14145,14144,14273,14272,14273,14144,14144,14143,14272,14271,14272,14143,14143,14142,14271,14270,14271,14142,14142,14141,14270,14269,14270,14141,14141,14140,14269,14268,14269,14140,14140,14139,14268,14267,14268,14139,14139,14138,14267,14266,14267,14138,14138,14137,14266,14265,14266,14137,14137,14136,14265,14264,14265,14136,14136,14135,14264,14263,14264,14135,14135,14134,14263,14262,14263,14134,14134,14133,14262,14261,14262,14133,14133,14132,14261,14260,14261,14132,14132,14131,14260,14259,14260,14131,14131,14130,14259,14258,14259,14130,14130,14129,14258,14257,14258,14129,14129,14128,14257,14256,14257,14128,14128,14127,14256,14255,14256,14127,14127,14126,14255,14254,14255,14126,14126,14125,14254,14253,14254,14125,14125,14124,14253,14252,14253,14124,14124,14123,14252,14251,14252,14123,14123,14122,14251,14250,14251,14122,14122,14121,14250,14249,14250,14121,14121,14120,14249,14248,14249,14120,14120,14119,14248,14247,14248,14119,14119,14118,14247,14246,14247,14118,14118,14117,14246,14245,14246,14117,14117,14116,14245,14244,14245,14116,14116,14115,14244,14243,14244,14115,14115,14114,14243,14242,14243,14114,14114,14113,14242,14241,14242,14113,14113,14112,14241,14240,14241,14112,14112,14111,14240,14239,14240,14111,14111,14110,14239,14238,14239,14110,14110,14109,14238,14237,14238,14109,14109,14108,14237,14236,14237,14108,14108,14107,14236,14235,14236,14107,14107,14106,14235,14234,14235,14106,14106,14105,14234,14233,14234,14105,14105,14104,14233,14232,14233,14104,14104,14103,14232,14231,14232,14103,14103,14102,14231,14230,14231,14102,14102,14101,14230,14229,14230,14101,14101,14100,14229,14228,14229,14100,14100,14099,14228,14227,14228,14099,14099,14098,14227,14226,14227,14098,14098,14097,14226,14225,14226,14097,14097,14096,14225,14224,14225,14096,14096,14095,14224,14223,14224,14095,14095,14094,14223,14222,14223,14094,14094,14093,14222,14221,14222,14093,14093,14092,14221,14220,14221,14092,14092,14091,14220,14219,14220,14091,14091,14090,14219,14218,14219,14090,14090,14089,14218,14217,14218,14089,14089,14088,14217,14216,14217,14088,14088,14087,14216,14215,14216,14087,14087,14086,14215,14214,14215,14086,14086,14085,14214,14213,14214,14085,14085,14084,14213,14212,14213,14084,14084,14083,14212,14211,14212,14083,14083,14082,14211,14210,14211,14082,14082,14081,14210,14209,14210,14081,14081,14080,14209,14208,14209,14080,14335,14334,14463,14462,14463,14334,14334,14333,14462,14461,14462,14333,14333,14332,14461,14460,14461,14332,14332,14331,14460,14459,14460,14331,14331,14330,14459,14458,14459,14330,14330,14329,14458,14457,14458,14329,14329,14328,14457,14456,14457,14328,14328,14327,14456,14455,14456,14327,14327,14326,14455,14454,14455,14326,14326,14325,14454,14453,14454,14325,14325,14324,14453,14452,14453,14324,14324,14323,14452,14451,14452,14323,14323,14322,14451,14450,14451,14322,14322,14321,14450,14449,14450,14321,14321,14320,14449,14448,14449,14320,14320,14319,14448,14447,14448,14319,14319,14318,14447,14446,14447,14318,14318,14317,14446,14445,14446,14317,14317,14316,14445,14444,14445,14316,14316,14315,14444,14443,14444,14315,14315,14314,14443,14442,14443,14314,14314,14313,14442,14441,14442,14313,14313,14312,14441,14440,14441,14312,14312,14311,14440,14439,14440,14311,14311,14310,14439,14438,14439,14310,14310,14309,14438,14437,14438,14309,14309,14308,14437,14436,14437,14308,14308,14307,14436,14435,14436,14307,14307,14306,14435,14434,14435,14306,14306,14305,14434,14433,14434,14305,14305,14304,14433,14432,14433,14304,14304,14303,14432,14431,14432,14303,14303,14302,14431,14430,14431,14302,14302,14301,14430,14429,14430,14301,14301,14300,14429,14428,14429,14300,14300,14299,14428,14427,14428,14299,14299,14298,14427,14426,14427,14298,14298,14297,14426,14425,14426,14297,14297,14296,14425,14424,14425,14296,14296,14295,14424,14423,14424,14295,14295,14294,14423,14422,14423,14294,14294,14293,14422,14421,14422,14293,14293,14292,14421,14420,14421,14292,14292,14291,14420,14419,14420,14291,14291,14290,14419,14418,14419,14290,14290,14289,14418,14417,14418,14289,14289,14288,14417,14416,14417,14288,14288,14287,14416,14415,14416,14287,14287,14286,14415,14414,14415,14286,14286,14285,14414,14413,14414,14285,14285,14284,14413,14412,14413,14284,14284,14283,14412,14411,14412,14283,14283,14282,14411,14410,14411,14282,14282,14281,14410,14409,14410,14281,14281,14280,14409,14408,14409,14280,14280,14279,14408,14407,14408,14279,14279,14278,14407,14406,14407,14278,14278,14277,14406,14405,14406,14277,14277,14276,14405,14404,14405,14276,14276,14275,14404,14403,14404,14275,14275,14274,14403,14402,14403,14274,14274,14273,14402,14401,14402,14273,14273,14272,14401,14400,14401,14272,14272,14271,14400,14399,14400,14271,14271,14270,14399,14398,14399,14270,14270,14269,14398,14397,14398,14269,14269,14268,14397,14396,14397,14268,14268,14267,14396,14395,14396,14267,14267,14266,14395,14394,14395,14266,14266,14265,14394,14393,14394,14265,14265,14264,14393,14392,14393,14264,14264,14263,14392,14391,14392,14263,14263,14262,14391,14390,14391,14262,14262,14261,14390,14389,14390,14261,14261,14260,14389,14388,14389,14260,14260,14259,14388,14387,14388,14259,14259,14258,14387,14386,14387,14258,14258,14257,14386,14385,14386,14257,14257,14256,14385,14384,14385,14256,14256,14255,14384,14383,14384,14255,14255,14254,14383,14382,14383,14254,14254,14253,14382,14381,14382,14253,14253,14252,14381,14380,14381,14252,14252,14251,14380,14379,14380,14251,14251,14250,14379,14378,14379,14250,14250,14249,14378,14377,14378,14249,14249,14248,14377,14376,14377,14248,14248,14247,14376,14375,14376,14247,14247,14246,14375,14374,14375,14246,14246,14245,14374,14373,14374,14245,14245,14244,14373,14372,14373,14244,14244,14243,14372,14371,14372,14243,14243,14242,14371,14370,14371,14242,14242,14241,14370,14369,14370,14241,14241,14240,14369,14368,14369,14240,14240,14239,14368,14367,14368,14239,14239,14238,14367,14366,14367,14238,14238,14237,14366,14365,14366,14237,14237,14236,14365,14364,14365,14236,14236,14235,14364,14363,14364,14235,14235,14234,14363,14362,14363,14234,14234,14233,14362,14361,14362,14233,14233,14232,14361,14360,14361,14232,14232,14231,14360,14359,14360,14231,14231,14230,14359,14358,14359,14230,14230,14229,14358,14357,14358,14229,14229,14228,14357,14356,14357,14228,14228,14227,14356,14355,14356,14227,14227,14226,14355,14354,14355,14226,14226,14225,14354,14353,14354,14225,14225,14224,14353,14352,14353,14224,14224,14223,14352,14351,14352,14223,14223,14222,14351,14350,14351,14222,14222,14221,14350,14349,14350,14221,14221,14220,14349,14348,14349,14220,14220,14219,14348,14347,14348,14219,14219,14218,14347,14346,14347,14218,14218,14217,14346,14345,14346,14217,14217,14216,14345,14344,14345,14216,14216,14215,14344,14343,14344,14215,14215,14214,14343,14342,14343,14214,14214,14213,14342,14341,14342,14213,14213,14212,14341,14340,14341,14212,14212,14211,14340,14339,14340,14211,14211,14210,14339,14338,14339,14210,14210,14209,14338,14337,14338,14209,14209,14208,14337,14336,14337,14208,14463,14462,14591,14590,14591,14462,14462,14461,14590,14589,14590,14461,14461,14460,14589,14588,14589,14460,14460,14459,14588,14587,14588,14459,14459,14458,14587,14586,14587,14458,14458,14457,14586,14585,14586,14457,14457,14456,14585,14584,14585,14456,14456,14455,14584,14583,14584,14455,14455,14454,14583,14582,14583,14454,14454,14453,14582,14581,14582,14453,14453,14452,14581,14580,14581,14452,14452,14451,14580,14579,14580,14451,14451,14450,14579,14578,14579,14450,14450,14449,14578,14577,14578,14449,14449,14448,14577,14576,14577,14448,14448,14447,14576,14575,14576,14447,14447,14446,14575,14574,14575,14446,14446,14445,14574,14573,14574,14445,14445,14444,14573,14572,14573,14444,14444,14443,14572,14571,14572,14443,14443,14442,14571,14570,14571,14442,14442,14441,14570,14569,14570,14441,14441,14440,14569,14568,14569,14440,14440,14439,14568,14567,14568,14439,14439,14438,14567,14566,14567,14438,14438,14437,14566,14565,14566,14437,14437,14436,14565,14564,14565,14436,14436,14435,14564,14563,14564,14435,14435,14434,14563,14562,14563,14434,14434,14433,14562,14561,14562,14433,14433,14432,14561,14560,14561,14432,14432,14431,14560,14559,14560,14431,14431,14430,14559,14558,14559,14430,14430,14429,14558,14557,14558,14429,14429,14428,14557,14556,14557,14428,14428,14427,14556,14555,14556,14427,14427,14426,14555,14554,14555,14426,14426,14425,14554,14553,14554,14425,14425,14424,14553,14552,14553,14424,14424,14423,14552,14551,14552,14423,14423,14422,14551,14550,14551,14422,14422,14421,14550,14549,14550,14421,14421,14420,14549,14548,14549,14420,14420,14419,14548,14547,14548,14419,14419,14418,14547,14546,14547,14418,14418,14417,14546,14545,14546,14417,14417,14416,14545,14544,14545,14416,14416,14415,14544,14543,14544,14415,14415,14414,14543,14542,14543,14414,14414,14413,14542,14541,14542,14413,14413,14412,14541,14540,14541,14412,14412,14411,14540,14539,14540,14411,14411,14410,14539,14538,14539,14410,14410,14409,14538,14537,14538,14409,14409,14408,14537,14536,14537,14408,14408,14407,14536,14535,14536,14407,14407,14406,14535,14534,14535,14406,14406,14405,14534,14533,14534,14405,14405,14404,14533,14532,14533,14404,14404,14403,14532,14531,14532,14403,14403,14402,14531,14530,14531,14402,14402,14401,14530,14529,14530,14401,14401,14400,14529,14528,14529,14400,14400,14399,14528,14527,14528,14399,14399,14398,14527,14526,14527,14398,14398,14397,14526,14525,14526,14397,14397,14396,14525,14524,14525,14396,14396,14395,14524,14523,14524,14395,14395,14394,14523,14522,14523,14394,14394,14393,14522,14521,14522,14393,14393,14392,14521,14520,14521,14392,14392,14391,14520,14519,14520,14391,14391,14390,14519,14518,14519,14390,14390,14389,14518,14517,14518,14389,14389,14388,14517,14516,14517,14388,14388,14387,14516,14515,14516,14387,14387,14386,14515,14514,14515,14386,14386,14385,14514,14513,14514,14385,14385,14384,14513,14512,14513,14384,14384,14383,14512,14511,14512,14383,14383,14382,14511,14510,14511,14382,14382,14381,14510,14509,14510,14381,14381,14380,14509,14508,14509,14380,14380,14379,14508,14507,14508,14379,14379,14378,14507,14506,14507,14378,14378,14377,14506,14505,14506,14377,14377,14376,14505,14504,14505,14376,14376,14375,14504,14503,14504,14375,14375,14374,14503,14502,14503,14374,14374,14373,14502,14501,14502,14373,14373,14372,14501,14500,14501,14372,14372,14371,14500,14499,14500,14371,14371,14370,14499,14498,14499,14370,14370,14369,14498,14497,14498,14369,14369,14368,14497,14496,14497,14368,14368,14367,14496,14495,14496,14367,14367,14366,14495,14494,14495,14366,14366,14365,14494,14493,14494,14365,14365,14364,14493,14492,14493,14364,14364,14363,14492,14491,14492,14363,14363,14362,14491,14490,14491,14362,14362,14361,14490,14489,14490,14361,14361,14360,14489,14488,14489,14360,14360,14359,14488,14487,14488,14359,14359,14358,14487,14486,14487,14358,14358,14357,14486,14485,14486,14357,14357,14356,14485,14484,14485,14356,14356,14355,14484,14483,14484,14355,14355,14354,14483,14482,14483,14354,14354,14353,14482,14481,14482,14353,14353,14352,14481,14480,14481,14352,14352,14351,14480,14479,14480,14351,14351,14350,14479,14478,14479,14350,14350,14349,14478,14477,14478,14349,14349,14348,14477,14476,14477,14348,14348,14347,14476,14475,14476,14347,14347,14346,14475,14474,14475,14346,14346,14345,14474,14473,14474,14345,14345,14344,14473,14472,14473,14344,14344,14343,14472,14471,14472,14343,14343,14342,14471,14470,14471,14342,14342,14341,14470,14469,14470,14341,14341,14340,14469,14468,14469,14340,14340,14339,14468,14467,14468,14339,14339,14338,14467,14466,14467,14338,14338,14337,14466,14465,14466,14337,14337,14336,14465,14464,14465,14336,14591,14590,14719,14718,14719,14590,14590,14589,14718,14717,14718,14589,14589,14588,14717,14716,14717,14588,14588,14587,14716,14715,14716,14587,14587,14586,14715,14714,14715,14586,14586,14585,14714,14713,14714,14585,14585,14584,14713,14712,14713,14584,14584,14583,14712,14711,14712,14583,14583,14582,14711,14710,14711,14582,14582,14581,14710,14709,14710,14581,14581,14580,14709,14708,14709,14580,14580,14579,14708,14707,14708,14579,14579,14578,14707,14706,14707,14578,14578,14577,14706,14705,14706,14577,14577,14576,14705,14704,14705,14576,14576,14575,14704,14703,14704,14575,14575,14574,14703,14702,14703,14574,14574,14573,14702,14701,14702,14573,14573,14572,14701,14700,14701,14572,14572,14571,14700,14699,14700,14571,14571,14570,14699,14698,14699,14570,14570,14569,14698,14697,14698,14569,14569,14568,14697,14696,14697,14568,14568,14567,14696,14695,14696,14567,14567,14566,14695,14694,14695,14566,14566,14565,14694,14693,14694,14565,14565,14564,14693,14692,14693,14564,14564,14563,14692,14691,14692,14563,14563,14562,14691,14690,14691,14562,14562,14561,14690,14689,14690,14561,14561,14560,14689,14688,14689,14560,14560,14559,14688,14687,14688,14559,14559,14558,14687,14686,14687,14558,14558,14557,14686,14685,14686,14557,14557,14556,14685,14684,14685,14556,14556,14555,14684,14683,14684,14555,14555,14554,14683,14682,14683,14554,14554,14553,14682,14681,14682,14553,14553,14552,14681,14680,14681,14552,14552,14551,14680,14679,14680,14551,14551,14550,14679,14678,14679,14550,14550,14549,14678,14677,14678,14549,14549,14548,14677,14676,14677,14548,14548,14547,14676,14675,14676,14547,14547,14546,14675,14674,14675,14546,14546,14545,14674,14673,14674,14545,14545,14544,14673,14672,14673,14544,14544,14543,14672,14671,14672,14543,14543,14542,14671,14670,14671,14542,14542,14541,14670,14669,14670,14541,14541,14540,14669,14668,14669,14540,14540,14539,14668,14667,14668,14539,14539,14538,14667,14666,14667,14538,14538,14537,14666,14665,14666,14537,14537,14536,14665,14664,14665,14536,14536,14535,14664,14663,14664,14535,14535,14534,14663,14662,14663,14534,14534,14533,14662,14661,14662,14533,14533,14532,14661,14660,14661,14532,14532,14531,14660,14659,14660,14531,14531,14530,14659,14658,14659,14530,14530,14529,14658,14657,14658,14529,14529,14528,14657,14656,14657,14528,14528,14527,14656,14655,14656,14527,14527,14526,14655,14654,14655,14526,14526,14525,14654,14653,14654,14525,14525,14524,14653,14652,14653,14524,14524,14523,14652,14651,14652,14523,14523,14522,14651,14650,14651,14522,14522,14521,14650,14649,14650,14521,14521,14520,14649,14648,14649,14520,14520,14519,14648,14647,14648,14519,14519,14518,14647,14646,14647,14518,14518,14517,14646,14645,14646,14517,14517,14516,14645,14644,14645,14516,14516,14515,14644,14643,14644,14515,14515,14514,14643,14642,14643,14514,14514,14513,14642,14641,14642,14513,14513,14512,14641,14640,14641,14512,14512,14511,14640,14639,14640,14511,14511,14510,14639,14638,14639,14510,14510,14509,14638,14637,14638,14509,14509,14508,14637,14636,14637,14508,14508,14507,14636,14635,14636,14507,14507,14506,14635,14634,14635,14506,14506,14505,14634,14633,14634,14505,14505,14504,14633,14632,14633,14504,14504,14503,14632,14631,14632,14503,14503,14502,14631,14630,14631,14502,14502,14501,14630,14629,14630,14501,14501,14500,14629,14628,14629,14500,14500,14499,14628,14627,14628,14499,14499,14498,14627,14626,14627,14498,14498,14497,14626,14625,14626,14497,14497,14496,14625,14624,14625,14496,14496,14495,14624,14623,14624,14495,14495,14494,14623,14622,14623,14494,14494,14493,14622,14621,14622,14493,14493,14492,14621,14620,14621,14492,14492,14491,14620,14619,14620,14491,14491,14490,14619,14618,14619,14490,14490,14489,14618,14617,14618,14489,14489,14488,14617,14616,14617,14488,14488,14487,14616,14615,14616,14487,14487,14486,14615,14614,14615,14486,14486,14485,14614,14613,14614,14485,14485,14484,14613,14612,14613,14484,14484,14483,14612,14611,14612,14483,14483,14482,14611,14610,14611,14482,14482,14481,14610,14609,14610,14481,14481,14480,14609,14608,14609,14480,14480,14479,14608,14607,14608,14479,14479,14478,14607,14606,14607,14478,14478,14477,14606,14605,14606,14477,14477,14476,14605,14604,14605,14476,14476,14475,14604,14603,14604,14475,14475,14474,14603,14602,14603,14474,14474,14473,14602,14601,14602,14473,14473,14472,14601,14600,14601,14472,14472,14471,14600,14599,14600,14471,14471,14470,14599,14598,14599,14470,14470,14469,14598,14597,14598,14469,14469,14468,14597,14596,14597,14468,14468,14467,14596,14595,14596,14467,14467,14466,14595,14594,14595,14466,14466,14465,14594,14593,14594,14465,14465,14464,14593,14592,14593,14464,14719,14718,14847,14846,14847,14718,14718,14717,14846,14845,14846,14717,14717,14716,14845,14844,14845,14716,14716,14715,14844,14843,14844,14715,14715,14714,14843,14842,14843,14714,14714,14713,14842,14841,14842,14713,14713,14712,14841,14840,14841,14712,14712,14711,14840,14839,14840,14711,14711,14710,14839,14838,14839,14710,14710,14709,14838,14837,14838,14709,14709,14708,14837,14836,14837,14708,14708,14707,14836,14835,14836,14707,14707,14706,14835,14834,14835,14706,14706,14705,14834,14833,14834,14705,14705,14704,14833,14832,14833,14704,14704,14703,14832,14831,14832,14703,14703,14702,14831,14830,14831,14702,14702,14701,14830,14829,14830,14701,14701,14700,14829,14828,14829,14700,14700,14699,14828,14827,14828,14699,14699,14698,14827,14826,14827,14698,14698,14697,14826,14825,14826,14697,14697,14696,14825,14824,14825,14696,14696,14695,14824,14823,14824,14695,14695,14694,14823,14822,14823,14694,14694,14693,14822,14821,14822,14693,14693,14692,14821,14820,14821,14692,14692,14691,14820,14819,14820,14691,14691,14690,14819,14818,14819,14690,14690,14689,14818,14817,14818,14689,14689,14688,14817,14816,14817,14688,14688,14687,14816,14815,14816,14687,14687,14686,14815,14814,14815,14686,14686,14685,14814,14813,14814,14685,14685,14684,14813,14812,14813,14684,14684,14683,14812,14811,14812,14683,14683,14682,14811,14810,14811,14682,14682,14681,14810,14809,14810,14681,14681,14680,14809,14808,14809,14680,14680,14679,14808,14807,14808,14679,14679,14678,14807,14806,14807,14678,14678,14677,14806,14805,14806,14677,14677,14676,14805,14804,14805,14676,14676,14675,14804,14803,14804,14675,14675,14674,14803,14802,14803,14674,14674,14673,14802,14801,14802,14673,14673,14672,14801,14800,14801,14672,14672,14671,14800,14799,14800,14671,14671,14670,14799,14798,14799,14670,14670,14669,14798,14797,14798,14669,14669,14668,14797,14796,14797,14668,14668,14667,14796,14795,14796,14667,14667,14666,14795,14794,14795,14666,14666,14665,14794,14793,14794,14665,14665,14664,14793,14792,14793,14664,14664,14663,14792,14791,14792,14663,14663,14662,14791,14790,14791,14662,14662,14661,14790,14789,14790,14661,14661,14660,14789,14788,14789,14660,14660,14659,14788,14787,14788,14659,14659,14658,14787,14786,14787,14658,14658,14657,14786,14785,14786,14657,14657,14656,14785,14784,14785,14656,14656,14655,14784,14783,14784,14655,14655,14654,14783,14782,14783,14654,14654,14653,14782,14781,14782,14653,14653,14652,14781,14780,14781,14652,14652,14651,14780,14779,14780,14651,14651,14650,14779,14778,14779,14650,14650,14649,14778,14777,14778,14649,14649,14648,14777,14776,14777,14648,14648,14647,14776,14775,14776,14647,14647,14646,14775,14774,14775,14646,14646,14645,14774,14773,14774,14645,14645,14644,14773,14772,14773,14644,14644,14643,14772,14771,14772,14643,14643,14642,14771,14770,14771,14642,14642,14641,14770,14769,14770,14641,14641,14640,14769,14768,14769,14640,14640,14639,14768,14767,14768,14639,14639,14638,14767,14766,14767,14638,14638,14637,14766,14765,14766,14637,14637,14636,14765,14764,14765,14636,14636,14635,14764,14763,14764,14635,14635,14634,14763,14762,14763,14634,14634,14633,14762,14761,14762,14633,14633,14632,14761,14760,14761,14632,14632,14631,14760,14759,14760,14631,14631,14630,14759,14758,14759,14630,14630,14629,14758,14757,14758,14629,14629,14628,14757,14756,14757,14628,14628,14627,14756,14755,14756,14627,14627,14626,14755,14754,14755,14626,14626,14625,14754,14753,14754,14625,14625,14624,14753,14752,14753,14624,14624,14623,14752,14751,14752,14623,14623,14622,14751,14750,14751,14622,14622,14621,14750,14749,14750,14621,14621,14620,14749,14748,14749,14620,14620,14619,14748,14747,14748,14619,14619,14618,14747,14746,14747,14618,14618,14617,14746,14745,14746,14617,14617,14616,14745,14744,14745,14616,14616,14615,14744,14743,14744,14615,14615,14614,14743,14742,14743,14614,14614,14613,14742,14741,14742,14613,14613,14612,14741,14740,14741,14612,14612,14611,14740,14739,14740,14611,14611,14610,14739,14738,14739,14610,14610,14609,14738,14737,14738,14609,14609,14608,14737,14736,14737,14608,14608,14607,14736,14735,14736,14607,14607,14606,14735,14734,14735,14606,14606,14605,14734,14733,14734,14605,14605,14604,14733,14732,14733,14604,14604,14603,14732,14731,14732,14603,14603,14602,14731,14730,14731,14602,14602,14601,14730,14729,14730,14601,14601,14600,14729,14728,14729,14600,14600,14599,14728,14727,14728,14599,14599,14598,14727,14726,14727,14598,14598,14597,14726,14725,14726,14597,14597,14596,14725,14724,14725,14596,14596,14595,14724,14723,14724,14595,14595,14594,14723,14722,14723,14594,14594,14593,14722,14721,14722,14593,14593,14592,14721,14720,14721,14592,14847,14846,14975,14974,14975,14846,14846,14845,14974,14973,14974,14845,14845,14844,14973,14972,14973,14844,14844,14843,14972,14971,14972,14843,14843,14842,14971,14970,14971,14842,14842,14841,14970,14969,14970,14841,14841,14840,14969,14968,14969,14840,14840,14839,14968,14967,14968,14839,14839,14838,14967,14966,14967,14838,14838,14837,14966,14965,14966,14837,14837,14836,14965,14964,14965,14836,14836,14835,14964,14963,14964,14835,14835,14834,14963,14962,14963,14834,14834,14833,14962,14961,14962,14833,14833,14832,14961,14960,14961,14832,14832,14831,14960,14959,14960,14831,14831,14830,14959,14958,14959,14830,14830,14829,14958,14957,14958,14829,14829,14828,14957,14956,14957,14828,14828,14827,14956,14955,14956,14827,14827,14826,14955,14954,14955,14826,14826,14825,14954,14953,14954,14825,14825,14824,14953,14952,14953,14824,14824,14823,14952,14951,14952,14823,14823,14822,14951,14950,14951,14822,14822,14821,14950,14949,14950,14821,14821,14820,14949,14948,14949,14820,14820,14819,14948,14947,14948,14819,14819,14818,14947,14946,14947,14818,14818,14817,14946,14945,14946,14817,14817,14816,14945,14944,14945,14816,14816,14815,14944,14943,14944,14815,14815,14814,14943,14942,14943,14814,14814,14813,14942,14941,14942,14813,14813,14812,14941,14940,14941,14812,14812,14811,14940,14939,14940,14811,14811,14810,14939,14938,14939,14810,14810,14809,14938,14937,14938,14809,14809,14808,14937,14936,14937,14808,14808,14807,14936,14935,14936,14807,14807,14806,14935,14934,14935,14806,14806,14805,14934,14933,14934,14805,14805,14804,14933,14932,14933,14804,14804,14803,14932,14931,14932,14803,14803,14802,14931,14930,14931,14802,14802,14801,14930,14929,14930,14801,14801,14800,14929,14928,14929,14800,14800,14799,14928,14927,14928,14799,14799,14798,14927,14926,14927,14798,14798,14797,14926,14925,14926,14797,14797,14796,14925,14924,14925,14796,14796,14795,14924,14923,14924,14795,14795,14794,14923,14922,14923,14794,14794,14793,14922,14921,14922,14793,14793,14792,14921,14920,14921,14792,14792,14791,14920,14919,14920,14791,14791,14790,14919,14918,14919,14790,14790,14789,14918,14917,14918,14789,14789,14788,14917,14916,14917,14788,14788,14787,14916,14915,14916,14787,14787,14786,14915,14914,14915,14786,14786,14785,14914,14913,14914,14785,14785,14784,14913,14912,14913,14784,14784,14783,14912,14911,14912,14783,14783,14782,14911,14910,14911,14782,14782,14781,14910,14909,14910,14781,14781,14780,14909,14908,14909,14780,14780,14779,14908,14907,14908,14779,14779,14778,14907,14906,14907,14778,14778,14777,14906,14905,14906,14777,14777,14776,14905,14904,14905,14776,14776,14775,14904,14903,14904,14775,14775,14774,14903,14902,14903,14774,14774,14773,14902,14901,14902,14773,14773,14772,14901,14900,14901,14772,14772,14771,14900,14899,14900,14771,14771,14770,14899,14898,14899,14770,14770,14769,14898,14897,14898,14769,14769,14768,14897,14896,14897,14768,14768,14767,14896,14895,14896,14767,14767,14766,14895,14894,14895,14766,14766,14765,14894,14893,14894,14765,14765,14764,14893,14892,14893,14764,14764,14763,14892,14891,14892,14763,14763,14762,14891,14890,14891,14762,14762,14761,14890,14889,14890,14761,14761,14760,14889,14888,14889,14760,14760,14759,14888,14887,14888,14759,14759,14758,14887,14886,14887,14758,14758,14757,14886,14885,14886,14757,14757,14756,14885,14884,14885,14756,14756,14755,14884,14883,14884,14755,14755,14754,14883,14882,14883,14754,14754,14753,14882,14881,14882,14753,14753,14752,14881,14880,14881,14752,14752,14751,14880,14879,14880,14751,14751,14750,14879,14878,14879,14750,14750,14749,14878,14877,14878,14749,14749,14748,14877,14876,14877,14748,14748,14747,14876,14875,14876,14747,14747,14746,14875,14874,14875,14746,14746,14745,14874,14873,14874,14745,14745,14744,14873,14872,14873,14744,14744,14743,14872,14871,14872,14743,14743,14742,14871,14870,14871,14742,14742,14741,14870,14869,14870,14741,14741,14740,14869,14868,14869,14740,14740,14739,14868,14867,14868,14739,14739,14738,14867,14866,14867,14738,14738,14737,14866,14865,14866,14737,14737,14736,14865,14864,14865,14736,14736,14735,14864,14863,14864,14735,14735,14734,14863,14862,14863,14734,14734,14733,14862,14861,14862,14733,14733,14732,14861,14860,14861,14732,14732,14731,14860,14859,14860,14731,14731,14730,14859,14858,14859,14730,14730,14729,14858,14857,14858,14729,14729,14728,14857,14856,14857,14728,14728,14727,14856,14855,14856,14727,14727,14726,14855,14854,14855,14726,14726,14725,14854,14853,14854,14725,14725,14724,14853,14852,14853,14724,14724,14723,14852,14851,14852,14723,14723,14722,14851,14850,14851,14722,14722,14721,14850,14849,14850,14721,14721,14720,14849,14848,14849,14720,14975,14974,15103,15102,15103,14974,14974,14973,15102,15101,15102,14973,14973,14972,15101,15100,15101,14972,14972,14971,15100,15099,15100,14971,14971,14970,15099,15098,15099,14970,14970,14969,15098,15097,15098,14969,14969,14968,15097,15096,15097,14968,14968,14967,15096,15095,15096,14967,14967,14966,15095,15094,15095,14966,14966,14965,15094,15093,15094,14965,14965,14964,15093,15092,15093,14964,14964,14963,15092,15091,15092,14963,14963,14962,15091,15090,15091,14962,14962,14961,15090,15089,15090,14961,14961,14960,15089,15088,15089,14960,14960,14959,15088,15087,15088,14959,14959,14958,15087,15086,15087,14958,14958,14957,15086,15085,15086,14957,14957,14956,15085,15084,15085,14956,14956,14955,15084,15083,15084,14955,14955,14954,15083,15082,15083,14954,14954,14953,15082,15081,15082,14953,14953,14952,15081,15080,15081,14952,14952,14951,15080,15079,15080,14951,14951,14950,15079,15078,15079,14950,14950,14949,15078,15077,15078,14949,14949,14948,15077,15076,15077,14948,14948,14947,15076,15075,15076,14947,14947,14946,15075,15074,15075,14946,14946,14945,15074,15073,15074,14945,14945,14944,15073,15072,15073,14944,14944,14943,15072,15071,15072,14943,14943,14942,15071,15070,15071,14942,14942,14941,15070,15069,15070,14941,14941,14940,15069,15068,15069,14940,14940,14939,15068,15067,15068,14939,14939,14938,15067,15066,15067,14938,14938,14937,15066,15065,15066,14937,14937,14936,15065,15064,15065,14936,14936,14935,15064,15063,15064,14935,14935,14934,15063,15062,15063,14934,14934,14933,15062,15061,15062,14933,14933,14932,15061,15060,15061,14932,14932,14931,15060,15059,15060,14931,14931,14930,15059,15058,15059,14930,14930,14929,15058,15057,15058,14929,14929,14928,15057,15056,15057,14928,14928,14927,15056,15055,15056,14927,14927,14926,15055,15054,15055,14926,14926,14925,15054,15053,15054,14925,14925,14924,15053,15052,15053,14924,14924,14923,15052,15051,15052,14923,14923,14922,15051,15050,15051,14922,14922,14921,15050,15049,15050,14921,14921,14920,15049,15048,15049,14920,14920,14919,15048,15047,15048,14919,14919,14918,15047,15046,15047,14918,14918,14917,15046,15045,15046,14917,14917,14916,15045,15044,15045,14916,14916,14915,15044,15043,15044,14915,14915,14914,15043,15042,15043,14914,14914,14913,15042,15041,15042,14913,14913,14912,15041,15040,15041,14912,14912,14911,15040,15039,15040,14911,14911,14910,15039,15038,15039,14910,14910,14909,15038,15037,15038,14909,14909,14908,15037,15036,15037,14908,14908,14907,15036,15035,15036,14907,14907,14906,15035,15034,15035,14906,14906,14905,15034,15033,15034,14905,14905,14904,15033,15032,15033,14904,14904,14903,15032,15031,15032,14903,14903,14902,15031,15030,15031,14902,14902,14901,15030,15029,15030,14901,14901,14900,15029,15028,15029,14900,14900,14899,15028,15027,15028,14899,14899,14898,15027,15026,15027,14898,14898,14897,15026,15025,15026,14897,14897,14896,15025,15024,15025,14896,14896,14895,15024,15023,15024,14895,14895,14894,15023,15022,15023,14894,14894,14893,15022,15021,15022,14893,14893,14892,15021,15020,15021,14892,14892,14891,15020,15019,15020,14891,14891,14890,15019,15018,15019,14890,14890,14889,15018,15017,15018,14889,14889,14888,15017,15016,15017,14888,14888,14887,15016,15015,15016,14887,14887,14886,15015,15014,15015,14886,14886,14885,15014,15013,15014,14885,14885,14884,15013,15012,15013,14884,14884,14883,15012,15011,15012,14883,14883,14882,15011,15010,15011,14882,14882,14881,15010,15009,15010,14881,14881,14880,15009,15008,15009,14880,14880,14879,15008,15007,15008,14879,14879,14878,15007,15006,15007,14878,14878,14877,15006,15005,15006,14877,14877,14876,15005,15004,15005,14876,14876,14875,15004,15003,15004,14875,14875,14874,15003,15002,15003,14874,14874,14873,15002,15001,15002,14873,14873,14872,15001,15000,15001,14872,14872,14871,15000,14999,15000,14871,14871,14870,14999,14998,14999,14870,14870,14869,14998,14997,14998,14869,14869,14868,14997,14996,14997,14868,14868,14867,14996,14995,14996,14867,14867,14866,14995,14994,14995,14866,14866,14865,14994,14993,14994,14865,14865,14864,14993,14992,14993,14864,14864,14863,14992,14991,14992,14863,14863,14862,14991,14990,14991,14862,14862,14861,14990,14989,14990,14861,14861,14860,14989,14988,14989,14860,14860,14859,14988,14987,14988,14859,14859,14858,14987,14986,14987,14858,14858,14857,14986,14985,14986,14857,14857,14856,14985,14984,14985,14856,14856,14855,14984,14983,14984,14855,14855,14854,14983,14982,14983,14854,14854,14853,14982,14981,14982,14853,14853,14852,14981,14980,14981,14852,14852,14851,14980,14979,14980,14851,14851,14850,14979,14978,14979,14850,14850,14849,14978,14977,14978,14849,14849,14848,14977,14976,14977,14848,15103,15102,15231,15230,15231,15102,15102,15101,15230,15229,15230,15101,15101,15100,15229,15228,15229,15100,15100,15099,15228,15227,15228,15099,15099,15098,15227,15226,15227,15098,15098,15097,15226,15225,15226,15097,15097,15096,15225,15224,15225,15096,15096,15095,15224,15223,15224,15095,15095,15094,15223,15222,15223,15094,15094,15093,15222,15221,15222,15093,15093,15092,15221,15220,15221,15092,15092,15091,15220,15219,15220,15091,15091,15090,15219,15218,15219,15090,15090,15089,15218,15217,15218,15089,15089,15088,15217,15216,15217,15088,15088,15087,15216,15215,15216,15087,15087,15086,15215,15214,15215,15086,15086,15085,15214,15213,15214,15085,15085,15084,15213,15212,15213,15084,15084,15083,15212,15211,15212,15083,15083,15082,15211,15210,15211,15082,15082,15081,15210,15209,15210,15081,15081,15080,15209,15208,15209,15080,15080,15079,15208,15207,15208,15079,15079,15078,15207,15206,15207,15078,15078,15077,15206,15205,15206,15077,15077,15076,15205,15204,15205,15076,15076,15075,15204,15203,15204,15075,15075,15074,15203,15202,15203,15074,15074,15073,15202,15201,15202,15073,15073,15072,15201,15200,15201,15072,15072,15071,15200,15199,15200,15071,15071,15070,15199,15198,15199,15070,15070,15069,15198,15197,15198,15069,15069,15068,15197,15196,15197,15068,15068,15067,15196,15195,15196,15067,15067,15066,15195,15194,15195,15066,15066,15065,15194,15193,15194,15065,15065,15064,15193,15192,15193,15064,15064,15063,15192,15191,15192,15063,15063,15062,15191,15190,15191,15062,15062,15061,15190,15189,15190,15061,15061,15060,15189,15188,15189,15060,15060,15059,15188,15187,15188,15059,15059,15058,15187,15186,15187,15058,15058,15057,15186,15185,15186,15057,15057,15056,15185,15184,15185,15056,15056,15055,15184,15183,15184,15055,15055,15054,15183,15182,15183,15054,15054,15053,15182,15181,15182,15053,15053,15052,15181,15180,15181,15052,15052,15051,15180,15179,15180,15051,15051,15050,15179,15178,15179,15050,15050,15049,15178,15177,15178,15049,15049,15048,15177,15176,15177,15048,15048,15047,15176,15175,15176,15047,15047,15046,15175,15174,15175,15046,15046,15045,15174,15173,15174,15045,15045,15044,15173,15172,15173,15044,15044,15043,15172,15171,15172,15043,15043,15042,15171,15170,15171,15042,15042,15041,15170,15169,15170,15041,15041,15040,15169,15168,15169,15040,15040,15039,15168,15167,15168,15039,15039,15038,15167,15166,15167,15038,15038,15037,15166,15165,15166,15037,15037,15036,15165,15164,15165,15036,15036,15035,15164,15163,15164,15035,15035,15034,15163,15162,15163,15034,15034,15033,15162,15161,15162,15033,15033,15032,15161,15160,15161,15032,15032,15031,15160,15159,15160,15031,15031,15030,15159,15158,15159,15030,15030,15029,15158,15157,15158,15029,15029,15028,15157,15156,15157,15028,15028,15027,15156,15155,15156,15027,15027,15026,15155,15154,15155,15026,15026,15025,15154,15153,15154,15025,15025,15024,15153,15152,15153,15024,15024,15023,15152,15151,15152,15023,15023,15022,15151,15150,15151,15022,15022,15021,15150,15149,15150,15021,15021,15020,15149,15148,15149,15020,15020,15019,15148,15147,15148,15019,15019,15018,15147,15146,15147,15018,15018,15017,15146,15145,15146,15017,15017,15016,15145,15144,15145,15016,15016,15015,15144,15143,15144,15015,15015,15014,15143,15142,15143,15014,15014,15013,15142,15141,15142,15013,15013,15012,15141,15140,15141,15012,15012,15011,15140,15139,15140,15011,15011,15010,15139,15138,15139,15010,15010,15009,15138,15137,15138,15009,15009,15008,15137,15136,15137,15008,15008,15007,15136,15135,15136,15007,15007,15006,15135,15134,15135,15006,15006,15005,15134,15133,15134,15005,15005,15004,15133,15132,15133,15004,15004,15003,15132,15131,15132,15003,15003,15002,15131,15130,15131,15002,15002,15001,15130,15129,15130,15001,15001,15000,15129,15128,15129,15000,15000,14999,15128,15127,15128,14999,14999,14998,15127,15126,15127,14998,14998,14997,15126,15125,15126,14997,14997,14996,15125,15124,15125,14996,14996,14995,15124,15123,15124,14995,14995,14994,15123,15122,15123,14994,14994,14993,15122,15121,15122,14993,14993,14992,15121,15120,15121,14992,14992,14991,15120,15119,15120,14991,14991,14990,15119,15118,15119,14990,14990,14989,15118,15117,15118,14989,14989,14988,15117,15116,15117,14988,14988,14987,15116,15115,15116,14987,14987,14986,15115,15114,15115,14986,14986,14985,15114,15113,15114,14985,14985,14984,15113,15112,15113,14984,14984,14983,15112,15111,15112,14983,14983,14982,15111,15110,15111,14982,14982,14981,15110,15109,15110,14981,14981,14980,15109,15108,15109,14980,14980,14979,15108,15107,15108,14979,14979,14978,15107,15106,15107,14978,14978,14977,15106,15105,15106,14977,14977,14976,15105,15104,15105,14976,15231,15230,15359,15358,15359,15230,15230,15229,15358,15357,15358,15229,15229,15228,15357,15356,15357,15228,15228,15227,15356,15355,15356,15227,15227,15226,15355,15354,15355,15226,15226,15225,15354,15353,15354,15225,15225,15224,15353,15352,15353,15224,15224,15223,15352,15351,15352,15223,15223,15222,15351,15350,15351,15222,15222,15221,15350,15349,15350,15221,15221,15220,15349,15348,15349,15220,15220,15219,15348,15347,15348,15219,15219,15218,15347,15346,15347,15218,15218,15217,15346,15345,15346,15217,15217,15216,15345,15344,15345,15216,15216,15215,15344,15343,15344,15215,15215,15214,15343,15342,15343,15214,15214,15213,15342,15341,15342,15213,15213,15212,15341,15340,15341,15212,15212,15211,15340,15339,15340,15211,15211,15210,15339,15338,15339,15210,15210,15209,15338,15337,15338,15209,15209,15208,15337,15336,15337,15208,15208,15207,15336,15335,15336,15207,15207,15206,15335,15334,15335,15206,15206,15205,15334,15333,15334,15205,15205,15204,15333,15332,15333,15204,15204,15203,15332,15331,15332,15203,15203,15202,15331,15330,15331,15202,15202,15201,15330,15329,15330,15201,15201,15200,15329,15328,15329,15200,15200,15199,15328,15327,15328,15199,15199,15198,15327,15326,15327,15198,15198,15197,15326,15325,15326,15197,15197,15196,15325,15324,15325,15196,15196,15195,15324,15323,15324,15195,15195,15194,15323,15322,15323,15194,15194,15193,15322,15321,15322,15193,15193,15192,15321,15320,15321,15192,15192,15191,15320,15319,15320,15191,15191,15190,15319,15318,15319,15190,15190,15189,15318,15317,15318,15189,15189,15188,15317,15316,15317,15188,15188,15187,15316,15315,15316,15187,15187,15186,15315,15314,15315,15186,15186,15185,15314,15313,15314,15185,15185,15184,15313,15312,15313,15184,15184,15183,15312,15311,15312,15183,15183,15182,15311,15310,15311,15182,15182,15181,15310,15309,15310,15181,15181,15180,15309,15308,15309,15180,15180,15179,15308,15307,15308,15179,15179,15178,15307,15306,15307,15178,15178,15177,15306,15305,15306,15177,15177,15176,15305,15304,15305,15176,15176,15175,15304,15303,15304,15175,15175,15174,15303,15302,15303,15174,15174,15173,15302,15301,15302,15173,15173,15172,15301,15300,15301,15172,15172,15171,15300,15299,15300,15171,15171,15170,15299,15298,15299,15170,15170,15169,15298,15297,15298,15169,15169,15168,15297,15296,15297,15168,15168,15167,15296,15295,15296,15167,15167,15166,15295,15294,15295,15166,15166,15165,15294,15293,15294,15165,15165,15164,15293,15292,15293,15164,15164,15163,15292,15291,15292,15163,15163,15162,15291,15290,15291,15162,15162,15161,15290,15289,15290,15161,15161,15160,15289,15288,15289,15160,15160,15159,15288,15287,15288,15159,15159,15158,15287,15286,15287,15158,15158,15157,15286,15285,15286,15157,15157,15156,15285,15284,15285,15156,15156,15155,15284,15283,15284,15155,15155,15154,15283,15282,15283,15154,15154,15153,15282,15281,15282,15153,15153,15152,15281,15280,15281,15152,15152,15151,15280,15279,15280,15151,15151,15150,15279,15278,15279,15150,15150,15149,15278,15277,15278,15149,15149,15148,15277,15276,15277,15148,15148,15147,15276,15275,15276,15147,15147,15146,15275,15274,15275,15146,15146,15145,15274,15273,15274,15145,15145,15144,15273,15272,15273,15144,15144,15143,15272,15271,15272,15143,15143,15142,15271,15270,15271,15142,15142,15141,15270,15269,15270,15141,15141,15140,15269,15268,15269,15140,15140,15139,15268,15267,15268,15139,15139,15138,15267,15266,15267,15138,15138,15137,15266,15265,15266,15137,15137,15136,15265,15264,15265,15136,15136,15135,15264,15263,15264,15135,15135,15134,15263,15262,15263,15134,15134,15133,15262,15261,15262,15133,15133,15132,15261,15260,15261,15132,15132,15131,15260,15259,15260,15131,15131,15130,15259,15258,15259,15130,15130,15129,15258,15257,15258,15129,15129,15128,15257,15256,15257,15128,15128,15127,15256,15255,15256,15127,15127,15126,15255,15254,15255,15126,15126,15125,15254,15253,15254,15125,15125,15124,15253,15252,15253,15124,15124,15123,15252,15251,15252,15123,15123,15122,15251,15250,15251,15122,15122,15121,15250,15249,15250,15121,15121,15120,15249,15248,15249,15120,15120,15119,15248,15247,15248,15119,15119,15118,15247,15246,15247,15118,15118,15117,15246,15245,15246,15117,15117,15116,15245,15244,15245,15116,15116,15115,15244,15243,15244,15115,15115,15114,15243,15242,15243,15114,15114,15113,15242,15241,15242,15113,15113,15112,15241,15240,15241,15112,15112,15111,15240,15239,15240,15111,15111,15110,15239,15238,15239,15110,15110,15109,15238,15237,15238,15109,15109,15108,15237,15236,15237,15108,15108,15107,15236,15235,15236,15107,15107,15106,15235,15234,15235,15106,15106,15105,15234,15233,15234,15105,15105,15104,15233,15232,15233,15104,15359,15358,15487,15486,15487,15358,15358,15357,15486,15485,15486,15357,15357,15356,15485,15484,15485,15356,15356,15355,15484,15483,15484,15355,15355,15354,15483,15482,15483,15354,15354,15353,15482,15481,15482,15353,15353,15352,15481,15480,15481,15352,15352,15351,15480,15479,15480,15351,15351,15350,15479,15478,15479,15350,15350,15349,15478,15477,15478,15349,15349,15348,15477,15476,15477,15348,15348,15347,15476,15475,15476,15347,15347,15346,15475,15474,15475,15346,15346,15345,15474,15473,15474,15345,15345,15344,15473,15472,15473,15344,15344,15343,15472,15471,15472,15343,15343,15342,15471,15470,15471,15342,15342,15341,15470,15469,15470,15341,15341,15340,15469,15468,15469,15340,15340,15339,15468,15467,15468,15339,15339,15338,15467,15466,15467,15338,15338,15337,15466,15465,15466,15337,15337,15336,15465,15464,15465,15336,15336,15335,15464,15463,15464,15335,15335,15334,15463,15462,15463,15334,15334,15333,15462,15461,15462,15333,15333,15332,15461,15460,15461,15332,15332,15331,15460,15459,15460,15331,15331,15330,15459,15458,15459,15330,15330,15329,15458,15457,15458,15329,15329,15328,15457,15456,15457,15328,15328,15327,15456,15455,15456,15327,15327,15326,15455,15454,15455,15326,15326,15325,15454,15453,15454,15325,15325,15324,15453,15452,15453,15324,15324,15323,15452,15451,15452,15323,15323,15322,15451,15450,15451,15322,15322,15321,15450,15449,15450,15321,15321,15320,15449,15448,15449,15320,15320,15319,15448,15447,15448,15319,15319,15318,15447,15446,15447,15318,15318,15317,15446,15445,15446,15317,15317,15316,15445,15444,15445,15316,15316,15315,15444,15443,15444,15315,15315,15314,15443,15442,15443,15314,15314,15313,15442,15441,15442,15313,15313,15312,15441,15440,15441,15312,15312,15311,15440,15439,15440,15311,15311,15310,15439,15438,15439,15310,15310,15309,15438,15437,15438,15309,15309,15308,15437,15436,15437,15308,15308,15307,15436,15435,15436,15307,15307,15306,15435,15434,15435,15306,15306,15305,15434,15433,15434,15305,15305,15304,15433,15432,15433,15304,15304,15303,15432,15431,15432,15303,15303,15302,15431,15430,15431,15302,15302,15301,15430,15429,15430,15301,15301,15300,15429,15428,15429,15300,15300,15299,15428,15427,15428,15299,15299,15298,15427,15426,15427,15298,15298,15297,15426,15425,15426,15297,15297,15296,15425,15424,15425,15296,15296,15295,15424,15423,15424,15295,15295,15294,15423,15422,15423,15294,15294,15293,15422,15421,15422,15293,15293,15292,15421,15420,15421,15292,15292,15291,15420,15419,15420,15291,15291,15290,15419,15418,15419,15290,15290,15289,15418,15417,15418,15289,15289,15288,15417,15416,15417,15288,15288,15287,15416,15415,15416,15287,15287,15286,15415,15414,15415,15286,15286,15285,15414,15413,15414,15285,15285,15284,15413,15412,15413,15284,15284,15283,15412,15411,15412,15283,15283,15282,15411,15410,15411,15282,15282,15281,15410,15409,15410,15281,15281,15280,15409,15408,15409,15280,15280,15279,15408,15407,15408,15279,15279,15278,15407,15406,15407,15278,15278,15277,15406,15405,15406,15277,15277,15276,15405,15404,15405,15276,15276,15275,15404,15403,15404,15275,15275,15274,15403,15402,15403,15274,15274,15273,15402,15401,15402,15273,15273,15272,15401,15400,15401,15272,15272,15271,15400,15399,15400,15271,15271,15270,15399,15398,15399,15270,15270,15269,15398,15397,15398,15269,15269,15268,15397,15396,15397,15268,15268,15267,15396,15395,15396,15267,15267,15266,15395,15394,15395,15266,15266,15265,15394,15393,15394,15265,15265,15264,15393,15392,15393,15264,15264,15263,15392,15391,15392,15263,15263,15262,15391,15390,15391,15262,15262,15261,15390,15389,15390,15261,15261,15260,15389,15388,15389,15260,15260,15259,15388,15387,15388,15259,15259,15258,15387,15386,15387,15258,15258,15257,15386,15385,15386,15257,15257,15256,15385,15384,15385,15256,15256,15255,15384,15383,15384,15255,15255,15254,15383,15382,15383,15254,15254,15253,15382,15381,15382,15253,15253,15252,15381,15380,15381,15252,15252,15251,15380,15379,15380,15251,15251,15250,15379,15378,15379,15250,15250,15249,15378,15377,15378,15249,15249,15248,15377,15376,15377,15248,15248,15247,15376,15375,15376,15247,15247,15246,15375,15374,15375,15246,15246,15245,15374,15373,15374,15245,15245,15244,15373,15372,15373,15244,15244,15243,15372,15371,15372,15243,15243,15242,15371,15370,15371,15242,15242,15241,15370,15369,15370,15241,15241,15240,15369,15368,15369,15240,15240,15239,15368,15367,15368,15239,15239,15238,15367,15366,15367,15238,15238,15237,15366,15365,15366,15237,15237,15236,15365,15364,15365,15236,15236,15235,15364,15363,15364,15235,15235,15234,15363,15362,15363,15234,15234,15233,15362,15361,15362,15233,15233,15232,15361,15360,15361,15232,15487,15486,15615,15614,15615,15486,15486,15485,15614,15613,15614,15485,15485,15484,15613,15612,15613,15484,15484,15483,15612,15611,15612,15483,15483,15482,15611,15610,15611,15482,15482,15481,15610,15609,15610,15481,15481,15480,15609,15608,15609,15480,15480,15479,15608,15607,15608,15479,15479,15478,15607,15606,15607,15478,15478,15477,15606,15605,15606,15477,15477,15476,15605,15604,15605,15476,15476,15475,15604,15603,15604,15475,15475,15474,15603,15602,15603,15474,15474,15473,15602,15601,15602,15473,15473,15472,15601,15600,15601,15472,15472,15471,15600,15599,15600,15471,15471,15470,15599,15598,15599,15470,15470,15469,15598,15597,15598,15469,15469,15468,15597,15596,15597,15468,15468,15467,15596,15595,15596,15467,15467,15466,15595,15594,15595,15466,15466,15465,15594,15593,15594,15465,15465,15464,15593,15592,15593,15464,15464,15463,15592,15591,15592,15463,15463,15462,15591,15590,15591,15462,15462,15461,15590,15589,15590,15461,15461,15460,15589,15588,15589,15460,15460,15459,15588,15587,15588,15459,15459,15458,15587,15586,15587,15458,15458,15457,15586,15585,15586,15457,15457,15456,15585,15584,15585,15456,15456,15455,15584,15583,15584,15455,15455,15454,15583,15582,15583,15454,15454,15453,15582,15581,15582,15453,15453,15452,15581,15580,15581,15452,15452,15451,15580,15579,15580,15451,15451,15450,15579,15578,15579,15450,15450,15449,15578,15577,15578,15449,15449,15448,15577,15576,15577,15448,15448,15447,15576,15575,15576,15447,15447,15446,15575,15574,15575,15446,15446,15445,15574,15573,15574,15445,15445,15444,15573,15572,15573,15444,15444,15443,15572,15571,15572,15443,15443,15442,15571,15570,15571,15442,15442,15441,15570,15569,15570,15441,15441,15440,15569,15568,15569,15440,15440,15439,15568,15567,15568,15439,15439,15438,15567,15566,15567,15438,15438,15437,15566,15565,15566,15437,15437,15436,15565,15564,15565,15436,15436,15435,15564,15563,15564,15435,15435,15434,15563,15562,15563,15434,15434,15433,15562,15561,15562,15433,15433,15432,15561,15560,15561,15432,15432,15431,15560,15559,15560,15431,15431,15430,15559,15558,15559,15430,15430,15429,15558,15557,15558,15429,15429,15428,15557,15556,15557,15428,15428,15427,15556,15555,15556,15427,15427,15426,15555,15554,15555,15426,15426,15425,15554,15553,15554,15425,15425,15424,15553,15552,15553,15424,15424,15423,15552,15551,15552,15423,15423,15422,15551,15550,15551,15422,15422,15421,15550,15549,15550,15421,15421,15420,15549,15548,15549,15420,15420,15419,15548,15547,15548,15419,15419,15418,15547,15546,15547,15418,15418,15417,15546,15545,15546,15417,15417,15416,15545,15544,15545,15416,15416,15415,15544,15543,15544,15415,15415,15414,15543,15542,15543,15414,15414,15413,15542,15541,15542,15413,15413,15412,15541,15540,15541,15412,15412,15411,15540,15539,15540,15411,15411,15410,15539,15538,15539,15410,15410,15409,15538,15537,15538,15409,15409,15408,15537,15536,15537,15408,15408,15407,15536,15535,15536,15407,15407,15406,15535,15534,15535,15406,15406,15405,15534,15533,15534,15405,15405,15404,15533,15532,15533,15404,15404,15403,15532,15531,15532,15403,15403,15402,15531,15530,15531,15402,15402,15401,15530,15529,15530,15401,15401,15400,15529,15528,15529,15400,15400,15399,15528,15527,15528,15399,15399,15398,15527,15526,15527,15398,15398,15397,15526,15525,15526,15397,15397,15396,15525,15524,15525,15396,15396,15395,15524,15523,15524,15395,15395,15394,15523,15522,15523,15394,15394,15393,15522,15521,15522,15393,15393,15392,15521,15520,15521,15392,15392,15391,15520,15519,15520,15391,15391,15390,15519,15518,15519,15390,15390,15389,15518,15517,15518,15389,15389,15388,15517,15516,15517,15388,15388,15387,15516,15515,15516,15387,15387,15386,15515,15514,15515,15386,15386,15385,15514,15513,15514,15385,15385,15384,15513,15512,15513,15384,15384,15383,15512,15511,15512,15383,15383,15382,15511,15510,15511,15382,15382,15381,15510,15509,15510,15381,15381,15380,15509,15508,15509,15380,15380,15379,15508,15507,15508,15379,15379,15378,15507,15506,15507,15378,15378,15377,15506,15505,15506,15377,15377,15376,15505,15504,15505,15376,15376,15375,15504,15503,15504,15375,15375,15374,15503,15502,15503,15374,15374,15373,15502,15501,15502,15373,15373,15372,15501,15500,15501,15372,15372,15371,15500,15499,15500,15371,15371,15370,15499,15498,15499,15370,15370,15369,15498,15497,15498,15369,15369,15368,15497,15496,15497,15368,15368,15367,15496,15495,15496,15367,15367,15366,15495,15494,15495,15366,15366,15365,15494,15493,15494,15365,15365,15364,15493,15492,15493,15364,15364,15363,15492,15491,15492,15363,15363,15362,15491,15490,15491,15362,15362,15361,15490,15489,15490,15361,15361,15360,15489,15488,15489,15360,15615,15614,15743,15742,15743,15614,15614,15613,15742,15741,15742,15613,15613,15612,15741,15740,15741,15612,15612,15611,15740,15739,15740,15611,15611,15610,15739,15738,15739,15610,15610,15609,15738,15737,15738,15609,15609,15608,15737,15736,15737,15608,15608,15607,15736,15735,15736,15607,15607,15606,15735,15734,15735,15606,15606,15605,15734,15733,15734,15605,15605,15604,15733,15732,15733,15604,15604,15603,15732,15731,15732,15603,15603,15602,15731,15730,15731,15602,15602,15601,15730,15729,15730,15601,15601,15600,15729,15728,15729,15600,15600,15599,15728,15727,15728,15599,15599,15598,15727,15726,15727,15598,15598,15597,15726,15725,15726,15597,15597,15596,15725,15724,15725,15596,15596,15595,15724,15723,15724,15595,15595,15594,15723,15722,15723,15594,15594,15593,15722,15721,15722,15593,15593,15592,15721,15720,15721,15592,15592,15591,15720,15719,15720,15591,15591,15590,15719,15718,15719,15590,15590,15589,15718,15717,15718,15589,15589,15588,15717,15716,15717,15588,15588,15587,15716,15715,15716,15587,15587,15586,15715,15714,15715,15586,15586,15585,15714,15713,15714,15585,15585,15584,15713,15712,15713,15584,15584,15583,15712,15711,15712,15583,15583,15582,15711,15710,15711,15582,15582,15581,15710,15709,15710,15581,15581,15580,15709,15708,15709,15580,15580,15579,15708,15707,15708,15579,15579,15578,15707,15706,15707,15578,15578,15577,15706,15705,15706,15577,15577,15576,15705,15704,15705,15576,15576,15575,15704,15703,15704,15575,15575,15574,15703,15702,15703,15574,15574,15573,15702,15701,15702,15573,15573,15572,15701,15700,15701,15572,15572,15571,15700,15699,15700,15571,15571,15570,15699,15698,15699,15570,15570,15569,15698,15697,15698,15569,15569,15568,15697,15696,15697,15568,15568,15567,15696,15695,15696,15567,15567,15566,15695,15694,15695,15566,15566,15565,15694,15693,15694,15565,15565,15564,15693,15692,15693,15564,15564,15563,15692,15691,15692,15563,15563,15562,15691,15690,15691,15562,15562,15561,15690,15689,15690,15561,15561,15560,15689,15688,15689,15560,15560,15559,15688,15687,15688,15559,15559,15558,15687,15686,15687,15558,15558,15557,15686,15685,15686,15557,15557,15556,15685,15684,15685,15556,15556,15555,15684,15683,15684,15555,15555,15554,15683,15682,15683,15554,15554,15553,15682,15681,15682,15553,15553,15552,15681,15680,15681,15552,15552,15551,15680,15679,15680,15551,15551,15550,15679,15678,15679,15550,15550,15549,15678,15677,15678,15549,15549,15548,15677,15676,15677,15548,15548,15547,15676,15675,15676,15547,15547,15546,15675,15674,15675,15546,15546,15545,15674,15673,15674,15545,15545,15544,15673,15672,15673,15544,15544,15543,15672,15671,15672,15543,15543,15542,15671,15670,15671,15542,15542,15541,15670,15669,15670,15541,15541,15540,15669,15668,15669,15540,15540,15539,15668,15667,15668,15539,15539,15538,15667,15666,15667,15538,15538,15537,15666,15665,15666,15537,15537,15536,15665,15664,15665,15536,15536,15535,15664,15663,15664,15535,15535,15534,15663,15662,15663,15534,15534,15533,15662,15661,15662,15533,15533,15532,15661,15660,15661,15532,15532,15531,15660,15659,15660,15531,15531,15530,15659,15658,15659,15530,15530,15529,15658,15657,15658,15529,15529,15528,15657,15656,15657,15528,15528,15527,15656,15655,15656,15527,15527,15526,15655,15654,15655,15526,15526,15525,15654,15653,15654,15525,15525,15524,15653,15652,15653,15524,15524,15523,15652,15651,15652,15523,15523,15522,15651,15650,15651,15522,15522,15521,15650,15649,15650,15521,15521,15520,15649,15648,15649,15520,15520,15519,15648,15647,15648,15519,15519,15518,15647,15646,15647,15518,15518,15517,15646,15645,15646,15517,15517,15516,15645,15644,15645,15516,15516,15515,15644,15643,15644,15515,15515,15514,15643,15642,15643,15514,15514,15513,15642,15641,15642,15513,15513,15512,15641,15640,15641,15512,15512,15511,15640,15639,15640,15511,15511,15510,15639,15638,15639,15510,15510,15509,15638,15637,15638,15509,15509,15508,15637,15636,15637,15508,15508,15507,15636,15635,15636,15507,15507,15506,15635,15634,15635,15506,15506,15505,15634,15633,15634,15505,15505,15504,15633,15632,15633,15504,15504,15503,15632,15631,15632,15503,15503,15502,15631,15630,15631,15502,15502,15501,15630,15629,15630,15501,15501,15500,15629,15628,15629,15500,15500,15499,15628,15627,15628,15499,15499,15498,15627,15626,15627,15498,15498,15497,15626,15625,15626,15497,15497,15496,15625,15624,15625,15496,15496,15495,15624,15623,15624,15495,15495,15494,15623,15622,15623,15494,15494,15493,15622,15621,15622,15493,15493,15492,15621,15620,15621,15492,15492,15491,15620,15619,15620,15491,15491,15490,15619,15618,15619,15490,15490,15489,15618,15617,15618,15489,15489,15488,15617,15616,15617,15488,15743,15742,15871,15870,15871,15742,15742,15741,15870,15869,15870,15741,15741,15740,15869,15868,15869,15740,15740,15739,15868,15867,15868,15739,15739,15738,15867,15866,15867,15738,15738,15737,15866,15865,15866,15737,15737,15736,15865,15864,15865,15736,15736,15735,15864,15863,15864,15735,15735,15734,15863,15862,15863,15734,15734,15733,15862,15861,15862,15733,15733,15732,15861,15860,15861,15732,15732,15731,15860,15859,15860,15731,15731,15730,15859,15858,15859,15730,15730,15729,15858,15857,15858,15729,15729,15728,15857,15856,15857,15728,15728,15727,15856,15855,15856,15727,15727,15726,15855,15854,15855,15726,15726,15725,15854,15853,15854,15725,15725,15724,15853,15852,15853,15724,15724,15723,15852,15851,15852,15723,15723,15722,15851,15850,15851,15722,15722,15721,15850,15849,15850,15721,15721,15720,15849,15848,15849,15720,15720,15719,15848,15847,15848,15719,15719,15718,15847,15846,15847,15718,15718,15717,15846,15845,15846,15717,15717,15716,15845,15844,15845,15716,15716,15715,15844,15843,15844,15715,15715,15714,15843,15842,15843,15714,15714,15713,15842,15841,15842,15713,15713,15712,15841,15840,15841,15712,15712,15711,15840,15839,15840,15711,15711,15710,15839,15838,15839,15710,15710,15709,15838,15837,15838,15709,15709,15708,15837,15836,15837,15708,15708,15707,15836,15835,15836,15707,15707,15706,15835,15834,15835,15706,15706,15705,15834,15833,15834,15705,15705,15704,15833,15832,15833,15704,15704,15703,15832,15831,15832,15703,15703,15702,15831,15830,15831,15702,15702,15701,15830,15829,15830,15701,15701,15700,15829,15828,15829,15700,15700,15699,15828,15827,15828,15699,15699,15698,15827,15826,15827,15698,15698,15697,15826,15825,15826,15697,15697,15696,15825,15824,15825,15696,15696,15695,15824,15823,15824,15695,15695,15694,15823,15822,15823,15694,15694,15693,15822,15821,15822,15693,15693,15692,15821,15820,15821,15692,15692,15691,15820,15819,15820,15691,15691,15690,15819,15818,15819,15690,15690,15689,15818,15817,15818,15689,15689,15688,15817,15816,15817,15688,15688,15687,15816,15815,15816,15687,15687,15686,15815,15814,15815,15686,15686,15685,15814,15813,15814,15685,15685,15684,15813,15812,15813,15684,15684,15683,15812,15811,15812,15683,15683,15682,15811,15810,15811,15682,15682,15681,15810,15809,15810,15681,15681,15680,15809,15808,15809,15680,15680,15679,15808,15807,15808,15679,15679,15678,15807,15806,15807,15678,15678,15677,15806,15805,15806,15677,15677,15676,15805,15804,15805,15676,15676,15675,15804,15803,15804,15675,15675,15674,15803,15802,15803,15674,15674,15673,15802,15801,15802,15673,15673,15672,15801,15800,15801,15672,15672,15671,15800,15799,15800,15671,15671,15670,15799,15798,15799,15670,15670,15669,15798,15797,15798,15669,15669,15668,15797,15796,15797,15668,15668,15667,15796,15795,15796,15667,15667,15666,15795,15794,15795,15666,15666,15665,15794,15793,15794,15665,15665,15664,15793,15792,15793,15664,15664,15663,15792,15791,15792,15663,15663,15662,15791,15790,15791,15662,15662,15661,15790,15789,15790,15661,15661,15660,15789,15788,15789,15660,15660,15659,15788,15787,15788,15659,15659,15658,15787,15786,15787,15658,15658,15657,15786,15785,15786,15657,15657,15656,15785,15784,15785,15656,15656,15655,15784,15783,15784,15655,15655,15654,15783,15782,15783,15654,15654,15653,15782,15781,15782,15653,15653,15652,15781,15780,15781,15652,15652,15651,15780,15779,15780,15651,15651,15650,15779,15778,15779,15650,15650,15649,15778,15777,15778,15649,15649,15648,15777,15776,15777,15648,15648,15647,15776,15775,15776,15647,15647,15646,15775,15774,15775,15646,15646,15645,15774,15773,15774,15645,15645,15644,15773,15772,15773,15644,15644,15643,15772,15771,15772,15643,15643,15642,15771,15770,15771,15642,15642,15641,15770,15769,15770,15641,15641,15640,15769,15768,15769,15640,15640,15639,15768,15767,15768,15639,15639,15638,15767,15766,15767,15638,15638,15637,15766,15765,15766,15637,15637,15636,15765,15764,15765,15636,15636,15635,15764,15763,15764,15635,15635,15634,15763,15762,15763,15634,15634,15633,15762,15761,15762,15633,15633,15632,15761,15760,15761,15632,15632,15631,15760,15759,15760,15631,15631,15630,15759,15758,15759,15630,15630,15629,15758,15757,15758,15629,15629,15628,15757,15756,15757,15628,15628,15627,15756,15755,15756,15627,15627,15626,15755,15754,15755,15626,15626,15625,15754,15753,15754,15625,15625,15624,15753,15752,15753,15624,15624,15623,15752,15751,15752,15623,15623,15622,15751,15750,15751,15622,15622,15621,15750,15749,15750,15621,15621,15620,15749,15748,15749,15620,15620,15619,15748,15747,15748,15619,15619,15618,15747,15746,15747,15618,15618,15617,15746,15745,15746,15617,15617,15616,15745,15744,15745,15616,15871,15870,15999,15998,15999,15870,15870,15869,15998,15997,15998,15869,15869,15868,15997,15996,15997,15868,15868,15867,15996,15995,15996,15867,15867,15866,15995,15994,15995,15866,15866,15865,15994,15993,15994,15865,15865,15864,15993,15992,15993,15864,15864,15863,15992,15991,15992,15863,15863,15862,15991,15990,15991,15862,15862,15861,15990,15989,15990,15861,15861,15860,15989,15988,15989,15860,15860,15859,15988,15987,15988,15859,15859,15858,15987,15986,15987,15858,15858,15857,15986,15985,15986,15857,15857,15856,15985,15984,15985,15856,15856,15855,15984,15983,15984,15855,15855,15854,15983,15982,15983,15854,15854,15853,15982,15981,15982,15853,15853,15852,15981,15980,15981,15852,15852,15851,15980,15979,15980,15851,15851,15850,15979,15978,15979,15850,15850,15849,15978,15977,15978,15849,15849,15848,15977,15976,15977,15848,15848,15847,15976,15975,15976,15847,15847,15846,15975,15974,15975,15846,15846,15845,15974,15973,15974,15845,15845,15844,15973,15972,15973,15844,15844,15843,15972,15971,15972,15843,15843,15842,15971,15970,15971,15842,15842,15841,15970,15969,15970,15841,15841,15840,15969,15968,15969,15840,15840,15839,15968,15967,15968,15839,15839,15838,15967,15966,15967,15838,15838,15837,15966,15965,15966,15837,15837,15836,15965,15964,15965,15836,15836,15835,15964,15963,15964,15835,15835,15834,15963,15962,15963,15834,15834,15833,15962,15961,15962,15833,15833,15832,15961,15960,15961,15832,15832,15831,15960,15959,15960,15831,15831,15830,15959,15958,15959,15830,15830,15829,15958,15957,15958,15829,15829,15828,15957,15956,15957,15828,15828,15827,15956,15955,15956,15827,15827,15826,15955,15954,15955,15826,15826,15825,15954,15953,15954,15825,15825,15824,15953,15952,15953,15824,15824,15823,15952,15951,15952,15823,15823,15822,15951,15950,15951,15822,15822,15821,15950,15949,15950,15821,15821,15820,15949,15948,15949,15820,15820,15819,15948,15947,15948,15819,15819,15818,15947,15946,15947,15818,15818,15817,15946,15945,15946,15817,15817,15816,15945,15944,15945,15816,15816,15815,15944,15943,15944,15815,15815,15814,15943,15942,15943,15814,15814,15813,15942,15941,15942,15813,15813,15812,15941,15940,15941,15812,15812,15811,15940,15939,15940,15811,15811,15810,15939,15938,15939,15810,15810,15809,15938,15937,15938,15809,15809,15808,15937,15936,15937,15808,15808,15807,15936,15935,15936,15807,15807,15806,15935,15934,15935,15806,15806,15805,15934,15933,15934,15805,15805,15804,15933,15932,15933,15804,15804,15803,15932,15931,15932,15803,15803,15802,15931,15930,15931,15802,15802,15801,15930,15929,15930,15801,15801,15800,15929,15928,15929,15800,15800,15799,15928,15927,15928,15799,15799,15798,15927,15926,15927,15798,15798,15797,15926,15925,15926,15797,15797,15796,15925,15924,15925,15796,15796,15795,15924,15923,15924,15795,15795,15794,15923,15922,15923,15794,15794,15793,15922,15921,15922,15793,15793,15792,15921,15920,15921,15792,15792,15791,15920,15919,15920,15791,15791,15790,15919,15918,15919,15790,15790,15789,15918,15917,15918,15789,15789,15788,15917,15916,15917,15788,15788,15787,15916,15915,15916,15787,15787,15786,15915,15914,15915,15786,15786,15785,15914,15913,15914,15785,15785,15784,15913,15912,15913,15784,15784,15783,15912,15911,15912,15783,15783,15782,15911,15910,15911,15782,15782,15781,15910,15909,15910,15781,15781,15780,15909,15908,15909,15780,15780,15779,15908,15907,15908,15779,15779,15778,15907,15906,15907,15778,15778,15777,15906,15905,15906,15777,15777,15776,15905,15904,15905,15776,15776,15775,15904,15903,15904,15775,15775,15774,15903,15902,15903,15774,15774,15773,15902,15901,15902,15773,15773,15772,15901,15900,15901,15772,15772,15771,15900,15899,15900,15771,15771,15770,15899,15898,15899,15770,15770,15769,15898,15897,15898,15769,15769,15768,15897,15896,15897,15768,15768,15767,15896,15895,15896,15767,15767,15766,15895,15894,15895,15766,15766,15765,15894,15893,15894,15765,15765,15764,15893,15892,15893,15764,15764,15763,15892,15891,15892,15763,15763,15762,15891,15890,15891,15762,15762,15761,15890,15889,15890,15761,15761,15760,15889,15888,15889,15760,15760,15759,15888,15887,15888,15759,15759,15758,15887,15886,15887,15758,15758,15757,15886,15885,15886,15757,15757,15756,15885,15884,15885,15756,15756,15755,15884,15883,15884,15755,15755,15754,15883,15882,15883,15754,15754,15753,15882,15881,15882,15753,15753,15752,15881,15880,15881,15752,15752,15751,15880,15879,15880,15751,15751,15750,15879,15878,15879,15750,15750,15749,15878,15877,15878,15749,15749,15748,15877,15876,15877,15748,15748,15747,15876,15875,15876,15747,15747,15746,15875,15874,15875,15746,15746,15745,15874,15873,15874,15745,15745,15744,15873,15872,15873,15744,15999,15998,16127,16126,16127,15998,15998,15997,16126,16125,16126,15997,15997,15996,16125,16124,16125,15996,15996,15995,16124,16123,16124,15995,15995,15994,16123,16122,16123,15994,15994,15993,16122,16121,16122,15993,15993,15992,16121,16120,16121,15992,15992,15991,16120,16119,16120,15991,15991,15990,16119,16118,16119,15990,15990,15989,16118,16117,16118,15989,15989,15988,16117,16116,16117,15988,15988,15987,16116,16115,16116,15987,15987,15986,16115,16114,16115,15986,15986,15985,16114,16113,16114,15985,15985,15984,16113,16112,16113,15984,15984,15983,16112,16111,16112,15983,15983,15982,16111,16110,16111,15982,15982,15981,16110,16109,16110,15981,15981,15980,16109,16108,16109,15980,15980,15979,16108,16107,16108,15979,15979,15978,16107,16106,16107,15978,15978,15977,16106,16105,16106,15977,15977,15976,16105,16104,16105,15976,15976,15975,16104,16103,16104,15975,15975,15974,16103,16102,16103,15974,15974,15973,16102,16101,16102,15973,15973,15972,16101,16100,16101,15972,15972,15971,16100,16099,16100,15971,15971,15970,16099,16098,16099,15970,15970,15969,16098,16097,16098,15969,15969,15968,16097,16096,16097,15968,15968,15967,16096,16095,16096,15967,15967,15966,16095,16094,16095,15966,15966,15965,16094,16093,16094,15965,15965,15964,16093,16092,16093,15964,15964,15963,16092,16091,16092,15963,15963,15962,16091,16090,16091,15962,15962,15961,16090,16089,16090,15961,15961,15960,16089,16088,16089,15960,15960,15959,16088,16087,16088,15959,15959,15958,16087,16086,16087,15958,15958,15957,16086,16085,16086,15957,15957,15956,16085,16084,16085,15956,15956,15955,16084,16083,16084,15955,15955,15954,16083,16082,16083,15954,15954,15953,16082,16081,16082,15953,15953,15952,16081,16080,16081,15952,15952,15951,16080,16079,16080,15951,15951,15950,16079,16078,16079,15950,15950,15949,16078,16077,16078,15949,15949,15948,16077,16076,16077,15948,15948,15947,16076,16075,16076,15947,15947,15946,16075,16074,16075,15946,15946,15945,16074,16073,16074,15945,15945,15944,16073,16072,16073,15944,15944,15943,16072,16071,16072,15943,15943,15942,16071,16070,16071,15942,15942,15941,16070,16069,16070,15941,15941,15940,16069,16068,16069,15940,15940,15939,16068,16067,16068,15939,15939,15938,16067,16066,16067,15938,15938,15937,16066,16065,16066,15937,15937,15936,16065,16064,16065,15936,15936,15935,16064,16063,16064,15935,15935,15934,16063,16062,16063,15934,15934,15933,16062,16061,16062,15933,15933,15932,16061,16060,16061,15932,15932,15931,16060,16059,16060,15931,15931,15930,16059,16058,16059,15930,15930,15929,16058,16057,16058,15929,15929,15928,16057,16056,16057,15928,15928,15927,16056,16055,16056,15927,15927,15926,16055,16054,16055,15926,15926,15925,16054,16053,16054,15925,15925,15924,16053,16052,16053,15924,15924,15923,16052,16051,16052,15923,15923,15922,16051,16050,16051,15922,15922,15921,16050,16049,16050,15921,15921,15920,16049,16048,16049,15920,15920,15919,16048,16047,16048,15919,15919,15918,16047,16046,16047,15918,15918,15917,16046,16045,16046,15917,15917,15916,16045,16044,16045,15916,15916,15915,16044,16043,16044,15915,15915,15914,16043,16042,16043,15914,15914,15913,16042,16041,16042,15913,15913,15912,16041,16040,16041,15912,15912,15911,16040,16039,16040,15911,15911,15910,16039,16038,16039,15910,15910,15909,16038,16037,16038,15909,15909,15908,16037,16036,16037,15908,15908,15907,16036,16035,16036,15907,15907,15906,16035,16034,16035,15906,15906,15905,16034,16033,16034,15905,15905,15904,16033,16032,16033,15904,15904,15903,16032,16031,16032,15903,15903,15902,16031,16030,16031,15902,15902,15901,16030,16029,16030,15901,15901,15900,16029,16028,16029,15900,15900,15899,16028,16027,16028,15899,15899,15898,16027,16026,16027,15898,15898,15897,16026,16025,16026,15897,15897,15896,16025,16024,16025,15896,15896,15895,16024,16023,16024,15895,15895,15894,16023,16022,16023,15894,15894,15893,16022,16021,16022,15893,15893,15892,16021,16020,16021,15892,15892,15891,16020,16019,16020,15891,15891,15890,16019,16018,16019,15890,15890,15889,16018,16017,16018,15889,15889,15888,16017,16016,16017,15888,15888,15887,16016,16015,16016,15887,15887,15886,16015,16014,16015,15886,15886,15885,16014,16013,16014,15885,15885,15884,16013,16012,16013,15884,15884,15883,16012,16011,16012,15883,15883,15882,16011,16010,16011,15882,15882,15881,16010,16009,16010,15881,15881,15880,16009,16008,16009,15880,15880,15879,16008,16007,16008,15879,15879,15878,16007,16006,16007,15878,15878,15877,16006,16005,16006,15877,15877,15876,16005,16004,16005,15876,15876,15875,16004,16003,16004,15875,15875,15874,16003,16002,16003,15874,15874,15873,16002,16001,16002,15873,15873,15872,16001,16000,16001,15872,16127,16126,16255,16254,16255,16126,16126,16125,16254,16253,16254,16125,16125,16124,16253,16252,16253,16124,16124,16123,16252,16251,16252,16123,16123,16122,16251,16250,16251,16122,16122,16121,16250,16249,16250,16121,16121,16120,16249,16248,16249,16120,16120,16119,16248,16247,16248,16119,16119,16118,16247,16246,16247,16118,16118,16117,16246,16245,16246,16117,16117,16116,16245,16244,16245,16116,16116,16115,16244,16243,16244,16115,16115,16114,16243,16242,16243,16114,16114,16113,16242,16241,16242,16113,16113,16112,16241,16240,16241,16112,16112,16111,16240,16239,16240,16111,16111,16110,16239,16238,16239,16110,16110,16109,16238,16237,16238,16109,16109,16108,16237,16236,16237,16108,16108,16107,16236,16235,16236,16107,16107,16106,16235,16234,16235,16106,16106,16105,16234,16233,16234,16105,16105,16104,16233,16232,16233,16104,16104,16103,16232,16231,16232,16103,16103,16102,16231,16230,16231,16102,16102,16101,16230,16229,16230,16101,16101,16100,16229,16228,16229,16100,16100,16099,16228,16227,16228,16099,16099,16098,16227,16226,16227,16098,16098,16097,16226,16225,16226,16097,16097,16096,16225,16224,16225,16096,16096,16095,16224,16223,16224,16095,16095,16094,16223,16222,16223,16094,16094,16093,16222,16221,16222,16093,16093,16092,16221,16220,16221,16092,16092,16091,16220,16219,16220,16091,16091,16090,16219,16218,16219,16090,16090,16089,16218,16217,16218,16089,16089,16088,16217,16216,16217,16088,16088,16087,16216,16215,16216,16087,16087,16086,16215,16214,16215,16086,16086,16085,16214,16213,16214,16085,16085,16084,16213,16212,16213,16084,16084,16083,16212,16211,16212,16083,16083,16082,16211,16210,16211,16082,16082,16081,16210,16209,16210,16081,16081,16080,16209,16208,16209,16080,16080,16079,16208,16207,16208,16079,16079,16078,16207,16206,16207,16078,16078,16077,16206,16205,16206,16077,16077,16076,16205,16204,16205,16076,16076,16075,16204,16203,16204,16075,16075,16074,16203,16202,16203,16074,16074,16073,16202,16201,16202,16073,16073,16072,16201,16200,16201,16072,16072,16071,16200,16199,16200,16071,16071,16070,16199,16198,16199,16070,16070,16069,16198,16197,16198,16069,16069,16068,16197,16196,16197,16068,16068,16067,16196,16195,16196,16067,16067,16066,16195,16194,16195,16066,16066,16065,16194,16193,16194,16065,16065,16064,16193,16192,16193,16064,16064,16063,16192,16191,16192,16063,16063,16062,16191,16190,16191,16062,16062,16061,16190,16189,16190,16061,16061,16060,16189,16188,16189,16060,16060,16059,16188,16187,16188,16059,16059,16058,16187,16186,16187,16058,16058,16057,16186,16185,16186,16057,16057,16056,16185,16184,16185,16056,16056,16055,16184,16183,16184,16055,16055,16054,16183,16182,16183,16054,16054,16053,16182,16181,16182,16053,16053,16052,16181,16180,16181,16052,16052,16051,16180,16179,16180,16051,16051,16050,16179,16178,16179,16050,16050,16049,16178,16177,16178,16049,16049,16048,16177,16176,16177,16048,16048,16047,16176,16175,16176,16047,16047,16046,16175,16174,16175,16046,16046,16045,16174,16173,16174,16045,16045,16044,16173,16172,16173,16044,16044,16043,16172,16171,16172,16043,16043,16042,16171,16170,16171,16042,16042,16041,16170,16169,16170,16041,16041,16040,16169,16168,16169,16040,16040,16039,16168,16167,16168,16039,16039,16038,16167,16166,16167,16038,16038,16037,16166,16165,16166,16037,16037,16036,16165,16164,16165,16036,16036,16035,16164,16163,16164,16035,16035,16034,16163,16162,16163,16034,16034,16033,16162,16161,16162,16033,16033,16032,16161,16160,16161,16032,16032,16031,16160,16159,16160,16031,16031,16030,16159,16158,16159,16030,16030,16029,16158,16157,16158,16029,16029,16028,16157,16156,16157,16028,16028,16027,16156,16155,16156,16027,16027,16026,16155,16154,16155,16026,16026,16025,16154,16153,16154,16025,16025,16024,16153,16152,16153,16024,16024,16023,16152,16151,16152,16023,16023,16022,16151,16150,16151,16022,16022,16021,16150,16149,16150,16021,16021,16020,16149,16148,16149,16020,16020,16019,16148,16147,16148,16019,16019,16018,16147,16146,16147,16018,16018,16017,16146,16145,16146,16017,16017,16016,16145,16144,16145,16016,16016,16015,16144,16143,16144,16015,16015,16014,16143,16142,16143,16014,16014,16013,16142,16141,16142,16013,16013,16012,16141,16140,16141,16012,16012,16011,16140,16139,16140,16011,16011,16010,16139,16138,16139,16010,16010,16009,16138,16137,16138,16009,16009,16008,16137,16136,16137,16008,16008,16007,16136,16135,16136,16007,16007,16006,16135,16134,16135,16006,16006,16005,16134,16133,16134,16005,16005,16004,16133,16132,16133,16004,16004,16003,16132,16131,16132,16003,16003,16002,16131,16130,16131,16002,16002,16001,16130,16129,16130,16001,16001,16000,16129,16128,16129,16000,16255,16254,16383,16382,16383,16254,16254,16253,16382,16381,16382,16253,16253,16252,16381,16380,16381,16252,16252,16251,16380,16379,16380,16251,16251,16250,16379,16378,16379,16250,16250,16249,16378,16377,16378,16249,16249,16248,16377,16376,16377,16248,16248,16247,16376,16375,16376,16247,16247,16246,16375,16374,16375,16246,16246,16245,16374,16373,16374,16245,16245,16244,16373,16372,16373,16244,16244,16243,16372,16371,16372,16243,16243,16242,16371,16370,16371,16242,16242,16241,16370,16369,16370,16241,16241,16240,16369,16368,16369,16240,16240,16239,16368,16367,16368,16239,16239,16238,16367,16366,16367,16238,16238,16237,16366,16365,16366,16237,16237,16236,16365,16364,16365,16236,16236,16235,16364,16363,16364,16235,16235,16234,16363,16362,16363,16234,16234,16233,16362,16361,16362,16233,16233,16232,16361,16360,16361,16232,16232,16231,16360,16359,16360,16231,16231,16230,16359,16358,16359,16230,16230,16229,16358,16357,16358,16229,16229,16228,16357,16356,16357,16228,16228,16227,16356,16355,16356,16227,16227,16226,16355,16354,16355,16226,16226,16225,16354,16353,16354,16225,16225,16224,16353,16352,16353,16224,16224,16223,16352,16351,16352,16223,16223,16222,16351,16350,16351,16222,16222,16221,16350,16349,16350,16221,16221,16220,16349,16348,16349,16220,16220,16219,16348,16347,16348,16219,16219,16218,16347,16346,16347,16218,16218,16217,16346,16345,16346,16217,16217,16216,16345,16344,16345,16216,16216,16215,16344,16343,16344,16215,16215,16214,16343,16342,16343,16214,16214,16213,16342,16341,16342,16213,16213,16212,16341,16340,16341,16212,16212,16211,16340,16339,16340,16211,16211,16210,16339,16338,16339,16210,16210,16209,16338,16337,16338,16209,16209,16208,16337,16336,16337,16208,16208,16207,16336,16335,16336,16207,16207,16206,16335,16334,16335,16206,16206,16205,16334,16333,16334,16205,16205,16204,16333,16332,16333,16204,16204,16203,16332,16331,16332,16203,16203,16202,16331,16330,16331,16202,16202,16201,16330,16329,16330,16201,16201,16200,16329,16328,16329,16200,16200,16199,16328,16327,16328,16199,16199,16198,16327,16326,16327,16198,16198,16197,16326,16325,16326,16197,16197,16196,16325,16324,16325,16196,16196,16195,16324,16323,16324,16195,16195,16194,16323,16322,16323,16194,16194,16193,16322,16321,16322,16193,16193,16192,16321,16320,16321,16192,16192,16191,16320,16319,16320,16191,16191,16190,16319,16318,16319,16190,16190,16189,16318,16317,16318,16189,16189,16188,16317,16316,16317,16188,16188,16187,16316,16315,16316,16187,16187,16186,16315,16314,16315,16186,16186,16185,16314,16313,16314,16185,16185,16184,16313,16312,16313,16184,16184,16183,16312,16311,16312,16183,16183,16182,16311,16310,16311,16182,16182,16181,16310,16309,16310,16181,16181,16180,16309,16308,16309,16180,16180,16179,16308,16307,16308,16179,16179,16178,16307,16306,16307,16178,16178,16177,16306,16305,16306,16177,16177,16176,16305,16304,16305,16176,16176,16175,16304,16303,16304,16175,16175,16174,16303,16302,16303,16174,16174,16173,16302,16301,16302,16173,16173,16172,16301,16300,16301,16172,16172,16171,16300,16299,16300,16171,16171,16170,16299,16298,16299,16170,16170,16169,16298,16297,16298,16169,16169,16168,16297,16296,16297,16168,16168,16167,16296,16295,16296,16167,16167,16166,16295,16294,16295,16166,16166,16165,16294,16293,16294,16165,16165,16164,16293,16292,16293,16164,16164,16163,16292,16291,16292,16163,16163,16162,16291,16290,16291,16162,16162,16161,16290,16289,16290,16161,16161,16160,16289,16288,16289,16160,16160,16159,16288,16287,16288,16159,16159,16158,16287,16286,16287,16158,16158,16157,16286,16285,16286,16157,16157,16156,16285,16284,16285,16156,16156,16155,16284,16283,16284,16155,16155,16154,16283,16282,16283,16154,16154,16153,16282,16281,16282,16153,16153,16152,16281,16280,16281,16152,16152,16151,16280,16279,16280,16151,16151,16150,16279,16278,16279,16150,16150,16149,16278,16277,16278,16149,16149,16148,16277,16276,16277,16148,16148,16147,16276,16275,16276,16147,16147,16146,16275,16274,16275,16146,16146,16145,16274,16273,16274,16145,16145,16144,16273,16272,16273,16144,16144,16143,16272,16271,16272,16143,16143,16142,16271,16270,16271,16142,16142,16141,16270,16269,16270,16141,16141,16140,16269,16268,16269,16140,16140,16139,16268,16267,16268,16139,16139,16138,16267,16266,16267,16138,16138,16137,16266,16265,16266,16137,16137,16136,16265,16264,16265,16136,16136,16135,16264,16263,16264,16135,16135,16134,16263,16262,16263,16134,16134,16133,16262,16261,16262,16133,16133,16132,16261,16260,16261,16132,16132,16131,16260,16259,16260,16131,16131,16130,16259,16258,16259,16130,16130,16129,16258,16257,16258,16129,16129,16128,16257,16256,16257,16128]
    		)
    	});
    });

    const p = 0.85065080835204;
    const q = 0.5257311121191336;

    const position = new Float32Array([
    	-q, +p,  0,
    	+q, +p,  0,
    	-q, -p,  0,
    	+q, -p,  0,
    	 0, -q, +p,
    	 0, +q, +p,
    	 0, -q, -p,
    	 0, +q, -p,
    	+p,  0, -q,
    	+p,  0, +q,
    	-p,  0, -q,
    	-p,  0, +q
    ]);

    const index = new Uint16Array([
    	0, 11, 5,
    	0, 5, 1,
    	0, 1, 7,
    	0, 7, 10,
    	0, 10, 11,
    	1, 5, 9,
    	5, 11, 4,
    	11, 10, 2,
    	10, 7, 6,
    	7, 1, 8,
    	3, 9, 4,
    	3, 4, 2,
    	3, 2, 6,
    	3, 6, 8,
    	3, 8, 9,
    	4, 9, 5,
    	2, 4, 11,
    	6, 2, 10,
    	8, 6, 7,
    	9, 8, 1
    ]);

    const smooth_geometry = [
    	new Geometry({
    		position: { data: position, size: 3 },
    		normal: { data: position, size: 3 }
    	}, { index })
    ];

    function subdivide(geometry) {
    	const index = new Uint32Array(geometry.index.length * 4);

    	const old_position = geometry.attributes.position.data;
    	const new_positions = [];
    	const lookup = new Map();

    	function get_index(point) {
    		const hash = `${point[0].toPrecision(6)},${point[1].toPrecision(6)},${point[2].toPrecision(6)}`;

    		if (lookup.has(hash)) {
    			return lookup.get(hash);
    		}

    		const index = new_positions.length;
    		lookup.set(hash, index);
    		new_positions[index] = point;
    		return index;
    	}

    	function mid(a, b) {
    		return get_index([
    			(a[0] + b[0]) / 2,
    			(a[1] + b[1]) / 2,
    			(a[2] + b[2]) / 2
    		]);
    	}

    	for (let i = 0; i < geometry.index.length; i += 3) {
    		const c0 = geometry.index[i + 0];
    		const c1 = geometry.index[i + 1];
    		const c2 = geometry.index[i + 2];

    		const v0 = [
    			old_position[c0 * 3 + 0],
    			old_position[c0 * 3 + 1],
    			old_position[c0 * 3 + 2]
    		];

    		const v1 = [
    			old_position[c1 * 3 + 0],
    			old_position[c1 * 3 + 1],
    			old_position[c1 * 3 + 2]
    		];

    		const v2 = [
    			old_position[c2 * 3 + 0],
    			old_position[c2 * 3 + 1],
    			old_position[c2 * 3 + 2]
    		];

    		const a = mid(v0, v1);
    		const b = mid(v1, v2);
    		const c = mid(v2, v0);

    		// four new faces
    		const j = i * 4;

    		index[j + 0] = get_index(v0);
    		index[j + 1] = a;
    		index[j + 2] = c;

    		index[j + 3] = get_index(v1);
    		index[j + 4] = b;
    		index[j + 5] = a;

    		index[j + 6] = get_index(v2);
    		index[j + 7] = c;
    		index[j + 8] = b;

    		index[j + 9] = a;
    		index[j + 10] = b;
    		index[j + 11] = c;
    	}

    	const position = new Float32Array(new_positions.length * 3);
    	for (let i = 0; i < new_positions.length; i += 1) {
    		const vector = normalize(new_positions[i]);

    		position[i * 3 + 0] = vector[0];
    		position[i * 3 + 1] = vector[1];
    		position[i * 3 + 2] = vector[2];
    	}

    	return new Geometry({
    		position: { data: position, size: 3 },
    		normal: { data: position, size: 3 }
    	}, { index })
    }

    function create_smooth_geometry$1(subdivisions = 0) {
    	if (!smooth_geometry[subdivisions]) {
    		const geometry = create_smooth_geometry$1(subdivisions - 1);
    		smooth_geometry[subdivisions] = subdivide(geometry);
    	}

    	return smooth_geometry[subdivisions];
    }

    function create_flat_geometry$1(subdivisions) {
    	throw new Error(`TODO implement flat sphere geometry`);
    }

    var icosphere = memoize(({ subdivisions = 0, shading = 'smooth' } = {}) => {
    	return shading === 'smooth'
    		? create_smooth_geometry$1(subdivisions)
    		: create_flat_geometry$1();
    });

    const PI = Math.PI;
    const PI2 = PI * 2;

    function create_smooth_geometry$2(turns, bands) {
    	const num_vertices = (turns + 1) * (bands + 1);
    	const num_faces_per_turn = 2 * (bands - 1);
    	const num_faces = num_faces_per_turn * turns;

    	const position = new Float32Array(num_vertices * 3); // doubles as normal
    	const uv = new Float32Array(num_vertices * 2);
    	const index = new Uint32Array(num_faces * 3);

    	let position_index = 0;
    	let uv_index = 0;

    	for (let i = 0; i <= turns; i += 1) {
    		const u = i / turns;

    		for (let j = 0; j <= bands; j += 1) {
    			const v = j / bands;

    			const x = -Math.cos(u * PI2) * Math.sin(v * PI);
    			const y = Math.cos(v * PI);
    			const z = Math.sin(u * PI2) * Math.sin(v * PI);

    			position[position_index++] = x;
    			position[position_index++] = y;
    			position[position_index++] = z;

    			uv[uv_index++] = u;
    			uv[uv_index++] = v;
    		}
    	}

    	let face_index = 0;

    	for (let i = 0; i < turns; i += 1) {
    		const offset = i * (bands + 1);

    		// north pole face
    		index[face_index++] = offset + 0;
    		index[face_index++] = offset + 1;
    		index[face_index++] = offset + bands + 2;

    		for (let j = 1; j < bands - 1; j += 1) {
    			index[face_index++] = offset + j;
    			index[face_index++] = offset + j + 1;
    			index[face_index++] = offset + j + bands + 1;

    			index[face_index++] = offset + j + bands + 1;
    			index[face_index++] = offset + j + 1;
    			index[face_index++] = offset + j + bands + 2;
    		}

    		index[face_index++] = offset + bands - 1;
    		index[face_index++] = offset + bands;
    		index[face_index++] = offset + bands * 2;
    	}

    	return new Geometry({
    		position: {
    			data: position,
    			size: 3
    		},
    		normal: {
    			data: position,
    			size: 3
    		},
    		uv: {
    			data: uv,
    			size: 2
    		}
    	}, {
    		index
    	});
    }

    function create_flat_geometry$2(turns, bands) {
    	throw new Error('TODO implement flat geometry');
    }

    var sphere = memoize(({ turns = 8, bands = 6, shading = 'smooth' } = {}) => {
    	return shading === 'smooth'
    		? create_smooth_geometry$2(turns, bands)
    		: create_flat_geometry$2();
    });

    // https://www.khronos.org/registry/webgl/specs/1.0/
    const UNSIGNED_BYTE                  = 0x1401;
    const RGBA                           = 0x1908;
    const LINEAR                         = 0x2601;
    const TEXTURE_MIN_FILTER             = 0x2801;
    const TEXTURE_WRAP_S                 = 0x2802;
    const TEXTURE_WRAP_T                 = 0x2803;

    /* TextureTarget */
    const TEXTURE_2D                     = 0x0DE1;
    const CLAMP_TO_EDGE                  = 0x812F;

    const worker_url = (typeof Blob !== 'undefined' && URL.createObjectURL(new Blob(
    	[`self.onmessage = e => { self.onmessage = null; eval(e.data); };`],
    	{ type: 'application/javascript' }
    ))) || typeof window !== 'undefined' && window.SVELTE_GL_WORKER_URL;

    const image_cache = new Map();

    function load_image(src) {
    	if (!worker_url) {
    		throw new Error(`Workers cannot be created from Blob URLs in this browser. Please set SVELTE_GL_WORKER_URL`);
    	}

    	if (!image_cache.has(src)) {
    		image_cache.set(src, new Promise((fulfil, reject) => {
    			if (typeof createImageBitmap !== 'undefined') {
    				// TODO pool workers?
    				const worker = create_worker(worker_url, () => {
    					self.onmessage = e => {
    						fetch(e.data, { mode: 'cors' })
    							.then(response => response.blob())
    							.then(blobData => createImageBitmap(blobData))
    							.then(bitmap => {
    								self.postMessage({ bitmap }, [bitmap]);
    							})
    							.catch(error => {
    								self.postMessage({
    									error: {
    										message: error.message,
    										stack: error.stack
    									}
    								});
    							});
    					};
    				});

    				worker.onmessage = e => {
    					if (e.data.error) {
    						image_cache.delete(src);
    						reject(e.data.error);
    					}

    					else fulfil(e.data.bitmap);
    				};

    				worker.postMessage(new URL(src, location.href).href);
    			} else {
    				const img = new Image();
    				img.crossOrigin = '';
    				img.onload = () => fulfil(img);
    				img.onerror = e => {
    					image_cache.delete(src);
    					reject(e);
    				};
    				img.src = src;
    			}
    		}));
    	}

    	return image_cache.get(src);
    }

    const is_power_of_two = n => (n & (n - 1)) === 0;

    const black_pixel = new Uint8Array([0, 0, 0, 255]);

    class TextureInstance {
    	constructor(scene, texture) {
    		const { gl } = scene;

    		this._ = gl.createTexture();

    		if (typeof texture.data === 'string') {
    			this.bind(gl, texture, black_pixel);

    			texture.ready.then(() => {
    				this.bind(gl, texture, texture.data);
    				scene.invalidate();
    			});
    		} else {
    			this.bind(gl, texture, texture.data);
    		}
    	}

    	bind(gl, texture, data) {
    		gl.bindTexture(TEXTURE_2D, this._);
    		gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);

    		if (ArrayBuffer.isView(data)) {
    			// TODO figure out where this goes
    			const width = 1;
    			const height = 1;

    			gl.texImage2D(TEXTURE_2D, 0, RGBA, width, height, 0, RGBA, UNSIGNED_BYTE, data);
    		} else {
    			gl.texImage2D(TEXTURE_2D, 0, RGBA, RGBA, UNSIGNED_BYTE, data);
    		}

    		gl.generateMipmap(TEXTURE_2D);

    		const width  = 'naturalWidth'  in data ? data.naturalWidth  : data.width;
    		const height = 'naturalHeight' in data ? data.naturalHeight : data.height;

    		if (is_power_of_two(width) && is_power_of_two(height)) {
    			gl.texParameteri(TEXTURE_2D, TEXTURE_WRAP_S, texture.opts.wrapS);
    			gl.texParameteri(TEXTURE_2D, TEXTURE_WRAP_T, texture.opts.wrapT);
    			gl.texParameteri(TEXTURE_2D, TEXTURE_MIN_FILTER, texture.opts.minFilter);
    		} else {
    			gl.texParameteri(TEXTURE_2D, TEXTURE_WRAP_S, CLAMP_TO_EDGE);
    			gl.texParameteri(TEXTURE_2D, TEXTURE_WRAP_T, CLAMP_TO_EDGE);
    			gl.texParameteri(TEXTURE_2D, TEXTURE_MIN_FILTER, LINEAR);
    		}
    	}
    }

    const caches$1 = new Map();
    let resolved;

    class Texture {
    	constructor(data, opts = {}) {
    		this.data = data;

    		this.opts = {
    			width:          opts.width     || 1,
    			height:         opts.height    || 1,
    			internalFormat: opts.format    || RGBA,
    			srcFormat:      opts.srcFormat || RGBA,
    			srcType:        opts.srcType   || UNSIGNED_BYTE,
    			wrapS:          opts.wrapS     || CLAMP_TO_EDGE,
    			wrapT:          opts.wrapT     || CLAMP_TO_EDGE,
    			minFilter:      opts.minFilter || LINEAR
    		};

    		// TODO clamp, mipmaps, etc

    		this.hash = JSON.stringify(this.opts);

    		this.ready = typeof data === 'string'
    			? load_image(data).then(img => {
    				this.data = img;
    			})
    			: resolved || (resolved = Promise.resolve());
    	}

    	instantiate(scene, index) {
    		if (!caches$1.has(scene)) caches$1.set(scene, new Map());
    		const a = caches$1.get(scene);

    		if (!a.has(this.data)) a.set(this.data, new Map());
    		const b = a.get(this.data);

    		if (!b.has(this.hash)) b.set(this.hash, new TextureInstance(scene, this, index));
    		return b.get(this.hash);
    	}
    }

    // scene

    var GL = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Scene: Scene,
        Group: Group,
        Layer: Layer,
        Mesh: Mesh,
        Overlay: Overlay,
        Point: Point,
        Target: Target,
        AmbientLight: AmbientLight,
        DirectionalLight: DirectionalLight,
        PointLight: PointLight,
        OrbitControls: OrbitControls,
        PerspectiveCamera: PerspectiveCamera,
        OrthoCamera: OrthoCamera,
        Geometry: Geometry,
        box: box,
        cone: cone,
        dodecahedron: dodecahedron,
        plane: plane,
        sprite: sprite,
        terrain: terrain,
        icosphere: icosphere,
        sphere: sphere,
        Texture: Texture
    });

    function generateFace (ctx, gridColor, gridSpacing) {
        ctx.strokeStyle = gridColor;
        const w = ctx.canvas.width,
            h = ctx.canvas.height;
        ctx.beginPath();
        for (let x=gridSpacing/2; x<=w; x+=gridSpacing){
            ctx.save();
            ctx.translate(0.5, 0);
            ctx.moveTo(x-0.5,0);      // 0.5 offset so that 1px lines are crisp
            ctx.lineTo(x-0.5,h);
            ctx.restore();
        }
        for (let y=gridSpacing/2;y<=h;y+=gridSpacing){
            ctx.save();
            ctx.translate(0, 0.5);
            ctx.moveTo(0,y-0.5);
            ctx.lineTo(w,y-0.5);
            ctx.restore();
        }
        ctx.stroke();
    }

    var quadVert = "\n#define NAME normal-selected-txt-vertex-shader\nin vec3 position;\nin vec3 normal;\nin vec2 uv;\nout vec3 v_normal;\nout vec2 v_textureCoords;\nvoid main() {\n\tv_normal = normal;\n\tv_textureCoords = uv;\n\tgl_Position = PROJECTION * VIEW * MODEL * vec4(position, 1.0);\n}\n";

    var quadFrag = "\nuniform vec3 color;\nuniform vec3 emissive;\nuniform float alpha;\nuniform float specularity;\nuniform sampler2D bumpmap;\nuniform sampler2D colormap;\nuniform sampler2D emissivemap;\nuniform sampler2D specularitymap;\nuniform vec3 FOG_COLOR;\nuniform float FOG_DENSITY;\nuniform sampler2D uTexture0;\nuniform sampler2D uTexture1;\nuniform sampler2D uTexture2;\nuniform sampler2D uTexture3;\nuniform sampler2D uTexture4;\nuniform sampler2D uTexture5;\n#define NAME normal-selected-txt-fragment-shader\nin vec3 v_normal;\nin vec2 v_textureCoords;\nout mediump vec4 fragColor;\nvoid main () {\n\tif (v_normal.z == 1.0) {\n\t\tfragColor = texture(uTexture0, v_textureCoords);\n\t} else if (v_normal.x == -1.0) {\n\t\tfragColor = texture(uTexture1, v_textureCoords);\n\t} else if (v_normal.z == -1.0) {\n\t\tfragColor = texture(uTexture2, v_textureCoords);\n\t} else if (v_normal.x == 1.0) {\n\t\tfragColor = texture(uTexture3, v_textureCoords);\n\t} else if (v_normal.y == 1.0) {\n\t\tfragColor = texture(uTexture4, v_textureCoords);\n\t} else if (v_normal.y == -1.0) {\n\t\tfragColor = texture(uTexture5, v_textureCoords);\n\t} else {\n\t\tfragColor = vec4(color, 1.0);\n\t}\n\tfragColor.a *= alpha;\n}\n";

    /* src/apps/GLSLApp.svelte generated by Svelte v3.24.0 */

    const { console: console_1 } = globals;
    const file$4 = "src/apps/GLSLApp.svelte";

    // (253:4) <GL.OrbitControls maxPolarAngle={Math.PI / 2} {location}>
    function create_default_slot_2(ctx) {
    	let gl_perspectivecamera;
    	let updating_location;
    	let current;

    	function gl_perspectivecamera_location_binding(value) {
    		/*gl_perspectivecamera_location_binding*/ ctx[9].call(null, value);
    	}

    	let gl_perspectivecamera_props = { lookAt: "center", near: 0.01, far: 1000 };

    	if (/*location*/ ctx[5] !== void 0) {
    		gl_perspectivecamera_props.location = /*location*/ ctx[5];
    	}

    	gl_perspectivecamera = new PerspectiveCamera({
    			props: gl_perspectivecamera_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(gl_perspectivecamera, "location", gl_perspectivecamera_location_binding));

    	const block = {
    		c: function create() {
    			create_component(gl_perspectivecamera.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(gl_perspectivecamera, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const gl_perspectivecamera_changes = {};

    			if (!updating_location && dirty & /*location*/ 32) {
    				updating_location = true;
    				gl_perspectivecamera_changes.location = /*location*/ ctx[5];
    				add_flush_callback(() => updating_location = false);
    			}

    			gl_perspectivecamera.$set(gl_perspectivecamera_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_perspectivecamera.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_perspectivecamera.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gl_perspectivecamera, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2.name,
    		type: "slot",
    		source: "(253:4) <GL.OrbitControls maxPolarAngle={Math.PI / 2} {location}>",
    		ctx
    	});

    	return block;
    }

    // (318:4) <GL.Group location={[light.x,light.y,light.z]}>
    function create_default_slot_1(ctx) {
    	let gl_mesh;
    	let t;
    	let gl_pointlight;
    	let current;

    	gl_mesh = new Mesh({
    			props: {
    				geometry: sphere({ turns: 36, bands: 36 }),
    				location: [0, 0.2, 0],
    				scale: 0.1,
    				uniforms: { color: 16777215, emissive: 16711680 }
    			},
    			$$inline: true
    		});

    	gl_pointlight = new PointLight({
    			props: {
    				location: [0, 0, 0],
    				color: 16711680,
    				intensity: 0.6
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(gl_mesh.$$.fragment);
    			t = space();
    			create_component(gl_pointlight.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(gl_mesh, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(gl_pointlight, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_mesh.$$.fragment, local);
    			transition_in(gl_pointlight.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_mesh.$$.fragment, local);
    			transition_out(gl_pointlight.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gl_mesh, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(gl_pointlight, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1.name,
    		type: "slot",
    		source: "(318:4) <GL.Group location={[light.x,light.y,light.z]}>",
    		ctx
    	});

    	return block;
    }

    // (250:0) <GL.Scene bind:gl={webgl} backgroundOpacity=1.0 process_extra_shader_components={process_extra_shader_components}>
    function create_default_slot$1(ctx) {
    	let gl_target;
    	let t0;
    	let gl_orbitcontrols;
    	let t1;
    	let gl_ambientlight;
    	let t2;
    	let gl_directionallight;
    	let t3;
    	let gl_mesh0;
    	let t4;
    	let gl_mesh1;
    	let t5;
    	let gl_mesh2;
    	let t6;
    	let gl_mesh3;
    	let t7;
    	let gl_mesh4;
    	let t8;
    	let gl_mesh5;
    	let t9;
    	let gl_group;
    	let current;

    	gl_target = new Target({
    			props: {
    				id: "center",
    				location: [0, /*h*/ ctx[2] / 2, 0]
    			},
    			$$inline: true
    		});

    	gl_orbitcontrols = new OrbitControls({
    			props: {
    				maxPolarAngle: Math.PI / 2,
    				location: /*location*/ ctx[5],
    				$$slots: { default: [create_default_slot_2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	gl_ambientlight = new AmbientLight({
    			props: { intensity: 0.3 },
    			$$inline: true
    		});

    	gl_directionallight = new DirectionalLight({
    			props: { direction: [-1, -1, -1], intensity: 0.5 },
    			$$inline: true
    		});

    	gl_mesh0 = new Mesh({
    			props: {
    				geometry: box({}),
    				location: [0, /*h*/ ctx[2] / 2, 0],
    				rotation: [0, -20, 0],
    				scale: [/*w*/ ctx[1], /*h*/ ctx[2], /*d*/ ctx[3]],
    				vert: quadVert,
    				frag: quadFrag,
    				uniforms: {
    					color: adjustColor(/*color*/ ctx[0]),
    					alpha: 1
    				},
    				transparent: true
    			},
    			$$inline: true
    		});

    	gl_mesh1 = new Mesh({
    			props: {
    				geometry: plane(),
    				location: [0, -0.01, 0],
    				rotation: [-90, 0, 0],
    				scale: 10,
    				uniforms: { color: 16777215 }
    			},
    			$$inline: true
    		});

    	gl_mesh2 = new Mesh({
    			props: {
    				geometry: plane(),
    				location: [0, 5, 0],
    				rotation: [90, 0, 0],
    				scale: 10,
    				uniforms: { color: 16777215 }
    			},
    			$$inline: true
    		});

    	gl_mesh3 = new Mesh({
    			props: {
    				geometry: plane(),
    				location: [0, -0.01, -10],
    				rotation: [0, 0, 0],
    				scale: 10,
    				uniforms: { color: 16777215 }
    			},
    			$$inline: true
    		});

    	gl_mesh4 = new Mesh({
    			props: {
    				geometry: plane(),
    				location: [10, -0.01, 0],
    				rotation: [0, -90, 0],
    				scale: 10,
    				uniforms: { color: 16777215 }
    			},
    			$$inline: true
    		});

    	gl_mesh5 = new Mesh({
    			props: {
    				geometry: plane(),
    				location: [-10, -0.01, 0],
    				rotation: [0, 90, 0],
    				scale: 10,
    				uniforms: { color: 16777215 }
    			},
    			$$inline: true
    		});

    	gl_group = new Group({
    			props: {
    				location: [/*light*/ ctx[4].x, /*light*/ ctx[4].y, /*light*/ ctx[4].z],
    				$$slots: { default: [create_default_slot_1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(gl_target.$$.fragment);
    			t0 = space();
    			create_component(gl_orbitcontrols.$$.fragment);
    			t1 = space();
    			create_component(gl_ambientlight.$$.fragment);
    			t2 = space();
    			create_component(gl_directionallight.$$.fragment);
    			t3 = space();
    			create_component(gl_mesh0.$$.fragment);
    			t4 = space();
    			create_component(gl_mesh1.$$.fragment);
    			t5 = space();
    			create_component(gl_mesh2.$$.fragment);
    			t6 = space();
    			create_component(gl_mesh3.$$.fragment);
    			t7 = space();
    			create_component(gl_mesh4.$$.fragment);
    			t8 = space();
    			create_component(gl_mesh5.$$.fragment);
    			t9 = space();
    			create_component(gl_group.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(gl_target, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(gl_orbitcontrols, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(gl_ambientlight, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(gl_directionallight, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(gl_mesh0, target, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(gl_mesh1, target, anchor);
    			insert_dev(target, t5, anchor);
    			mount_component(gl_mesh2, target, anchor);
    			insert_dev(target, t6, anchor);
    			mount_component(gl_mesh3, target, anchor);
    			insert_dev(target, t7, anchor);
    			mount_component(gl_mesh4, target, anchor);
    			insert_dev(target, t8, anchor);
    			mount_component(gl_mesh5, target, anchor);
    			insert_dev(target, t9, anchor);
    			mount_component(gl_group, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const gl_target_changes = {};
    			if (dirty & /*h*/ 4) gl_target_changes.location = [0, /*h*/ ctx[2] / 2, 0];
    			gl_target.$set(gl_target_changes);
    			const gl_orbitcontrols_changes = {};
    			if (dirty & /*location*/ 32) gl_orbitcontrols_changes.location = /*location*/ ctx[5];

    			if (dirty & /*$$scope, location*/ 262176) {
    				gl_orbitcontrols_changes.$$scope = { dirty, ctx };
    			}

    			gl_orbitcontrols.$set(gl_orbitcontrols_changes);
    			const gl_mesh0_changes = {};
    			if (dirty & /*h*/ 4) gl_mesh0_changes.location = [0, /*h*/ ctx[2] / 2, 0];
    			if (dirty & /*w, h, d*/ 14) gl_mesh0_changes.scale = [/*w*/ ctx[1], /*h*/ ctx[2], /*d*/ ctx[3]];

    			if (dirty & /*color*/ 1) gl_mesh0_changes.uniforms = {
    				color: adjustColor(/*color*/ ctx[0]),
    				alpha: 1
    			};

    			gl_mesh0.$set(gl_mesh0_changes);
    			const gl_group_changes = {};
    			if (dirty & /*light*/ 16) gl_group_changes.location = [/*light*/ ctx[4].x, /*light*/ ctx[4].y, /*light*/ ctx[4].z];

    			if (dirty & /*$$scope*/ 262144) {
    				gl_group_changes.$$scope = { dirty, ctx };
    			}

    			gl_group.$set(gl_group_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_target.$$.fragment, local);
    			transition_in(gl_orbitcontrols.$$.fragment, local);
    			transition_in(gl_ambientlight.$$.fragment, local);
    			transition_in(gl_directionallight.$$.fragment, local);
    			transition_in(gl_mesh0.$$.fragment, local);
    			transition_in(gl_mesh1.$$.fragment, local);
    			transition_in(gl_mesh2.$$.fragment, local);
    			transition_in(gl_mesh3.$$.fragment, local);
    			transition_in(gl_mesh4.$$.fragment, local);
    			transition_in(gl_mesh5.$$.fragment, local);
    			transition_in(gl_group.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_target.$$.fragment, local);
    			transition_out(gl_orbitcontrols.$$.fragment, local);
    			transition_out(gl_ambientlight.$$.fragment, local);
    			transition_out(gl_directionallight.$$.fragment, local);
    			transition_out(gl_mesh0.$$.fragment, local);
    			transition_out(gl_mesh1.$$.fragment, local);
    			transition_out(gl_mesh2.$$.fragment, local);
    			transition_out(gl_mesh3.$$.fragment, local);
    			transition_out(gl_mesh4.$$.fragment, local);
    			transition_out(gl_mesh5.$$.fragment, local);
    			transition_out(gl_group.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gl_target, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(gl_orbitcontrols, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(gl_ambientlight, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(gl_directionallight, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(gl_mesh0, detaching);
    			if (detaching) detach_dev(t4);
    			destroy_component(gl_mesh1, detaching);
    			if (detaching) detach_dev(t5);
    			destroy_component(gl_mesh2, detaching);
    			if (detaching) detach_dev(t6);
    			destroy_component(gl_mesh3, detaching);
    			if (detaching) detach_dev(t7);
    			destroy_component(gl_mesh4, detaching);
    			if (detaching) detach_dev(t8);
    			destroy_component(gl_mesh5, detaching);
    			if (detaching) detach_dev(t9);
    			destroy_component(gl_group, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(250:0) <GL.Scene bind:gl={webgl} backgroundOpacity=1.0 process_extra_shader_components={process_extra_shader_components}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let gl_scene;
    	let updating_gl;
    	let t0;
    	let div;
    	let label0;
    	let input0;
    	let input0_min_value;
    	let input0_max_value;
    	let input0_step_value;
    	let br0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let label1;
    	let input1;
    	let input1_min_value;
    	let input1_max_value;
    	let input1_step_value;
    	let br1;
    	let t5;
    	let t6;
    	let t7;
    	let t8;
    	let label2;
    	let input2;
    	let input2_min_value;
    	let input2_max_value;
    	let input2_step_value;
    	let br2;
    	let t9;
    	let t10;
    	let t11;
    	let current;
    	let mounted;
    	let dispose;

    	function gl_scene_gl_binding(value) {
    		/*gl_scene_gl_binding*/ ctx[10].call(null, value);
    	}

    	let gl_scene_props = {
    		backgroundOpacity: "1.0",
    		process_extra_shader_components: /*process_extra_shader_components*/ ctx[7],
    		$$slots: { default: [create_default_slot$1] },
    		$$scope: { ctx }
    	};

    	if (/*webgl*/ ctx[6] !== void 0) {
    		gl_scene_props.gl = /*webgl*/ ctx[6];
    	}

    	gl_scene = new Scene({ props: gl_scene_props, $$inline: true });
    	binding_callbacks.push(() => bind(gl_scene, "gl", gl_scene_gl_binding));

    	const block = {
    		c: function create() {
    			create_component(gl_scene.$$.fragment);
    			t0 = space();
    			div = element("div");
    			label0 = element("label");
    			input0 = element("input");
    			br0 = element("br");
    			t1 = text(" width (");
    			t2 = text(/*w*/ ctx[1]);
    			t3 = text(")");
    			t4 = space();
    			label1 = element("label");
    			input1 = element("input");
    			br1 = element("br");
    			t5 = text(" height (");
    			t6 = text(/*h*/ ctx[2]);
    			t7 = text(")");
    			t8 = space();
    			label2 = element("label");
    			input2 = element("input");
    			br2 = element("br");
    			t9 = text(" depth (");
    			t10 = text(/*d*/ ctx[3]);
    			t11 = text(")");
    			attr_dev(input0, "type", "range");
    			attr_dev(input0, "min", input0_min_value = 0.1);
    			attr_dev(input0, "max", input0_max_value = 5);
    			attr_dev(input0, "step", input0_step_value = 0.1);
    			add_location(input0, file$4, 335, 8, 12016);
    			add_location(br0, file$4, 335, 74, 12082);
    			add_location(label0, file$4, 334, 4, 12000);
    			attr_dev(input1, "type", "range");
    			attr_dev(input1, "min", input1_min_value = 0.1);
    			attr_dev(input1, "max", input1_max_value = 5);
    			attr_dev(input1, "step", input1_step_value = 0.1);
    			add_location(input1, file$4, 339, 8, 12135);
    			add_location(br1, file$4, 339, 74, 12201);
    			add_location(label1, file$4, 338, 4, 12119);
    			attr_dev(input2, "type", "range");
    			attr_dev(input2, "min", input2_min_value = 0.1);
    			attr_dev(input2, "max", input2_max_value = 5);
    			attr_dev(input2, "step", input2_step_value = 0.1);
    			add_location(input2, file$4, 343, 8, 12255);
    			add_location(br2, file$4, 343, 74, 12321);
    			add_location(label2, file$4, 342, 4, 12239);
    			attr_dev(div, "class", "controls svelte-1wtc1bv");
    			add_location(div, file$4, 333, 0, 11973);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(gl_scene, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, label0);
    			append_dev(label0, input0);
    			set_input_value(input0, /*w*/ ctx[1]);
    			append_dev(label0, br0);
    			append_dev(label0, t1);
    			append_dev(label0, t2);
    			append_dev(label0, t3);
    			append_dev(div, t4);
    			append_dev(div, label1);
    			append_dev(label1, input1);
    			set_input_value(input1, /*h*/ ctx[2]);
    			append_dev(label1, br1);
    			append_dev(label1, t5);
    			append_dev(label1, t6);
    			append_dev(label1, t7);
    			append_dev(div, t8);
    			append_dev(div, label2);
    			append_dev(label2, input2);
    			set_input_value(input2, /*d*/ ctx[3]);
    			append_dev(label2, br2);
    			append_dev(label2, t9);
    			append_dev(label2, t10);
    			append_dev(label2, t11);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "change", /*input0_change_input_handler*/ ctx[11]),
    					listen_dev(input0, "input", /*input0_change_input_handler*/ ctx[11]),
    					listen_dev(input1, "change", /*input1_change_input_handler*/ ctx[12]),
    					listen_dev(input1, "input", /*input1_change_input_handler*/ ctx[12]),
    					listen_dev(input2, "change", /*input2_change_input_handler*/ ctx[13]),
    					listen_dev(input2, "input", /*input2_change_input_handler*/ ctx[13])
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const gl_scene_changes = {};

    			if (dirty & /*$$scope, light, h, w, d, color, location*/ 262207) {
    				gl_scene_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_gl && dirty & /*webgl*/ 64) {
    				updating_gl = true;
    				gl_scene_changes.gl = /*webgl*/ ctx[6];
    				add_flush_callback(() => updating_gl = false);
    			}

    			gl_scene.$set(gl_scene_changes);

    			if (dirty & /*w*/ 2) {
    				set_input_value(input0, /*w*/ ctx[1]);
    			}

    			if (!current || dirty & /*w*/ 2) set_data_dev(t2, /*w*/ ctx[1]);

    			if (dirty & /*h*/ 4) {
    				set_input_value(input1, /*h*/ ctx[2]);
    			}

    			if (!current || dirty & /*h*/ 4) set_data_dev(t6, /*h*/ ctx[2]);

    			if (dirty & /*d*/ 8) {
    				set_input_value(input2, /*d*/ ctx[3]);
    			}

    			if (!current || dirty & /*d*/ 8) set_data_dev(t10, /*d*/ ctx[3]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_scene.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_scene.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gl_scene, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function adjustColor(clr, height = 1) {
    	const r = parseInt("0x" + clr.substr(1, 2), 16),
    		g = parseInt("0x" + clr.substr(3, 2), 16),
    		b = parseInt("0x" + clr.substr(5, 2), 16);

    	const hr = Math.floor(r * (height / 0.25)), hb = Math.floor(b * (height / 0.25));
    	return Math.abs(((hr < 255 ? hr : r) << 16) + (g << 8) + (hb < 255 ? hb : b));
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let { title } = $$props;
    	let { color = "#F7C77B" } = $$props;
    	let w = 1;
    	let h = 1;
    	let d = 1;
    	const light = {};

    	// initial view
    	let location = new Float32Array([0.25, 1, 2.5]);

    	let target = new Float32Array([0, 1, 0]);
    	const captureViewDirection = (loc, tgt) => "";
    	let webgl;
    	let textures = [];
    	const ctx = document.createElement("canvas").getContext("2d");
    	ctx.canvas.width = 256;
    	ctx.canvas.height = 256;

    	let process_extra_shader_components = (gl, material, model) => {
    		// console.log("Process Extra Shader Components");
    		const program = material.program;

    		if (material.vertName == "normal-selected-txt-vertex-shader" && material.fragName == "normal-selected-txt-fragment-shader") {
    			// console.log(material.vertName, material.fragName);
    			const uvCoordLocation = gl.getAttribLocation(program, "uv");

    			// gl.disable(gl.CULL_FACE); // for double-sided poly
    			gl.enableVertexAttribArray(uvCoordLocation);

    			const textureBuffer = gl.createBuffer();

    			const textureCoords = [
    				// front: 0 1 2 3
    				1,
    				1,
    				0,
    				1,
    				1,
    				0,
    				0,
    				0,
    				// left: 1 4 3 6
    				1,
    				1,
    				0,
    				1,
    				1,
    				0,
    				0,
    				0,
    				// back: 4 5 6 7
    				1,
    				1,
    				0,
    				1,
    				1,
    				0,
    				0,
    				0,
    				// right: 5 0 7 2
    				1,
    				1,
    				0,
    				1,
    				1,
    				0,
    				0,
    				0,
    				// top: 4 1 5 0
    				0,
    				1,
    				0,
    				0,
    				1,
    				1,
    				1,
    				0,
    				// bottom: 3 6 2 7
    				0,
    				1,
    				0,
    				0,
    				1,
    				1,
    				1,
    				0
    			];

    			gl.bindBuffer(gl.ARRAY_BUFFER, textureBuffer);
    			gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoords), gl.STATIC_DRAW);
    			gl.vertexAttribPointer(uvCoordLocation, 2, gl.FLOAT, false, 0, 0);

    			// Un-bind buffers
    			gl.bindBuffer(gl.ARRAY_BUFFER, null);

    			gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);

    			if (material.vertName == "normal-selected-txt-vertex-shader" && material.fragName == "normal-selected-txt-fragment-shader") {
    				for (let t = 0; t < 6; ++t) {
    					if (!!textures[t]) {
    						const fragmentTextureLocation = gl.getUniformLocation(program, "uTexture" + t);

    						switch (t) {
    							case 1:
    								gl.activeTexture(gl.TEXTURE1);
    								break;
    							case 2:
    								gl.activeTexture(gl.TEXTURE2);
    								break;
    							case 3:
    								gl.activeTexture(gl.TEXTURE3);
    								break;
    							case 4:
    								gl.activeTexture(gl.TEXTURE4);
    								break;
    							case 5:
    								gl.activeTexture(gl.TEXTURE5);
    								break;
    							default:
    								gl.activeTexture(gl.TEXTURE0);
    						}

    						gl.bindTexture(gl.TEXTURE_2D, textures[t]);
    						gl.uniform1i(fragmentTextureLocation, t);
    					}
    				}
    			} else {
    				if (!!textures[0]) {
    					const fragmentTextureLocation = gl.getUniformLocation(program, "uTexture0");
    					gl.activeTexture(gl.TEXTURE0);
    					gl.bindTexture(gl.TEXTURE_2D, textures[0]);
    					gl.uniform1i(fragmentTextureLocation, 0);
    				}
    			}
    		} else if (material.vertName == "texture-vertex-shader" && material.fragName == "cubemap-fragment-shader") {
    			// console.log(material.vertName, material.fragName);
    			const fragmentTextureLocation = gl.getUniformLocation(program, "uTexture");

    			if (!!textures[0]) {
    				gl.bindTexture(gl.TEXTURE_CUBE_MAP, textures[0]);
    				gl.uniform1i(fragmentTextureLocation, 0);
    			}
    		}
    	};

    	onMount(() => {
    		let frame;
    		console.log(webgl);

    		for (let t = 0; t < 6; ++t) {
    			if (!!textures[t] == false) {
    				// Create a texture and create initial bind
    				textures[t] = webgl.createTexture();

    				webgl.bindTexture(webgl.TEXTURE_2D, textures[t]);
    			} // webgl.bindTexture(webgl.TEXTURE_CUBE_MAP, texture);
    		}

    		const faceInfos = [
    			// {target: webgl.TEXTURE_CUBE_MAP_POSITIVE_X, faceColor: '#F00', textColor: '#0FF', text: '+X'},
    			// {target: webgl.TEXTURE_CUBE_MAP_NEGATIVE_X, faceColor: '#FF0', textColor: '#00F', text: '-X'},
    			// {target: webgl.TEXTURE_CUBE_MAP_POSITIVE_Y, faceColor: '#0F0', textColor: '#F0F', text: '+Y'},
    			// {target: webgl.TEXTURE_CUBE_MAP_NEGATIVE_Y, faceColor: '#0FF', textColor: '#F00', text: '-Y'},
    			// {target: webgl.TEXTURE_CUBE_MAP_POSITIVE_Z, faceColor: '#00F', textColor: '#FF0', text: '+Z'},
    			// {target: webgl.TEXTURE_CUBE_MAP_NEGATIVE_Z, faceColor: '#F0F', textColor: '#0F0', text: '-Z'}
    			{
    				target: webgl.TEXTURE_2D,
    				faceColor: "#F00",
    				textColor: "#0FF",
    				text: "+X"
    			},
    			{
    				target: webgl.TEXTURE_2D,
    				faceColor: "#FF0",
    				textColor: "#00F",
    				text: "-X"
    			},
    			{
    				target: webgl.TEXTURE_2D,
    				faceColor: "#0F0",
    				textColor: "#F0F",
    				text: "+Y"
    			},
    			{
    				target: webgl.TEXTURE_2D,
    				faceColor: "#0FF",
    				textColor: "#F00",
    				text: "-Y"
    			},
    			{
    				target: webgl.TEXTURE_2D,
    				faceColor: "#00F",
    				textColor: "#FF0",
    				text: "+Z"
    			},
    			{
    				target: webgl.TEXTURE_2D,
    				faceColor: "#F0F",
    				textColor: "#0F0",
    				text: "-Z"
    			}
    		];

    		faceInfos.forEach((faceInfo, i, a) => {
    			const { target, faceColor, textColor, text } = faceInfo;

    			// Asynchronously load an image
    			const img = new Image();

    			img.crossOrigin = "";
    			img.id = "" + (i + 1);

    			// Use 2d face generator to generate 6 images
    			// generateFace(ctx, faceColor, textColor, text);
    			generateFace(ctx, faceColor, 16);

    			// Upload the canvas to the cubemap face.
    			const level = 0;

    			const internalFormat = webgl.RGBA;
    			const format = webgl.RGBA;
    			const type = webgl.UNSIGNED_BYTE;
    			const width = ctx.canvas.width;
    			const height = ctx.canvas.height;
    			const previewWidth = ctx.canvas.width / 4;
    			img.style.margin = "auto";
    			img.style.position = "fixed";
    			img.style.top = "0px";
    			img.style.left = i * previewWidth + "px";
    			img.style.width = previewWidth + "px";

    			img.addEventListener("load", function () {
    				// Now that the image has loaded make copy it to the texture.
    				console.log("Bind to texture");

    				webgl.bindTexture(webgl.TEXTURE_2D, textures[i]);

    				// webgl.bindTexture(webgl.TEXTURE_CUBE_MAP, texture);
    				webgl.pixelStorei(webgl.UNPACK_FLIP_Y_WEBGL, true);

    				webgl.texImage2D(target, level, internalFormat, format, type, img);
    				webgl.generateMipmap(webgl.TEXTURE_2D);

    				// if (i >= 5) webgl.generateMipmap(webgl.TEXTURE_CUBE_MAP);
    				webgl.texParameteri(webgl.TEXTURE_2D, webgl.TEXTURE_MAG_FILTER, webgl.NEAREST_MIPMAP_LINEAR); // webgl.LINEAR_MIPMAP_LINEAR);

    				webgl.texParameteri(webgl.TEXTURE_2D, webgl.TEXTURE_MIN_FILTER, webgl.NEAREST_MIPMAP_LINEAR); // webgl.LINEAR_MIPMAP_LINEAR);
    			}); // webgl.texParameteri(webgl.TEXTURE_CUBE_MAP, webgl.TEXTURE_MIN_FILTER, webgl.NEAREST_MIPMAP_LINEAR); // webgl.LINEAR_MIPMAP_LINEAR);
    			// document.body.appendChild(img);

    			ctx.canvas.toBlob(blob => {
    				img.src = URL.createObjectURL(blob);
    			});

    			// Setup each face so it's immediately renderable
    			if (!!textures[i]) webgl.texImage2D(target, level, internalFormat, width, height, 0, format, type, null);
    		});

    		const loop = () => {
    			frame = requestAnimationFrame(loop);
    			$$invalidate(4, light.x = 3 * Math.sin(Date.now() * 0.001), light);
    			$$invalidate(4, light.y = 2.5 + 2 * Math.sin(Date.now() * 0.0004), light);
    			$$invalidate(4, light.z = 3 * Math.cos(Date.now() * 0.002), light);
    		};

    		loop();
    		return () => cancelAnimationFrame(frame);
    	});

    	const writable_props = ["title", "color"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<GLSLApp> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("GLSLApp", $$slots, []);

    	function gl_perspectivecamera_location_binding(value) {
    		location = value;
    		$$invalidate(5, location);
    	}

    	function gl_scene_gl_binding(value) {
    		webgl = value;
    		$$invalidate(6, webgl);
    	}

    	function input0_change_input_handler() {
    		w = to_number(this.value);
    		$$invalidate(1, w);
    	}

    	function input1_change_input_handler() {
    		h = to_number(this.value);
    		$$invalidate(2, h);
    	}

    	function input2_change_input_handler() {
    		d = to_number(this.value);
    		$$invalidate(3, d);
    	}

    	$$self.$set = $$props => {
    		if ("title" in $$props) $$invalidate(8, title = $$props.title);
    		if ("color" in $$props) $$invalidate(0, color = $$props.color);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		GL,
    		generateFace,
    		vert: quadVert,
    		frag: quadFrag,
    		title,
    		color,
    		w,
    		h,
    		d,
    		light,
    		location,
    		target,
    		captureViewDirection,
    		adjustColor,
    		webgl,
    		textures,
    		ctx,
    		process_extra_shader_components
    	});

    	$$self.$inject_state = $$props => {
    		if ("title" in $$props) $$invalidate(8, title = $$props.title);
    		if ("color" in $$props) $$invalidate(0, color = $$props.color);
    		if ("w" in $$props) $$invalidate(1, w = $$props.w);
    		if ("h" in $$props) $$invalidate(2, h = $$props.h);
    		if ("d" in $$props) $$invalidate(3, d = $$props.d);
    		if ("location" in $$props) $$invalidate(5, location = $$props.location);
    		if ("target" in $$props) target = $$props.target;
    		if ("webgl" in $$props) $$invalidate(6, webgl = $$props.webgl);
    		if ("textures" in $$props) textures = $$props.textures;
    		if ("process_extra_shader_components" in $$props) $$invalidate(7, process_extra_shader_components = $$props.process_extra_shader_components);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		color,
    		w,
    		h,
    		d,
    		light,
    		location,
    		webgl,
    		process_extra_shader_components,
    		title,
    		gl_perspectivecamera_location_binding,
    		gl_scene_gl_binding,
    		input0_change_input_handler,
    		input1_change_input_handler,
    		input2_change_input_handler
    	];
    }

    class GLSLApp extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, { title: 8, color: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "GLSLApp",
    			options,
    			id: create_fragment$e.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*title*/ ctx[8] === undefined && !("title" in props)) {
    			console_1.warn("<GLSLApp> was created without expected prop 'title'");
    		}
    	}

    	get title() {
    		throw new Error("<GLSLApp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<GLSLApp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<GLSLApp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<GLSLApp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/apps/components/NavigationControls.svelte generated by Svelte v3.24.0 */

    const { console: console_1$1 } = globals;
    const file$5 = "src/apps/components/NavigationControls.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[38] = list[i];
    	child_ctx[39] = list;
    	child_ctx[40] = i;
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[38] = list[i];
    	child_ctx[41] = list;
    	child_ctx[40] = i;
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[42] = list[i];
    	child_ctx[43] = list;
    	child_ctx[44] = i;
    	return child_ctx;
    }

    // (459:4) {#if (groups.length > 0)}
    function create_if_block_2(ctx) {
    	let each_1_anchor;
    	let each_value_2 = /*groups*/ ctx[0];
    	validate_each_argument(each_value_2);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*groups, dispatch*/ 513) {
    				each_value_2 = /*groups*/ ctx[0];
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_2.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(459:4) {#if (groups.length > 0)}",
    		ctx
    	});

    	return block;
    }

    // (460:8) {#each groups as group, i}
    function create_each_block_2(ctx) {
    	let label;
    	let input;
    	let t0;
    	let t1_value = /*i*/ ctx[44] + 1 + "";
    	let t1;
    	let t2;
    	let br;
    	let mounted;
    	let dispose;

    	function input_change_handler() {
    		/*input_change_handler*/ ctx[19].call(input, /*each_value_2*/ ctx[43], /*i*/ ctx[44]);
    	}

    	const block = {
    		c: function create() {
    			label = element("label");
    			input = element("input");
    			t0 = text(" Group ");
    			t1 = text(t1_value);
    			t2 = space();
    			br = element("br");
    			attr_dev(input, "type", "checkbox");
    			attr_dev(input, "class", "svelte-pu5kxd");
    			add_location(input, file$5, 461, 16, 15271);
    			add_location(label, file$5, 460, 12, 15247);
    			add_location(br, file$5, 462, 20, 15395);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    			append_dev(label, input);
    			input.checked = /*group*/ ctx[42];
    			append_dev(label, t0);
    			append_dev(label, t1);
    			append_dev(label, t2);
    			insert_dev(target, br, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "change", input_change_handler),
    					listen_dev(input, "click", /*click_handler*/ ctx[20], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*groups*/ 1) {
    				input.checked = /*group*/ ctx[42];
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			if (detaching) detach_dev(br);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2.name,
    		type: "each",
    		source: "(460:8) {#each groups as group, i}",
    		ctx
    	});

    	return block;
    }

    // (467:4) {#if (options['labels'].length > 0 && options['values'].length > 0)}
    function create_if_block_1(ctx) {
    	let each_1_anchor;
    	let each_value_1 = /*options*/ ctx[1]["values"];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*options*/ 2) {
    				each_value_1 = /*options*/ ctx[1]["values"];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(467:4) {#if (options['labels'].length > 0 && options['values'].length > 0)}",
    		ctx
    	});

    	return block;
    }

    // (468:8) {#each options['values'] as option, o}
    function create_each_block_1(ctx) {
    	let label;
    	let input;
    	let t0;
    	let t1_value = /*options*/ ctx[1]["labels"][/*o*/ ctx[40]] + "";
    	let t1;
    	let t2;
    	let br;
    	let mounted;
    	let dispose;

    	function input_change_handler_1() {
    		/*input_change_handler_1*/ ctx[21].call(input, /*each_value_1*/ ctx[41], /*o*/ ctx[40]);
    	}

    	const block = {
    		c: function create() {
    			label = element("label");
    			input = element("input");
    			t0 = space();
    			t1 = text(t1_value);
    			t2 = space();
    			br = element("br");
    			attr_dev(input, "type", "checkbox");
    			attr_dev(input, "class", "svelte-pu5kxd");
    			add_location(input, file$5, 469, 16, 15585);
    			add_location(label, file$5, 468, 12, 15561);
    			add_location(br, file$5, 470, 20, 15676);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    			append_dev(label, input);
    			input.checked = /*option*/ ctx[38];
    			append_dev(label, t0);
    			append_dev(label, t1);
    			append_dev(label, t2);
    			insert_dev(target, br, anchor);

    			if (!mounted) {
    				dispose = listen_dev(input, "change", input_change_handler_1);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*options*/ 2) {
    				input.checked = /*option*/ ctx[38];
    			}

    			if (dirty[0] & /*options*/ 2 && t1_value !== (t1_value = /*options*/ ctx[1]["labels"][/*o*/ ctx[40]] + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			if (detaching) detach_dev(br);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(468:8) {#each options['values'] as option, o}",
    		ctx
    	});

    	return block;
    }

    // (475:4) {#if (rangeOptions['labels'].length > 0 && rangeValues.length > 0)}
    function create_if_block$1(ctx) {
    	let each_1_anchor;
    	let each_value = /*rangeValues*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*tryDateTime, rangeValues, rangeOptions*/ 1044) {
    				each_value = /*rangeValues*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(475:4) {#if (rangeOptions['labels'].length > 0 && rangeValues.length > 0)}",
    		ctx
    	});

    	return block;
    }

    // (476:8) {#each rangeValues as option, o}
    function create_each_block(ctx) {
    	let label;
    	let input;
    	let input_min_value;
    	let input_max_value;
    	let input_step_value;
    	let br0;
    	let t0;
    	let t1_value = /*rangeOptions*/ ctx[4]["labels"][/*o*/ ctx[40]] + "";
    	let t1;
    	let t2;
    	let t3_value = /*tryDateTime*/ ctx[10](/*option*/ ctx[38]) + "";
    	let t3;
    	let t4;
    	let br1;
    	let mounted;
    	let dispose;

    	function input_change_input_handler_1() {
    		/*input_change_input_handler_1*/ ctx[22].call(input, /*each_value*/ ctx[39], /*o*/ ctx[40]);
    	}

    	const block = {
    		c: function create() {
    			label = element("label");
    			input = element("input");
    			br0 = element("br");
    			t0 = space();
    			t1 = text(t1_value);
    			t2 = text("(");
    			t3 = text(t3_value);
    			t4 = text(")\n            ");
    			br1 = element("br");
    			attr_dev(input, "type", "range");
    			attr_dev(input, "min", input_min_value = /*rangeOptions*/ ctx[4]["min"][/*o*/ ctx[40]]);
    			attr_dev(input, "max", input_max_value = /*rangeOptions*/ ctx[4]["max"][/*o*/ ctx[40]]);
    			attr_dev(input, "step", input_step_value = /*rangeOptions*/ ctx[4]["step"][/*o*/ ctx[40]]);
    			add_location(input, file$5, 477, 16, 15859);
    			add_location(br0, file$5, 477, 147, 15990);
    			add_location(label, file$5, 476, 12, 15835);
    			add_location(br1, file$5, 479, 20, 16084);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    			append_dev(label, input);
    			set_input_value(input, /*option*/ ctx[38]);
    			append_dev(label, br0);
    			append_dev(label, t0);
    			append_dev(label, t1);
    			append_dev(label, t2);
    			append_dev(label, t3);
    			append_dev(label, t4);
    			insert_dev(target, br1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "change", input_change_input_handler_1),
    					listen_dev(input, "input", input_change_input_handler_1)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*rangeOptions*/ 16 && input_min_value !== (input_min_value = /*rangeOptions*/ ctx[4]["min"][/*o*/ ctx[40]])) {
    				attr_dev(input, "min", input_min_value);
    			}

    			if (dirty[0] & /*rangeOptions*/ 16 && input_max_value !== (input_max_value = /*rangeOptions*/ ctx[4]["max"][/*o*/ ctx[40]])) {
    				attr_dev(input, "max", input_max_value);
    			}

    			if (dirty[0] & /*rangeOptions*/ 16 && input_step_value !== (input_step_value = /*rangeOptions*/ ctx[4]["step"][/*o*/ ctx[40]])) {
    				attr_dev(input, "step", input_step_value);
    			}

    			if (dirty[0] & /*rangeValues*/ 4) {
    				set_input_value(input, /*option*/ ctx[38]);
    			}

    			if (dirty[0] & /*rangeOptions*/ 16 && t1_value !== (t1_value = /*rangeOptions*/ ctx[4]["labels"][/*o*/ ctx[40]] + "")) set_data_dev(t1, t1_value);
    			if (dirty[0] & /*rangeValues*/ 4 && t3_value !== (t3_value = /*tryDateTime*/ ctx[10](/*option*/ ctx[38]) + "")) set_data_dev(t3, t3_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			if (detaching) detach_dev(br1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(476:8) {#each rangeValues as option, o}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$f(ctx) {
    	let div1;
    	let div0;
    	let img;
    	let img_src_value;
    	let img_width_value;
    	let img_height_value;
    	let t0;
    	let canvas;
    	let canvas_width_value;
    	let canvas_height_value;
    	let t1;
    	let label0;
    	let b0;
    	let input;
    	let input_min_value;
    	let input_max_value;
    	let input_step_value;
    	let b1;
    	let br0;
    	let t4;
    	let t5;
    	let t6;
    	let br1;
    	let t7;
    	let t8;
    	let t9;
    	let t10;
    	let label1;
    	let button;
    	let t11_value = (/*isFullscreen*/ ctx[6] ? "minimize" : "maximize") + "";
    	let t11;
    	let mounted;
    	let dispose;
    	let if_block0 = /*groups*/ ctx[0].length > 0 && create_if_block_2(ctx);
    	let if_block1 = /*options*/ ctx[1]["labels"].length > 0 && /*options*/ ctx[1]["values"].length > 0 && create_if_block_1(ctx);
    	let if_block2 = /*rangeOptions*/ ctx[4]["labels"].length > 0 && /*rangeValues*/ ctx[2].length > 0 && create_if_block$1(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			img = element("img");
    			t0 = space();
    			canvas = element("canvas");
    			t1 = space();
    			label0 = element("label");
    			b0 = element("b");
    			b0.textContent = "-";
    			input = element("input");
    			b1 = element("b");
    			b1.textContent = "+";
    			br0 = element("br");
    			t4 = text("\n        magnification(");
    			t5 = text(/*zoomY*/ ctx[8]);
    			t6 = text(")\n    ");
    			br1 = element("br");
    			t7 = space();
    			if (if_block0) if_block0.c();
    			t8 = space();
    			if (if_block1) if_block1.c();
    			t9 = space();
    			if (if_block2) if_block2.c();
    			t10 = space();
    			label1 = element("label");
    			button = element("button");
    			t11 = text(t11_value);
    			attr_dev(img, "alt", "Navigation Controls Map");
    			if (img.src !== (img_src_value = /*map*/ ctx[5].src)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "width", img_width_value = /*map*/ ctx[5].style.width);
    			attr_dev(img, "height", img_height_value = /*map*/ ctx[5].style.height);
    			attr_dev(img, "class", "svelte-pu5kxd");
    			add_location(img, file$5, 442, 8, 14630);
    			attr_dev(canvas, "id", "terrain-navigation-cursor");
    			attr_dev(canvas, "width", canvas_width_value = /*map*/ ctx[5].width);
    			attr_dev(canvas, "height", canvas_height_value = /*map*/ ctx[5].height);
    			set_style(canvas, "border-color", /*color*/ ctx[3]);
    			attr_dev(canvas, "class", "svelte-pu5kxd");
    			add_location(canvas, file$5, 446, 8, 14779);
    			attr_dev(div0, "id", "terrain-navigation-view");
    			attr_dev(div0, "class", "svelte-pu5kxd");
    			add_location(div0, file$5, 441, 4, 14587);
    			add_location(b0, file$5, 454, 8, 14989);
    			attr_dev(input, "id", "magnification");
    			attr_dev(input, "type", "range");
    			attr_dev(input, "min", input_min_value = -4);
    			attr_dev(input, "max", input_max_value = 0.5);
    			attr_dev(input, "step", input_step_value = 0.1);
    			add_location(input, file$5, 454, 16, 14997);
    			add_location(b1, file$5, 454, 123, 15104);
    			add_location(br0, file$5, 454, 131, 15112);
    			add_location(label0, file$5, 453, 4, 14973);
    			add_location(br1, file$5, 456, 12, 15162);
    			add_location(button, file$5, 484, 8, 16138);
    			add_location(label1, file$5, 483, 4, 16122);
    			attr_dev(div1, "class", "controls right svelte-pu5kxd");
    			set_style(div1, "top", "-5em");
    			add_location(div1, file$5, 434, 0, 14363);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, img);
    			append_dev(div0, t0);
    			append_dev(div0, canvas);
    			append_dev(div1, t1);
    			append_dev(div1, label0);
    			append_dev(label0, b0);
    			append_dev(label0, input);
    			set_input_value(input, /*zoomY*/ ctx[8]);
    			append_dev(label0, b1);
    			append_dev(label0, br0);
    			append_dev(label0, t4);
    			append_dev(label0, t5);
    			append_dev(label0, t6);
    			append_dev(div1, br1);
    			append_dev(div1, t7);
    			if (if_block0) if_block0.m(div1, null);
    			append_dev(div1, t8);
    			if (if_block1) if_block1.m(div1, null);
    			append_dev(div1, t9);
    			if (if_block2) if_block2.m(div1, null);
    			append_dev(div1, t10);
    			append_dev(div1, label1);
    			append_dev(label1, button);
    			append_dev(button, t11);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "change", /*input_change_input_handler*/ ctx[18]),
    					listen_dev(input, "input", /*input_change_input_handler*/ ctx[18]),
    					listen_dev(
    						input,
    						"input",
    						function () {
    							if (is_function(/*zoomY*/ ctx[8])) /*zoomY*/ ctx[8].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						button,
    						"click",
    						function () {
    							if (is_function(/*toggleFullscreen*/ ctx[7])) /*toggleFullscreen*/ ctx[7].apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty[0] & /*map*/ 32 && img.src !== (img_src_value = /*map*/ ctx[5].src)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty[0] & /*map*/ 32 && img_width_value !== (img_width_value = /*map*/ ctx[5].style.width)) {
    				attr_dev(img, "width", img_width_value);
    			}

    			if (dirty[0] & /*map*/ 32 && img_height_value !== (img_height_value = /*map*/ ctx[5].style.height)) {
    				attr_dev(img, "height", img_height_value);
    			}

    			if (dirty[0] & /*map*/ 32 && canvas_width_value !== (canvas_width_value = /*map*/ ctx[5].width)) {
    				attr_dev(canvas, "width", canvas_width_value);
    			}

    			if (dirty[0] & /*map*/ 32 && canvas_height_value !== (canvas_height_value = /*map*/ ctx[5].height)) {
    				attr_dev(canvas, "height", canvas_height_value);
    			}

    			if (dirty[0] & /*color*/ 8) {
    				set_style(canvas, "border-color", /*color*/ ctx[3]);
    			}

    			if (dirty[0] & /*zoomY*/ 256) {
    				set_input_value(input, /*zoomY*/ ctx[8]);
    			}

    			if (dirty[0] & /*zoomY*/ 256) set_data_dev(t5, /*zoomY*/ ctx[8]);

    			if (/*groups*/ ctx[0].length > 0) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_2(ctx);
    					if_block0.c();
    					if_block0.m(div1, t8);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*options*/ ctx[1]["labels"].length > 0 && /*options*/ ctx[1]["values"].length > 0) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1(ctx);
    					if_block1.c();
    					if_block1.m(div1, t9);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*rangeOptions*/ ctx[4]["labels"].length > 0 && /*rangeValues*/ ctx[2].length > 0) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block$1(ctx);
    					if_block2.c();
    					if_block2.m(div1, t10);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (dirty[0] & /*isFullscreen*/ 64 && t11_value !== (t11_value = (/*isFullscreen*/ ctx[6] ? "minimize" : "maximize") + "")) set_data_dev(t11, t11_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const navWidth = 200, navHeight = 200;

    function instance$f($$self, $$props, $$invalidate) {
    	let { title } = $$props;
    	let { color = "#F7C77B" } = $$props;
    	let { extent = [[-1, -1], [1, 1]] } = $$props;
    	let { groups = {} } = $$props;
    	let { options = [] } = $$props;
    	let { rangeOptions = [] } = $$props;
    	let { rangeValues = [] } = $$props;
    	let { timeExtent = [] } = $$props;
    	let { viewLocation } = $$props, { viewTarget } = $$props;
    	let { worldPosition = { x: 0, y: 0, z: 0, r: 1 } } = $$props;
    	let dispatch = createEventDispatcher();
    	let formatPlayTime = time => "" + new Date(time).toString();
    	let mouse_x = 0, mouse_y = 0, mouse_down = false, mouse_disabled = false;
    	let navContext;
    	let positive_forward_vector_x = 0;
    	let positive_forward_vector_z = 0;
    	let map = new Image();
    	map.src = "images/map.png";
    	map.style.width = navWidth + "px";
    	map.style.height = navWidth + "px";

    	let terrainWidth = extent[1][0] - extent[0][0],
    		terrainDepth = extent[1][1] - extent[0][1];

    	let isFullscreen = false;
    	let sinceLastMovementEvent = 0;

    	let toggleFullscreen = function () {

    	};

    	let renderTerrainNavigationCursor = function (ctx) {
    		const width = ctx.canvas.width;
    		const height = ctx.canvas.height;
    		const focusSize = width / (4 * worldPosition.r); // 256
    		ctx.clearRect(0, 0, width, height);
    		ctx.strokeRect(width / 2 - focusSize / 2 + width * worldPosition.x / terrainWidth, height / 2 - focusSize / 2 + height * worldPosition.z / terrainDepth, focusSize, focusSize);
    	};

    	let triggerMovement = function (direction) {
    		// Get radius of viewing angle
    		const distance = 0.5 / worldPosition.r;

    		const vx = viewLocation[0] - viewTarget[0];
    		const vz = viewLocation[2] - viewTarget[2];
    		const r = Math.sqrt(Math.pow(vx, 2) + Math.pow(vz, 2));

    		// console.log(vx, vz, r, distance);
    		positive_forward_vector_x = vx * (r - distance) / r - vx;

    		positive_forward_vector_z = vz * (r - distance) / r - vz;

    		// console.log(positive_forward_vector_x, positive_forward_vector_z);
    		// Adjust worldPosition coords
    		switch (direction) {
    			case "forward":
    				$$invalidate(11, worldPosition.x += positive_forward_vector_x, worldPosition);
    				$$invalidate(11, worldPosition.z += positive_forward_vector_z, worldPosition);
    				break;
    			case "backward":
    				$$invalidate(11, worldPosition.x -= positive_forward_vector_x, worldPosition);
    				$$invalidate(11, worldPosition.z -= positive_forward_vector_z, worldPosition);
    				break;
    		} // // Need better math for lateral movement...

    		// case "left":
    		//     if (Math.abs(vx) > Math.abs(vz)) {
    		//         worldPosition.x -= positive_forward_vector_z;
    		//         worldPosition.z -= positive_forward_vector_x;
    		//     } else {
    		//         worldPosition.x += positive_forward_vector_z;
    		//         worldPosition.z += positive_forward_vector_x;
    		//     }
    		//     break;
    		// case "right":
    		//     if (Math.abs(vx) > Math.abs(vz)) {
    		//         worldPosition.x += positive_forward_vector_z;
    		//         worldPosition.z += positive_forward_vector_x;
    		//     } else {
    		//         worldPosition.x -= positive_forward_vector_z;
    		//         worldPosition.z -= positive_forward_vector_x;
    		//     }
    		//     break;
    		if (worldPosition.x < -terrainWidth * 0.45) $$invalidate(11, worldPosition.x = -terrainWidth * 0.45, worldPosition);

    		if (terrainWidth * 0.45 < worldPosition.x) $$invalidate(11, worldPosition.x = terrainWidth * 0.45, worldPosition);
    		if (worldPosition.z < -terrainDepth * 0.45) $$invalidate(11, worldPosition.z = -terrainDepth * 0.45, worldPosition);
    		if (terrainDepth * 0.45 < worldPosition.z) $$invalidate(11, worldPosition.z = terrainDepth * 0.45, worldPosition);

    		// Pass event to SvelteGL App for view update
    		dispatch("move");

    		if (!!navContext === true) {
    			renderTerrainNavigationCursor(navContext);
    		}
    	};

    	let tryDateTime = function (value) {
    		let toDate = value;

    		try {
    			if (parseInt(value) > 1577810000000) toDate = new Date(value).toString().match(/(.+) GMT/)[1];
    		} finally {
    			return toDate;
    		}
    	};

    	let zoom = function (y) {
    		$$invalidate(11, worldPosition.y = y, worldPosition);
    		$$invalidate(11, worldPosition.r = Math.pow(2, -y / 4), worldPosition);

    		// Pass event to SvelteGL App for view update
    		dispatch("move");

    		if (!!navContext === true) {
    			renderTerrainNavigationCursor(navContext);
    		}
    	};

    	let zoomY = 0;

    	let terrainNavigationCursor = function (cursorCanvas, glCanvas) {
    		const ctx = cursorCanvas.getContext("2d");
    		cursorCanvas.width = 1024;
    		cursorCanvas.height = 1024;
    		cursorCanvas.style.width = navWidth + "px";
    		cursorCanvas.style.height = navWidth + "px";
    		ctx.lineWidth = 8;
    		ctx.strokeStyle = "#ff3e00";
    		renderTerrainNavigationCursor(ctx);
    		let mouse_x = 0, mouse_y = 0, mouse_down = false;

    		const touchHit = function touchHit(event) {
    			// console.log(event.touches);
    			mouseHit(event.touches[0]);
    		};

    		const mouseHit = function mouseHit(event) {
    			const scale_correct = 2;
    			const current_x = event.clientX - (cursorCanvas.offsetParent.offsetLeft + cursorCanvas.offsetLeft); // / parseInt(canvas.style.width.substring(-2,3))
    			const current_y = event.clientY - (cursorCanvas.offsetParent.offsetTop + cursorCanvas.offsetTop); // / parseInt(canvas.style.height.substring(-2,3))

    			{
    				const delta_x = mouse_down ? current_x - mouse_x : 0;
    				const delta_y = mouse_down ? current_y - mouse_y : 0;

    				// if (mouse_down) {
    				//     console.log('mouse movement (', delta_x, ',', delta_y, ')');
    				// }
    				mouse_x = current_x;

    				mouse_y = current_y;

    				if (mouse_down) {
    					$$invalidate(11, worldPosition.x += scale_correct * (terrainWidth / 2 * delta_x / parseInt(cursorCanvas.style.width.substring(-2, 3))), worldPosition);
    					$$invalidate(11, worldPosition.z += scale_correct * (terrainDepth / 2 * delta_y / parseInt(cursorCanvas.style.height.substring(-2, 3))), worldPosition);

    					// Pass event to SvelteGL App for view update
    					dispatch("move");

    					renderTerrainNavigationCursor(ctx);
    				}
    			}
    		};

    		if ("ontouchmove" in document.createElement("div")) {
    			cursorCanvas.addEventListener("touchstart", function (e) {
    				{
    					// console.log('MouseDown');
    					touchHit(e);

    					mouse_down = true;
    				}

    				e.preventDefault();
    			});

    			cursorCanvas.addEventListener("touchmove", function (e) {
    				if ( mouse_down) {
    					touchHit(e);
    				}

    				e.preventDefault();
    			});

    			cursorCanvas.addEventListener("touchend", function (e) {
    				{
    					// console.log('MouseUp');
    					mouse_down = false;
    				}

    				e.preventDefault();
    			});

    			console.log("touch is present");
    		} else {
    			cursorCanvas.addEventListener("mousedown", function (e) {
    				{
    					// console.log('MouseDown');
    					mouseHit(e);

    					mouse_down = true;
    				}

    				e.preventDefault();
    			});

    			cursorCanvas.addEventListener("mousemove", mouseHit);

    			cursorCanvas.addEventListener("mouseup", function (e) {
    				{
    					// console.log('MouseUp');
    					mouse_down = false;
    				}

    				e.preventDefault();
    			});
    		}

    		let sinceLastMovementEvent = 0;

    		glCanvas.addEventListener("wheel", function (event) {
    			const wheelEvent = event || window["event"];

    			if (new Date().getTime() - sinceLastMovementEvent > 66) {
    				sinceLastMovementEvent = new Date().getTime();

    				if (wheelEvent.deltaY < 0) {
    					triggerMovement("forward");
    				} else if (wheelEvent.deltaY > 0) {
    					triggerMovement("backward");
    				}
    			}

    			wheelEvent.preventDefault();
    		});

    		document.addEventListener("keydown", function (event) {
    			const kbEvent = event || window["event"]; // cross-browser shenanigans
    			console.log(kbEvent);

    			if (kbEvent["keyCode"] === 32) {
    				// spacebar
    				kbEvent.preventDefault();
    			} else if (kbEvent["keyCode"] === 38 || kbEvent["keyCode"] === 87) {
    				// up || W
    				if (new Date().getTime() - sinceLastMovementEvent > 66) {
    					sinceLastMovementEvent = new Date().getTime();
    					triggerMovement("forward");
    				}

    				kbEvent.preventDefault();
    			} else if (kbEvent["keyCode"] === 40 || kbEvent["keyCode"] === 83) {
    				// down || S
    				if (new Date().getTime() - sinceLastMovementEvent > 66) {
    					sinceLastMovementEvent = new Date().getTime();
    					triggerMovement("backward");
    				}

    				kbEvent.preventDefault();
    				return true;
    			} else if (kbEvent["keyCode"] === 37 || kbEvent["keyCode"] === 65) {
    				// left || A
    				if (new Date().getTime() - sinceLastMovementEvent > 66) {
    					sinceLastMovementEvent = new Date().getTime();
    					triggerMovement("left");
    				}

    				kbEvent.preventDefault();
    			} else if (kbEvent["keyCode"] === 39 || kbEvent["keyCode"] === 68) {
    				// right || D
    				if (new Date().getTime() - sinceLastMovementEvent > 66) {
    					sinceLastMovementEvent = new Date().getTime();
    					triggerMovement("right");
    				}

    				kbEvent.preventDefault();
    			} else if (kbEvent["keyCode"] === 27) {
    				// ESC
    				kbEvent["minimize"] = true;

    				toggleFullscreen(kbEvent); // minimize
    				kbEvent.preventDefault();
    			} else {
    				console.log("Keyboard Event: ", kbEvent["keyCode"]);
    			}

    			return true;
    		});

    		document.getElementById("magnification").addEventListener("keydown", function (event) {
    			const kbEvent = event || window["event"]; // cross-browser shenanigans
    			kbEvent.preventDefault();
    			return true;
    		});

    		return ctx;
    	};

    	const init = function () {
    		console.log("Initializing Terrain Navigation Controls...");

    		document.querySelectorAll("main div[role=\"main\"] .container canvas").forEach(c => {
    			console.log(c);

    			if (!!navContext !== true) {
    				const mapCursor = document.getElementById("terrain-navigation-cursor");
    				navContext = terrainNavigationCursor(mapCursor, c);
    				let intro;
    				let sinceLastMoveBack = new Date().getTime();

    				const loop = () => {
    					if (zoomY > -2.5) {
    						$$invalidate(8, zoomY -= 0.15);
    						zoom(-zoomY.toFixed(2));

    						if (new Date().getTime() - sinceLastMoveBack > 66) {
    							sinceLastMoveBack = new Date().getTime();
    							triggerMovement("backward");
    						}

    						intro = requestAnimationFrame(loop);
    					} else {
    						$$invalidate(8, zoomY = -2.5);
    						zoom(-zoomY);
    					}
    				};

    				setTimeout(loop, 533);
    			}

    			$$invalidate(7, toggleFullscreen = event => {
    				console.log(event["minimize"]);

    				if (!!event["minimize"] | !!isFullscreen) {
    					$$invalidate(6, isFullscreen = false);
    					c.parentElement.className = c.parentElement.className.replace("fullscreen", "");

    					for (const control of document.getElementsByClassName("controls")) {
    						control.className = control.className.replace("fullscreen", "");
    					}
    				} else {
    					$$invalidate(6, isFullscreen = true);
    					c.parentElement.className += " fullscreen";

    					for (const control of document.getElementsByClassName("controls")) {
    						control.className += " fullscreen";
    					}
    				}
    			});
    		});
    	};

    	const writable_props = [
    		"title",
    		"color",
    		"extent",
    		"groups",
    		"options",
    		"rangeOptions",
    		"rangeValues",
    		"timeExtent",
    		"viewLocation",
    		"viewTarget",
    		"worldPosition"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$1.warn(`<NavigationControls> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("NavigationControls", $$slots, []);

    	function input_change_input_handler() {
    		zoomY = to_number(this.value);
    		$$invalidate(8, zoomY);
    	}

    	function input_change_handler(each_value_2, i) {
    		each_value_2[i] = this.checked;
    		$$invalidate(0, groups);
    	}

    	const click_handler = () => dispatch("clickCheckbox");

    	function input_change_handler_1(each_value_1, o) {
    		each_value_1[o] = this.checked;
    		$$invalidate(1, options);
    	}

    	function input_change_input_handler_1(each_value, o) {
    		each_value[o] = to_number(this.value);
    		$$invalidate(2, rangeValues);
    	}

    	$$self.$set = $$props => {
    		if ("title" in $$props) $$invalidate(12, title = $$props.title);
    		if ("color" in $$props) $$invalidate(3, color = $$props.color);
    		if ("extent" in $$props) $$invalidate(13, extent = $$props.extent);
    		if ("groups" in $$props) $$invalidate(0, groups = $$props.groups);
    		if ("options" in $$props) $$invalidate(1, options = $$props.options);
    		if ("rangeOptions" in $$props) $$invalidate(4, rangeOptions = $$props.rangeOptions);
    		if ("rangeValues" in $$props) $$invalidate(2, rangeValues = $$props.rangeValues);
    		if ("timeExtent" in $$props) $$invalidate(14, timeExtent = $$props.timeExtent);
    		if ("viewLocation" in $$props) $$invalidate(15, viewLocation = $$props.viewLocation);
    		if ("viewTarget" in $$props) $$invalidate(16, viewTarget = $$props.viewTarget);
    		if ("worldPosition" in $$props) $$invalidate(11, worldPosition = $$props.worldPosition);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		title,
    		color,
    		extent,
    		groups,
    		options,
    		rangeOptions,
    		rangeValues,
    		timeExtent,
    		viewLocation,
    		viewTarget,
    		worldPosition,
    		dispatch,
    		formatPlayTime,
    		mouse_x,
    		mouse_y,
    		mouse_down,
    		mouse_disabled,
    		navContext,
    		positive_forward_vector_x,
    		positive_forward_vector_z,
    		navWidth,
    		navHeight,
    		map,
    		terrainWidth,
    		terrainDepth,
    		isFullscreen,
    		sinceLastMovementEvent,
    		toggleFullscreen,
    		renderTerrainNavigationCursor,
    		triggerMovement,
    		tryDateTime,
    		zoom,
    		zoomY,
    		terrainNavigationCursor,
    		init
    	});

    	$$self.$inject_state = $$props => {
    		if ("title" in $$props) $$invalidate(12, title = $$props.title);
    		if ("color" in $$props) $$invalidate(3, color = $$props.color);
    		if ("extent" in $$props) $$invalidate(13, extent = $$props.extent);
    		if ("groups" in $$props) $$invalidate(0, groups = $$props.groups);
    		if ("options" in $$props) $$invalidate(1, options = $$props.options);
    		if ("rangeOptions" in $$props) $$invalidate(4, rangeOptions = $$props.rangeOptions);
    		if ("rangeValues" in $$props) $$invalidate(2, rangeValues = $$props.rangeValues);
    		if ("timeExtent" in $$props) $$invalidate(14, timeExtent = $$props.timeExtent);
    		if ("viewLocation" in $$props) $$invalidate(15, viewLocation = $$props.viewLocation);
    		if ("viewTarget" in $$props) $$invalidate(16, viewTarget = $$props.viewTarget);
    		if ("worldPosition" in $$props) $$invalidate(11, worldPosition = $$props.worldPosition);
    		if ("dispatch" in $$props) $$invalidate(9, dispatch = $$props.dispatch);
    		if ("formatPlayTime" in $$props) formatPlayTime = $$props.formatPlayTime;
    		if ("mouse_x" in $$props) mouse_x = $$props.mouse_x;
    		if ("mouse_y" in $$props) mouse_y = $$props.mouse_y;
    		if ("mouse_down" in $$props) mouse_down = $$props.mouse_down;
    		if ("mouse_disabled" in $$props) mouse_disabled = $$props.mouse_disabled;
    		if ("navContext" in $$props) navContext = $$props.navContext;
    		if ("positive_forward_vector_x" in $$props) positive_forward_vector_x = $$props.positive_forward_vector_x;
    		if ("positive_forward_vector_z" in $$props) positive_forward_vector_z = $$props.positive_forward_vector_z;
    		if ("map" in $$props) $$invalidate(5, map = $$props.map);
    		if ("terrainWidth" in $$props) terrainWidth = $$props.terrainWidth;
    		if ("terrainDepth" in $$props) terrainDepth = $$props.terrainDepth;
    		if ("isFullscreen" in $$props) $$invalidate(6, isFullscreen = $$props.isFullscreen);
    		if ("sinceLastMovementEvent" in $$props) sinceLastMovementEvent = $$props.sinceLastMovementEvent;
    		if ("toggleFullscreen" in $$props) $$invalidate(7, toggleFullscreen = $$props.toggleFullscreen);
    		if ("renderTerrainNavigationCursor" in $$props) renderTerrainNavigationCursor = $$props.renderTerrainNavigationCursor;
    		if ("triggerMovement" in $$props) triggerMovement = $$props.triggerMovement;
    		if ("tryDateTime" in $$props) $$invalidate(10, tryDateTime = $$props.tryDateTime);
    		if ("zoom" in $$props) $$invalidate(36, zoom = $$props.zoom);
    		if ("zoomY" in $$props) $$invalidate(8, zoomY = $$props.zoomY);
    		if ("terrainNavigationCursor" in $$props) terrainNavigationCursor = $$props.terrainNavigationCursor;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*zoomY*/ 256) {
    			 zoom(-zoomY);
    		}
    	};

    	return [
    		groups,
    		options,
    		rangeValues,
    		color,
    		rangeOptions,
    		map,
    		isFullscreen,
    		toggleFullscreen,
    		zoomY,
    		dispatch,
    		tryDateTime,
    		worldPosition,
    		title,
    		extent,
    		timeExtent,
    		viewLocation,
    		viewTarget,
    		init,
    		input_change_input_handler,
    		input_change_handler,
    		click_handler,
    		input_change_handler_1,
    		input_change_input_handler_1
    	];
    }

    class NavigationControls extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$f,
    			create_fragment$f,
    			safe_not_equal,
    			{
    				title: 12,
    				color: 3,
    				extent: 13,
    				groups: 0,
    				options: 1,
    				rangeOptions: 4,
    				rangeValues: 2,
    				timeExtent: 14,
    				viewLocation: 15,
    				viewTarget: 16,
    				worldPosition: 11,
    				init: 17
    			},
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NavigationControls",
    			options,
    			id: create_fragment$f.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*title*/ ctx[12] === undefined && !("title" in props)) {
    			console_1$1.warn("<NavigationControls> was created without expected prop 'title'");
    		}

    		if (/*viewLocation*/ ctx[15] === undefined && !("viewLocation" in props)) {
    			console_1$1.warn("<NavigationControls> was created without expected prop 'viewLocation'");
    		}

    		if (/*viewTarget*/ ctx[16] === undefined && !("viewTarget" in props)) {
    			console_1$1.warn("<NavigationControls> was created without expected prop 'viewTarget'");
    		}
    	}

    	get title() {
    		throw new Error("<NavigationControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<NavigationControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<NavigationControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<NavigationControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get extent() {
    		throw new Error("<NavigationControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set extent(value) {
    		throw new Error("<NavigationControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get groups() {
    		throw new Error("<NavigationControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set groups(value) {
    		throw new Error("<NavigationControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get options() {
    		throw new Error("<NavigationControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set options(value) {
    		throw new Error("<NavigationControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rangeOptions() {
    		throw new Error("<NavigationControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rangeOptions(value) {
    		throw new Error("<NavigationControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rangeValues() {
    		throw new Error("<NavigationControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rangeValues(value) {
    		throw new Error("<NavigationControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get timeExtent() {
    		throw new Error("<NavigationControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set timeExtent(value) {
    		throw new Error("<NavigationControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get viewLocation() {
    		throw new Error("<NavigationControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set viewLocation(value) {
    		throw new Error("<NavigationControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get viewTarget() {
    		throw new Error("<NavigationControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set viewTarget(value) {
    		throw new Error("<NavigationControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get worldPosition() {
    		throw new Error("<NavigationControls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set worldPosition(value) {
    		throw new Error("<NavigationControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get init() {
    		return this.$$.ctx[17];
    	}

    	set init(value) {
    		throw new Error("<NavigationControls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function generateFace$1 (ctx, gridColor, gridSpacing) {
        ctx.strokeStyle = gridColor;
        const w = ctx.canvas.width,
            h = ctx.canvas.height;
        ctx.beginPath();
        for (let x=gridSpacing/2; x<=w; x+=gridSpacing){
            ctx.save();
            ctx.translate(0.5, 0);
            ctx.moveTo(x-0.5,0);      // 0.5 offset so that 1px lines are crisp
            ctx.lineTo(x-0.5,h);
            ctx.restore();
        }
        for (let y=gridSpacing/2;y<=h;y+=gridSpacing){
            ctx.save();
            ctx.translate(0, 0.5);
            ctx.moveTo(0,y-0.5);
            ctx.lineTo(w,y-0.5);
            ctx.restore();
        }
        ctx.stroke();
    }

    class QuadStore {
        constructor (capacity = 4,
                     extent = [[ -1.0, -1.0 ], [ 1, 1 ]],
                     routeMethod = (extent) => {
                         const parentWidth = extent[1][0] - extent[0][0],
                             parentHeight = extent[1][1] - extent[0][1];

                         const quadWidth = parentWidth / 2,
                             quadHeight = parentHeight / 2,
                             quad_extents = {
                                 1: {
                                     1: [
                                         [ extent[0][0], extent[0][1] ],
                                         [ extent[0][0] + quadWidth, extent[0][1] + quadHeight ]
                                     ],
                                     2: [
                                         [ extent[0][0], extent[1][1] - quadHeight ],
                                         [ extent[1][0] - quadWidth, extent[1][1] ]
                                     ]
                                 },
                                 2: {
                                     1: [
                                         [ extent[0][0] + quadWidth, extent[0][1] ],
                                         [ extent[1][0], extent[0][1] + quadHeight ]
                                     ],
                                     2: [
                                         [ extent[1][0] - quadWidth, extent[1][1] - quadHeight ],
                                         [ extent[1][0], extent[1][1] ]
                                     ]
                                 }
                             };

                         // console.log({
                         //     1: [
                         //         [ extent[0][0], extent[0][1] ],
                         //         [ extent[0][0] + quadWidth, extent[0][1] + quadHeight ]
                         //     ],
                         //     2: [
                         //         [ extent[0][0], extent[1][1] - quadHeight ],
                         //         [ extent[1][0] - quadWidth, extent[1][1] ]
                         //     ]
                         // },{
                         //     1: [
                         //         [ extent[0][0] + quadWidth, extent[0][1] ],
                         //         [ extent[1][0], extent[0][1] + quadHeight ]
                         //     ],
                         //     2: [
                         //         [ extent[1][0] - quadWidth, extent[1][1] - quadHeight ],
                         //         [ extent[1][0], extent[1][1] ]
                         //     ]
                         // });

                         return (obj) => {
                             const x = obj["x"], y = obj["y"];
                             // console.log(x, y);

                             if (x < quad_extents[1][1][1][0])  {
                                 if (y < quad_extents[1][1][1][1]) {
                                     // console.log("... maps into extent :", quad_extents[1][1]);
                                     return [ 1, 1 ];
                                 } else {
                                     // console.log("... maps into extent:", quad_extents[1][2]);
                                     return [ 1, 2 ]
                                 }
                             } else {
                                 if (y < quad_extents[2][2][0][1]) {
                                     // console.log("... maps into extent :", quad_extents[2][1]);
                                     return [ 2, 1 ];
                                 } else {
                                     // console.log("... maps into extent :", quad_extents[2][2]);
                                     return [ 2, 2 ]
                                 }
                             }
                         }
                     },
                     store = null
        ) {
            this.capacity = (capacity < 4) ? 4 : capacity; // min capacity is 4 objects
            this.extent = extent;
            this.last = (Array.isArray(store)) ? store[store.length - 1] : store;
            this.routeMethod = routeMethod;
            this.store = store || [];
        }

        get (level, x, y) {

            if (level > 0) {

                if (level === 1 && x in this.store && y in this.store[x]) {
                    return this.store[x][y].get()

                } else if (level > 1) {
                    const [ nx, ny ] = this.relativeCoords(level, x, y);

                    if (Array.isArray(this.store[nx][ny].store)) {
                        return this.store[nx][ny].store;
                    } else {
                        return this.store[nx][ny].get(level - 1, x, y);
                    }

                } else if (Array.isArray(this.store)) {
                    return this.store;

                } else return this.store;

            } else if (Array.isArray(this.store)) {
                return this.store;

            } else {
                return this.store;
            }
        }

        absoluteCoords (source_level, xs, ys, target_level, xr, yr) {
            const x0 = (Math.pow(2, target_level) / Math.pow(2, source_level)) * (xs), // * Math.pow(2, target_level - 3)), //  * xs
                  y0 = (Math.pow(2, target_level) / Math.pow(2, source_level)) * (ys); // * Math.pow(2, target_level - 3)); // Math.pow(2, target_level) / Math.pow(2, source_level) * ys

            const x1 = (xr === 2) ? x0 : x0 - 1,
                  y1 = (yr === 2) ? y0 : y0 - 1;
            return [ target_level, x1, y1 ];
        }

        relativeCoords (level, x1, y1) {
            const x0 = Math.round(x1 / 2);
            const y0 = Math.round(y1 / 2);
            const xr = x1 % 2;
            const yr = y1 % 2;
            if (level - 1 > 0) {
                const [ x2, y2 ] = this.relativeCoords(level - 1, x0, y0);
                return [x2, y2];
            } else {
                const x2 = (xr == 0) ? 2 : 1;
                const y2 = (yr == 0) ? 2 : 1;
                return [x2, y2];
            }

        }

        peek () {
            if (Array.isArray(this.store)) {
                return this.store.length;
            } else {
                const children = {
                    1: {
                        1: this.store[1][1].peek(),
                        2: this.store[1][2].peek()
                    },
                    2: {
                        1: this.store[2][1].peek(),
                        2: this.store[2][2].peek()
                    }
                };

                for (let i=1; i<=2; ++i) {
                    for (let j=1; j<=2; ++j) {
                        if (children[i][j] >= 0) {
                            children[i][j] = children[i][j];
                        } else {
                            let desc_total = 0;
                            for (let s=1; s<=2; ++s) {
                                for (let t = 1; t<=2; ++t) {
                                    desc_total += parseInt(children[i][j][s][t]);
                                }
                            }
                            children[i][j] = desc_total;
                        }
                    }
                }

                return children;
            }
        }

        push (obj) {
            if (typeof obj !== 'object') return;

            if (Array.isArray(this.store) && this.store.length < this.capacity - 1) {
                this.store.push(obj);

            } else if (Array.isArray(this.store)) {
                // Which subdivision do we this obj to?
                // selector parses the obj and returns coords
                const new_store = [].concat(this.store);
                new_store.push(obj);
                const store_map = new_store.map(stored_obj => this.route(stored_obj));

                this.store = this.subdivide(this.extent);

                store_map.forEach((v, i, a) => {
                    const [x1, y1] = v;
                    // console.log("Push to quad subdivision ", x1, y1);
                    this.store[x1][y1].push(new_store[i]);
                });

            } else {
                const [ x1, y1 ] = this.route(obj);
                // console.log("Push to quad subdivision ", x1, y1);

                if (x1 < 1 || x1 > 2 || y1 < 1 || y1 > 2) {
                    throw new Error("Bad subdivision coords from route ", x1, y1, x2, y2);

                } else {
                    if (x1 in this.store && y1 in this.store[x1]) {
                        if (typeof this.store[x1][y1].push === 'function') {
                            this.store[x1][y1].push(obj);
                        } else {
                            console.error(x1, y1, this.store[x1][y1]);
                        }

                    } else {
                        // 4 new quad stores
                        this.store = this.subdivide(this.extent);
                        this.store[x1][y1].push(obj);
                    }
                }
            }

            // keep ref to last obj in
            this.last = obj;
        }

        pop () {
            return Object.assign({}, this.last);
        }

        route(obj) {
            return this.routeMethod(this.extent)(obj);
        }

        subdivide (extent) {
            const parentWidth = extent[1][0] - extent[0][0],
                parentHeight = extent[1][1] - extent[0][1];

            const quadWidth = parentWidth / 2,
                quadHeight = parentHeight / 2,
                quadExtents = {
                    1: {
                        1: [
                            [ extent[0][0], extent[0][1] ],
                            [ extent[0][0] + quadWidth, extent[0][1] + quadHeight ]
                        ],
                        2: [
                            [ extent[0][0], extent[1][1] - quadHeight ],
                            [ extent[1][0] - quadWidth, extent[1][1] ]
                        ]
                    },
                    2: {
                        1: [
                            [ extent[0][0] + quadWidth, extent[0][1] ],
                            [ extent[1][0], extent[0][1] + quadHeight ]
                        ],
                        2: [
                            [ extent[1][0] - quadWidth, extent[1][1] - quadHeight ],
                            [ extent[1][0], extent[1][1] ]
                        ]
                    }
                };

            return {
                1: {
                    1: new QuadStore(this.capacity, quadExtents[1][1], this.routeMethod),
                    2: new QuadStore(this.capacity, quadExtents[1][2], this.routeMethod) },
                2: {
                    1: new QuadStore(this.capacity, quadExtents[2][1], this.routeMethod),
                    2: new QuadStore(this.capacity, quadExtents[2][2], this.routeMethod)
                }
            }
        }
    }

    // // test
    // const quad = new QuadStore(4, [[ -1.0, -1.0 ], [ 1, 1 ]],
    //     (extent) => { return (obj) => [ Math.round(1 + Math.random()), Math.round(1 + Math.random())]; });
    // console.log(1, quad);
    //
    // quad.push({ "name": "a new thing" });
    // console.log(2, quad.get());
    //
    // console.log('store size: ', quad.peek());
    //
    // quad.push({ "name": "another thing" });
    // console.log(3, quad.get());
    //
    // console.log('store size: ', quad.peek());
    //
    // quad.push({ "name": "yet another thing" });
    // console.log(4, quad.get());
    //
    // console.log('store size: ', quad.peek());
    //
    // quad.push({ "name": "one more thing" });
    // console.log(5, quad.get(1, 1, 1));
    //
    // console.log('store size: ', quad.peek());
    //
    // quad.push({ "name": "a new thing for a subquad" });
    // console.log(6, quad.get(1, 1, 1));
    //
    // console.log('store size: ', quad.peek());
    //
    // const eventQuad = new QuadStore(
    //     4,
    //     [[ -16.0, -16.0 ],[ 16.0, 16.0 ]]
    // );
    //
    // console.log(1, eventQuad);
    //
    // eventQuad.push({"x":-2.0886366751023138,"y":-1.3593318602961386,"t":1577810734936});
    // console.log(2, eventQuad.get());
    //
    // console.log('store size: ', eventQuad.peek());
    //
    // eventQuad.push({"x":-2.098437556972397,"y":-1.2783452238632382,"t":1577810735016});
    // console.log(3, eventQuad.get());
    //
    // console.log('store size: ', eventQuad.peek());
    //
    // eventQuad.push({"x":-2.144963348406517,"y":-1.1422073646014228,"t":1577810735096});
    // console.log(4, eventQuad.get());
    //
    // console.log('store size: ', eventQuad.peek());
    //
    // eventQuad.push({"x":-2.1690246630501147,"y":-1.0228172059850336,"t":1577810735176});
    // console.log(5, eventQuad.get(1, 1, 1));
    //
    // console.log('store size: ', eventQuad.peek());
    //
    // eventQuad.push({"x":-2.1697751784260326,"y":-0.9055892785828303,"t":1577810735256});
    // console.log(6, eventQuad.get(1, 1, 1));
    //
    // console.log('store size: ', eventQuad.peek());
    //
    // [
    //     {"x":-2.0886366751023138,"y":-1.3593318602961386,"t":1577810734936},
    //     {"x":-2.098437556972397,"y":-1.2783452238632382,"t":1577810735016},
    //     {"x":-2.144963348406517,"y":-1.1422073646014228,"t":1577810735096},
    //     {"x":-2.1690246630501147,"y":-1.0228172059850336,"t":1577810735176},
    //     {"x":-2.1697751784260326,"y":-0.9055892785828303,"t":1577810735256},
    //     {"x":-2.1948808233648953,"y":-0.7791119494075677,"t":1577810735346},
    //     {"x":-2.1956188999851847,"y":-0.6183983466654468,"t":1577810735416},
    //     {"x":-2.226720160663804,"y":-0.5171401862111875,"t":1577810735476},
    //     {"x":-2.239920895389541,"y":-0.47894422656018465,"t":1577810735566},
    //     {"x":-2.253898996867784,"y":-0.43755873375432364,"t":1577810735636},
    //     {"x":-2.2940800250188147,"y":-0.3816692161762003,"t":1577810735726},
    //     {"x":-2.2760398879932193,"y":-0.3397532592379948,"t":1577810735796},
    //     {"x":-2.2846375742799414,"y":-0.28563483096172115,"t":1577810735956}
    // ].forEach(obj => eventQuad.push(obj));
    //
    //
    // // Now use recursive method to retrieve results
    // console.log(1, eventQuad.get()); // level 0 store of quads
    // console.log(2, eventQuad.peek()); // in level (0) => data @ 1, 1
    // console.log(3, eventQuad.get(1, 1, 1)); // level (1) store of quads
    // console.log(4, eventQuad.get(1, 1, 1)[2][2].peek()); // in level (1) 2, 2 => data @ 2, 2
    // console.log(5, eventQuad.get(2, 2, 2)); // level (2) store of quads
    // console.log(6, eventQuad.get(2, 2, 2)[2][2].peek()); // in level (2) 2, 2 => data @ 1, 2
    // console.log(7, eventQuad.get(3, 3, 4)); // level (3) store of quads
    // console.log(8, eventQuad.get(3, 4, 4)[2][2].peek()); // in level (3) 2, 2 => data @ 1, 2
    // console.log(9, eventQuad.get(4, 7, 8));
    // console.log(10, eventQuad.get(4, 7, 8)[1][2].peek()); // in level (4) 2, 2 => data @ 2, 1 & 2, 2
    // console.log(11, eventQuad.get(5, 13, 15));
    // console.log(12, eventQuad.get(5, 13, 16));
    //
    // // Need helper method for translating to absolute coordinates between levels
    // console.log(13, eventQuad.get(...eventQuad.absoluteCoords(2, 2, 2, 3, 2, 2)));
    // console.log(14, eventQuad.get(...eventQuad.absoluteCoords(2, 2, 2, 3, 2, 2))[2][2].peek()); // data @ 1, 2
    // console.log(...eventQuad.absoluteCoords(2, 2, 2, 3, 2, 2)); // 3 4 4
    // console.log(15, eventQuad.get(...eventQuad.absoluteCoords(3, 4, 4, 4, 1, 2)));
    // console.log(16, eventQuad.get(...eventQuad.absoluteCoords(3, 4, 4, 4, 1, 2))[1][2].peek()); // data @ 2, 1 & 2, 2
    // console.log(...eventQuad.absoluteCoords(3, 4, 4, 4, 1, 2)); // 4 7 8
    // console.log(17, eventQuad.get(...eventQuad.absoluteCoords(4, 7, 8, 5, 2, 1)));
    // console.log(18, eventQuad.get(...eventQuad.absoluteCoords(4, 7, 8, 5, 2, 1))[2][1].peek()); // data @ 2, 2
    // console.log(19, eventQuad.get(...eventQuad.absoluteCoords(4, 7, 8, 5, 2, 2)));
    // console.log(...eventQuad.absoluteCoords(4, 7, 8, 5, 2, 2)); // 5 14 16
    // console.log(20, eventQuad.get(...eventQuad.absoluteCoords(4, 7, 8, 5, 2, 2))[2][1].peek()); // data @ 2, 2
    // console.log(21, eventQuad.get(...eventQuad.absoluteCoords(4, 7, 8, 5, 2, 2))[2][2]);
    // console.log(22, eventQuad.get(...eventQuad.absoluteCoords(5, 14, 16, 6, 2, 2))[2][2].peek()); // data @ 1, 1 & 2, 1
    // console.log(...eventQuad.absoluteCoords(5, 14, 16, 6, 2, 2));
    // console.log(23, Array.isArray(eventQuad.get(...eventQuad.absoluteCoords(6, 28, 32, 7, 2, 1))[2][1].get()));

    var terrain$1 = memoize(() => {
    	return new Geometry({
    		position: {
    			data: new Float32Array(
    [[-1,-1,0],[-0.9844,-1,0],[-0.9688,-1,0],[-0.9531,-1,0],[-0.9375,-1,0],[-0.9219,-1,0],[-0.9062,-1,0],[-0.8906,-1,0],[-0.875,-1,0],[-0.8594,-1,0],[-0.8438,-1,0],[-0.8281,-1,0],[-0.8125,-1,0],[-0.7969,-1,0],[-0.7812,-1,0],[-0.7656,-1,0],[-0.75,-1,0],[-0.7344,-1,0],[-0.7188,-1,0],[-0.7031,-1,0],[-0.6875,-1,0],[-0.6719,-1,0],[-0.6562,-1,0],[-0.6406,-1,0],[-0.625,-1,0],[-0.6094,-1,0],[-0.5938,-1,0],[-0.5781,-1,0],[-0.5625,-1,0],[-0.5469,-1,0],[-0.5312,-1,0],[-0.5156,-1,0],[-0.5,-1,0],[-0.4844,-1,0],[-0.4688,-1,0],[-0.4531,-1,0],[-0.4375,-1,0],[-0.4219,-1,0],[-0.4062,-1,0],[-0.3906,-1,0],[-0.375,-1,0],[-0.3594,-1,0],[-0.3438,-1,0],[-0.3281,-1,0],[-0.3125,-1,0],[-0.2969,-1,0],[-0.2812,-1,0],[-0.2656,-1,0],[-0.25,-1,0],[-0.2344,-1,0],[-0.2188,-1,0],[-0.2031,-1,0],[-0.1875,-1,0],[-0.1719,-1,0],[-0.1562,-1,0],[-0.1406,-1,0],[-0.125,-1,0],[-0.1094,-1,0],[-0.0938,-1,0],[-0.0781,-1,0],[-0.0625,-1,0],[-0.0469,-1,0],[-0.0312,-1,0],[-0.0156,-1,0],[0,-1,0],[0.0156,-1,0],[0.0312,-1,0],[0.0469,-1,0],[0.0625,-1,0],[0.0781,-1,0],[0.0938,-1,0],[0.1094,-1,0],[0.125,-1,0],[0.1406,-1,0],[0.1562,-1,0],[0.1719,-1,0],[0.1875,-1,0],[0.2031,-1,0],[0.2188,-1,0],[0.2344,-1,0],[0.25,-1,0],[0.2656,-1,0],[0.2812,-1,0],[0.2969,-1,0],[0.3125,-1,0],[0.3281,-1,0],[0.3438,-1,0],[0.3594,-1,0],[0.375,-1,0],[0.3906,-1,0],[0.4062,-1,0],[0.4219,-1,0],[0.4375,-1,0],[0.4531,-1,0],[0.4688,-1,0],[0.4844,-1,0],[0.5,-1,0],[0.5156,-1,0],[0.5312,-1,0],[0.5469,-1,0],[0.5625,-1,0],[0.5781,-1,0],[0.5938,-1,0],[0.6094,-1,0],[0.625,-1,0],[0.6406,-1,0],[0.6562,-1,0],[0.6719,-1,0],[0.6875,-1,0],[0.7031,-1,0],[0.7188,-1,0],[0.7344,-1,0],[0.75,-1,0],[0.7656,-1,0],[0.7812,-1,0],[0.7969,-1,0],[0.8125,-1,0],[0.8281,-1,0],[0.8438,-1,0],[0.8594,-1,0],[0.875,-1,0],[0.8906,-1,0],[0.9062,-1,0],[0.9219,-1,0],[0.9375,-1,0],[0.9531,-1,0],[0.9688,-1,0],[0.9844,-1,0],[-1,-0.9844,0],[-0.9844,-0.9844,0],[-0.9688,-0.9844,0],[-0.9531,-0.9844,0],[-0.9375,-0.9844,0],[-0.9219,-0.9844,0],[-0.9062,-0.9844,0],[-0.8906,-0.9844,0],[-0.875,-0.9844,0],[-0.8594,-0.9844,0],[-0.8438,-0.9844,0],[-0.8281,-0.9844,0],[-0.8125,-0.9844,0],[-0.7969,-0.9844,0],[-0.7812,-0.9844,0],[-0.7656,-0.9844,0],[-0.75,-0.9844,0],[-0.7344,-0.9844,0],[-0.7188,-0.9844,0],[-0.7031,-0.9844,0],[-0.6875,-0.9844,0],[-0.6719,-0.9844,0],[-0.6562,-0.9844,0],[-0.6406,-0.9844,0],[-0.625,-0.9844,0],[-0.6094,-0.9844,0],[-0.5938,-0.9844,0],[-0.5781,-0.9844,0],[-0.5625,-0.9844,0],[-0.5469,-0.9844,0],[-0.5312,-0.9844,0],[-0.5156,-0.9844,0],[-0.5,-0.9844,0],[-0.4844,-0.9844,0],[-0.4688,-0.9844,0],[-0.4531,-0.9844,0],[-0.4375,-0.9844,0],[-0.4219,-0.9844,0],[-0.4062,-0.9844,0],[-0.3906,-0.9844,0],[-0.375,-0.9844,0],[-0.3594,-0.9844,0],[-0.3438,-0.9844,0],[-0.3281,-0.9844,0],[-0.3125,-0.9844,0],[-0.2969,-0.9844,0],[-0.2812,-0.9844,0],[-0.2656,-0.9844,0],[-0.25,-0.9844,0],[-0.2344,-0.9844,0],[-0.2188,-0.9844,0],[-0.2031,-0.9844,0],[-0.1875,-0.9844,0],[-0.1719,-0.9844,0],[-0.1562,-0.9844,0],[-0.1406,-0.9844,0],[-0.125,-0.9844,0],[-0.1094,-0.9844,0],[-0.0938,-0.9844,0],[-0.0781,-0.9844,0],[-0.0625,-0.9844,0],[-0.0469,-0.9844,0],[-0.0312,-0.9844,0],[-0.0156,-0.9844,0],[0,-0.9844,0],[0.0156,-0.9844,0],[0.0312,-0.9844,0],[0.0469,-0.9844,0],[0.0625,-0.9844,0],[0.0781,-0.9844,0],[0.0938,-0.9844,0],[0.1094,-0.9844,0],[0.125,-0.9844,0],[0.1406,-0.9844,0],[0.1562,-0.9844,0],[0.1719,-0.9844,0],[0.1875,-0.9844,0],[0.2031,-0.9844,0],[0.2188,-0.9844,0],[0.2344,-0.9844,0],[0.25,-0.9844,0],[0.2656,-0.9844,0],[0.2812,-0.9844,0],[0.2969,-0.9844,0],[0.3125,-0.9844,0],[0.3281,-0.9844,0],[0.3438,-0.9844,0],[0.3594,-0.9844,0],[0.375,-0.9844,0],[0.3906,-0.9844,0],[0.4062,-0.9844,0],[0.4219,-0.9844,0],[0.4375,-0.9844,0],[0.4531,-0.9844,0],[0.4688,-0.9844,0],[0.4844,-0.9844,0],[0.5,-0.9844,0],[0.5156,-0.9844,0],[0.5312,-0.9844,0],[0.5469,-0.9844,0],[0.5625,-0.9844,0],[0.5781,-0.9844,0],[0.5938,-0.9844,0],[0.6094,-0.9844,0],[0.625,-0.9844,0],[0.6406,-0.9844,0],[0.6562,-0.9844,0],[0.6719,-0.9844,0],[0.6875,-0.9844,0],[0.7031,-0.9844,0],[0.7188,-0.9844,0],[0.7344,-0.9844,0],[0.75,-0.9844,0],[0.7656,-0.9844,0],[0.7812,-0.9844,0],[0.7969,-0.9844,0],[0.8125,-0.9844,0],[0.8281,-0.9844,0],[0.8438,-0.9844,0],[0.8594,-0.9844,0],[0.875,-0.9844,0],[0.8906,-0.9844,0],[0.9062,-0.9844,0],[0.9219,-0.9844,0],[0.9375,-0.9844,0],[0.9531,-0.9844,0],[0.9688,-0.9844,0],[0.9844,-0.9844,0],[-1,-0.9688,0],[-0.9844,-0.9688,0],[-0.9688,-0.9688,0],[-0.9531,-0.9688,0],[-0.9375,-0.9688,0],[-0.9219,-0.9688,0],[-0.9062,-0.9688,0],[-0.8906,-0.9688,0],[-0.875,-0.9688,0],[-0.8594,-0.9688,0],[-0.8438,-0.9688,0],[-0.8281,-0.9688,0],[-0.8125,-0.9688,0],[-0.7969,-0.9688,0],[-0.7812,-0.9688,0],[-0.7656,-0.9688,0],[-0.75,-0.9688,0],[-0.7344,-0.9688,0],[-0.7188,-0.9688,0],[-0.7031,-0.9688,0],[-0.6875,-0.9688,0],[-0.6719,-0.9688,0],[-0.6562,-0.9688,0],[-0.6406,-0.9688,0],[-0.625,-0.9688,0],[-0.6094,-0.9688,0],[-0.5938,-0.9688,0],[-0.5781,-0.9688,0],[-0.5625,-0.9688,0],[-0.5469,-0.9688,0],[-0.5312,-0.9688,0],[-0.5156,-0.9688,0],[-0.5,-0.9688,0],[-0.4844,-0.9688,0],[-0.4688,-0.9688,0],[-0.4531,-0.9688,0],[-0.4375,-0.9688,0],[-0.4219,-0.9688,0],[-0.4062,-0.9688,0],[-0.3906,-0.9688,0],[-0.375,-0.9688,0],[-0.3594,-0.9688,0],[-0.3438,-0.9688,0],[-0.3281,-0.9688,0],[-0.3125,-0.9688,0],[-0.2969,-0.9688,0],[-0.2812,-0.9688,0],[-0.2656,-0.9688,0],[-0.25,-0.9688,0],[-0.2344,-0.9688,0],[-0.2188,-0.9688,0],[-0.2031,-0.9688,0],[-0.1875,-0.9688,0],[-0.1719,-0.9688,0],[-0.1562,-0.9688,0],[-0.1406,-0.9688,0],[-0.125,-0.9688,0],[-0.1094,-0.9688,0],[-0.0938,-0.9688,0],[-0.0781,-0.9688,0],[-0.0625,-0.9688,0],[-0.0469,-0.9688,0],[-0.0312,-0.9688,0],[-0.0156,-0.9688,0],[0,-0.9688,0],[0.0156,-0.9688,0],[0.0312,-0.9688,0],[0.0469,-0.9688,0],[0.0625,-0.9688,0],[0.0781,-0.9688,0],[0.0938,-0.9688,0],[0.1094,-0.9688,0],[0.125,-0.9688,0],[0.1406,-0.9688,0],[0.1562,-0.9688,0],[0.1719,-0.9688,0],[0.1875,-0.9688,0],[0.2031,-0.9688,0],[0.2188,-0.9688,0],[0.2344,-0.9688,0],[0.25,-0.9688,0],[0.2656,-0.9688,0],[0.2812,-0.9688,0],[0.2969,-0.9688,0],[0.3125,-0.9688,0],[0.3281,-0.9688,0],[0.3438,-0.9688,0],[0.3594,-0.9688,0],[0.375,-0.9688,0],[0.3906,-0.9688,0],[0.4062,-0.9688,0],[0.4219,-0.9688,0],[0.4375,-0.9688,0],[0.4531,-0.9688,0],[0.4688,-0.9688,0],[0.4844,-0.9688,0],[0.5,-0.9688,0],[0.5156,-0.9688,0],[0.5312,-0.9688,0],[0.5469,-0.9688,0],[0.5625,-0.9688,0],[0.5781,-0.9688,0],[0.5938,-0.9688,0],[0.6094,-0.9688,0],[0.625,-0.9688,0],[0.6406,-0.9688,0],[0.6562,-0.9688,0],[0.6719,-0.9688,0],[0.6875,-0.9688,0],[0.7031,-0.9688,0],[0.7188,-0.9688,0],[0.7344,-0.9688,0],[0.75,-0.9688,0],[0.7656,-0.9688,0],[0.7812,-0.9688,0],[0.7969,-0.9688,0],[0.8125,-0.9688,0],[0.8281,-0.9688,0],[0.8438,-0.9688,0],[0.8594,-0.9688,0],[0.875,-0.9688,0],[0.8906,-0.9688,0],[0.9062,-0.9688,0],[0.9219,-0.9688,0],[0.9375,-0.9688,0],[0.9531,-0.9688,0],[0.9688,-0.9688,0],[0.9844,-0.9688,0],[-1,-0.9531,0],[-0.9844,-0.9531,0],[-0.9688,-0.9531,0],[-0.9531,-0.9531,0],[-0.9375,-0.9531,0],[-0.9219,-0.9531,0],[-0.9062,-0.9531,0],[-0.8906,-0.9531,0],[-0.875,-0.9531,0],[-0.8594,-0.9531,0],[-0.8438,-0.9531,0],[-0.8281,-0.9531,0],[-0.8125,-0.9531,0],[-0.7969,-0.9531,0],[-0.7812,-0.9531,0],[-0.7656,-0.9531,0],[-0.75,-0.9531,0],[-0.7344,-0.9531,0],[-0.7188,-0.9531,0],[-0.7031,-0.9531,0],[-0.6875,-0.9531,0],[-0.6719,-0.9531,0],[-0.6562,-0.9531,0],[-0.6406,-0.9531,0],[-0.625,-0.9531,0],[-0.6094,-0.9531,0],[-0.5938,-0.9531,0],[-0.5781,-0.9531,0],[-0.5625,-0.9531,0],[-0.5469,-0.9531,0],[-0.5312,-0.9531,0],[-0.5156,-0.9531,0],[-0.5,-0.9531,0],[-0.4844,-0.9531,0],[-0.4688,-0.9531,0],[-0.4531,-0.9531,0],[-0.4375,-0.9531,0],[-0.4219,-0.9531,0],[-0.4062,-0.9531,0],[-0.3906,-0.9531,0],[-0.375,-0.9531,0],[-0.3594,-0.9531,0],[-0.3438,-0.9531,0],[-0.3281,-0.9531,0],[-0.3125,-0.9531,0],[-0.2969,-0.9531,0],[-0.2812,-0.9531,0],[-0.2656,-0.9531,0],[-0.25,-0.9531,0],[-0.2344,-0.9531,0],[-0.2188,-0.9531,0],[-0.2031,-0.9531,0],[-0.1875,-0.9531,0],[-0.1719,-0.9531,0],[-0.1562,-0.9531,0],[-0.1406,-0.9531,0],[-0.125,-0.9531,0],[-0.1094,-0.9531,0],[-0.0938,-0.9531,0],[-0.0781,-0.9531,0],[-0.0625,-0.9531,0],[-0.0469,-0.9531,0],[-0.0312,-0.9531,0],[-0.0156,-0.9531,0],[0,-0.9531,0],[0.0156,-0.9531,0],[0.0312,-0.9531,0],[0.0469,-0.9531,0],[0.0625,-0.9531,0],[0.0781,-0.9531,0],[0.0938,-0.9531,0],[0.1094,-0.9531,0],[0.125,-0.9531,0],[0.1406,-0.9531,0],[0.1562,-0.9531,0],[0.1719,-0.9531,0],[0.1875,-0.9531,0],[0.2031,-0.9531,0],[0.2188,-0.9531,0],[0.2344,-0.9531,0],[0.25,-0.9531,0],[0.2656,-0.9531,0],[0.2812,-0.9531,0],[0.2969,-0.9531,0],[0.3125,-0.9531,0],[0.3281,-0.9531,0],[0.3438,-0.9531,0],[0.3594,-0.9531,0],[0.375,-0.9531,0],[0.3906,-0.9531,0],[0.4062,-0.9531,0],[0.4219,-0.9531,0],[0.4375,-0.9531,0],[0.4531,-0.9531,0],[0.4688,-0.9531,0],[0.4844,-0.9531,0],[0.5,-0.9531,0],[0.5156,-0.9531,0],[0.5312,-0.9531,0],[0.5469,-0.9531,0],[0.5625,-0.9531,0],[0.5781,-0.9531,0],[0.5938,-0.9531,0],[0.6094,-0.9531,0],[0.625,-0.9531,0],[0.6406,-0.9531,0],[0.6562,-0.9531,0],[0.6719,-0.9531,0],[0.6875,-0.9531,0],[0.7031,-0.9531,0],[0.7188,-0.9531,0],[0.7344,-0.9531,0],[0.75,-0.9531,0],[0.7656,-0.9531,0],[0.7812,-0.9531,0],[0.7969,-0.9531,0],[0.8125,-0.9531,0],[0.8281,-0.9531,0],[0.8438,-0.9531,0],[0.8594,-0.9531,0],[0.875,-0.9531,0],[0.8906,-0.9531,0],[0.9062,-0.9531,0],[0.9219,-0.9531,0],[0.9375,-0.9531,0],[0.9531,-0.9531,0],[0.9688,-0.9531,0],[0.9844,-0.9531,0],[-1,-0.9375,0],[-0.9844,-0.9375,0],[-0.9688,-0.9375,0],[-0.9531,-0.9375,0],[-0.9375,-0.9375,0],[-0.9219,-0.9375,0],[-0.9062,-0.9375,0],[-0.8906,-0.9375,0],[-0.875,-0.9375,0],[-0.8594,-0.9375,0],[-0.8438,-0.9375,0],[-0.8281,-0.9375,0],[-0.8125,-0.9375,0],[-0.7969,-0.9375,0],[-0.7812,-0.9375,0],[-0.7656,-0.9375,0],[-0.75,-0.9375,0],[-0.7344,-0.9375,0],[-0.7188,-0.9375,0],[-0.7031,-0.9375,0],[-0.6875,-0.9375,0],[-0.6719,-0.9375,0],[-0.6562,-0.9375,0],[-0.6406,-0.9375,0],[-0.625,-0.9375,0],[-0.6094,-0.9375,0],[-0.5938,-0.9375,0],[-0.5781,-0.9375,0],[-0.5625,-0.9375,0],[-0.5469,-0.9375,0],[-0.5312,-0.9375,0],[-0.5156,-0.9375,0],[-0.5,-0.9375,0],[-0.4844,-0.9375,0],[-0.4688,-0.9375,0],[-0.4531,-0.9375,0],[-0.4375,-0.9375,0],[-0.4219,-0.9375,0],[-0.4062,-0.9375,0],[-0.3906,-0.9375,0],[-0.375,-0.9375,0],[-0.3594,-0.9375,0],[-0.3438,-0.9375,0],[-0.3281,-0.9375,0],[-0.3125,-0.9375,0],[-0.2969,-0.9375,0],[-0.2812,-0.9375,0],[-0.2656,-0.9375,0],[-0.25,-0.9375,0],[-0.2344,-0.9375,0],[-0.2188,-0.9375,0],[-0.2031,-0.9375,0],[-0.1875,-0.9375,0],[-0.1719,-0.9375,0],[-0.1562,-0.9375,0],[-0.1406,-0.9375,0],[-0.125,-0.9375,0],[-0.1094,-0.9375,0],[-0.0938,-0.9375,0],[-0.0781,-0.9375,0],[-0.0625,-0.9375,0],[-0.0469,-0.9375,0],[-0.0312,-0.9375,0],[-0.0156,-0.9375,0],[0,-0.9375,0],[0.0156,-0.9375,0],[0.0312,-0.9375,0],[0.0469,-0.9375,0],[0.0625,-0.9375,0],[0.0781,-0.9375,0],[0.0938,-0.9375,0],[0.1094,-0.9375,0],[0.125,-0.9375,0],[0.1406,-0.9375,0],[0.1562,-0.9375,0],[0.1719,-0.9375,0],[0.1875,-0.9375,0],[0.2031,-0.9375,0],[0.2188,-0.9375,0],[0.2344,-0.9375,0],[0.25,-0.9375,0],[0.2656,-0.9375,0],[0.2812,-0.9375,0],[0.2969,-0.9375,0],[0.3125,-0.9375,0],[0.3281,-0.9375,0],[0.3438,-0.9375,0],[0.3594,-0.9375,0],[0.375,-0.9375,0],[0.3906,-0.9375,0],[0.4062,-0.9375,0],[0.4219,-0.9375,0],[0.4375,-0.9375,0],[0.4531,-0.9375,0],[0.4688,-0.9375,0],[0.4844,-0.9375,0],[0.5,-0.9375,0],[0.5156,-0.9375,0],[0.5312,-0.9375,0],[0.5469,-0.9375,0],[0.5625,-0.9375,0],[0.5781,-0.9375,0],[0.5938,-0.9375,0],[0.6094,-0.9375,0],[0.625,-0.9375,0],[0.6406,-0.9375,0],[0.6562,-0.9375,0],[0.6719,-0.9375,0],[0.6875,-0.9375,0],[0.7031,-0.9375,0],[0.7188,-0.9375,0],[0.7344,-0.9375,0],[0.75,-0.9375,0],[0.7656,-0.9375,0],[0.7812,-0.9375,0],[0.7969,-0.9375,0],[0.8125,-0.9375,0],[0.8281,-0.9375,0],[0.8438,-0.9375,0],[0.8594,-0.9375,0],[0.875,-0.9375,0],[0.8906,-0.9375,0],[0.9062,-0.9375,0],[0.9219,-0.9375,0],[0.9375,-0.9375,0],[0.9531,-0.9375,0],[0.9688,-0.9375,0],[0.9844,-0.9375,0],[-1,-0.9219,0],[-0.9844,-0.9219,0],[-0.9688,-0.9219,0],[-0.9531,-0.9219,0],[-0.9375,-0.9219,0],[-0.9219,-0.9219,0],[-0.9062,-0.9219,0],[-0.8906,-0.9219,0],[-0.875,-0.9219,0],[-0.8594,-0.9219,0],[-0.8438,-0.9219,0],[-0.8281,-0.9219,0],[-0.8125,-0.9219,0],[-0.7969,-0.9219,0],[-0.7812,-0.9219,0],[-0.7656,-0.9219,0],[-0.75,-0.9219,0],[-0.7344,-0.9219,0],[-0.7188,-0.9219,0],[-0.7031,-0.9219,0],[-0.6875,-0.9219,0],[-0.6719,-0.9219,0],[-0.6562,-0.9219,0],[-0.6406,-0.9219,0],[-0.625,-0.9219,0],[-0.6094,-0.9219,0],[-0.5938,-0.9219,0],[-0.5781,-0.9219,0],[-0.5625,-0.9219,0],[-0.5469,-0.9219,0],[-0.5312,-0.9219,0],[-0.5156,-0.9219,0],[-0.5,-0.9219,0],[-0.4844,-0.9219,0],[-0.4688,-0.9219,0],[-0.4531,-0.9219,0],[-0.4375,-0.9219,0],[-0.4219,-0.9219,0],[-0.4062,-0.9219,0],[-0.3906,-0.9219,0],[-0.375,-0.9219,0],[-0.3594,-0.9219,0],[-0.3438,-0.9219,0],[-0.3281,-0.9219,0],[-0.3125,-0.9219,0],[-0.2969,-0.9219,0],[-0.2812,-0.9219,0],[-0.2656,-0.9219,0],[-0.25,-0.9219,0],[-0.2344,-0.9219,0],[-0.2188,-0.9219,0],[-0.2031,-0.9219,0],[-0.1875,-0.9219,0],[-0.1719,-0.9219,0],[-0.1562,-0.9219,0],[-0.1406,-0.9219,0],[-0.125,-0.9219,0],[-0.1094,-0.9219,0],[-0.0938,-0.9219,0],[-0.0781,-0.9219,0],[-0.0625,-0.9219,0],[-0.0469,-0.9219,0],[-0.0312,-0.9219,0],[-0.0156,-0.9219,0],[0,-0.9219,0],[0.0156,-0.9219,0],[0.0312,-0.9219,0],[0.0469,-0.9219,0],[0.0625,-0.9219,0],[0.0781,-0.9219,0],[0.0938,-0.9219,0],[0.1094,-0.9219,0],[0.125,-0.9219,0],[0.1406,-0.9219,0],[0.1562,-0.9219,0],[0.1719,-0.9219,0],[0.1875,-0.9219,0],[0.2031,-0.9219,0],[0.2188,-0.9219,0],[0.2344,-0.9219,0],[0.25,-0.9219,0],[0.2656,-0.9219,0],[0.2812,-0.9219,0],[0.2969,-0.9219,0],[0.3125,-0.9219,0],[0.3281,-0.9219,0],[0.3438,-0.9219,0],[0.3594,-0.9219,0],[0.375,-0.9219,0],[0.3906,-0.9219,0],[0.4062,-0.9219,0],[0.4219,-0.9219,0],[0.4375,-0.9219,0],[0.4531,-0.9219,0],[0.4688,-0.9219,0],[0.4844,-0.9219,0],[0.5,-0.9219,0],[0.5156,-0.9219,0],[0.5312,-0.9219,0],[0.5469,-0.9219,0],[0.5625,-0.9219,0],[0.5781,-0.9219,0],[0.5938,-0.9219,0],[0.6094,-0.9219,0],[0.625,-0.9219,0],[0.6406,-0.9219,0],[0.6562,-0.9219,0],[0.6719,-0.9219,0],[0.6875,-0.9219,0],[0.7031,-0.9219,0],[0.7188,-0.9219,0],[0.7344,-0.9219,0],[0.75,-0.9219,0],[0.7656,-0.9219,0],[0.7812,-0.9219,0],[0.7969,-0.9219,0],[0.8125,-0.9219,0],[0.8281,-0.9219,0],[0.8438,-0.9219,0],[0.8594,-0.9219,0],[0.875,-0.9219,0],[0.8906,-0.9219,0],[0.9062,-0.9219,0],[0.9219,-0.9219,0],[0.9375,-0.9219,0],[0.9531,-0.9219,0],[0.9688,-0.9219,0],[0.9844,-0.9219,0],[-1,-0.9062,0],[-0.9844,-0.9062,0],[-0.9688,-0.9062,0],[-0.9531,-0.9062,0],[-0.9375,-0.9062,0],[-0.9219,-0.9062,0],[-0.9062,-0.9062,0],[-0.8906,-0.9062,0],[-0.875,-0.9062,0],[-0.8594,-0.9062,0],[-0.8438,-0.9062,0],[-0.8281,-0.9062,0],[-0.8125,-0.9062,0],[-0.7969,-0.9062,0],[-0.7812,-0.9062,0],[-0.7656,-0.9062,0],[-0.75,-0.9062,0],[-0.7344,-0.9062,0],[-0.7188,-0.9062,0],[-0.7031,-0.9062,0],[-0.6875,-0.9062,0],[-0.6719,-0.9062,0],[-0.6562,-0.9062,0],[-0.6406,-0.9062,0],[-0.625,-0.9062,0],[-0.6094,-0.9062,0],[-0.5938,-0.9062,0],[-0.5781,-0.9062,0],[-0.5625,-0.9062,0],[-0.5469,-0.9062,0],[-0.5312,-0.9062,0],[-0.5156,-0.9062,0],[-0.5,-0.9062,0],[-0.4844,-0.9062,0],[-0.4688,-0.9062,0],[-0.4531,-0.9062,0],[-0.4375,-0.9062,0],[-0.4219,-0.9062,0],[-0.4062,-0.9062,0],[-0.3906,-0.9062,0],[-0.375,-0.9062,0],[-0.3594,-0.9062,0],[-0.3438,-0.9062,0],[-0.3281,-0.9062,0],[-0.3125,-0.9062,0],[-0.2969,-0.9062,0],[-0.2812,-0.9062,0],[-0.2656,-0.9062,0],[-0.25,-0.9062,0],[-0.2344,-0.9062,0],[-0.2188,-0.9062,0],[-0.2031,-0.9062,0],[-0.1875,-0.9062,0],[-0.1719,-0.9062,0],[-0.1562,-0.9062,0],[-0.1406,-0.9062,0],[-0.125,-0.9062,0],[-0.1094,-0.9062,0],[-0.0938,-0.9062,0],[-0.0781,-0.9062,0],[-0.0625,-0.9062,0],[-0.0469,-0.9062,0],[-0.0312,-0.9062,0],[-0.0156,-0.9062,0],[0,-0.9062,0],[0.0156,-0.9062,0],[0.0312,-0.9062,0],[0.0469,-0.9062,0],[0.0625,-0.9062,0],[0.0781,-0.9062,0],[0.0938,-0.9062,0],[0.1094,-0.9062,0],[0.125,-0.9062,0],[0.1406,-0.9062,0],[0.1562,-0.9062,0],[0.1719,-0.9062,0],[0.1875,-0.9062,0],[0.2031,-0.9062,0],[0.2188,-0.9062,0],[0.2344,-0.9062,0],[0.25,-0.9062,0],[0.2656,-0.9062,0],[0.2812,-0.9062,0],[0.2969,-0.9062,0],[0.3125,-0.9062,0],[0.3281,-0.9062,0],[0.3438,-0.9062,0],[0.3594,-0.9062,0],[0.375,-0.9062,0],[0.3906,-0.9062,0],[0.4062,-0.9062,0],[0.4219,-0.9062,0],[0.4375,-0.9062,0],[0.4531,-0.9062,0],[0.4688,-0.9062,0],[0.4844,-0.9062,0],[0.5,-0.9062,0],[0.5156,-0.9062,0],[0.5312,-0.9062,0],[0.5469,-0.9062,0],[0.5625,-0.9062,0],[0.5781,-0.9062,0],[0.5938,-0.9062,0],[0.6094,-0.9062,0],[0.625,-0.9062,0],[0.6406,-0.9062,0],[0.6562,-0.9062,0],[0.6719,-0.9062,0],[0.6875,-0.9062,0],[0.7031,-0.9062,0],[0.7188,-0.9062,0],[0.7344,-0.9062,0],[0.75,-0.9062,0],[0.7656,-0.9062,0],[0.7812,-0.9062,0],[0.7969,-0.9062,0],[0.8125,-0.9062,0],[0.8281,-0.9062,0],[0.8438,-0.9062,0],[0.8594,-0.9062,0],[0.875,-0.9062,0],[0.8906,-0.9062,0],[0.9062,-0.9062,0],[0.9219,-0.9062,0],[0.9375,-0.9062,0],[0.9531,-0.9062,0],[0.9688,-0.9062,0],[0.9844,-0.9062,0],[-1,-0.8906,0],[-0.9844,-0.8906,0],[-0.9688,-0.8906,0],[-0.9531,-0.8906,0],[-0.9375,-0.8906,0],[-0.9219,-0.8906,0],[-0.9062,-0.8906,0],[-0.8906,-0.8906,0],[-0.875,-0.8906,0],[-0.8594,-0.8906,0],[-0.8438,-0.8906,0],[-0.8281,-0.8906,0],[-0.8125,-0.8906,0],[-0.7969,-0.8906,0],[-0.7812,-0.8906,0],[-0.7656,-0.8906,0],[-0.75,-0.8906,0],[-0.7344,-0.8906,0],[-0.7188,-0.8906,0],[-0.7031,-0.8906,0],[-0.6875,-0.8906,0],[-0.6719,-0.8906,0],[-0.6562,-0.8906,0],[-0.6406,-0.8906,0],[-0.625,-0.8906,0],[-0.6094,-0.8906,0],[-0.5938,-0.8906,0],[-0.5781,-0.8906,0],[-0.5625,-0.8906,0],[-0.5469,-0.8906,0],[-0.5312,-0.8906,0],[-0.5156,-0.8906,0],[-0.5,-0.8906,0],[-0.4844,-0.8906,0],[-0.4688,-0.8906,0],[-0.4531,-0.8906,0],[-0.4375,-0.8906,0],[-0.4219,-0.8906,0],[-0.4062,-0.8906,0],[-0.3906,-0.8906,0],[-0.375,-0.8906,0],[-0.3594,-0.8906,0],[-0.3438,-0.8906,0],[-0.3281,-0.8906,0],[-0.3125,-0.8906,0],[-0.2969,-0.8906,0],[-0.2812,-0.8906,0],[-0.2656,-0.8906,0],[-0.25,-0.8906,0],[-0.2344,-0.8906,0],[-0.2188,-0.8906,0],[-0.2031,-0.8906,0],[-0.1875,-0.8906,0],[-0.1719,-0.8906,0],[-0.1562,-0.8906,0],[-0.1406,-0.8906,0],[-0.125,-0.8906,0],[-0.1094,-0.8906,0],[-0.0938,-0.8906,0],[-0.0781,-0.8906,0],[-0.0625,-0.8906,0],[-0.0469,-0.8906,0],[-0.0312,-0.8906,0],[-0.0156,-0.8906,0],[0,-0.8906,0],[0.0156,-0.8906,0],[0.0312,-0.8906,0],[0.0469,-0.8906,0],[0.0625,-0.8906,0],[0.0781,-0.8906,0],[0.0938,-0.8906,0],[0.1094,-0.8906,0],[0.125,-0.8906,0],[0.1406,-0.8906,0],[0.1562,-0.8906,0],[0.1719,-0.8906,0],[0.1875,-0.8906,0],[0.2031,-0.8906,0],[0.2188,-0.8906,0],[0.2344,-0.8906,0],[0.25,-0.8906,0],[0.2656,-0.8906,0],[0.2812,-0.8906,0],[0.2969,-0.8906,0],[0.3125,-0.8906,0],[0.3281,-0.8906,0],[0.3438,-0.8906,0],[0.3594,-0.8906,0],[0.375,-0.8906,0],[0.3906,-0.8906,0],[0.4062,-0.8906,0],[0.4219,-0.8906,0],[0.4375,-0.8906,0],[0.4531,-0.8906,0],[0.4688,-0.8906,0],[0.4844,-0.8906,0],[0.5,-0.8906,0],[0.5156,-0.8906,0],[0.5312,-0.8906,0],[0.5469,-0.8906,0],[0.5625,-0.8906,0],[0.5781,-0.8906,0],[0.5938,-0.8906,0],[0.6094,-0.8906,0],[0.625,-0.8906,0],[0.6406,-0.8906,0],[0.6562,-0.8906,0],[0.6719,-0.8906,0],[0.6875,-0.8906,0],[0.7031,-0.8906,0],[0.7188,-0.8906,0],[0.7344,-0.8906,0],[0.75,-0.8906,0],[0.7656,-0.8906,0],[0.7812,-0.8906,0],[0.7969,-0.8906,0],[0.8125,-0.8906,0],[0.8281,-0.8906,0],[0.8438,-0.8906,0],[0.8594,-0.8906,0],[0.875,-0.8906,0],[0.8906,-0.8906,0],[0.9062,-0.8906,0],[0.9219,-0.8906,0],[0.9375,-0.8906,0],[0.9531,-0.8906,0],[0.9688,-0.8906,0],[0.9844,-0.8906,0],[-1,-0.875,0],[-0.9844,-0.875,0],[-0.9688,-0.875,0],[-0.9531,-0.875,0],[-0.9375,-0.875,0],[-0.9219,-0.875,0],[-0.9062,-0.875,0],[-0.8906,-0.875,0],[-0.875,-0.875,0],[-0.8594,-0.875,0],[-0.8438,-0.875,0],[-0.8281,-0.875,0],[-0.8125,-0.875,0],[-0.7969,-0.875,0],[-0.7812,-0.875,0],[-0.7656,-0.875,0],[-0.75,-0.875,0],[-0.7344,-0.875,0],[-0.7188,-0.875,0],[-0.7031,-0.875,0],[-0.6875,-0.875,0],[-0.6719,-0.875,0],[-0.6562,-0.875,0],[-0.6406,-0.875,0],[-0.625,-0.875,0],[-0.6094,-0.875,0],[-0.5938,-0.875,0],[-0.5781,-0.875,0],[-0.5625,-0.875,0],[-0.5469,-0.875,0],[-0.5312,-0.875,0],[-0.5156,-0.875,0],[-0.5,-0.875,0],[-0.4844,-0.875,0],[-0.4688,-0.875,0],[-0.4531,-0.875,0],[-0.4375,-0.875,0],[-0.4219,-0.875,0],[-0.4062,-0.875,0],[-0.3906,-0.875,0],[-0.375,-0.875,0],[-0.3594,-0.875,0],[-0.3438,-0.875,0],[-0.3281,-0.875,0],[-0.3125,-0.875,0],[-0.2969,-0.875,0],[-0.2812,-0.875,0],[-0.2656,-0.875,0],[-0.25,-0.875,0],[-0.2344,-0.875,0],[-0.2188,-0.875,0],[-0.2031,-0.875,0],[-0.1875,-0.875,0],[-0.1719,-0.875,0],[-0.1562,-0.875,0],[-0.1406,-0.875,0],[-0.125,-0.875,0],[-0.1094,-0.875,0],[-0.0938,-0.875,0],[-0.0781,-0.875,0],[-0.0625,-0.875,0],[-0.0469,-0.875,0],[-0.0312,-0.875,0],[-0.0156,-0.875,0],[0,-0.875,0],[0.0156,-0.875,0],[0.0312,-0.875,0],[0.0469,-0.875,0],[0.0625,-0.875,0],[0.0781,-0.875,0],[0.0938,-0.875,0],[0.1094,-0.875,0],[0.125,-0.875,0],[0.1406,-0.875,0],[0.1562,-0.875,0],[0.1719,-0.875,0],[0.1875,-0.875,0],[0.2031,-0.875,0],[0.2188,-0.875,0],[0.2344,-0.875,0],[0.25,-0.875,0],[0.2656,-0.875,0],[0.2812,-0.875,0],[0.2969,-0.875,0],[0.3125,-0.875,0],[0.3281,-0.875,0],[0.3438,-0.875,0],[0.3594,-0.875,0],[0.375,-0.875,0],[0.3906,-0.875,0],[0.4062,-0.875,0],[0.4219,-0.875,0],[0.4375,-0.875,0],[0.4531,-0.875,0],[0.4688,-0.875,0],[0.4844,-0.875,0],[0.5,-0.875,0],[0.5156,-0.875,0],[0.5312,-0.875,0],[0.5469,-0.875,0],[0.5625,-0.875,0],[0.5781,-0.875,0],[0.5938,-0.875,0],[0.6094,-0.875,0],[0.625,-0.875,0],[0.6406,-0.875,0],[0.6562,-0.875,0],[0.6719,-0.875,0],[0.6875,-0.875,0],[0.7031,-0.875,0],[0.7188,-0.875,0],[0.7344,-0.875,0],[0.75,-0.875,0],[0.7656,-0.875,0],[0.7812,-0.875,0],[0.7969,-0.875,0],[0.8125,-0.875,0],[0.8281,-0.875,0],[0.8438,-0.875,0],[0.8594,-0.875,0],[0.875,-0.875,0],[0.8906,-0.875,0],[0.9062,-0.875,0],[0.9219,-0.875,0],[0.9375,-0.875,0],[0.9531,-0.875,0],[0.9688,-0.875,0],[0.9844,-0.875,0],[-1,-0.8594,0],[-0.9844,-0.8594,0],[-0.9688,-0.8594,0],[-0.9531,-0.8594,0],[-0.9375,-0.8594,0],[-0.9219,-0.8594,0],[-0.9062,-0.8594,0],[-0.8906,-0.8594,0],[-0.875,-0.8594,0],[-0.8594,-0.8594,0],[-0.8438,-0.8594,0],[-0.8281,-0.8594,0],[-0.8125,-0.8594,0],[-0.7969,-0.8594,0],[-0.7812,-0.8594,0],[-0.7656,-0.8594,0],[-0.75,-0.8594,0],[-0.7344,-0.8594,0],[-0.7188,-0.8594,0],[-0.7031,-0.8594,0],[-0.6875,-0.8594,0],[-0.6719,-0.8594,0],[-0.6562,-0.8594,0],[-0.6406,-0.8594,0],[-0.625,-0.8594,0],[-0.6094,-0.8594,0],[-0.5938,-0.8594,0],[-0.5781,-0.8594,0],[-0.5625,-0.8594,0],[-0.5469,-0.8594,0],[-0.5312,-0.8594,0],[-0.5156,-0.8594,0],[-0.5,-0.8594,0],[-0.4844,-0.8594,0],[-0.4688,-0.8594,0],[-0.4531,-0.8594,0],[-0.4375,-0.8594,0],[-0.4219,-0.8594,0],[-0.4062,-0.8594,0],[-0.3906,-0.8594,0],[-0.375,-0.8594,0],[-0.3594,-0.8594,0],[-0.3438,-0.8594,0],[-0.3281,-0.8594,0],[-0.3125,-0.8594,0],[-0.2969,-0.8594,0],[-0.2812,-0.8594,0],[-0.2656,-0.8594,0],[-0.25,-0.8594,0],[-0.2344,-0.8594,0],[-0.2188,-0.8594,0],[-0.2031,-0.8594,0],[-0.1875,-0.8594,0],[-0.1719,-0.8594,0],[-0.1562,-0.8594,0],[-0.1406,-0.8594,0],[-0.125,-0.8594,0],[-0.1094,-0.8594,0],[-0.0938,-0.8594,0],[-0.0781,-0.8594,0],[-0.0625,-0.8594,0],[-0.0469,-0.8594,0],[-0.0312,-0.8594,0],[-0.0156,-0.8594,0],[0,-0.8594,0],[0.0156,-0.8594,0],[0.0312,-0.8594,0],[0.0469,-0.8594,0],[0.0625,-0.8594,0],[0.0781,-0.8594,0],[0.0938,-0.8594,0],[0.1094,-0.8594,0],[0.125,-0.8594,0],[0.1406,-0.8594,0],[0.1562,-0.8594,0],[0.1719,-0.8594,0],[0.1875,-0.8594,0],[0.2031,-0.8594,0],[0.2188,-0.8594,0],[0.2344,-0.8594,0],[0.25,-0.8594,0],[0.2656,-0.8594,0],[0.2812,-0.8594,0],[0.2969,-0.8594,0],[0.3125,-0.8594,0],[0.3281,-0.8594,0],[0.3438,-0.8594,0],[0.3594,-0.8594,0],[0.375,-0.8594,0],[0.3906,-0.8594,0],[0.4062,-0.8594,0],[0.4219,-0.8594,0],[0.4375,-0.8594,0],[0.4531,-0.8594,0],[0.4688,-0.8594,0],[0.4844,-0.8594,0],[0.5,-0.8594,0],[0.5156,-0.8594,0],[0.5312,-0.8594,0],[0.5469,-0.8594,0],[0.5625,-0.8594,0],[0.5781,-0.8594,0],[0.5938,-0.8594,0],[0.6094,-0.8594,0],[0.625,-0.8594,0],[0.6406,-0.8594,0],[0.6562,-0.8594,0],[0.6719,-0.8594,0],[0.6875,-0.8594,0],[0.7031,-0.8594,0],[0.7188,-0.8594,0],[0.7344,-0.8594,0],[0.75,-0.8594,0],[0.7656,-0.8594,0],[0.7812,-0.8594,0],[0.7969,-0.8594,0],[0.8125,-0.8594,0],[0.8281,-0.8594,0],[0.8438,-0.8594,0],[0.8594,-0.8594,0],[0.875,-0.8594,0],[0.8906,-0.8594,0],[0.9062,-0.8594,0],[0.9219,-0.8594,0],[0.9375,-0.8594,0],[0.9531,-0.8594,0],[0.9688,-0.8594,0],[0.9844,-0.8594,0],[-1,-0.8438,0],[-0.9844,-0.8438,0],[-0.9688,-0.8438,0],[-0.9531,-0.8438,0],[-0.9375,-0.8438,0],[-0.9219,-0.8438,0],[-0.9062,-0.8438,0],[-0.8906,-0.8438,0],[-0.875,-0.8438,0],[-0.8594,-0.8438,0],[-0.8438,-0.8438,0],[-0.8281,-0.8438,0],[-0.8125,-0.8438,0],[-0.7969,-0.8438,0],[-0.7812,-0.8438,0],[-0.7656,-0.8438,0],[-0.75,-0.8438,0],[-0.7344,-0.8438,0],[-0.7188,-0.8438,0],[-0.7031,-0.8438,0],[-0.6875,-0.8438,0],[-0.6719,-0.8438,0],[-0.6562,-0.8438,0],[-0.6406,-0.8438,0],[-0.625,-0.8438,0],[-0.6094,-0.8438,0],[-0.5938,-0.8438,0],[-0.5781,-0.8438,0],[-0.5625,-0.8438,0],[-0.5469,-0.8438,0],[-0.5312,-0.8438,0],[-0.5156,-0.8438,0],[-0.5,-0.8438,0],[-0.4844,-0.8438,0],[-0.4688,-0.8438,0],[-0.4531,-0.8438,0],[-0.4375,-0.8438,0],[-0.4219,-0.8438,0],[-0.4062,-0.8438,0],[-0.3906,-0.8438,0],[-0.375,-0.8438,0],[-0.3594,-0.8438,0],[-0.3438,-0.8438,0],[-0.3281,-0.8438,0],[-0.3125,-0.8438,0],[-0.2969,-0.8438,0],[-0.2812,-0.8438,0],[-0.2656,-0.8438,0],[-0.25,-0.8438,0],[-0.2344,-0.8438,0],[-0.2188,-0.8438,0],[-0.2031,-0.8438,0],[-0.1875,-0.8438,0],[-0.1719,-0.8438,0],[-0.1562,-0.8438,0],[-0.1406,-0.8438,0],[-0.125,-0.8438,0],[-0.1094,-0.8438,0],[-0.0938,-0.8438,0],[-0.0781,-0.8438,0],[-0.0625,-0.8438,0],[-0.0469,-0.8438,0],[-0.0312,-0.8438,0],[-0.0156,-0.8438,0],[0,-0.8438,0],[0.0156,-0.8438,0],[0.0312,-0.8438,0],[0.0469,-0.8438,0],[0.0625,-0.8438,0],[0.0781,-0.8438,0],[0.0938,-0.8438,0],[0.1094,-0.8438,0],[0.125,-0.8438,0],[0.1406,-0.8438,0],[0.1562,-0.8438,0],[0.1719,-0.8438,0],[0.1875,-0.8438,0],[0.2031,-0.8438,0],[0.2188,-0.8438,0],[0.2344,-0.8438,0],[0.25,-0.8438,0],[0.2656,-0.8438,0],[0.2812,-0.8438,0],[0.2969,-0.8438,0],[0.3125,-0.8438,0],[0.3281,-0.8438,0],[0.3438,-0.8438,0],[0.3594,-0.8438,0],[0.375,-0.8438,0],[0.3906,-0.8438,0],[0.4062,-0.8438,0],[0.4219,-0.8438,0],[0.4375,-0.8438,0],[0.4531,-0.8438,0],[0.4688,-0.8438,0],[0.4844,-0.8438,0],[0.5,-0.8438,0],[0.5156,-0.8438,0],[0.5312,-0.8438,0],[0.5469,-0.8438,0],[0.5625,-0.8438,0],[0.5781,-0.8438,0],[0.5938,-0.8438,0],[0.6094,-0.8438,0],[0.625,-0.8438,0],[0.6406,-0.8438,0],[0.6562,-0.8438,0],[0.6719,-0.8438,0],[0.6875,-0.8438,0],[0.7031,-0.8438,0],[0.7188,-0.8438,0],[0.7344,-0.8438,0],[0.75,-0.8438,0],[0.7656,-0.8438,0],[0.7812,-0.8438,0],[0.7969,-0.8438,0],[0.8125,-0.8438,0],[0.8281,-0.8438,0],[0.8438,-0.8438,0],[0.8594,-0.8438,0],[0.875,-0.8438,0],[0.8906,-0.8438,0],[0.9062,-0.8438,0],[0.9219,-0.8438,0],[0.9375,-0.8438,0],[0.9531,-0.8438,0],[0.9688,-0.8438,0],[0.9844,-0.8438,0],[-1,-0.8281,0],[-0.9844,-0.8281,0],[-0.9688,-0.8281,0],[-0.9531,-0.8281,0],[-0.9375,-0.8281,0],[-0.9219,-0.8281,0],[-0.9062,-0.8281,0],[-0.8906,-0.8281,0],[-0.875,-0.8281,0],[-0.8594,-0.8281,0],[-0.8438,-0.8281,0],[-0.8281,-0.8281,0],[-0.8125,-0.8281,0],[-0.7969,-0.8281,0],[-0.7812,-0.8281,0],[-0.7656,-0.8281,0],[-0.75,-0.8281,0],[-0.7344,-0.8281,0],[-0.7188,-0.8281,0],[-0.7031,-0.8281,0],[-0.6875,-0.8281,0],[-0.6719,-0.8281,0],[-0.6562,-0.8281,0],[-0.6406,-0.8281,0],[-0.625,-0.8281,0],[-0.6094,-0.8281,0],[-0.5938,-0.8281,0],[-0.5781,-0.8281,0],[-0.5625,-0.8281,0],[-0.5469,-0.8281,0],[-0.5312,-0.8281,0],[-0.5156,-0.8281,0],[-0.5,-0.8281,0],[-0.4844,-0.8281,0],[-0.4688,-0.8281,0],[-0.4531,-0.8281,0],[-0.4375,-0.8281,0],[-0.4219,-0.8281,0],[-0.4062,-0.8281,0],[-0.3906,-0.8281,0],[-0.375,-0.8281,0],[-0.3594,-0.8281,0],[-0.3438,-0.8281,0],[-0.3281,-0.8281,0],[-0.3125,-0.8281,0],[-0.2969,-0.8281,0],[-0.2812,-0.8281,0],[-0.2656,-0.8281,0],[-0.25,-0.8281,0],[-0.2344,-0.8281,0],[-0.2188,-0.8281,0],[-0.2031,-0.8281,0],[-0.1875,-0.8281,0],[-0.1719,-0.8281,0],[-0.1562,-0.8281,0],[-0.1406,-0.8281,0],[-0.125,-0.8281,0],[-0.1094,-0.8281,0],[-0.0938,-0.8281,0],[-0.0781,-0.8281,0],[-0.0625,-0.8281,0],[-0.0469,-0.8281,0],[-0.0312,-0.8281,0],[-0.0156,-0.8281,0],[0,-0.8281,0],[0.0156,-0.8281,0],[0.0312,-0.8281,0],[0.0469,-0.8281,0],[0.0625,-0.8281,0],[0.0781,-0.8281,0],[0.0938,-0.8281,0],[0.1094,-0.8281,0],[0.125,-0.8281,0],[0.1406,-0.8281,0],[0.1562,-0.8281,0],[0.1719,-0.8281,0],[0.1875,-0.8281,0],[0.2031,-0.8281,0],[0.2188,-0.8281,0],[0.2344,-0.8281,0],[0.25,-0.8281,0],[0.2656,-0.8281,0],[0.2812,-0.8281,0],[0.2969,-0.8281,0],[0.3125,-0.8281,0],[0.3281,-0.8281,0],[0.3438,-0.8281,0],[0.3594,-0.8281,0],[0.375,-0.8281,0],[0.3906,-0.8281,0],[0.4062,-0.8281,0],[0.4219,-0.8281,0],[0.4375,-0.8281,0],[0.4531,-0.8281,0],[0.4688,-0.8281,0],[0.4844,-0.8281,0],[0.5,-0.8281,0],[0.5156,-0.8281,0],[0.5312,-0.8281,0],[0.5469,-0.8281,0],[0.5625,-0.8281,0],[0.5781,-0.8281,0],[0.5938,-0.8281,0],[0.6094,-0.8281,0],[0.625,-0.8281,0],[0.6406,-0.8281,0],[0.6562,-0.8281,0],[0.6719,-0.8281,0],[0.6875,-0.8281,0],[0.7031,-0.8281,0],[0.7188,-0.8281,0],[0.7344,-0.8281,0],[0.75,-0.8281,0],[0.7656,-0.8281,0],[0.7812,-0.8281,0],[0.7969,-0.8281,0],[0.8125,-0.8281,0],[0.8281,-0.8281,0],[0.8438,-0.8281,0],[0.8594,-0.8281,0],[0.875,-0.8281,0],[0.8906,-0.8281,0],[0.9062,-0.8281,0],[0.9219,-0.8281,0],[0.9375,-0.8281,0],[0.9531,-0.8281,0],[0.9688,-0.8281,0],[0.9844,-0.8281,0],[-1,-0.8125,0],[-0.9844,-0.8125,0],[-0.9688,-0.8125,0],[-0.9531,-0.8125,0],[-0.9375,-0.8125,0],[-0.9219,-0.8125,0],[-0.9062,-0.8125,0],[-0.8906,-0.8125,0],[-0.875,-0.8125,0],[-0.8594,-0.8125,0],[-0.8438,-0.8125,0],[-0.8281,-0.8125,0],[-0.8125,-0.8125,0],[-0.7969,-0.8125,0],[-0.7812,-0.8125,0],[-0.7656,-0.8125,0],[-0.75,-0.8125,0],[-0.7344,-0.8125,0],[-0.7188,-0.8125,0],[-0.7031,-0.8125,0],[-0.6875,-0.8125,0],[-0.6719,-0.8125,0],[-0.6562,-0.8125,0],[-0.6406,-0.8125,0],[-0.625,-0.8125,0],[-0.6094,-0.8125,0],[-0.5938,-0.8125,0],[-0.5781,-0.8125,0],[-0.5625,-0.8125,0],[-0.5469,-0.8125,0],[-0.5312,-0.8125,0],[-0.5156,-0.8125,0],[-0.5,-0.8125,0],[-0.4844,-0.8125,0],[-0.4688,-0.8125,0],[-0.4531,-0.8125,0],[-0.4375,-0.8125,0],[-0.4219,-0.8125,0],[-0.4062,-0.8125,0],[-0.3906,-0.8125,0],[-0.375,-0.8125,0],[-0.3594,-0.8125,0],[-0.3438,-0.8125,0],[-0.3281,-0.8125,0],[-0.3125,-0.8125,0],[-0.2969,-0.8125,0],[-0.2812,-0.8125,0],[-0.2656,-0.8125,0],[-0.25,-0.8125,0],[-0.2344,-0.8125,0],[-0.2188,-0.8125,0],[-0.2031,-0.8125,0],[-0.1875,-0.8125,0],[-0.1719,-0.8125,0],[-0.1562,-0.8125,0],[-0.1406,-0.8125,0],[-0.125,-0.8125,0],[-0.1094,-0.8125,0],[-0.0938,-0.8125,0],[-0.0781,-0.8125,0],[-0.0625,-0.8125,0],[-0.0469,-0.8125,0],[-0.0312,-0.8125,0],[-0.0156,-0.8125,0],[0,-0.8125,0],[0.0156,-0.8125,0],[0.0312,-0.8125,0],[0.0469,-0.8125,0],[0.0625,-0.8125,0],[0.0781,-0.8125,0],[0.0938,-0.8125,0],[0.1094,-0.8125,0],[0.125,-0.8125,0],[0.1406,-0.8125,0],[0.1562,-0.8125,0],[0.1719,-0.8125,0],[0.1875,-0.8125,0],[0.2031,-0.8125,0],[0.2188,-0.8125,0],[0.2344,-0.8125,0],[0.25,-0.8125,0],[0.2656,-0.8125,0],[0.2812,-0.8125,0],[0.2969,-0.8125,0],[0.3125,-0.8125,0],[0.3281,-0.8125,0],[0.3438,-0.8125,0],[0.3594,-0.8125,0],[0.375,-0.8125,0],[0.3906,-0.8125,0],[0.4062,-0.8125,0],[0.4219,-0.8125,0],[0.4375,-0.8125,0],[0.4531,-0.8125,0],[0.4688,-0.8125,0],[0.4844,-0.8125,0],[0.5,-0.8125,0],[0.5156,-0.8125,0],[0.5312,-0.8125,0],[0.5469,-0.8125,0],[0.5625,-0.8125,0],[0.5781,-0.8125,0],[0.5938,-0.8125,0],[0.6094,-0.8125,0],[0.625,-0.8125,0],[0.6406,-0.8125,0],[0.6562,-0.8125,0],[0.6719,-0.8125,0],[0.6875,-0.8125,0],[0.7031,-0.8125,0],[0.7188,-0.8125,0],[0.7344,-0.8125,0],[0.75,-0.8125,0],[0.7656,-0.8125,0],[0.7812,-0.8125,0],[0.7969,-0.8125,0],[0.8125,-0.8125,0],[0.8281,-0.8125,0],[0.8438,-0.8125,0],[0.8594,-0.8125,0],[0.875,-0.8125,0],[0.8906,-0.8125,0],[0.9062,-0.8125,0],[0.9219,-0.8125,0],[0.9375,-0.8125,0],[0.9531,-0.8125,0],[0.9688,-0.8125,0],[0.9844,-0.8125,0],[-1,-0.7969,0],[-0.9844,-0.7969,0],[-0.9688,-0.7969,0],[-0.9531,-0.7969,0],[-0.9375,-0.7969,0],[-0.9219,-0.7969,0],[-0.9062,-0.7969,0],[-0.8906,-0.7969,0],[-0.875,-0.7969,0],[-0.8594,-0.7969,0],[-0.8438,-0.7969,0],[-0.8281,-0.7969,0],[-0.8125,-0.7969,0],[-0.7969,-0.7969,0],[-0.7812,-0.7969,0],[-0.7656,-0.7969,0],[-0.75,-0.7969,0],[-0.7344,-0.7969,0],[-0.7188,-0.7969,0],[-0.7031,-0.7969,0],[-0.6875,-0.7969,0],[-0.6719,-0.7969,0],[-0.6562,-0.7969,0],[-0.6406,-0.7969,0],[-0.625,-0.7969,0],[-0.6094,-0.7969,0],[-0.5938,-0.7969,0],[-0.5781,-0.7969,0],[-0.5625,-0.7969,0],[-0.5469,-0.7969,0],[-0.5312,-0.7969,0],[-0.5156,-0.7969,0],[-0.5,-0.7969,0],[-0.4844,-0.7969,0],[-0.4688,-0.7969,0],[-0.4531,-0.7969,0],[-0.4375,-0.7969,0],[-0.4219,-0.7969,0],[-0.4062,-0.7969,0],[-0.3906,-0.7969,0],[-0.375,-0.7969,0],[-0.3594,-0.7969,0],[-0.3438,-0.7969,0],[-0.3281,-0.7969,0],[-0.3125,-0.7969,0],[-0.2969,-0.7969,0],[-0.2812,-0.7969,0],[-0.2656,-0.7969,0],[-0.25,-0.7969,0],[-0.2344,-0.7969,0],[-0.2188,-0.7969,0],[-0.2031,-0.7969,0],[-0.1875,-0.7969,0],[-0.1719,-0.7969,0],[-0.1562,-0.7969,0],[-0.1406,-0.7969,0],[-0.125,-0.7969,0],[-0.1094,-0.7969,0],[-0.0938,-0.7969,0],[-0.0781,-0.7969,0],[-0.0625,-0.7969,0],[-0.0469,-0.7969,0],[-0.0312,-0.7969,0],[-0.0156,-0.7969,0],[0,-0.7969,0],[0.0156,-0.7969,0],[0.0312,-0.7969,0],[0.0469,-0.7969,0],[0.0625,-0.7969,0],[0.0781,-0.7969,0],[0.0938,-0.7969,0],[0.1094,-0.7969,0],[0.125,-0.7969,0],[0.1406,-0.7969,0],[0.1562,-0.7969,0],[0.1719,-0.7969,0],[0.1875,-0.7969,0],[0.2031,-0.7969,0],[0.2188,-0.7969,0],[0.2344,-0.7969,0],[0.25,-0.7969,0],[0.2656,-0.7969,0],[0.2812,-0.7969,0],[0.2969,-0.7969,0],[0.3125,-0.7969,0],[0.3281,-0.7969,0],[0.3438,-0.7969,0],[0.3594,-0.7969,0],[0.375,-0.7969,0],[0.3906,-0.7969,0],[0.4062,-0.7969,0],[0.4219,-0.7969,0],[0.4375,-0.7969,0],[0.4531,-0.7969,0],[0.4688,-0.7969,0],[0.4844,-0.7969,0],[0.5,-0.7969,0],[0.5156,-0.7969,0],[0.5312,-0.7969,0],[0.5469,-0.7969,0],[0.5625,-0.7969,0],[0.5781,-0.7969,0],[0.5938,-0.7969,0],[0.6094,-0.7969,0],[0.625,-0.7969,0],[0.6406,-0.7969,0],[0.6562,-0.7969,0],[0.6719,-0.7969,0],[0.6875,-0.7969,0],[0.7031,-0.7969,0],[0.7188,-0.7969,0],[0.7344,-0.7969,0],[0.75,-0.7969,0],[0.7656,-0.7969,0],[0.7812,-0.7969,0],[0.7969,-0.7969,0],[0.8125,-0.7969,0],[0.8281,-0.7969,0],[0.8438,-0.7969,0],[0.8594,-0.7969,0],[0.875,-0.7969,0],[0.8906,-0.7969,0],[0.9062,-0.7969,0],[0.9219,-0.7969,0],[0.9375,-0.7969,0],[0.9531,-0.7969,0],[0.9688,-0.7969,0],[0.9844,-0.7969,0],[-1,-0.7812,0],[-0.9844,-0.7812,0],[-0.9688,-0.7812,0],[-0.9531,-0.7812,0],[-0.9375,-0.7812,0],[-0.9219,-0.7812,0],[-0.9062,-0.7812,0],[-0.8906,-0.7812,0],[-0.875,-0.7812,0],[-0.8594,-0.7812,0],[-0.8438,-0.7812,0],[-0.8281,-0.7812,0],[-0.8125,-0.7812,0],[-0.7969,-0.7812,0],[-0.7812,-0.7812,0],[-0.7656,-0.7812,0],[-0.75,-0.7812,0],[-0.7344,-0.7812,0],[-0.7188,-0.7812,0],[-0.7031,-0.7812,0],[-0.6875,-0.7812,0],[-0.6719,-0.7812,0],[-0.6562,-0.7812,0],[-0.6406,-0.7812,0],[-0.625,-0.7812,0],[-0.6094,-0.7812,0],[-0.5938,-0.7812,0],[-0.5781,-0.7812,0],[-0.5625,-0.7812,0],[-0.5469,-0.7812,0],[-0.5312,-0.7812,0],[-0.5156,-0.7812,0],[-0.5,-0.7812,0],[-0.4844,-0.7812,0],[-0.4688,-0.7812,0],[-0.4531,-0.7812,0],[-0.4375,-0.7812,0],[-0.4219,-0.7812,0],[-0.4062,-0.7812,0],[-0.3906,-0.7812,0],[-0.375,-0.7812,0],[-0.3594,-0.7812,0],[-0.3438,-0.7812,0],[-0.3281,-0.7812,0],[-0.3125,-0.7812,0],[-0.2969,-0.7812,0],[-0.2812,-0.7812,0],[-0.2656,-0.7812,0],[-0.25,-0.7812,0],[-0.2344,-0.7812,0],[-0.2188,-0.7812,0],[-0.2031,-0.7812,0],[-0.1875,-0.7812,0],[-0.1719,-0.7812,0],[-0.1562,-0.7812,0],[-0.1406,-0.7812,0],[-0.125,-0.7812,0],[-0.1094,-0.7812,0],[-0.0938,-0.7812,0],[-0.0781,-0.7812,0],[-0.0625,-0.7812,0],[-0.0469,-0.7812,0],[-0.0312,-0.7812,0],[-0.0156,-0.7812,0],[0,-0.7812,0],[0.0156,-0.7812,0],[0.0312,-0.7812,0],[0.0469,-0.7812,0],[0.0625,-0.7812,0],[0.0781,-0.7812,0],[0.0938,-0.7812,0],[0.1094,-0.7812,0],[0.125,-0.7812,0],[0.1406,-0.7812,0],[0.1562,-0.7812,0],[0.1719,-0.7812,0],[0.1875,-0.7812,0],[0.2031,-0.7812,0],[0.2188,-0.7812,0],[0.2344,-0.7812,0],[0.25,-0.7812,0],[0.2656,-0.7812,0],[0.2812,-0.7812,0],[0.2969,-0.7812,0],[0.3125,-0.7812,0],[0.3281,-0.7812,0],[0.3438,-0.7812,0],[0.3594,-0.7812,0],[0.375,-0.7812,0],[0.3906,-0.7812,0],[0.4062,-0.7812,0],[0.4219,-0.7812,0],[0.4375,-0.7812,0],[0.4531,-0.7812,0],[0.4688,-0.7812,0],[0.4844,-0.7812,0],[0.5,-0.7812,0],[0.5156,-0.7812,0],[0.5312,-0.7812,0],[0.5469,-0.7812,0],[0.5625,-0.7812,0],[0.5781,-0.7812,0],[0.5938,-0.7812,0],[0.6094,-0.7812,0],[0.625,-0.7812,0],[0.6406,-0.7812,0],[0.6562,-0.7812,0],[0.6719,-0.7812,0],[0.6875,-0.7812,0],[0.7031,-0.7812,0],[0.7188,-0.7812,0],[0.7344,-0.7812,0],[0.75,-0.7812,0],[0.7656,-0.7812,0],[0.7812,-0.7812,0],[0.7969,-0.7812,0],[0.8125,-0.7812,0],[0.8281,-0.7812,0],[0.8438,-0.7812,0],[0.8594,-0.7812,0],[0.875,-0.7812,0],[0.8906,-0.7812,0],[0.9062,-0.7812,0],[0.9219,-0.7812,0],[0.9375,-0.7812,0],[0.9531,-0.7812,0],[0.9688,-0.7812,0],[0.9844,-0.7812,0],[-1,-0.7656,0],[-0.9844,-0.7656,0],[-0.9688,-0.7656,0],[-0.9531,-0.7656,0],[-0.9375,-0.7656,0],[-0.9219,-0.7656,0],[-0.9062,-0.7656,0],[-0.8906,-0.7656,0],[-0.875,-0.7656,0],[-0.8594,-0.7656,0],[-0.8438,-0.7656,0],[-0.8281,-0.7656,0],[-0.8125,-0.7656,0],[-0.7969,-0.7656,0],[-0.7812,-0.7656,0],[-0.7656,-0.7656,0],[-0.75,-0.7656,0],[-0.7344,-0.7656,0],[-0.7188,-0.7656,0],[-0.7031,-0.7656,0],[-0.6875,-0.7656,0],[-0.6719,-0.7656,0],[-0.6562,-0.7656,0],[-0.6406,-0.7656,0],[-0.625,-0.7656,0],[-0.6094,-0.7656,0],[-0.5938,-0.7656,0],[-0.5781,-0.7656,0],[-0.5625,-0.7656,0],[-0.5469,-0.7656,0],[-0.5312,-0.7656,0],[-0.5156,-0.7656,0.0059],[-0.5,-0.7656,0.0025],[-0.4844,-0.7656,0],[-0.4688,-0.7656,0],[-0.4531,-0.7656,0],[-0.4375,-0.7656,0],[-0.4219,-0.7656,0],[-0.4062,-0.7656,0],[-0.3906,-0.7656,0],[-0.375,-0.7656,0],[-0.3594,-0.7656,0],[-0.3438,-0.7656,0],[-0.3281,-0.7656,0],[-0.3125,-0.7656,0],[-0.2969,-0.7656,0],[-0.2812,-0.7656,0],[-0.2656,-0.7656,0],[-0.25,-0.7656,0],[-0.2344,-0.7656,0],[-0.2188,-0.7656,0],[-0.2031,-0.7656,0],[-0.1875,-0.7656,0],[-0.1719,-0.7656,0],[-0.1562,-0.7656,0],[-0.1406,-0.7656,0],[-0.125,-0.7656,0],[-0.1094,-0.7656,0],[-0.0938,-0.7656,0],[-0.0781,-0.7656,0],[-0.0625,-0.7656,0],[-0.0469,-0.7656,0],[-0.0312,-0.7656,0],[-0.0156,-0.7656,0],[0,-0.7656,0],[0.0156,-0.7656,0],[0.0312,-0.7656,0],[0.0469,-0.7656,0],[0.0625,-0.7656,0],[0.0781,-0.7656,0],[0.0938,-0.7656,0],[0.1094,-0.7656,0],[0.125,-0.7656,0],[0.1406,-0.7656,0],[0.1562,-0.7656,0],[0.1719,-0.7656,0],[0.1875,-0.7656,0],[0.2031,-0.7656,0],[0.2188,-0.7656,0],[0.2344,-0.7656,0],[0.25,-0.7656,0],[0.2656,-0.7656,0],[0.2812,-0.7656,0],[0.2969,-0.7656,0],[0.3125,-0.7656,0],[0.3281,-0.7656,0],[0.3438,-0.7656,0],[0.3594,-0.7656,0],[0.375,-0.7656,0],[0.3906,-0.7656,0],[0.4062,-0.7656,0],[0.4219,-0.7656,0],[0.4375,-0.7656,0],[0.4531,-0.7656,0],[0.4688,-0.7656,0],[0.4844,-0.7656,0],[0.5,-0.7656,0],[0.5156,-0.7656,0],[0.5312,-0.7656,0],[0.5469,-0.7656,0],[0.5625,-0.7656,0],[0.5781,-0.7656,0],[0.5938,-0.7656,0],[0.6094,-0.7656,0],[0.625,-0.7656,0],[0.6406,-0.7656,0],[0.6562,-0.7656,0],[0.6719,-0.7656,0],[0.6875,-0.7656,0],[0.7031,-0.7656,0],[0.7188,-0.7656,0],[0.7344,-0.7656,0],[0.75,-0.7656,0],[0.7656,-0.7656,0],[0.7812,-0.7656,0],[0.7969,-0.7656,0],[0.8125,-0.7656,0],[0.8281,-0.7656,0],[0.8438,-0.7656,0],[0.8594,-0.7656,0],[0.875,-0.7656,0],[0.8906,-0.7656,0],[0.9062,-0.7656,0],[0.9219,-0.7656,0],[0.9375,-0.7656,0],[0.9531,-0.7656,0],[0.9688,-0.7656,0],[0.9844,-0.7656,0],[-1,-0.75,0],[-0.9844,-0.75,0],[-0.9688,-0.75,0],[-0.9531,-0.75,0],[-0.9375,-0.75,0],[-0.9219,-0.75,0],[-0.9062,-0.75,0],[-0.8906,-0.75,0],[-0.875,-0.75,0],[-0.8594,-0.75,0],[-0.8438,-0.75,0],[-0.8281,-0.75,0],[-0.8125,-0.75,0],[-0.7969,-0.75,0],[-0.7812,-0.75,0],[-0.7656,-0.75,0],[-0.75,-0.75,0],[-0.7344,-0.75,0],[-0.7188,-0.75,0],[-0.7031,-0.75,0],[-0.6875,-0.75,0],[-0.6719,-0.75,0],[-0.6562,-0.75,0],[-0.6406,-0.75,0],[-0.625,-0.75,0],[-0.6094,-0.75,0],[-0.5938,-0.75,0],[-0.5781,-0.75,0.0005],[-0.5625,-0.75,0.0059],[-0.5469,-0.75,0.0088],[-0.5312,-0.75,0.0113],[-0.5156,-0.75,0.0123],[-0.5,-0.75,0.0113],[-0.4844,-0.75,0.0113],[-0.4688,-0.75,0.0093],[-0.4531,-0.75,0.0059],[-0.4375,-0.75,0],[-0.4219,-0.75,0],[-0.4062,-0.75,0],[-0.3906,-0.75,0],[-0.375,-0.75,0],[-0.3594,-0.75,0],[-0.3438,-0.75,0],[-0.3281,-0.75,0],[-0.3125,-0.75,0],[-0.2969,-0.75,0],[-0.2812,-0.75,0],[-0.2656,-0.75,0],[-0.25,-0.75,0],[-0.2344,-0.75,0],[-0.2188,-0.75,0],[-0.2031,-0.75,0],[-0.1875,-0.75,0],[-0.1719,-0.75,0],[-0.1562,-0.75,0],[-0.1406,-0.75,0],[-0.125,-0.75,0],[-0.1094,-0.75,0],[-0.0938,-0.75,0],[-0.0781,-0.75,0],[-0.0625,-0.75,0],[-0.0469,-0.75,0],[-0.0312,-0.75,0],[-0.0156,-0.75,0],[0,-0.75,0],[0.0156,-0.75,0],[0.0312,-0.75,0],[0.0469,-0.75,0],[0.0625,-0.75,0],[0.0781,-0.75,0],[0.0938,-0.75,0],[0.1094,-0.75,0],[0.125,-0.75,0],[0.1406,-0.75,0],[0.1562,-0.75,0],[0.1719,-0.75,0],[0.1875,-0.75,0],[0.2031,-0.75,0],[0.2188,-0.75,0],[0.2344,-0.75,0],[0.25,-0.75,0],[0.2656,-0.75,0],[0.2812,-0.75,0],[0.2969,-0.75,0],[0.3125,-0.75,0],[0.3281,-0.75,0],[0.3438,-0.75,0],[0.3594,-0.75,0],[0.375,-0.75,0],[0.3906,-0.75,0],[0.4062,-0.75,0],[0.4219,-0.75,0],[0.4375,-0.75,0],[0.4531,-0.75,0],[0.4688,-0.75,0],[0.4844,-0.75,0],[0.5,-0.75,0],[0.5156,-0.75,0],[0.5312,-0.75,0],[0.5469,-0.75,0],[0.5625,-0.75,0],[0.5781,-0.75,0],[0.5938,-0.75,0],[0.6094,-0.75,0],[0.625,-0.75,0],[0.6406,-0.75,0],[0.6562,-0.75,0],[0.6719,-0.75,0],[0.6875,-0.75,0],[0.7031,-0.75,0],[0.7188,-0.75,0],[0.7344,-0.75,0],[0.75,-0.75,0],[0.7656,-0.75,0],[0.7812,-0.75,0],[0.7969,-0.75,0],[0.8125,-0.75,0],[0.8281,-0.75,0],[0.8438,-0.75,0],[0.8594,-0.75,0],[0.875,-0.75,0],[0.8906,-0.75,0],[0.9062,-0.75,0],[0.9219,-0.75,0],[0.9375,-0.75,0],[0.9531,-0.75,0],[0.9688,-0.75,0],[0.9844,-0.75,0],[-1,-0.7344,0],[-0.9844,-0.7344,0],[-0.9688,-0.7344,0],[-0.9531,-0.7344,0],[-0.9375,-0.7344,0],[-0.9219,-0.7344,0],[-0.9062,-0.7344,0],[-0.8906,-0.7344,0],[-0.875,-0.7344,0],[-0.8594,-0.7344,0],[-0.8438,-0.7344,0],[-0.8281,-0.7344,0],[-0.8125,-0.7344,0],[-0.7969,-0.7344,0],[-0.7812,-0.7344,0],[-0.7656,-0.7344,0],[-0.75,-0.7344,0],[-0.7344,-0.7344,0],[-0.7188,-0.7344,0],[-0.7031,-0.7344,0],[-0.6875,-0.7344,0],[-0.6719,-0.7344,0],[-0.6562,-0.7344,0],[-0.6406,-0.7344,0],[-0.625,-0.7344,0.0015],[-0.6094,-0.7344,0.0039],[-0.5938,-0.7344,0.0093],[-0.5781,-0.7344,0.0108],[-0.5625,-0.7344,0.0147],[-0.5469,-0.7344,0.0147],[-0.5312,-0.7344,0.0123],[-0.5156,-0.7344,0.0083],[-0.5,-0.7344,0.0098],[-0.4844,-0.7344,0.0142],[-0.4688,-0.7344,0.0132],[-0.4531,-0.7344,0.0093],[-0.4375,-0.7344,0.0074],[-0.4219,-0.7344,0.002],[-0.4062,-0.7344,0],[-0.3906,-0.7344,0],[-0.375,-0.7344,0],[-0.3594,-0.7344,0],[-0.3438,-0.7344,0],[-0.3281,-0.7344,0],[-0.3125,-0.7344,0],[-0.2969,-0.7344,0],[-0.2812,-0.7344,0],[-0.2656,-0.7344,0],[-0.25,-0.7344,0],[-0.2344,-0.7344,0],[-0.2188,-0.7344,0],[-0.2031,-0.7344,0],[-0.1875,-0.7344,0],[-0.1719,-0.7344,0],[-0.1562,-0.7344,0],[-0.1406,-0.7344,0],[-0.125,-0.7344,0],[-0.1094,-0.7344,0],[-0.0938,-0.7344,0],[-0.0781,-0.7344,0],[-0.0625,-0.7344,0],[-0.0469,-0.7344,0],[-0.0312,-0.7344,0],[-0.0156,-0.7344,0],[0,-0.7344,0],[0.0156,-0.7344,0],[0.0312,-0.7344,0],[0.0469,-0.7344,0],[0.0625,-0.7344,0],[0.0781,-0.7344,0],[0.0938,-0.7344,0],[0.1094,-0.7344,0],[0.125,-0.7344,0],[0.1406,-0.7344,0],[0.1562,-0.7344,0],[0.1719,-0.7344,0],[0.1875,-0.7344,0],[0.2031,-0.7344,0],[0.2188,-0.7344,0],[0.2344,-0.7344,0],[0.25,-0.7344,0],[0.2656,-0.7344,0],[0.2812,-0.7344,0],[0.2969,-0.7344,0],[0.3125,-0.7344,0],[0.3281,-0.7344,0],[0.3438,-0.7344,0],[0.3594,-0.7344,0],[0.375,-0.7344,0],[0.3906,-0.7344,0],[0.4062,-0.7344,0],[0.4219,-0.7344,0],[0.4375,-0.7344,0],[0.4531,-0.7344,0],[0.4688,-0.7344,0],[0.4844,-0.7344,0],[0.5,-0.7344,0],[0.5156,-0.7344,0],[0.5312,-0.7344,0],[0.5469,-0.7344,0],[0.5625,-0.7344,0],[0.5781,-0.7344,0],[0.5938,-0.7344,0],[0.6094,-0.7344,0],[0.625,-0.7344,0],[0.6406,-0.7344,0],[0.6562,-0.7344,0],[0.6719,-0.7344,0],[0.6875,-0.7344,0],[0.7031,-0.7344,0],[0.7188,-0.7344,0],[0.7344,-0.7344,0],[0.75,-0.7344,0],[0.7656,-0.7344,0],[0.7812,-0.7344,0],[0.7969,-0.7344,0],[0.8125,-0.7344,0],[0.8281,-0.7344,0],[0.8438,-0.7344,0],[0.8594,-0.7344,0],[0.875,-0.7344,0],[0.8906,-0.7344,0],[0.9062,-0.7344,0],[0.9219,-0.7344,0],[0.9375,-0.7344,0],[0.9531,-0.7344,0],[0.9688,-0.7344,0],[0.9844,-0.7344,0],[-1,-0.7188,0],[-0.9844,-0.7188,0],[-0.9688,-0.7188,0],[-0.9531,-0.7188,0],[-0.9375,-0.7188,0],[-0.9219,-0.7188,0],[-0.9062,-0.7188,0],[-0.8906,-0.7188,0],[-0.875,-0.7188,0],[-0.8594,-0.7188,0],[-0.8438,-0.7188,0],[-0.8281,-0.7188,0],[-0.8125,-0.7188,0],[-0.7969,-0.7188,0],[-0.7812,-0.7188,0],[-0.7656,-0.7188,0],[-0.75,-0.7188,0],[-0.7344,-0.7188,0],[-0.7188,-0.7188,0],[-0.7031,-0.7188,0],[-0.6875,-0.7188,0],[-0.6719,-0.7188,0],[-0.6562,-0.7188,0],[-0.6406,-0.7188,0],[-0.625,-0.7188,0],[-0.6094,-0.7188,0.0103],[-0.5938,-0.7188,0.0147],[-0.5781,-0.7188,0.0142],[-0.5625,-0.7188,0.0142],[-0.5469,-0.7188,0.0093],[-0.5312,-0.7188,0.001],[-0.5156,-0.7188,0.0015],[-0.5,-0.7188,0.0015],[-0.4844,-0.7188,0.0054],[-0.4688,-0.7188,0.0113],[-0.4531,-0.7188,0.0167],[-0.4375,-0.7188,0.0132],[-0.4219,-0.7188,0.0123],[-0.4062,-0.7188,0.0039],[-0.3906,-0.7188,0],[-0.375,-0.7188,0],[-0.3594,-0.7188,0],[-0.3438,-0.7188,0],[-0.3281,-0.7188,0],[-0.3125,-0.7188,0],[-0.2969,-0.7188,0],[-0.2812,-0.7188,0],[-0.2656,-0.7188,0],[-0.25,-0.7188,0],[-0.2344,-0.7188,0],[-0.2188,-0.7188,0],[-0.2031,-0.7188,0],[-0.1875,-0.7188,0],[-0.1719,-0.7188,0],[-0.1562,-0.7188,0],[-0.1406,-0.7188,0],[-0.125,-0.7188,0],[-0.1094,-0.7188,0],[-0.0938,-0.7188,0],[-0.0781,-0.7188,0],[-0.0625,-0.7188,0],[-0.0469,-0.7188,0],[-0.0312,-0.7188,0],[-0.0156,-0.7188,0],[0,-0.7188,0],[0.0156,-0.7188,0],[0.0312,-0.7188,0],[0.0469,-0.7188,0],[0.0625,-0.7188,0],[0.0781,-0.7188,0],[0.0938,-0.7188,0],[0.1094,-0.7188,0],[0.125,-0.7188,0],[0.1406,-0.7188,0],[0.1562,-0.7188,0],[0.1719,-0.7188,0],[0.1875,-0.7188,0],[0.2031,-0.7188,0],[0.2188,-0.7188,0],[0.2344,-0.7188,0],[0.25,-0.7188,0],[0.2656,-0.7188,0],[0.2812,-0.7188,0],[0.2969,-0.7188,0],[0.3125,-0.7188,0],[0.3281,-0.7188,0],[0.3438,-0.7188,0],[0.3594,-0.7188,0],[0.375,-0.7188,0],[0.3906,-0.7188,0],[0.4062,-0.7188,0],[0.4219,-0.7188,0],[0.4375,-0.7188,0],[0.4531,-0.7188,0],[0.4688,-0.7188,0],[0.4844,-0.7188,0],[0.5,-0.7188,0],[0.5156,-0.7188,0],[0.5312,-0.7188,0],[0.5469,-0.7188,0],[0.5625,-0.7188,0],[0.5781,-0.7188,0],[0.5938,-0.7188,0],[0.6094,-0.7188,0],[0.625,-0.7188,0],[0.6406,-0.7188,0],[0.6562,-0.7188,0],[0.6719,-0.7188,0],[0.6875,-0.7188,0],[0.7031,-0.7188,0],[0.7188,-0.7188,0],[0.7344,-0.7188,0],[0.75,-0.7188,0],[0.7656,-0.7188,0],[0.7812,-0.7188,0],[0.7969,-0.7188,0],[0.8125,-0.7188,0],[0.8281,-0.7188,0],[0.8438,-0.7188,0],[0.8594,-0.7188,0],[0.875,-0.7188,0],[0.8906,-0.7188,0],[0.9062,-0.7188,0],[0.9219,-0.7188,0],[0.9375,-0.7188,0],[0.9531,-0.7188,0],[0.9688,-0.7188,0],[0.9844,-0.7188,0],[-1,-0.7031,0],[-0.9844,-0.7031,0],[-0.9688,-0.7031,0],[-0.9531,-0.7031,0],[-0.9375,-0.7031,0],[-0.9219,-0.7031,0],[-0.9062,-0.7031,0],[-0.8906,-0.7031,0],[-0.875,-0.7031,0],[-0.8594,-0.7031,0],[-0.8438,-0.7031,0],[-0.8281,-0.7031,0],[-0.8125,-0.7031,0],[-0.7969,-0.7031,0],[-0.7812,-0.7031,0],[-0.7656,-0.7031,0],[-0.75,-0.7031,0],[-0.7344,-0.7031,0],[-0.7188,-0.7031,0],[-0.7031,-0.7031,0],[-0.6875,-0.7031,0],[-0.6719,-0.7031,0],[-0.6562,-0.7031,0],[-0.6406,-0.7031,0],[-0.625,-0.7031,0],[-0.6094,-0.7031,0.0093],[-0.5938,-0.7031,0.0152],[-0.5781,-0.7031,0.0162],[-0.5625,-0.7031,0.0123],[-0.5469,-0.7031,0.0005],[-0.5312,-0.7031,0.0069],[-0.5156,-0.7031,0.0103],[-0.5,-0.7031,0.0127],[-0.4844,-0.7031,0.0098],[-0.4688,-0.7031,0.0093],[-0.4531,-0.7031,0.0167],[-0.4375,-0.7031,0.0152],[-0.4219,-0.7031,0.0123],[-0.4062,-0.7031,0.0103],[-0.3906,-0.7031,0.002],[-0.375,-0.7031,0],[-0.3594,-0.7031,0],[-0.3438,-0.7031,0],[-0.3281,-0.7031,0],[-0.3125,-0.7031,0],[-0.2969,-0.7031,0],[-0.2812,-0.7031,0],[-0.2656,-0.7031,0],[-0.25,-0.7031,0],[-0.2344,-0.7031,0],[-0.2188,-0.7031,0],[-0.2031,-0.7031,0],[-0.1875,-0.7031,0],[-0.1719,-0.7031,0],[-0.1562,-0.7031,0],[-0.1406,-0.7031,0],[-0.125,-0.7031,0],[-0.1094,-0.7031,0],[-0.0938,-0.7031,0],[-0.0781,-0.7031,0],[-0.0625,-0.7031,0],[-0.0469,-0.7031,0],[-0.0312,-0.7031,0],[-0.0156,-0.7031,0],[0,-0.7031,0],[0.0156,-0.7031,0],[0.0312,-0.7031,0],[0.0469,-0.7031,0],[0.0625,-0.7031,0],[0.0781,-0.7031,0],[0.0938,-0.7031,0],[0.1094,-0.7031,0],[0.125,-0.7031,0],[0.1406,-0.7031,0],[0.1562,-0.7031,0],[0.1719,-0.7031,0],[0.1875,-0.7031,0],[0.2031,-0.7031,0],[0.2188,-0.7031,0],[0.2344,-0.7031,0],[0.25,-0.7031,0],[0.2656,-0.7031,0],[0.2812,-0.7031,0],[0.2969,-0.7031,0],[0.3125,-0.7031,0],[0.3281,-0.7031,0],[0.3438,-0.7031,0],[0.3594,-0.7031,0],[0.375,-0.7031,0],[0.3906,-0.7031,0],[0.4062,-0.7031,0],[0.4219,-0.7031,0],[0.4375,-0.7031,0],[0.4531,-0.7031,0],[0.4688,-0.7031,0],[0.4844,-0.7031,0],[0.5,-0.7031,0],[0.5156,-0.7031,0],[0.5312,-0.7031,0],[0.5469,-0.7031,0],[0.5625,-0.7031,0],[0.5781,-0.7031,0],[0.5938,-0.7031,0],[0.6094,-0.7031,0],[0.625,-0.7031,0],[0.6406,-0.7031,0],[0.6562,-0.7031,0],[0.6719,-0.7031,0],[0.6875,-0.7031,0],[0.7031,-0.7031,0],[0.7188,-0.7031,0],[0.7344,-0.7031,0],[0.75,-0.7031,0],[0.7656,-0.7031,0],[0.7812,-0.7031,0],[0.7969,-0.7031,0],[0.8125,-0.7031,0],[0.8281,-0.7031,0],[0.8438,-0.7031,0],[0.8594,-0.7031,0],[0.875,-0.7031,0],[0.8906,-0.7031,0],[0.9062,-0.7031,0],[0.9219,-0.7031,0],[0.9375,-0.7031,0],[0.9531,-0.7031,0],[0.9688,-0.7031,0],[0.9844,-0.7031,0],[-1,-0.6875,0],[-0.9844,-0.6875,0],[-0.9688,-0.6875,0],[-0.9531,-0.6875,0],[-0.9375,-0.6875,0],[-0.9219,-0.6875,0],[-0.9062,-0.6875,0],[-0.8906,-0.6875,0],[-0.875,-0.6875,0],[-0.8594,-0.6875,0],[-0.8438,-0.6875,0],[-0.8281,-0.6875,0],[-0.8125,-0.6875,0],[-0.7969,-0.6875,0],[-0.7812,-0.6875,0],[-0.7656,-0.6875,0],[-0.75,-0.6875,0],[-0.7344,-0.6875,0],[-0.7188,-0.6875,0],[-0.7031,-0.6875,0],[-0.6875,-0.6875,0.0093],[-0.6719,-0.6875,0.0167],[-0.6562,-0.6875,0.0108],[-0.6406,-0.6875,0.0029],[-0.625,-0.6875,0],[-0.6094,-0.6875,0.0103],[-0.5938,-0.6875,0.0201],[-0.5781,-0.6875,0.0196],[-0.5625,-0.6875,0.0113],[-0.5469,-0.6875,0.0074],[-0.5312,-0.6875,0.0147],[-0.5156,-0.6875,0.0167],[-0.5,-0.6875,0.0157],[-0.4844,-0.6875,0.0142],[-0.4688,-0.6875,0.0142],[-0.4531,-0.6875,0.0142],[-0.4375,-0.6875,0.0162],[-0.4219,-0.6875,0.0147],[-0.4062,-0.6875,0.0088],[-0.3906,-0.6875,0],[-0.375,-0.6875,0],[-0.3594,-0.6875,0],[-0.3438,-0.6875,0],[-0.3281,-0.6875,0],[-0.3125,-0.6875,0],[-0.2969,-0.6875,0],[-0.2812,-0.6875,0],[-0.2656,-0.6875,0],[-0.25,-0.6875,0],[-0.2344,-0.6875,0],[-0.2188,-0.6875,0],[-0.2031,-0.6875,0],[-0.1875,-0.6875,0],[-0.1719,-0.6875,0],[-0.1562,-0.6875,0],[-0.1406,-0.6875,0],[-0.125,-0.6875,0],[-0.1094,-0.6875,0],[-0.0938,-0.6875,0],[-0.0781,-0.6875,0],[-0.0625,-0.6875,0],[-0.0469,-0.6875,0],[-0.0312,-0.6875,0],[-0.0156,-0.6875,0],[0,-0.6875,0],[0.0156,-0.6875,0],[0.0312,-0.6875,0],[0.0469,-0.6875,0],[0.0625,-0.6875,0],[0.0781,-0.6875,0],[0.0938,-0.6875,0],[0.1094,-0.6875,0],[0.125,-0.6875,0],[0.1406,-0.6875,0],[0.1562,-0.6875,0],[0.1719,-0.6875,0],[0.1875,-0.6875,0],[0.2031,-0.6875,0],[0.2188,-0.6875,0],[0.2344,-0.6875,0],[0.25,-0.6875,0],[0.2656,-0.6875,0],[0.2812,-0.6875,0],[0.2969,-0.6875,0],[0.3125,-0.6875,0],[0.3281,-0.6875,0],[0.3438,-0.6875,0],[0.3594,-0.6875,0],[0.375,-0.6875,0],[0.3906,-0.6875,0],[0.4062,-0.6875,0],[0.4219,-0.6875,0],[0.4375,-0.6875,0],[0.4531,-0.6875,0],[0.4688,-0.6875,0],[0.4844,-0.6875,0],[0.5,-0.6875,0],[0.5156,-0.6875,0],[0.5312,-0.6875,0],[0.5469,-0.6875,0],[0.5625,-0.6875,0],[0.5781,-0.6875,0],[0.5938,-0.6875,0],[0.6094,-0.6875,0],[0.625,-0.6875,0],[0.6406,-0.6875,0],[0.6562,-0.6875,0],[0.6719,-0.6875,0],[0.6875,-0.6875,0],[0.7031,-0.6875,0],[0.7188,-0.6875,0],[0.7344,-0.6875,0],[0.75,-0.6875,0],[0.7656,-0.6875,0],[0.7812,-0.6875,0],[0.7969,-0.6875,0],[0.8125,-0.6875,0],[0.8281,-0.6875,0],[0.8438,-0.6875,0],[0.8594,-0.6875,0],[0.875,-0.6875,0],[0.8906,-0.6875,0],[0.9062,-0.6875,0],[0.9219,-0.6875,0],[0.9375,-0.6875,0],[0.9531,-0.6875,0],[0.9688,-0.6875,0],[0.9844,-0.6875,0],[-1,-0.6719,0],[-0.9844,-0.6719,0],[-0.9688,-0.6719,0],[-0.9531,-0.6719,0],[-0.9375,-0.6719,0],[-0.9219,-0.6719,0],[-0.9062,-0.6719,0],[-0.8906,-0.6719,0],[-0.875,-0.6719,0],[-0.8594,-0.6719,0],[-0.8438,-0.6719,0],[-0.8281,-0.6719,0],[-0.8125,-0.6719,0],[-0.7969,-0.6719,0],[-0.7812,-0.6719,0],[-0.7656,-0.6719,0],[-0.75,-0.6719,0],[-0.7344,-0.6719,0],[-0.7188,-0.6719,0],[-0.7031,-0.6719,0.0039],[-0.6875,-0.6719,0.0157],[-0.6719,-0.6719,0.0201],[-0.6562,-0.6719,0.0245],[-0.6406,-0.6719,0.0167],[-0.625,-0.6719,0],[-0.6094,-0.6719,0.0123],[-0.5938,-0.6719,0.0245],[-0.5781,-0.6719,0.0275],[-0.5625,-0.6719,0.0176],[-0.5469,-0.6719,0.0152],[-0.5312,-0.6719,0.0181],[-0.5156,-0.6719,0.0186],[-0.5,-0.6719,0.0186],[-0.4844,-0.6719,0.0152],[-0.4688,-0.6719,0.0157],[-0.4531,-0.6719,0.0127],[-0.4375,-0.6719,0.0127],[-0.4219,-0.6719,0.0162],[-0.4062,-0.6719,0.0088],[-0.3906,-0.6719,0],[-0.375,-0.6719,0],[-0.3594,-0.6719,0],[-0.3438,-0.6719,0],[-0.3281,-0.6719,0],[-0.3125,-0.6719,0],[-0.2969,-0.6719,0],[-0.2812,-0.6719,0],[-0.2656,-0.6719,0],[-0.25,-0.6719,0],[-0.2344,-0.6719,0],[-0.2188,-0.6719,0],[-0.2031,-0.6719,0],[-0.1875,-0.6719,0],[-0.1719,-0.6719,0],[-0.1562,-0.6719,0],[-0.1406,-0.6719,0],[-0.125,-0.6719,0],[-0.1094,-0.6719,0],[-0.0938,-0.6719,0],[-0.0781,-0.6719,0],[-0.0625,-0.6719,0],[-0.0469,-0.6719,0],[-0.0312,-0.6719,0],[-0.0156,-0.6719,0],[0,-0.6719,0],[0.0156,-0.6719,0],[0.0312,-0.6719,0],[0.0469,-0.6719,0],[0.0625,-0.6719,0],[0.0781,-0.6719,0],[0.0938,-0.6719,0],[0.1094,-0.6719,0],[0.125,-0.6719,0],[0.1406,-0.6719,0],[0.1562,-0.6719,0],[0.1719,-0.6719,0],[0.1875,-0.6719,0],[0.2031,-0.6719,0],[0.2188,-0.6719,0],[0.2344,-0.6719,0],[0.25,-0.6719,0],[0.2656,-0.6719,0],[0.2812,-0.6719,0],[0.2969,-0.6719,0],[0.3125,-0.6719,0],[0.3281,-0.6719,0],[0.3438,-0.6719,0],[0.3594,-0.6719,0],[0.375,-0.6719,0],[0.3906,-0.6719,0],[0.4062,-0.6719,0],[0.4219,-0.6719,0],[0.4375,-0.6719,0],[0.4531,-0.6719,0],[0.4688,-0.6719,0],[0.4844,-0.6719,0],[0.5,-0.6719,0],[0.5156,-0.6719,0],[0.5312,-0.6719,0],[0.5469,-0.6719,0],[0.5625,-0.6719,0],[0.5781,-0.6719,0],[0.5938,-0.6719,0],[0.6094,-0.6719,0],[0.625,-0.6719,0],[0.6406,-0.6719,0],[0.6562,-0.6719,0],[0.6719,-0.6719,0],[0.6875,-0.6719,0],[0.7031,-0.6719,0],[0.7188,-0.6719,0],[0.7344,-0.6719,0],[0.75,-0.6719,0],[0.7656,-0.6719,0],[0.7812,-0.6719,0],[0.7969,-0.6719,0],[0.8125,-0.6719,0],[0.8281,-0.6719,0],[0.8438,-0.6719,0],[0.8594,-0.6719,0],[0.875,-0.6719,0],[0.8906,-0.6719,0],[0.9062,-0.6719,0],[0.9219,-0.6719,0],[0.9375,-0.6719,0],[0.9531,-0.6719,0],[0.9688,-0.6719,0],[0.9844,-0.6719,0],[-1,-0.6562,0],[-0.9844,-0.6562,0],[-0.9688,-0.6562,0],[-0.9531,-0.6562,0],[-0.9375,-0.6562,0],[-0.9219,-0.6562,0],[-0.9062,-0.6562,0],[-0.8906,-0.6562,0],[-0.875,-0.6562,0],[-0.8594,-0.6562,0],[-0.8438,-0.6562,0],[-0.8281,-0.6562,0],[-0.8125,-0.6562,0],[-0.7969,-0.6562,0],[-0.7812,-0.6562,0],[-0.7656,-0.6562,0],[-0.75,-0.6562,0],[-0.7344,-0.6562,0],[-0.7188,-0.6562,0],[-0.7031,-0.6562,0.0093],[-0.6875,-0.6562,0.0147],[-0.6719,-0.6562,0.0299],[-0.6562,-0.6562,0.0387],[-0.6406,-0.6562,0.0245],[-0.625,-0.6562,0.0034],[-0.6094,-0.6562,0.0044],[-0.5938,-0.6562,0.027],[-0.5781,-0.6562,0.0279],[-0.5625,-0.6562,0.0201],[-0.5469,-0.6562,0.0206],[-0.5312,-0.6562,0.0216],[-0.5156,-0.6562,0.0206],[-0.5,-0.6562,0.0201],[-0.4844,-0.6562,0.0186],[-0.4688,-0.6562,0.0167],[-0.4531,-0.6562,0.0147],[-0.4375,-0.6562,0.0137],[-0.4219,-0.6562,0.0127],[-0.4062,-0.6562,0.0098],[-0.3906,-0.6562,0],[-0.375,-0.6562,0],[-0.3594,-0.6562,0],[-0.3438,-0.6562,0],[-0.3281,-0.6562,0],[-0.3125,-0.6562,0],[-0.2969,-0.6562,0],[-0.2812,-0.6562,0],[-0.2656,-0.6562,0],[-0.25,-0.6562,0],[-0.2344,-0.6562,0],[-0.2188,-0.6562,0],[-0.2031,-0.6562,0],[-0.1875,-0.6562,0],[-0.1719,-0.6562,0],[-0.1562,-0.6562,0],[-0.1406,-0.6562,0],[-0.125,-0.6562,0],[-0.1094,-0.6562,0],[-0.0938,-0.6562,0],[-0.0781,-0.6562,0],[-0.0625,-0.6562,0],[-0.0469,-0.6562,0],[-0.0312,-0.6562,0],[-0.0156,-0.6562,0],[0,-0.6562,0],[0.0156,-0.6562,0],[0.0312,-0.6562,0],[0.0469,-0.6562,0],[0.0625,-0.6562,0],[0.0781,-0.6562,0],[0.0938,-0.6562,0],[0.1094,-0.6562,0],[0.125,-0.6562,0],[0.1406,-0.6562,0],[0.1562,-0.6562,0],[0.1719,-0.6562,0],[0.1875,-0.6562,0],[0.2031,-0.6562,0],[0.2188,-0.6562,0],[0.2344,-0.6562,0],[0.25,-0.6562,0],[0.2656,-0.6562,0],[0.2812,-0.6562,0],[0.2969,-0.6562,0],[0.3125,-0.6562,0],[0.3281,-0.6562,0],[0.3438,-0.6562,0],[0.3594,-0.6562,0],[0.375,-0.6562,0],[0.3906,-0.6562,0],[0.4062,-0.6562,0],[0.4219,-0.6562,0],[0.4375,-0.6562,0],[0.4531,-0.6562,0],[0.4688,-0.6562,0],[0.4844,-0.6562,0],[0.5,-0.6562,0],[0.5156,-0.6562,0],[0.5312,-0.6562,0],[0.5469,-0.6562,0],[0.5625,-0.6562,0],[0.5781,-0.6562,0],[0.5938,-0.6562,0],[0.6094,-0.6562,0],[0.625,-0.6562,0],[0.6406,-0.6562,0],[0.6562,-0.6562,0],[0.6719,-0.6562,0],[0.6875,-0.6562,0],[0.7031,-0.6562,0],[0.7188,-0.6562,0],[0.7344,-0.6562,0],[0.75,-0.6562,0],[0.7656,-0.6562,0],[0.7812,-0.6562,0],[0.7969,-0.6562,0],[0.8125,-0.6562,0],[0.8281,-0.6562,0],[0.8438,-0.6562,0],[0.8594,-0.6562,0],[0.875,-0.6562,0],[0.8906,-0.6562,0],[0.9062,-0.6562,0],[0.9219,-0.6562,0],[0.9375,-0.6562,0],[0.9531,-0.6562,0],[0.9688,-0.6562,0],[0.9844,-0.6562,0],[-1,-0.6406,0],[-0.9844,-0.6406,0],[-0.9688,-0.6406,0],[-0.9531,-0.6406,0],[-0.9375,-0.6406,0],[-0.9219,-0.6406,0],[-0.9062,-0.6406,0],[-0.8906,-0.6406,0],[-0.875,-0.6406,0],[-0.8594,-0.6406,0],[-0.8438,-0.6406,0],[-0.8281,-0.6406,0],[-0.8125,-0.6406,0],[-0.7969,-0.6406,0],[-0.7812,-0.6406,0],[-0.7656,-0.6406,0],[-0.75,-0.6406,0],[-0.7344,-0.6406,0],[-0.7188,-0.6406,0.0118],[-0.7031,-0.6406,0.0255],[-0.6875,-0.6406,0.026],[-0.6719,-0.6406,0.0343],[-0.6562,-0.6406,0.0466],[-0.6406,-0.6406,0.0368],[-0.625,-0.6406,0.0186],[-0.6094,-0.6406,0.001],[-0.5938,-0.6406,0.0088],[-0.5781,-0.6406,0.0172],[-0.5625,-0.6406,0.0245],[-0.5469,-0.6406,0.0289],[-0.5312,-0.6406,0.0275],[-0.5156,-0.6406,0.027],[-0.5,-0.6406,0.0255],[-0.4844,-0.6406,0.0225],[-0.4688,-0.6406,0.0206],[-0.4531,-0.6406,0.024],[-0.4375,-0.6406,0.0211],[-0.4219,-0.6406,0.0162],[-0.4062,-0.6406,0.0132],[-0.3906,-0.6406,0.0034],[-0.375,-0.6406,0.0044],[-0.3594,-0.6406,0.0029],[-0.3438,-0.6406,0],[-0.3281,-0.6406,0],[-0.3125,-0.6406,0],[-0.2969,-0.6406,0],[-0.2812,-0.6406,0],[-0.2656,-0.6406,0],[-0.25,-0.6406,0],[-0.2344,-0.6406,0],[-0.2188,-0.6406,0],[-0.2031,-0.6406,0],[-0.1875,-0.6406,0],[-0.1719,-0.6406,0],[-0.1562,-0.6406,0],[-0.1406,-0.6406,0],[-0.125,-0.6406,0],[-0.1094,-0.6406,0],[-0.0938,-0.6406,0],[-0.0781,-0.6406,0],[-0.0625,-0.6406,0],[-0.0469,-0.6406,0],[-0.0312,-0.6406,0],[-0.0156,-0.6406,0],[0,-0.6406,0],[0.0156,-0.6406,0],[0.0312,-0.6406,0],[0.0469,-0.6406,0],[0.0625,-0.6406,0],[0.0781,-0.6406,0],[0.0938,-0.6406,0],[0.1094,-0.6406,0],[0.125,-0.6406,0],[0.1406,-0.6406,0],[0.1562,-0.6406,0],[0.1719,-0.6406,0],[0.1875,-0.6406,0],[0.2031,-0.6406,0],[0.2188,-0.6406,0],[0.2344,-0.6406,0],[0.25,-0.6406,0],[0.2656,-0.6406,0],[0.2812,-0.6406,0],[0.2969,-0.6406,0],[0.3125,-0.6406,0],[0.3281,-0.6406,0],[0.3438,-0.6406,0],[0.3594,-0.6406,0],[0.375,-0.6406,0],[0.3906,-0.6406,0],[0.4062,-0.6406,0],[0.4219,-0.6406,0],[0.4375,-0.6406,0],[0.4531,-0.6406,0],[0.4688,-0.6406,0],[0.4844,-0.6406,0],[0.5,-0.6406,0],[0.5156,-0.6406,0],[0.5312,-0.6406,0],[0.5469,-0.6406,0],[0.5625,-0.6406,0],[0.5781,-0.6406,0],[0.5938,-0.6406,0],[0.6094,-0.6406,0],[0.625,-0.6406,0],[0.6406,-0.6406,0],[0.6562,-0.6406,0],[0.6719,-0.6406,0],[0.6875,-0.6406,0],[0.7031,-0.6406,0],[0.7188,-0.6406,0],[0.7344,-0.6406,0],[0.75,-0.6406,0],[0.7656,-0.6406,0],[0.7812,-0.6406,0],[0.7969,-0.6406,0],[0.8125,-0.6406,0],[0.8281,-0.6406,0],[0.8438,-0.6406,0],[0.8594,-0.6406,0],[0.875,-0.6406,0],[0.8906,-0.6406,0],[0.9062,-0.6406,0],[0.9219,-0.6406,0],[0.9375,-0.6406,0],[0.9531,-0.6406,0],[0.9688,-0.6406,0],[0.9844,-0.6406,0],[-1,-0.625,0],[-0.9844,-0.625,0],[-0.9688,-0.625,0],[-0.9531,-0.625,0],[-0.9375,-0.625,0],[-0.9219,-0.625,0],[-0.9062,-0.625,0],[-0.8906,-0.625,0],[-0.875,-0.625,0],[-0.8594,-0.625,0],[-0.8438,-0.625,0],[-0.8281,-0.625,0],[-0.8125,-0.625,0],[-0.7969,-0.625,0],[-0.7812,-0.625,0],[-0.7656,-0.625,0],[-0.75,-0.625,0.0167],[-0.7344,-0.625,0.0412],[-0.7188,-0.625,0.0466],[-0.7031,-0.625,0.0515],[-0.6875,-0.625,0.0461],[-0.6719,-0.625,0.0343],[-0.6562,-0.625,0.0373],[-0.6406,-0.625,0.0461],[-0.625,-0.625,0.0338],[-0.6094,-0.625,0.0167],[-0.5938,-0.625,0.0108],[-0.5781,-0.625,0.0113],[-0.5625,-0.625,0.0152],[-0.5469,-0.625,0.0245],[-0.5312,-0.625,0.0294],[-0.5156,-0.625,0.0279],[-0.5,-0.625,0.0235],[-0.4844,-0.625,0.024],[-0.4688,-0.625,0.0279],[-0.4531,-0.625,0.0324],[-0.4375,-0.625,0.0299],[-0.4219,-0.625,0.023],[-0.4062,-0.625,0.0186],[-0.3906,-0.625,0.0221],[-0.375,-0.625,0.074],[-0.3594,-0.625,0.0593],[-0.3438,-0.625,0.0176],[-0.3281,-0.625,0.0059],[-0.3125,-0.625,0],[-0.2969,-0.625,0],[-0.2812,-0.625,0],[-0.2656,-0.625,0],[-0.25,-0.625,0],[-0.2344,-0.625,0],[-0.2188,-0.625,0],[-0.2031,-0.625,0],[-0.1875,-0.625,0],[-0.1719,-0.625,0],[-0.1562,-0.625,0],[-0.1406,-0.625,0],[-0.125,-0.625,0],[-0.1094,-0.625,0],[-0.0938,-0.625,0],[-0.0781,-0.625,0],[-0.0625,-0.625,0],[-0.0469,-0.625,0],[-0.0312,-0.625,0],[-0.0156,-0.625,0],[0,-0.625,0],[0.0156,-0.625,0],[0.0312,-0.625,0],[0.0469,-0.625,0],[0.0625,-0.625,0],[0.0781,-0.625,0],[0.0938,-0.625,0],[0.1094,-0.625,0],[0.125,-0.625,0],[0.1406,-0.625,0],[0.1562,-0.625,0],[0.1719,-0.625,0],[0.1875,-0.625,0],[0.2031,-0.625,0],[0.2188,-0.625,0],[0.2344,-0.625,0],[0.25,-0.625,0],[0.2656,-0.625,0],[0.2812,-0.625,0],[0.2969,-0.625,0],[0.3125,-0.625,0],[0.3281,-0.625,0],[0.3438,-0.625,0],[0.3594,-0.625,0],[0.375,-0.625,0],[0.3906,-0.625,0],[0.4062,-0.625,0],[0.4219,-0.625,0],[0.4375,-0.625,0],[0.4531,-0.625,0],[0.4688,-0.625,0],[0.4844,-0.625,0],[0.5,-0.625,0],[0.5156,-0.625,0],[0.5312,-0.625,0],[0.5469,-0.625,0],[0.5625,-0.625,0],[0.5781,-0.625,0],[0.5938,-0.625,0],[0.6094,-0.625,0],[0.625,-0.625,0],[0.6406,-0.625,0],[0.6562,-0.625,0],[0.6719,-0.625,0],[0.6875,-0.625,0],[0.7031,-0.625,0],[0.7188,-0.625,0],[0.7344,-0.625,0],[0.75,-0.625,0],[0.7656,-0.625,0],[0.7812,-0.625,0],[0.7969,-0.625,0],[0.8125,-0.625,0],[0.8281,-0.625,0],[0.8438,-0.625,0],[0.8594,-0.625,0],[0.875,-0.625,0],[0.8906,-0.625,0],[0.9062,-0.625,0],[0.9219,-0.625,0],[0.9375,-0.625,0],[0.9531,-0.625,0],[0.9688,-0.625,0],[0.9844,-0.625,0],[-1,-0.6094,0],[-0.9844,-0.6094,0],[-0.9688,-0.6094,0],[-0.9531,-0.6094,0],[-0.9375,-0.6094,0],[-0.9219,-0.6094,0],[-0.9062,-0.6094,0],[-0.8906,-0.6094,0],[-0.875,-0.6094,0],[-0.8594,-0.6094,0],[-0.8438,-0.6094,0],[-0.8281,-0.6094,0],[-0.8125,-0.6094,0],[-0.7969,-0.6094,0.0142],[-0.7812,-0.6094,0.0162],[-0.7656,-0.6094,0.0025],[-0.75,-0.6094,0.027],[-0.7344,-0.6094,0.0382],[-0.7188,-0.6094,0.0471],[-0.7031,-0.6094,0.0569],[-0.6875,-0.6094,0.0574],[-0.6719,-0.6094,0.0466],[-0.6562,-0.6094,0.0275],[-0.6406,-0.6094,0.0319],[-0.625,-0.6094,0.0294],[-0.6094,-0.6094,0.0338],[-0.5938,-0.6094,0.0422],[-0.5781,-0.6094,0.0181],[-0.5625,-0.6094,0.0137],[-0.5469,-0.6094,0.0152],[-0.5312,-0.6094,0.027],[-0.5156,-0.6094,0.025],[-0.5,-0.6094,0.023],[-0.4844,-0.6094,0.0284],[-0.4688,-0.6094,0.0363],[-0.4531,-0.6094,0.0554],[-0.4375,-0.6094,0.0466],[-0.4219,-0.6094,0.0328],[-0.4062,-0.6094,0.0294],[-0.3906,-0.6094,0.0402],[-0.375,-0.6094,0.0809],[-0.3594,-0.6094,0.0711],[-0.3438,-0.6094,0.0382],[-0.3281,-0.6094,0.0181],[-0.3125,-0.6094,0.0039],[-0.2969,-0.6094,0],[-0.2812,-0.6094,0],[-0.2656,-0.6094,0],[-0.25,-0.6094,0],[-0.2344,-0.6094,0],[-0.2188,-0.6094,0],[-0.2031,-0.6094,0],[-0.1875,-0.6094,0],[-0.1719,-0.6094,0],[-0.1562,-0.6094,0],[-0.1406,-0.6094,0],[-0.125,-0.6094,0],[-0.1094,-0.6094,0],[-0.0938,-0.6094,0],[-0.0781,-0.6094,0],[-0.0625,-0.6094,0],[-0.0469,-0.6094,0],[-0.0312,-0.6094,0],[-0.0156,-0.6094,0],[0,-0.6094,0],[0.0156,-0.6094,0],[0.0312,-0.6094,0],[0.0469,-0.6094,0],[0.0625,-0.6094,0],[0.0781,-0.6094,0],[0.0938,-0.6094,0],[0.1094,-0.6094,0],[0.125,-0.6094,0],[0.1406,-0.6094,0],[0.1562,-0.6094,0],[0.1719,-0.6094,0],[0.1875,-0.6094,0],[0.2031,-0.6094,0],[0.2188,-0.6094,0],[0.2344,-0.6094,0],[0.25,-0.6094,0],[0.2656,-0.6094,0],[0.2812,-0.6094,0],[0.2969,-0.6094,0],[0.3125,-0.6094,0],[0.3281,-0.6094,0],[0.3438,-0.6094,0],[0.3594,-0.6094,0],[0.375,-0.6094,0],[0.3906,-0.6094,0],[0.4062,-0.6094,0],[0.4219,-0.6094,0],[0.4375,-0.6094,0],[0.4531,-0.6094,0],[0.4688,-0.6094,0],[0.4844,-0.6094,0],[0.5,-0.6094,0],[0.5156,-0.6094,0],[0.5312,-0.6094,0],[0.5469,-0.6094,0],[0.5625,-0.6094,0],[0.5781,-0.6094,0],[0.5938,-0.6094,0],[0.6094,-0.6094,0],[0.625,-0.6094,0],[0.6406,-0.6094,0],[0.6562,-0.6094,0],[0.6719,-0.6094,0],[0.6875,-0.6094,0],[0.7031,-0.6094,0],[0.7188,-0.6094,0],[0.7344,-0.6094,0],[0.75,-0.6094,0],[0.7656,-0.6094,0],[0.7812,-0.6094,0],[0.7969,-0.6094,0],[0.8125,-0.6094,0],[0.8281,-0.6094,0],[0.8438,-0.6094,0],[0.8594,-0.6094,0],[0.875,-0.6094,0],[0.8906,-0.6094,0],[0.9062,-0.6094,0],[0.9219,-0.6094,0],[0.9375,-0.6094,0],[0.9531,-0.6094,0],[0.9688,-0.6094,0],[0.9844,-0.6094,0],[-1,-0.5938,0],[-0.9844,-0.5938,0],[-0.9688,-0.5938,0],[-0.9531,-0.5938,0],[-0.9375,-0.5938,0],[-0.9219,-0.5938,0],[-0.9062,-0.5938,0],[-0.8906,-0.5938,0],[-0.875,-0.5938,0],[-0.8594,-0.5938,0],[-0.8438,-0.5938,0.0162],[-0.8281,-0.5938,0.0054],[-0.8125,-0.5938,0.0015],[-0.7969,-0.5938,0.0275],[-0.7812,-0.5938,0.0574],[-0.7656,-0.5938,0.0426],[-0.75,-0.5938,0.0377],[-0.7344,-0.5938,0.0422],[-0.7188,-0.5938,0.0441],[-0.7031,-0.5938,0.0598],[-0.6875,-0.5938,0.0495],[-0.6719,-0.5938,0.0422],[-0.6562,-0.5938,0.0284],[-0.6406,-0.5938,0.0225],[-0.625,-0.5938,0.0275],[-0.6094,-0.5938,0.0368],[-0.5938,-0.5938,0.0515],[-0.5781,-0.5938,0.0569],[-0.5625,-0.5938,0.0294],[-0.5469,-0.5938,0.0162],[-0.5312,-0.5938,0.0191],[-0.5156,-0.5938,0.0225],[-0.5,-0.5938,0.026],[-0.4844,-0.5938,0.0309],[-0.4688,-0.5938,0.0319],[-0.4531,-0.5938,0.0495],[-0.4375,-0.5938,0.0422],[-0.4219,-0.5938,0.0284],[-0.4062,-0.5938,0.0324],[-0.3906,-0.5938,0.0402],[-0.375,-0.5938,0.0779],[-0.3594,-0.5938,0.0642],[-0.3438,-0.5938,0.0377],[-0.3281,-0.5938,0.023],[-0.3125,-0.5938,0.0127],[-0.2969,-0.5938,0.0015],[-0.2812,-0.5938,0],[-0.2656,-0.5938,0],[-0.25,-0.5938,0],[-0.2344,-0.5938,0],[-0.2188,-0.5938,0],[-0.2031,-0.5938,0],[-0.1875,-0.5938,0],[-0.1719,-0.5938,0],[-0.1562,-0.5938,0],[-0.1406,-0.5938,0],[-0.125,-0.5938,0],[-0.1094,-0.5938,0],[-0.0938,-0.5938,0],[-0.0781,-0.5938,0],[-0.0625,-0.5938,0],[-0.0469,-0.5938,0.0054],[-0.0312,-0.5938,0.0025],[-0.0156,-0.5938,0],[0,-0.5938,0],[0.0156,-0.5938,0],[0.0312,-0.5938,0],[0.0469,-0.5938,0],[0.0625,-0.5938,0],[0.0781,-0.5938,0],[0.0938,-0.5938,0],[0.1094,-0.5938,0],[0.125,-0.5938,0],[0.1406,-0.5938,0.001],[0.1562,-0.5938,0.002],[0.1719,-0.5938,0.001],[0.1875,-0.5938,0],[0.2031,-0.5938,0.0039],[0.2188,-0.5938,0.0172],[0.2344,-0.5938,0.0054],[0.25,-0.5938,0.0005],[0.2656,-0.5938,0],[0.2812,-0.5938,0],[0.2969,-0.5938,0],[0.3125,-0.5938,0],[0.3281,-0.5938,0],[0.3438,-0.5938,0],[0.3594,-0.5938,0],[0.375,-0.5938,0],[0.3906,-0.5938,0],[0.4062,-0.5938,0],[0.4219,-0.5938,0],[0.4375,-0.5938,0],[0.4531,-0.5938,0],[0.4688,-0.5938,0],[0.4844,-0.5938,0],[0.5,-0.5938,0],[0.5156,-0.5938,0],[0.5312,-0.5938,0],[0.5469,-0.5938,0],[0.5625,-0.5938,0],[0.5781,-0.5938,0],[0.5938,-0.5938,0],[0.6094,-0.5938,0],[0.625,-0.5938,0],[0.6406,-0.5938,0],[0.6562,-0.5938,0],[0.6719,-0.5938,0],[0.6875,-0.5938,0],[0.7031,-0.5938,0],[0.7188,-0.5938,0],[0.7344,-0.5938,0],[0.75,-0.5938,0],[0.7656,-0.5938,0],[0.7812,-0.5938,0],[0.7969,-0.5938,0],[0.8125,-0.5938,0],[0.8281,-0.5938,0],[0.8438,-0.5938,0],[0.8594,-0.5938,0],[0.875,-0.5938,0],[0.8906,-0.5938,0],[0.9062,-0.5938,0],[0.9219,-0.5938,0],[0.9375,-0.5938,0],[0.9531,-0.5938,0],[0.9688,-0.5938,0],[0.9844,-0.5938,0],[-1,-0.5781,0],[-0.9844,-0.5781,0],[-0.9688,-0.5781,0],[-0.9531,-0.5781,0],[-0.9375,-0.5781,0],[-0.9219,-0.5781,0],[-0.9062,-0.5781,0],[-0.8906,-0.5781,0],[-0.875,-0.5781,0.0005],[-0.8594,-0.5781,0.0328],[-0.8438,-0.5781,0.0485],[-0.8281,-0.5781,0.0279],[-0.8125,-0.5781,0.0235],[-0.7969,-0.5781,0.0289],[-0.7812,-0.5781,0.051],[-0.7656,-0.5781,0.0618],[-0.75,-0.5781,0.0529],[-0.7344,-0.5781,0.0377],[-0.7188,-0.5781,0.0436],[-0.7031,-0.5781,0.0574],[-0.6875,-0.5781,0.0446],[-0.6719,-0.5781,0.0441],[-0.6562,-0.5781,0.0368],[-0.6406,-0.5781,0.023],[-0.625,-0.5781,0.0225],[-0.6094,-0.5781,0.0353],[-0.5938,-0.5781,0.0377],[-0.5781,-0.5781,0.048],[-0.5625,-0.5781,0.0471],[-0.5469,-0.5781,0.0314],[-0.5312,-0.5781,0.0172],[-0.5156,-0.5781,0.0206],[-0.5,-0.5781,0.0309],[-0.4844,-0.5781,0.0279],[-0.4688,-0.5781,0.0299],[-0.4531,-0.5781,0.0368],[-0.4375,-0.5781,0.0407],[-0.4219,-0.5781,0.024],[-0.4062,-0.5781,0.024],[-0.3906,-0.5781,0.0348],[-0.375,-0.5781,0.0598],[-0.3594,-0.5781,0.0706],[-0.3438,-0.5781,0.049],[-0.3281,-0.5781,0.0299],[-0.3125,-0.5781,0.0123],[-0.2969,-0.5781,0.0054],[-0.2812,-0.5781,0],[-0.2656,-0.5781,0],[-0.25,-0.5781,0],[-0.2344,-0.5781,0],[-0.2188,-0.5781,0],[-0.2031,-0.5781,0],[-0.1875,-0.5781,0],[-0.1719,-0.5781,0],[-0.1562,-0.5781,0],[-0.1406,-0.5781,0],[-0.125,-0.5781,0],[-0.1094,-0.5781,0],[-0.0938,-0.5781,0.0005],[-0.0781,-0.5781,0.0025],[-0.0625,-0.5781,0.0054],[-0.0469,-0.5781,0.001],[-0.0312,-0.5781,0],[-0.0156,-0.5781,0],[0,-0.5781,0.0015],[0.0156,-0.5781,0.0181],[0.0312,-0.5781,0.0005],[0.0469,-0.5781,0],[0.0625,-0.5781,0.0015],[0.0781,-0.5781,0],[0.0938,-0.5781,0.0005],[0.1094,-0.5781,0.0167],[0.125,-0.5781,0.0132],[0.1406,-0.5781,0.0162],[0.1562,-0.5781,0.0162],[0.1719,-0.5781,0.0162],[0.1875,-0.5781,0.0123],[0.2031,-0.5781,0.0176],[0.2188,-0.5781,0.0235],[0.2344,-0.5781,0.0245],[0.25,-0.5781,0.0142],[0.2656,-0.5781,0.0074],[0.2812,-0.5781,0],[0.2969,-0.5781,0],[0.3125,-0.5781,0],[0.3281,-0.5781,0],[0.3438,-0.5781,0],[0.3594,-0.5781,0],[0.375,-0.5781,0],[0.3906,-0.5781,0],[0.4062,-0.5781,0],[0.4219,-0.5781,0],[0.4375,-0.5781,0],[0.4531,-0.5781,0],[0.4688,-0.5781,0],[0.4844,-0.5781,0],[0.5,-0.5781,0],[0.5156,-0.5781,0],[0.5312,-0.5781,0],[0.5469,-0.5781,0],[0.5625,-0.5781,0],[0.5781,-0.5781,0],[0.5938,-0.5781,0],[0.6094,-0.5781,0],[0.625,-0.5781,0],[0.6406,-0.5781,0],[0.6562,-0.5781,0],[0.6719,-0.5781,0],[0.6875,-0.5781,0],[0.7031,-0.5781,0],[0.7188,-0.5781,0],[0.7344,-0.5781,0],[0.75,-0.5781,0],[0.7656,-0.5781,0],[0.7812,-0.5781,0],[0.7969,-0.5781,0],[0.8125,-0.5781,0],[0.8281,-0.5781,0],[0.8438,-0.5781,0],[0.8594,-0.5781,0],[0.875,-0.5781,0],[0.8906,-0.5781,0],[0.9062,-0.5781,0],[0.9219,-0.5781,0],[0.9375,-0.5781,0],[0.9531,-0.5781,0],[0.9688,-0.5781,0],[0.9844,-0.5781,0],[-1,-0.5625,0],[-0.9844,-0.5625,0],[-0.9688,-0.5625,0],[-0.9531,-0.5625,0],[-0.9375,-0.5625,0],[-0.9219,-0.5625,0],[-0.9062,-0.5625,0],[-0.8906,-0.5625,0],[-0.875,-0.5625,0.0191],[-0.8594,-0.5625,0.0422],[-0.8438,-0.5625,0.0495],[-0.8281,-0.5625,0.0505],[-0.8125,-0.5625,0.0461],[-0.7969,-0.5625,0.0534],[-0.7812,-0.5625,0.0559],[-0.7656,-0.5625,0.0574],[-0.75,-0.5625,0.0637],[-0.7344,-0.5625,0.0412],[-0.7188,-0.5625,0.0304],[-0.7031,-0.5625,0.0451],[-0.6875,-0.5625,0.0387],[-0.6719,-0.5625,0.0422],[-0.6562,-0.5625,0.0382],[-0.6406,-0.5625,0.0328],[-0.625,-0.5625,0.0196],[-0.6094,-0.5625,0.0284],[-0.5938,-0.5625,0.0294],[-0.5781,-0.5625,0.0338],[-0.5625,-0.5625,0.0338],[-0.5469,-0.5625,0.0299],[-0.5312,-0.5625,0.0172],[-0.5156,-0.5625,0.0172],[-0.5,-0.5625,0.0284],[-0.4844,-0.5625,0.026],[-0.4688,-0.5625,0.0289],[-0.4531,-0.5625,0.0353],[-0.4375,-0.5625,0.0289],[-0.4219,-0.5625,0.023],[-0.4062,-0.5625,0.023],[-0.3906,-0.5625,0.0265],[-0.375,-0.5625,0.0333],[-0.3594,-0.5625,0.0603],[-0.3438,-0.5625,0.0725],[-0.3281,-0.5625,0.0431],[-0.3125,-0.5625,0.0059],[-0.2969,-0.5625,0.0059],[-0.2812,-0.5625,0.0078],[-0.2656,-0.5625,0],[-0.25,-0.5625,0],[-0.2344,-0.5625,0],[-0.2188,-0.5625,0],[-0.2031,-0.5625,0],[-0.1875,-0.5625,0],[-0.1719,-0.5625,0],[-0.1562,-0.5625,0],[-0.1406,-0.5625,0],[-0.125,-0.5625,0],[-0.1094,-0.5625,0],[-0.0938,-0.5625,0.0005],[-0.0781,-0.5625,0.0147],[-0.0625,-0.5625,0.0152],[-0.0469,-0.5625,0.0098],[-0.0312,-0.5625,0.0078],[-0.0156,-0.5625,0.0074],[0,-0.5625,0.0078],[0.0156,-0.5625,0.0064],[0.0312,-0.5625,0],[0.0469,-0.5625,0.001],[0.0625,-0.5625,0.0157],[0.0781,-0.5625,0.0132],[0.0938,-0.5625,0.0157],[0.1094,-0.5625,0.024],[0.125,-0.5625,0.0363],[0.1406,-0.5625,0.0387],[0.1562,-0.5625,0.0333],[0.1719,-0.5625,0.0397],[0.1875,-0.5625,0.0235],[0.2031,-0.5625,0.0221],[0.2188,-0.5625,0.025],[0.2344,-0.5625,0.0235],[0.25,-0.5625,0.0186],[0.2656,-0.5625,0.0245],[0.2812,-0.5625,0.0137],[0.2969,-0.5625,0.0034],[0.3125,-0.5625,0.0029],[0.3281,-0.5625,0.001],[0.3438,-0.5625,0],[0.3594,-0.5625,0],[0.375,-0.5625,0],[0.3906,-0.5625,0],[0.4062,-0.5625,0],[0.4219,-0.5625,0],[0.4375,-0.5625,0],[0.4531,-0.5625,0],[0.4688,-0.5625,0],[0.4844,-0.5625,0],[0.5,-0.5625,0],[0.5156,-0.5625,0],[0.5312,-0.5625,0],[0.5469,-0.5625,0],[0.5625,-0.5625,0],[0.5781,-0.5625,0],[0.5938,-0.5625,0],[0.6094,-0.5625,0],[0.625,-0.5625,0],[0.6406,-0.5625,0],[0.6562,-0.5625,0],[0.6719,-0.5625,0],[0.6875,-0.5625,0],[0.7031,-0.5625,0],[0.7188,-0.5625,0],[0.7344,-0.5625,0],[0.75,-0.5625,0],[0.7656,-0.5625,0],[0.7812,-0.5625,0],[0.7969,-0.5625,0],[0.8125,-0.5625,0],[0.8281,-0.5625,0],[0.8438,-0.5625,0],[0.8594,-0.5625,0],[0.875,-0.5625,0],[0.8906,-0.5625,0],[0.9062,-0.5625,0],[0.9219,-0.5625,0],[0.9375,-0.5625,0],[0.9531,-0.5625,0],[0.9688,-0.5625,0],[0.9844,-0.5625,0],[-1,-0.5469,0],[-0.9844,-0.5469,0],[-0.9688,-0.5469,0],[-0.9531,-0.5469,0],[-0.9375,-0.5469,0],[-0.9219,-0.5469,0.0029],[-0.9062,-0.5469,0.0098],[-0.8906,-0.5469,0.0025],[-0.875,-0.5469,0.0162],[-0.8594,-0.5469,0.0284],[-0.8438,-0.5469,0.0407],[-0.8281,-0.5469,0.0593],[-0.8125,-0.5469,0.0544],[-0.7969,-0.5469,0.0647],[-0.7812,-0.5469,0.073],[-0.7656,-0.5469,0.048],[-0.75,-0.5469,0.0564],[-0.7344,-0.5469,0.0407],[-0.7188,-0.5469,0.0245],[-0.7031,-0.5469,0.0348],[-0.6875,-0.5469,0.0348],[-0.6719,-0.5469,0.0309],[-0.6562,-0.5469,0.0412],[-0.6406,-0.5469,0.027],[-0.625,-0.5469,0.0191],[-0.6094,-0.5469,0.0225],[-0.5938,-0.5469,0.0245],[-0.5781,-0.5469,0.0255],[-0.5625,-0.5469,0.0314],[-0.5469,-0.5469,0.024],[-0.5312,-0.5469,0.0211],[-0.5156,-0.5469,0.0162],[-0.5,-0.5469,0.027],[-0.4844,-0.5469,0.024],[-0.4688,-0.5469,0.025],[-0.4531,-0.5469,0.0265],[-0.4375,-0.5469,0.0235],[-0.4219,-0.5469,0.0299],[-0.4062,-0.5469,0.026],[-0.3906,-0.5469,0.0275],[-0.375,-0.5469,0.0397],[-0.3594,-0.5469,0.052],[-0.3438,-0.5469,0.0412],[-0.3281,-0.5469,0.0451],[-0.3125,-0.5469,0.0088],[-0.2969,-0.5469,0.0201],[-0.2812,-0.5469,0.0137],[-0.2656,-0.5469,0],[-0.25,-0.5469,0],[-0.2344,-0.5469,0],[-0.2188,-0.5469,0],[-0.2031,-0.5469,0],[-0.1875,-0.5469,0],[-0.1719,-0.5469,0],[-0.1562,-0.5469,0],[-0.1406,-0.5469,0],[-0.125,-0.5469,0],[-0.1094,-0.5469,0.002],[-0.0938,-0.5469,0.0123],[-0.0781,-0.5469,0.0211],[-0.0625,-0.5469,0.0162],[-0.0469,-0.5469,0.0123],[-0.0312,-0.5469,0.0103],[-0.0156,-0.5469,0.0127],[0,-0.5469,0.0137],[0.0156,-0.5469,0.0127],[0.0312,-0.5469,0.0039],[0.0469,-0.5469,0.0059],[0.0625,-0.5469,0.0191],[0.0781,-0.5469,0.025],[0.0938,-0.5469,0.0358],[0.1094,-0.5469,0.0299],[0.125,-0.5469,0.051],[0.1406,-0.5469,0.05],[0.1562,-0.5469,0.05],[0.1719,-0.5469,0.0436],[0.1875,-0.5469,0.0392],[0.2031,-0.5469,0.0431],[0.2188,-0.5469,0.0294],[0.2344,-0.5469,0.0333],[0.25,-0.5469,0.0338],[0.2656,-0.5469,0.0343],[0.2812,-0.5469,0.0225],[0.2969,-0.5469,0.0152],[0.3125,-0.5469,0.0162],[0.3281,-0.5469,0.0127],[0.3438,-0.5469,0.0059],[0.3594,-0.5469,0],[0.375,-0.5469,0],[0.3906,-0.5469,0],[0.4062,-0.5469,0.0015],[0.4219,-0.5469,0],[0.4375,-0.5469,0],[0.4531,-0.5469,0],[0.4688,-0.5469,0],[0.4844,-0.5469,0],[0.5,-0.5469,0],[0.5156,-0.5469,0],[0.5312,-0.5469,0],[0.5469,-0.5469,0],[0.5625,-0.5469,0],[0.5781,-0.5469,0],[0.5938,-0.5469,0],[0.6094,-0.5469,0],[0.625,-0.5469,0],[0.6406,-0.5469,0],[0.6562,-0.5469,0],[0.6719,-0.5469,0],[0.6875,-0.5469,0],[0.7031,-0.5469,0],[0.7188,-0.5469,0],[0.7344,-0.5469,0],[0.75,-0.5469,0],[0.7656,-0.5469,0],[0.7812,-0.5469,0],[0.7969,-0.5469,0],[0.8125,-0.5469,0],[0.8281,-0.5469,0],[0.8438,-0.5469,0],[0.8594,-0.5469,0],[0.875,-0.5469,0],[0.8906,-0.5469,0],[0.9062,-0.5469,0],[0.9219,-0.5469,0],[0.9375,-0.5469,0],[0.9531,-0.5469,0],[0.9688,-0.5469,0],[0.9844,-0.5469,0],[-1,-0.5312,0],[-0.9844,-0.5312,0],[-0.9688,-0.5312,0],[-0.9531,-0.5312,0],[-0.9375,-0.5312,0],[-0.9219,-0.5312,0.0093],[-0.9062,-0.5312,0.0103],[-0.8906,-0.5312,0],[-0.875,-0.5312,0.0029],[-0.8594,-0.5312,0.026],[-0.8438,-0.5312,0.0451],[-0.8281,-0.5312,0.0495],[-0.8125,-0.5312,0.0613],[-0.7969,-0.5312,0.0632],[-0.7812,-0.5312,0.0623],[-0.7656,-0.5312,0.049],[-0.75,-0.5312,0.0343],[-0.7344,-0.5312,0.0373],[-0.7188,-0.5312,0.024],[-0.7031,-0.5312,0.0235],[-0.6875,-0.5312,0.025],[-0.6719,-0.5312,0.0225],[-0.6562,-0.5312,0.024],[-0.6406,-0.5312,0.0162],[-0.625,-0.5312,0.0142],[-0.6094,-0.5312,0.0181],[-0.5938,-0.5312,0.0206],[-0.5781,-0.5312,0.0186],[-0.5625,-0.5312,0.0191],[-0.5469,-0.5312,0.0186],[-0.5312,-0.5312,0.0191],[-0.5156,-0.5312,0.0176],[-0.5,-0.5312,0.0221],[-0.4844,-0.5312,0.0206],[-0.4688,-0.5312,0.024],[-0.4531,-0.5312,0.0235],[-0.4375,-0.5312,0.0265],[-0.4219,-0.5312,0.0309],[-0.4062,-0.5312,0.027],[-0.3906,-0.5312,0.0225],[-0.375,-0.5312,0.0294],[-0.3594,-0.5312,0.0387],[-0.3438,-0.5312,0.0245],[-0.3281,-0.5312,0.0059],[-0.3125,-0.5312,0.0539],[-0.2969,-0.5312,0.0353],[-0.2812,-0.5312,0.0127],[-0.2656,-0.5312,0],[-0.25,-0.5312,0],[-0.2344,-0.5312,0],[-0.2188,-0.5312,0.0029],[-0.2031,-0.5312,0.0005],[-0.1875,-0.5312,0.0074],[-0.1719,-0.5312,0.0039],[-0.1562,-0.5312,0.0025],[-0.1406,-0.5312,0.0039],[-0.125,-0.5312,0.0074],[-0.1094,-0.5312,0.0123],[-0.0938,-0.5312,0.0176],[-0.0781,-0.5312,0.0211],[-0.0625,-0.5312,0.0162],[-0.0469,-0.5312,0.0127],[-0.0312,-0.5312,0.0132],[-0.0156,-0.5312,0.0172],[0,-0.5312,0.0176],[0.0156,-0.5312,0.0147],[0.0312,-0.5312,0.0113],[0.0469,-0.5312,0.0142],[0.0625,-0.5312,0.0245],[0.0781,-0.5312,0.0564],[0.0938,-0.5312,0.0627],[0.1094,-0.5312,0.0466],[0.125,-0.5312,0.0755],[0.1406,-0.5312,0.0784],[0.1562,-0.5312,0.0554],[0.1719,-0.5312,0.0461],[0.1875,-0.5312,0.0426],[0.2031,-0.5312,0.051],[0.2188,-0.5312,0.0343],[0.2344,-0.5312,0.0304],[0.25,-0.5312,0.0284],[0.2656,-0.5312,0.0299],[0.2812,-0.5312,0.026],[0.2969,-0.5312,0.0275],[0.3125,-0.5312,0.0186],[0.3281,-0.5312,0.0157],[0.3438,-0.5312,0.023],[0.3594,-0.5312,0.0137],[0.375,-0.5312,0.0098],[0.3906,-0.5312,0.0132],[0.4062,-0.5312,0.0137],[0.4219,-0.5312,0.0103],[0.4375,-0.5312,0.0029],[0.4531,-0.5312,0],[0.4688,-0.5312,0],[0.4844,-0.5312,0],[0.5,-0.5312,0],[0.5156,-0.5312,0],[0.5312,-0.5312,0],[0.5469,-0.5312,0],[0.5625,-0.5312,0],[0.5781,-0.5312,0],[0.5938,-0.5312,0],[0.6094,-0.5312,0],[0.625,-0.5312,0],[0.6406,-0.5312,0],[0.6562,-0.5312,0],[0.6719,-0.5312,0],[0.6875,-0.5312,0],[0.7031,-0.5312,0],[0.7188,-0.5312,0],[0.7344,-0.5312,0],[0.75,-0.5312,0],[0.7656,-0.5312,0],[0.7812,-0.5312,0],[0.7969,-0.5312,0],[0.8125,-0.5312,0],[0.8281,-0.5312,0],[0.8438,-0.5312,0],[0.8594,-0.5312,0],[0.875,-0.5312,0],[0.8906,-0.5312,0],[0.9062,-0.5312,0],[0.9219,-0.5312,0],[0.9375,-0.5312,0],[0.9531,-0.5312,0],[0.9688,-0.5312,0],[0.9844,-0.5312,0],[-1,-0.5156,0],[-0.9844,-0.5156,0],[-0.9688,-0.5156,0],[-0.9531,-0.5156,0],[-0.9375,-0.5156,0],[-0.9219,-0.5156,0.0025],[-0.9062,-0.5156,0.0078],[-0.8906,-0.5156,0],[-0.875,-0.5156,0.0186],[-0.8594,-0.5156,0.0245],[-0.8438,-0.5156,0.0412],[-0.8281,-0.5156,0.0431],[-0.8125,-0.5156,0.0402],[-0.7969,-0.5156,0.0412],[-0.7812,-0.5156,0.0471],[-0.7656,-0.5156,0.0382],[-0.75,-0.5156,0.0324],[-0.7344,-0.5156,0.0255],[-0.7188,-0.5156,0.026],[-0.7031,-0.5156,0.0191],[-0.6875,-0.5156,0.0176],[-0.6719,-0.5156,0.0167],[-0.6562,-0.5156,0.0172],[-0.6406,-0.5156,0.0152],[-0.625,-0.5156,0.0118],[-0.6094,-0.5156,0.0123],[-0.5938,-0.5156,0.0152],[-0.5781,-0.5156,0.0127],[-0.5625,-0.5156,0.0127],[-0.5469,-0.5156,0.0132],[-0.5312,-0.5156,0.0157],[-0.5156,-0.5156,0.0181],[-0.5,-0.5156,0.0176],[-0.4844,-0.5156,0.0196],[-0.4688,-0.5156,0.0221],[-0.4531,-0.5156,0.0245],[-0.4375,-0.5156,0.027],[-0.4219,-0.5156,0.0265],[-0.4062,-0.5156,0.023],[-0.3906,-0.5156,0.0206],[-0.375,-0.5156,0.0191],[-0.3594,-0.5156,0.0225],[-0.3438,-0.5156,0.0206],[-0.3281,-0.5156,0.0338],[-0.3125,-0.5156,0.0549],[-0.2969,-0.5156,0.0348],[-0.2812,-0.5156,0.0054],[-0.2656,-0.5156,0],[-0.25,-0.5156,0],[-0.2344,-0.5156,0.0005],[-0.2188,-0.5156,0.0113],[-0.2031,-0.5156,0.0123],[-0.1875,-0.5156,0.0172],[-0.1719,-0.5156,0.0147],[-0.1562,-0.5156,0.0113],[-0.1406,-0.5156,0.0132],[-0.125,-0.5156,0.0132],[-0.1094,-0.5156,0.0186],[-0.0938,-0.5156,0.0211],[-0.0781,-0.5156,0.0265],[-0.0625,-0.5156,0.0196],[-0.0469,-0.5156,0.0157],[-0.0312,-0.5156,0.0181],[-0.0156,-0.5156,0.0206],[0,-0.5156,0.0206],[0.0156,-0.5156,0.0162],[0.0312,-0.5156,0.0137],[0.0469,-0.5156,0.0167],[0.0625,-0.5156,0.0245],[0.0781,-0.5156,0.0618],[0.0938,-0.5156,0.0814],[0.1094,-0.5156,0.0701],[0.125,-0.5156,0.0902],[0.1406,-0.5156,0.0755],[0.1562,-0.5156,0.0618],[0.1719,-0.5156,0.0598],[0.1875,-0.5156,0.0461],[0.2031,-0.5156,0.0456],[0.2188,-0.5156,0.052],[0.2344,-0.5156,0.0319],[0.25,-0.5156,0.0431],[0.2656,-0.5156,0.0294],[0.2812,-0.5156,0.0441],[0.2969,-0.5156,0.0515],[0.3125,-0.5156,0.0328],[0.3281,-0.5156,0.0245],[0.3438,-0.5156,0.0221],[0.3594,-0.5156,0.0176],[0.375,-0.5156,0.0157],[0.3906,-0.5156,0.0167],[0.4062,-0.5156,0.0162],[0.4219,-0.5156,0.0157],[0.4375,-0.5156,0.0162],[0.4531,-0.5156,0.0093],[0.4688,-0.5156,0.0005],[0.4844,-0.5156,0],[0.5,-0.5156,0],[0.5156,-0.5156,0],[0.5312,-0.5156,0],[0.5469,-0.5156,0],[0.5625,-0.5156,0],[0.5781,-0.5156,0],[0.5938,-0.5156,0],[0.6094,-0.5156,0],[0.625,-0.5156,0],[0.6406,-0.5156,0],[0.6562,-0.5156,0],[0.6719,-0.5156,0],[0.6875,-0.5156,0],[0.7031,-0.5156,0],[0.7188,-0.5156,0],[0.7344,-0.5156,0],[0.75,-0.5156,0],[0.7656,-0.5156,0],[0.7812,-0.5156,0],[0.7969,-0.5156,0],[0.8125,-0.5156,0],[0.8281,-0.5156,0],[0.8438,-0.5156,0],[0.8594,-0.5156,0],[0.875,-0.5156,0],[0.8906,-0.5156,0],[0.9062,-0.5156,0],[0.9219,-0.5156,0],[0.9375,-0.5156,0],[0.9531,-0.5156,0],[0.9688,-0.5156,0],[0.9844,-0.5156,0],[-1,-0.5,0],[-0.9844,-0.5,0],[-0.9688,-0.5,0],[-0.9531,-0.5,0],[-0.9375,-0.5,0],[-0.9219,-0.5,0],[-0.9062,-0.5,0],[-0.8906,-0.5,0.0029],[-0.875,-0.5,0.0309],[-0.8594,-0.5,0.0265],[-0.8438,-0.5,0.0235],[-0.8281,-0.5,0.025],[-0.8125,-0.5,0.027],[-0.7969,-0.5,0.0299],[-0.7812,-0.5,0.0279],[-0.7656,-0.5,0.0255],[-0.75,-0.5,0.0235],[-0.7344,-0.5,0.0255],[-0.7188,-0.5,0.0245],[-0.7031,-0.5,0.0191],[-0.6875,-0.5,0.0181],[-0.6719,-0.5,0.0196],[-0.6562,-0.5,0.0206],[-0.6406,-0.5,0.0196],[-0.625,-0.5,0.0127],[-0.6094,-0.5,0.0118],[-0.5938,-0.5,0.0118],[-0.5781,-0.5,0.0118],[-0.5625,-0.5,0.0118],[-0.5469,-0.5,0.0123],[-0.5312,-0.5,0.0127],[-0.5156,-0.5,0.0152],[-0.5,-0.5,0.0191],[-0.4844,-0.5,0.0201],[-0.4688,-0.5,0.0186],[-0.4531,-0.5,0.0225],[-0.4375,-0.5,0.0196],[-0.4219,-0.5,0.0191],[-0.4062,-0.5,0.0191],[-0.3906,-0.5,0.0167],[-0.375,-0.5,0.0162],[-0.3594,-0.5,0.0235],[-0.3438,-0.5,0.0319],[-0.3281,-0.5,0.0544],[-0.3125,-0.5,0.0348],[-0.2969,-0.5,0.0137],[-0.2812,-0.5,0.0054],[-0.2656,-0.5,0.0005],[-0.25,-0.5,0],[-0.2344,-0.5,0.0029],[-0.2188,-0.5,0.0137],[-0.2031,-0.5,0.0176],[-0.1875,-0.5,0.0216],[-0.1719,-0.5,0.0206],[-0.1562,-0.5,0.0147],[-0.1406,-0.5,0.0152],[-0.125,-0.5,0.0152],[-0.1094,-0.5,0.0245],[-0.0938,-0.5,0.026],[-0.0781,-0.5,0.0225],[-0.0625,-0.5,0.0225],[-0.0469,-0.5,0.0196],[-0.0312,-0.5,0.0201],[-0.0156,-0.5,0.0216],[0,-0.5,0.0221],[0.0156,-0.5,0.0181],[0.0312,-0.5,0.0152],[0.0469,-0.5,0.0191],[0.0625,-0.5,0.0255],[0.0781,-0.5,0.0559],[0.0938,-0.5,0.0676],[0.1094,-0.5,0.0966],[0.125,-0.5,0.077],[0.1406,-0.5,0.0926],[0.1562,-0.5,0.0686],[0.1719,-0.5,0.0779],[0.1875,-0.5,0.0593],[0.2031,-0.5,0.0672],[0.2188,-0.5,0.0529],[0.2344,-0.5,0.0598],[0.25,-0.5,0.0466],[0.2656,-0.5,0.0319],[0.2812,-0.5,0.0328],[0.2969,-0.5,0.0647],[0.3125,-0.5,0.0461],[0.3281,-0.5,0.0324],[0.3438,-0.5,0.0275],[0.3594,-0.5,0.0245],[0.375,-0.5,0.0167],[0.3906,-0.5,0.0206],[0.4062,-0.5,0.023],[0.4219,-0.5,0.0186],[0.4375,-0.5,0.0191],[0.4531,-0.5,0.0176],[0.4688,-0.5,0.0137],[0.4844,-0.5,0.0039],[0.5,-0.5,0.0005],[0.5156,-0.5,0.0005],[0.5312,-0.5,0],[0.5469,-0.5,0.0005],[0.5625,-0.5,0.0103],[0.5781,-0.5,0.0069],[0.5938,-0.5,0.0025],[0.6094,-0.5,0],[0.625,-0.5,0],[0.6406,-0.5,0],[0.6562,-0.5,0],[0.6719,-0.5,0],[0.6875,-0.5,0],[0.7031,-0.5,0],[0.7188,-0.5,0],[0.7344,-0.5,0],[0.75,-0.5,0],[0.7656,-0.5,0],[0.7812,-0.5,0],[0.7969,-0.5,0],[0.8125,-0.5,0],[0.8281,-0.5,0],[0.8438,-0.5,0],[0.8594,-0.5,0],[0.875,-0.5,0],[0.8906,-0.5,0],[0.9062,-0.5,0],[0.9219,-0.5,0],[0.9375,-0.5,0],[0.9531,-0.5,0],[0.9688,-0.5,0],[0.9844,-0.5,0],[-1,-0.4844,0],[-0.9844,-0.4844,0],[-0.9688,-0.4844,0],[-0.9531,-0.4844,0],[-0.9375,-0.4844,0],[-0.9219,-0.4844,0],[-0.9062,-0.4844,0],[-0.8906,-0.4844,0.0025],[-0.875,-0.4844,0.0284],[-0.8594,-0.4844,0.024],[-0.8438,-0.4844,0.0216],[-0.8281,-0.4844,0.0206],[-0.8125,-0.4844,0.025],[-0.7969,-0.4844,0.0275],[-0.7812,-0.4844,0.0245],[-0.7656,-0.4844,0.0275],[-0.75,-0.4844,0.0304],[-0.7344,-0.4844,0.0275],[-0.7188,-0.4844,0.0294],[-0.7031,-0.4844,0.0289],[-0.6875,-0.4844,0.0265],[-0.6719,-0.4844,0.027],[-0.6562,-0.4844,0.0255],[-0.6406,-0.4844,0.0216],[-0.625,-0.4844,0.0142],[-0.6094,-0.4844,0.0118],[-0.5938,-0.4844,0.0118],[-0.5781,-0.4844,0.0118],[-0.5625,-0.4844,0.0118],[-0.5469,-0.4844,0.0118],[-0.5312,-0.4844,0.0118],[-0.5156,-0.4844,0.0132],[-0.5,-0.4844,0.0162],[-0.4844,-0.4844,0.0167],[-0.4688,-0.4844,0.0147],[-0.4531,-0.4844,0.0172],[-0.4375,-0.4844,0.0225],[-0.4219,-0.4844,0.0221],[-0.4062,-0.4844,0.027],[-0.3906,-0.4844,0.027],[-0.375,-0.4844,0.0279],[-0.3594,-0.4844,0.0402],[-0.3438,-0.4844,0.0284],[-0.3281,-0.4844,0.0265],[-0.3125,-0.4844,0.0221],[-0.2969,-0.4844,0.0113],[-0.2812,-0.4844,0.0118],[-0.2656,-0.4844,0.0118],[-0.25,-0.4844,0.0108],[-0.2344,-0.4844,0.0123],[-0.2188,-0.4844,0.0132],[-0.2031,-0.4844,0.0167],[-0.1875,-0.4844,0.025],[-0.1719,-0.4844,0.0289],[-0.1562,-0.4844,0.0167],[-0.1406,-0.4844,0.0181],[-0.125,-0.4844,0.0152],[-0.1094,-0.4844,0.0225],[-0.0938,-0.4844,0.0235],[-0.0781,-0.4844,0.026],[-0.0625,-0.4844,0.0245],[-0.0469,-0.4844,0.0206],[-0.0312,-0.4844,0.0211],[-0.0156,-0.4844,0.0216],[0,-0.4844,0.0211],[0.0156,-0.4844,0.0191],[0.0312,-0.4844,0.0186],[0.0469,-0.4844,0.0225],[0.0625,-0.4844,0.0304],[0.0781,-0.4844,0.0554],[0.0938,-0.4844,0.0809],[0.1094,-0.4844,0.0799],[0.125,-0.4844,0.0627],[0.1406,-0.4844,0.0956],[0.1562,-0.4844,0.1015],[0.1719,-0.4844,0.0917],[0.1875,-0.4844,0.0848],[0.2031,-0.4844,0.0779],[0.2188,-0.4844,0.074],[0.2344,-0.4844,0.0735],[0.25,-0.4844,0.0495],[0.2656,-0.4844,0.0485],[0.2812,-0.4844,0.0289],[0.2969,-0.4844,0.0333],[0.3125,-0.4844,0.0422],[0.3281,-0.4844,0.0382],[0.3438,-0.4844,0.0299],[0.3594,-0.4844,0.0235],[0.375,-0.4844,0.0196],[0.3906,-0.4844,0.024],[0.4062,-0.4844,0.026],[0.4219,-0.4844,0.024],[0.4375,-0.4844,0.0255],[0.4531,-0.4844,0.0196],[0.4688,-0.4844,0.0176],[0.4844,-0.4844,0.0167],[0.5,-0.4844,0.0108],[0.5156,-0.4844,0.0025],[0.5312,-0.4844,0.002],[0.5469,-0.4844,0.0078],[0.5625,-0.4844,0.0132],[0.5781,-0.4844,0.0127],[0.5938,-0.4844,0.0069],[0.6094,-0.4844,0],[0.625,-0.4844,0],[0.6406,-0.4844,0],[0.6562,-0.4844,0],[0.6719,-0.4844,0],[0.6875,-0.4844,0],[0.7031,-0.4844,0],[0.7188,-0.4844,0],[0.7344,-0.4844,0],[0.75,-0.4844,0],[0.7656,-0.4844,0],[0.7812,-0.4844,0],[0.7969,-0.4844,0],[0.8125,-0.4844,0],[0.8281,-0.4844,0],[0.8438,-0.4844,0],[0.8594,-0.4844,0],[0.875,-0.4844,0],[0.8906,-0.4844,0],[0.9062,-0.4844,0],[0.9219,-0.4844,0],[0.9375,-0.4844,0],[0.9531,-0.4844,0],[0.9688,-0.4844,0],[0.9844,-0.4844,0],[-1,-0.4688,0],[-0.9844,-0.4688,0],[-0.9688,-0.4688,0],[-0.9531,-0.4688,0],[-0.9375,-0.4688,0],[-0.9219,-0.4688,0],[-0.9062,-0.4688,0],[-0.8906,-0.4688,0.0039],[-0.875,-0.4688,0.0216],[-0.8594,-0.4688,0.023],[-0.8438,-0.4688,0.0196],[-0.8281,-0.4688,0.0167],[-0.8125,-0.4688,0.0201],[-0.7969,-0.4688,0.024],[-0.7812,-0.4688,0.0294],[-0.7656,-0.4688,0.0392],[-0.75,-0.4688,0.0353],[-0.7344,-0.4688,0.0309],[-0.7188,-0.4688,0.0289],[-0.7031,-0.4688,0.027],[-0.6875,-0.4688,0.0196],[-0.6719,-0.4688,0.0147],[-0.6562,-0.4688,0.0137],[-0.6406,-0.4688,0.0137],[-0.625,-0.4688,0.0123],[-0.6094,-0.4688,0.0118],[-0.5938,-0.4688,0.0118],[-0.5781,-0.4688,0.0118],[-0.5625,-0.4688,0.0118],[-0.5469,-0.4688,0.0118],[-0.5312,-0.4688,0.0123],[-0.5156,-0.4688,0.0127],[-0.5,-0.4688,0.0132],[-0.4844,-0.4688,0.0132],[-0.4688,-0.4688,0.0152],[-0.4531,-0.4688,0.0196],[-0.4375,-0.4688,0.023],[-0.4219,-0.4688,0.025],[-0.4062,-0.4688,0.0255],[-0.3906,-0.4688,0.0304],[-0.375,-0.4688,0.0304],[-0.3594,-0.4688,0.0397],[-0.3438,-0.4688,0.0564],[-0.3281,-0.4688,0.027],[-0.3125,-0.4688,0.0186],[-0.2969,-0.4688,0.0142],[-0.2812,-0.4688,0.0152],[-0.2656,-0.4688,0.0132],[-0.25,-0.4688,0.0123],[-0.2344,-0.4688,0.0123],[-0.2188,-0.4688,0.0152],[-0.2031,-0.4688,0.0216],[-0.1875,-0.4688,0.026],[-0.1719,-0.4688,0.0255],[-0.1562,-0.4688,0.0201],[-0.1406,-0.4688,0.0172],[-0.125,-0.4688,0.0181],[-0.1094,-0.4688,0.0152],[-0.0938,-0.4688,0.0181],[-0.0781,-0.4688,0.0225],[-0.0625,-0.4688,0.0221],[-0.0469,-0.4688,0.0221],[-0.0312,-0.4688,0.0225],[-0.0156,-0.4688,0.0216],[0,-0.4688,0.0201],[0.0156,-0.4688,0.0181],[0.0312,-0.4688,0.0181],[0.0469,-0.4688,0.0225],[0.0625,-0.4688,0.0333],[0.0781,-0.4688,0.0529],[0.0938,-0.4688,0.0529],[0.1094,-0.4688,0.049],[0.125,-0.4688,0.0676],[0.1406,-0.4688,0.0853],[0.1562,-0.4688,0.0843],[0.1719,-0.4688,0.0711],[0.1875,-0.4688,0.1005],[0.2031,-0.4688,0.0941],[0.2188,-0.4688,0.1029],[0.2344,-0.4688,0.0598],[0.25,-0.4688,0.0608],[0.2656,-0.4688,0.0471],[0.2812,-0.4688,0.0426],[0.2969,-0.4688,0.0284],[0.3125,-0.4688,0.0275],[0.3281,-0.4688,0.0412],[0.3438,-0.4688,0.0328],[0.3594,-0.4688,0.0304],[0.375,-0.4688,0.0211],[0.3906,-0.4688,0.0186],[0.4062,-0.4688,0.0206],[0.4219,-0.4688,0.0221],[0.4375,-0.4688,0.023],[0.4531,-0.4688,0.0186],[0.4688,-0.4688,0.0196],[0.4844,-0.4688,0.0167],[0.5,-0.4688,0.0113],[0.5156,-0.4688,0.0069],[0.5312,-0.4688,0.0098],[0.5469,-0.4688,0.0113],[0.5625,-0.4688,0.0132],[0.5781,-0.4688,0.0127],[0.5938,-0.4688,0.0025],[0.6094,-0.4688,0],[0.625,-0.4688,0],[0.6406,-0.4688,0],[0.6562,-0.4688,0],[0.6719,-0.4688,0],[0.6875,-0.4688,0],[0.7031,-0.4688,0],[0.7188,-0.4688,0],[0.7344,-0.4688,0],[0.75,-0.4688,0],[0.7656,-0.4688,0],[0.7812,-0.4688,0],[0.7969,-0.4688,0],[0.8125,-0.4688,0],[0.8281,-0.4688,0],[0.8438,-0.4688,0],[0.8594,-0.4688,0],[0.875,-0.4688,0],[0.8906,-0.4688,0],[0.9062,-0.4688,0],[0.9219,-0.4688,0],[0.9375,-0.4688,0],[0.9531,-0.4688,0],[0.9688,-0.4688,0],[0.9844,-0.4688,0],[-1,-0.4531,0],[-0.9844,-0.4531,0],[-0.9688,-0.4531,0],[-0.9531,-0.4531,0],[-0.9375,-0.4531,0],[-0.9219,-0.4531,0],[-0.9062,-0.4531,0],[-0.8906,-0.4531,0.0108],[-0.875,-0.4531,0.0196],[-0.8594,-0.4531,0.0201],[-0.8438,-0.4531,0.0186],[-0.8281,-0.4531,0.0162],[-0.8125,-0.4531,0.0172],[-0.7969,-0.4531,0.0201],[-0.7812,-0.4531,0.0245],[-0.7656,-0.4531,0.0255],[-0.75,-0.4531,0.0201],[-0.7344,-0.4531,0.0162],[-0.7188,-0.4531,0.0142],[-0.7031,-0.4531,0.0142],[-0.6875,-0.4531,0.0142],[-0.6719,-0.4531,0.0132],[-0.6562,-0.4531,0.0127],[-0.6406,-0.4531,0.0123],[-0.625,-0.4531,0.0118],[-0.6094,-0.4531,0.0118],[-0.5938,-0.4531,0.0123],[-0.5781,-0.4531,0.0118],[-0.5625,-0.4531,0.0118],[-0.5469,-0.4531,0.0118],[-0.5312,-0.4531,0.0123],[-0.5156,-0.4531,0.0127],[-0.5,-0.4531,0.0142],[-0.4844,-0.4531,0.0147],[-0.4688,-0.4531,0.0152],[-0.4531,-0.4531,0.0206],[-0.4375,-0.4531,0.0225],[-0.4219,-0.4531,0.0225],[-0.4062,-0.4531,0.0289],[-0.3906,-0.4531,0.0309],[-0.375,-0.4531,0.0407],[-0.3594,-0.4531,0.0407],[-0.3438,-0.4531,0.0284],[-0.3281,-0.4531,0.0284],[-0.3125,-0.4531,0.0201],[-0.2969,-0.4531,0.0181],[-0.2812,-0.4531,0.0167],[-0.2656,-0.4531,0.0147],[-0.25,-0.4531,0.0132],[-0.2344,-0.4531,0.0127],[-0.2188,-0.4531,0.0167],[-0.2031,-0.4531,0.0265],[-0.1875,-0.4531,0.0353],[-0.1719,-0.4531,0.0304],[-0.1562,-0.4531,0.0216],[-0.1406,-0.4531,0.0162],[-0.125,-0.4531,0.0176],[-0.1094,-0.4531,0.0181],[-0.0938,-0.4531,0.0196],[-0.0781,-0.4531,0.0225],[-0.0625,-0.4531,0.0245],[-0.0469,-0.4531,0.0245],[-0.0312,-0.4531,0.0235],[-0.0156,-0.4531,0.0221],[0,-0.4531,0.0216],[0.0156,-0.4531,0.0186],[0.0312,-0.4531,0.0186],[0.0469,-0.4531,0.0221],[0.0625,-0.4531,0.0319],[0.0781,-0.4531,0.0495],[0.0938,-0.4531,0.051],[0.1094,-0.4531,0.0417],[0.125,-0.4531,0.051],[0.1406,-0.4531,0.0456],[0.1562,-0.4531,0.0696],[0.1719,-0.4531,0.0583],[0.1875,-0.4531,0.0922],[0.2031,-0.4531,0.0828],[0.2188,-0.4531,0.0926],[0.2344,-0.4531,0.0505],[0.25,-0.4531,0.0407],[0.2656,-0.4531,0.0402],[0.2812,-0.4531,0.0426],[0.2969,-0.4531,0.0387],[0.3125,-0.4531,0.027],[0.3281,-0.4531,0.0314],[0.3438,-0.4531,0.025],[0.3594,-0.4531,0.0407],[0.375,-0.4531,0.0289],[0.3906,-0.4531,0.0201],[0.4062,-0.4531,0.0176],[0.4219,-0.4531,0.0181],[0.4375,-0.4531,0.0186],[0.4531,-0.4531,0.0196],[0.4688,-0.4531,0.0176],[0.4844,-0.4531,0.0186],[0.5,-0.4531,0.0142],[0.5156,-0.4531,0.0167],[0.5312,-0.4531,0.0201],[0.5469,-0.4531,0.0147],[0.5625,-0.4531,0.0127],[0.5781,-0.4531,0.0123],[0.5938,-0.4531,0.0025],[0.6094,-0.4531,0],[0.625,-0.4531,0],[0.6406,-0.4531,0],[0.6562,-0.4531,0],[0.6719,-0.4531,0],[0.6875,-0.4531,0],[0.7031,-0.4531,0],[0.7188,-0.4531,0],[0.7344,-0.4531,0],[0.75,-0.4531,0],[0.7656,-0.4531,0],[0.7812,-0.4531,0],[0.7969,-0.4531,0],[0.8125,-0.4531,0],[0.8281,-0.4531,0],[0.8438,-0.4531,0],[0.8594,-0.4531,0],[0.875,-0.4531,0],[0.8906,-0.4531,0],[0.9062,-0.4531,0],[0.9219,-0.4531,0],[0.9375,-0.4531,0],[0.9531,-0.4531,0],[0.9688,-0.4531,0],[0.9844,-0.4531,0],[-1,-0.4375,0],[-0.9844,-0.4375,0],[-0.9688,-0.4375,0],[-0.9531,-0.4375,0],[-0.9375,-0.4375,0],[-0.9219,-0.4375,0],[-0.9062,-0.4375,0],[-0.8906,-0.4375,0],[-0.875,-0.4375,0.0103],[-0.8594,-0.4375,0.0186],[-0.8438,-0.4375,0.0181],[-0.8281,-0.4375,0.0167],[-0.8125,-0.4375,0.0172],[-0.7969,-0.4375,0.0147],[-0.7812,-0.4375,0.0157],[-0.7656,-0.4375,0.0157],[-0.75,-0.4375,0.0142],[-0.7344,-0.4375,0.0157],[-0.7188,-0.4375,0.0162],[-0.7031,-0.4375,0.0162],[-0.6875,-0.4375,0.0176],[-0.6719,-0.4375,0.0162],[-0.6562,-0.4375,0.0142],[-0.6406,-0.4375,0.0152],[-0.625,-0.4375,0.0162],[-0.6094,-0.4375,0.0147],[-0.5938,-0.4375,0.0142],[-0.5781,-0.4375,0.0137],[-0.5625,-0.4375,0.0123],[-0.5469,-0.4375,0.0118],[-0.5312,-0.4375,0.0123],[-0.5156,-0.4375,0.0132],[-0.5,-0.4375,0.0142],[-0.4844,-0.4375,0.0147],[-0.4688,-0.4375,0.0181],[-0.4531,-0.4375,0.0255],[-0.4375,-0.4375,0.0309],[-0.4219,-0.4375,0.0348],[-0.4062,-0.4375,0.0397],[-0.3906,-0.4375,0.0451],[-0.375,-0.4375,0.0441],[-0.3594,-0.4375,0.0392],[-0.3438,-0.4375,0.0314],[-0.3281,-0.4375,0.0284],[-0.3125,-0.4375,0.0225],[-0.2969,-0.4375,0.0216],[-0.2812,-0.4375,0.0172],[-0.2656,-0.4375,0.0157],[-0.25,-0.4375,0.0147],[-0.2344,-0.4375,0.0147],[-0.2188,-0.4375,0.0152],[-0.2031,-0.4375,0.0206],[-0.1875,-0.4375,0.0319],[-0.1719,-0.4375,0.0343],[-0.1562,-0.4375,0.0265],[-0.1406,-0.4375,0.0186],[-0.125,-0.4375,0.0216],[-0.1094,-0.4375,0.0206],[-0.0938,-0.4375,0.0245],[-0.0781,-0.4375,0.0275],[-0.0625,-0.4375,0.0275],[-0.0469,-0.4375,0.0245],[-0.0312,-0.4375,0.024],[-0.0156,-0.4375,0.0235],[0,-0.4375,0.0206],[0.0156,-0.4375,0.0201],[0.0312,-0.4375,0.0196],[0.0469,-0.4375,0.0201],[0.0625,-0.4375,0.0284],[0.0781,-0.4375,0.0324],[0.0938,-0.4375,0.0417],[0.1094,-0.4375,0.0456],[0.125,-0.4375,0.0407],[0.1406,-0.4375,0.0426],[0.1562,-0.4375,0.0461],[0.1719,-0.4375,0.0613],[0.1875,-0.4375,0.076],[0.2031,-0.4375,0.0426],[0.2188,-0.4375,0.0623],[0.2344,-0.4375,0.0471],[0.25,-0.4375,0.0363],[0.2656,-0.4375,0.0368],[0.2812,-0.4375,0.0343],[0.2969,-0.4375,0.0412],[0.3125,-0.4375,0.0343],[0.3281,-0.4375,0.0235],[0.3438,-0.4375,0.0275],[0.3594,-0.4375,0.0299],[0.375,-0.4375,0.024],[0.3906,-0.4375,0.0176],[0.4062,-0.4375,0.0157],[0.4219,-0.4375,0.0152],[0.4375,-0.4375,0.0162],[0.4531,-0.4375,0.0172],[0.4688,-0.4375,0.0157],[0.4844,-0.4375,0.0152],[0.5,-0.4375,0.0157],[0.5156,-0.4375,0.0216],[0.5312,-0.4375,0.0309],[0.5469,-0.4375,0.0181],[0.5625,-0.4375,0.0127],[0.5781,-0.4375,0.0123],[0.5938,-0.4375,0.0064],[0.6094,-0.4375,0],[0.625,-0.4375,0],[0.6406,-0.4375,0],[0.6562,-0.4375,0],[0.6719,-0.4375,0],[0.6875,-0.4375,0],[0.7031,-0.4375,0],[0.7188,-0.4375,0],[0.7344,-0.4375,0],[0.75,-0.4375,0],[0.7656,-0.4375,0],[0.7812,-0.4375,0],[0.7969,-0.4375,0],[0.8125,-0.4375,0],[0.8281,-0.4375,0],[0.8438,-0.4375,0],[0.8594,-0.4375,0],[0.875,-0.4375,0],[0.8906,-0.4375,0],[0.9062,-0.4375,0],[0.9219,-0.4375,0],[0.9375,-0.4375,0],[0.9531,-0.4375,0],[0.9688,-0.4375,0],[0.9844,-0.4375,0],[-1,-0.4219,0],[-0.9844,-0.4219,0],[-0.9688,-0.4219,0],[-0.9531,-0.4219,0],[-0.9375,-0.4219,0],[-0.9219,-0.4219,0],[-0.9062,-0.4219,0],[-0.8906,-0.4219,0],[-0.875,-0.4219,0.0034],[-0.8594,-0.4219,0.023],[-0.8438,-0.4219,0.0211],[-0.8281,-0.4219,0.0167],[-0.8125,-0.4219,0.0147],[-0.7969,-0.4219,0.0127],[-0.7812,-0.4219,0.0127],[-0.7656,-0.4219,0.0157],[-0.75,-0.4219,0.0201],[-0.7344,-0.4219,0.0216],[-0.7188,-0.4219,0.0186],[-0.7031,-0.4219,0.0167],[-0.6875,-0.4219,0.0196],[-0.6719,-0.4219,0.0181],[-0.6562,-0.4219,0.0191],[-0.6406,-0.4219,0.0221],[-0.625,-0.4219,0.0225],[-0.6094,-0.4219,0.0181],[-0.5938,-0.4219,0.0162],[-0.5781,-0.4219,0.0181],[-0.5625,-0.4219,0.0157],[-0.5469,-0.4219,0.0123],[-0.5312,-0.4219,0.0127],[-0.5156,-0.4219,0.0132],[-0.5,-0.4219,0.0132],[-0.4844,-0.4219,0.0152],[-0.4688,-0.4219,0.0186],[-0.4531,-0.4219,0.026],[-0.4375,-0.4219,0.0333],[-0.4219,-0.4219,0.0397],[-0.4062,-0.4219,0.0475],[-0.3906,-0.4219,0.0554],[-0.375,-0.4219,0.0436],[-0.3594,-0.4219,0.0338],[-0.3438,-0.4219,0.0279],[-0.3281,-0.4219,0.0289],[-0.3125,-0.4219,0.0255],[-0.2969,-0.4219,0.0216],[-0.2812,-0.4219,0.0181],[-0.2656,-0.4219,0.0162],[-0.25,-0.4219,0.0152],[-0.2344,-0.4219,0.0167],[-0.2188,-0.4219,0.0142],[-0.2031,-0.4219,0.0172],[-0.1875,-0.4219,0.0245],[-0.1719,-0.4219,0.0314],[-0.1562,-0.4219,0.024],[-0.1406,-0.4219,0.0201],[-0.125,-0.4219,0.0221],[-0.1094,-0.4219,0.0216],[-0.0938,-0.4219,0.0216],[-0.0781,-0.4219,0.0279],[-0.0625,-0.4219,0.0245],[-0.0469,-0.4219,0.025],[-0.0312,-0.4219,0.0275],[-0.0156,-0.4219,0.0245],[0,-0.4219,0.0201],[0.0156,-0.4219,0.0196],[0.0312,-0.4219,0.0206],[0.0469,-0.4219,0.0196],[0.0625,-0.4219,0.0211],[0.0781,-0.4219,0.0245],[0.0938,-0.4219,0.0309],[0.1094,-0.4219,0.0373],[0.125,-0.4219,0.0387],[0.1406,-0.4219,0.0363],[0.1562,-0.4219,0.0451],[0.1719,-0.4219,0.0549],[0.1875,-0.4219,0.0466],[0.2031,-0.4219,0.0392],[0.2188,-0.4219,0.0593],[0.2344,-0.4219,0.0407],[0.25,-0.4219,0.0314],[0.2656,-0.4219,0.0294],[0.2812,-0.4219,0.0279],[0.2969,-0.4219,0.0338],[0.3125,-0.4219,0.0471],[0.3281,-0.4219,0.0328],[0.3438,-0.4219,0.0279],[0.3594,-0.4219,0.0304],[0.375,-0.4219,0.0181],[0.3906,-0.4219,0.0216],[0.4062,-0.4219,0.0211],[0.4219,-0.4219,0.0191],[0.4375,-0.4219,0.0157],[0.4531,-0.4219,0.0152],[0.4688,-0.4219,0.0186],[0.4844,-0.4219,0.0172],[0.5,-0.4219,0.0191],[0.5156,-0.4219,0.0191],[0.5312,-0.4219,0.0279],[0.5469,-0.4219,0.0191],[0.5625,-0.4219,0.0127],[0.5781,-0.4219,0.0108],[0.5938,-0.4219,0.0059],[0.6094,-0.4219,0.0015],[0.625,-0.4219,0.0029],[0.6406,-0.4219,0],[0.6562,-0.4219,0],[0.6719,-0.4219,0],[0.6875,-0.4219,0],[0.7031,-0.4219,0],[0.7188,-0.4219,0],[0.7344,-0.4219,0],[0.75,-0.4219,0],[0.7656,-0.4219,0],[0.7812,-0.4219,0],[0.7969,-0.4219,0],[0.8125,-0.4219,0],[0.8281,-0.4219,0],[0.8438,-0.4219,0],[0.8594,-0.4219,0],[0.875,-0.4219,0],[0.8906,-0.4219,0],[0.9062,-0.4219,0],[0.9219,-0.4219,0],[0.9375,-0.4219,0],[0.9531,-0.4219,0],[0.9688,-0.4219,0],[0.9844,-0.4219,0],[-1,-0.4062,0],[-0.9844,-0.4062,0],[-0.9688,-0.4062,0],[-0.9531,-0.4062,0],[-0.9375,-0.4062,0],[-0.9219,-0.4062,0],[-0.9062,-0.4062,0],[-0.8906,-0.4062,0],[-0.875,-0.4062,0.002],[-0.8594,-0.4062,0.0147],[-0.8438,-0.4062,0.0152],[-0.8281,-0.4062,0.0132],[-0.8125,-0.4062,0.0162],[-0.7969,-0.4062,0.0167],[-0.7812,-0.4062,0.0172],[-0.7656,-0.4062,0.0196],[-0.75,-0.4062,0.0255],[-0.7344,-0.4062,0.027],[-0.7188,-0.4062,0.0245],[-0.7031,-0.4062,0.0216],[-0.6875,-0.4062,0.0181],[-0.6719,-0.4062,0.0167],[-0.6562,-0.4062,0.0186],[-0.6406,-0.4062,0.024],[-0.625,-0.4062,0.0235],[-0.6094,-0.4062,0.0186],[-0.5938,-0.4062,0.0157],[-0.5781,-0.4062,0.0186],[-0.5625,-0.4062,0.0221],[-0.5469,-0.4062,0.0152],[-0.5312,-0.4062,0.0127],[-0.5156,-0.4062,0.0132],[-0.5,-0.4062,0.0132],[-0.4844,-0.4062,0.0137],[-0.4688,-0.4062,0.0157],[-0.4531,-0.4062,0.0186],[-0.4375,-0.4062,0.0225],[-0.4219,-0.4062,0.027],[-0.4062,-0.4062,0.0328],[-0.3906,-0.4062,0.0441],[-0.375,-0.4062,0.0436],[-0.3594,-0.4062,0.0353],[-0.3438,-0.4062,0.0275],[-0.3281,-0.4062,0.026],[-0.3125,-0.4062,0.0255],[-0.2969,-0.4062,0.023],[-0.2812,-0.4062,0.0176],[-0.2656,-0.4062,0.0157],[-0.25,-0.4062,0.0157],[-0.2344,-0.4062,0.0162],[-0.2188,-0.4062,0.0172],[-0.2031,-0.4062,0.0176],[-0.1875,-0.4062,0.0196],[-0.1719,-0.4062,0.0225],[-0.1562,-0.4062,0.025],[-0.1406,-0.4062,0.0225],[-0.125,-0.4062,0.0191],[-0.1094,-0.4062,0.0186],[-0.0938,-0.4062,0.0181],[-0.0781,-0.4062,0.0206],[-0.0625,-0.4062,0.0216],[-0.0469,-0.4062,0.023],[-0.0312,-0.4062,0.0255],[-0.0156,-0.4062,0.025],[0,-0.4062,0.0211],[0.0156,-0.4062,0.0206],[0.0312,-0.4062,0.0206],[0.0469,-0.4062,0.0206],[0.0625,-0.4062,0.0211],[0.0781,-0.4062,0.0225],[0.0938,-0.4062,0.0255],[0.1094,-0.4062,0.0299],[0.125,-0.4062,0.0294],[0.1406,-0.4062,0.0328],[0.1562,-0.4062,0.0402],[0.1719,-0.4062,0.0407],[0.1875,-0.4062,0.0377],[0.2031,-0.4062,0.0368],[0.2188,-0.4062,0.0417],[0.2344,-0.4062,0.0304],[0.25,-0.4062,0.0304],[0.2656,-0.4062,0.0275],[0.2812,-0.4062,0.025],[0.2969,-0.4062,0.026],[0.3125,-0.4062,0.0279],[0.3281,-0.4062,0.0294],[0.3438,-0.4062,0.024],[0.3594,-0.4062,0.0216],[0.375,-0.4062,0.0245],[0.3906,-0.4062,0.0279],[0.4062,-0.4062,0.0265],[0.4219,-0.4062,0.0211],[0.4375,-0.4062,0.0206],[0.4531,-0.4062,0.0186],[0.4688,-0.4062,0.0181],[0.4844,-0.4062,0.0206],[0.5,-0.4062,0.023],[0.5156,-0.4062,0.0196],[0.5312,-0.4062,0.0186],[0.5469,-0.4062,0.0167],[0.5625,-0.4062,0.0142],[0.5781,-0.4062,0.0088],[0.5938,-0.4062,0],[0.6094,-0.4062,0],[0.625,-0.4062,0],[0.6406,-0.4062,0],[0.6562,-0.4062,0],[0.6719,-0.4062,0],[0.6875,-0.4062,0],[0.7031,-0.4062,0],[0.7188,-0.4062,0],[0.7344,-0.4062,0],[0.75,-0.4062,0],[0.7656,-0.4062,0],[0.7812,-0.4062,0],[0.7969,-0.4062,0],[0.8125,-0.4062,0],[0.8281,-0.4062,0],[0.8438,-0.4062,0],[0.8594,-0.4062,0],[0.875,-0.4062,0],[0.8906,-0.4062,0],[0.9062,-0.4062,0],[0.9219,-0.4062,0],[0.9375,-0.4062,0],[0.9531,-0.4062,0],[0.9688,-0.4062,0],[0.9844,-0.4062,0],[-1,-0.3906,0],[-0.9844,-0.3906,0],[-0.9688,-0.3906,0],[-0.9531,-0.3906,0],[-0.9375,-0.3906,0],[-0.9219,-0.3906,0],[-0.9062,-0.3906,0],[-0.8906,-0.3906,0],[-0.875,-0.3906,0],[-0.8594,-0.3906,0.0098],[-0.8438,-0.3906,0.0147],[-0.8281,-0.3906,0.0191],[-0.8125,-0.3906,0.0216],[-0.7969,-0.3906,0.024],[-0.7812,-0.3906,0.024],[-0.7656,-0.3906,0.027],[-0.75,-0.3906,0.0319],[-0.7344,-0.3906,0.0402],[-0.7188,-0.3906,0.0387],[-0.7031,-0.3906,0.0304],[-0.6875,-0.3906,0.0186],[-0.6719,-0.3906,0.0196],[-0.6562,-0.3906,0.0284],[-0.6406,-0.3906,0.0441],[-0.625,-0.3906,0.0235],[-0.6094,-0.3906,0.0186],[-0.5938,-0.3906,0.0181],[-0.5781,-0.3906,0.0196],[-0.5625,-0.3906,0.0216],[-0.5469,-0.3906,0.0186],[-0.5312,-0.3906,0.0172],[-0.5156,-0.3906,0.0152],[-0.5,-0.3906,0.0152],[-0.4844,-0.3906,0.0142],[-0.4688,-0.3906,0.0152],[-0.4531,-0.3906,0.0186],[-0.4375,-0.3906,0.0216],[-0.4219,-0.3906,0.027],[-0.4062,-0.3906,0.0348],[-0.3906,-0.3906,0.0417],[-0.375,-0.3906,0.0382],[-0.3594,-0.3906,0.0294],[-0.3438,-0.3906,0.0255],[-0.3281,-0.3906,0.0275],[-0.3125,-0.3906,0.0299],[-0.2969,-0.3906,0.0245],[-0.2812,-0.3906,0.0181],[-0.2656,-0.3906,0.0176],[-0.25,-0.3906,0.0172],[-0.2344,-0.3906,0.0196],[-0.2188,-0.3906,0.025],[-0.2031,-0.3906,0.0201],[-0.1875,-0.3906,0.0201],[-0.1719,-0.3906,0.0216],[-0.1562,-0.3906,0.0211],[-0.1406,-0.3906,0.0196],[-0.125,-0.3906,0.0172],[-0.1094,-0.3906,0.0186],[-0.0938,-0.3906,0.0186],[-0.0781,-0.3906,0.0191],[-0.0625,-0.3906,0.0206],[-0.0469,-0.3906,0.0225],[-0.0312,-0.3906,0.0255],[-0.0156,-0.3906,0.026],[0,-0.3906,0.024],[0.0156,-0.3906,0.0221],[0.0312,-0.3906,0.0216],[0.0469,-0.3906,0.0225],[0.0625,-0.3906,0.0225],[0.0781,-0.3906,0.0221],[0.0938,-0.3906,0.023],[0.1094,-0.3906,0.0255],[0.125,-0.3906,0.0284],[0.1406,-0.3906,0.0284],[0.1562,-0.3906,0.0328],[0.1719,-0.3906,0.0358],[0.1875,-0.3906,0.0373],[0.2031,-0.3906,0.0363],[0.2188,-0.3906,0.0397],[0.2344,-0.3906,0.0299],[0.25,-0.3906,0.0279],[0.2656,-0.3906,0.0265],[0.2812,-0.3906,0.025],[0.2969,-0.3906,0.023],[0.3125,-0.3906,0.0225],[0.3281,-0.3906,0.023],[0.3438,-0.3906,0.0279],[0.3594,-0.3906,0.0446],[0.375,-0.3906,0.0466],[0.3906,-0.3906,0.0417],[0.4062,-0.3906,0.0294],[0.4219,-0.3906,0.0265],[0.4375,-0.3906,0.025],[0.4531,-0.3906,0.0216],[0.4688,-0.3906,0.0211],[0.4844,-0.3906,0.0225],[0.5,-0.3906,0.023],[0.5156,-0.3906,0.0172],[0.5312,-0.3906,0.0152],[0.5469,-0.3906,0.0157],[0.5625,-0.3906,0.0147],[0.5781,-0.3906,0.0059],[0.5938,-0.3906,0],[0.6094,-0.3906,0],[0.625,-0.3906,0],[0.6406,-0.3906,0],[0.6562,-0.3906,0],[0.6719,-0.3906,0],[0.6875,-0.3906,0],[0.7031,-0.3906,0],[0.7188,-0.3906,0],[0.7344,-0.3906,0],[0.75,-0.3906,0],[0.7656,-0.3906,0],[0.7812,-0.3906,0],[0.7969,-0.3906,0],[0.8125,-0.3906,0],[0.8281,-0.3906,0],[0.8438,-0.3906,0],[0.8594,-0.3906,0],[0.875,-0.3906,0],[0.8906,-0.3906,0],[0.9062,-0.3906,0],[0.9219,-0.3906,0],[0.9375,-0.3906,0],[0.9531,-0.3906,0],[0.9688,-0.3906,0],[0.9844,-0.3906,0],[-1,-0.375,0],[-0.9844,-0.375,0],[-0.9688,-0.375,0],[-0.9531,-0.375,0],[-0.9375,-0.375,0],[-0.9219,-0.375,0],[-0.9062,-0.375,0],[-0.8906,-0.375,0],[-0.875,-0.375,0],[-0.8594,-0.375,0],[-0.8438,-0.375,0.0132],[-0.8281,-0.375,0.025],[-0.8125,-0.375,0.0314],[-0.7969,-0.375,0.0373],[-0.7812,-0.375,0.0358],[-0.7656,-0.375,0.0397],[-0.75,-0.375,0.0338],[-0.7344,-0.375,0.0534],[-0.7188,-0.375,0.0618],[-0.7031,-0.375,0.0515],[-0.6875,-0.375,0.0289],[-0.6719,-0.375,0.023],[-0.6562,-0.375,0.0431],[-0.6406,-0.375,0.0686],[-0.625,-0.375,0.0363],[-0.6094,-0.375,0.0235],[-0.5938,-0.375,0.0201],[-0.5781,-0.375,0.0225],[-0.5625,-0.375,0.023],[-0.5469,-0.375,0.023],[-0.5312,-0.375,0.0235],[-0.5156,-0.375,0.0206],[-0.5,-0.375,0.0196],[-0.4844,-0.375,0.0186],[-0.4688,-0.375,0.0191],[-0.4531,-0.375,0.0216],[-0.4375,-0.375,0.0216],[-0.4219,-0.375,0.025],[-0.4062,-0.375,0.0319],[-0.3906,-0.375,0.0363],[-0.375,-0.375,0.0338],[-0.3594,-0.375,0.0284],[-0.3438,-0.375,0.0289],[-0.3281,-0.375,0.0373],[-0.3125,-0.375,0.0363],[-0.2969,-0.375,0.0328],[-0.2812,-0.375,0.025],[-0.2656,-0.375,0.0186],[-0.25,-0.375,0.0162],[-0.2344,-0.375,0.0225],[-0.2188,-0.375,0.0265],[-0.2031,-0.375,0.0206],[-0.1875,-0.375,0.0216],[-0.1719,-0.375,0.0196],[-0.1562,-0.375,0.0196],[-0.1406,-0.375,0.0181],[-0.125,-0.375,0.0196],[-0.1094,-0.375,0.0206],[-0.0938,-0.375,0.0196],[-0.0781,-0.375,0.0196],[-0.0625,-0.375,0.0196],[-0.0469,-0.375,0.0211],[-0.0312,-0.375,0.023],[-0.0156,-0.375,0.0235],[0,-0.375,0.0255],[0.0156,-0.375,0.0235],[0.0312,-0.375,0.0225],[0.0469,-0.375,0.0235],[0.0625,-0.375,0.0235],[0.0781,-0.375,0.023],[0.0938,-0.375,0.0225],[0.1094,-0.375,0.0235],[0.125,-0.375,0.0265],[0.1406,-0.375,0.0284],[0.1562,-0.375,0.0284],[0.1719,-0.375,0.0314],[0.1875,-0.375,0.0299],[0.2031,-0.375,0.0324],[0.2188,-0.375,0.0377],[0.2344,-0.375,0.0319],[0.25,-0.375,0.0284],[0.2656,-0.375,0.0265],[0.2812,-0.375,0.0245],[0.2969,-0.375,0.0211],[0.3125,-0.375,0.0216],[0.3281,-0.375,0.023],[0.3438,-0.375,0.0309],[0.3594,-0.375,0.0529],[0.375,-0.375,0.0804],[0.3906,-0.375,0.0672],[0.4062,-0.375,0.0426],[0.4219,-0.375,0.0377],[0.4375,-0.375,0.027],[0.4531,-0.375,0.0255],[0.4688,-0.375,0.027],[0.4844,-0.375,0.0235],[0.5,-0.375,0.0221],[0.5156,-0.375,0.0176],[0.5312,-0.375,0.0176],[0.5469,-0.375,0.0142],[0.5625,-0.375,0.0127],[0.5781,-0.375,0.0098],[0.5938,-0.375,0],[0.6094,-0.375,0],[0.625,-0.375,0],[0.6406,-0.375,0],[0.6562,-0.375,0],[0.6719,-0.375,0],[0.6875,-0.375,0],[0.7031,-0.375,0],[0.7188,-0.375,0],[0.7344,-0.375,0],[0.75,-0.375,0],[0.7656,-0.375,0],[0.7812,-0.375,0],[0.7969,-0.375,0],[0.8125,-0.375,0],[0.8281,-0.375,0],[0.8438,-0.375,0],[0.8594,-0.375,0],[0.875,-0.375,0],[0.8906,-0.375,0],[0.9062,-0.375,0],[0.9219,-0.375,0],[0.9375,-0.375,0],[0.9531,-0.375,0],[0.9688,-0.375,0],[0.9844,-0.375,0],[-1,-0.3594,0],[-0.9844,-0.3594,0],[-0.9688,-0.3594,0],[-0.9531,-0.3594,0],[-0.9375,-0.3594,0],[-0.9219,-0.3594,0],[-0.9062,-0.3594,0],[-0.8906,-0.3594,0],[-0.875,-0.3594,0],[-0.8594,-0.3594,0],[-0.8438,-0.3594,0.0221],[-0.8281,-0.3594,0.0363],[-0.8125,-0.3594,0.0431],[-0.7969,-0.3594,0.0505],[-0.7812,-0.3594,0.0544],[-0.7656,-0.3594,0.0529],[-0.75,-0.3594,0.0422],[-0.7344,-0.3594,0.0559],[-0.7188,-0.3594,0.0549],[-0.7031,-0.3594,0.0657],[-0.6875,-0.3594,0.0505],[-0.6719,-0.3594,0.025],[-0.6562,-0.3594,0.0348],[-0.6406,-0.3594,0.048],[-0.625,-0.3594,0.0436],[-0.6094,-0.3594,0.0309],[-0.5938,-0.3594,0.023],[-0.5781,-0.3594,0.024],[-0.5625,-0.3594,0.023],[-0.5469,-0.3594,0.0235],[-0.5312,-0.3594,0.024],[-0.5156,-0.3594,0.0235],[-0.5,-0.3594,0.0216],[-0.4844,-0.3594,0.0201],[-0.4688,-0.3594,0.0162],[-0.4531,-0.3594,0.0176],[-0.4375,-0.3594,0.0186],[-0.4219,-0.3594,0.023],[-0.4062,-0.3594,0.0304],[-0.3906,-0.3594,0.0299],[-0.375,-0.3594,0.0314],[-0.3594,-0.3594,0.0279],[-0.3438,-0.3594,0.0284],[-0.3281,-0.3594,0.0368],[-0.3125,-0.3594,0.0328],[-0.2969,-0.3594,0.0358],[-0.2812,-0.3594,0.0324],[-0.2656,-0.3594,0.0294],[-0.25,-0.3594,0.0265],[-0.2344,-0.3594,0.0279],[-0.2188,-0.3594,0.025],[-0.2031,-0.3594,0.0265],[-0.1875,-0.3594,0.0221],[-0.1719,-0.3594,0.0186],[-0.1562,-0.3594,0.0181],[-0.1406,-0.3594,0.0181],[-0.125,-0.3594,0.0206],[-0.1094,-0.3594,0.0206],[-0.0938,-0.3594,0.0211],[-0.0781,-0.3594,0.0206],[-0.0625,-0.3594,0.0196],[-0.0469,-0.3594,0.0206],[-0.0312,-0.3594,0.0221],[-0.0156,-0.3594,0.0235],[0,-0.3594,0.0216],[0.0156,-0.3594,0.0221],[0.0312,-0.3594,0.0225],[0.0469,-0.3594,0.0235],[0.0625,-0.3594,0.023],[0.0781,-0.3594,0.0245],[0.0938,-0.3594,0.023],[0.1094,-0.3594,0.0245],[0.125,-0.3594,0.027],[0.1406,-0.3594,0.026],[0.1562,-0.3594,0.0265],[0.1719,-0.3594,0.0275],[0.1875,-0.3594,0.0279],[0.2031,-0.3594,0.0265],[0.2188,-0.3594,0.0279],[0.2344,-0.3594,0.025],[0.25,-0.3594,0.0245],[0.2656,-0.3594,0.024],[0.2812,-0.3594,0.0225],[0.2969,-0.3594,0.0216],[0.3125,-0.3594,0.0235],[0.3281,-0.3594,0.0235],[0.3438,-0.3594,0.0245],[0.3594,-0.3594,0.0353],[0.375,-0.3594,0.0559],[0.3906,-0.3594,0.0471],[0.4062,-0.3594,0.0554],[0.4219,-0.3594,0.0662],[0.4375,-0.3594,0.0505],[0.4531,-0.3594,0.0333],[0.4688,-0.3594,0.0255],[0.4844,-0.3594,0.0245],[0.5,-0.3594,0.0211],[0.5156,-0.3594,0.0211],[0.5312,-0.3594,0.0176],[0.5469,-0.3594,0.0172],[0.5625,-0.3594,0.0137],[0.5781,-0.3594,0.0083],[0.5938,-0.3594,0.0044],[0.6094,-0.3594,0],[0.625,-0.3594,0],[0.6406,-0.3594,0],[0.6562,-0.3594,0],[0.6719,-0.3594,0],[0.6875,-0.3594,0],[0.7031,-0.3594,0],[0.7188,-0.3594,0],[0.7344,-0.3594,0],[0.75,-0.3594,0],[0.7656,-0.3594,0],[0.7812,-0.3594,0],[0.7969,-0.3594,0],[0.8125,-0.3594,0],[0.8281,-0.3594,0],[0.8438,-0.3594,0],[0.8594,-0.3594,0],[0.875,-0.3594,0],[0.8906,-0.3594,0],[0.9062,-0.3594,0],[0.9219,-0.3594,0],[0.9375,-0.3594,0],[0.9531,-0.3594,0],[0.9688,-0.3594,0],[0.9844,-0.3594,0],[-1,-0.3438,0],[-0.9844,-0.3438,0],[-0.9688,-0.3438,0],[-0.9531,-0.3438,0],[-0.9375,-0.3438,0],[-0.9219,-0.3438,0],[-0.9062,-0.3438,0],[-0.8906,-0.3438,0],[-0.875,-0.3438,0],[-0.8594,-0.3438,0],[-0.8438,-0.3438,0.0299],[-0.8281,-0.3438,0.0529],[-0.8125,-0.3438,0.0407],[-0.7969,-0.3438,0.0338],[-0.7812,-0.3438,0.025],[-0.7656,-0.3438,0.0279],[-0.75,-0.3438,0.0348],[-0.7344,-0.3438,0.0564],[-0.7188,-0.3438,0.0417],[-0.7031,-0.3438,0.0657],[-0.6875,-0.3438,0.0544],[-0.6719,-0.3438,0.0564],[-0.6562,-0.3438,0.0368],[-0.6406,-0.3438,0.0431],[-0.625,-0.3438,0.0505],[-0.6094,-0.3438,0.0368],[-0.5938,-0.3438,0.0319],[-0.5781,-0.3438,0.0324],[-0.5625,-0.3438,0.027],[-0.5469,-0.3438,0.0275],[-0.5312,-0.3438,0.0255],[-0.5156,-0.3438,0.0245],[-0.5,-0.3438,0.0265],[-0.4844,-0.3438,0.0265],[-0.4688,-0.3438,0.0186],[-0.4531,-0.3438,0.0167],[-0.4375,-0.3438,0.0167],[-0.4219,-0.3438,0.0172],[-0.4062,-0.3438,0.0181],[-0.3906,-0.3438,0.023],[-0.375,-0.3438,0.0289],[-0.3594,-0.3438,0.0284],[-0.3438,-0.3438,0.027],[-0.3281,-0.3438,0.0387],[-0.3125,-0.3438,0.0333],[-0.2969,-0.3438,0.0324],[-0.2812,-0.3438,0.0309],[-0.2656,-0.3438,0.0382],[-0.25,-0.3438,0.0387],[-0.2344,-0.3438,0.0343],[-0.2188,-0.3438,0.0309],[-0.2031,-0.3438,0.0304],[-0.1875,-0.3438,0.0235],[-0.1719,-0.3438,0.0201],[-0.1562,-0.3438,0.0196],[-0.1406,-0.3438,0.0206],[-0.125,-0.3438,0.0211],[-0.1094,-0.3438,0.0221],[-0.0938,-0.3438,0.0211],[-0.0781,-0.3438,0.0196],[-0.0625,-0.3438,0.0196],[-0.0469,-0.3438,0.0201],[-0.0312,-0.3438,0.0216],[-0.0156,-0.3438,0.0225],[0,-0.3438,0.0216],[0.0156,-0.3438,0.0225],[0.0312,-0.3438,0.023],[0.0469,-0.3438,0.0235],[0.0625,-0.3438,0.0225],[0.0781,-0.3438,0.024],[0.0938,-0.3438,0.024],[0.1094,-0.3438,0.0255],[0.125,-0.3438,0.0255],[0.1406,-0.3438,0.0235],[0.1562,-0.3438,0.0225],[0.1719,-0.3438,0.025],[0.1875,-0.3438,0.027],[0.2031,-0.3438,0.0235],[0.2188,-0.3438,0.0221],[0.2344,-0.3438,0.023],[0.25,-0.3438,0.0211],[0.2656,-0.3438,0.0221],[0.2812,-0.3438,0.0221],[0.2969,-0.3438,0.0235],[0.3125,-0.3438,0.0299],[0.3281,-0.3438,0.0275],[0.3438,-0.3438,0.0255],[0.3594,-0.3438,0.024],[0.375,-0.3438,0.0289],[0.3906,-0.3438,0.025],[0.4062,-0.3438,0.0221],[0.4219,-0.3438,0.0265],[0.4375,-0.3438,0.0422],[0.4531,-0.3438,0.0314],[0.4688,-0.3438,0.023],[0.4844,-0.3438,0.026],[0.5,-0.3438,0.024],[0.5156,-0.3438,0.0196],[0.5312,-0.3438,0.0181],[0.5469,-0.3438,0.0181],[0.5625,-0.3438,0.0167],[0.5781,-0.3438,0.0147],[0.5938,-0.3438,0.0132],[0.6094,-0.3438,0.002],[0.625,-0.3438,0],[0.6406,-0.3438,0],[0.6562,-0.3438,0],[0.6719,-0.3438,0],[0.6875,-0.3438,0],[0.7031,-0.3438,0],[0.7188,-0.3438,0],[0.7344,-0.3438,0],[0.75,-0.3438,0],[0.7656,-0.3438,0],[0.7812,-0.3438,0],[0.7969,-0.3438,0],[0.8125,-0.3438,0],[0.8281,-0.3438,0],[0.8438,-0.3438,0],[0.8594,-0.3438,0],[0.875,-0.3438,0],[0.8906,-0.3438,0],[0.9062,-0.3438,0],[0.9219,-0.3438,0],[0.9375,-0.3438,0],[0.9531,-0.3438,0],[0.9688,-0.3438,0],[0.9844,-0.3438,0],[-1,-0.3281,0],[-0.9844,-0.3281,0],[-0.9688,-0.3281,0],[-0.9531,-0.3281,0],[-0.9375,-0.3281,0],[-0.9219,-0.3281,0],[-0.9062,-0.3281,0],[-0.8906,-0.3281,0.0074],[-0.875,-0.3281,0.0093],[-0.8594,-0.3281,0.0034],[-0.8438,-0.3281,0.0108],[-0.8281,-0.3281,0.0387],[-0.8125,-0.3281,0.0294],[-0.7969,-0.3281,0.0137],[-0.7812,-0.3281,0.0181],[-0.7656,-0.3281,0.0235],[-0.75,-0.3281,0.0196],[-0.7344,-0.3281,0.023],[-0.7188,-0.3281,0.0412],[-0.7031,-0.3281,0.0574],[-0.6875,-0.3281,0.0765],[-0.6719,-0.3281,0.0623],[-0.6562,-0.3281,0.0647],[-0.6406,-0.3281,0.0446],[-0.625,-0.3281,0.0436],[-0.6094,-0.3281,0.0373],[-0.5938,-0.3281,0.0392],[-0.5781,-0.3281,0.0373],[-0.5625,-0.3281,0.0368],[-0.5469,-0.3281,0.0377],[-0.5312,-0.3281,0.0309],[-0.5156,-0.3281,0.027],[-0.5,-0.3281,0.0279],[-0.4844,-0.3281,0.025],[-0.4688,-0.3281,0.0176],[-0.4531,-0.3281,0.0181],[-0.4375,-0.3281,0.0181],[-0.4219,-0.3281,0.0186],[-0.4062,-0.3281,0.0206],[-0.3906,-0.3281,0.0304],[-0.375,-0.3281,0.0314],[-0.3594,-0.3281,0.026],[-0.3438,-0.3281,0.0245],[-0.3281,-0.3281,0.0368],[-0.3125,-0.3281,0.0304],[-0.2969,-0.3281,0.0284],[-0.2812,-0.3281,0.0275],[-0.2656,-0.3281,0.0368],[-0.25,-0.3281,0.0397],[-0.2344,-0.3281,0.0397],[-0.2188,-0.3281,0.0333],[-0.2031,-0.3281,0.0275],[-0.1875,-0.3281,0.0255],[-0.1719,-0.3281,0.0235],[-0.1562,-0.3281,0.023],[-0.1406,-0.3281,0.023],[-0.125,-0.3281,0.0216],[-0.1094,-0.3281,0.0211],[-0.0938,-0.3281,0.0206],[-0.0781,-0.3281,0.0206],[-0.0625,-0.3281,0.0196],[-0.0469,-0.3281,0.0201],[-0.0312,-0.3281,0.0206],[-0.0156,-0.3281,0.0211],[0,-0.3281,0.0221],[0.0156,-0.3281,0.024],[0.0312,-0.3281,0.0235],[0.0469,-0.3281,0.023],[0.0625,-0.3281,0.0221],[0.0781,-0.3281,0.0221],[0.0938,-0.3281,0.0284],[0.1094,-0.3281,0.0289],[0.125,-0.3281,0.024],[0.1406,-0.3281,0.0216],[0.1562,-0.3281,0.0206],[0.1719,-0.3281,0.0211],[0.1875,-0.3281,0.0221],[0.2031,-0.3281,0.0206],[0.2188,-0.3281,0.0206],[0.2344,-0.3281,0.0201],[0.25,-0.3281,0.0186],[0.2656,-0.3281,0.0186],[0.2812,-0.3281,0.0186],[0.2969,-0.3281,0.0191],[0.3125,-0.3281,0.0225],[0.3281,-0.3281,0.0265],[0.3438,-0.3281,0.0255],[0.3594,-0.3281,0.0255],[0.375,-0.3281,0.023],[0.3906,-0.3281,0.0191],[0.4062,-0.3281,0.0186],[0.4219,-0.3281,0.0196],[0.4375,-0.3281,0.0196],[0.4531,-0.3281,0.0206],[0.4688,-0.3281,0.0172],[0.4844,-0.3281,0.0181],[0.5,-0.3281,0.0245],[0.5156,-0.3281,0.027],[0.5312,-0.3281,0.0176],[0.5469,-0.3281,0.0181],[0.5625,-0.3281,0.0186],[0.5781,-0.3281,0.0088],[0.5938,-0.3281,0.0044],[0.6094,-0.3281,0.0059],[0.625,-0.3281,0.0015],[0.6406,-0.3281,0],[0.6562,-0.3281,0],[0.6719,-0.3281,0],[0.6875,-0.3281,0],[0.7031,-0.3281,0],[0.7188,-0.3281,0],[0.7344,-0.3281,0],[0.75,-0.3281,0],[0.7656,-0.3281,0],[0.7812,-0.3281,0],[0.7969,-0.3281,0],[0.8125,-0.3281,0],[0.8281,-0.3281,0],[0.8438,-0.3281,0],[0.8594,-0.3281,0],[0.875,-0.3281,0],[0.8906,-0.3281,0],[0.9062,-0.3281,0],[0.9219,-0.3281,0],[0.9375,-0.3281,0],[0.9531,-0.3281,0],[0.9688,-0.3281,0],[0.9844,-0.3281,0],[-1,-0.3125,0],[-0.9844,-0.3125,0],[-0.9688,-0.3125,0],[-0.9531,-0.3125,0],[-0.9375,-0.3125,0],[-0.9219,-0.3125,0],[-0.9062,-0.3125,0],[-0.8906,-0.3125,0.0289],[-0.875,-0.3125,0.0353],[-0.8594,-0.3125,0.0049],[-0.8438,-0.3125,0.0049],[-0.8281,-0.3125,0.0083],[-0.8125,-0.3125,0.0108],[-0.7969,-0.3125,0.0118],[-0.7812,-0.3125,0.0191],[-0.7656,-0.3125,0.0328],[-0.75,-0.3125,0.0284],[-0.7344,-0.3125,0.0255],[-0.7188,-0.3125,0.0294],[-0.7031,-0.3125,0.051],[-0.6875,-0.3125,0.0755],[-0.6719,-0.3125,0.0569],[-0.6562,-0.3125,0.0691],[-0.6406,-0.3125,0.0534],[-0.625,-0.3125,0.0377],[-0.6094,-0.3125,0.0358],[-0.5938,-0.3125,0.0422],[-0.5781,-0.3125,0.0426],[-0.5625,-0.3125,0.0387],[-0.5469,-0.3125,0.0471],[-0.5312,-0.3125,0.0382],[-0.5156,-0.3125,0.0304],[-0.5,-0.3125,0.0304],[-0.4844,-0.3125,0.0191],[-0.4688,-0.3125,0.0196],[-0.4531,-0.3125,0.0211],[-0.4375,-0.3125,0.0221],[-0.4219,-0.3125,0.0221],[-0.4062,-0.3125,0.0206],[-0.3906,-0.3125,0.0294],[-0.375,-0.3125,0.0333],[-0.3594,-0.3125,0.0275],[-0.3438,-0.3125,0.0245],[-0.3281,-0.3125,0.027],[-0.3125,-0.3125,0.0294],[-0.2969,-0.3125,0.026],[-0.2812,-0.3125,0.0289],[-0.2656,-0.3125,0.0348],[-0.25,-0.3125,0.0338],[-0.2344,-0.3125,0.0333],[-0.2188,-0.3125,0.0299],[-0.2031,-0.3125,0.0284],[-0.1875,-0.3125,0.0279],[-0.1719,-0.3125,0.025],[-0.1562,-0.3125,0.025],[-0.1406,-0.3125,0.024],[-0.125,-0.3125,0.0225],[-0.1094,-0.3125,0.0225],[-0.0938,-0.3125,0.0216],[-0.0781,-0.3125,0.0211],[-0.0625,-0.3125,0.0206],[-0.0469,-0.3125,0.0211],[-0.0312,-0.3125,0.0211],[-0.0156,-0.3125,0.0211],[0,-0.3125,0.0225],[0.0156,-0.3125,0.024],[0.0312,-0.3125,0.0225],[0.0469,-0.3125,0.0216],[0.0625,-0.3125,0.0211],[0.0781,-0.3125,0.0216],[0.0938,-0.3125,0.023],[0.1094,-0.3125,0.0255],[0.125,-0.3125,0.023],[0.1406,-0.3125,0.0221],[0.1562,-0.3125,0.0201],[0.1719,-0.3125,0.0196],[0.1875,-0.3125,0.0196],[0.2031,-0.3125,0.0196],[0.2188,-0.3125,0.0196],[0.2344,-0.3125,0.0196],[0.25,-0.3125,0.0191],[0.2656,-0.3125,0.0196],[0.2812,-0.3125,0.0235],[0.2969,-0.3125,0.026],[0.3125,-0.3125,0.0186],[0.3281,-0.3125,0.0181],[0.3438,-0.3125,0.0176],[0.3594,-0.3125,0.0176],[0.375,-0.3125,0.0186],[0.3906,-0.3125,0.0211],[0.4062,-0.3125,0.0289],[0.4219,-0.3125,0.0284],[0.4375,-0.3125,0.0544],[0.4531,-0.3125,0.0324],[0.4688,-0.3125,0.0162],[0.4844,-0.3125,0.0172],[0.5,-0.3125,0.0142],[0.5156,-0.3125,0.0176],[0.5312,-0.3125,0.0137],[0.5469,-0.3125,0.0132],[0.5625,-0.3125,0.0152],[0.5781,-0.3125,0.0103],[0.5938,-0.3125,0.0132],[0.6094,-0.3125,0.0044],[0.625,-0.3125,0],[0.6406,-0.3125,0],[0.6562,-0.3125,0],[0.6719,-0.3125,0],[0.6875,-0.3125,0],[0.7031,-0.3125,0],[0.7188,-0.3125,0],[0.7344,-0.3125,0],[0.75,-0.3125,0],[0.7656,-0.3125,0],[0.7812,-0.3125,0],[0.7969,-0.3125,0],[0.8125,-0.3125,0],[0.8281,-0.3125,0],[0.8438,-0.3125,0],[0.8594,-0.3125,0],[0.875,-0.3125,0],[0.8906,-0.3125,0],[0.9062,-0.3125,0],[0.9219,-0.3125,0],[0.9375,-0.3125,0],[0.9531,-0.3125,0],[0.9688,-0.3125,0],[0.9844,-0.3125,0],[-1,-0.2969,0],[-0.9844,-0.2969,0],[-0.9688,-0.2969,0],[-0.9531,-0.2969,0],[-0.9375,-0.2969,0],[-0.9219,-0.2969,0],[-0.9062,-0.2969,0.0025],[-0.8906,-0.2969,0.0324],[-0.875,-0.2969,0.0446],[-0.8594,-0.2969,0.0137],[-0.8438,-0.2969,0],[-0.8281,-0.2969,0],[-0.8125,-0.2969,0.0039],[-0.7969,-0.2969,0.0088],[-0.7812,-0.2969,0.023],[-0.7656,-0.2969,0.0426],[-0.75,-0.2969,0.0441],[-0.7344,-0.2969,0.0363],[-0.7188,-0.2969,0.0348],[-0.7031,-0.2969,0.0461],[-0.6875,-0.2969,0.0691],[-0.6719,-0.2969,0.0569],[-0.6562,-0.2969,0.0564],[-0.6406,-0.2969,0.0505],[-0.625,-0.2969,0.0392],[-0.6094,-0.2969,0.0368],[-0.5938,-0.2969,0.0397],[-0.5781,-0.2969,0.0377],[-0.5625,-0.2969,0.0363],[-0.5469,-0.2969,0.0422],[-0.5312,-0.2969,0.0422],[-0.5156,-0.2969,0.0328],[-0.5,-0.2969,0.0225],[-0.4844,-0.2969,0.0206],[-0.4688,-0.2969,0.0284],[-0.4531,-0.2969,0.0279],[-0.4375,-0.2969,0.025],[-0.4219,-0.2969,0.0221],[-0.4062,-0.2969,0.0206],[-0.3906,-0.2969,0.026],[-0.375,-0.2969,0.0353],[-0.3594,-0.2969,0.0279],[-0.3438,-0.2969,0.0245],[-0.3281,-0.2969,0.0255],[-0.3125,-0.2969,0.0275],[-0.2969,-0.2969,0.025],[-0.2812,-0.2969,0.0289],[-0.2656,-0.2969,0.0353],[-0.25,-0.2969,0.0319],[-0.2344,-0.2969,0.0338],[-0.2188,-0.2969,0.0314],[-0.2031,-0.2969,0.0275],[-0.1875,-0.2969,0.0255],[-0.1719,-0.2969,0.027],[-0.1562,-0.2969,0.0284],[-0.1406,-0.2969,0.0265],[-0.125,-0.2969,0.0245],[-0.1094,-0.2969,0.024],[-0.0938,-0.2969,0.0216],[-0.0781,-0.2969,0.0216],[-0.0625,-0.2969,0.0211],[-0.0469,-0.2969,0.0211],[-0.0312,-0.2969,0.0216],[-0.0156,-0.2969,0.0211],[0,-0.2969,0.0216],[0.0156,-0.2969,0.0221],[0.0312,-0.2969,0.0216],[0.0469,-0.2969,0.0211],[0.0625,-0.2969,0.0211],[0.0781,-0.2969,0.0211],[0.0938,-0.2969,0.0206],[0.1094,-0.2969,0.0211],[0.125,-0.2969,0.0211],[0.1406,-0.2969,0.0216],[0.1562,-0.2969,0.0191],[0.1719,-0.2969,0.0186],[0.1875,-0.2969,0.0196],[0.2031,-0.2969,0.0201],[0.2188,-0.2969,0.0216],[0.2344,-0.2969,0.0221],[0.25,-0.2969,0.0289],[0.2656,-0.2969,0.0363],[0.2812,-0.2969,0.0549],[0.2969,-0.2969,0.052],[0.3125,-0.2969,0.0377],[0.3281,-0.2969,0.0324],[0.3438,-0.2969,0.025],[0.3594,-0.2969,0.0186],[0.375,-0.2969,0.0186],[0.3906,-0.2969,0.0211],[0.4062,-0.2969,0.0436],[0.4219,-0.2969,0.0422],[0.4375,-0.2969,0.0348],[0.4531,-0.2969,0.0245],[0.4688,-0.2969,0.0235],[0.4844,-0.2969,0.0299],[0.5,-0.2969,0.0235],[0.5156,-0.2969,0.0225],[0.5312,-0.2969,0.0186],[0.5469,-0.2969,0.0162],[0.5625,-0.2969,0.0152],[0.5781,-0.2969,0.0167],[0.5938,-0.2969,0.0186],[0.6094,-0.2969,0.0147],[0.625,-0.2969,0],[0.6406,-0.2969,0],[0.6562,-0.2969,0],[0.6719,-0.2969,0],[0.6875,-0.2969,0],[0.7031,-0.2969,0],[0.7188,-0.2969,0],[0.7344,-0.2969,0],[0.75,-0.2969,0],[0.7656,-0.2969,0],[0.7812,-0.2969,0],[0.7969,-0.2969,0],[0.8125,-0.2969,0],[0.8281,-0.2969,0],[0.8438,-0.2969,0],[0.8594,-0.2969,0],[0.875,-0.2969,0],[0.8906,-0.2969,0],[0.9062,-0.2969,0],[0.9219,-0.2969,0],[0.9375,-0.2969,0],[0.9531,-0.2969,0],[0.9688,-0.2969,0],[0.9844,-0.2969,0],[-1,-0.2812,0],[-0.9844,-0.2812,0],[-0.9688,-0.2812,0],[-0.9531,-0.2812,0],[-0.9375,-0.2812,0],[-0.9219,-0.2812,0],[-0.9062,-0.2812,0.0093],[-0.8906,-0.2812,0.026],[-0.875,-0.2812,0.0324],[-0.8594,-0.2812,0.0289],[-0.8438,-0.2812,0.0025],[-0.8281,-0.2812,0],[-0.8125,-0.2812,0],[-0.7969,-0.2812,0.0015],[-0.7812,-0.2812,0.0265],[-0.7656,-0.2812,0.051],[-0.75,-0.2812,0.0451],[-0.7344,-0.2812,0.0373],[-0.7188,-0.2812,0.0338],[-0.7031,-0.2812,0.0373],[-0.6875,-0.2812,0.0623],[-0.6719,-0.2812,0.0632],[-0.6562,-0.2812,0.05],[-0.6406,-0.2812,0.0431],[-0.625,-0.2812,0.0441],[-0.6094,-0.2812,0.0358],[-0.5938,-0.2812,0.0407],[-0.5781,-0.2812,0.0319],[-0.5625,-0.2812,0.0294],[-0.5469,-0.2812,0.0353],[-0.5312,-0.2812,0.0446],[-0.5156,-0.2812,0.0363],[-0.5,-0.2812,0.0206],[-0.4844,-0.2812,0.024],[-0.4688,-0.2812,0.0377],[-0.4531,-0.2812,0.0397],[-0.4375,-0.2812,0.0319],[-0.4219,-0.2812,0.023],[-0.4062,-0.2812,0.0211],[-0.3906,-0.2812,0.0225],[-0.375,-0.2812,0.0319],[-0.3594,-0.2812,0.0279],[-0.3438,-0.2812,0.0255],[-0.3281,-0.2812,0.0235],[-0.3125,-0.2812,0.023],[-0.2969,-0.2812,0.0309],[-0.2812,-0.2812,0.0368],[-0.2656,-0.2812,0.0377],[-0.25,-0.2812,0.0353],[-0.2344,-0.2812,0.0279],[-0.2188,-0.2812,0.0284],[-0.2031,-0.2812,0.024],[-0.1875,-0.2812,0.0279],[-0.1719,-0.2812,0.0309],[-0.1562,-0.2812,0.0319],[-0.1406,-0.2812,0.0294],[-0.125,-0.2812,0.026],[-0.1094,-0.2812,0.0235],[-0.0938,-0.2812,0.023],[-0.0781,-0.2812,0.0225],[-0.0625,-0.2812,0.0221],[-0.0469,-0.2812,0.0211],[-0.0312,-0.2812,0.0211],[-0.0156,-0.2812,0.0221],[0,-0.2812,0.0216],[0.0156,-0.2812,0.0211],[0.0312,-0.2812,0.0216],[0.0469,-0.2812,0.0221],[0.0625,-0.2812,0.0211],[0.0781,-0.2812,0.0211],[0.0938,-0.2812,0.0201],[0.1094,-0.2812,0.0196],[0.125,-0.2812,0.0201],[0.1406,-0.2812,0.0206],[0.1562,-0.2812,0.0201],[0.1719,-0.2812,0.0191],[0.1875,-0.2812,0.0216],[0.2031,-0.2812,0.0245],[0.2188,-0.2812,0.0275],[0.2344,-0.2812,0.0338],[0.25,-0.2812,0.0426],[0.2656,-0.2812,0.0407],[0.2812,-0.2812,0.051],[0.2969,-0.2812,0.048],[0.3125,-0.2812,0.0471],[0.3281,-0.2812,0.051],[0.3438,-0.2812,0.0373],[0.3594,-0.2812,0.027],[0.375,-0.2812,0.0201],[0.3906,-0.2812,0.0216],[0.4062,-0.2812,0.0279],[0.4219,-0.2812,0.0304],[0.4375,-0.2812,0.0206],[0.4531,-0.2812,0.0328],[0.4688,-0.2812,0.0333],[0.4844,-0.2812,0.0338],[0.5,-0.2812,0.0353],[0.5156,-0.2812,0.0275],[0.5312,-0.2812,0.0201],[0.5469,-0.2812,0.0172],[0.5625,-0.2812,0.0142],[0.5781,-0.2812,0.0162],[0.5938,-0.2812,0.0127],[0.6094,-0.2812,0.0127],[0.625,-0.2812,0.001],[0.6406,-0.2812,0],[0.6562,-0.2812,0],[0.6719,-0.2812,0],[0.6875,-0.2812,0],[0.7031,-0.2812,0],[0.7188,-0.2812,0],[0.7344,-0.2812,0],[0.75,-0.2812,0],[0.7656,-0.2812,0],[0.7812,-0.2812,0],[0.7969,-0.2812,0],[0.8125,-0.2812,0],[0.8281,-0.2812,0],[0.8438,-0.2812,0],[0.8594,-0.2812,0],[0.875,-0.2812,0],[0.8906,-0.2812,0],[0.9062,-0.2812,0],[0.9219,-0.2812,0],[0.9375,-0.2812,0],[0.9531,-0.2812,0],[0.9688,-0.2812,0],[0.9844,-0.2812,0],[-1,-0.2656,0],[-0.9844,-0.2656,0],[-0.9688,-0.2656,0],[-0.9531,-0.2656,0],[-0.9375,-0.2656,0],[-0.9219,-0.2656,0.001],[-0.9062,-0.2656,0.0157],[-0.8906,-0.2656,0.0206],[-0.875,-0.2656,0.0314],[-0.8594,-0.2656,0.0412],[-0.8438,-0.2656,0.0167],[-0.8281,-0.2656,0],[-0.8125,-0.2656,0],[-0.7969,-0.2656,0.0025],[-0.7812,-0.2656,0.0245],[-0.7656,-0.2656,0.0363],[-0.75,-0.2656,0.0348],[-0.7344,-0.2656,0.0382],[-0.7188,-0.2656,0.0284],[-0.7031,-0.2656,0.0373],[-0.6875,-0.2656,0.0583],[-0.6719,-0.2656,0.0735],[-0.6562,-0.2656,0.0446],[-0.6406,-0.2656,0.0451],[-0.625,-0.2656,0.0392],[-0.6094,-0.2656,0.0392],[-0.5938,-0.2656,0.0373],[-0.5781,-0.2656,0.0309],[-0.5625,-0.2656,0.0279],[-0.5469,-0.2656,0.0314],[-0.5312,-0.2656,0.0382],[-0.5156,-0.2656,0.0368],[-0.5,-0.2656,0.0255],[-0.4844,-0.2656,0.0235],[-0.4688,-0.2656,0.0368],[-0.4531,-0.2656,0.0549],[-0.4375,-0.2656,0.0441],[-0.4219,-0.2656,0.026],[-0.4062,-0.2656,0.0216],[-0.3906,-0.2656,0.0201],[-0.375,-0.2656,0.0235],[-0.3594,-0.2656,0.0275],[-0.3438,-0.2656,0.026],[-0.3281,-0.2656,0.0245],[-0.3125,-0.2656,0.0221],[-0.2969,-0.2656,0.0319],[-0.2812,-0.2656,0.0392],[-0.2656,-0.2656,0.0358],[-0.25,-0.2656,0.0343],[-0.2344,-0.2656,0.0289],[-0.2188,-0.2656,0.0299],[-0.2031,-0.2656,0.0265],[-0.1875,-0.2656,0.0279],[-0.1719,-0.2656,0.0279],[-0.1562,-0.2656,0.0328],[-0.1406,-0.2656,0.0309],[-0.125,-0.2656,0.0265],[-0.1094,-0.2656,0.024],[-0.0938,-0.2656,0.023],[-0.0781,-0.2656,0.023],[-0.0625,-0.2656,0.0255],[-0.0469,-0.2656,0.0235],[-0.0312,-0.2656,0.0225],[-0.0156,-0.2656,0.0225],[0,-0.2656,0.0221],[0.0156,-0.2656,0.0221],[0.0312,-0.2656,0.0225],[0.0469,-0.2656,0.0221],[0.0625,-0.2656,0.0211],[0.0781,-0.2656,0.0211],[0.0938,-0.2656,0.0206],[0.1094,-0.2656,0.0206],[0.125,-0.2656,0.0211],[0.1406,-0.2656,0.0225],[0.1562,-0.2656,0.0211],[0.1719,-0.2656,0.0216],[0.1875,-0.2656,0.024],[0.2031,-0.2656,0.0348],[0.2188,-0.2656,0.0333],[0.2344,-0.2656,0.0485],[0.25,-0.2656,0.0446],[0.2656,-0.2656,0.0358],[0.2812,-0.2656,0.0426],[0.2969,-0.2656,0.0431],[0.3125,-0.2656,0.0446],[0.3281,-0.2656,0.0515],[0.3438,-0.2656,0.0402],[0.3594,-0.2656,0.027],[0.375,-0.2656,0.0211],[0.3906,-0.2656,0.0206],[0.4062,-0.2656,0.0206],[0.4219,-0.2656,0.0176],[0.4375,-0.2656,0.023],[0.4531,-0.2656,0.0324],[0.4688,-0.2656,0.0382],[0.4844,-0.2656,0.0392],[0.5,-0.2656,0.0309],[0.5156,-0.2656,0.026],[0.5312,-0.2656,0.0142],[0.5469,-0.2656,0.0147],[0.5625,-0.2656,0.0142],[0.5781,-0.2656,0.0147],[0.5938,-0.2656,0.0152],[0.6094,-0.2656,0.0034],[0.625,-0.2656,0],[0.6406,-0.2656,0],[0.6562,-0.2656,0],[0.6719,-0.2656,0],[0.6875,-0.2656,0],[0.7031,-0.2656,0],[0.7188,-0.2656,0],[0.7344,-0.2656,0],[0.75,-0.2656,0],[0.7656,-0.2656,0],[0.7812,-0.2656,0],[0.7969,-0.2656,0],[0.8125,-0.2656,0],[0.8281,-0.2656,0],[0.8438,-0.2656,0],[0.8594,-0.2656,0],[0.875,-0.2656,0],[0.8906,-0.2656,0],[0.9062,-0.2656,0],[0.9219,-0.2656,0],[0.9375,-0.2656,0],[0.9531,-0.2656,0],[0.9688,-0.2656,0],[0.9844,-0.2656,0],[-1,-0.25,0],[-0.9844,-0.25,0],[-0.9688,-0.25,0],[-0.9531,-0.25,0],[-0.9375,-0.25,0.0191],[-0.9219,-0.25,0.0255],[-0.9062,-0.25,0.0147],[-0.8906,-0.25,0.0191],[-0.875,-0.25,0.0382],[-0.8594,-0.25,0.0446],[-0.8438,-0.25,0.0358],[-0.8281,-0.25,0.0108],[-0.8125,-0.25,0.0005],[-0.7969,-0.25,0.0064],[-0.7812,-0.25,0.0157],[-0.7656,-0.25,0.0275],[-0.75,-0.25,0.0324],[-0.7344,-0.25,0.0289],[-0.7188,-0.25,0.0324],[-0.7031,-0.25,0.0387],[-0.6875,-0.25,0.0431],[-0.6719,-0.25,0.0647],[-0.6562,-0.25,0.0426],[-0.6406,-0.25,0.0412],[-0.625,-0.25,0.0417],[-0.6094,-0.25,0.0598],[-0.5938,-0.25,0.0417],[-0.5781,-0.25,0.0275],[-0.5625,-0.25,0.0255],[-0.5469,-0.25,0.0284],[-0.5312,-0.25,0.0294],[-0.5156,-0.25,0.0294],[-0.5,-0.25,0.0309],[-0.4844,-0.25,0.0225],[-0.4688,-0.25,0.0368],[-0.4531,-0.25,0.0598],[-0.4375,-0.25,0.0505],[-0.4219,-0.25,0.0319],[-0.4062,-0.25,0.024],[-0.3906,-0.25,0.0211],[-0.375,-0.25,0.0191],[-0.3594,-0.25,0.0284],[-0.3438,-0.25,0.0289],[-0.3281,-0.25,0.024],[-0.3125,-0.25,0.0216],[-0.2969,-0.25,0.0255],[-0.2812,-0.25,0.0289],[-0.2656,-0.25,0.0319],[-0.25,-0.25,0.0353],[-0.2344,-0.25,0.0284],[-0.2188,-0.25,0.0319],[-0.2031,-0.25,0.0265],[-0.1875,-0.25,0.025],[-0.1719,-0.25,0.025],[-0.1562,-0.25,0.0284],[-0.1406,-0.25,0.0309],[-0.125,-0.25,0.0265],[-0.1094,-0.25,0.025],[-0.0938,-0.25,0.025],[-0.0781,-0.25,0.026],[-0.0625,-0.25,0.0255],[-0.0469,-0.25,0.025],[-0.0312,-0.25,0.0245],[-0.0156,-0.25,0.0225],[0,-0.25,0.0221],[0.0156,-0.25,0.0221],[0.0312,-0.25,0.023],[0.0469,-0.25,0.0216],[0.0625,-0.25,0.0211],[0.0781,-0.25,0.0216],[0.0938,-0.25,0.0211],[0.1094,-0.25,0.0206],[0.125,-0.25,0.0216],[0.1406,-0.25,0.0225],[0.1562,-0.25,0.023],[0.1719,-0.25,0.0279],[0.1875,-0.25,0.0304],[0.2031,-0.25,0.0255],[0.2188,-0.25,0.0368],[0.2344,-0.25,0.0495],[0.25,-0.25,0.0422],[0.2656,-0.25,0.0363],[0.2812,-0.25,0.0333],[0.2969,-0.25,0.0373],[0.3125,-0.25,0.0353],[0.3281,-0.25,0.0407],[0.3438,-0.25,0.025],[0.3594,-0.25,0.0206],[0.375,-0.25,0.0196],[0.3906,-0.25,0.0191],[0.4062,-0.25,0.0191],[0.4219,-0.25,0.0191],[0.4375,-0.25,0.0196],[0.4531,-0.25,0.0265],[0.4688,-0.25,0.0314],[0.4844,-0.25,0.0284],[0.5,-0.25,0.0255],[0.5156,-0.25,0.025],[0.5312,-0.25,0.0142],[0.5469,-0.25,0.0142],[0.5625,-0.25,0.0147],[0.5781,-0.25,0.0201],[0.5938,-0.25,0.0206],[0.6094,-0.25,0.0162],[0.625,-0.25,0],[0.6406,-0.25,0],[0.6562,-0.25,0],[0.6719,-0.25,0],[0.6875,-0.25,0],[0.7031,-0.25,0],[0.7188,-0.25,0],[0.7344,-0.25,0],[0.75,-0.25,0],[0.7656,-0.25,0],[0.7812,-0.25,0],[0.7969,-0.25,0],[0.8125,-0.25,0],[0.8281,-0.25,0],[0.8438,-0.25,0],[0.8594,-0.25,0],[0.875,-0.25,0],[0.8906,-0.25,0],[0.9062,-0.25,0],[0.9219,-0.25,0],[0.9375,-0.25,0],[0.9531,-0.25,0],[0.9688,-0.25,0],[0.9844,-0.25,0],[-1,-0.2344,0],[-0.9844,-0.2344,0.0015],[-0.9688,-0.2344,0.001],[-0.9531,-0.2344,0],[-0.9375,-0.2344,0.0294],[-0.9219,-0.2344,0.0294],[-0.9062,-0.2344,0.0123],[-0.8906,-0.2344,0.0167],[-0.875,-0.2344,0.0304],[-0.8594,-0.2344,0.0422],[-0.8438,-0.2344,0.0417],[-0.8281,-0.2344,0.0392],[-0.8125,-0.2344,0.0162],[-0.7969,-0.2344,0.0078],[-0.7812,-0.2344,0.0137],[-0.7656,-0.2344,0.0235],[-0.75,-0.2344,0.0211],[-0.7344,-0.2344,0.0377],[-0.7188,-0.2344,0.0358],[-0.7031,-0.2344,0.0363],[-0.6875,-0.2344,0.0387],[-0.6719,-0.2344,0.0471],[-0.6562,-0.2344,0.0348],[-0.6406,-0.2344,0.0314],[-0.625,-0.2344,0.048],[-0.6094,-0.2344,0.0603],[-0.5938,-0.2344,0.048],[-0.5781,-0.2344,0.0265],[-0.5625,-0.2344,0.024],[-0.5469,-0.2344,0.026],[-0.5312,-0.2344,0.0255],[-0.5156,-0.2344,0.0338],[-0.5,-0.2344,0.0353],[-0.4844,-0.2344,0.0284],[-0.4688,-0.2344,0.0309],[-0.4531,-0.2344,0.0426],[-0.4375,-0.2344,0.0456],[-0.4219,-0.2344,0.0446],[-0.4062,-0.2344,0.0289],[-0.3906,-0.2344,0.0221],[-0.375,-0.2344,0.0196],[-0.3594,-0.2344,0.0196],[-0.3438,-0.2344,0.025],[-0.3281,-0.2344,0.0255],[-0.3125,-0.2344,0.0216],[-0.2969,-0.2344,0.025],[-0.2812,-0.2344,0.025],[-0.2656,-0.2344,0.0284],[-0.25,-0.2344,0.0309],[-0.2344,-0.2344,0.0284],[-0.2188,-0.2344,0.0255],[-0.2031,-0.2344,0.0221],[-0.1875,-0.2344,0.0216],[-0.1719,-0.2344,0.0235],[-0.1562,-0.2344,0.0284],[-0.1406,-0.2344,0.0265],[-0.125,-0.2344,0.0265],[-0.1094,-0.2344,0.0255],[-0.0938,-0.2344,0.0255],[-0.0781,-0.2344,0.0275],[-0.0625,-0.2344,0.0255],[-0.0469,-0.2344,0.0245],[-0.0312,-0.2344,0.0245],[-0.0156,-0.2344,0.023],[0,-0.2344,0.0216],[0.0156,-0.2344,0.0221],[0.0312,-0.2344,0.0235],[0.0469,-0.2344,0.0221],[0.0625,-0.2344,0.0221],[0.0781,-0.2344,0.0225],[0.0938,-0.2344,0.0216],[0.1094,-0.2344,0.0216],[0.125,-0.2344,0.0211],[0.1406,-0.2344,0.0221],[0.1562,-0.2344,0.025],[0.1719,-0.2344,0.027],[0.1875,-0.2344,0.0314],[0.2031,-0.2344,0.0328],[0.2188,-0.2344,0.0402],[0.2344,-0.2344,0.0373],[0.25,-0.2344,0.0441],[0.2656,-0.2344,0.0466],[0.2812,-0.2344,0.0412],[0.2969,-0.2344,0.0402],[0.3125,-0.2344,0.0279],[0.3281,-0.2344,0.0284],[0.3438,-0.2344,0.0235],[0.3594,-0.2344,0.0186],[0.375,-0.2344,0.0201],[0.3906,-0.2344,0.0221],[0.4062,-0.2344,0.0196],[0.4219,-0.2344,0.0201],[0.4375,-0.2344,0.0225],[0.4531,-0.2344,0.023],[0.4688,-0.2344,0.0319],[0.4844,-0.2344,0.0314],[0.5,-0.2344,0.0377],[0.5156,-0.2344,0.025],[0.5312,-0.2344,0.0142],[0.5469,-0.2344,0.0137],[0.5625,-0.2344,0.0167],[0.5781,-0.2344,0.0186],[0.5938,-0.2344,0.0181],[0.6094,-0.2344,0.0162],[0.625,-0.2344,0.0005],[0.6406,-0.2344,0],[0.6562,-0.2344,0],[0.6719,-0.2344,0],[0.6875,-0.2344,0],[0.7031,-0.2344,0],[0.7188,-0.2344,0],[0.7344,-0.2344,0],[0.75,-0.2344,0],[0.7656,-0.2344,0],[0.7812,-0.2344,0],[0.7969,-0.2344,0],[0.8125,-0.2344,0],[0.8281,-0.2344,0],[0.8438,-0.2344,0],[0.8594,-0.2344,0],[0.875,-0.2344,0],[0.8906,-0.2344,0],[0.9062,-0.2344,0],[0.9219,-0.2344,0],[0.9375,-0.2344,0],[0.9531,-0.2344,0],[0.9688,-0.2344,0],[0.9844,-0.2344,0],[-1,-0.2188,0],[-0.9844,-0.2188,0],[-0.9688,-0.2188,0],[-0.9531,-0.2188,0.001],[-0.9375,-0.2188,0.026],[-0.9219,-0.2188,0.023],[-0.9062,-0.2188,0.0093],[-0.8906,-0.2188,0.0225],[-0.875,-0.2188,0.0373],[-0.8594,-0.2188,0.0441],[-0.8438,-0.2188,0.0368],[-0.8281,-0.2188,0.05],[-0.8125,-0.2188,0.0402],[-0.7969,-0.2188,0.0186],[-0.7812,-0.2188,0.0147],[-0.7656,-0.2188,0.0176],[-0.75,-0.2188,0.0265],[-0.7344,-0.2188,0.0466],[-0.7188,-0.2188,0.0289],[-0.7031,-0.2188,0.0289],[-0.6875,-0.2188,0.0353],[-0.6719,-0.2188,0.0485],[-0.6562,-0.2188,0.0343],[-0.6406,-0.2188,0.024],[-0.625,-0.2188,0.0407],[-0.6094,-0.2188,0.0294],[-0.5938,-0.2188,0.0275],[-0.5781,-0.2188,0.0225],[-0.5625,-0.2188,0.023],[-0.5469,-0.2188,0.0235],[-0.5312,-0.2188,0.026],[-0.5156,-0.2188,0.0333],[-0.5,-0.2188,0.0407],[-0.4844,-0.2188,0.0338],[-0.4688,-0.2188,0.0255],[-0.4531,-0.2188,0.0299],[-0.4375,-0.2188,0.0358],[-0.4219,-0.2188,0.0412],[-0.4062,-0.2188,0.0402],[-0.3906,-0.2188,0.024],[-0.375,-0.2188,0.0201],[-0.3594,-0.2188,0.0186],[-0.3438,-0.2188,0.0186],[-0.3281,-0.2188,0.0245],[-0.3125,-0.2188,0.0216],[-0.2969,-0.2188,0.0275],[-0.2812,-0.2188,0.027],[-0.2656,-0.2188,0.0353],[-0.25,-0.2188,0.0314],[-0.2344,-0.2188,0.0289],[-0.2188,-0.2188,0.0299],[-0.2031,-0.2188,0.0225],[-0.1875,-0.2188,0.0206],[-0.1719,-0.2188,0.0294],[-0.1562,-0.2188,0.0275],[-0.1406,-0.2188,0.0245],[-0.125,-0.2188,0.023],[-0.1094,-0.2188,0.0245],[-0.0938,-0.2188,0.0255],[-0.0781,-0.2188,0.0255],[-0.0625,-0.2188,0.0255],[-0.0469,-0.2188,0.026],[-0.0312,-0.2188,0.0279],[-0.0156,-0.2188,0.025],[0,-0.2188,0.0235],[0.0156,-0.2188,0.023],[0.0312,-0.2188,0.026],[0.0469,-0.2188,0.0235],[0.0625,-0.2188,0.0225],[0.0781,-0.2188,0.0235],[0.0938,-0.2188,0.023],[0.1094,-0.2188,0.0225],[0.125,-0.2188,0.0211],[0.1406,-0.2188,0.0216],[0.1562,-0.2188,0.0225],[0.1719,-0.2188,0.0245],[0.1875,-0.2188,0.026],[0.2031,-0.2188,0.0279],[0.2188,-0.2188,0.0343],[0.2344,-0.2188,0.0338],[0.25,-0.2188,0.0348],[0.2656,-0.2188,0.0353],[0.2812,-0.2188,0.0446],[0.2969,-0.2188,0.0358],[0.3125,-0.2188,0.0299],[0.3281,-0.2188,0.0211],[0.3438,-0.2188,0.024],[0.3594,-0.2188,0.0235],[0.375,-0.2188,0.0216],[0.3906,-0.2188,0.0221],[0.4062,-0.2188,0.0211],[0.4219,-0.2188,0.0191],[0.4375,-0.2188,0.0206],[0.4531,-0.2188,0.0265],[0.4688,-0.2188,0.0451],[0.4844,-0.2188,0.0431],[0.5,-0.2188,0.0265],[0.5156,-0.2188,0.0132],[0.5312,-0.2188,0.0127],[0.5469,-0.2188,0.0181],[0.5625,-0.2188,0.026],[0.5781,-0.2188,0.025],[0.5938,-0.2188,0.0221],[0.6094,-0.2188,0.0147],[0.625,-0.2188,0],[0.6406,-0.2188,0],[0.6562,-0.2188,0],[0.6719,-0.2188,0],[0.6875,-0.2188,0],[0.7031,-0.2188,0],[0.7188,-0.2188,0],[0.7344,-0.2188,0],[0.75,-0.2188,0],[0.7656,-0.2188,0],[0.7812,-0.2188,0],[0.7969,-0.2188,0],[0.8125,-0.2188,0],[0.8281,-0.2188,0],[0.8438,-0.2188,0],[0.8594,-0.2188,0],[0.875,-0.2188,0],[0.8906,-0.2188,0],[0.9062,-0.2188,0],[0.9219,-0.2188,0],[0.9375,-0.2188,0],[0.9531,-0.2188,0],[0.9688,-0.2188,0],[0.9844,-0.2188,0],[-1,-0.2031,0],[-0.9844,-0.2031,0],[-0.9688,-0.2031,0],[-0.9531,-0.2031,0.0078],[-0.9375,-0.2031,0.0137],[-0.9219,-0.2031,0.0132],[-0.9062,-0.2031,0.0172],[-0.8906,-0.2031,0.0294],[-0.875,-0.2031,0.0441],[-0.8594,-0.2031,0.0647],[-0.8438,-0.2031,0.0373],[-0.8281,-0.2031,0.0373],[-0.8125,-0.2031,0.0495],[-0.7969,-0.2031,0.0206],[-0.7812,-0.2031,0.0172],[-0.7656,-0.2031,0.023],[-0.75,-0.2031,0.0201],[-0.7344,-0.2031,0.026],[-0.7188,-0.2031,0.023],[-0.7031,-0.2031,0.0289],[-0.6875,-0.2031,0.0373],[-0.6719,-0.2031,0.05],[-0.6562,-0.2031,0.0348],[-0.6406,-0.2031,0.023],[-0.625,-0.2031,0.0275],[-0.6094,-0.2031,0.0279],[-0.5938,-0.2031,0.0216],[-0.5781,-0.2031,0.024],[-0.5625,-0.2031,0.0255],[-0.5469,-0.2031,0.025],[-0.5312,-0.2031,0.0265],[-0.5156,-0.2031,0.0314],[-0.5,-0.2031,0.0471],[-0.4844,-0.2031,0.0343],[-0.4688,-0.2031,0.026],[-0.4531,-0.2031,0.0235],[-0.4375,-0.2031,0.0338],[-0.4219,-0.2031,0.0426],[-0.4062,-0.2031,0.0412],[-0.3906,-0.2031,0.025],[-0.375,-0.2031,0.0201],[-0.3594,-0.2031,0.0181],[-0.3438,-0.2031,0.0181],[-0.3281,-0.2031,0.0191],[-0.3125,-0.2031,0.0211],[-0.2969,-0.2031,0.0255],[-0.2812,-0.2031,0.0235],[-0.2656,-0.2031,0.0279],[-0.25,-0.2031,0.0319],[-0.2344,-0.2031,0.026],[-0.2188,-0.2031,0.0245],[-0.2031,-0.2031,0.0225],[-0.1875,-0.2031,0.0196],[-0.1719,-0.2031,0.0211],[-0.1562,-0.2031,0.0216],[-0.1406,-0.2031,0.024],[-0.125,-0.2031,0.0216],[-0.1094,-0.2031,0.024],[-0.0938,-0.2031,0.0255],[-0.0781,-0.2031,0.026],[-0.0625,-0.2031,0.025],[-0.0469,-0.2031,0.0245],[-0.0312,-0.2031,0.026],[-0.0156,-0.2031,0.0255],[0,-0.2031,0.0265],[0.0156,-0.2031,0.0245],[0.0312,-0.2031,0.0255],[0.0469,-0.2031,0.024],[0.0625,-0.2031,0.0225],[0.0781,-0.2031,0.0225],[0.0938,-0.2031,0.0245],[0.1094,-0.2031,0.0235],[0.125,-0.2031,0.0216],[0.1406,-0.2031,0.0221],[0.1562,-0.2031,0.023],[0.1719,-0.2031,0.0245],[0.1875,-0.2031,0.0275],[0.2031,-0.2031,0.0279],[0.2188,-0.2031,0.0265],[0.2344,-0.2031,0.027],[0.25,-0.2031,0.027],[0.2656,-0.2031,0.025],[0.2812,-0.2031,0.0235],[0.2969,-0.2031,0.0221],[0.3125,-0.2031,0.0206],[0.3281,-0.2031,0.0206],[0.3438,-0.2031,0.0299],[0.3594,-0.2031,0.0328],[0.375,-0.2031,0.025],[0.3906,-0.2031,0.023],[0.4062,-0.2031,0.0221],[0.4219,-0.2031,0.0196],[0.4375,-0.2031,0.0211],[0.4531,-0.2031,0.0255],[0.4688,-0.2031,0.0392],[0.4844,-0.2031,0.0363],[0.5,-0.2031,0.0152],[0.5156,-0.2031,0.0176],[0.5312,-0.2031,0.0299],[0.5469,-0.2031,0.0265],[0.5625,-0.2031,0.0279],[0.5781,-0.2031,0.026],[0.5938,-0.2031,0.0221],[0.6094,-0.2031,0.0147],[0.625,-0.2031,0],[0.6406,-0.2031,0],[0.6562,-0.2031,0],[0.6719,-0.2031,0],[0.6875,-0.2031,0],[0.7031,-0.2031,0],[0.7188,-0.2031,0],[0.7344,-0.2031,0],[0.75,-0.2031,0],[0.7656,-0.2031,0],[0.7812,-0.2031,0],[0.7969,-0.2031,0],[0.8125,-0.2031,0],[0.8281,-0.2031,0],[0.8438,-0.2031,0],[0.8594,-0.2031,0],[0.875,-0.2031,0],[0.8906,-0.2031,0],[0.9062,-0.2031,0],[0.9219,-0.2031,0],[0.9375,-0.2031,0],[0.9531,-0.2031,0],[0.9688,-0.2031,0],[0.9844,-0.2031,0],[-1,-0.1875,0],[-0.9844,-0.1875,0],[-0.9688,-0.1875,0],[-0.9531,-0.1875,0.0039],[-0.9375,-0.1875,0.0005],[-0.9219,-0.1875,0.0005],[-0.9062,-0.1875,0.0186],[-0.8906,-0.1875,0.0211],[-0.875,-0.1875,0.0358],[-0.8594,-0.1875,0.0309],[-0.8438,-0.1875,0.027],[-0.8281,-0.1875,0.0294],[-0.8125,-0.1875,0.0382],[-0.7969,-0.1875,0.0211],[-0.7812,-0.1875,0.026],[-0.7656,-0.1875,0.0314],[-0.75,-0.1875,0.0157],[-0.7344,-0.1875,0.0201],[-0.7188,-0.1875,0.0176],[-0.7031,-0.1875,0.0206],[-0.6875,-0.1875,0.0343],[-0.6719,-0.1875,0.0422],[-0.6562,-0.1875,0.027],[-0.6406,-0.1875,0.0216],[-0.625,-0.1875,0.0343],[-0.6094,-0.1875,0.0446],[-0.5938,-0.1875,0.023],[-0.5781,-0.1875,0.0304],[-0.5625,-0.1875,0.0387],[-0.5469,-0.1875,0.025],[-0.5312,-0.1875,0.025],[-0.5156,-0.1875,0.0289],[-0.5,-0.1875,0.0392],[-0.4844,-0.1875,0.0319],[-0.4688,-0.1875,0.026],[-0.4531,-0.1875,0.0225],[-0.4375,-0.1875,0.0255],[-0.4219,-0.1875,0.0309],[-0.4062,-0.1875,0.027],[-0.3906,-0.1875,0.0216],[-0.375,-0.1875,0.0181],[-0.3594,-0.1875,0.0176],[-0.3438,-0.1875,0.0176],[-0.3281,-0.1875,0.0181],[-0.3125,-0.1875,0.0186],[-0.2969,-0.1875,0.0191],[-0.2812,-0.1875,0.0211],[-0.2656,-0.1875,0.0225],[-0.25,-0.1875,0.025],[-0.2344,-0.1875,0.024],[-0.2188,-0.1875,0.023],[-0.2031,-0.1875,0.0245],[-0.1875,-0.1875,0.0221],[-0.1719,-0.1875,0.0201],[-0.1562,-0.1875,0.0206],[-0.1406,-0.1875,0.0206],[-0.125,-0.1875,0.0201],[-0.1094,-0.1875,0.0216],[-0.0938,-0.1875,0.0265],[-0.0781,-0.1875,0.026],[-0.0625,-0.1875,0.0275],[-0.0469,-0.1875,0.0245],[-0.0312,-0.1875,0.0225],[-0.0156,-0.1875,0.0235],[0,-0.1875,0.024],[0.0156,-0.1875,0.024],[0.0312,-0.1875,0.024],[0.0469,-0.1875,0.023],[0.0625,-0.1875,0.0206],[0.0781,-0.1875,0.0211],[0.0938,-0.1875,0.0279],[0.1094,-0.1875,0.023],[0.125,-0.1875,0.024],[0.1406,-0.1875,0.0284],[0.1562,-0.1875,0.027],[0.1719,-0.1875,0.0275],[0.1875,-0.1875,0.0265],[0.2031,-0.1875,0.0255],[0.2188,-0.1875,0.0235],[0.2344,-0.1875,0.024],[0.25,-0.1875,0.023],[0.2656,-0.1875,0.0235],[0.2812,-0.1875,0.0328],[0.2969,-0.1875,0.0314],[0.3125,-0.1875,0.0284],[0.3281,-0.1875,0.026],[0.3438,-0.1875,0.0363],[0.3594,-0.1875,0.0387],[0.375,-0.1875,0.0328],[0.3906,-0.1875,0.0245],[0.4062,-0.1875,0.0216],[0.4219,-0.1875,0.0211],[0.4375,-0.1875,0.0245],[0.4531,-0.1875,0.0333],[0.4688,-0.1875,0.0309],[0.4844,-0.1875,0.0284],[0.5,-0.1875,0.0147],[0.5156,-0.1875,0.0216],[0.5312,-0.1875,0.0255],[0.5469,-0.1875,0.0235],[0.5625,-0.1875,0.0294],[0.5781,-0.1875,0.024],[0.5938,-0.1875,0.0186],[0.6094,-0.1875,0.0186],[0.625,-0.1875,0.001],[0.6406,-0.1875,0],[0.6562,-0.1875,0],[0.6719,-0.1875,0],[0.6875,-0.1875,0],[0.7031,-0.1875,0],[0.7188,-0.1875,0],[0.7344,-0.1875,0],[0.75,-0.1875,0],[0.7656,-0.1875,0],[0.7812,-0.1875,0],[0.7969,-0.1875,0],[0.8125,-0.1875,0],[0.8281,-0.1875,0],[0.8438,-0.1875,0],[0.8594,-0.1875,0],[0.875,-0.1875,0],[0.8906,-0.1875,0],[0.9062,-0.1875,0],[0.9219,-0.1875,0],[0.9375,-0.1875,0],[0.9531,-0.1875,0],[0.9688,-0.1875,0],[0.9844,-0.1875,0],[-1,-0.1719,0],[-0.9844,-0.1719,0],[-0.9688,-0.1719,0],[-0.9531,-0.1719,0],[-0.9375,-0.1719,0],[-0.9219,-0.1719,0.0005],[-0.9062,-0.1719,0.0093],[-0.8906,-0.1719,0.0451],[-0.875,-0.1719,0.0485],[-0.8594,-0.1719,0.0426],[-0.8438,-0.1719,0.0206],[-0.8281,-0.1719,0.0162],[-0.8125,-0.1719,0.027],[-0.7969,-0.1719,0.0113],[-0.7812,-0.1719,0.0201],[-0.7656,-0.1719,0.0201],[-0.75,-0.1719,0.0142],[-0.7344,-0.1719,0.0132],[-0.7188,-0.1719,0.0118],[-0.7031,-0.1719,0.0113],[-0.6875,-0.1719,0.0186],[-0.6719,-0.1719,0.0206],[-0.6562,-0.1719,0.0186],[-0.6406,-0.1719,0.0201],[-0.625,-0.1719,0.0279],[-0.6094,-0.1719,0.0265],[-0.5938,-0.1719,0.0221],[-0.5781,-0.1719,0.0304],[-0.5625,-0.1719,0.0382],[-0.5469,-0.1719,0.026],[-0.5312,-0.1719,0.0275],[-0.5156,-0.1719,0.0299],[-0.5,-0.1719,0.0343],[-0.4844,-0.1719,0.0382],[-0.4688,-0.1719,0.0289],[-0.4531,-0.1719,0.0235],[-0.4375,-0.1719,0.0211],[-0.4219,-0.1719,0.0196],[-0.4062,-0.1719,0.0191],[-0.3906,-0.1719,0.0176],[-0.375,-0.1719,0.0176],[-0.3594,-0.1719,0.0176],[-0.3438,-0.1719,0.0176],[-0.3281,-0.1719,0.0186],[-0.3125,-0.1719,0.0181],[-0.2969,-0.1719,0.0181],[-0.2812,-0.1719,0.0186],[-0.2656,-0.1719,0.0186],[-0.25,-0.1719,0.0206],[-0.2344,-0.1719,0.0225],[-0.2188,-0.1719,0.0216],[-0.2031,-0.1719,0.0235],[-0.1875,-0.1719,0.025],[-0.1719,-0.1719,0.024],[-0.1562,-0.1719,0.0211],[-0.1406,-0.1719,0.0211],[-0.125,-0.1719,0.0201],[-0.1094,-0.1719,0.0211],[-0.0938,-0.1719,0.0221],[-0.0781,-0.1719,0.024],[-0.0625,-0.1719,0.026],[-0.0469,-0.1719,0.027],[-0.0312,-0.1719,0.0245],[-0.0156,-0.1719,0.0235],[0,-0.1719,0.0235],[0.0156,-0.1719,0.0225],[0.0312,-0.1719,0.0225],[0.0469,-0.1719,0.0211],[0.0625,-0.1719,0.0196],[0.0781,-0.1719,0.0216],[0.0938,-0.1719,0.025],[0.1094,-0.1719,0.023],[0.125,-0.1719,0.027],[0.1406,-0.1719,0.048],[0.1562,-0.1719,0.0475],[0.1719,-0.1719,0.0387],[0.1875,-0.1719,0.0279],[0.2031,-0.1719,0.0255],[0.2188,-0.1719,0.024],[0.2344,-0.1719,0.026],[0.25,-0.1719,0.0245],[0.2656,-0.1719,0.023],[0.2812,-0.1719,0.026],[0.2969,-0.1719,0.0426],[0.3125,-0.1719,0.0373],[0.3281,-0.1719,0.0333],[0.3438,-0.1719,0.0431],[0.3594,-0.1719,0.0377],[0.375,-0.1719,0.0387],[0.3906,-0.1719,0.0284],[0.4062,-0.1719,0.0221],[0.4219,-0.1719,0.0216],[0.4375,-0.1719,0.0221],[0.4531,-0.1719,0.0324],[0.4688,-0.1719,0.0328],[0.4844,-0.1719,0.0289],[0.5,-0.1719,0.0152],[0.5156,-0.1719,0.023],[0.5312,-0.1719,0.0284],[0.5469,-0.1719,0.0245],[0.5625,-0.1719,0.0387],[0.5781,-0.1719,0.023],[0.5938,-0.1719,0.0225],[0.6094,-0.1719,0.0206],[0.625,-0.1719,0.0078],[0.6406,-0.1719,0],[0.6562,-0.1719,0],[0.6719,-0.1719,0],[0.6875,-0.1719,0],[0.7031,-0.1719,0],[0.7188,-0.1719,0],[0.7344,-0.1719,0],[0.75,-0.1719,0],[0.7656,-0.1719,0],[0.7812,-0.1719,0],[0.7969,-0.1719,0],[0.8125,-0.1719,0],[0.8281,-0.1719,0],[0.8438,-0.1719,0],[0.8594,-0.1719,0],[0.875,-0.1719,0],[0.8906,-0.1719,0],[0.9062,-0.1719,0],[0.9219,-0.1719,0],[0.9375,-0.1719,0],[0.9531,-0.1719,0],[0.9688,-0.1719,0],[0.9844,-0.1719,0],[-1,-0.1562,0],[-0.9844,-0.1562,0],[-0.9688,-0.1562,0],[-0.9531,-0.1562,0],[-0.9375,-0.1562,0],[-0.9219,-0.1562,0],[-0.9062,-0.1562,0.0142],[-0.8906,-0.1562,0.0216],[-0.875,-0.1562,0.0392],[-0.8594,-0.1562,0.0216],[-0.8438,-0.1562,0.0044],[-0.8281,-0.1562,0.0059],[-0.8125,-0.1562,0.0078],[-0.7969,-0.1562,0.0157],[-0.7812,-0.1562,0.0108],[-0.7656,-0.1562,0.0142],[-0.75,-0.1562,0.0299],[-0.7344,-0.1562,0.026],[-0.7188,-0.1562,0.0235],[-0.7031,-0.1562,0.0142],[-0.6875,-0.1562,0.0196],[-0.6719,-0.1562,0.0167],[-0.6562,-0.1562,0.0279],[-0.6406,-0.1562,0.023],[-0.625,-0.1562,0.0235],[-0.6094,-0.1562,0.0275],[-0.5938,-0.1562,0.0265],[-0.5781,-0.1562,0.0284],[-0.5625,-0.1562,0.0402],[-0.5469,-0.1562,0.0294],[-0.5312,-0.1562,0.0294],[-0.5156,-0.1562,0.0265],[-0.5,-0.1562,0.0279],[-0.4844,-0.1562,0.0353],[-0.4688,-0.1562,0.0338],[-0.4531,-0.1562,0.0324],[-0.4375,-0.1562,0.0221],[-0.4219,-0.1562,0.0181],[-0.4062,-0.1562,0.0172],[-0.3906,-0.1562,0.0167],[-0.375,-0.1562,0.0176],[-0.3594,-0.1562,0.0181],[-0.3438,-0.1562,0.0181],[-0.3281,-0.1562,0.0201],[-0.3125,-0.1562,0.0211],[-0.2969,-0.1562,0.0191],[-0.2812,-0.1562,0.0211],[-0.2656,-0.1562,0.025],[-0.25,-0.1562,0.0279],[-0.2344,-0.1562,0.0221],[-0.2188,-0.1562,0.0211],[-0.2031,-0.1562,0.024],[-0.1875,-0.1562,0.0265],[-0.1719,-0.1562,0.026],[-0.1562,-0.1562,0.0245],[-0.1406,-0.1562,0.023],[-0.125,-0.1562,0.0211],[-0.1094,-0.1562,0.0201],[-0.0938,-0.1562,0.0201],[-0.0781,-0.1562,0.0221],[-0.0625,-0.1562,0.0275],[-0.0469,-0.1562,0.0294],[-0.0312,-0.1562,0.0289],[-0.0156,-0.1562,0.0265],[0,-0.1562,0.024],[0.0156,-0.1562,0.0216],[0.0312,-0.1562,0.0201],[0.0469,-0.1562,0.0201],[0.0625,-0.1562,0.0196],[0.0781,-0.1562,0.0211],[0.0938,-0.1562,0.0225],[0.1094,-0.1562,0.0235],[0.125,-0.1562,0.0275],[0.1406,-0.1562,0.0554],[0.1562,-0.1562,0.0706],[0.1719,-0.1562,0.0456],[0.1875,-0.1562,0.0309],[0.2031,-0.1562,0.026],[0.2188,-0.1562,0.0265],[0.2344,-0.1562,0.0265],[0.25,-0.1562,0.0279],[0.2656,-0.1562,0.0245],[0.2812,-0.1562,0.025],[0.2969,-0.1562,0.0328],[0.3125,-0.1562,0.0431],[0.3281,-0.1562,0.0392],[0.3438,-0.1562,0.0333],[0.3594,-0.1562,0.0495],[0.375,-0.1562,0.0451],[0.3906,-0.1562,0.0382],[0.4062,-0.1562,0.0279],[0.4219,-0.1562,0.023],[0.4375,-0.1562,0.0216],[0.4531,-0.1562,0.0299],[0.4688,-0.1562,0.0422],[0.4844,-0.1562,0.0319],[0.5,-0.1562,0.0152],[0.5156,-0.1562,0.0289],[0.5312,-0.1562,0.0314],[0.5469,-0.1562,0.0475],[0.5625,-0.1562,0.0686],[0.5781,-0.1562,0.0363],[0.5938,-0.1562,0.0225],[0.6094,-0.1562,0.0201],[0.625,-0.1562,0.0181],[0.6406,-0.1562,0.0005],[0.6562,-0.1562,0.0005],[0.6719,-0.1562,0],[0.6875,-0.1562,0],[0.7031,-0.1562,0],[0.7188,-0.1562,0],[0.7344,-0.1562,0],[0.75,-0.1562,0],[0.7656,-0.1562,0],[0.7812,-0.1562,0],[0.7969,-0.1562,0],[0.8125,-0.1562,0],[0.8281,-0.1562,0],[0.8438,-0.1562,0],[0.8594,-0.1562,0],[0.875,-0.1562,0],[0.8906,-0.1562,0],[0.9062,-0.1562,0],[0.9219,-0.1562,0],[0.9375,-0.1562,0],[0.9531,-0.1562,0],[0.9688,-0.1562,0],[0.9844,-0.1562,0],[-1,-0.1406,0],[-0.9844,-0.1406,0],[-0.9688,-0.1406,0],[-0.9531,-0.1406,0],[-0.9375,-0.1406,0],[-0.9219,-0.1406,0],[-0.9062,-0.1406,0],[-0.8906,-0.1406,0],[-0.875,-0.1406,0.0059],[-0.8594,-0.1406,0.0074],[-0.8438,-0.1406,0.0172],[-0.8281,-0.1406,0.0235],[-0.8125,-0.1406,0.0181],[-0.7969,-0.1406,0.0034],[-0.7812,-0.1406,0.0083],[-0.7656,-0.1406,0.0152],[-0.75,-0.1406,0.0221],[-0.7344,-0.1406,0.0255],[-0.7188,-0.1406,0.0245],[-0.7031,-0.1406,0.0152],[-0.6875,-0.1406,0.0167],[-0.6719,-0.1406,0.0152],[-0.6562,-0.1406,0.0284],[-0.6406,-0.1406,0.0304],[-0.625,-0.1406,0.0201],[-0.6094,-0.1406,0.0255],[-0.5938,-0.1406,0.0422],[-0.5781,-0.1406,0.0358],[-0.5625,-0.1406,0.0451],[-0.5469,-0.1406,0.0348],[-0.5312,-0.1406,0.0304],[-0.5156,-0.1406,0.027],[-0.5,-0.1406,0.025],[-0.4844,-0.1406,0.0279],[-0.4688,-0.1406,0.0328],[-0.4531,-0.1406,0.0289],[-0.4375,-0.1406,0.0206],[-0.4219,-0.1406,0.0176],[-0.4062,-0.1406,0.0172],[-0.3906,-0.1406,0.0201],[-0.375,-0.1406,0.0211],[-0.3594,-0.1406,0.0216],[-0.3438,-0.1406,0.0196],[-0.3281,-0.1406,0.0196],[-0.3125,-0.1406,0.0216],[-0.2969,-0.1406,0.0201],[-0.2812,-0.1406,0.0206],[-0.2656,-0.1406,0.024],[-0.25,-0.1406,0.0255],[-0.2344,-0.1406,0.0225],[-0.2188,-0.1406,0.0206],[-0.2031,-0.1406,0.0216],[-0.1875,-0.1406,0.0235],[-0.1719,-0.1406,0.0216],[-0.1562,-0.1406,0.025],[-0.1406,-0.1406,0.023],[-0.125,-0.1406,0.0206],[-0.1094,-0.1406,0.0201],[-0.0938,-0.1406,0.0201],[-0.0781,-0.1406,0.0211],[-0.0625,-0.1406,0.0235],[-0.0469,-0.1406,0.0279],[-0.0312,-0.1406,0.0299],[-0.0156,-0.1406,0.0265],[0,-0.1406,0.0216],[0.0156,-0.1406,0.0216],[0.0312,-0.1406,0.0201],[0.0469,-0.1406,0.0186],[0.0625,-0.1406,0.0181],[0.0781,-0.1406,0.0211],[0.0938,-0.1406,0.023],[0.1094,-0.1406,0.0245],[0.125,-0.1406,0.0324],[0.1406,-0.1406,0.0598],[0.1562,-0.1406,0.0676],[0.1719,-0.1406,0.0446],[0.1875,-0.1406,0.0324],[0.2031,-0.1406,0.0279],[0.2188,-0.1406,0.0265],[0.2344,-0.1406,0.0299],[0.25,-0.1406,0.0279],[0.2656,-0.1406,0.025],[0.2812,-0.1406,0.0294],[0.2969,-0.1406,0.0289],[0.3125,-0.1406,0.0294],[0.3281,-0.1406,0.0299],[0.3438,-0.1406,0.0309],[0.3594,-0.1406,0.0363],[0.375,-0.1406,0.0466],[0.3906,-0.1406,0.0387],[0.4062,-0.1406,0.0319],[0.4219,-0.1406,0.0304],[0.4375,-0.1406,0.0294],[0.4531,-0.1406,0.0279],[0.4688,-0.1406,0.0784],[0.4844,-0.1406,0.0456],[0.5,-0.1406,0.0147],[0.5156,-0.1406,0.0363],[0.5312,-0.1406,0.049],[0.5469,-0.1406,0.0784],[0.5625,-0.1406,0.1039],[0.5781,-0.1406,0.0593],[0.5938,-0.1406,0.0529],[0.6094,-0.1406,0.0343],[0.625,-0.1406,0.0186],[0.6406,-0.1406,0.0054],[0.6562,-0.1406,0.0123],[0.6719,-0.1406,0.0069],[0.6875,-0.1406,0.0015],[0.7031,-0.1406,0],[0.7188,-0.1406,0],[0.7344,-0.1406,0],[0.75,-0.1406,0],[0.7656,-0.1406,0],[0.7812,-0.1406,0],[0.7969,-0.1406,0],[0.8125,-0.1406,0],[0.8281,-0.1406,0],[0.8438,-0.1406,0],[0.8594,-0.1406,0],[0.875,-0.1406,0],[0.8906,-0.1406,0],[0.9062,-0.1406,0],[0.9219,-0.1406,0],[0.9375,-0.1406,0],[0.9531,-0.1406,0],[0.9688,-0.1406,0],[0.9844,-0.1406,0],[-1,-0.125,0],[-0.9844,-0.125,0],[-0.9688,-0.125,0],[-0.9531,-0.125,0],[-0.9375,-0.125,0],[-0.9219,-0.125,0],[-0.9062,-0.125,0.0015],[-0.8906,-0.125,0.0108],[-0.875,-0.125,0.0152],[-0.8594,-0.125,0.0162],[-0.8438,-0.125,0.0358],[-0.8281,-0.125,0.0392],[-0.8125,-0.125,0.0309],[-0.7969,-0.125,0.0118],[-0.7812,-0.125,0.0186],[-0.7656,-0.125,0.0088],[-0.75,-0.125,0.0196],[-0.7344,-0.125,0.0186],[-0.7188,-0.125,0.0377],[-0.7031,-0.125,0.0211],[-0.6875,-0.125,0.0176],[-0.6719,-0.125,0.0162],[-0.6562,-0.125,0.027],[-0.6406,-0.125,0.0304],[-0.625,-0.125,0.0211],[-0.6094,-0.125,0.0275],[-0.5938,-0.125,0.0461],[-0.5781,-0.125,0.0461],[-0.5625,-0.125,0.0363],[-0.5469,-0.125,0.0245],[-0.5312,-0.125,0.0304],[-0.5156,-0.125,0.0265],[-0.5,-0.125,0.0221],[-0.4844,-0.125,0.0201],[-0.4688,-0.125,0.0225],[-0.4531,-0.125,0.0191],[-0.4375,-0.125,0.0181],[-0.4219,-0.125,0.0176],[-0.4062,-0.125,0.0172],[-0.3906,-0.125,0.0221],[-0.375,-0.125,0.0426],[-0.3594,-0.125,0.0559],[-0.3438,-0.125,0.0319],[-0.3281,-0.125,0.0206],[-0.3125,-0.125,0.0216],[-0.2969,-0.125,0.0206],[-0.2812,-0.125,0.0216],[-0.2656,-0.125,0.0206],[-0.25,-0.125,0.0235],[-0.2344,-0.125,0.0304],[-0.2188,-0.125,0.0279],[-0.2031,-0.125,0.0294],[-0.1875,-0.125,0.025],[-0.1719,-0.125,0.0206],[-0.1562,-0.125,0.025],[-0.1406,-0.125,0.0245],[-0.125,-0.125,0.0221],[-0.1094,-0.125,0.0211],[-0.0938,-0.125,0.0201],[-0.0781,-0.125,0.0201],[-0.0625,-0.125,0.0221],[-0.0469,-0.125,0.0245],[-0.0312,-0.125,0.0265],[-0.0156,-0.125,0.027],[0,-0.125,0.0211],[0.0156,-0.125,0.0186],[0.0312,-0.125,0.0191],[0.0469,-0.125,0.0181],[0.0625,-0.125,0.0181],[0.0781,-0.125,0.0206],[0.0938,-0.125,0.024],[0.1094,-0.125,0.024],[0.125,-0.125,0.0319],[0.1406,-0.125,0.0534],[0.1562,-0.125,0.0716],[0.1719,-0.125,0.0632],[0.1875,-0.125,0.0382],[0.2031,-0.125,0.0299],[0.2188,-0.125,0.026],[0.2344,-0.125,0.0294],[0.25,-0.125,0.0275],[0.2656,-0.125,0.026],[0.2812,-0.125,0.0279],[0.2969,-0.125,0.0314],[0.3125,-0.125,0.0304],[0.3281,-0.125,0.0294],[0.3438,-0.125,0.0304],[0.3594,-0.125,0.0304],[0.375,-0.125,0.0387],[0.3906,-0.125,0.0446],[0.4062,-0.125,0.0382],[0.4219,-0.125,0.0328],[0.4375,-0.125,0.0294],[0.4531,-0.125,0.0201],[0.4688,-0.125,0.0441],[0.4844,-0.125,0.0289],[0.5,-0.125,0.0142],[0.5156,-0.125,0.048],[0.5312,-0.125,0.073],[0.5469,-0.125,0.0534],[0.5625,-0.125,0.0755],[0.5781,-0.125,0.076],[0.5938,-0.125,0.0574],[0.6094,-0.125,0.0461],[0.625,-0.125,0.0181],[0.6406,-0.125,0.0078],[0.6562,-0.125,0.0279],[0.6719,-0.125,0.0294],[0.6875,-0.125,0.0147],[0.7031,-0.125,0],[0.7188,-0.125,0],[0.7344,-0.125,0],[0.75,-0.125,0],[0.7656,-0.125,0],[0.7812,-0.125,0],[0.7969,-0.125,0],[0.8125,-0.125,0],[0.8281,-0.125,0],[0.8438,-0.125,0],[0.8594,-0.125,0],[0.875,-0.125,0],[0.8906,-0.125,0],[0.9062,-0.125,0],[0.9219,-0.125,0],[0.9375,-0.125,0],[0.9531,-0.125,0],[0.9688,-0.125,0],[0.9844,-0.125,0],[-1,-0.1094,0],[-0.9844,-0.1094,0],[-0.9688,-0.1094,0],[-0.9531,-0.1094,0],[-0.9375,-0.1094,0],[-0.9219,-0.1094,0],[-0.9062,-0.1094,0.0025],[-0.8906,-0.1094,0.0162],[-0.875,-0.1094,0.025],[-0.8594,-0.1094,0.0142],[-0.8438,-0.1094,0.0152],[-0.8281,-0.1094,0.0221],[-0.8125,-0.1094,0.0275],[-0.7969,-0.1094,0.0186],[-0.7812,-0.1094,0.0181],[-0.7656,-0.1094,0.0255],[-0.75,-0.1094,0.0137],[-0.7344,-0.1094,0.0201],[-0.7188,-0.1094,0.0304],[-0.7031,-0.1094,0.0211],[-0.6875,-0.1094,0.0255],[-0.6719,-0.1094,0.0176],[-0.6562,-0.1094,0.0255],[-0.6406,-0.1094,0.0338],[-0.625,-0.1094,0.0235],[-0.6094,-0.1094,0.0279],[-0.5938,-0.1094,0.0392],[-0.5781,-0.1094,0.0397],[-0.5625,-0.1094,0.0314],[-0.5469,-0.1094,0.023],[-0.5312,-0.1094,0.026],[-0.5156,-0.1094,0.023],[-0.5,-0.1094,0.0196],[-0.4844,-0.1094,0.0176],[-0.4688,-0.1094,0.0181],[-0.4531,-0.1094,0.0196],[-0.4375,-0.1094,0.0186],[-0.4219,-0.1094,0.0181],[-0.4062,-0.1094,0.0191],[-0.3906,-0.1094,0.0191],[-0.375,-0.1094,0.0284],[-0.3594,-0.1094,0.0471],[-0.3438,-0.1094,0.0265],[-0.3281,-0.1094,0.0196],[-0.3125,-0.1094,0.0196],[-0.2969,-0.1094,0.0221],[-0.2812,-0.1094,0.0221],[-0.2656,-0.1094,0.025],[-0.25,-0.1094,0.0221],[-0.2344,-0.1094,0.0255],[-0.2188,-0.1094,0.0294],[-0.2031,-0.1094,0.0348],[-0.1875,-0.1094,0.026],[-0.1719,-0.1094,0.0191],[-0.1562,-0.1094,0.0235],[-0.1406,-0.1094,0.027],[-0.125,-0.1094,0.0255],[-0.1094,-0.1094,0.0235],[-0.0938,-0.1094,0.0216],[-0.0781,-0.1094,0.0201],[-0.0625,-0.1094,0.0206],[-0.0469,-0.1094,0.0225],[-0.0312,-0.1094,0.0225],[-0.0156,-0.1094,0.0225],[0,-0.1094,0.0221],[0.0156,-0.1094,0.0201],[0.0312,-0.1094,0.0181],[0.0469,-0.1094,0.0181],[0.0625,-0.1094,0.0176],[0.0781,-0.1094,0.0186],[0.0938,-0.1094,0.0206],[0.1094,-0.1094,0.023],[0.125,-0.1094,0.0245],[0.1406,-0.1094,0.0368],[0.1562,-0.1094,0.0544],[0.1719,-0.1094,0.0672],[0.1875,-0.1094,0.0583],[0.2031,-0.1094,0.0417],[0.2188,-0.1094,0.0279],[0.2344,-0.1094,0.0294],[0.25,-0.1094,0.0299],[0.2656,-0.1094,0.0284],[0.2812,-0.1094,0.0289],[0.2969,-0.1094,0.0299],[0.3125,-0.1094,0.0299],[0.3281,-0.1094,0.0294],[0.3438,-0.1094,0.0289],[0.3594,-0.1094,0.0289],[0.375,-0.1094,0.0294],[0.3906,-0.1094,0.0333],[0.4062,-0.1094,0.0373],[0.4219,-0.1094,0.0309],[0.4375,-0.1094,0.0255],[0.4531,-0.1094,0.0235],[0.4688,-0.1094,0.0206],[0.4844,-0.1094,0.0172],[0.5,-0.1094,0.0162],[0.5156,-0.1094,0.0422],[0.5312,-0.1094,0.0598],[0.5469,-0.1094,0.0363],[0.5625,-0.1094,0.052],[0.5781,-0.1094,0.0407],[0.5938,-0.1094,0.0324],[0.6094,-0.1094,0.0279],[0.625,-0.1094,0.0176],[0.6406,-0.1094,0.0132],[0.6562,-0.1094,0.0328],[0.6719,-0.1094,0.0343],[0.6875,-0.1094,0.0211],[0.7031,-0.1094,0],[0.7188,-0.1094,0],[0.7344,-0.1094,0],[0.75,-0.1094,0],[0.7656,-0.1094,0],[0.7812,-0.1094,0],[0.7969,-0.1094,0],[0.8125,-0.1094,0],[0.8281,-0.1094,0],[0.8438,-0.1094,0],[0.8594,-0.1094,0],[0.875,-0.1094,0],[0.8906,-0.1094,0],[0.9062,-0.1094,0],[0.9219,-0.1094,0],[0.9375,-0.1094,0],[0.9531,-0.1094,0],[0.9688,-0.1094,0],[0.9844,-0.1094,0],[-1,-0.0938,0],[-0.9844,-0.0938,0],[-0.9688,-0.0938,0],[-0.9531,-0.0938,0],[-0.9375,-0.0938,0],[-0.9219,-0.0938,0],[-0.9062,-0.0938,0],[-0.8906,-0.0938,0.0064],[-0.875,-0.0938,0.0152],[-0.8594,-0.0938,0.0113],[-0.8438,-0.0938,0.0167],[-0.8281,-0.0938,0.026],[-0.8125,-0.0938,0.0235],[-0.7969,-0.0938,0.0181],[-0.7812,-0.0938,0.0186],[-0.7656,-0.0938,0.0279],[-0.75,-0.0938,0.023],[-0.7344,-0.0938,0.0245],[-0.7188,-0.0938,0.0373],[-0.7031,-0.0938,0.0245],[-0.6875,-0.0938,0.0279],[-0.6719,-0.0938,0.0167],[-0.6562,-0.0938,0.0275],[-0.6406,-0.0938,0.0377],[-0.625,-0.0938,0.0265],[-0.6094,-0.0938,0.027],[-0.5938,-0.0938,0.0392],[-0.5781,-0.0938,0.0358],[-0.5625,-0.0938,0.0294],[-0.5469,-0.0938,0.0216],[-0.5312,-0.0938,0.0196],[-0.5156,-0.0938,0.0186],[-0.5,-0.0938,0.0176],[-0.4844,-0.0938,0.0225],[-0.4688,-0.0938,0.0265],[-0.4531,-0.0938,0.0211],[-0.4375,-0.0938,0.0206],[-0.4219,-0.0938,0.0181],[-0.4062,-0.0938,0.027],[-0.3906,-0.0938,0.0387],[-0.375,-0.0938,0.0289],[-0.3594,-0.0938,0.024],[-0.3438,-0.0938,0.0211],[-0.3281,-0.0938,0.0216],[-0.3125,-0.0938,0.0196],[-0.2969,-0.0938,0.0225],[-0.2812,-0.0938,0.0225],[-0.2656,-0.0938,0.0245],[-0.25,-0.0938,0.0294],[-0.2344,-0.0938,0.0221],[-0.2188,-0.0938,0.0216],[-0.2031,-0.0938,0.0284],[-0.1875,-0.0938,0.0314],[-0.1719,-0.0938,0.0186],[-0.1562,-0.0938,0.0206],[-0.1406,-0.0938,0.0225],[-0.125,-0.0938,0.0279],[-0.1094,-0.0938,0.026],[-0.0938,-0.0938,0.0225],[-0.0781,-0.0938,0.0186],[-0.0625,-0.0938,0.0191],[-0.0469,-0.0938,0.0196],[-0.0312,-0.0938,0.0211],[-0.0156,-0.0938,0.0211],[0,-0.0938,0.0221],[0.0156,-0.0938,0.0201],[0.0312,-0.0938,0.0206],[0.0469,-0.0938,0.0181],[0.0625,-0.0938,0.0172],[0.0781,-0.0938,0.0181],[0.0938,-0.0938,0.0186],[0.1094,-0.0938,0.0201],[0.125,-0.0938,0.0235],[0.1406,-0.0938,0.0255],[0.1562,-0.0938,0.0363],[0.1719,-0.0938,0.0417],[0.1875,-0.0938,0.0549],[0.2031,-0.0938,0.0431],[0.2188,-0.0938,0.0289],[0.2344,-0.0938,0.0279],[0.25,-0.0938,0.0319],[0.2656,-0.0938,0.0299],[0.2812,-0.0938,0.0294],[0.2969,-0.0938,0.0299],[0.3125,-0.0938,0.0294],[0.3281,-0.0938,0.0284],[0.3438,-0.0938,0.0275],[0.3594,-0.0938,0.0279],[0.375,-0.0938,0.0289],[0.3906,-0.0938,0.0294],[0.4062,-0.0938,0.0333],[0.4219,-0.0938,0.0319],[0.4375,-0.0938,0.024],[0.4531,-0.0938,0.0225],[0.4688,-0.0938,0.024],[0.4844,-0.0938,0.0211],[0.5,-0.0938,0.0196],[0.5156,-0.0938,0.0294],[0.5312,-0.0938,0.0485],[0.5469,-0.0938,0.0284],[0.5625,-0.0938,0.0392],[0.5781,-0.0938,0.0338],[0.5938,-0.0938,0.0309],[0.6094,-0.0938,0.027],[0.625,-0.0938,0.0176],[0.6406,-0.0938,0.025],[0.6562,-0.0938,0.0407],[0.6719,-0.0938,0.0319],[0.6875,-0.0938,0.0216],[0.7031,-0.0938,0.0118],[0.7188,-0.0938,0],[0.7344,-0.0938,0],[0.75,-0.0938,0],[0.7656,-0.0938,0],[0.7812,-0.0938,0],[0.7969,-0.0938,0],[0.8125,-0.0938,0],[0.8281,-0.0938,0],[0.8438,-0.0938,0],[0.8594,-0.0938,0],[0.875,-0.0938,0],[0.8906,-0.0938,0],[0.9062,-0.0938,0],[0.9219,-0.0938,0],[0.9375,-0.0938,0],[0.9531,-0.0938,0],[0.9688,-0.0938,0],[0.9844,-0.0938,0],[-1,-0.0781,0],[-0.9844,-0.0781,0],[-0.9688,-0.0781,0],[-0.9531,-0.0781,0],[-0.9375,-0.0781,0],[-0.9219,-0.0781,0],[-0.9062,-0.0781,0],[-0.8906,-0.0781,0.0054],[-0.875,-0.0781,0.0152],[-0.8594,-0.0781,0.0118],[-0.8438,-0.0781,0.0265],[-0.8281,-0.0781,0.0358],[-0.8125,-0.0781,0.049],[-0.7969,-0.0781,0.0289],[-0.7812,-0.0781,0.0186],[-0.7656,-0.0781,0.0235],[-0.75,-0.0781,0.0333],[-0.7344,-0.0781,0.0225],[-0.7188,-0.0781,0.0397],[-0.7031,-0.0781,0.0338],[-0.6875,-0.0781,0.0294],[-0.6719,-0.0781,0.0172],[-0.6562,-0.0781,0.0324],[-0.6406,-0.0781,0.0358],[-0.625,-0.0781,0.0348],[-0.6094,-0.0781,0.0304],[-0.5938,-0.0781,0.0422],[-0.5781,-0.0781,0.0431],[-0.5625,-0.0781,0.0294],[-0.5469,-0.0781,0.0211],[-0.5312,-0.0781,0.0167],[-0.5156,-0.0781,0.0167],[-0.5,-0.0781,0.0176],[-0.4844,-0.0781,0.027],[-0.4688,-0.0781,0.0201],[-0.4531,-0.0781,0.0265],[-0.4375,-0.0781,0.0426],[-0.4219,-0.0781,0.0191],[-0.4062,-0.0781,0.0466],[-0.3906,-0.0781,0.0627],[-0.375,-0.0781,0.0559],[-0.3594,-0.0781,0.0377],[-0.3438,-0.0781,0.0279],[-0.3281,-0.0781,0.0221],[-0.3125,-0.0781,0.0211],[-0.2969,-0.0781,0.0216],[-0.2812,-0.0781,0.0221],[-0.2656,-0.0781,0.0196],[-0.25,-0.0781,0.0221],[-0.2344,-0.0781,0.0211],[-0.2188,-0.0781,0.0186],[-0.2031,-0.0781,0.0201],[-0.1875,-0.0781,0.0245],[-0.1719,-0.0781,0.0191],[-0.1562,-0.0781,0.0186],[-0.1406,-0.0781,0.0216],[-0.125,-0.0781,0.0225],[-0.1094,-0.0781,0.0235],[-0.0938,-0.0781,0.0216],[-0.0781,-0.0781,0.0186],[-0.0625,-0.0781,0.0172],[-0.0469,-0.0781,0.0201],[-0.0312,-0.0781,0.023],[-0.0156,-0.0781,0.0225],[0,-0.0781,0.0245],[0.0156,-0.0781,0.0191],[0.0312,-0.0781,0.0191],[0.0469,-0.0781,0.0191],[0.0625,-0.0781,0.0176],[0.0781,-0.0781,0.0172],[0.0938,-0.0781,0.0176],[0.1094,-0.0781,0.0186],[0.125,-0.0781,0.0211],[0.1406,-0.0781,0.0235],[0.1562,-0.0781,0.023],[0.1719,-0.0781,0.0279],[0.1875,-0.0781,0.0333],[0.2031,-0.0781,0.0304],[0.2188,-0.0781,0.0265],[0.2344,-0.0781,0.0279],[0.25,-0.0781,0.0309],[0.2656,-0.0781,0.0289],[0.2812,-0.0781,0.0279],[0.2969,-0.0781,0.0279],[0.3125,-0.0781,0.0279],[0.3281,-0.0781,0.0275],[0.3438,-0.0781,0.0265],[0.3594,-0.0781,0.0265],[0.375,-0.0781,0.027],[0.3906,-0.0781,0.0284],[0.4062,-0.0781,0.0314],[0.4219,-0.0781,0.0363],[0.4375,-0.0781,0.0284],[0.4531,-0.0781,0.026],[0.4688,-0.0781,0.0245],[0.4844,-0.0781,0.025],[0.5,-0.0781,0.0235],[0.5156,-0.0781,0.0206],[0.5312,-0.0781,0.026],[0.5469,-0.0781,0.0211],[0.5625,-0.0781,0.0422],[0.5781,-0.0781,0.0466],[0.5938,-0.0781,0.0353],[0.6094,-0.0781,0.023],[0.625,-0.0781,0.0132],[0.6406,-0.0781,0.0284],[0.6562,-0.0781,0.0309],[0.6719,-0.0781,0.0279],[0.6875,-0.0781,0.0211],[0.7031,-0.0781,0.0108],[0.7188,-0.0781,0],[0.7344,-0.0781,0],[0.75,-0.0781,0],[0.7656,-0.0781,0],[0.7812,-0.0781,0],[0.7969,-0.0781,0],[0.8125,-0.0781,0],[0.8281,-0.0781,0],[0.8438,-0.0781,0],[0.8594,-0.0781,0],[0.875,-0.0781,0],[0.8906,-0.0781,0],[0.9062,-0.0781,0],[0.9219,-0.0781,0],[0.9375,-0.0781,0],[0.9531,-0.0781,0],[0.9688,-0.0781,0],[0.9844,-0.0781,0],[-1,-0.0625,0],[-0.9844,-0.0625,0],[-0.9688,-0.0625,0],[-0.9531,-0.0625,0],[-0.9375,-0.0625,0],[-0.9219,-0.0625,0],[-0.9062,-0.0625,0],[-0.8906,-0.0625,0.0015],[-0.875,-0.0625,0.0201],[-0.8594,-0.0625,0.0118],[-0.8438,-0.0625,0.0113],[-0.8281,-0.0625,0.0181],[-0.8125,-0.0625,0.0353],[-0.7969,-0.0625,0.0304],[-0.7812,-0.0625,0.0289],[-0.7656,-0.0625,0.0211],[-0.75,-0.0625,0.0392],[-0.7344,-0.0625,0.0289],[-0.7188,-0.0625,0.0446],[-0.7031,-0.0625,0.0451],[-0.6875,-0.0625,0.0348],[-0.6719,-0.0625,0.0225],[-0.6562,-0.0625,0.0338],[-0.6406,-0.0625,0.0343],[-0.625,-0.0625,0.0446],[-0.6094,-0.0625,0.0368],[-0.5938,-0.0625,0.0358],[-0.5781,-0.0625,0.0407],[-0.5625,-0.0625,0.0289],[-0.5469,-0.0625,0.0206],[-0.5312,-0.0625,0.0172],[-0.5156,-0.0625,0.0176],[-0.5,-0.0625,0.0225],[-0.4844,-0.0625,0.0216],[-0.4688,-0.0625,0.0299],[-0.4531,-0.0625,0.0436],[-0.4375,-0.0625,0.0431],[-0.4219,-0.0625,0.024],[-0.4062,-0.0625,0.0417],[-0.3906,-0.0625,0.076],[-0.375,-0.0625,0.0721],[-0.3594,-0.0625,0.0662],[-0.3438,-0.0625,0.0505],[-0.3281,-0.0625,0.0275],[-0.3125,-0.0625,0.0206],[-0.2969,-0.0625,0.0216],[-0.2812,-0.0625,0.0225],[-0.2656,-0.0625,0.0201],[-0.25,-0.0625,0.0186],[-0.2344,-0.0625,0.0176],[-0.2188,-0.0625,0.0176],[-0.2031,-0.0625,0.0176],[-0.1875,-0.0625,0.0191],[-0.1719,-0.0625,0.0186],[-0.1562,-0.0625,0.0172],[-0.1406,-0.0625,0.0181],[-0.125,-0.0625,0.0186],[-0.1094,-0.0625,0.0191],[-0.0938,-0.0625,0.0191],[-0.0781,-0.0625,0.0172],[-0.0625,-0.0625,0.0167],[-0.0469,-0.0625,0.0196],[-0.0312,-0.0625,0.0191],[-0.0156,-0.0625,0.0191],[0,-0.0625,0.0216],[0.0156,-0.0625,0.0186],[0.0312,-0.0625,0.0181],[0.0469,-0.0625,0.0191],[0.0625,-0.0625,0.0191],[0.0781,-0.0625,0.0176],[0.0938,-0.0625,0.0176],[0.1094,-0.0625,0.0181],[0.125,-0.0625,0.0196],[0.1406,-0.0625,0.0206],[0.1562,-0.0625,0.0216],[0.1719,-0.0625,0.0255],[0.1875,-0.0625,0.0284],[0.2031,-0.0625,0.025],[0.2188,-0.0625,0.0245],[0.2344,-0.0625,0.0358],[0.25,-0.0625,0.0319],[0.2656,-0.0625,0.0299],[0.2812,-0.0625,0.0289],[0.2969,-0.0625,0.0275],[0.3125,-0.0625,0.027],[0.3281,-0.0625,0.026],[0.3438,-0.0625,0.026],[0.3594,-0.0625,0.025],[0.375,-0.0625,0.025],[0.3906,-0.0625,0.0289],[0.4062,-0.0625,0.0279],[0.4219,-0.0625,0.0333],[0.4375,-0.0625,0.0309],[0.4531,-0.0625,0.0284],[0.4688,-0.0625,0.0265],[0.4844,-0.0625,0.0255],[0.5,-0.0625,0.025],[0.5156,-0.0625,0.0211],[0.5312,-0.0625,0.0181],[0.5469,-0.0625,0.0167],[0.5625,-0.0625,0.052],[0.5781,-0.0625,0.0588],[0.5938,-0.0625,0.0363],[0.6094,-0.0625,0.0206],[0.625,-0.0625,0.0157],[0.6406,-0.0625,0.0167],[0.6562,-0.0625,0.023],[0.6719,-0.0625,0.0176],[0.6875,-0.0625,0.0167],[0.7031,-0.0625,0.0123],[0.7188,-0.0625,0.0005],[0.7344,-0.0625,0],[0.75,-0.0625,0],[0.7656,-0.0625,0],[0.7812,-0.0625,0],[0.7969,-0.0625,0],[0.8125,-0.0625,0],[0.8281,-0.0625,0],[0.8438,-0.0625,0],[0.8594,-0.0625,0],[0.875,-0.0625,0],[0.8906,-0.0625,0],[0.9062,-0.0625,0],[0.9219,-0.0625,0],[0.9375,-0.0625,0],[0.9531,-0.0625,0],[0.9688,-0.0625,0],[0.9844,-0.0625,0],[-1,-0.0469,0],[-0.9844,-0.0469,0],[-0.9688,-0.0469,0],[-0.9531,-0.0469,0],[-0.9375,-0.0469,0],[-0.9219,-0.0469,0],[-0.9062,-0.0469,0],[-0.8906,-0.0469,0],[-0.875,-0.0469,0.0044],[-0.8594,-0.0469,0.0054],[-0.8438,-0.0469,0.0127],[-0.8281,-0.0469,0.0157],[-0.8125,-0.0469,0.0206],[-0.7969,-0.0469,0.0319],[-0.7812,-0.0469,0.0319],[-0.7656,-0.0469,0.027],[-0.75,-0.0469,0.027],[-0.7344,-0.0469,0.0304],[-0.7188,-0.0469,0.052],[-0.7031,-0.0469,0.0505],[-0.6875,-0.0469,0.0304],[-0.6719,-0.0469,0.0309],[-0.6562,-0.0469,0.0397],[-0.6406,-0.0469,0.0382],[-0.625,-0.0469,0.0525],[-0.6094,-0.0469,0.0456],[-0.5938,-0.0469,0.0407],[-0.5781,-0.0469,0.0343],[-0.5625,-0.0469,0.0338],[-0.5469,-0.0469,0.0235],[-0.5312,-0.0469,0.0181],[-0.5156,-0.0469,0.0299],[-0.5,-0.0469,0.0377],[-0.4844,-0.0469,0.0373],[-0.4688,-0.0469,0.0574],[-0.4531,-0.0469,0.0529],[-0.4375,-0.0469,0.0314],[-0.4219,-0.0469,0.0309],[-0.4062,-0.0469,0.0407],[-0.3906,-0.0469,0.0574],[-0.375,-0.0469,0.0377],[-0.3594,-0.0469,0.0613],[-0.3438,-0.0469,0.0569],[-0.3281,-0.0469,0.0358],[-0.3125,-0.0469,0.0225],[-0.2969,-0.0469,0.0211],[-0.2812,-0.0469,0.0216],[-0.2656,-0.0469,0.0206],[-0.25,-0.0469,0.0196],[-0.2344,-0.0469,0.0176],[-0.2188,-0.0469,0.0181],[-0.2031,-0.0469,0.0176],[-0.1875,-0.0469,0.0167],[-0.1719,-0.0469,0.0167],[-0.1562,-0.0469,0.0167],[-0.1406,-0.0469,0.0172],[-0.125,-0.0469,0.0176],[-0.1094,-0.0469,0.0181],[-0.0938,-0.0469,0.0172],[-0.0781,-0.0469,0.0157],[-0.0625,-0.0469,0.0162],[-0.0469,-0.0469,0.0176],[-0.0312,-0.0469,0.0181],[-0.0156,-0.0469,0.0176],[0,-0.0469,0.0186],[0.0156,-0.0469,0.0162],[0.0312,-0.0469,0.0172],[0.0469,-0.0469,0.0172],[0.0625,-0.0469,0.0181],[0.0781,-0.0469,0.0181],[0.0938,-0.0469,0.0191],[0.1094,-0.0469,0.0181],[0.125,-0.0469,0.0181],[0.1406,-0.0469,0.0196],[0.1562,-0.0469,0.0201],[0.1719,-0.0469,0.023],[0.1875,-0.0469,0.023],[0.2031,-0.0469,0.0206],[0.2188,-0.0469,0.0225],[0.2344,-0.0469,0.0279],[0.25,-0.0469,0.0373],[0.2656,-0.0469,0.0471],[0.2812,-0.0469,0.0456],[0.2969,-0.0469,0.0299],[0.3125,-0.0469,0.0279],[0.3281,-0.0469,0.026],[0.3438,-0.0469,0.0245],[0.3594,-0.0469,0.0245],[0.375,-0.0469,0.024],[0.3906,-0.0469,0.024],[0.4062,-0.0469,0.025],[0.4219,-0.0469,0.027],[0.4375,-0.0469,0.0279],[0.4531,-0.0469,0.026],[0.4688,-0.0469,0.0235],[0.4844,-0.0469,0.0211],[0.5,-0.0469,0.0221],[0.5156,-0.0469,0.0196],[0.5312,-0.0469,0.0181],[0.5469,-0.0469,0.0191],[0.5625,-0.0469,0.0657],[0.5781,-0.0469,0.0706],[0.5938,-0.0469,0.0373],[0.6094,-0.0469,0.0206],[0.625,-0.0469,0.0186],[0.6406,-0.0469,0.0157],[0.6562,-0.0469,0.0265],[0.6719,-0.0469,0.0211],[0.6875,-0.0469,0.0176],[0.7031,-0.0469,0.0176],[0.7188,-0.0469,0.0078],[0.7344,-0.0469,0.0098],[0.75,-0.0469,0],[0.7656,-0.0469,0],[0.7812,-0.0469,0],[0.7969,-0.0469,0],[0.8125,-0.0469,0],[0.8281,-0.0469,0],[0.8438,-0.0469,0],[0.8594,-0.0469,0],[0.875,-0.0469,0],[0.8906,-0.0469,0],[0.9062,-0.0469,0],[0.9219,-0.0469,0],[0.9375,-0.0469,0],[0.9531,-0.0469,0],[0.9688,-0.0469,0],[0.9844,-0.0469,0],[-1,-0.0312,0],[-0.9844,-0.0312,0],[-0.9688,-0.0312,0],[-0.9531,-0.0312,0],[-0.9375,-0.0312,0],[-0.9219,-0.0312,0],[-0.9062,-0.0312,0],[-0.8906,-0.0312,0],[-0.875,-0.0312,0.0113],[-0.8594,-0.0312,0.0118],[-0.8438,-0.0312,0.0201],[-0.8281,-0.0312,0.023],[-0.8125,-0.0312,0.027],[-0.7969,-0.0312,0.0216],[-0.7812,-0.0312,0.0392],[-0.7656,-0.0312,0.0343],[-0.75,-0.0312,0.0338],[-0.7344,-0.0312,0.0373],[-0.7188,-0.0312,0.0441],[-0.7031,-0.0312,0.0426],[-0.6875,-0.0312,0.0279],[-0.6719,-0.0312,0.0407],[-0.6562,-0.0312,0.049],[-0.6406,-0.0312,0.0471],[-0.625,-0.0312,0.0583],[-0.6094,-0.0312,0.0569],[-0.5938,-0.0312,0.0485],[-0.5781,-0.0312,0.0382],[-0.5625,-0.0312,0.0363],[-0.5469,-0.0312,0.0294],[-0.5312,-0.0312,0.0216],[-0.5156,-0.0312,0.025],[-0.5,-0.0312,0.0446],[-0.4844,-0.0312,0.0417],[-0.4688,-0.0312,0.0456],[-0.4531,-0.0312,0.0407],[-0.4375,-0.0312,0.023],[-0.4219,-0.0312,0.0235],[-0.4062,-0.0312,0.0289],[-0.3906,-0.0312,0.025],[-0.375,-0.0312,0.0559],[-0.3594,-0.0312,0.0569],[-0.3438,-0.0312,0.0701],[-0.3281,-0.0312,0.052],[-0.3125,-0.0312,0.0245],[-0.2969,-0.0312,0.0216],[-0.2812,-0.0312,0.0216],[-0.2656,-0.0312,0.0201],[-0.25,-0.0312,0.0186],[-0.2344,-0.0312,0.0186],[-0.2188,-0.0312,0.0167],[-0.2031,-0.0312,0.0172],[-0.1875,-0.0312,0.0176],[-0.1719,-0.0312,0.0172],[-0.1562,-0.0312,0.0162],[-0.1406,-0.0312,0.0167],[-0.125,-0.0312,0.0167],[-0.1094,-0.0312,0.0172],[-0.0938,-0.0312,0.0181],[-0.0781,-0.0312,0.0172],[-0.0625,-0.0312,0.0157],[-0.0469,-0.0312,0.0157],[-0.0312,-0.0312,0.0162],[-0.0156,-0.0312,0.0162],[0,-0.0312,0.0157],[0.0156,-0.0312,0.0157],[0.0312,-0.0312,0.0162],[0.0469,-0.0312,0.0167],[0.0625,-0.0312,0.0157],[0.0781,-0.0312,0.0167],[0.0938,-0.0312,0.0167],[0.1094,-0.0312,0.0181],[0.125,-0.0312,0.0172],[0.1406,-0.0312,0.0172],[0.1562,-0.0312,0.0181],[0.1719,-0.0312,0.0186],[0.1875,-0.0312,0.0201],[0.2031,-0.0312,0.0211],[0.2188,-0.0312,0.023],[0.2344,-0.0312,0.025],[0.25,-0.0312,0.0314],[0.2656,-0.0312,0.0539],[0.2812,-0.0312,0.0534],[0.2969,-0.0312,0.0402],[0.3125,-0.0312,0.0275],[0.3281,-0.0312,0.0245],[0.3438,-0.0312,0.0284],[0.3594,-0.0312,0.024],[0.375,-0.0312,0.0235],[0.3906,-0.0312,0.0225],[0.4062,-0.0312,0.0225],[0.4219,-0.0312,0.0216],[0.4375,-0.0312,0.024],[0.4531,-0.0312,0.0235],[0.4688,-0.0312,0.0206],[0.4844,-0.0312,0.0211],[0.5,-0.0312,0.0216],[0.5156,-0.0312,0.0201],[0.5312,-0.0312,0.0196],[0.5469,-0.0312,0.0216],[0.5625,-0.0312,0.0809],[0.5781,-0.0312,0.0534],[0.5938,-0.0312,0.0333],[0.6094,-0.0312,0.0221],[0.625,-0.0312,0.0221],[0.6406,-0.0312,0.0211],[0.6562,-0.0312,0.0333],[0.6719,-0.0312,0.0324],[0.6875,-0.0312,0.0255],[0.7031,-0.0312,0.0201],[0.7188,-0.0312,0.0113],[0.7344,-0.0312,0.0162],[0.75,-0.0312,0.0005],[0.7656,-0.0312,0],[0.7812,-0.0312,0],[0.7969,-0.0312,0],[0.8125,-0.0312,0],[0.8281,-0.0312,0],[0.8438,-0.0312,0],[0.8594,-0.0312,0],[0.875,-0.0312,0],[0.8906,-0.0312,0],[0.9062,-0.0312,0],[0.9219,-0.0312,0],[0.9375,-0.0312,0],[0.9531,-0.0312,0],[0.9688,-0.0312,0],[0.9844,-0.0312,0],[-1,-0.0156,0],[-0.9844,-0.0156,0],[-0.9688,-0.0156,0],[-0.9531,-0.0156,0],[-0.9375,-0.0156,0],[-0.9219,-0.0156,0],[-0.9062,-0.0156,0],[-0.8906,-0.0156,0],[-0.875,-0.0156,0.0206],[-0.8594,-0.0156,0.0176],[-0.8438,-0.0156,0.0245],[-0.8281,-0.0156,0.0387],[-0.8125,-0.0156,0.0559],[-0.7969,-0.0156,0.0441],[-0.7812,-0.0156,0.0471],[-0.7656,-0.0156,0.0505],[-0.75,-0.0156,0.0343],[-0.7344,-0.0156,0.048],[-0.7188,-0.0156,0.0422],[-0.7031,-0.0156,0.0368],[-0.6875,-0.0156,0.0441],[-0.6719,-0.0156,0.0373],[-0.6562,-0.0156,0.0554],[-0.6406,-0.0156,0.0662],[-0.625,-0.0156,0.0363],[-0.6094,-0.0156,0.0417],[-0.5938,-0.0156,0.0407],[-0.5781,-0.0156,0.0358],[-0.5625,-0.0156,0.0299],[-0.5469,-0.0156,0.0284],[-0.5312,-0.0156,0.0225],[-0.5156,-0.0156,0.0186],[-0.5,-0.0156,0.0451],[-0.4844,-0.0156,0.0353],[-0.4688,-0.0156,0.0314],[-0.4531,-0.0156,0.0245],[-0.4375,-0.0156,0.0319],[-0.4219,-0.0156,0.026],[-0.4062,-0.0156,0.0534],[-0.3906,-0.0156,0.0284],[-0.375,-0.0156,0.0392],[-0.3594,-0.0156,0.0333],[-0.3438,-0.0156,0.0583],[-0.3281,-0.0156,0.0691],[-0.3125,-0.0156,0.0279],[-0.2969,-0.0156,0.0221],[-0.2812,-0.0156,0.0221],[-0.2656,-0.0156,0.0211],[-0.25,-0.0156,0.0176],[-0.2344,-0.0156,0.0167],[-0.2188,-0.0156,0.0172],[-0.2031,-0.0156,0.0216],[-0.1875,-0.0156,0.0211],[-0.1719,-0.0156,0.0167],[-0.1562,-0.0156,0.0162],[-0.1406,-0.0156,0.0167],[-0.125,-0.0156,0.0167],[-0.1094,-0.0156,0.0186],[-0.0938,-0.0156,0.0176],[-0.0781,-0.0156,0.0157],[-0.0625,-0.0156,0.0162],[-0.0469,-0.0156,0.0157],[-0.0312,-0.0156,0.0157],[-0.0156,-0.0156,0.0167],[0,-0.0156,0.0172],[0.0156,-0.0156,0.0172],[0.0312,-0.0156,0.0157],[0.0469,-0.0156,0.0162],[0.0625,-0.0156,0.0162],[0.0781,-0.0156,0.0157],[0.0938,-0.0156,0.0157],[0.1094,-0.0156,0.0167],[0.125,-0.0156,0.0162],[0.1406,-0.0156,0.0167],[0.1562,-0.0156,0.0186],[0.1719,-0.0156,0.0196],[0.1875,-0.0156,0.026],[0.2031,-0.0156,0.024],[0.2188,-0.0156,0.024],[0.2344,-0.0156,0.0255],[0.25,-0.0156,0.0275],[0.2656,-0.0156,0.0333],[0.2812,-0.0156,0.0392],[0.2969,-0.0156,0.0475],[0.3125,-0.0156,0.0368],[0.3281,-0.0156,0.0377],[0.3438,-0.0156,0.0417],[0.3594,-0.0156,0.0392],[0.375,-0.0156,0.0294],[0.3906,-0.0156,0.025],[0.4062,-0.0156,0.0245],[0.4219,-0.0156,0.0221],[0.4375,-0.0156,0.0211],[0.4531,-0.0156,0.0206],[0.4688,-0.0156,0.0186],[0.4844,-0.0156,0.0382],[0.5,-0.0156,0.0446],[0.5156,-0.0156,0.0216],[0.5312,-0.0156,0.0201],[0.5469,-0.0156,0.0221],[0.5625,-0.0156,0.0809],[0.5781,-0.0156,0.0564],[0.5938,-0.0156,0.0397],[0.6094,-0.0156,0.023],[0.625,-0.0156,0.0211],[0.6406,-0.0156,0.0216],[0.6562,-0.0156,0.0358],[0.6719,-0.0156,0.0333],[0.6875,-0.0156,0.0255],[0.7031,-0.0156,0.0196],[0.7188,-0.0156,0.0118],[0.7344,-0.0156,0.0181],[0.75,-0.0156,0.0049],[0.7656,-0.0156,0.0025],[0.7812,-0.0156,0],[0.7969,-0.0156,0],[0.8125,-0.0156,0],[0.8281,-0.0156,0],[0.8438,-0.0156,0],[0.8594,-0.0156,0],[0.875,-0.0156,0],[0.8906,-0.0156,0],[0.9062,-0.0156,0],[0.9219,-0.0156,0],[0.9375,-0.0156,0],[0.9531,-0.0156,0],[0.9688,-0.0156,0],[0.9844,-0.0156,0],[-1,0,0],[-0.9844,0,0],[-0.9688,0,0],[-0.9531,0,0],[-0.9375,0,0],[-0.9219,0,0],[-0.9062,0,0],[-0.8906,0,0],[-0.875,0,0.001],[-0.8594,0,0.0034],[-0.8438,0,0.0181],[-0.8281,0,0.0279],[-0.8125,0,0.0485],[-0.7969,0,0.0529],[-0.7812,0,0.0716],[-0.7656,0,0.0569],[-0.75,0,0.0613],[-0.7344,0,0.0485],[-0.7188,0,0.0402],[-0.7031,0,0.0348],[-0.6875,0,0.052],[-0.6719,0,0.05],[-0.6562,0,0.076],[-0.6406,0,0.05],[-0.625,0,0.0196],[-0.6094,0,0.0201],[-0.5938,0,0.0245],[-0.5781,0,0.0299],[-0.5625,0,0.026],[-0.5469,0,0.0294],[-0.5312,0,0.0279],[-0.5156,0,0.0196],[-0.5,0,0.0319],[-0.4844,0,0.0279],[-0.4688,0,0.0245],[-0.4531,0,0.0294],[-0.4375,0,0.052],[-0.4219,0,0.0319],[-0.4062,0,0.0564],[-0.3906,0,0.0319],[-0.375,0,0.0225],[-0.3594,0,0.0176],[-0.3438,0,0.0176],[-0.3281,0,0.0206],[-0.3125,0,0.0206],[-0.2969,0,0.0196],[-0.2812,0,0.0201],[-0.2656,0,0.0201],[-0.25,0,0.0176],[-0.2344,0,0.0172],[-0.2188,0,0.0172],[-0.2031,0,0.0167],[-0.1875,0,0.0206],[-0.1719,0,0.0221],[-0.1562,0,0.0275],[-0.1406,0,0.0201],[-0.125,0,0.0162],[-0.1094,0,0.0157],[-0.0938,0,0.0157],[-0.0781,0,0.0176],[-0.0625,0,0.0186],[-0.0469,0,0.0201],[-0.0312,0,0.0201],[-0.0156,0,0.0181],[0,0,0.0186],[0.0156,0,0.0191],[0.0312,0,0.0162],[0.0469,0,0.0157],[0.0625,0,0.0162],[0.0781,0,0.0157],[0.0938,0,0.0167],[0.1094,0,0.0162],[0.125,0,0.0167],[0.1406,0,0.0181],[0.1562,0,0.0191],[0.1719,0,0.0201],[0.1875,0,0.0216],[0.2031,0,0.0221],[0.2188,0,0.025],[0.2344,0,0.0245],[0.25,0,0.026],[0.2656,0,0.0289],[0.2812,0,0.0397],[0.2969,0,0.0338],[0.3125,0,0.0397],[0.3281,0,0.0466],[0.3438,0,0.0485],[0.3594,0,0.0515],[0.375,0,0.0529],[0.3906,0,0.0377],[0.4062,0,0.0279],[0.4219,0,0.023],[0.4375,0,0.023],[0.4531,0,0.0216],[0.4688,0,0.0196],[0.4844,0,0.0431],[0.5,0,0.0676],[0.5156,0,0.0319],[0.5312,0,0.0211],[0.5469,0,0.024],[0.5625,0,0.0662],[0.5781,0,0.0471],[0.5938,0,0.0471],[0.6094,0,0.0235],[0.625,0,0.0221],[0.6406,0,0.0225],[0.6562,0,0.0328],[0.6719,0,0.0358],[0.6875,0,0.0289],[0.7031,0,0.024],[0.7188,0,0.0127],[0.7344,0,0.0181],[0.75,0,0.0123],[0.7656,0,0.0142],[0.7812,0,0],[0.7969,0,0],[0.8125,0,0],[0.8281,0,0],[0.8438,0,0],[0.8594,0,0],[0.875,0,0],[0.8906,0,0],[0.9062,0,0],[0.9219,0,0],[0.9375,0,0],[0.9531,0,0],[0.9688,0,0],[0.9844,0,0],[-1,0.0156,0],[-0.9844,0.0156,0],[-0.9688,0.0156,0],[-0.9531,0.0156,0],[-0.9375,0.0156,0],[-0.9219,0.0156,0],[-0.9062,0.0156,0],[-0.8906,0.0156,0],[-0.875,0.0156,0],[-0.8594,0.0156,0],[-0.8438,0.0156,0.0098],[-0.8281,0.0156,0.0196],[-0.8125,0.0156,0.0319],[-0.7969,0.0156,0.049],[-0.7812,0.0156,0.0578],[-0.7656,0.0156,0.0657],[-0.75,0.0156,0.0495],[-0.7344,0.0156,0.0363],[-0.7188,0.0156,0.0402],[-0.7031,0.0156,0.0397],[-0.6875,0.0156,0.0441],[-0.6719,0.0156,0.0544],[-0.6562,0.0156,0.077],[-0.6406,0.0156,0.0623],[-0.625,0.0156,0.0441],[-0.6094,0.0156,0.0172],[-0.5938,0.0156,0.0147],[-0.5781,0.0156,0.0172],[-0.5625,0.0156,0.0221],[-0.5469,0.0156,0.025],[-0.5312,0.0156,0.026],[-0.5156,0.0156,0.0191],[-0.5,0.0156,0.0221],[-0.4844,0.0156,0.0172],[-0.4688,0.0156,0.023],[-0.4531,0.0156,0.052],[-0.4375,0.0156,0.0461],[-0.4219,0.0156,0.0382],[-0.4062,0.0156,0.0647],[-0.3906,0.0156,0.0564],[-0.375,0.0156,0.0314],[-0.3594,0.0156,0.0186],[-0.3438,0.0156,0.0338],[-0.3281,0.0156,0.025],[-0.3125,0.0156,0.0206],[-0.2969,0.0156,0.0186],[-0.2812,0.0156,0.0176],[-0.2656,0.0156,0.0172],[-0.25,0.0156,0.0176],[-0.2344,0.0156,0.0191],[-0.2188,0.0156,0.0176],[-0.2031,0.0156,0.0181],[-0.1875,0.0156,0.0206],[-0.1719,0.0156,0.0181],[-0.1562,0.0156,0.0235],[-0.1406,0.0156,0.0235],[-0.125,0.0156,0.0176],[-0.1094,0.0156,0.0167],[-0.0938,0.0156,0.0167],[-0.0781,0.0156,0.0181],[-0.0625,0.0156,0.0225],[-0.0469,0.0156,0.0221],[-0.0312,0.0156,0.0206],[-0.0156,0.0156,0.0191],[0,0.0156,0.0196],[0.0156,0.0156,0.0201],[0.0312,0.0156,0.0186],[0.0469,0.0156,0.0186],[0.0625,0.0156,0.0162],[0.0781,0.0156,0.0176],[0.0938,0.0156,0.0186],[0.1094,0.0156,0.0162],[0.125,0.0156,0.0162],[0.1406,0.0156,0.0191],[0.1562,0.0156,0.0186],[0.1719,0.0156,0.0196],[0.1875,0.0156,0.0196],[0.2031,0.0156,0.0201],[0.2188,0.0156,0.0225],[0.2344,0.0156,0.027],[0.25,0.0156,0.024],[0.2656,0.0156,0.0245],[0.2812,0.0156,0.0245],[0.2969,0.0156,0.0412],[0.3125,0.0156,0.0422],[0.3281,0.0156,0.0534],[0.3438,0.0156,0.0539],[0.3594,0.0156,0.0539],[0.375,0.0156,0.0559],[0.3906,0.0156,0.0446],[0.4062,0.0156,0.0309],[0.4219,0.0156,0.025],[0.4375,0.0156,0.0255],[0.4531,0.0156,0.0235],[0.4688,0.0156,0.0255],[0.4844,0.0156,0.0426],[0.5,0.0156,0.0907],[0.5156,0.0156,0.052],[0.5312,0.0156,0.0245],[0.5469,0.0156,0.025],[0.5625,0.0156,0.0475],[0.5781,0.0156,0.0377],[0.5938,0.0156,0.0475],[0.6094,0.0156,0.0245],[0.625,0.0156,0.0201],[0.6406,0.0156,0.0206],[0.6562,0.0156,0.026],[0.6719,0.0156,0.0333],[0.6875,0.0156,0.0279],[0.7031,0.0156,0.0245],[0.7188,0.0156,0.0132],[0.7344,0.0156,0.0191],[0.75,0.0156,0.0162],[0.7656,0.0156,0.0186],[0.7812,0.0156,0],[0.7969,0.0156,0],[0.8125,0.0156,0],[0.8281,0.0156,0],[0.8438,0.0156,0],[0.8594,0.0156,0],[0.875,0.0156,0],[0.8906,0.0156,0],[0.9062,0.0156,0],[0.9219,0.0156,0],[0.9375,0.0156,0],[0.9531,0.0156,0],[0.9688,0.0156,0],[0.9844,0.0156,0],[-1,0.0312,0],[-0.9844,0.0312,0],[-0.9688,0.0312,0],[-0.9531,0.0312,0],[-0.9375,0.0312,0],[-0.9219,0.0312,0],[-0.9062,0.0312,0],[-0.8906,0.0312,0],[-0.875,0.0312,0],[-0.8594,0.0312,0.0034],[-0.8438,0.0312,0.0059],[-0.8281,0.0312,0.0157],[-0.8125,0.0312,0.0279],[-0.7969,0.0312,0.0328],[-0.7812,0.0312,0.0294],[-0.7656,0.0312,0.0603],[-0.75,0.0312,0.0642],[-0.7344,0.0312,0.023],[-0.7188,0.0312,0.0275],[-0.7031,0.0312,0.0382],[-0.6875,0.0312,0.0632],[-0.6719,0.0312,0.0426],[-0.6562,0.0312,0.0711],[-0.6406,0.0312,0.0436],[-0.625,0.0312,0.027],[-0.6094,0.0312,0.023],[-0.5938,0.0312,0.0103],[-0.5781,0.0312,0.0103],[-0.5625,0.0312,0.0157],[-0.5469,0.0312,0.0235],[-0.5312,0.0312,0.0206],[-0.5156,0.0312,0.0181],[-0.5,0.0312,0.0172],[-0.4844,0.0312,0.0328],[-0.4688,0.0312,0.0377],[-0.4531,0.0312,0.0485],[-0.4375,0.0312,0.0294],[-0.4219,0.0312,0.0373],[-0.4062,0.0312,0.0505],[-0.3906,0.0312,0.0377],[-0.375,0.0312,0.023],[-0.3594,0.0312,0.0382],[-0.3438,0.0312,0.0569],[-0.3281,0.0312,0.0466],[-0.3125,0.0312,0.027],[-0.2969,0.0312,0.0211],[-0.2812,0.0312,0.0176],[-0.2656,0.0312,0.0176],[-0.25,0.0312,0.0221],[-0.2344,0.0312,0.0221],[-0.2188,0.0312,0.0191],[-0.2031,0.0312,0.0196],[-0.1875,0.0312,0.0186],[-0.1719,0.0312,0.0181],[-0.1562,0.0312,0.0186],[-0.1406,0.0312,0.0186],[-0.125,0.0312,0.0196],[-0.1094,0.0312,0.0181],[-0.0938,0.0312,0.0191],[-0.0781,0.0312,0.026],[-0.0625,0.0312,0.0255],[-0.0469,0.0312,0.0225],[-0.0312,0.0312,0.0216],[-0.0156,0.0312,0.0221],[0,0.0312,0.0186],[0.0156,0.0312,0.0201],[0.0312,0.0312,0.0201],[0.0469,0.0312,0.0181],[0.0625,0.0312,0.0162],[0.0781,0.0312,0.0181],[0.0938,0.0312,0.0225],[0.1094,0.0312,0.0172],[0.125,0.0312,0.0157],[0.1406,0.0312,0.0176],[0.1562,0.0312,0.0167],[0.1719,0.0312,0.0176],[0.1875,0.0312,0.0191],[0.2031,0.0312,0.0191],[0.2188,0.0312,0.0211],[0.2344,0.0312,0.023],[0.25,0.0312,0.023],[0.2656,0.0312,0.0211],[0.2812,0.0312,0.0225],[0.2969,0.0312,0.0324],[0.3125,0.0312,0.0544],[0.3281,0.0312,0.0569],[0.3438,0.0312,0.048],[0.3594,0.0312,0.0525],[0.375,0.0312,0.052],[0.3906,0.0312,0.048],[0.4062,0.0312,0.0279],[0.4219,0.0312,0.025],[0.4375,0.0312,0.0265],[0.4531,0.0312,0.025],[0.4688,0.0312,0.0319],[0.4844,0.0312,0.0461],[0.5,0.0312,0.0917],[0.5156,0.0312,0.0676],[0.5312,0.0312,0.0309],[0.5469,0.0312,0.0289],[0.5625,0.0312,0.0451],[0.5781,0.0312,0.0319],[0.5938,0.0312,0.0392],[0.6094,0.0312,0.027],[0.625,0.0312,0.0221],[0.6406,0.0312,0.0186],[0.6562,0.0312,0.0275],[0.6719,0.0312,0.0402],[0.6875,0.0312,0.0328],[0.7031,0.0312,0.0275],[0.7188,0.0312,0.0147],[0.7344,0.0312,0.0172],[0.75,0.0312,0.0157],[0.7656,0.0312,0.0181],[0.7812,0.0312,0.0083],[0.7969,0.0312,0],[0.8125,0.0312,0],[0.8281,0.0312,0],[0.8438,0.0312,0],[0.8594,0.0312,0],[0.875,0.0312,0],[0.8906,0.0312,0],[0.9062,0.0312,0],[0.9219,0.0312,0],[0.9375,0.0312,0],[0.9531,0.0312,0],[0.9688,0.0312,0],[0.9844,0.0312,0],[-1,0.0469,0],[-0.9844,0.0469,0],[-0.9688,0.0469,0],[-0.9531,0.0469,0],[-0.9375,0.0469,0],[-0.9219,0.0469,0],[-0.9062,0.0469,0.0005],[-0.8906,0.0469,0.0054],[-0.875,0.0469,0],[-0.8594,0.0469,0.002],[-0.8438,0.0469,0.0069],[-0.8281,0.0469,0.0216],[-0.8125,0.0469,0.0446],[-0.7969,0.0469,0.0461],[-0.7812,0.0469,0.0451],[-0.7656,0.0469,0.0618],[-0.75,0.0469,0.0466],[-0.7344,0.0469,0.0299],[-0.7188,0.0469,0.0265],[-0.7031,0.0469,0.0412],[-0.6875,0.0469,0.05],[-0.6719,0.0469,0.0314],[-0.6562,0.0469,0.05],[-0.6406,0.0469,0.048],[-0.625,0.0469,0.0211],[-0.6094,0.0469,0.024],[-0.5938,0.0469,0.0167],[-0.5781,0.0469,0.0005],[-0.5625,0.0469,0.0083],[-0.5469,0.0469,0.0206],[-0.5312,0.0469,0.0167],[-0.5156,0.0469,0.0172],[-0.5,0.0469,0.0152],[-0.4844,0.0469,0.0485],[-0.4688,0.0469,0.0588],[-0.4531,0.0469,0.0377],[-0.4375,0.0469,0.023],[-0.4219,0.0469,0.026],[-0.4062,0.0469,0.0314],[-0.3906,0.0469,0.0225],[-0.375,0.0469,0.0353],[-0.3594,0.0469,0.0529],[-0.3438,0.0469,0.0559],[-0.3281,0.0469,0.0382],[-0.3125,0.0469,0.0196],[-0.2969,0.0469,0.0235],[-0.2812,0.0469,0.0176],[-0.2656,0.0469,0.0206],[-0.25,0.0469,0.0245],[-0.2344,0.0469,0.024],[-0.2188,0.0469,0.024],[-0.2031,0.0469,0.0201],[-0.1875,0.0469,0.0181],[-0.1719,0.0469,0.0191],[-0.1562,0.0469,0.0211],[-0.1406,0.0469,0.0245],[-0.125,0.0469,0.025],[-0.1094,0.0469,0.0196],[-0.0938,0.0469,0.0181],[-0.0781,0.0469,0.0225],[-0.0625,0.0469,0.0216],[-0.0469,0.0469,0.0221],[-0.0312,0.0469,0.0211],[-0.0156,0.0469,0.0196],[0,0.0469,0.0176],[0.0156,0.0469,0.0176],[0.0312,0.0469,0.0176],[0.0469,0.0469,0.0167],[0.0625,0.0469,0.0172],[0.0781,0.0469,0.0211],[0.0938,0.0469,0.0221],[0.1094,0.0469,0.0206],[0.125,0.0469,0.0186],[0.1406,0.0469,0.0167],[0.1562,0.0469,0.0157],[0.1719,0.0469,0.0167],[0.1875,0.0469,0.0186],[0.2031,0.0469,0.0186],[0.2188,0.0469,0.0196],[0.2344,0.0469,0.0221],[0.25,0.0469,0.0186],[0.2656,0.0469,0.0191],[0.2812,0.0469,0.0225],[0.2969,0.0469,0.0319],[0.3125,0.0469,0.0549],[0.3281,0.0469,0.0578],[0.3438,0.0469,0.0588],[0.3594,0.0469,0.049],[0.375,0.0469,0.05],[0.3906,0.0469,0.0348],[0.4062,0.0469,0.023],[0.4219,0.0469,0.0221],[0.4375,0.0469,0.0255],[0.4531,0.0469,0.0265],[0.4688,0.0469,0.0377],[0.4844,0.0469,0.0304],[0.5,0.0469,0.0917],[0.5156,0.0469,0.074],[0.5312,0.0469,0.0387],[0.5469,0.0469,0.0279],[0.5625,0.0469,0.0422],[0.5781,0.0469,0.0373],[0.5938,0.0469,0.0255],[0.6094,0.0469,0.0191],[0.625,0.0469,0.026],[0.6406,0.0469,0.0186],[0.6562,0.0469,0.0279],[0.6719,0.0469,0.0338],[0.6875,0.0469,0.0275],[0.7031,0.0469,0.023],[0.7188,0.0469,0.0137],[0.7344,0.0469,0.0137],[0.75,0.0469,0.0142],[0.7656,0.0469,0.0181],[0.7812,0.0469,0.0093],[0.7969,0.0469,0],[0.8125,0.0469,0],[0.8281,0.0469,0],[0.8438,0.0469,0],[0.8594,0.0469,0],[0.875,0.0469,0],[0.8906,0.0469,0],[0.9062,0.0469,0],[0.9219,0.0469,0],[0.9375,0.0469,0],[0.9531,0.0469,0],[0.9688,0.0469,0],[0.9844,0.0469,0],[-1,0.0625,0],[-0.9844,0.0625,0],[-0.9688,0.0625,0],[-0.9531,0.0625,0],[-0.9375,0.0625,0],[-0.9219,0.0625,0],[-0.9062,0.0625,0.0015],[-0.8906,0.0625,0.002],[-0.875,0.0625,0],[-0.8594,0.0625,0],[-0.8438,0.0625,0.0108],[-0.8281,0.0625,0.0275],[-0.8125,0.0625,0.0235],[-0.7969,0.0625,0.0245],[-0.7812,0.0625,0.0304],[-0.7656,0.0625,0.0294],[-0.75,0.0625,0.0324],[-0.7344,0.0625,0.023],[-0.7188,0.0625,0.0245],[-0.7031,0.0625,0.0216],[-0.6875,0.0625,0.0363],[-0.6719,0.0625,0.0279],[-0.6562,0.0625,0.0382],[-0.6406,0.0625,0.048],[-0.625,0.0625,0.0309],[-0.6094,0.0625,0.0176],[-0.5938,0.0625,0.0152],[-0.5781,0.0625,0.0069],[-0.5625,0.0625,0],[-0.5469,0.0625,0.0049],[-0.5312,0.0625,0.0098],[-0.5156,0.0625,0.0137],[-0.5,0.0625,0.0181],[-0.4844,0.0625,0.0623],[-0.4688,0.0625,0.0603],[-0.4531,0.0625,0.0353],[-0.4375,0.0625,0.0294],[-0.4219,0.0625,0.0397],[-0.4062,0.0625,0.0201],[-0.3906,0.0625,0.0186],[-0.375,0.0625,0.0299],[-0.3594,0.0625,0.0549],[-0.3438,0.0625,0.0412],[-0.3281,0.0625,0.0255],[-0.3125,0.0625,0.023],[-0.2969,0.0625,0.0216],[-0.2812,0.0625,0.0176],[-0.2656,0.0625,0.0255],[-0.25,0.0625,0.0245],[-0.2344,0.0625,0.026],[-0.2188,0.0625,0.024],[-0.2031,0.0625,0.0216],[-0.1875,0.0625,0.0211],[-0.1719,0.0625,0.023],[-0.1562,0.0625,0.0245],[-0.1406,0.0625,0.0225],[-0.125,0.0625,0.0221],[-0.1094,0.0625,0.0221],[-0.0938,0.0625,0.0201],[-0.0781,0.0625,0.0181],[-0.0625,0.0625,0.0181],[-0.0469,0.0625,0.0181],[-0.0312,0.0625,0.0181],[-0.0156,0.0625,0.0167],[0,0.0625,0.0172],[0.0156,0.0625,0.0172],[0.0312,0.0625,0.0172],[0.0469,0.0625,0.0191],[0.0625,0.0625,0.0201],[0.0781,0.0625,0.023],[0.0938,0.0625,0.0206],[0.1094,0.0625,0.0196],[0.125,0.0625,0.0186],[0.1406,0.0625,0.0186],[0.1562,0.0625,0.0167],[0.1719,0.0625,0.0157],[0.1875,0.0625,0.0176],[0.2031,0.0625,0.0216],[0.2188,0.0625,0.0172],[0.2344,0.0625,0.0176],[0.25,0.0625,0.0172],[0.2656,0.0625,0.0201],[0.2812,0.0625,0.0206],[0.2969,0.0625,0.0407],[0.3125,0.0625,0.0696],[0.3281,0.0625,0.0588],[0.3438,0.0625,0.0446],[0.3594,0.0625,0.0485],[0.375,0.0625,0.0348],[0.3906,0.0625,0.023],[0.4062,0.0625,0.0196],[0.4219,0.0625,0.0225],[0.4375,0.0625,0.0289],[0.4531,0.0625,0.0284],[0.4688,0.0625,0.0377],[0.4844,0.0625,0.0319],[0.5,0.0625,0.049],[0.5156,0.0625,0.0775],[0.5312,0.0625,0.0417],[0.5469,0.0625,0.026],[0.5625,0.0625,0.0353],[0.5781,0.0625,0.0368],[0.5938,0.0625,0.0211],[0.6094,0.0625,0.0186],[0.625,0.0625,0.024],[0.6406,0.0625,0.0181],[0.6562,0.0625,0.0255],[0.6719,0.0625,0.0343],[0.6875,0.0625,0.0319],[0.7031,0.0625,0.0299],[0.7188,0.0625,0.0191],[0.7344,0.0625,0.0137],[0.75,0.0625,0.0118],[0.7656,0.0625,0.0103],[0.7812,0.0625,0.0064],[0.7969,0.0625,0],[0.8125,0.0625,0],[0.8281,0.0625,0],[0.8438,0.0625,0],[0.8594,0.0625,0],[0.875,0.0625,0],[0.8906,0.0625,0],[0.9062,0.0625,0],[0.9219,0.0625,0],[0.9375,0.0625,0],[0.9531,0.0625,0],[0.9688,0.0625,0],[0.9844,0.0625,0],[-1,0.0781,0],[-0.9844,0.0781,0],[-0.9688,0.0781,0],[-0.9531,0.0781,0],[-0.9375,0.0781,0],[-0.9219,0.0781,0],[-0.9062,0.0781,0],[-0.8906,0.0781,0],[-0.875,0.0781,0],[-0.8594,0.0781,0],[-0.8438,0.0781,0.0029],[-0.8281,0.0781,0.0093],[-0.8125,0.0781,0.0103],[-0.7969,0.0781,0.0123],[-0.7812,0.0781,0.0147],[-0.7656,0.0781,0.0191],[-0.75,0.0781,0.0196],[-0.7344,0.0781,0.0196],[-0.7188,0.0781,0.0162],[-0.7031,0.0781,0.0157],[-0.6875,0.0781,0.0314],[-0.6719,0.0781,0.0211],[-0.6562,0.0781,0.0289],[-0.6406,0.0781,0.0328],[-0.625,0.0781,0.0338],[-0.6094,0.0781,0.0284],[-0.5938,0.0781,0.0108],[-0.5781,0.0781,0.0029],[-0.5625,0.0781,0],[-0.5469,0.0781,0],[-0.5312,0.0781,0],[-0.5156,0.0781,0.0083],[-0.5,0.0781,0.0186],[-0.4844,0.0781,0.0304],[-0.4688,0.0781,0.0392],[-0.4531,0.0781,0.0544],[-0.4375,0.0781,0.0373],[-0.4219,0.0781,0.0402],[-0.4062,0.0781,0.0186],[-0.3906,0.0781,0.0162],[-0.375,0.0781,0.0235],[-0.3594,0.0781,0.0324],[-0.3438,0.0781,0.0255],[-0.3281,0.0781,0.0299],[-0.3125,0.0781,0.0196],[-0.2969,0.0781,0.0255],[-0.2812,0.0781,0.0304],[-0.2656,0.0781,0.0235],[-0.25,0.0781,0.026],[-0.2344,0.0781,0.023],[-0.2188,0.0781,0.0216],[-0.2031,0.0781,0.0255],[-0.1875,0.0781,0.0284],[-0.1719,0.0781,0.0255],[-0.1562,0.0781,0.026],[-0.1406,0.0781,0.0235],[-0.125,0.0781,0.0216],[-0.1094,0.0781,0.0196],[-0.0938,0.0781,0.0196],[-0.0781,0.0781,0.0176],[-0.0625,0.0781,0.0181],[-0.0469,0.0781,0.0176],[-0.0312,0.0781,0.0176],[-0.0156,0.0781,0.0176],[0,0.0781,0.0191],[0.0156,0.0781,0.0176],[0.0312,0.0781,0.0181],[0.0469,0.0781,0.0201],[0.0625,0.0781,0.0216],[0.0781,0.0781,0.0216],[0.0938,0.0781,0.0201],[0.1094,0.0781,0.0181],[0.125,0.0781,0.0172],[0.1406,0.0781,0.0167],[0.1562,0.0781,0.0157],[0.1719,0.0781,0.0157],[0.1875,0.0781,0.0152],[0.2031,0.0781,0.0152],[0.2188,0.0781,0.0152],[0.2344,0.0781,0.0152],[0.25,0.0781,0.0191],[0.2656,0.0781,0.0338],[0.2812,0.0781,0.0289],[0.2969,0.0781,0.0314],[0.3125,0.0781,0.049],[0.3281,0.0781,0.05],[0.3438,0.0781,0.0475],[0.3594,0.0781,0.0578],[0.375,0.0781,0.0255],[0.3906,0.0781,0.0186],[0.4062,0.0781,0.0191],[0.4219,0.0781,0.0245],[0.4375,0.0781,0.0309],[0.4531,0.0781,0.0294],[0.4688,0.0781,0.0299],[0.4844,0.0781,0.0338],[0.5,0.0781,0.0338],[0.5156,0.0781,0.0392],[0.5312,0.0781,0.0426],[0.5469,0.0781,0.0245],[0.5625,0.0781,0.026],[0.5781,0.0781,0.0299],[0.5938,0.0781,0.0191],[0.6094,0.0781,0.0186],[0.625,0.0781,0.0328],[0.6406,0.0781,0.024],[0.6562,0.0781,0.0255],[0.6719,0.0781,0.0382],[0.6875,0.0781,0.0358],[0.7031,0.0781,0.0309],[0.7188,0.0781,0.0211],[0.7344,0.0781,0.0132],[0.75,0.0781,0.0142],[0.7656,0.0781,0.0113],[0.7812,0.0781,0.0181],[0.7969,0.0781,0.0132],[0.8125,0.0781,0.0039],[0.8281,0.0781,0],[0.8438,0.0781,0],[0.8594,0.0781,0],[0.875,0.0781,0],[0.8906,0.0781,0],[0.9062,0.0781,0],[0.9219,0.0781,0],[0.9375,0.0781,0],[0.9531,0.0781,0],[0.9688,0.0781,0],[0.9844,0.0781,0],[-1,0.0938,0],[-0.9844,0.0938,0],[-0.9688,0.0938,0],[-0.9531,0.0938,0],[-0.9375,0.0938,0],[-0.9219,0.0938,0],[-0.9062,0.0938,0],[-0.8906,0.0938,0],[-0.875,0.0938,0],[-0.8594,0.0938,0],[-0.8438,0.0938,0],[-0.8281,0.0938,0.001],[-0.8125,0.0938,0.0059],[-0.7969,0.0938,0.0049],[-0.7812,0.0938,0.0127],[-0.7656,0.0938,0.0167],[-0.75,0.0938,0.0137],[-0.7344,0.0938,0.0157],[-0.7188,0.0938,0.0088],[-0.7031,0.0938,0.0137],[-0.6875,0.0938,0.0152],[-0.6719,0.0938,0.0172],[-0.6562,0.0938,0.0196],[-0.6406,0.0938,0.0353],[-0.625,0.0938,0.0275],[-0.6094,0.0938,0.024],[-0.5938,0.0938,0.0167],[-0.5781,0.0938,0.0064],[-0.5625,0.0938,0],[-0.5469,0.0938,0],[-0.5312,0.0938,0],[-0.5156,0.0938,0.0054],[-0.5,0.0938,0.0167],[-0.4844,0.0938,0.0426],[-0.4688,0.0938,0.077],[-0.4531,0.0938,0.0549],[-0.4375,0.0938,0.0515],[-0.4219,0.0938,0.0348],[-0.4062,0.0938,0.0167],[-0.3906,0.0938,0.0235],[-0.375,0.0938,0.0216],[-0.3594,0.0938,0.0225],[-0.3438,0.0938,0.0221],[-0.3281,0.0938,0.0206],[-0.3125,0.0938,0.0368],[-0.2969,0.0938,0.0324],[-0.2812,0.0938,0.0358],[-0.2656,0.0938,0.0225],[-0.25,0.0938,0.0235],[-0.2344,0.0938,0.0211],[-0.2188,0.0938,0.0211],[-0.2031,0.0938,0.0245],[-0.1875,0.0938,0.0299],[-0.1719,0.0938,0.0284],[-0.1562,0.0938,0.0245],[-0.1406,0.0938,0.025],[-0.125,0.0938,0.0221],[-0.1094,0.0938,0.0201],[-0.0938,0.0938,0.0211],[-0.0781,0.0938,0.0225],[-0.0625,0.0938,0.0191],[-0.0469,0.0938,0.0186],[-0.0312,0.0938,0.0186],[-0.0156,0.0938,0.0191],[0,0.0938,0.0196],[0.0156,0.0938,0.0196],[0.0312,0.0938,0.0201],[0.0469,0.0938,0.0225],[0.0625,0.0938,0.024],[0.0781,0.0938,0.023],[0.0938,0.0938,0.0216],[0.1094,0.0938,0.0196],[0.125,0.0938,0.0201],[0.1406,0.0938,0.0172],[0.1562,0.0938,0.0201],[0.1719,0.0938,0.0181],[0.1875,0.0938,0.0176],[0.2031,0.0938,0.0162],[0.2188,0.0938,0.0162],[0.2344,0.0938,0.0152],[0.25,0.0938,0.025],[0.2656,0.0938,0.0446],[0.2812,0.0938,0.049],[0.2969,0.0938,0.0255],[0.3125,0.0938,0.0348],[0.3281,0.0938,0.0299],[0.3438,0.0938,0.0368],[0.3594,0.0938,0.0358],[0.375,0.0938,0.0201],[0.3906,0.0938,0.0181],[0.4062,0.0938,0.025],[0.4219,0.0938,0.0309],[0.4375,0.0938,0.0279],[0.4531,0.0938,0.0265],[0.4688,0.0938,0.0284],[0.4844,0.0938,0.0299],[0.5,0.0938,0.0353],[0.5156,0.0938,0.0368],[0.5312,0.0938,0.0348],[0.5469,0.0938,0.026],[0.5625,0.0938,0.0211],[0.5781,0.0938,0.0201],[0.5938,0.0938,0.0186],[0.6094,0.0938,0.0191],[0.625,0.0938,0.0348],[0.6406,0.0938,0.0358],[0.6562,0.0938,0.027],[0.6719,0.0938,0.0343],[0.6875,0.0938,0.0299],[0.7031,0.0938,0.0245],[0.7188,0.0938,0.0201],[0.7344,0.0938,0.0118],[0.75,0.0938,0.024],[0.7656,0.0938,0.0137],[0.7812,0.0938,0.026],[0.7969,0.0938,0.0196],[0.8125,0.0938,0.0186],[0.8281,0.0938,0.0005],[0.8438,0.0938,0],[0.8594,0.0938,0],[0.875,0.0938,0],[0.8906,0.0938,0],[0.9062,0.0938,0],[0.9219,0.0938,0],[0.9375,0.0938,0],[0.9531,0.0938,0],[0.9688,0.0938,0],[0.9844,0.0938,0],[-1,0.1094,0],[-0.9844,0.1094,0],[-0.9688,0.1094,0],[-0.9531,0.1094,0],[-0.9375,0.1094,0],[-0.9219,0.1094,0],[-0.9062,0.1094,0],[-0.8906,0.1094,0],[-0.875,0.1094,0],[-0.8594,0.1094,0],[-0.8438,0.1094,0],[-0.8281,0.1094,0],[-0.8125,0.1094,0.0005],[-0.7969,0.1094,0.0025],[-0.7812,0.1094,0.0098],[-0.7656,0.1094,0.0127],[-0.75,0.1094,0.0093],[-0.7344,0.1094,0.0186],[-0.7188,0.1094,0.0176],[-0.7031,0.1094,0.001],[-0.6875,0.1094,0.0142],[-0.6719,0.1094,0.0142],[-0.6562,0.1094,0.0132],[-0.6406,0.1094,0.0363],[-0.625,0.1094,0.0309],[-0.6094,0.1094,0.0216],[-0.5938,0.1094,0.0142],[-0.5781,0.1094,0.0054],[-0.5625,0.1094,0.0029],[-0.5469,0.1094,0],[-0.5312,0.1094,0],[-0.5156,0.1094,0.001],[-0.5,0.1094,0.0142],[-0.4844,0.1094,0.0191],[-0.4688,0.1094,0.0564],[-0.4531,0.1094,0.0598],[-0.4375,0.1094,0.0392],[-0.4219,0.1094,0.0201],[-0.4062,0.1094,0.0137],[-0.3906,0.1094,0.027],[-0.375,0.1094,0.0181],[-0.3594,0.1094,0.0191],[-0.3438,0.1094,0.0186],[-0.3281,0.1094,0.025],[-0.3125,0.1094,0.0373],[-0.2969,0.1094,0.0255],[-0.2812,0.1094,0.0299],[-0.2656,0.1094,0.0216],[-0.25,0.1094,0.0206],[-0.2344,0.1094,0.0221],[-0.2188,0.1094,0.0235],[-0.2031,0.1094,0.0265],[-0.1875,0.1094,0.0245],[-0.1719,0.1094,0.0255],[-0.1562,0.1094,0.023],[-0.1406,0.1094,0.0201],[-0.125,0.1094,0.0196],[-0.1094,0.1094,0.0235],[-0.0938,0.1094,0.0245],[-0.0781,0.1094,0.025],[-0.0625,0.1094,0.0216],[-0.0469,0.1094,0.0196],[-0.0312,0.1094,0.0191],[-0.0156,0.1094,0.0211],[0,0.1094,0.0201],[0.0156,0.1094,0.0221],[0.0312,0.1094,0.024],[0.0469,0.1094,0.027],[0.0625,0.1094,0.0284],[0.0781,0.1094,0.0255],[0.0938,0.1094,0.023],[0.1094,0.1094,0.0221],[0.125,0.1094,0.0191],[0.1406,0.1094,0.0181],[0.1562,0.1094,0.025],[0.1719,0.1094,0.026],[0.1875,0.1094,0.0294],[0.2031,0.1094,0.0299],[0.2188,0.1094,0.024],[0.2344,0.1094,0.0157],[0.25,0.1094,0.0167],[0.2656,0.1094,0.0338],[0.2812,0.1094,0.0338],[0.2969,0.1094,0.0191],[0.3125,0.1094,0.0225],[0.3281,0.1094,0.0196],[0.3438,0.1094,0.0186],[0.3594,0.1094,0.0225],[0.375,0.1094,0.0176],[0.3906,0.1094,0.0181],[0.4062,0.1094,0.025],[0.4219,0.1094,0.0265],[0.4375,0.1094,0.025],[0.4531,0.1094,0.024],[0.4688,0.1094,0.027],[0.4844,0.1094,0.0299],[0.5,0.1094,0.0534],[0.5156,0.1094,0.0431],[0.5312,0.1094,0.0387],[0.5469,0.1094,0.0319],[0.5625,0.1094,0.0221],[0.5781,0.1094,0.0221],[0.5938,0.1094,0.0211],[0.6094,0.1094,0.0211],[0.625,0.1094,0.0475],[0.6406,0.1094,0.0431],[0.6562,0.1094,0.0314],[0.6719,0.1094,0.0343],[0.6875,0.1094,0.0289],[0.7031,0.1094,0.0245],[0.7188,0.1094,0.0221],[0.7344,0.1094,0.0132],[0.75,0.1094,0.0255],[0.7656,0.1094,0.0181],[0.7812,0.1094,0.026],[0.7969,0.1094,0.0191],[0.8125,0.1094,0.0186],[0.8281,0.1094,0.0088],[0.8438,0.1094,0],[0.8594,0.1094,0],[0.875,0.1094,0],[0.8906,0.1094,0],[0.9062,0.1094,0],[0.9219,0.1094,0],[0.9375,0.1094,0],[0.9531,0.1094,0],[0.9688,0.1094,0],[0.9844,0.1094,0],[-1,0.125,0],[-0.9844,0.125,0],[-0.9688,0.125,0],[-0.9531,0.125,0],[-0.9375,0.125,0],[-0.9219,0.125,0],[-0.9062,0.125,0],[-0.8906,0.125,0],[-0.875,0.125,0],[-0.8594,0.125,0],[-0.8438,0.125,0],[-0.8281,0.125,0],[-0.8125,0.125,0],[-0.7969,0.125,0.0039],[-0.7812,0.125,0.0005],[-0.7656,0.125,0.0064],[-0.75,0.125,0.0054],[-0.7344,0.125,0.0069],[-0.7188,0.125,0.0015],[-0.7031,0.125,0.0005],[-0.6875,0.125,0.0176],[-0.6719,0.125,0.0108],[-0.6562,0.125,0.0181],[-0.6406,0.125,0.0505],[-0.625,0.125,0.0593],[-0.6094,0.125,0.0431],[-0.5938,0.125,0.0221],[-0.5781,0.125,0.0078],[-0.5625,0.125,0.0029],[-0.5469,0.125,0],[-0.5312,0.125,0],[-0.5156,0.125,0.0039],[-0.5,0.125,0.0093],[-0.4844,0.125,0.0157],[-0.4688,0.125,0.0373],[-0.4531,0.125,0.0515],[-0.4375,0.125,0.0157],[-0.4219,0.125,0.0132],[-0.4062,0.125,0.0162],[-0.3906,0.125,0.0211],[-0.375,0.125,0.0157],[-0.3594,0.125,0.0176],[-0.3438,0.125,0.0216],[-0.3281,0.125,0.0245],[-0.3125,0.125,0.0255],[-0.2969,0.125,0.0216],[-0.2812,0.125,0.0221],[-0.2656,0.125,0.024],[-0.25,0.125,0.0201],[-0.2344,0.125,0.023],[-0.2188,0.125,0.0275],[-0.2031,0.125,0.0284],[-0.1875,0.125,0.025],[-0.1719,0.125,0.0211],[-0.1562,0.125,0.0206],[-0.1406,0.125,0.0201],[-0.125,0.125,0.0225],[-0.1094,0.125,0.0245],[-0.0938,0.125,0.025],[-0.0781,0.125,0.0225],[-0.0625,0.125,0.0216],[-0.0469,0.125,0.0201],[-0.0312,0.125,0.0191],[-0.0156,0.125,0.0206],[0,0.125,0.0216],[0.0156,0.125,0.0225],[0.0312,0.125,0.025],[0.0469,0.125,0.026],[0.0625,0.125,0.0255],[0.0781,0.125,0.0235],[0.0938,0.125,0.0221],[0.1094,0.125,0.0221],[0.125,0.125,0.0206],[0.1406,0.125,0.024],[0.1562,0.125,0.0299],[0.1719,0.125,0.0328],[0.1875,0.125,0.0402],[0.2031,0.125,0.051],[0.2188,0.125,0.0373],[0.2344,0.125,0.0167],[0.25,0.125,0.025],[0.2656,0.125,0.0216],[0.2812,0.125,0.0333],[0.2969,0.125,0.0225],[0.3125,0.125,0.0157],[0.3281,0.125,0.0162],[0.3438,0.125,0.0157],[0.3594,0.125,0.0157],[0.375,0.125,0.0157],[0.3906,0.125,0.0201],[0.4062,0.125,0.0235],[0.4219,0.125,0.023],[0.4375,0.125,0.0225],[0.4531,0.125,0.024],[0.4688,0.125,0.025],[0.4844,0.125,0.0265],[0.5,0.125,0.0314],[0.5156,0.125,0.0446],[0.5312,0.125,0.0426],[0.5469,0.125,0.0363],[0.5625,0.125,0.024],[0.5781,0.125,0.0216],[0.5938,0.125,0.0206],[0.6094,0.125,0.0206],[0.625,0.125,0.0549],[0.6406,0.125,0.0436],[0.6562,0.125,0.0387],[0.6719,0.125,0.0353],[0.6875,0.125,0.0299],[0.7031,0.125,0.027],[0.7188,0.125,0.0206],[0.7344,0.125,0.0132],[0.75,0.125,0.0294],[0.7656,0.125,0.0225],[0.7812,0.125,0.0255],[0.7969,0.125,0.0206],[0.8125,0.125,0.0162],[0.8281,0.125,0.0172],[0.8438,0.125,0.001],[0.8594,0.125,0],[0.875,0.125,0],[0.8906,0.125,0],[0.9062,0.125,0],[0.9219,0.125,0],[0.9375,0.125,0],[0.9531,0.125,0],[0.9688,0.125,0],[0.9844,0.125,0],[-1,0.1406,0],[-0.9844,0.1406,0],[-0.9688,0.1406,0],[-0.9531,0.1406,0],[-0.9375,0.1406,0],[-0.9219,0.1406,0],[-0.9062,0.1406,0],[-0.8906,0.1406,0],[-0.875,0.1406,0],[-0.8594,0.1406,0],[-0.8438,0.1406,0],[-0.8281,0.1406,0],[-0.8125,0.1406,0],[-0.7969,0.1406,0],[-0.7812,0.1406,0.0074],[-0.7656,0.1406,0.0284],[-0.75,0.1406,0.0064],[-0.7344,0.1406,0],[-0.7188,0.1406,0],[-0.7031,0.1406,0.002],[-0.6875,0.1406,0.0103],[-0.6719,0.1406,0.0064],[-0.6562,0.1406,0.0196],[-0.6406,0.1406,0.0417],[-0.625,0.1406,0.0485],[-0.6094,0.1406,0.0549],[-0.5938,0.1406,0.0397],[-0.5781,0.1406,0.0015],[-0.5625,0.1406,0],[-0.5469,0.1406,0],[-0.5312,0.1406,0],[-0.5156,0.1406,0],[-0.5,0.1406,0],[-0.4844,0.1406,0.0098],[-0.4688,0.1406,0.0191],[-0.4531,0.1406,0.0157],[-0.4375,0.1406,0.0113],[-0.4219,0.1406,0.0088],[-0.4062,0.1406,0.0162],[-0.3906,0.1406,0.0137],[-0.375,0.1406,0.0216],[-0.3594,0.1406,0.0216],[-0.3438,0.1406,0.024],[-0.3281,0.1406,0.0221],[-0.3125,0.1406,0.0196],[-0.2969,0.1406,0.0201],[-0.2812,0.1406,0.0221],[-0.2656,0.1406,0.0289],[-0.25,0.1406,0.0225],[-0.2344,0.1406,0.0221],[-0.2188,0.1406,0.0255],[-0.2031,0.1406,0.025],[-0.1875,0.1406,0.023],[-0.1719,0.1406,0.0221],[-0.1562,0.1406,0.0211],[-0.1406,0.1406,0.0211],[-0.125,0.1406,0.0225],[-0.1094,0.1406,0.023],[-0.0938,0.1406,0.0235],[-0.0781,0.1406,0.0235],[-0.0625,0.1406,0.023],[-0.0469,0.1406,0.0216],[-0.0312,0.1406,0.0206],[-0.0156,0.1406,0.0216],[0,0.1406,0.0245],[0.0156,0.1406,0.026],[0.0312,0.1406,0.0245],[0.0469,0.1406,0.0221],[0.0625,0.1406,0.0221],[0.0781,0.1406,0.0221],[0.0938,0.1406,0.0235],[0.1094,0.1406,0.027],[0.125,0.1406,0.0304],[0.1406,0.1406,0.0373],[0.1562,0.1406,0.0319],[0.1719,0.1406,0.0353],[0.1875,0.1406,0.0348],[0.2031,0.1406,0.0485],[0.2188,0.1406,0.0466],[0.2344,0.1406,0.0211],[0.25,0.1406,0.0265],[0.2656,0.1406,0.048],[0.2812,0.1406,0.0662],[0.2969,0.1406,0.0397],[0.3125,0.1406,0.0201],[0.3281,0.1406,0.0157],[0.3438,0.1406,0.0137],[0.3594,0.1406,0.0142],[0.375,0.1406,0.0152],[0.3906,0.1406,0.0211],[0.4062,0.1406,0.025],[0.4219,0.1406,0.0235],[0.4375,0.1406,0.0221],[0.4531,0.1406,0.0216],[0.4688,0.1406,0.024],[0.4844,0.1406,0.026],[0.5,0.1406,0.027],[0.5156,0.1406,0.0373],[0.5312,0.1406,0.0667],[0.5469,0.1406,0.0397],[0.5625,0.1406,0.0235],[0.5781,0.1406,0.023],[0.5938,0.1406,0.0211],[0.6094,0.1406,0.0245],[0.625,0.1406,0.048],[0.6406,0.1406,0.0461],[0.6562,0.1406,0.0466],[0.6719,0.1406,0.0363],[0.6875,0.1406,0.0343],[0.7031,0.1406,0.0275],[0.7188,0.1406,0.0225],[0.7344,0.1406,0.0142],[0.75,0.1406,0.0265],[0.7656,0.1406,0.0265],[0.7812,0.1406,0.0216],[0.7969,0.1406,0.0235],[0.8125,0.1406,0.0176],[0.8281,0.1406,0.0147],[0.8438,0.1406,0.0103],[0.8594,0.1406,0.0064],[0.875,0.1406,0.002],[0.8906,0.1406,0],[0.9062,0.1406,0],[0.9219,0.1406,0],[0.9375,0.1406,0],[0.9531,0.1406,0],[0.9688,0.1406,0],[0.9844,0.1406,0],[-1,0.1562,0],[-0.9844,0.1562,0],[-0.9688,0.1562,0],[-0.9531,0.1562,0],[-0.9375,0.1562,0],[-0.9219,0.1562,0],[-0.9062,0.1562,0],[-0.8906,0.1562,0],[-0.875,0.1562,0],[-0.8594,0.1562,0],[-0.8438,0.1562,0],[-0.8281,0.1562,0],[-0.8125,0.1562,0],[-0.7969,0.1562,0],[-0.7812,0.1562,0.002],[-0.7656,0.1562,0.0098],[-0.75,0.1562,0.0025],[-0.7344,0.1562,0],[-0.7188,0.1562,0],[-0.7031,0.1562,0],[-0.6875,0.1562,0.002],[-0.6719,0.1562,0.001],[-0.6562,0.1562,0.0461],[-0.6406,0.1562,0.0451],[-0.625,0.1562,0.0309],[-0.6094,0.1562,0.0368],[-0.5938,0.1562,0.0309],[-0.5781,0.1562,0.0093],[-0.5625,0.1562,0],[-0.5469,0.1562,0],[-0.5312,0.1562,0],[-0.5156,0.1562,0],[-0.5,0.1562,0],[-0.4844,0.1562,0.0029],[-0.4688,0.1562,0.0137],[-0.4531,0.1562,0.0113],[-0.4375,0.1562,0.0069],[-0.4219,0.1562,0.0098],[-0.4062,0.1562,0.024],[-0.3906,0.1562,0.0083],[-0.375,0.1562,0.0225],[-0.3594,0.1562,0.0211],[-0.3438,0.1562,0.0206],[-0.3281,0.1562,0.0191],[-0.3125,0.1562,0.0206],[-0.2969,0.1562,0.0216],[-0.2812,0.1562,0.024],[-0.2656,0.1562,0.0314],[-0.25,0.1562,0.0309],[-0.2344,0.1562,0.0221],[-0.2188,0.1562,0.0225],[-0.2031,0.1562,0.023],[-0.1875,0.1562,0.0235],[-0.1719,0.1562,0.0235],[-0.1562,0.1562,0.0265],[-0.1406,0.1562,0.0221],[-0.125,0.1562,0.0235],[-0.1094,0.1562,0.0235],[-0.0938,0.1562,0.0225],[-0.0781,0.1562,0.0245],[-0.0625,0.1562,0.023],[-0.0469,0.1562,0.0221],[-0.0312,0.1562,0.0221],[-0.0156,0.1562,0.023],[0,0.1562,0.024],[0.0156,0.1562,0.0245],[0.0312,0.1562,0.0235],[0.0469,0.1562,0.0216],[0.0625,0.1562,0.0186],[0.0781,0.1562,0.0201],[0.0938,0.1562,0.0216],[0.1094,0.1562,0.0245],[0.125,0.1562,0.0348],[0.1406,0.1562,0.0475],[0.1562,0.1562,0.0451],[0.1719,0.1562,0.0328],[0.1875,0.1562,0.0324],[0.2031,0.1562,0.0426],[0.2188,0.1562,0.0324],[0.2344,0.1562,0.0196],[0.25,0.1562,0.0191],[0.2656,0.1562,0.0368],[0.2812,0.1562,0.0529],[0.2969,0.1562,0.0265],[0.3125,0.1562,0.0225],[0.3281,0.1562,0.0176],[0.3438,0.1562,0.0127],[0.3594,0.1562,0.0127],[0.375,0.1562,0.0152],[0.3906,0.1562,0.0196],[0.4062,0.1562,0.0201],[0.4219,0.1562,0.0196],[0.4375,0.1562,0.0201],[0.4531,0.1562,0.0191],[0.4688,0.1562,0.023],[0.4844,0.1562,0.0235],[0.5,0.1562,0.026],[0.5156,0.1562,0.0333],[0.5312,0.1562,0.0593],[0.5469,0.1562,0.0402],[0.5625,0.1562,0.024],[0.5781,0.1562,0.025],[0.5938,0.1562,0.0245],[0.6094,0.1562,0.0245],[0.625,0.1562,0.0446],[0.6406,0.1562,0.0412],[0.6562,0.1562,0.0417],[0.6719,0.1562,0.0338],[0.6875,0.1562,0.0289],[0.7031,0.1562,0.024],[0.7188,0.1562,0.0196],[0.7344,0.1562,0.0152],[0.75,0.1562,0.0265],[0.7656,0.1562,0.0319],[0.7812,0.1562,0.0211],[0.7969,0.1562,0.026],[0.8125,0.1562,0.0181],[0.8281,0.1562,0.0191],[0.8438,0.1562,0.0201],[0.8594,0.1562,0.0054],[0.875,0.1562,0],[0.8906,0.1562,0],[0.9062,0.1562,0],[0.9219,0.1562,0],[0.9375,0.1562,0],[0.9531,0.1562,0],[0.9688,0.1562,0],[0.9844,0.1562,0],[-1,0.1719,0],[-0.9844,0.1719,0],[-0.9688,0.1719,0],[-0.9531,0.1719,0],[-0.9375,0.1719,0],[-0.9219,0.1719,0],[-0.9062,0.1719,0],[-0.8906,0.1719,0],[-0.875,0.1719,0],[-0.8594,0.1719,0],[-0.8438,0.1719,0],[-0.8281,0.1719,0],[-0.8125,0.1719,0],[-0.7969,0.1719,0],[-0.7812,0.1719,0],[-0.7656,0.1719,0],[-0.75,0.1719,0],[-0.7344,0.1719,0],[-0.7188,0.1719,0],[-0.7031,0.1719,0],[-0.6875,0.1719,0],[-0.6719,0.1719,0],[-0.6562,0.1719,0.0461],[-0.6406,0.1719,0.0377],[-0.625,0.1719,0.0348],[-0.6094,0.1719,0.0265],[-0.5938,0.1719,0.0201],[-0.5781,0.1719,0.002],[-0.5625,0.1719,0],[-0.5469,0.1719,0],[-0.5312,0.1719,0],[-0.5156,0.1719,0],[-0.5,0.1719,0.001],[-0.4844,0.1719,0.0005],[-0.4688,0.1719,0.0074],[-0.4531,0.1719,0.0118],[-0.4375,0.1719,0.0025],[-0.4219,0.1719,0.0025],[-0.4062,0.1719,0.0083],[-0.3906,0.1719,0.0167],[-0.375,0.1719,0.0353],[-0.3594,0.1719,0.024],[-0.3438,0.1719,0.0255],[-0.3281,0.1719,0.0196],[-0.3125,0.1719,0.0206],[-0.2969,0.1719,0.0221],[-0.2812,0.1719,0.0235],[-0.2656,0.1719,0.0279],[-0.25,0.1719,0.0314],[-0.2344,0.1719,0.024],[-0.2188,0.1719,0.0225],[-0.2031,0.1719,0.0225],[-0.1875,0.1719,0.0235],[-0.1719,0.1719,0.023],[-0.1562,0.1719,0.024],[-0.1406,0.1719,0.0235],[-0.125,0.1719,0.024],[-0.1094,0.1719,0.023],[-0.0938,0.1719,0.0211],[-0.0781,0.1719,0.0235],[-0.0625,0.1719,0.0225],[-0.0469,0.1719,0.0216],[-0.0312,0.1719,0.0216],[-0.0156,0.1719,0.0211],[0,0.1719,0.0211],[0.0156,0.1719,0.0216],[0.0312,0.1719,0.0221],[0.0469,0.1719,0.0206],[0.0625,0.1719,0.0172],[0.0781,0.1719,0.0176],[0.0938,0.1719,0.0201],[0.1094,0.1719,0.0225],[0.125,0.1719,0.0333],[0.1406,0.1719,0.0461],[0.1562,0.1719,0.0544],[0.1719,0.1719,0.0304],[0.1875,0.1719,0.0275],[0.2031,0.1719,0.0343],[0.2188,0.1719,0.024],[0.2344,0.1719,0.0235],[0.25,0.1719,0.0167],[0.2656,0.1719,0.0201],[0.2812,0.1719,0.0309],[0.2969,0.1719,0.0304],[0.3125,0.1719,0.0289],[0.3281,0.1719,0.0245],[0.3438,0.1719,0.0127],[0.3594,0.1719,0.0123],[0.375,0.1719,0.0132],[0.3906,0.1719,0.0162],[0.4062,0.1719,0.0172],[0.4219,0.1719,0.0181],[0.4375,0.1719,0.0176],[0.4531,0.1719,0.0186],[0.4688,0.1719,0.0206],[0.4844,0.1719,0.0211],[0.5,0.1719,0.0225],[0.5156,0.1719,0.0275],[0.5312,0.1719,0.0436],[0.5469,0.1719,0.0348],[0.5625,0.1719,0.0245],[0.5781,0.1719,0.0245],[0.5938,0.1719,0.0289],[0.6094,0.1719,0.0221],[0.625,0.1719,0.0328],[0.6406,0.1719,0.0304],[0.6562,0.1719,0.0363],[0.6719,0.1719,0.0363],[0.6875,0.1719,0.0309],[0.7031,0.1719,0.0265],[0.7188,0.1719,0.0211],[0.7344,0.1719,0.0191],[0.75,0.1719,0.0304],[0.7656,0.1719,0.0294],[0.7812,0.1719,0.0186],[0.7969,0.1719,0.0211],[0.8125,0.1719,0.0181],[0.8281,0.1719,0.024],[0.8438,0.1719,0.0225],[0.8594,0.1719,0.0059],[0.875,0.1719,0],[0.8906,0.1719,0],[0.9062,0.1719,0],[0.9219,0.1719,0],[0.9375,0.1719,0],[0.9531,0.1719,0],[0.9688,0.1719,0],[0.9844,0.1719,0],[-1,0.1875,0],[-0.9844,0.1875,0],[-0.9688,0.1875,0],[-0.9531,0.1875,0],[-0.9375,0.1875,0],[-0.9219,0.1875,0],[-0.9062,0.1875,0],[-0.8906,0.1875,0],[-0.875,0.1875,0],[-0.8594,0.1875,0],[-0.8438,0.1875,0],[-0.8281,0.1875,0],[-0.8125,0.1875,0],[-0.7969,0.1875,0],[-0.7812,0.1875,0],[-0.7656,0.1875,0],[-0.75,0.1875,0],[-0.7344,0.1875,0],[-0.7188,0.1875,0],[-0.7031,0.1875,0],[-0.6875,0.1875,0],[-0.6719,0.1875,0],[-0.6562,0.1875,0.0181],[-0.6406,0.1875,0.0397],[-0.625,0.1875,0.0358],[-0.6094,0.1875,0.0363],[-0.5938,0.1875,0.0466],[-0.5781,0.1875,0.0015],[-0.5625,0.1875,0],[-0.5469,0.1875,0],[-0.5312,0.1875,0],[-0.5156,0.1875,0],[-0.5,0.1875,0.0015],[-0.4844,0.1875,0.0005],[-0.4688,0.1875,0.0005],[-0.4531,0.1875,0.0034],[-0.4375,0.1875,0.0005],[-0.4219,0.1875,0.0034],[-0.4062,0.1875,0.0147],[-0.3906,0.1875,0.0255],[-0.375,0.1875,0.0466],[-0.3594,0.1875,0.0279],[-0.3438,0.1875,0.0284],[-0.3281,0.1875,0.0255],[-0.3125,0.1875,0.025],[-0.2969,0.1875,0.023],[-0.2812,0.1875,0.0221],[-0.2656,0.1875,0.025],[-0.25,0.1875,0.0348],[-0.2344,0.1875,0.027],[-0.2188,0.1875,0.023],[-0.2031,0.1875,0.023],[-0.1875,0.1875,0.024],[-0.1719,0.1875,0.0255],[-0.1562,0.1875,0.0265],[-0.1406,0.1875,0.0265],[-0.125,0.1875,0.025],[-0.1094,0.1875,0.024],[-0.0938,0.1875,0.0211],[-0.0781,0.1875,0.0216],[-0.0625,0.1875,0.0206],[-0.0469,0.1875,0.0206],[-0.0312,0.1875,0.0211],[-0.0156,0.1875,0.0186],[0,0.1875,0.0201],[0.0156,0.1875,0.0206],[0.0312,0.1875,0.0201],[0.0469,0.1875,0.0196],[0.0625,0.1875,0.0167],[0.0781,0.1875,0.0152],[0.0938,0.1875,0.0181],[0.1094,0.1875,0.0186],[0.125,0.1875,0.0314],[0.1406,0.1875,0.0358],[0.1562,0.1875,0.0426],[0.1719,0.1875,0.0294],[0.1875,0.1875,0.0211],[0.2031,0.1875,0.0275],[0.2188,0.1875,0.0377],[0.2344,0.1875,0.0284],[0.25,0.1875,0.0167],[0.2656,0.1875,0.0162],[0.2812,0.1875,0.0147],[0.2969,0.1875,0.0343],[0.3125,0.1875,0.0373],[0.3281,0.1875,0.0387],[0.3438,0.1875,0.0167],[0.3594,0.1875,0.0108],[0.375,0.1875,0.0123],[0.3906,0.1875,0.0137],[0.4062,0.1875,0.0157],[0.4219,0.1875,0.0157],[0.4375,0.1875,0.0157],[0.4531,0.1875,0.0167],[0.4688,0.1875,0.0181],[0.4844,0.1875,0.0196],[0.5,0.1875,0.0221],[0.5156,0.1875,0.0275],[0.5312,0.1875,0.0255],[0.5469,0.1875,0.0265],[0.5625,0.1875,0.0245],[0.5781,0.1875,0.0265],[0.5938,0.1875,0.0275],[0.6094,0.1875,0.025],[0.625,0.1875,0.023],[0.6406,0.1875,0.0338],[0.6562,0.1875,0.0368],[0.6719,0.1875,0.0387],[0.6875,0.1875,0.0314],[0.7031,0.1875,0.0289],[0.7188,0.1875,0.0235],[0.7344,0.1875,0.023],[0.75,0.1875,0.0275],[0.7656,0.1875,0.0294],[0.7812,0.1875,0.0211],[0.7969,0.1875,0.0201],[0.8125,0.1875,0.0255],[0.8281,0.1875,0.026],[0.8438,0.1875,0.0186],[0.8594,0.1875,0.0083],[0.875,0.1875,0.0083],[0.8906,0.1875,0.001],[0.9062,0.1875,0],[0.9219,0.1875,0],[0.9375,0.1875,0],[0.9531,0.1875,0],[0.9688,0.1875,0],[0.9844,0.1875,0],[-1,0.2031,0],[-0.9844,0.2031,0],[-0.9688,0.2031,0],[-0.9531,0.2031,0],[-0.9375,0.2031,0],[-0.9219,0.2031,0],[-0.9062,0.2031,0],[-0.8906,0.2031,0],[-0.875,0.2031,0],[-0.8594,0.2031,0],[-0.8438,0.2031,0],[-0.8281,0.2031,0],[-0.8125,0.2031,0],[-0.7969,0.2031,0],[-0.7812,0.2031,0],[-0.7656,0.2031,0],[-0.75,0.2031,0],[-0.7344,0.2031,0],[-0.7188,0.2031,0],[-0.7031,0.2031,0],[-0.6875,0.2031,0],[-0.6719,0.2031,0],[-0.6562,0.2031,0.0005],[-0.6406,0.2031,0.0265],[-0.625,0.2031,0.0255],[-0.6094,0.2031,0.0471],[-0.5938,0.2031,0.0191],[-0.5781,0.2031,0],[-0.5625,0.2031,0],[-0.5469,0.2031,0],[-0.5312,0.2031,0],[-0.5156,0.2031,0],[-0.5,0.2031,0],[-0.4844,0.2031,0],[-0.4688,0.2031,0],[-0.4531,0.2031,0],[-0.4375,0.2031,0],[-0.4219,0.2031,0.0025],[-0.4062,0.2031,0.0152],[-0.3906,0.2031,0.0412],[-0.375,0.2031,0.0613],[-0.3594,0.2031,0.052],[-0.3438,0.2031,0.0255],[-0.3281,0.2031,0.023],[-0.3125,0.2031,0.0235],[-0.2969,0.2031,0.0221],[-0.2812,0.2031,0.0211],[-0.2656,0.2031,0.025],[-0.25,0.2031,0.0338],[-0.2344,0.2031,0.026],[-0.2188,0.2031,0.0235],[-0.2031,0.2031,0.0235],[-0.1875,0.2031,0.023],[-0.1719,0.2031,0.024],[-0.1562,0.2031,0.0245],[-0.1406,0.2031,0.0225],[-0.125,0.2031,0.024],[-0.1094,0.2031,0.0206],[-0.0938,0.2031,0.0211],[-0.0781,0.2031,0.0235],[-0.0625,0.2031,0.0211],[-0.0469,0.2031,0.0191],[-0.0312,0.2031,0.0191],[-0.0156,0.2031,0.0186],[0,0.2031,0.0265],[0.0156,0.2031,0.0235],[0.0312,0.2031,0.0206],[0.0469,0.2031,0.0176],[0.0625,0.2031,0.0157],[0.0781,0.2031,0.0147],[0.0938,0.2031,0.0152],[0.1094,0.2031,0.0167],[0.125,0.2031,0.0167],[0.1406,0.2031,0.0186],[0.1562,0.2031,0.0206],[0.1719,0.2031,0.0196],[0.1875,0.2031,0.0225],[0.2031,0.2031,0.0392],[0.2188,0.2031,0.0539],[0.2344,0.2031,0.0377],[0.25,0.2031,0.0186],[0.2656,0.2031,0.0176],[0.2812,0.2031,0.0152],[0.2969,0.2031,0.0157],[0.3125,0.2031,0.0265],[0.3281,0.2031,0.0324],[0.3438,0.2031,0.0201],[0.3594,0.2031,0.0113],[0.375,0.2031,0.0123],[0.3906,0.2031,0.0137],[0.4062,0.2031,0.0142],[0.4219,0.2031,0.0142],[0.4375,0.2031,0.0152],[0.4531,0.2031,0.0201],[0.4688,0.2031,0.0225],[0.4844,0.2031,0.023],[0.5,0.2031,0.0221],[0.5156,0.2031,0.0304],[0.5312,0.2031,0.0265],[0.5469,0.2031,0.026],[0.5625,0.2031,0.0299],[0.5781,0.2031,0.0279],[0.5938,0.2031,0.0255],[0.6094,0.2031,0.023],[0.625,0.2031,0.023],[0.6406,0.2031,0.0397],[0.6562,0.2031,0.0461],[0.6719,0.2031,0.0402],[0.6875,0.2031,0.0368],[0.7031,0.2031,0.0314],[0.7188,0.2031,0.024],[0.7344,0.2031,0.025],[0.75,0.2031,0.024],[0.7656,0.2031,0.0289],[0.7812,0.2031,0.0221],[0.7969,0.2031,0.0191],[0.8125,0.2031,0.0245],[0.8281,0.2031,0.0284],[0.8438,0.2031,0.0181],[0.8594,0.2031,0.0191],[0.875,0.2031,0.0172],[0.8906,0.2031,0.0059],[0.9062,0.2031,0],[0.9219,0.2031,0],[0.9375,0.2031,0],[0.9531,0.2031,0],[0.9688,0.2031,0],[0.9844,0.2031,0],[-1,0.2188,0],[-0.9844,0.2188,0],[-0.9688,0.2188,0],[-0.9531,0.2188,0],[-0.9375,0.2188,0],[-0.9219,0.2188,0],[-0.9062,0.2188,0],[-0.8906,0.2188,0],[-0.875,0.2188,0],[-0.8594,0.2188,0],[-0.8438,0.2188,0],[-0.8281,0.2188,0],[-0.8125,0.2188,0],[-0.7969,0.2188,0],[-0.7812,0.2188,0],[-0.7656,0.2188,0],[-0.75,0.2188,0],[-0.7344,0.2188,0],[-0.7188,0.2188,0],[-0.7031,0.2188,0],[-0.6875,0.2188,0],[-0.6719,0.2188,0],[-0.6562,0.2188,0],[-0.6406,0.2188,0.0005],[-0.625,0.2188,0.0123],[-0.6094,0.2188,0.0157],[-0.5938,0.2188,0.0005],[-0.5781,0.2188,0],[-0.5625,0.2188,0],[-0.5469,0.2188,0],[-0.5312,0.2188,0],[-0.5156,0.2188,0],[-0.5,0.2188,0],[-0.4844,0.2188,0],[-0.4688,0.2188,0],[-0.4531,0.2188,0],[-0.4375,0.2188,0],[-0.4219,0.2188,0.0029],[-0.4062,0.2188,0.0147],[-0.3906,0.2188,0.0466],[-0.375,0.2188,0.0696],[-0.3594,0.2188,0.074],[-0.3438,0.2188,0.05],[-0.3281,0.2188,0.0216],[-0.3125,0.2188,0.0196],[-0.2969,0.2188,0.0191],[-0.2812,0.2188,0.0201],[-0.2656,0.2188,0.0221],[-0.25,0.2188,0.0289],[-0.2344,0.2188,0.0304],[-0.2188,0.2188,0.0235],[-0.2031,0.2188,0.027],[-0.1875,0.2188,0.0245],[-0.1719,0.2188,0.0245],[-0.1562,0.2188,0.0211],[-0.1406,0.2188,0.0201],[-0.125,0.2188,0.0221],[-0.1094,0.2188,0.0225],[-0.0938,0.2188,0.0191],[-0.0781,0.2188,0.0221],[-0.0625,0.2188,0.0201],[-0.0469,0.2188,0.0176],[-0.0312,0.2188,0.0157],[-0.0156,0.2188,0.0167],[0,0.2188,0.0191],[0.0156,0.2188,0.0201],[0.0312,0.2188,0.0186],[0.0469,0.2188,0.0176],[0.0625,0.2188,0.0147],[0.0781,0.2188,0.0137],[0.0938,0.2188,0.0137],[0.1094,0.2188,0.0157],[0.125,0.2188,0.0152],[0.1406,0.2188,0.0137],[0.1562,0.2188,0.0147],[0.1719,0.2188,0.0162],[0.1875,0.2188,0.0172],[0.2031,0.2188,0.023],[0.2188,0.2188,0.0392],[0.2344,0.2188,0.0358],[0.25,0.2188,0.0196],[0.2656,0.2188,0.0162],[0.2812,0.2188,0.0152],[0.2969,0.2188,0.0157],[0.3125,0.2188,0.0147],[0.3281,0.2188,0.0123],[0.3438,0.2188,0.0118],[0.3594,0.2188,0.0083],[0.375,0.2188,0.0113],[0.3906,0.2188,0.0113],[0.4062,0.2188,0.0118],[0.4219,0.2188,0.0142],[0.4375,0.2188,0.0176],[0.4531,0.2188,0.0289],[0.4688,0.2188,0.0275],[0.4844,0.2188,0.025],[0.5,0.2188,0.0235],[0.5156,0.2188,0.0289],[0.5312,0.2188,0.0324],[0.5469,0.2188,0.0279],[0.5625,0.2188,0.0343],[0.5781,0.2188,0.0289],[0.5938,0.2188,0.0245],[0.6094,0.2188,0.0245],[0.625,0.2188,0.026],[0.6406,0.2188,0.0475],[0.6562,0.2188,0.0588],[0.6719,0.2188,0.0549],[0.6875,0.2188,0.0382],[0.7031,0.2188,0.0309],[0.7188,0.2188,0.024],[0.7344,0.2188,0.027],[0.75,0.2188,0.0235],[0.7656,0.2188,0.0338],[0.7812,0.2188,0.0284],[0.7969,0.2188,0.024],[0.8125,0.2188,0.025],[0.8281,0.2188,0.0324],[0.8438,0.2188,0.0196],[0.8594,0.2188,0.0186],[0.875,0.2188,0.0142],[0.8906,0.2188,0],[0.9062,0.2188,0],[0.9219,0.2188,0],[0.9375,0.2188,0],[0.9531,0.2188,0],[0.9688,0.2188,0],[0.9844,0.2188,0],[-1,0.2344,0],[-0.9844,0.2344,0],[-0.9688,0.2344,0],[-0.9531,0.2344,0],[-0.9375,0.2344,0],[-0.9219,0.2344,0],[-0.9062,0.2344,0],[-0.8906,0.2344,0],[-0.875,0.2344,0],[-0.8594,0.2344,0],[-0.8438,0.2344,0],[-0.8281,0.2344,0],[-0.8125,0.2344,0],[-0.7969,0.2344,0],[-0.7812,0.2344,0],[-0.7656,0.2344,0],[-0.75,0.2344,0],[-0.7344,0.2344,0],[-0.7188,0.2344,0],[-0.7031,0.2344,0],[-0.6875,0.2344,0],[-0.6719,0.2344,0],[-0.6562,0.2344,0],[-0.6406,0.2344,0],[-0.625,0.2344,0],[-0.6094,0.2344,0.002],[-0.5938,0.2344,0],[-0.5781,0.2344,0],[-0.5625,0.2344,0],[-0.5469,0.2344,0],[-0.5312,0.2344,0],[-0.5156,0.2344,0],[-0.5,0.2344,0],[-0.4844,0.2344,0],[-0.4688,0.2344,0],[-0.4531,0.2344,0],[-0.4375,0.2344,0],[-0.4219,0.2344,0],[-0.4062,0.2344,0.0147],[-0.3906,0.2344,0.0309],[-0.375,0.2344,0.0461],[-0.3594,0.2344,0.0539],[-0.3438,0.2344,0.052],[-0.3281,0.2344,0.0324],[-0.3125,0.2344,0.0201],[-0.2969,0.2344,0.0181],[-0.2812,0.2344,0.0186],[-0.2656,0.2344,0.0206],[-0.25,0.2344,0.0284],[-0.2344,0.2344,0.0314],[-0.2188,0.2344,0.024],[-0.2031,0.2344,0.0265],[-0.1875,0.2344,0.025],[-0.1719,0.2344,0.0255],[-0.1562,0.2344,0.0221],[-0.1406,0.2344,0.0225],[-0.125,0.2344,0.0206],[-0.1094,0.2344,0.0191],[-0.0938,0.2344,0.0186],[-0.0781,0.2344,0.0196],[-0.0625,0.2344,0.0181],[-0.0469,0.2344,0.0162],[-0.0312,0.2344,0.0152],[-0.0156,0.2344,0.0157],[0,0.2344,0.0162],[0.0156,0.2344,0.0152],[0.0312,0.2344,0.0157],[0.0469,0.2344,0.0157],[0.0625,0.2344,0.0147],[0.0781,0.2344,0.0132],[0.0938,0.2344,0.0132],[0.1094,0.2344,0.0142],[0.125,0.2344,0.0142],[0.1406,0.2344,0.0132],[0.1562,0.2344,0.0132],[0.1719,0.2344,0.0147],[0.1875,0.2344,0.0152],[0.2031,0.2344,0.0162],[0.2188,0.2344,0.0211],[0.2344,0.2344,0.026],[0.25,0.2344,0.0196],[0.2656,0.2344,0.0162],[0.2812,0.2344,0.0142],[0.2969,0.2344,0.0152],[0.3125,0.2344,0.0147],[0.3281,0.2344,0.0132],[0.3438,0.2344,0.0098],[0.3594,0.2344,0.0098],[0.375,0.2344,0.0132],[0.3906,0.2344,0.0142],[0.4062,0.2344,0.0123],[0.4219,0.2344,0.0142],[0.4375,0.2344,0.0167],[0.4531,0.2344,0.0294],[0.4688,0.2344,0.0328],[0.4844,0.2344,0.0265],[0.5,0.2344,0.0265],[0.5156,0.2344,0.0284],[0.5312,0.2344,0.0294],[0.5469,0.2344,0.0377],[0.5625,0.2344,0.0368],[0.5781,0.2344,0.0324],[0.5938,0.2344,0.025],[0.6094,0.2344,0.0216],[0.625,0.2344,0.0436],[0.6406,0.2344,0.0456],[0.6562,0.2344,0.0529],[0.6719,0.2344,0.0593],[0.6875,0.2344,0.0402],[0.7031,0.2344,0.0382],[0.7188,0.2344,0.0284],[0.7344,0.2344,0.0265],[0.75,0.2344,0.0279],[0.7656,0.2344,0.0309],[0.7812,0.2344,0.0328],[0.7969,0.2344,0.0245],[0.8125,0.2344,0.0235],[0.8281,0.2344,0.026],[0.8438,0.2344,0.0181],[0.8594,0.2344,0.0196],[0.875,0.2344,0.0113],[0.8906,0.2344,0.0005],[0.9062,0.2344,0],[0.9219,0.2344,0],[0.9375,0.2344,0],[0.9531,0.2344,0],[0.9688,0.2344,0],[0.9844,0.2344,0],[-1,0.25,0],[-0.9844,0.25,0],[-0.9688,0.25,0],[-0.9531,0.25,0],[-0.9375,0.25,0],[-0.9219,0.25,0],[-0.9062,0.25,0],[-0.8906,0.25,0],[-0.875,0.25,0],[-0.8594,0.25,0],[-0.8438,0.25,0],[-0.8281,0.25,0],[-0.8125,0.25,0],[-0.7969,0.25,0],[-0.7812,0.25,0],[-0.7656,0.25,0],[-0.75,0.25,0],[-0.7344,0.25,0],[-0.7188,0.25,0],[-0.7031,0.25,0],[-0.6875,0.25,0],[-0.6719,0.25,0],[-0.6562,0.25,0],[-0.6406,0.25,0],[-0.625,0.25,0],[-0.6094,0.25,0],[-0.5938,0.25,0],[-0.5781,0.25,0],[-0.5625,0.25,0],[-0.5469,0.25,0],[-0.5312,0.25,0],[-0.5156,0.25,0],[-0.5,0.25,0],[-0.4844,0.25,0],[-0.4688,0.25,0],[-0.4531,0.25,0],[-0.4375,0.25,0],[-0.4219,0.25,0.0088],[-0.4062,0.25,0.0191],[-0.3906,0.25,0.025],[-0.375,0.25,0.0314],[-0.3594,0.25,0.0363],[-0.3438,0.25,0.0422],[-0.3281,0.25,0.0368],[-0.3125,0.25,0.025],[-0.2969,0.25,0.0186],[-0.2812,0.25,0.0172],[-0.2656,0.25,0.0196],[-0.25,0.25,0.0245],[-0.2344,0.25,0.0265],[-0.2188,0.25,0.0216],[-0.2031,0.25,0.0235],[-0.1875,0.25,0.0235],[-0.1719,0.25,0.0235],[-0.1562,0.25,0.0211],[-0.1406,0.25,0.0211],[-0.125,0.25,0.0206],[-0.1094,0.25,0.0191],[-0.0938,0.25,0.0176],[-0.0781,0.25,0.0172],[-0.0625,0.25,0.0157],[-0.0469,0.25,0.0152],[-0.0312,0.25,0.0157],[-0.0156,0.25,0.0157],[0,0.25,0.0152],[0.0156,0.25,0.0152],[0.0312,0.25,0.0132],[0.0469,0.25,0.0137],[0.0625,0.25,0.0123],[0.0781,0.25,0.0123],[0.0938,0.25,0.0118],[0.1094,0.25,0.0127],[0.125,0.25,0.0127],[0.1406,0.25,0.0127],[0.1562,0.25,0.0137],[0.1719,0.25,0.0132],[0.1875,0.25,0.0137],[0.2031,0.25,0.0142],[0.2188,0.25,0.0152],[0.2344,0.25,0.0157],[0.25,0.25,0.0162],[0.2656,0.25,0.0157],[0.2812,0.25,0.0137],[0.2969,0.25,0.0137],[0.3125,0.25,0.0142],[0.3281,0.25,0.0127],[0.3438,0.25,0.0078],[0.3594,0.25,0.0078],[0.375,0.25,0.0132],[0.3906,0.25,0.0157],[0.4062,0.25,0.0162],[0.4219,0.25,0.0157],[0.4375,0.25,0.0167],[0.4531,0.25,0.0265],[0.4688,0.25,0.0289],[0.4844,0.25,0.0255],[0.5,0.25,0.0245],[0.5156,0.25,0.0299],[0.5312,0.25,0.0363],[0.5469,0.25,0.0368],[0.5625,0.25,0.0353],[0.5781,0.25,0.0294],[0.5938,0.25,0.027],[0.6094,0.25,0.0235],[0.625,0.25,0.0328],[0.6406,0.25,0.0471],[0.6562,0.25,0.0598],[0.6719,0.25,0.0627],[0.6875,0.25,0.0475],[0.7031,0.25,0.0461],[0.7188,0.25,0.0328],[0.7344,0.25,0.024],[0.75,0.25,0.027],[0.7656,0.25,0.0338],[0.7812,0.25,0.0343],[0.7969,0.25,0.0265],[0.8125,0.25,0.0211],[0.8281,0.25,0.0265],[0.8438,0.25,0.0211],[0.8594,0.25,0.0176],[0.875,0.25,0.0176],[0.8906,0.25,0.0157],[0.9062,0.25,0.0015],[0.9219,0.25,0],[0.9375,0.25,0],[0.9531,0.25,0],[0.9688,0.25,0],[0.9844,0.25,0],[-1,0.2656,0],[-0.9844,0.2656,0],[-0.9688,0.2656,0],[-0.9531,0.2656,0],[-0.9375,0.2656,0],[-0.9219,0.2656,0],[-0.9062,0.2656,0],[-0.8906,0.2656,0],[-0.875,0.2656,0],[-0.8594,0.2656,0],[-0.8438,0.2656,0],[-0.8281,0.2656,0],[-0.8125,0.2656,0],[-0.7969,0.2656,0],[-0.7812,0.2656,0],[-0.7656,0.2656,0],[-0.75,0.2656,0],[-0.7344,0.2656,0],[-0.7188,0.2656,0],[-0.7031,0.2656,0],[-0.6875,0.2656,0],[-0.6719,0.2656,0],[-0.6562,0.2656,0],[-0.6406,0.2656,0],[-0.625,0.2656,0],[-0.6094,0.2656,0],[-0.5938,0.2656,0],[-0.5781,0.2656,0],[-0.5625,0.2656,0],[-0.5469,0.2656,0],[-0.5312,0.2656,0],[-0.5156,0.2656,0],[-0.5,0.2656,0],[-0.4844,0.2656,0],[-0.4688,0.2656,0],[-0.4531,0.2656,0],[-0.4375,0.2656,0],[-0.4219,0.2656,0.0132],[-0.4062,0.2656,0.0191],[-0.3906,0.2656,0.0235],[-0.375,0.2656,0.0279],[-0.3594,0.2656,0.0314],[-0.3438,0.2656,0.0431],[-0.3281,0.2656,0.052],[-0.3125,0.2656,0.049],[-0.2969,0.2656,0.0304],[-0.2812,0.2656,0.0191],[-0.2656,0.2656,0.0181],[-0.25,0.2656,0.0211],[-0.2344,0.2656,0.0211],[-0.2188,0.2656,0.0211],[-0.2031,0.2656,0.0211],[-0.1875,0.2656,0.023],[-0.1719,0.2656,0.0235],[-0.1562,0.2656,0.0216],[-0.1406,0.2656,0.0201],[-0.125,0.2656,0.0201],[-0.1094,0.2656,0.0186],[-0.0938,0.2656,0.0176],[-0.0781,0.2656,0.0172],[-0.0625,0.2656,0.0157],[-0.0469,0.2656,0.0152],[-0.0312,0.2656,0.0191],[-0.0156,0.2656,0.0167],[0,0.2656,0.0147],[0.0156,0.2656,0.0127],[0.0312,0.2656,0.0127],[0.0469,0.2656,0.0137],[0.0625,0.2656,0.0127],[0.0781,0.2656,0.0113],[0.0938,0.2656,0.0098],[0.1094,0.2656,0.0093],[0.125,0.2656,0.0108],[0.1406,0.2656,0.0127],[0.1562,0.2656,0.0157],[0.1719,0.2656,0.0147],[0.1875,0.2656,0.0137],[0.2031,0.2656,0.0132],[0.2188,0.2656,0.0137],[0.2344,0.2656,0.0137],[0.25,0.2656,0.0132],[0.2656,0.2656,0.0123],[0.2812,0.2656,0.0108],[0.2969,0.2656,0.0108],[0.3125,0.2656,0.0098],[0.3281,0.2656,0.0088],[0.3438,0.2656,0.0098],[0.3594,0.2656,0.0059],[0.375,0.2656,0.0127],[0.3906,0.2656,0.0137],[0.4062,0.2656,0.0152],[0.4219,0.2656,0.0157],[0.4375,0.2656,0.0162],[0.4531,0.2656,0.0225],[0.4688,0.2656,0.0211],[0.4844,0.2656,0.0211],[0.5,0.2656,0.023],[0.5156,0.2656,0.0324],[0.5312,0.2656,0.0426],[0.5469,0.2656,0.0441],[0.5625,0.2656,0.0407],[0.5781,0.2656,0.0333],[0.5938,0.2656,0.0284],[0.6094,0.2656,0.0289],[0.625,0.2656,0.0275],[0.6406,0.2656,0.0363],[0.6562,0.2656,0.05],[0.6719,0.2656,0.0696],[0.6875,0.2656,0.049],[0.7031,0.2656,0.0358],[0.7188,0.2656,0.0294],[0.7344,0.2656,0.0235],[0.75,0.2656,0.0314],[0.7656,0.2656,0.0426],[0.7812,0.2656,0.0368],[0.7969,0.2656,0.026],[0.8125,0.2656,0.0225],[0.8281,0.2656,0.0304],[0.8438,0.2656,0.0211],[0.8594,0.2656,0.0211],[0.875,0.2656,0.0211],[0.8906,0.2656,0.0152],[0.9062,0.2656,0.0034],[0.9219,0.2656,0],[0.9375,0.2656,0],[0.9531,0.2656,0],[0.9688,0.2656,0],[0.9844,0.2656,0],[-1,0.2812,0],[-0.9844,0.2812,0],[-0.9688,0.2812,0],[-0.9531,0.2812,0],[-0.9375,0.2812,0],[-0.9219,0.2812,0],[-0.9062,0.2812,0],[-0.8906,0.2812,0],[-0.875,0.2812,0],[-0.8594,0.2812,0],[-0.8438,0.2812,0],[-0.8281,0.2812,0],[-0.8125,0.2812,0],[-0.7969,0.2812,0],[-0.7812,0.2812,0],[-0.7656,0.2812,0],[-0.75,0.2812,0],[-0.7344,0.2812,0],[-0.7188,0.2812,0],[-0.7031,0.2812,0],[-0.6875,0.2812,0],[-0.6719,0.2812,0],[-0.6562,0.2812,0],[-0.6406,0.2812,0],[-0.625,0.2812,0],[-0.6094,0.2812,0],[-0.5938,0.2812,0],[-0.5781,0.2812,0],[-0.5625,0.2812,0],[-0.5469,0.2812,0],[-0.5312,0.2812,0],[-0.5156,0.2812,0],[-0.5,0.2812,0],[-0.4844,0.2812,0],[-0.4688,0.2812,0],[-0.4531,0.2812,0],[-0.4375,0.2812,0],[-0.4219,0.2812,0.0118],[-0.4062,0.2812,0.0152],[-0.3906,0.2812,0.0206],[-0.375,0.2812,0.0225],[-0.3594,0.2812,0.024],[-0.3438,0.2812,0.027],[-0.3281,0.2812,0.0417],[-0.3125,0.2812,0.0549],[-0.2969,0.2812,0.0363],[-0.2812,0.2812,0.0265],[-0.2656,0.2812,0.0172],[-0.25,0.2812,0.0162],[-0.2344,0.2812,0.0167],[-0.2188,0.2812,0.0186],[-0.2031,0.2812,0.0191],[-0.1875,0.2812,0.0211],[-0.1719,0.2812,0.023],[-0.1562,0.2812,0.0216],[-0.1406,0.2812,0.0196],[-0.125,0.2812,0.0181],[-0.1094,0.2812,0.0181],[-0.0938,0.2812,0.0167],[-0.0781,0.2812,0.0162],[-0.0625,0.2812,0.0157],[-0.0469,0.2812,0.0152],[-0.0312,0.2812,0.0162],[-0.0156,0.2812,0.0142],[0,0.2812,0.0127],[0.0156,0.2812,0.0118],[0.0312,0.2812,0.0118],[0.0469,0.2812,0.0147],[0.0625,0.2812,0.0137],[0.0781,0.2812,0.0039],[0.0938,0.2812,0.0078],[0.1094,0.2812,0.0054],[0.125,0.2812,0.0118],[0.1406,0.2812,0.0235],[0.1562,0.2812,0.0387],[0.1719,0.2812,0.0275],[0.1875,0.2812,0.023],[0.2031,0.2812,0.0147],[0.2188,0.2812,0.0132],[0.2344,0.2812,0.0137],[0.25,0.2812,0.0127],[0.2656,0.2812,0.0127],[0.2812,0.2812,0.0137],[0.2969,0.2812,0.0127],[0.3125,0.2812,0.0074],[0.3281,0.2812,0.0034],[0.3438,0.2812,0.0025],[0.3594,0.2812,0.002],[0.375,0.2812,0.0083],[0.3906,0.2812,0.0123],[0.4062,0.2812,0.0142],[0.4219,0.2812,0.0162],[0.4375,0.2812,0.0162],[0.4531,0.2812,0.0186],[0.4688,0.2812,0.0191],[0.4844,0.2812,0.0191],[0.5,0.2812,0.023],[0.5156,0.2812,0.0348],[0.5312,0.2812,0.0451],[0.5469,0.2812,0.0471],[0.5625,0.2812,0.0436],[0.5781,0.2812,0.0363],[0.5938,0.2812,0.0324],[0.6094,0.2812,0.0314],[0.625,0.2812,0.026],[0.6406,0.2812,0.0324],[0.6562,0.2812,0.0446],[0.6719,0.2812,0.0632],[0.6875,0.2812,0.0529],[0.7031,0.2812,0.0402],[0.7188,0.2812,0.0294],[0.7344,0.2812,0.025],[0.75,0.2812,0.0299],[0.7656,0.2812,0.0392],[0.7812,0.2812,0.0333],[0.7969,0.2812,0.0265],[0.8125,0.2812,0.0206],[0.8281,0.2812,0.0299],[0.8438,0.2812,0.0221],[0.8594,0.2812,0.0289],[0.875,0.2812,0.0211],[0.8906,0.2812,0.0108],[0.9062,0.2812,0.0005],[0.9219,0.2812,0],[0.9375,0.2812,0],[0.9531,0.2812,0],[0.9688,0.2812,0],[0.9844,0.2812,0],[-1,0.2969,0],[-0.9844,0.2969,0],[-0.9688,0.2969,0],[-0.9531,0.2969,0],[-0.9375,0.2969,0],[-0.9219,0.2969,0],[-0.9062,0.2969,0],[-0.8906,0.2969,0],[-0.875,0.2969,0],[-0.8594,0.2969,0],[-0.8438,0.2969,0],[-0.8281,0.2969,0],[-0.8125,0.2969,0],[-0.7969,0.2969,0],[-0.7812,0.2969,0],[-0.7656,0.2969,0],[-0.75,0.2969,0],[-0.7344,0.2969,0],[-0.7188,0.2969,0],[-0.7031,0.2969,0],[-0.6875,0.2969,0],[-0.6719,0.2969,0],[-0.6562,0.2969,0],[-0.6406,0.2969,0],[-0.625,0.2969,0],[-0.6094,0.2969,0],[-0.5938,0.2969,0],[-0.5781,0.2969,0],[-0.5625,0.2969,0],[-0.5469,0.2969,0],[-0.5312,0.2969,0],[-0.5156,0.2969,0],[-0.5,0.2969,0],[-0.4844,0.2969,0],[-0.4688,0.2969,0],[-0.4531,0.2969,0],[-0.4375,0.2969,0],[-0.4219,0.2969,0.0078],[-0.4062,0.2969,0.0118],[-0.3906,0.2969,0.0172],[-0.375,0.2969,0.0196],[-0.3594,0.2969,0.0186],[-0.3438,0.2969,0.0172],[-0.3281,0.2969,0.0172],[-0.3125,0.2969,0.0255],[-0.2969,0.2969,0.0328],[-0.2812,0.2969,0.0211],[-0.2656,0.2969,0.0181],[-0.25,0.2969,0.0142],[-0.2344,0.2969,0.0186],[-0.2188,0.2969,0.0314],[-0.2031,0.2969,0.0279],[-0.1875,0.2969,0.0196],[-0.1719,0.2969,0.0201],[-0.1562,0.2969,0.0196],[-0.1406,0.2969,0.0176],[-0.125,0.2969,0.0172],[-0.1094,0.2969,0.0176],[-0.0938,0.2969,0.0167],[-0.0781,0.2969,0.0152],[-0.0625,0.2969,0.0152],[-0.0469,0.2969,0.0162],[-0.0312,0.2969,0.0147],[-0.0156,0.2969,0.0132],[0,0.2969,0.0118],[0.0156,0.2969,0.0118],[0.0312,0.2969,0.0118],[0.0469,0.2969,0.0137],[0.0625,0.2969,0.0118],[0.0781,0.2969,0.002],[0.0938,0.2969,0.002],[0.1094,0.2969,0.002],[0.125,0.2969,0.0167],[0.1406,0.2969,0.0245],[0.1562,0.2969,0.0299],[0.1719,0.2969,0.0338],[0.1875,0.2969,0.0333],[0.2031,0.2969,0.0191],[0.2188,0.2969,0.0142],[0.2344,0.2969,0.0142],[0.25,0.2969,0.0216],[0.2656,0.2969,0.0211],[0.2812,0.2969,0.0201],[0.2969,0.2969,0.0186],[0.3125,0.2969,0.0186],[0.3281,0.2969,0.0123],[0.3438,0.2969,0.0103],[0.3594,0.2969,0.0049],[0.375,0.2969,0.0074],[0.3906,0.2969,0.0127],[0.4062,0.2969,0.0157],[0.4219,0.2969,0.0216],[0.4375,0.2969,0.0211],[0.4531,0.2969,0.0201],[0.4688,0.2969,0.0186],[0.4844,0.2969,0.0211],[0.5,0.2969,0.0294],[0.5156,0.2969,0.0529],[0.5312,0.2969,0.0569],[0.5469,0.2969,0.05],[0.5625,0.2969,0.0451],[0.5781,0.2969,0.0407],[0.5938,0.2969,0.0368],[0.6094,0.2969,0.0348],[0.625,0.2969,0.0304],[0.6406,0.2969,0.027],[0.6562,0.2969,0.0368],[0.6719,0.2969,0.0461],[0.6875,0.2969,0.0456],[0.7031,0.2969,0.0392],[0.7188,0.2969,0.0304],[0.7344,0.2969,0.0309],[0.75,0.2969,0.026],[0.7656,0.2969,0.0353],[0.7812,0.2969,0.0333],[0.7969,0.2969,0.0294],[0.8125,0.2969,0.0221],[0.8281,0.2969,0.024],[0.8438,0.2969,0.0328],[0.8594,0.2969,0.0324],[0.875,0.2969,0.0255],[0.8906,0.2969,0.0167],[0.9062,0.2969,0.0005],[0.9219,0.2969,0],[0.9375,0.2969,0],[0.9531,0.2969,0],[0.9688,0.2969,0],[0.9844,0.2969,0],[-1,0.3125,0],[-0.9844,0.3125,0],[-0.9688,0.3125,0],[-0.9531,0.3125,0],[-0.9375,0.3125,0],[-0.9219,0.3125,0],[-0.9062,0.3125,0],[-0.8906,0.3125,0],[-0.875,0.3125,0],[-0.8594,0.3125,0],[-0.8438,0.3125,0],[-0.8281,0.3125,0],[-0.8125,0.3125,0],[-0.7969,0.3125,0],[-0.7812,0.3125,0],[-0.7656,0.3125,0],[-0.75,0.3125,0],[-0.7344,0.3125,0],[-0.7188,0.3125,0],[-0.7031,0.3125,0],[-0.6875,0.3125,0],[-0.6719,0.3125,0],[-0.6562,0.3125,0],[-0.6406,0.3125,0],[-0.625,0.3125,0],[-0.6094,0.3125,0],[-0.5938,0.3125,0],[-0.5781,0.3125,0],[-0.5625,0.3125,0],[-0.5469,0.3125,0],[-0.5312,0.3125,0],[-0.5156,0.3125,0],[-0.5,0.3125,0],[-0.4844,0.3125,0],[-0.4688,0.3125,0],[-0.4531,0.3125,0],[-0.4375,0.3125,0],[-0.4219,0.3125,0],[-0.4062,0.3125,0],[-0.3906,0.3125,0.0074],[-0.375,0.3125,0.0142],[-0.3594,0.3125,0.0157],[-0.3438,0.3125,0.0152],[-0.3281,0.3125,0.0132],[-0.3125,0.3125,0.0137],[-0.2969,0.3125,0.0147],[-0.2812,0.3125,0.0142],[-0.2656,0.3125,0.0186],[-0.25,0.3125,0.0132],[-0.2344,0.3125,0.0186],[-0.2188,0.3125,0.024],[-0.2031,0.3125,0.024],[-0.1875,0.3125,0.0181],[-0.1719,0.3125,0.0181],[-0.1562,0.3125,0.0176],[-0.1406,0.3125,0.0167],[-0.125,0.3125,0.0162],[-0.1094,0.3125,0.0162],[-0.0938,0.3125,0.0167],[-0.0781,0.3125,0.0157],[-0.0625,0.3125,0.0157],[-0.0469,0.3125,0.0152],[-0.0312,0.3125,0.0132],[-0.0156,0.3125,0.0127],[0,0.3125,0.0118],[0.0156,0.3125,0.0118],[0.0312,0.3125,0.0118],[0.0469,0.3125,0.0137],[0.0625,0.3125,0.0176],[0.0781,0.3125,0.0054],[0.0938,0.3125,0],[0.1094,0.3125,0.0005],[0.125,0.3125,0.0093],[0.1406,0.3125,0.024],[0.1562,0.3125,0.0402],[0.1719,0.3125,0.0368],[0.1875,0.3125,0.0289],[0.2031,0.3125,0.0221],[0.2188,0.3125,0.023],[0.2344,0.3125,0.023],[0.25,0.3125,0.0275],[0.2656,0.3125,0.023],[0.2812,0.3125,0.0216],[0.2969,0.3125,0.0265],[0.3125,0.3125,0.024],[0.3281,0.3125,0.0221],[0.3438,0.3125,0.0201],[0.3594,0.3125,0.0127],[0.375,0.3125,0.0049],[0.3906,0.3125,0.0206],[0.4062,0.3125,0.0221],[0.4219,0.3125,0.0304],[0.4375,0.3125,0.0373],[0.4531,0.3125,0.0284],[0.4688,0.3125,0.026],[0.4844,0.3125,0.0353],[0.5,0.3125,0.0407],[0.5156,0.3125,0.0549],[0.5312,0.3125,0.0593],[0.5469,0.3125,0.0588],[0.5625,0.3125,0.0554],[0.5781,0.3125,0.0461],[0.5938,0.3125,0.0417],[0.6094,0.3125,0.0368],[0.625,0.3125,0.0333],[0.6406,0.3125,0.0289],[0.6562,0.3125,0.0451],[0.6719,0.3125,0.0642],[0.6875,0.3125,0.0691],[0.7031,0.3125,0.0475],[0.7188,0.3125,0.0324],[0.7344,0.3125,0.0314],[0.75,0.3125,0.0314],[0.7656,0.3125,0.0343],[0.7812,0.3125,0.0343],[0.7969,0.3125,0.0284],[0.8125,0.3125,0.0221],[0.8281,0.3125,0.0304],[0.8438,0.3125,0.0353],[0.8594,0.3125,0.0343],[0.875,0.3125,0.023],[0.8906,0.3125,0.0201],[0.9062,0.3125,0.0064],[0.9219,0.3125,0.0005],[0.9375,0.3125,0],[0.9531,0.3125,0],[0.9688,0.3125,0],[0.9844,0.3125,0],[-1,0.3281,0],[-0.9844,0.3281,0],[-0.9688,0.3281,0],[-0.9531,0.3281,0],[-0.9375,0.3281,0],[-0.9219,0.3281,0],[-0.9062,0.3281,0],[-0.8906,0.3281,0],[-0.875,0.3281,0],[-0.8594,0.3281,0],[-0.8438,0.3281,0],[-0.8281,0.3281,0],[-0.8125,0.3281,0],[-0.7969,0.3281,0],[-0.7812,0.3281,0],[-0.7656,0.3281,0],[-0.75,0.3281,0],[-0.7344,0.3281,0],[-0.7188,0.3281,0],[-0.7031,0.3281,0],[-0.6875,0.3281,0],[-0.6719,0.3281,0],[-0.6562,0.3281,0],[-0.6406,0.3281,0],[-0.625,0.3281,0],[-0.6094,0.3281,0],[-0.5938,0.3281,0],[-0.5781,0.3281,0],[-0.5625,0.3281,0],[-0.5469,0.3281,0],[-0.5312,0.3281,0],[-0.5156,0.3281,0],[-0.5,0.3281,0],[-0.4844,0.3281,0],[-0.4688,0.3281,0],[-0.4531,0.3281,0],[-0.4375,0.3281,0],[-0.4219,0.3281,0],[-0.4062,0.3281,0],[-0.3906,0.3281,0.0049],[-0.375,0.3281,0.0118],[-0.3594,0.3281,0.0142],[-0.3438,0.3281,0.0132],[-0.3281,0.3281,0.0123],[-0.3125,0.3281,0.0127],[-0.2969,0.3281,0.0167],[-0.2812,0.3281,0.0157],[-0.2656,0.3281,0.0123],[-0.25,0.3281,0.0127],[-0.2344,0.3281,0.0147],[-0.2188,0.3281,0.0201],[-0.2031,0.3281,0.0186],[-0.1875,0.3281,0.0162],[-0.1719,0.3281,0.0162],[-0.1562,0.3281,0.0167],[-0.1406,0.3281,0.0157],[-0.125,0.3281,0.0152],[-0.1094,0.3281,0.0152],[-0.0938,0.3281,0.0162],[-0.0781,0.3281,0.0152],[-0.0625,0.3281,0.0152],[-0.0469,0.3281,0.0157],[-0.0312,0.3281,0.0127],[-0.0156,0.3281,0.0123],[0,0.3281,0.0118],[0.0156,0.3281,0.0123],[0.0312,0.3281,0.0127],[0.0469,0.3281,0.0172],[0.0625,0.3281,0.0201],[0.0781,0.3281,0.0093],[0.0938,0.3281,0],[0.1094,0.3281,0],[0.125,0.3281,0.001],[0.1406,0.3281,0.0186],[0.1562,0.3281,0.026],[0.1719,0.3281,0.0333],[0.1875,0.3281,0.0289],[0.2031,0.3281,0.0201],[0.2188,0.3281,0.0245],[0.2344,0.3281,0.0245],[0.25,0.3281,0.0216],[0.2656,0.3281,0.0201],[0.2812,0.3281,0.023],[0.2969,0.3281,0.0358],[0.3125,0.3281,0.0324],[0.3281,0.3281,0.025],[0.3438,0.3281,0.024],[0.3594,0.3281,0.0216],[0.375,0.3281,0.0147],[0.3906,0.3281,0.0181],[0.4062,0.3281,0.025],[0.4219,0.3281,0.0289],[0.4375,0.3281,0.0412],[0.4531,0.3281,0.048],[0.4688,0.3281,0.0515],[0.4844,0.3281,0.0392],[0.5,0.3281,0.0402],[0.5156,0.3281,0.05],[0.5312,0.3281,0.051],[0.5469,0.3281,0.048],[0.5625,0.3281,0.0598],[0.5781,0.3281,0.0495],[0.5938,0.3281,0.0407],[0.6094,0.3281,0.0412],[0.625,0.3281,0.0358],[0.6406,0.3281,0.0299],[0.6562,0.3281,0.0583],[0.6719,0.3281,0.0789],[0.6875,0.3281,0.0745],[0.7031,0.3281,0.0426],[0.7188,0.3281,0.0397],[0.7344,0.3281,0.0387],[0.75,0.3281,0.0348],[0.7656,0.3281,0.0387],[0.7812,0.3281,0.0358],[0.7969,0.3281,0.0304],[0.8125,0.3281,0.0348],[0.8281,0.3281,0.0358],[0.8438,0.3281,0.0319],[0.8594,0.3281,0.0255],[0.875,0.3281,0.027],[0.8906,0.3281,0.0196],[0.9062,0.3281,0.0152],[0.9219,0.3281,0.001],[0.9375,0.3281,0],[0.9531,0.3281,0],[0.9688,0.3281,0],[0.9844,0.3281,0],[-1,0.3438,0],[-0.9844,0.3438,0],[-0.9688,0.3438,0],[-0.9531,0.3438,0],[-0.9375,0.3438,0],[-0.9219,0.3438,0],[-0.9062,0.3438,0],[-0.8906,0.3438,0],[-0.875,0.3438,0],[-0.8594,0.3438,0],[-0.8438,0.3438,0],[-0.8281,0.3438,0],[-0.8125,0.3438,0],[-0.7969,0.3438,0],[-0.7812,0.3438,0],[-0.7656,0.3438,0],[-0.75,0.3438,0],[-0.7344,0.3438,0],[-0.7188,0.3438,0],[-0.7031,0.3438,0],[-0.6875,0.3438,0],[-0.6719,0.3438,0],[-0.6562,0.3438,0],[-0.6406,0.3438,0],[-0.625,0.3438,0],[-0.6094,0.3438,0],[-0.5938,0.3438,0],[-0.5781,0.3438,0],[-0.5625,0.3438,0],[-0.5469,0.3438,0],[-0.5312,0.3438,0],[-0.5156,0.3438,0],[-0.5,0.3438,0],[-0.4844,0.3438,0],[-0.4688,0.3438,0],[-0.4531,0.3438,0],[-0.4375,0.3438,0],[-0.4219,0.3438,0.0074],[-0.4062,0.3438,0.0103],[-0.3906,0.3438,0.0108],[-0.375,0.3438,0.0162],[-0.3594,0.3438,0.0157],[-0.3438,0.3438,0.0142],[-0.3281,0.3438,0.0132],[-0.3125,0.3438,0.0123],[-0.2969,0.3438,0.0123],[-0.2812,0.3438,0.0132],[-0.2656,0.3438,0.0152],[-0.25,0.3438,0.0157],[-0.2344,0.3438,0.0157],[-0.2188,0.3438,0.0157],[-0.2031,0.3438,0.0152],[-0.1875,0.3438,0.0157],[-0.1719,0.3438,0.0152],[-0.1562,0.3438,0.0147],[-0.1406,0.3438,0.0137],[-0.125,0.3438,0.0142],[-0.1094,0.3438,0.0147],[-0.0938,0.3438,0.0157],[-0.0781,0.3438,0.0152],[-0.0625,0.3438,0.0132],[-0.0469,0.3438,0.0123],[-0.0312,0.3438,0.0118],[-0.0156,0.3438,0.0118],[0,0.3438,0.0127],[0.0156,0.3438,0.0132],[0.0312,0.3438,0.0235],[0.0469,0.3438,0.023],[0.0625,0.3438,0.0206],[0.0781,0.3438,0.0093],[0.0938,0.3438,0],[0.1094,0.3438,0],[0.125,0.3438,0.0142],[0.1406,0.3438,0.0426],[0.1562,0.3438,0.0407],[0.1719,0.3438,0.0377],[0.1875,0.3438,0.0304],[0.2031,0.3438,0.0211],[0.2188,0.3438,0.0255],[0.2344,0.3438,0.0221],[0.25,0.3438,0.0181],[0.2656,0.3438,0.025],[0.2812,0.3438,0.0284],[0.2969,0.3438,0.0358],[0.3125,0.3438,0.0338],[0.3281,0.3438,0.0235],[0.3438,0.3438,0.0191],[0.3594,0.3438,0.0172],[0.375,0.3438,0.0157],[0.3906,0.3438,0.0083],[0.4062,0.3438,0.0235],[0.4219,0.3438,0.0289],[0.4375,0.3438,0.0387],[0.4531,0.3438,0.0343],[0.4688,0.3438,0.0431],[0.4844,0.3438,0.0373],[0.5,0.3438,0.0314],[0.5156,0.3438,0.0441],[0.5312,0.3438,0.0377],[0.5469,0.3438,0.0422],[0.5625,0.3438,0.0534],[0.5781,0.3438,0.0529],[0.5938,0.3438,0.0461],[0.6094,0.3438,0.0402],[0.625,0.3438,0.0348],[0.6406,0.3438,0.0328],[0.6562,0.3438,0.049],[0.6719,0.3438,0.076],[0.6875,0.3438,0.0637],[0.7031,0.3438,0.0471],[0.7188,0.3438,0.0436],[0.7344,0.3438,0.0525],[0.75,0.3438,0.0324],[0.7656,0.3438,0.0387],[0.7812,0.3438,0.0549],[0.7969,0.3438,0.0343],[0.8125,0.3438,0.0431],[0.8281,0.3438,0.0412],[0.8438,0.3438,0.0284],[0.8594,0.3438,0.0221],[0.875,0.3438,0.0206],[0.8906,0.3438,0.0196],[0.9062,0.3438,0.0206],[0.9219,0.3438,0.0142],[0.9375,0.3438,0.0005],[0.9531,0.3438,0],[0.9688,0.3438,0],[0.9844,0.3438,0],[-1,0.3594,0],[-0.9844,0.3594,0],[-0.9688,0.3594,0],[-0.9531,0.3594,0],[-0.9375,0.3594,0],[-0.9219,0.3594,0],[-0.9062,0.3594,0],[-0.8906,0.3594,0],[-0.875,0.3594,0],[-0.8594,0.3594,0],[-0.8438,0.3594,0],[-0.8281,0.3594,0],[-0.8125,0.3594,0],[-0.7969,0.3594,0],[-0.7812,0.3594,0],[-0.7656,0.3594,0],[-0.75,0.3594,0],[-0.7344,0.3594,0],[-0.7188,0.3594,0],[-0.7031,0.3594,0],[-0.6875,0.3594,0],[-0.6719,0.3594,0],[-0.6562,0.3594,0],[-0.6406,0.3594,0],[-0.625,0.3594,0],[-0.6094,0.3594,0],[-0.5938,0.3594,0],[-0.5781,0.3594,0],[-0.5625,0.3594,0],[-0.5469,0.3594,0],[-0.5312,0.3594,0],[-0.5156,0.3594,0],[-0.5,0.3594,0],[-0.4844,0.3594,0],[-0.4688,0.3594,0],[-0.4531,0.3594,0],[-0.4375,0.3594,0.0088],[-0.4219,0.3594,0.0201],[-0.4062,0.3594,0.0152],[-0.3906,0.3594,0.0132],[-0.375,0.3594,0.0137],[-0.3594,0.3594,0.0142],[-0.3438,0.3594,0.0132],[-0.3281,0.3594,0.0118],[-0.3125,0.3594,0.0118],[-0.2969,0.3594,0.0132],[-0.2812,0.3594,0.0167],[-0.2656,0.3594,0.0387],[-0.25,0.3594,0.027],[-0.2344,0.3594,0.0211],[-0.2188,0.3594,0.0167],[-0.2031,0.3594,0.0167],[-0.1875,0.3594,0.0157],[-0.1719,0.3594,0.0157],[-0.1562,0.3594,0.0142],[-0.1406,0.3594,0.0137],[-0.125,0.3594,0.0132],[-0.1094,0.3594,0.0137],[-0.0938,0.3594,0.0147],[-0.0781,0.3594,0.0157],[-0.0625,0.3594,0.0132],[-0.0469,0.3594,0.0118],[-0.0312,0.3594,0.0118],[-0.0156,0.3594,0.0118],[0,0.3594,0.0132],[0.0156,0.3594,0.0245],[0.0312,0.3594,0.0265],[0.0469,0.3594,0.027],[0.0625,0.3594,0.0245],[0.0781,0.3594,0.0118],[0.0938,0.3594,0],[0.1094,0.3594,0],[0.125,0.3594,0.0221],[0.1406,0.3594,0.0333],[0.1562,0.3594,0.0475],[0.1719,0.3594,0.0392],[0.1875,0.3594,0.0255],[0.2031,0.3594,0.0201],[0.2188,0.3594,0.024],[0.2344,0.3594,0.0201],[0.25,0.3594,0.0225],[0.2656,0.3594,0.0397],[0.2812,0.3594,0.0426],[0.2969,0.3594,0.0304],[0.3125,0.3594,0.0309],[0.3281,0.3594,0.0221],[0.3438,0.3594,0.0181],[0.3594,0.3594,0.0162],[0.375,0.3594,0.0127],[0.3906,0.3594,0.0098],[0.4062,0.3594,0.0181],[0.4219,0.3594,0.0319],[0.4375,0.3594,0.0333],[0.4531,0.3594,0.026],[0.4688,0.3594,0.0363],[0.4844,0.3594,0.0289],[0.5,0.3594,0.0358],[0.5156,0.3594,0.0363],[0.5312,0.3594,0.0363],[0.5469,0.3594,0.0461],[0.5625,0.3594,0.0632],[0.5781,0.3594,0.0564],[0.5938,0.3594,0.048],[0.6094,0.3594,0.0436],[0.625,0.3594,0.0412],[0.6406,0.3594,0.0358],[0.6562,0.3594,0.0382],[0.6719,0.3594,0.0725],[0.6875,0.3594,0.0525],[0.7031,0.3594,0.0593],[0.7188,0.3594,0.0515],[0.7344,0.3594,0.0598],[0.75,0.3594,0.0422],[0.7656,0.3594,0.0485],[0.7812,0.3594,0.0505],[0.7969,0.3594,0.0515],[0.8125,0.3594,0.0613],[0.8281,0.3594,0.0387],[0.8438,0.3594,0.023],[0.8594,0.3594,0.0186],[0.875,0.3594,0.0152],[0.8906,0.3594,0.0147],[0.9062,0.3594,0.0176],[0.9219,0.3594,0.0147],[0.9375,0.3594,0],[0.9531,0.3594,0],[0.9688,0.3594,0],[0.9844,0.3594,0],[-1,0.375,0],[-0.9844,0.375,0],[-0.9688,0.375,0],[-0.9531,0.375,0],[-0.9375,0.375,0],[-0.9219,0.375,0],[-0.9062,0.375,0],[-0.8906,0.375,0],[-0.875,0.375,0],[-0.8594,0.375,0],[-0.8438,0.375,0],[-0.8281,0.375,0],[-0.8125,0.375,0],[-0.7969,0.375,0],[-0.7812,0.375,0],[-0.7656,0.375,0],[-0.75,0.375,0],[-0.7344,0.375,0],[-0.7188,0.375,0],[-0.7031,0.375,0],[-0.6875,0.375,0],[-0.6719,0.375,0],[-0.6562,0.375,0],[-0.6406,0.375,0],[-0.625,0.375,0],[-0.6094,0.375,0],[-0.5938,0.375,0],[-0.5781,0.375,0],[-0.5625,0.375,0],[-0.5469,0.375,0],[-0.5312,0.375,0],[-0.5156,0.375,0],[-0.5,0.375,0],[-0.4844,0.375,0],[-0.4688,0.375,0],[-0.4531,0.375,0],[-0.4375,0.375,0.0137],[-0.4219,0.375,0.0265],[-0.4062,0.375,0.024],[-0.3906,0.375,0.0176],[-0.375,0.375,0.0147],[-0.3594,0.375,0.0152],[-0.3438,0.375,0.0142],[-0.3281,0.375,0.0137],[-0.3125,0.375,0.0132],[-0.2969,0.375,0.0211],[-0.2812,0.375,0.0176],[-0.2656,0.375,0.0314],[-0.25,0.375,0.0387],[-0.2344,0.375,0.0304],[-0.2188,0.375,0.0186],[-0.2031,0.375,0.0167],[-0.1875,0.375,0.0162],[-0.1719,0.375,0.0147],[-0.1562,0.375,0.0147],[-0.1406,0.375,0.0142],[-0.125,0.375,0.0132],[-0.1094,0.375,0.0132],[-0.0938,0.375,0.0132],[-0.0781,0.375,0.0132],[-0.0625,0.375,0.0157],[-0.0469,0.375,0.0118],[-0.0312,0.375,0.0118],[-0.0156,0.375,0.0132],[0,0.375,0.0196],[0.0156,0.375,0.0358],[0.0312,0.375,0.0235],[0.0469,0.375,0.0211],[0.0625,0.375,0.0211],[0.0781,0.375,0.0123],[0.0938,0.375,0],[0.1094,0.375,0],[0.125,0.375,0],[0.1406,0.375,0.001],[0.1562,0.375,0.026],[0.1719,0.375,0.0324],[0.1875,0.375,0.024],[0.2031,0.375,0.0235],[0.2188,0.375,0.0132],[0.2344,0.375,0.0191],[0.25,0.375,0.0279],[0.2656,0.375,0.0348],[0.2812,0.375,0.0309],[0.2969,0.375,0.026],[0.3125,0.375,0.0289],[0.3281,0.375,0.0201],[0.3438,0.375,0.0172],[0.3594,0.375,0.0147],[0.375,0.375,0.0118],[0.3906,0.375,0.0108],[0.4062,0.375,0.0176],[0.4219,0.375,0.0314],[0.4375,0.375,0.0265],[0.4531,0.375,0.0235],[0.4688,0.375,0.0348],[0.4844,0.375,0.023],[0.5,0.375,0.0265],[0.5156,0.375,0.0289],[0.5312,0.375,0.0382],[0.5469,0.375,0.0495],[0.5625,0.375,0.0593],[0.5781,0.375,0.0529],[0.5938,0.375,0.0446],[0.6094,0.375,0.0436],[0.625,0.375,0.0353],[0.6406,0.375,0.0314],[0.6562,0.375,0.0304],[0.6719,0.375,0.048],[0.6875,0.375,0.0387],[0.7031,0.375,0.0598],[0.7188,0.375,0.0588],[0.7344,0.375,0.0608],[0.75,0.375,0.0676],[0.7656,0.375,0.0564],[0.7812,0.375,0.0377],[0.7969,0.375,0.0397],[0.8125,0.375,0.0436],[0.8281,0.375,0.0515],[0.8438,0.375,0.027],[0.8594,0.375,0.0211],[0.875,0.375,0.0211],[0.8906,0.375,0.0221],[0.9062,0.375,0.0147],[0.9219,0.375,0.0211],[0.9375,0.375,0.0054],[0.9531,0.375,0],[0.9688,0.375,0],[0.9844,0.375,0],[-1,0.3906,0],[-0.9844,0.3906,0],[-0.9688,0.3906,0],[-0.9531,0.3906,0],[-0.9375,0.3906,0],[-0.9219,0.3906,0],[-0.9062,0.3906,0],[-0.8906,0.3906,0],[-0.875,0.3906,0],[-0.8594,0.3906,0],[-0.8438,0.3906,0],[-0.8281,0.3906,0],[-0.8125,0.3906,0],[-0.7969,0.3906,0],[-0.7812,0.3906,0],[-0.7656,0.3906,0],[-0.75,0.3906,0],[-0.7344,0.3906,0],[-0.7188,0.3906,0],[-0.7031,0.3906,0],[-0.6875,0.3906,0],[-0.6719,0.3906,0],[-0.6562,0.3906,0],[-0.6406,0.3906,0],[-0.625,0.3906,0],[-0.6094,0.3906,0],[-0.5938,0.3906,0],[-0.5781,0.3906,0],[-0.5625,0.3906,0],[-0.5469,0.3906,0],[-0.5312,0.3906,0],[-0.5156,0.3906,0],[-0.5,0.3906,0],[-0.4844,0.3906,0],[-0.4688,0.3906,0],[-0.4531,0.3906,0],[-0.4375,0.3906,0.0059],[-0.4219,0.3906,0.0181],[-0.4062,0.3906,0.0284],[-0.3906,0.3906,0.0216],[-0.375,0.3906,0.0196],[-0.3594,0.3906,0.0191],[-0.3438,0.3906,0.0186],[-0.3281,0.3906,0.0176],[-0.3125,0.3906,0.0181],[-0.2969,0.3906,0.0598],[-0.2812,0.3906,0.0451],[-0.2656,0.3906,0.023],[-0.25,0.3906,0.0475],[-0.2344,0.3906,0.0299],[-0.2188,0.3906,0.0216],[-0.2031,0.3906,0.0162],[-0.1875,0.3906,0.0181],[-0.1719,0.3906,0.0186],[-0.1562,0.3906,0.0348],[-0.1406,0.3906,0.0412],[-0.125,0.3906,0.0294],[-0.1094,0.3906,0.0167],[-0.0938,0.3906,0.0132],[-0.0781,0.3906,0.0132],[-0.0625,0.3906,0.0216],[-0.0469,0.3906,0.0118],[-0.0312,0.3906,0.0172],[-0.0156,0.3906,0.0265],[0,0.3906,0.0275],[0.0156,0.3906,0.0397],[0.0312,0.3906,0.0309],[0.0469,0.3906,0.026],[0.0625,0.3906,0.0221],[0.0781,0.3906,0.0132],[0.0938,0.3906,0],[0.1094,0.3906,0],[0.125,0.3906,0],[0.1406,0.3906,0],[0.1562,0.3906,0.0015],[0.1719,0.3906,0.0103],[0.1875,0.3906,0.0172],[0.2031,0.3906,0.0309],[0.2188,0.3906,0.0172],[0.2344,0.3906,0.0049],[0.25,0.3906,0.023],[0.2656,0.3906,0.0225],[0.2812,0.3906,0.0196],[0.2969,0.3906,0.0196],[0.3125,0.3906,0.0225],[0.3281,0.3906,0.0191],[0.3438,0.3906,0.0152],[0.3594,0.3906,0.0181],[0.375,0.3906,0.0157],[0.3906,0.3906,0.0049],[0.4062,0.3906,0.0152],[0.4219,0.3906,0.0216],[0.4375,0.3906,0.0186],[0.4531,0.3906,0.0196],[0.4688,0.3906,0.0216],[0.4844,0.3906,0.0255],[0.5,0.3906,0.0358],[0.5156,0.3906,0.0324],[0.5312,0.3906,0.0338],[0.5469,0.3906,0.0446],[0.5625,0.3906,0.0387],[0.5781,0.3906,0.0353],[0.5938,0.3906,0.0353],[0.6094,0.3906,0.0407],[0.625,0.3906,0.0387],[0.6406,0.3906,0.0353],[0.6562,0.3906,0.0284],[0.6719,0.3906,0.0319],[0.6875,0.3906,0.0613],[0.7031,0.3906,0.0407],[0.7188,0.3906,0.0402],[0.7344,0.3906,0.0632],[0.75,0.3906,0.074],[0.7656,0.3906,0.0632],[0.7812,0.3906,0.0373],[0.7969,0.3906,0.0255],[0.8125,0.3906,0.0279],[0.8281,0.3906,0.0328],[0.8438,0.3906,0.0279],[0.8594,0.3906,0.0368],[0.875,0.3906,0.0299],[0.8906,0.3906,0.0191],[0.9062,0.3906,0.0137],[0.9219,0.3906,0.0123],[0.9375,0.3906,0.0093],[0.9531,0.3906,0],[0.9688,0.3906,0],[0.9844,0.3906,0],[-1,0.4062,0],[-0.9844,0.4062,0],[-0.9688,0.4062,0],[-0.9531,0.4062,0],[-0.9375,0.4062,0],[-0.9219,0.4062,0],[-0.9062,0.4062,0],[-0.8906,0.4062,0],[-0.875,0.4062,0],[-0.8594,0.4062,0],[-0.8438,0.4062,0],[-0.8281,0.4062,0],[-0.8125,0.4062,0],[-0.7969,0.4062,0],[-0.7812,0.4062,0],[-0.7656,0.4062,0],[-0.75,0.4062,0],[-0.7344,0.4062,0],[-0.7188,0.4062,0],[-0.7031,0.4062,0],[-0.6875,0.4062,0],[-0.6719,0.4062,0],[-0.6562,0.4062,0],[-0.6406,0.4062,0],[-0.625,0.4062,0],[-0.6094,0.4062,0],[-0.5938,0.4062,0],[-0.5781,0.4062,0],[-0.5625,0.4062,0],[-0.5469,0.4062,0],[-0.5312,0.4062,0],[-0.5156,0.4062,0],[-0.5,0.4062,0],[-0.4844,0.4062,0],[-0.4688,0.4062,0],[-0.4531,0.4062,0],[-0.4375,0.4062,0.0123],[-0.4219,0.4062,0.0299],[-0.4062,0.4062,0.0397],[-0.3906,0.4062,0.0353],[-0.375,0.4062,0.0265],[-0.3594,0.4062,0.0216],[-0.3438,0.4062,0.0206],[-0.3281,0.4062,0.0196],[-0.3125,0.4062,0.0206],[-0.2969,0.4062,0.0294],[-0.2812,0.4062,0.0373],[-0.2656,0.4062,0.0225],[-0.25,0.4062,0.0147],[-0.2344,0.4062,0.0225],[-0.2188,0.4062,0.0206],[-0.2031,0.4062,0.0181],[-0.1875,0.4062,0.0181],[-0.1719,0.4062,0.0216],[-0.1562,0.4062,0.0245],[-0.1406,0.4062,0.0426],[-0.125,0.4062,0.0485],[-0.1094,0.4062,0.0373],[-0.0938,0.4062,0.0172],[-0.0781,0.4062,0.023],[-0.0625,0.4062,0.0412],[-0.0469,0.4062,0.0132],[-0.0312,0.4062,0.0328],[-0.0156,0.4062,0.0299],[0,0.4062,0.0328],[0.0156,0.4062,0.0358],[0.0312,0.4062,0.0304],[0.0469,0.4062,0.0255],[0.0625,0.4062,0.0225],[0.0781,0.4062,0.0152],[0.0938,0.4062,0],[0.1094,0.4062,0],[0.125,0.4062,0],[0.1406,0.4062,0],[0.1562,0.4062,0],[0.1719,0.4062,0],[0.1875,0.4062,0.001],[0.2031,0.4062,0.0176],[0.2188,0.4062,0.0211],[0.2344,0.4062,0.0034],[0.25,0.4062,0.0074],[0.2656,0.4062,0.0123],[0.2812,0.4062,0.0137],[0.2969,0.4062,0.0157],[0.3125,0.4062,0.0162],[0.3281,0.4062,0.0162],[0.3438,0.4062,0.0152],[0.3594,0.4062,0.0167],[0.375,0.4062,0.0147],[0.3906,0.4062,0.0054],[0.4062,0.4062,0.0157],[0.4219,0.4062,0.0181],[0.4375,0.4062,0.0147],[0.4531,0.4062,0.0176],[0.4688,0.4062,0.0176],[0.4844,0.4062,0.0304],[0.5,0.4062,0.0319],[0.5156,0.4062,0.0441],[0.5312,0.4062,0.0436],[0.5469,0.4062,0.0461],[0.5625,0.4062,0.023],[0.5781,0.4062,0.0186],[0.5938,0.4062,0.0265],[0.6094,0.4062,0.0422],[0.625,0.4062,0.0431],[0.6406,0.4062,0.0363],[0.6562,0.4062,0.0275],[0.6719,0.4062,0.0235],[0.6875,0.4062,0.0706],[0.7031,0.4062,0.0564],[0.7188,0.4062,0.0304],[0.7344,0.4062,0.0309],[0.75,0.4062,0.0549],[0.7656,0.4062,0.0819],[0.7812,0.4062,0.0667],[0.7969,0.4062,0.0245],[0.8125,0.4062,0.0162],[0.8281,0.4062,0.0196],[0.8438,0.4062,0.0328],[0.8594,0.4062,0.0363],[0.875,0.4062,0.025],[0.8906,0.4062,0.0152],[0.9062,0.4062,0.0078],[0.9219,0.4062,0.0098],[0.9375,0.4062,0.0083],[0.9531,0.4062,0],[0.9688,0.4062,0],[0.9844,0.4062,0],[-1,0.4219,0],[-0.9844,0.4219,0],[-0.9688,0.4219,0],[-0.9531,0.4219,0],[-0.9375,0.4219,0],[-0.9219,0.4219,0],[-0.9062,0.4219,0],[-0.8906,0.4219,0],[-0.875,0.4219,0],[-0.8594,0.4219,0],[-0.8438,0.4219,0],[-0.8281,0.4219,0],[-0.8125,0.4219,0],[-0.7969,0.4219,0],[-0.7812,0.4219,0],[-0.7656,0.4219,0],[-0.75,0.4219,0],[-0.7344,0.4219,0],[-0.7188,0.4219,0],[-0.7031,0.4219,0],[-0.6875,0.4219,0],[-0.6719,0.4219,0],[-0.6562,0.4219,0],[-0.6406,0.4219,0],[-0.625,0.4219,0],[-0.6094,0.4219,0],[-0.5938,0.4219,0],[-0.5781,0.4219,0],[-0.5625,0.4219,0],[-0.5469,0.4219,0],[-0.5312,0.4219,0],[-0.5156,0.4219,0],[-0.5,0.4219,0],[-0.4844,0.4219,0],[-0.4688,0.4219,0],[-0.4531,0.4219,0],[-0.4375,0.4219,0.0172],[-0.4219,0.4219,0.0471],[-0.4062,0.4219,0.0451],[-0.3906,0.4219,0.0358],[-0.375,0.4219,0.0289],[-0.3594,0.4219,0.025],[-0.3438,0.4219,0.0235],[-0.3281,0.4219,0.0196],[-0.3125,0.4219,0.0211],[-0.2969,0.4219,0.0397],[-0.2812,0.4219,0.0681],[-0.2656,0.4219,0.0475],[-0.25,0.4219,0.0196],[-0.2344,0.4219,0.0186],[-0.2188,0.4219,0.0172],[-0.2031,0.4219,0.0157],[-0.1875,0.4219,0.0191],[-0.1719,0.4219,0.0186],[-0.1562,0.4219,0.0304],[-0.1406,0.4219,0.0235],[-0.125,0.4219,0.0539],[-0.1094,0.4219,0.0613],[-0.0938,0.4219,0.0373],[-0.0781,0.4219,0.0265],[-0.0625,0.4219,0.0377],[-0.0469,0.4219,0.0201],[-0.0312,0.4219,0.0206],[-0.0156,0.4219,0.0206],[0,0.4219,0.0431],[0.0156,0.4219,0.0333],[0.0312,0.4219,0.0191],[0.0469,0.4219,0.0201],[0.0625,0.4219,0.0221],[0.0781,0.4219,0.0152],[0.0938,0.4219,0.0025],[0.1094,0.4219,0],[0.125,0.4219,0],[0.1406,0.4219,0],[0.1562,0.4219,0],[0.1719,0.4219,0.001],[0.1875,0.4219,0],[0.2031,0.4219,0],[0.2188,0.4219,0.0049],[0.2344,0.4219,0.002],[0.25,0.4219,0],[0.2656,0.4219,0],[0.2812,0.4219,0.002],[0.2969,0.4219,0.0083],[0.3125,0.4219,0.0108],[0.3281,0.4219,0.0123],[0.3438,0.4219,0.0127],[0.3594,0.4219,0.0147],[0.375,0.4219,0.0118],[0.3906,0.4219,0.001],[0.4062,0.4219,0.0103],[0.4219,0.4219,0.0142],[0.4375,0.4219,0.0162],[0.4531,0.4219,0.0181],[0.4688,0.4219,0.0181],[0.4844,0.4219,0.023],[0.5,0.4219,0.0314],[0.5156,0.4219,0.0348],[0.5312,0.4219,0.0441],[0.5469,0.4219,0.0446],[0.5625,0.4219,0.0181],[0.5781,0.4219,0.0157],[0.5938,0.4219,0.0235],[0.6094,0.4219,0.0392],[0.625,0.4219,0.0353],[0.6406,0.4219,0.026],[0.6562,0.4219,0.0181],[0.6719,0.4219,0.026],[0.6875,0.4219,0.0897],[0.7031,0.4219,0.0804],[0.7188,0.4219,0.0338],[0.7344,0.4219,0.0373],[0.75,0.4219,0.0603],[0.7656,0.4219,0.0564],[0.7812,0.4219,0.0652],[0.7969,0.4219,0.0436],[0.8125,0.4219,0.0181],[0.8281,0.4219,0.0078],[0.8438,0.4219,0.0216],[0.8594,0.4219,0.0299],[0.875,0.4219,0.0275],[0.8906,0.4219,0.0176],[0.9062,0.4219,0.0147],[0.9219,0.4219,0.0044],[0.9375,0.4219,0.0029],[0.9531,0.4219,0.0118],[0.9688,0.4219,0],[0.9844,0.4219,0],[-1,0.4375,0],[-0.9844,0.4375,0],[-0.9688,0.4375,0],[-0.9531,0.4375,0],[-0.9375,0.4375,0],[-0.9219,0.4375,0],[-0.9062,0.4375,0],[-0.8906,0.4375,0],[-0.875,0.4375,0],[-0.8594,0.4375,0],[-0.8438,0.4375,0],[-0.8281,0.4375,0],[-0.8125,0.4375,0],[-0.7969,0.4375,0],[-0.7812,0.4375,0],[-0.7656,0.4375,0],[-0.75,0.4375,0],[-0.7344,0.4375,0],[-0.7188,0.4375,0],[-0.7031,0.4375,0],[-0.6875,0.4375,0],[-0.6719,0.4375,0],[-0.6562,0.4375,0],[-0.6406,0.4375,0],[-0.625,0.4375,0],[-0.6094,0.4375,0],[-0.5938,0.4375,0],[-0.5781,0.4375,0],[-0.5625,0.4375,0],[-0.5469,0.4375,0],[-0.5312,0.4375,0],[-0.5156,0.4375,0],[-0.5,0.4375,0],[-0.4844,0.4375,0],[-0.4688,0.4375,0],[-0.4531,0.4375,0],[-0.4375,0.4375,0.0123],[-0.4219,0.4375,0.0358],[-0.4062,0.4375,0.0436],[-0.3906,0.4375,0.0294],[-0.375,0.4375,0.0255],[-0.3594,0.4375,0.0235],[-0.3438,0.4375,0.023],[-0.3281,0.4375,0.0216],[-0.3125,0.4375,0.0235],[-0.2969,0.4375,0.0377],[-0.2812,0.4375,0.0431],[-0.2656,0.4375,0.051],[-0.25,0.4375,0.026],[-0.2344,0.4375,0.0132],[-0.2188,0.4375,0.0132],[-0.2031,0.4375,0.0147],[-0.1875,0.4375,0.0152],[-0.1719,0.4375,0.024],[-0.1562,0.4375,0.0279],[-0.1406,0.4375,0.0265],[-0.125,0.4375,0.0377],[-0.1094,0.4375,0.0828],[-0.0938,0.4375,0.0716],[-0.0781,0.4375,0.0373],[-0.0625,0.4375,0.0456],[-0.0469,0.4375,0.0304],[-0.0312,0.4375,0.024],[-0.0156,0.4375,0.0176],[0,0.4375,0.0157],[0.0156,0.4375,0.0127],[0.0312,0.4375,0.0137],[0.0469,0.4375,0.0142],[0.0625,0.4375,0.0123],[0.0781,0.4375,0.0118],[0.0938,0.4375,0.002],[0.1094,0.4375,0],[0.125,0.4375,0],[0.1406,0.4375,0],[0.1562,0.4375,0.001],[0.1719,0.4375,0.0088],[0.1875,0.4375,0],[0.2031,0.4375,0],[0.2188,0.4375,0],[0.2344,0.4375,0],[0.25,0.4375,0],[0.2656,0.4375,0],[0.2812,0.4375,0.0025],[0.2969,0.4375,0.0005],[0.3125,0.4375,0.0025],[0.3281,0.4375,0.0123],[0.3438,0.4375,0.0123],[0.3594,0.4375,0.0113],[0.375,0.4375,0.0069],[0.3906,0.4375,0.0015],[0.4062,0.4375,0.0103],[0.4219,0.4375,0.0201],[0.4375,0.4375,0.0206],[0.4531,0.4375,0.0132],[0.4688,0.4375,0.0118],[0.4844,0.4375,0.0176],[0.5,0.4375,0.0373],[0.5156,0.4375,0.0422],[0.5312,0.4375,0.0436],[0.5469,0.4375,0.0397],[0.5625,0.4375,0.0157],[0.5781,0.4375,0.0137],[0.5938,0.4375,0.0181],[0.6094,0.4375,0.0328],[0.625,0.4375,0.025],[0.6406,0.4375,0.0216],[0.6562,0.4375,0.0137],[0.6719,0.4375,0.0181],[0.6875,0.4375,0.0525],[0.7031,0.4375,0.076],[0.7188,0.4375,0.0436],[0.7344,0.4375,0.0201],[0.75,0.4375,0.0304],[0.7656,0.4375,0.0319],[0.7812,0.4375,0.0544],[0.7969,0.4375,0.0255],[0.8125,0.4375,0.0098],[0.8281,0.4375,0.0029],[0.8438,0.4375,0.0167],[0.8594,0.4375,0.0201],[0.875,0.4375,0.0265],[0.8906,0.4375,0.0338],[0.9062,0.4375,0.0186],[0.9219,0.4375,0.0049],[0.9375,0.4375,0.0015],[0.9531,0.4375,0.0039],[0.9688,0.4375,0],[0.9844,0.4375,0],[-1,0.4531,0],[-0.9844,0.4531,0],[-0.9688,0.4531,0],[-0.9531,0.4531,0],[-0.9375,0.4531,0],[-0.9219,0.4531,0],[-0.9062,0.4531,0],[-0.8906,0.4531,0],[-0.875,0.4531,0],[-0.8594,0.4531,0],[-0.8438,0.4531,0],[-0.8281,0.4531,0],[-0.8125,0.4531,0],[-0.7969,0.4531,0],[-0.7812,0.4531,0],[-0.7656,0.4531,0],[-0.75,0.4531,0],[-0.7344,0.4531,0],[-0.7188,0.4531,0],[-0.7031,0.4531,0],[-0.6875,0.4531,0],[-0.6719,0.4531,0],[-0.6562,0.4531,0],[-0.6406,0.4531,0],[-0.625,0.4531,0],[-0.6094,0.4531,0],[-0.5938,0.4531,0],[-0.5781,0.4531,0],[-0.5625,0.4531,0],[-0.5469,0.4531,0],[-0.5312,0.4531,0],[-0.5156,0.4531,0],[-0.5,0.4531,0],[-0.4844,0.4531,0],[-0.4688,0.4531,0],[-0.4531,0.4531,0],[-0.4375,0.4531,0.0265],[-0.4219,0.4531,0.025],[-0.4062,0.4531,0.023],[-0.3906,0.4531,0.0353],[-0.375,0.4531,0.0294],[-0.3594,0.4531,0.024],[-0.3438,0.4531,0.023],[-0.3281,0.4531,0.0255],[-0.3125,0.4531,0.0299],[-0.2969,0.4531,0.0373],[-0.2812,0.4531,0.0328],[-0.2656,0.4531,0.025],[-0.25,0.4531,0.0221],[-0.2344,0.4531,0.0108],[-0.2188,0.4531,0.0093],[-0.2031,0.4531,0.0127],[-0.1875,0.4531,0.0083],[-0.1719,0.4531,0.0304],[-0.1562,0.4531,0.0324],[-0.1406,0.4531,0.0221],[-0.125,0.4531,0.0216],[-0.1094,0.4531,0.0583],[-0.0938,0.4531,0.0745],[-0.0781,0.4531,0.05],[-0.0625,0.4531,0.0471],[-0.0469,0.4531,0.0275],[-0.0312,0.4531,0.0549],[-0.0156,0.4531,0.0279],[0,0.4531,0.0235],[0.0156,0.4531,0.0127],[0.0312,0.4531,0.0108],[0.0469,0.4531,0.0113],[0.0625,0.4531,0.0108],[0.0781,0.4531,0.0098],[0.0938,0.4531,0],[0.1094,0.4531,0],[0.125,0.4531,0],[0.1406,0.4531,0.0005],[0.1562,0.4531,0.0127],[0.1719,0.4531,0.001],[0.1875,0.4531,0],[0.2031,0.4531,0],[0.2188,0.4531,0],[0.2344,0.4531,0],[0.25,0.4531,0],[0.2656,0.4531,0],[0.2812,0.4531,0],[0.2969,0.4531,0],[0.3125,0.4531,0.0029],[0.3281,0.4531,0.0137],[0.3438,0.4531,0.0147],[0.3594,0.4531,0.0123],[0.375,0.4531,0.0118],[0.3906,0.4531,0],[0.4062,0.4531,0.0167],[0.4219,0.4531,0.0314],[0.4375,0.4531,0.0206],[0.4531,0.4531,0.0123],[0.4688,0.4531,0.0108],[0.4844,0.4531,0.0127],[0.5,0.4531,0.0211],[0.5156,0.4531,0.0358],[0.5312,0.4531,0.05],[0.5469,0.4531,0.024],[0.5625,0.4531,0.0147],[0.5781,0.4531,0.0167],[0.5938,0.4531,0.0137],[0.6094,0.4531,0.0225],[0.625,0.4531,0.0225],[0.6406,0.4531,0.0206],[0.6562,0.4531,0.023],[0.6719,0.4531,0.0721],[0.6875,0.4531,0.0314],[0.7031,0.4531,0.052],[0.7188,0.4531,0.049],[0.7344,0.4531,0.0186],[0.75,0.4531,0.0343],[0.7656,0.4531,0.0436],[0.7812,0.4531,0.0456],[0.7969,0.4531,0.0255],[0.8125,0.4531,0.0319],[0.8281,0.4531,0.0108],[0.8438,0.4531,0.0029],[0.8594,0.4531,0.023],[0.875,0.4531,0.0113],[0.8906,0.4531,0.0289],[0.9062,0.4531,0.0225],[0.9219,0.4531,0.0113],[0.9375,0.4531,0],[0.9531,0.4531,0],[0.9688,0.4531,0],[0.9844,0.4531,0],[-1,0.4688,0],[-0.9844,0.4688,0],[-0.9688,0.4688,0],[-0.9531,0.4688,0],[-0.9375,0.4688,0],[-0.9219,0.4688,0],[-0.9062,0.4688,0],[-0.8906,0.4688,0],[-0.875,0.4688,0],[-0.8594,0.4688,0],[-0.8438,0.4688,0],[-0.8281,0.4688,0],[-0.8125,0.4688,0],[-0.7969,0.4688,0],[-0.7812,0.4688,0],[-0.7656,0.4688,0],[-0.75,0.4688,0],[-0.7344,0.4688,0],[-0.7188,0.4688,0],[-0.7031,0.4688,0],[-0.6875,0.4688,0],[-0.6719,0.4688,0],[-0.6562,0.4688,0],[-0.6406,0.4688,0],[-0.625,0.4688,0],[-0.6094,0.4688,0],[-0.5938,0.4688,0],[-0.5781,0.4688,0],[-0.5625,0.4688,0],[-0.5469,0.4688,0],[-0.5312,0.4688,0],[-0.5156,0.4688,0],[-0.5,0.4688,0],[-0.4844,0.4688,0],[-0.4688,0.4688,0],[-0.4531,0.4688,0],[-0.4375,0.4688,0.024],[-0.4219,0.4688,0.0196],[-0.4062,0.4688,0.0157],[-0.3906,0.4688,0.0328],[-0.375,0.4688,0.0461],[-0.3594,0.4688,0.0328],[-0.3438,0.4688,0.0284],[-0.3281,0.4688,0.0451],[-0.3125,0.4688,0.0676],[-0.2969,0.4688,0.0559],[-0.2812,0.4688,0.0578],[-0.2656,0.4688,0.051],[-0.25,0.4688,0.0343],[-0.2344,0.4688,0.0108],[-0.2188,0.4688,0.0069],[-0.2031,0.4688,0.0088],[-0.1875,0.4688,0.0069],[-0.1719,0.4688,0.0539],[-0.1562,0.4688,0.0407],[-0.1406,0.4688,0.0324],[-0.125,0.4688,0.0529],[-0.1094,0.4688,0.0294],[-0.0938,0.4688,0.0539],[-0.0781,0.4688,0.0363],[-0.0625,0.4688,0.0304],[-0.0469,0.4688,0.0529],[-0.0312,0.4688,0.0539],[-0.0156,0.4688,0.0186],[0,0.4688,0.0137],[0.0156,0.4688,0.0098],[0.0312,0.4688,0.0103],[0.0469,0.4688,0.0093],[0.0625,0.4688,0.0088],[0.0781,0.4688,0.0113],[0.0938,0.4688,0.0015],[0.1094,0.4688,0],[0.125,0.4688,0],[0.1406,0.4688,0.0054],[0.1562,0.4688,0.0049],[0.1719,0.4688,0],[0.1875,0.4688,0],[0.2031,0.4688,0],[0.2188,0.4688,0],[0.2344,0.4688,0],[0.25,0.4688,0],[0.2656,0.4688,0],[0.2812,0.4688,0],[0.2969,0.4688,0],[0.3125,0.4688,0],[0.3281,0.4688,0.0029],[0.3438,0.4688,0.0137],[0.3594,0.4688,0.0147],[0.375,0.4688,0.0137],[0.3906,0.4688,0.0005],[0.4062,0.4688,0.0147],[0.4219,0.4688,0.0235],[0.4375,0.4688,0.0142],[0.4531,0.4688,0.0118],[0.4688,0.4688,0.0118],[0.4844,0.4688,0.0108],[0.5,0.4688,0.0127],[0.5156,0.4688,0.0221],[0.5312,0.4688,0.0333],[0.5469,0.4688,0.0181],[0.5625,0.4688,0.0201],[0.5781,0.4688,0.0279],[0.5938,0.4688,0.0113],[0.6094,0.4688,0.025],[0.625,0.4688,0.0162],[0.6406,0.4688,0.0172],[0.6562,0.4688,0.0294],[0.6719,0.4688,0.0755],[0.6875,0.4688,0.0422],[0.7031,0.4688,0.0466],[0.7188,0.4688,0.0392],[0.7344,0.4688,0.0275],[0.75,0.4688,0.0123],[0.7656,0.4688,0.049],[0.7812,0.4688,0.0608],[0.7969,0.4688,0.0672],[0.8125,0.4688,0.0613],[0.8281,0.4688,0.0211],[0.8438,0.4688,0.0015],[0.8594,0.4688,0.0235],[0.875,0.4688,0.0167],[0.8906,0.4688,0.0123],[0.9062,0.4688,0.0157],[0.9219,0.4688,0.0078],[0.9375,0.4688,0],[0.9531,0.4688,0],[0.9688,0.4688,0],[0.9844,0.4688,0],[-1,0.4844,0],[-0.9844,0.4844,0],[-0.9688,0.4844,0],[-0.9531,0.4844,0],[-0.9375,0.4844,0],[-0.9219,0.4844,0],[-0.9062,0.4844,0],[-0.8906,0.4844,0],[-0.875,0.4844,0],[-0.8594,0.4844,0],[-0.8438,0.4844,0],[-0.8281,0.4844,0],[-0.8125,0.4844,0],[-0.7969,0.4844,0],[-0.7812,0.4844,0],[-0.7656,0.4844,0],[-0.75,0.4844,0],[-0.7344,0.4844,0],[-0.7188,0.4844,0],[-0.7031,0.4844,0],[-0.6875,0.4844,0],[-0.6719,0.4844,0],[-0.6562,0.4844,0],[-0.6406,0.4844,0],[-0.625,0.4844,0],[-0.6094,0.4844,0],[-0.5938,0.4844,0],[-0.5781,0.4844,0],[-0.5625,0.4844,0],[-0.5469,0.4844,0],[-0.5312,0.4844,0],[-0.5156,0.4844,0],[-0.5,0.4844,0],[-0.4844,0.4844,0],[-0.4688,0.4844,0],[-0.4531,0.4844,0.0005],[-0.4375,0.4844,0.0167],[-0.4219,0.4844,0.0142],[-0.4062,0.4844,0.0132],[-0.3906,0.4844,0.0284],[-0.375,0.4844,0.0338],[-0.3594,0.4844,0.0294],[-0.3438,0.4844,0.0363],[-0.3281,0.4844,0.0397],[-0.3125,0.4844,0.0451],[-0.2969,0.4844,0.0284],[-0.2812,0.4844,0.0348],[-0.2656,0.4844,0.0652],[-0.25,0.4844,0.0348],[-0.2344,0.4844,0.0103],[-0.2188,0.4844,0.0029],[-0.2031,0.4844,0.002],[-0.1875,0.4844,0.002],[-0.1719,0.4844,0.0431],[-0.1562,0.4844,0.0377],[-0.1406,0.4844,0.0377],[-0.125,0.4844,0.0814],[-0.1094,0.4844,0.0559],[-0.0938,0.4844,0.0358],[-0.0781,0.4844,0.0603],[-0.0625,0.4844,0.0525],[-0.0469,0.4844,0.0475],[-0.0312,0.4844,0.0245],[-0.0156,0.4844,0.0172],[0,0.4844,0.0167],[0.0156,0.4844,0.0309],[0.0312,0.4844,0.0078],[0.0469,0.4844,0.0093],[0.0625,0.4844,0.0113],[0.0781,0.4844,0.0127],[0.0938,0.4844,0.0029],[0.1094,0.4844,0],[0.125,0.4844,0.0034],[0.1406,0.4844,0.0172],[0.1562,0.4844,0.0005],[0.1719,0.4844,0],[0.1875,0.4844,0],[0.2031,0.4844,0],[0.2188,0.4844,0],[0.2344,0.4844,0],[0.25,0.4844,0],[0.2656,0.4844,0],[0.2812,0.4844,0],[0.2969,0.4844,0],[0.3125,0.4844,0],[0.3281,0.4844,0],[0.3438,0.4844,0.0005],[0.3594,0.4844,0.0167],[0.375,0.4844,0.0152],[0.3906,0.4844,0.0069],[0.4062,0.4844,0.0015],[0.4219,0.4844,0.0044],[0.4375,0.4844,0.0044],[0.4531,0.4844,0.0162],[0.4688,0.4844,0.0172],[0.4844,0.4844,0.0118],[0.5,0.4844,0.0118],[0.5156,0.4844,0.0152],[0.5312,0.4844,0.024],[0.5469,0.4844,0.0132],[0.5625,0.4844,0.0235],[0.5781,0.4844,0.0461],[0.5938,0.4844,0.0123],[0.6094,0.4844,0.0186],[0.625,0.4844,0.0147],[0.6406,0.4844,0.0137],[0.6562,0.4844,0.0221],[0.6719,0.4844,0.0691],[0.6875,0.4844,0.075],[0.7031,0.4844,0.0554],[0.7188,0.4844,0.0559],[0.7344,0.4844,0.0392],[0.75,0.4844,0.0118],[0.7656,0.4844,0.0304],[0.7812,0.4844,0.0627],[0.7969,0.4844,0.0686],[0.8125,0.4844,0.0593],[0.8281,0.4844,0.0221],[0.8438,0.4844,0.0005],[0.8594,0.4844,0.0078],[0.875,0.4844,0.0309],[0.8906,0.4844,0.0039],[0.9062,0.4844,0.0157],[0.9219,0.4844,0.0127],[0.9375,0.4844,0.0029],[0.9531,0.4844,0],[0.9688,0.4844,0],[0.9844,0.4844,0],[-1,0.5,0],[-0.9844,0.5,0],[-0.9688,0.5,0],[-0.9531,0.5,0],[-0.9375,0.5,0],[-0.9219,0.5,0],[-0.9062,0.5,0],[-0.8906,0.5,0],[-0.875,0.5,0],[-0.8594,0.5,0],[-0.8438,0.5,0],[-0.8281,0.5,0],[-0.8125,0.5,0],[-0.7969,0.5,0],[-0.7812,0.5,0],[-0.7656,0.5,0],[-0.75,0.5,0],[-0.7344,0.5,0],[-0.7188,0.5,0],[-0.7031,0.5,0],[-0.6875,0.5,0],[-0.6719,0.5,0],[-0.6562,0.5,0],[-0.6406,0.5,0],[-0.625,0.5,0],[-0.6094,0.5,0],[-0.5938,0.5,0],[-0.5781,0.5,0],[-0.5625,0.5,0],[-0.5469,0.5,0],[-0.5312,0.5,0],[-0.5156,0.5,0],[-0.5,0.5,0],[-0.4844,0.5,0],[-0.4688,0.5,0],[-0.4531,0.5,0.0113],[-0.4375,0.5,0.0289],[-0.4219,0.5,0.0137],[-0.4062,0.5,0.0132],[-0.3906,0.5,0.0147],[-0.375,0.5,0.0142],[-0.3594,0.5,0.0211],[-0.3438,0.5,0.026],[-0.3281,0.5,0.025],[-0.3125,0.5,0.027],[-0.2969,0.5,0.0186],[-0.2812,0.5,0.0172],[-0.2656,0.5,0.0358],[-0.25,0.5,0.0446],[-0.2344,0.5,0.0093],[-0.2188,0.5,0],[-0.2031,0.5,0],[-0.1875,0.5,0.0005],[-0.1719,0.5,0.0152],[-0.1562,0.5,0.0196],[-0.1406,0.5,0.0402],[-0.125,0.5,0.0716],[-0.1094,0.5,0.0505],[-0.0938,0.5,0.0299],[-0.0781,0.5,0.0441],[-0.0625,0.5,0.0402],[-0.0469,0.5,0.024],[-0.0312,0.5,0.0172],[-0.0156,0.5,0.0186],[0,0.5,0.0157],[0.0156,0.5,0.0319],[0.0312,0.5,0.0279],[0.0469,0.5,0.0152],[0.0625,0.5,0.0025],[0.0781,0.5,0.0088],[0.0938,0.5,0.0015],[0.1094,0.5,0],[0.125,0.5,0.0059],[0.1406,0.5,0.0093],[0.1562,0.5,0],[0.1719,0.5,0],[0.1875,0.5,0],[0.2031,0.5,0],[0.2188,0.5,0],[0.2344,0.5,0],[0.25,0.5,0],[0.2656,0.5,0],[0.2812,0.5,0],[0.2969,0.5,0],[0.3125,0.5,0],[0.3281,0.5,0],[0.3438,0.5,0],[0.3594,0.5,0.001],[0.375,0.5,0.0162],[0.3906,0.5,0.0132],[0.4062,0.5,0.0044],[0.4219,0.5,0],[0.4375,0.5,0],[0.4531,0.5,0.0088],[0.4688,0.5,0.0186],[0.4844,0.5,0.0132],[0.5,0.5,0.0132],[0.5156,0.5,0.0142],[0.5312,0.5,0.0191],[0.5469,0.5,0.0118],[0.5625,0.5,0.024],[0.5781,0.5,0.0676],[0.5938,0.5,0.0167],[0.6094,0.5,0.0137],[0.625,0.5,0.0162],[0.6406,0.5,0.0132],[0.6562,0.5,0.0309],[0.6719,0.5,0.0907],[0.6875,0.5,0.0873],[0.7031,0.5,0.0725],[0.7188,0.5,0.05],[0.7344,0.5,0.0225],[0.75,0.5,0.0186],[0.7656,0.5,0.0132],[0.7812,0.5,0.0328],[0.7969,0.5,0.0392],[0.8125,0.5,0.0544],[0.8281,0.5,0.0402],[0.8438,0.5,0.0098],[0.8594,0.5,0],[0.875,0.5,0.0235],[0.8906,0.5,0.0206],[0.9062,0.5,0.0113],[0.9219,0.5,0.026],[0.9375,0.5,0.0152],[0.9531,0.5,0.0005],[0.9688,0.5,0],[0.9844,0.5,0],[-1,0.5156,0],[-0.9844,0.5156,0],[-0.9688,0.5156,0],[-0.9531,0.5156,0],[-0.9375,0.5156,0],[-0.9219,0.5156,0],[-0.9062,0.5156,0],[-0.8906,0.5156,0],[-0.875,0.5156,0],[-0.8594,0.5156,0],[-0.8438,0.5156,0],[-0.8281,0.5156,0],[-0.8125,0.5156,0],[-0.7969,0.5156,0],[-0.7812,0.5156,0],[-0.7656,0.5156,0],[-0.75,0.5156,0],[-0.7344,0.5156,0],[-0.7188,0.5156,0],[-0.7031,0.5156,0],[-0.6875,0.5156,0],[-0.6719,0.5156,0],[-0.6562,0.5156,0],[-0.6406,0.5156,0],[-0.625,0.5156,0],[-0.6094,0.5156,0],[-0.5938,0.5156,0],[-0.5781,0.5156,0],[-0.5625,0.5156,0],[-0.5469,0.5156,0],[-0.5312,0.5156,0],[-0.5156,0.5156,0],[-0.5,0.5156,0],[-0.4844,0.5156,0],[-0.4688,0.5156,0.0005],[-0.4531,0.5156,0.0137],[-0.4375,0.5156,0.0225],[-0.4219,0.5156,0.0172],[-0.4062,0.5156,0.0235],[-0.3906,0.5156,0.0191],[-0.375,0.5156,0.0211],[-0.3594,0.5156,0.0123],[-0.3438,0.5156,0.0118],[-0.3281,0.5156,0.0137],[-0.3125,0.5156,0.0176],[-0.2969,0.5156,0.0186],[-0.2812,0.5156,0.0132],[-0.2656,0.5156,0.0113],[-0.25,0.5156,0.0225],[-0.2344,0.5156,0.0221],[-0.2188,0.5156,0.0005],[-0.2031,0.5156,0],[-0.1875,0.5156,0.0005],[-0.1719,0.5156,0.0132],[-0.1562,0.5156,0.0172],[-0.1406,0.5156,0.0211],[-0.125,0.5156,0.0441],[-0.1094,0.5156,0.0745],[-0.0938,0.5156,0.0294],[-0.0781,0.5156,0.0201],[-0.0625,0.5156,0.0368],[-0.0469,0.5156,0.0652],[-0.0312,0.5156,0.024],[-0.0156,0.5156,0.0216],[0,0.5156,0.0127],[0.0156,0.5156,0.0137],[0.0312,0.5156,0.0152],[0.0469,0.5156,0.0108],[0.0625,0.5156,0.0029],[0.0781,0.5156,0.0005],[0.0938,0.5156,0],[0.1094,0.5156,0],[0.125,0.5156,0.0127],[0.1406,0.5156,0.002],[0.1562,0.5156,0],[0.1719,0.5156,0],[0.1875,0.5156,0],[0.2031,0.5156,0],[0.2188,0.5156,0],[0.2344,0.5156,0],[0.25,0.5156,0],[0.2656,0.5156,0],[0.2812,0.5156,0],[0.2969,0.5156,0],[0.3125,0.5156,0],[0.3281,0.5156,0],[0.3438,0.5156,0],[0.3594,0.5156,0],[0.375,0.5156,0.0054],[0.3906,0.5156,0.0132],[0.4062,0.5156,0.0088],[0.4219,0.5156,0],[0.4375,0.5156,0],[0.4531,0.5156,0],[0.4688,0.5156,0.0147],[0.4844,0.5156,0.0157],[0.5,0.5156,0.0123],[0.5156,0.5156,0.0118],[0.5312,0.5156,0.0142],[0.5469,0.5156,0.0108],[0.5625,0.5156,0.0255],[0.5781,0.5156,0.0882],[0.5938,0.5156,0.0309],[0.6094,0.5156,0.0069],[0.625,0.5156,0.0137],[0.6406,0.5156,0.0167],[0.6562,0.5156,0.0294],[0.6719,0.5156,0.0485],[0.6875,0.5156,0.0559],[0.7031,0.5156,0.0529],[0.7188,0.5156,0.0461],[0.7344,0.5156,0.0299],[0.75,0.5156,0.0343],[0.7656,0.5156,0.0069],[0.7812,0.5156,0.0147],[0.7969,0.5156,0.0309],[0.8125,0.5156,0.0515],[0.8281,0.5156,0.0672],[0.8438,0.5156,0.0162],[0.8594,0.5156,0.0059],[0.875,0.5156,0.0005],[0.8906,0.5156,0.0186],[0.9062,0.5156,0.0025],[0.9219,0.5156,0.0152],[0.9375,0.5156,0.0181],[0.9531,0.5156,0.0005],[0.9688,0.5156,0],[0.9844,0.5156,0],[-1,0.5312,0],[-0.9844,0.5312,0],[-0.9688,0.5312,0],[-0.9531,0.5312,0],[-0.9375,0.5312,0],[-0.9219,0.5312,0],[-0.9062,0.5312,0],[-0.8906,0.5312,0],[-0.875,0.5312,0],[-0.8594,0.5312,0],[-0.8438,0.5312,0],[-0.8281,0.5312,0],[-0.8125,0.5312,0],[-0.7969,0.5312,0],[-0.7812,0.5312,0],[-0.7656,0.5312,0],[-0.75,0.5312,0],[-0.7344,0.5312,0],[-0.7188,0.5312,0],[-0.7031,0.5312,0],[-0.6875,0.5312,0],[-0.6719,0.5312,0],[-0.6562,0.5312,0],[-0.6406,0.5312,0],[-0.625,0.5312,0],[-0.6094,0.5312,0],[-0.5938,0.5312,0],[-0.5781,0.5312,0],[-0.5625,0.5312,0],[-0.5469,0.5312,0],[-0.5312,0.5312,0],[-0.5156,0.5312,0],[-0.5,0.5312,0],[-0.4844,0.5312,0],[-0.4688,0.5312,0],[-0.4531,0.5312,0.0005],[-0.4375,0.5312,0.0147],[-0.4219,0.5312,0.0123],[-0.4062,0.5312,0.0186],[-0.3906,0.5312,0.0181],[-0.375,0.5312,0.0279],[-0.3594,0.5312,0.0181],[-0.3438,0.5312,0.0123],[-0.3281,0.5312,0.0083],[-0.3125,0.5312,0.0137],[-0.2969,0.5312,0.0127],[-0.2812,0.5312,0.0103],[-0.2656,0.5312,0.0152],[-0.25,0.5312,0.0387],[-0.2344,0.5312,0.0603],[-0.2188,0.5312,0.0113],[-0.2031,0.5312,0],[-0.1875,0.5312,0],[-0.1719,0.5312,0.0118],[-0.1562,0.5312,0.0162],[-0.1406,0.5312,0.0279],[-0.125,0.5312,0.0343],[-0.1094,0.5312,0.0485],[-0.0938,0.5312,0.0377],[-0.0781,0.5312,0.049],[-0.0625,0.5312,0.0593],[-0.0469,0.5312,0.0608],[-0.0312,0.5312,0.0402],[-0.0156,0.5312,0.0157],[0,0.5312,0.0113],[0.0156,0.5312,0.0093],[0.0312,0.5312,0.0137],[0.0469,0.5312,0.0098],[0.0625,0.5312,0.0015],[0.0781,0.5312,0.001],[0.0938,0.5312,0],[0.1094,0.5312,0],[0.125,0.5312,0.0025],[0.1406,0.5312,0],[0.1562,0.5312,0],[0.1719,0.5312,0],[0.1875,0.5312,0],[0.2031,0.5312,0],[0.2188,0.5312,0],[0.2344,0.5312,0],[0.25,0.5312,0],[0.2656,0.5312,0],[0.2812,0.5312,0],[0.2969,0.5312,0],[0.3125,0.5312,0],[0.3281,0.5312,0],[0.3438,0.5312,0],[0.3594,0.5312,0],[0.375,0.5312,0],[0.3906,0.5312,0.0069],[0.4062,0.5312,0.0083],[0.4219,0.5312,0],[0.4375,0.5312,0],[0.4531,0.5312,0],[0.4688,0.5312,0.0093],[0.4844,0.5312,0.024],[0.5,0.5312,0.002],[0.5156,0.5312,0.0025],[0.5312,0.5312,0.0074],[0.5469,0.5312,0.0074],[0.5625,0.5312,0.0157],[0.5781,0.5312,0.0877],[0.5938,0.5312,0.0505],[0.6094,0.5312,0.0025],[0.625,0.5312,0.0098],[0.6406,0.5312,0.0152],[0.6562,0.5312,0.0284],[0.6719,0.5312,0.0245],[0.6875,0.5312,0.0304],[0.7031,0.5312,0.0392],[0.7188,0.5312,0.0696],[0.7344,0.5312,0.0328],[0.75,0.5312,0.0279],[0.7656,0.5312,0.0176],[0.7812,0.5312,0.0025],[0.7969,0.5312,0.0201],[0.8125,0.5312,0.0598],[0.8281,0.5312,0.0696],[0.8438,0.5312,0.023],[0.8594,0.5312,0.0196],[0.875,0.5312,0],[0.8906,0.5312,0.002],[0.9062,0.5312,0.0039],[0.9219,0.5312,0.001],[0.9375,0.5312,0.0005],[0.9531,0.5312,0],[0.9688,0.5312,0],[0.9844,0.5312,0],[-1,0.5469,0],[-0.9844,0.5469,0],[-0.9688,0.5469,0],[-0.9531,0.5469,0],[-0.9375,0.5469,0],[-0.9219,0.5469,0],[-0.9062,0.5469,0],[-0.8906,0.5469,0],[-0.875,0.5469,0],[-0.8594,0.5469,0],[-0.8438,0.5469,0],[-0.8281,0.5469,0],[-0.8125,0.5469,0],[-0.7969,0.5469,0],[-0.7812,0.5469,0],[-0.7656,0.5469,0],[-0.75,0.5469,0],[-0.7344,0.5469,0],[-0.7188,0.5469,0],[-0.7031,0.5469,0],[-0.6875,0.5469,0],[-0.6719,0.5469,0],[-0.6562,0.5469,0],[-0.6406,0.5469,0],[-0.625,0.5469,0],[-0.6094,0.5469,0],[-0.5938,0.5469,0],[-0.5781,0.5469,0],[-0.5625,0.5469,0],[-0.5469,0.5469,0],[-0.5312,0.5469,0],[-0.5156,0.5469,0],[-0.5,0.5469,0],[-0.4844,0.5469,0],[-0.4688,0.5469,0],[-0.4531,0.5469,0],[-0.4375,0.5469,0],[-0.4219,0.5469,0.002],[-0.4062,0.5469,0.0108],[-0.3906,0.5469,0.0098],[-0.375,0.5469,0.0162],[-0.3594,0.5469,0.0127],[-0.3438,0.5469,0.0108],[-0.3281,0.5469,0.0123],[-0.3125,0.5469,0.0069],[-0.2969,0.5469,0.0039],[-0.2812,0.5469,0.0059],[-0.2656,0.5469,0.0074],[-0.25,0.5469,0.0157],[-0.2344,0.5469,0.0392],[-0.2188,0.5469,0.0108],[-0.2031,0.5469,0],[-0.1875,0.5469,0],[-0.1719,0.5469,0.0044],[-0.1562,0.5469,0.0049],[-0.1406,0.5469,0.0172],[-0.125,0.5469,0.0093],[-0.1094,0.5469,0.0029],[-0.0938,0.5469,0.0225],[-0.0781,0.5469,0.0343],[-0.0625,0.5469,0.0422],[-0.0469,0.5469,0.0402],[-0.0312,0.5469,0.0206],[-0.0156,0.5469,0.0137],[0,0.5469,0.0123],[0.0156,0.5469,0.0078],[0.0312,0.5469,0.0054],[0.0469,0.5469,0.0054],[0.0625,0.5469,0],[0.0781,0.5469,0],[0.0938,0.5469,0],[0.1094,0.5469,0],[0.125,0.5469,0],[0.1406,0.5469,0],[0.1562,0.5469,0],[0.1719,0.5469,0],[0.1875,0.5469,0],[0.2031,0.5469,0],[0.2188,0.5469,0],[0.2344,0.5469,0],[0.25,0.5469,0],[0.2656,0.5469,0],[0.2812,0.5469,0],[0.2969,0.5469,0],[0.3125,0.5469,0],[0.3281,0.5469,0],[0.3438,0.5469,0],[0.3594,0.5469,0],[0.375,0.5469,0],[0.3906,0.5469,0.0005],[0.4062,0.5469,0.0118],[0.4219,0.5469,0],[0.4375,0.5469,0],[0.4531,0.5469,0],[0.4688,0.5469,0.0123],[0.4844,0.5469,0.0235],[0.5,0.5469,0],[0.5156,0.5469,0],[0.5312,0.5469,0.0005],[0.5469,0.5469,0],[0.5625,0.5469,0.0034],[0.5781,0.5469,0.0343],[0.5938,0.5469,0.0583],[0.6094,0.5469,0.0118],[0.625,0.5469,0.0064],[0.6406,0.5469,0.0127],[0.6562,0.5469,0.0431],[0.6719,0.5469,0.0284],[0.6875,0.5469,0.0348],[0.7031,0.5469,0.049],[0.7188,0.5469,0.0632],[0.7344,0.5469,0.0578],[0.75,0.5469,0.0176],[0.7656,0.5469,0.0172],[0.7812,0.5469,0.0034],[0.7969,0.5469,0.0088],[0.8125,0.5469,0.027],[0.8281,0.5469,0.0412],[0.8438,0.5469,0.0206],[0.8594,0.5469,0.0162],[0.875,0.5469,0],[0.8906,0.5469,0],[0.9062,0.5469,0],[0.9219,0.5469,0],[0.9375,0.5469,0],[0.9531,0.5469,0],[0.9688,0.5469,0],[0.9844,0.5469,0],[-1,0.5625,0],[-0.9844,0.5625,0],[-0.9688,0.5625,0],[-0.9531,0.5625,0],[-0.9375,0.5625,0],[-0.9219,0.5625,0],[-0.9062,0.5625,0],[-0.8906,0.5625,0],[-0.875,0.5625,0],[-0.8594,0.5625,0],[-0.8438,0.5625,0],[-0.8281,0.5625,0],[-0.8125,0.5625,0],[-0.7969,0.5625,0],[-0.7812,0.5625,0],[-0.7656,0.5625,0],[-0.75,0.5625,0],[-0.7344,0.5625,0],[-0.7188,0.5625,0],[-0.7031,0.5625,0],[-0.6875,0.5625,0],[-0.6719,0.5625,0],[-0.6562,0.5625,0],[-0.6406,0.5625,0],[-0.625,0.5625,0],[-0.6094,0.5625,0],[-0.5938,0.5625,0],[-0.5781,0.5625,0],[-0.5625,0.5625,0],[-0.5469,0.5625,0],[-0.5312,0.5625,0],[-0.5156,0.5625,0],[-0.5,0.5625,0],[-0.4844,0.5625,0],[-0.4688,0.5625,0],[-0.4531,0.5625,0],[-0.4375,0.5625,0.0005],[-0.4219,0.5625,0.0113],[-0.4062,0.5625,0.0157],[-0.3906,0.5625,0.0118],[-0.375,0.5625,0.0059],[-0.3594,0.5625,0.0054],[-0.3438,0.5625,0.0034],[-0.3281,0.5625,0.0108],[-0.3125,0.5625,0.0039],[-0.2969,0.5625,0.0064],[-0.2812,0.5625,0.0127],[-0.2656,0.5625,0.0137],[-0.25,0.5625,0.024],[-0.2344,0.5625,0.0221],[-0.2188,0.5625,0.0059],[-0.2031,0.5625,0.0064],[-0.1875,0.5625,0.0137],[-0.1719,0.5625,0],[-0.1562,0.5625,0],[-0.1406,0.5625,0],[-0.125,0.5625,0.001],[-0.1094,0.5625,0],[-0.0938,0.5625,0.0118],[-0.0781,0.5625,0.0137],[-0.0625,0.5625,0.0216],[-0.0469,0.5625,0.027],[-0.0312,0.5625,0.0162],[-0.0156,0.5625,0.0132],[0,0.5625,0.0245],[0.0156,0.5625,0.0108],[0.0312,0.5625,0.002],[0.0469,0.5625,0.0015],[0.0625,0.5625,0],[0.0781,0.5625,0],[0.0938,0.5625,0],[0.1094,0.5625,0],[0.125,0.5625,0],[0.1406,0.5625,0],[0.1562,0.5625,0],[0.1719,0.5625,0],[0.1875,0.5625,0],[0.2031,0.5625,0],[0.2188,0.5625,0],[0.2344,0.5625,0],[0.25,0.5625,0],[0.2656,0.5625,0],[0.2812,0.5625,0],[0.2969,0.5625,0],[0.3125,0.5625,0],[0.3281,0.5625,0],[0.3438,0.5625,0],[0.3594,0.5625,0],[0.375,0.5625,0],[0.3906,0.5625,0],[0.4062,0.5625,0.0005],[0.4219,0.5625,0],[0.4375,0.5625,0],[0.4531,0.5625,0],[0.4688,0.5625,0.0005],[0.4844,0.5625,0.0034],[0.5,0.5625,0],[0.5156,0.5625,0],[0.5312,0.5625,0],[0.5469,0.5625,0],[0.5625,0.5625,0.0069],[0.5781,0.5625,0.0333],[0.5938,0.5625,0.0417],[0.6094,0.5625,0.026],[0.625,0.5625,0.0049],[0.6406,0.5625,0.0039],[0.6562,0.5625,0.024],[0.6719,0.5625,0.0451],[0.6875,0.5625,0.0711],[0.7031,0.5625,0.0549],[0.7188,0.5625,0.0554],[0.7344,0.5625,0.0676],[0.75,0.5625,0.0534],[0.7656,0.5625,0.027],[0.7812,0.5625,0.0083],[0.7969,0.5625,0.0005],[0.8125,0.5625,0.0172],[0.8281,0.5625,0.0152],[0.8438,0.5625,0.0333],[0.8594,0.5625,0.0216],[0.875,0.5625,0],[0.8906,0.5625,0],[0.9062,0.5625,0],[0.9219,0.5625,0],[0.9375,0.5625,0],[0.9531,0.5625,0],[0.9688,0.5625,0],[0.9844,0.5625,0],[-1,0.5781,0],[-0.9844,0.5781,0],[-0.9688,0.5781,0],[-0.9531,0.5781,0],[-0.9375,0.5781,0],[-0.9219,0.5781,0],[-0.9062,0.5781,0],[-0.8906,0.5781,0],[-0.875,0.5781,0],[-0.8594,0.5781,0],[-0.8438,0.5781,0],[-0.8281,0.5781,0],[-0.8125,0.5781,0],[-0.7969,0.5781,0],[-0.7812,0.5781,0],[-0.7656,0.5781,0],[-0.75,0.5781,0],[-0.7344,0.5781,0],[-0.7188,0.5781,0],[-0.7031,0.5781,0],[-0.6875,0.5781,0],[-0.6719,0.5781,0],[-0.6562,0.5781,0],[-0.6406,0.5781,0],[-0.625,0.5781,0],[-0.6094,0.5781,0],[-0.5938,0.5781,0],[-0.5781,0.5781,0],[-0.5625,0.5781,0],[-0.5469,0.5781,0],[-0.5312,0.5781,0],[-0.5156,0.5781,0],[-0.5,0.5781,0],[-0.4844,0.5781,0],[-0.4688,0.5781,0],[-0.4531,0.5781,0],[-0.4375,0.5781,0.0025],[-0.4219,0.5781,0.0147],[-0.4062,0.5781,0.0132],[-0.3906,0.5781,0.0113],[-0.375,0.5781,0.0064],[-0.3594,0.5781,0.001],[-0.3438,0.5781,0.0005],[-0.3281,0.5781,0.0005],[-0.3125,0.5781,0],[-0.2969,0.5781,0.0098],[-0.2812,0.5781,0.0201],[-0.2656,0.5781,0.0368],[-0.25,0.5781,0.025],[-0.2344,0.5781,0.0044],[-0.2188,0.5781,0],[-0.2031,0.5781,0.002],[-0.1875,0.5781,0.0294],[-0.1719,0.5781,0.0005],[-0.1562,0.5781,0.002],[-0.1406,0.5781,0.0005],[-0.125,0.5781,0],[-0.1094,0.5781,0.0015],[-0.0938,0.5781,0.0191],[-0.0781,0.5781,0.0191],[-0.0625,0.5781,0.0206],[-0.0469,0.5781,0.023],[-0.0312,0.5781,0.0137],[-0.0156,0.5781,0.0132],[0,0.5781,0.0127],[0.0156,0.5781,0.0049],[0.0312,0.5781,0],[0.0469,0.5781,0],[0.0625,0.5781,0],[0.0781,0.5781,0.0005],[0.0938,0.5781,0],[0.1094,0.5781,0],[0.125,0.5781,0],[0.1406,0.5781,0],[0.1562,0.5781,0],[0.1719,0.5781,0],[0.1875,0.5781,0],[0.2031,0.5781,0],[0.2188,0.5781,0],[0.2344,0.5781,0],[0.25,0.5781,0],[0.2656,0.5781,0],[0.2812,0.5781,0],[0.2969,0.5781,0],[0.3125,0.5781,0],[0.3281,0.5781,0],[0.3438,0.5781,0],[0.3594,0.5781,0],[0.375,0.5781,0],[0.3906,0.5781,0],[0.4062,0.5781,0],[0.4219,0.5781,0],[0.4375,0.5781,0],[0.4531,0.5781,0],[0.4688,0.5781,0],[0.4844,0.5781,0],[0.5,0.5781,0],[0.5156,0.5781,0.0015],[0.5312,0.5781,0.0049],[0.5469,0.5781,0.0059],[0.5625,0.5781,0.0201],[0.5781,0.5781,0.0466],[0.5938,0.5781,0.0392],[0.6094,0.5781,0.0294],[0.625,0.5781,0],[0.6406,0.5781,0],[0.6562,0.5781,0.0162],[0.6719,0.5781,0.0525],[0.6875,0.5781,0.0833],[0.7031,0.5781,0.0363],[0.7188,0.5781,0.0284],[0.7344,0.5781,0.0363],[0.75,0.5781,0.0701],[0.7656,0.5781,0.0426],[0.7812,0.5781,0.0265],[0.7969,0.5781,0.0005],[0.8125,0.5781,0.0039],[0.8281,0.5781,0.0029],[0.8438,0.5781,0.0387],[0.8594,0.5781,0.0387],[0.875,0.5781,0.0108],[0.8906,0.5781,0],[0.9062,0.5781,0],[0.9219,0.5781,0],[0.9375,0.5781,0],[0.9531,0.5781,0],[0.9688,0.5781,0],[0.9844,0.5781,0],[-1,0.5938,0],[-0.9844,0.5938,0],[-0.9688,0.5938,0],[-0.9531,0.5938,0],[-0.9375,0.5938,0],[-0.9219,0.5938,0],[-0.9062,0.5938,0],[-0.8906,0.5938,0],[-0.875,0.5938,0],[-0.8594,0.5938,0],[-0.8438,0.5938,0],[-0.8281,0.5938,0],[-0.8125,0.5938,0],[-0.7969,0.5938,0],[-0.7812,0.5938,0],[-0.7656,0.5938,0],[-0.75,0.5938,0],[-0.7344,0.5938,0],[-0.7188,0.5938,0],[-0.7031,0.5938,0],[-0.6875,0.5938,0],[-0.6719,0.5938,0],[-0.6562,0.5938,0],[-0.6406,0.5938,0],[-0.625,0.5938,0],[-0.6094,0.5938,0],[-0.5938,0.5938,0],[-0.5781,0.5938,0],[-0.5625,0.5938,0],[-0.5469,0.5938,0],[-0.5312,0.5938,0],[-0.5156,0.5938,0],[-0.5,0.5938,0],[-0.4844,0.5938,0],[-0.4688,0.5938,0],[-0.4531,0.5938,0],[-0.4375,0.5938,0],[-0.4219,0.5938,0.0078],[-0.4062,0.5938,0.0113],[-0.3906,0.5938,0.0083],[-0.375,0.5938,0.0113],[-0.3594,0.5938,0.0078],[-0.3438,0.5938,0.0074],[-0.3281,0.5938,0.0078],[-0.3125,0.5938,0],[-0.2969,0.5938,0.0392],[-0.2812,0.5938,0.0279],[-0.2656,0.5938,0.0137],[-0.25,0.5938,0.0142],[-0.2344,0.5938,0],[-0.2188,0.5938,0],[-0.2031,0.5938,0],[-0.1875,0.5938,0.0025],[-0.1719,0.5938,0],[-0.1562,0.5938,0],[-0.1406,0.5938,0.0029],[-0.125,0.5938,0.001],[-0.1094,0.5938,0.0005],[-0.0938,0.5938,0.002],[-0.0781,0.5938,0.0123],[-0.0625,0.5938,0.0225],[-0.0469,0.5938,0.0181],[-0.0312,0.5938,0.0108],[-0.0156,0.5938,0.0103],[0,0.5938,0.0064],[0.0156,0.5938,0],[0.0312,0.5938,0],[0.0469,0.5938,0],[0.0625,0.5938,0],[0.0781,0.5938,0],[0.0938,0.5938,0],[0.1094,0.5938,0],[0.125,0.5938,0],[0.1406,0.5938,0],[0.1562,0.5938,0],[0.1719,0.5938,0],[0.1875,0.5938,0],[0.2031,0.5938,0],[0.2188,0.5938,0],[0.2344,0.5938,0],[0.25,0.5938,0],[0.2656,0.5938,0],[0.2812,0.5938,0],[0.2969,0.5938,0],[0.3125,0.5938,0],[0.3281,0.5938,0],[0.3438,0.5938,0],[0.3594,0.5938,0],[0.375,0.5938,0],[0.3906,0.5938,0],[0.4062,0.5938,0],[0.4219,0.5938,0],[0.4375,0.5938,0],[0.4531,0.5938,0],[0.4688,0.5938,0],[0.4844,0.5938,0],[0.5,0.5938,0],[0.5156,0.5938,0.0015],[0.5312,0.5938,0.0015],[0.5469,0.5938,0.002],[0.5625,0.5938,0.0299],[0.5781,0.5938,0.0824],[0.5938,0.5938,0.0461],[0.6094,0.5938,0.023],[0.625,0.5938,0.0015],[0.6406,0.5938,0],[0.6562,0.5938,0.0098],[0.6719,0.5938,0.0603],[0.6875,0.5938,0.0564],[0.7031,0.5938,0.0466],[0.7188,0.5938,0.0225],[0.7344,0.5938,0.0255],[0.75,0.5938,0.0475],[0.7656,0.5938,0.0338],[0.7812,0.5938,0.0495],[0.7969,0.5938,0.0108],[0.8125,0.5938,0],[0.8281,0.5938,0.0005],[0.8438,0.5938,0.0221],[0.8594,0.5938,0.0186],[0.875,0.5938,0.0108],[0.8906,0.5938,0],[0.9062,0.5938,0],[0.9219,0.5938,0],[0.9375,0.5938,0],[0.9531,0.5938,0],[0.9688,0.5938,0],[0.9844,0.5938,0],[-1,0.6094,0],[-0.9844,0.6094,0],[-0.9688,0.6094,0],[-0.9531,0.6094,0],[-0.9375,0.6094,0],[-0.9219,0.6094,0],[-0.9062,0.6094,0],[-0.8906,0.6094,0],[-0.875,0.6094,0],[-0.8594,0.6094,0],[-0.8438,0.6094,0],[-0.8281,0.6094,0],[-0.8125,0.6094,0],[-0.7969,0.6094,0],[-0.7812,0.6094,0],[-0.7656,0.6094,0],[-0.75,0.6094,0],[-0.7344,0.6094,0],[-0.7188,0.6094,0],[-0.7031,0.6094,0],[-0.6875,0.6094,0],[-0.6719,0.6094,0],[-0.6562,0.6094,0],[-0.6406,0.6094,0],[-0.625,0.6094,0],[-0.6094,0.6094,0],[-0.5938,0.6094,0],[-0.5781,0.6094,0],[-0.5625,0.6094,0],[-0.5469,0.6094,0],[-0.5312,0.6094,0],[-0.5156,0.6094,0],[-0.5,0.6094,0],[-0.4844,0.6094,0],[-0.4688,0.6094,0],[-0.4531,0.6094,0],[-0.4375,0.6094,0],[-0.4219,0.6094,0],[-0.4062,0.6094,0.0015],[-0.3906,0.6094,0.002],[-0.375,0.6094,0.0005],[-0.3594,0.6094,0.0044],[-0.3438,0.6094,0.0103],[-0.3281,0.6094,0.0064],[-0.3125,0.6094,0],[-0.2969,0.6094,0.0005],[-0.2812,0.6094,0.0225],[-0.2656,0.6094,0.0059],[-0.25,0.6094,0],[-0.2344,0.6094,0],[-0.2188,0.6094,0],[-0.2031,0.6094,0],[-0.1875,0.6094,0],[-0.1719,0.6094,0],[-0.1562,0.6094,0],[-0.1406,0.6094,0.0147],[-0.125,0.6094,0],[-0.1094,0.6094,0.0015],[-0.0938,0.6094,0.001],[-0.0781,0.6094,0.0098],[-0.0625,0.6094,0.0162],[-0.0469,0.6094,0.0103],[-0.0312,0.6094,0.001],[-0.0156,0.6094,0.0113],[0,0.6094,0.0088],[0.0156,0.6094,0.001],[0.0312,0.6094,0],[0.0469,0.6094,0],[0.0625,0.6094,0],[0.0781,0.6094,0],[0.0938,0.6094,0],[0.1094,0.6094,0],[0.125,0.6094,0],[0.1406,0.6094,0],[0.1562,0.6094,0],[0.1719,0.6094,0],[0.1875,0.6094,0],[0.2031,0.6094,0],[0.2188,0.6094,0],[0.2344,0.6094,0],[0.25,0.6094,0],[0.2656,0.6094,0],[0.2812,0.6094,0],[0.2969,0.6094,0],[0.3125,0.6094,0],[0.3281,0.6094,0],[0.3438,0.6094,0],[0.3594,0.6094,0],[0.375,0.6094,0],[0.3906,0.6094,0],[0.4062,0.6094,0],[0.4219,0.6094,0],[0.4375,0.6094,0],[0.4531,0.6094,0],[0.4688,0.6094,0],[0.4844,0.6094,0],[0.5,0.6094,0],[0.5156,0.6094,0],[0.5312,0.6094,0],[0.5469,0.6094,0.0005],[0.5625,0.6094,0.0172],[0.5781,0.6094,0.0544],[0.5938,0.6094,0.0657],[0.6094,0.6094,0.0275],[0.625,0.6094,0.0093],[0.6406,0.6094,0],[0.6562,0.6094,0.0005],[0.6719,0.6094,0.0495],[0.6875,0.6094,0.0245],[0.7031,0.6094,0.0279],[0.7188,0.6094,0.0382],[0.7344,0.6094,0.0206],[0.75,0.6094,0.0201],[0.7656,0.6094,0.027],[0.7812,0.6094,0.0539],[0.7969,0.6094,0.0142],[0.8125,0.6094,0.001],[0.8281,0.6094,0],[0.8438,0.6094,0.0015],[0.8594,0.6094,0.0118],[0.875,0.6094,0.0157],[0.8906,0.6094,0],[0.9062,0.6094,0],[0.9219,0.6094,0],[0.9375,0.6094,0],[0.9531,0.6094,0],[0.9688,0.6094,0],[0.9844,0.6094,0],[-1,0.625,0],[-0.9844,0.625,0],[-0.9688,0.625,0],[-0.9531,0.625,0],[-0.9375,0.625,0],[-0.9219,0.625,0],[-0.9062,0.625,0],[-0.8906,0.625,0],[-0.875,0.625,0],[-0.8594,0.625,0],[-0.8438,0.625,0],[-0.8281,0.625,0],[-0.8125,0.625,0],[-0.7969,0.625,0],[-0.7812,0.625,0],[-0.7656,0.625,0],[-0.75,0.625,0],[-0.7344,0.625,0],[-0.7188,0.625,0],[-0.7031,0.625,0],[-0.6875,0.625,0],[-0.6719,0.625,0],[-0.6562,0.625,0],[-0.6406,0.625,0],[-0.625,0.625,0],[-0.6094,0.625,0],[-0.5938,0.625,0],[-0.5781,0.625,0],[-0.5625,0.625,0],[-0.5469,0.625,0],[-0.5312,0.625,0],[-0.5156,0.625,0],[-0.5,0.625,0],[-0.4844,0.625,0],[-0.4688,0.625,0],[-0.4531,0.625,0],[-0.4375,0.625,0],[-0.4219,0.625,0],[-0.4062,0.625,0],[-0.3906,0.625,0],[-0.375,0.625,0.0005],[-0.3594,0.625,0.0025],[-0.3438,0.625,0.0025],[-0.3281,0.625,0.0025],[-0.3125,0.625,0.001],[-0.2969,0.625,0.0039],[-0.2812,0.625,0.0539],[-0.2656,0.625,0.0147],[-0.25,0.625,0],[-0.2344,0.625,0],[-0.2188,0.625,0],[-0.2031,0.625,0],[-0.1875,0.625,0],[-0.1719,0.625,0],[-0.1562,0.625,0],[-0.1406,0.625,0],[-0.125,0.625,0],[-0.1094,0.625,0.0049],[-0.0938,0.625,0.0049],[-0.0781,0.625,0.0054],[-0.0625,0.625,0.0093],[-0.0469,0.625,0.0034],[-0.0312,0.625,0.0005],[-0.0156,0.625,0.0044],[0,0.625,0.0059],[0.0156,0.625,0],[0.0312,0.625,0],[0.0469,0.625,0],[0.0625,0.625,0],[0.0781,0.625,0],[0.0938,0.625,0],[0.1094,0.625,0],[0.125,0.625,0],[0.1406,0.625,0],[0.1562,0.625,0],[0.1719,0.625,0],[0.1875,0.625,0],[0.2031,0.625,0],[0.2188,0.625,0],[0.2344,0.625,0],[0.25,0.625,0],[0.2656,0.625,0],[0.2812,0.625,0],[0.2969,0.625,0],[0.3125,0.625,0],[0.3281,0.625,0],[0.3438,0.625,0],[0.3594,0.625,0],[0.375,0.625,0],[0.3906,0.625,0],[0.4062,0.625,0],[0.4219,0.625,0],[0.4375,0.625,0],[0.4531,0.625,0],[0.4688,0.625,0],[0.4844,0.625,0],[0.5,0.625,0],[0.5156,0.625,0],[0.5312,0.625,0],[0.5469,0.625,0.0343],[0.5625,0.625,0.0216],[0.5781,0.625,0.0275],[0.5938,0.625,0.0745],[0.6094,0.625,0.0255],[0.625,0.625,0.0196],[0.6406,0.625,0],[0.6562,0.625,0],[0.6719,0.625,0.0392],[0.6875,0.625,0.0534],[0.7031,0.625,0.0152],[0.7188,0.625,0.0382],[0.7344,0.625,0.0328],[0.75,0.625,0.0142],[0.7656,0.625,0.0098],[0.7812,0.625,0.0275],[0.7969,0.625,0.0064],[0.8125,0.625,0.001],[0.8281,0.625,0],[0.8438,0.625,0],[0.8594,0.625,0.001],[0.875,0.625,0.0137],[0.8906,0.625,0.0005],[0.9062,0.625,0],[0.9219,0.625,0],[0.9375,0.625,0],[0.9531,0.625,0],[0.9688,0.625,0],[0.9844,0.625,0],[-1,0.6406,0],[-0.9844,0.6406,0],[-0.9688,0.6406,0],[-0.9531,0.6406,0],[-0.9375,0.6406,0],[-0.9219,0.6406,0],[-0.9062,0.6406,0],[-0.8906,0.6406,0],[-0.875,0.6406,0],[-0.8594,0.6406,0],[-0.8438,0.6406,0],[-0.8281,0.6406,0],[-0.8125,0.6406,0],[-0.7969,0.6406,0],[-0.7812,0.6406,0],[-0.7656,0.6406,0],[-0.75,0.6406,0],[-0.7344,0.6406,0],[-0.7188,0.6406,0],[-0.7031,0.6406,0],[-0.6875,0.6406,0],[-0.6719,0.6406,0],[-0.6562,0.6406,0],[-0.6406,0.6406,0],[-0.625,0.6406,0],[-0.6094,0.6406,0],[-0.5938,0.6406,0],[-0.5781,0.6406,0],[-0.5625,0.6406,0],[-0.5469,0.6406,0],[-0.5312,0.6406,0],[-0.5156,0.6406,0],[-0.5,0.6406,0],[-0.4844,0.6406,0],[-0.4688,0.6406,0],[-0.4531,0.6406,0],[-0.4375,0.6406,0],[-0.4219,0.6406,0],[-0.4062,0.6406,0],[-0.3906,0.6406,0],[-0.375,0.6406,0],[-0.3594,0.6406,0.0015],[-0.3438,0.6406,0.0054],[-0.3281,0.6406,0.001],[-0.3125,0.6406,0],[-0.2969,0.6406,0],[-0.2812,0.6406,0.0235],[-0.2656,0.6406,0.0103],[-0.25,0.6406,0],[-0.2344,0.6406,0],[-0.2188,0.6406,0.0005],[-0.2031,0.6406,0],[-0.1875,0.6406,0],[-0.1719,0.6406,0],[-0.1562,0.6406,0],[-0.1406,0.6406,0],[-0.125,0.6406,0],[-0.1094,0.6406,0.0083],[-0.0938,0.6406,0.0054],[-0.0781,0.6406,0.0005],[-0.0625,0.6406,0.0034],[-0.0469,0.6406,0.0005],[-0.0312,0.6406,0],[-0.0156,0.6406,0],[0,0.6406,0.0029],[0.0156,0.6406,0],[0.0312,0.6406,0],[0.0469,0.6406,0],[0.0625,0.6406,0],[0.0781,0.6406,0],[0.0938,0.6406,0],[0.1094,0.6406,0],[0.125,0.6406,0],[0.1406,0.6406,0],[0.1562,0.6406,0],[0.1719,0.6406,0],[0.1875,0.6406,0],[0.2031,0.6406,0],[0.2188,0.6406,0],[0.2344,0.6406,0],[0.25,0.6406,0],[0.2656,0.6406,0],[0.2812,0.6406,0],[0.2969,0.6406,0],[0.3125,0.6406,0],[0.3281,0.6406,0],[0.3438,0.6406,0],[0.3594,0.6406,0],[0.375,0.6406,0],[0.3906,0.6406,0],[0.4062,0.6406,0],[0.4219,0.6406,0],[0.4375,0.6406,0],[0.4531,0.6406,0],[0.4688,0.6406,0],[0.4844,0.6406,0],[0.5,0.6406,0],[0.5156,0.6406,0],[0.5312,0.6406,0],[0.5469,0.6406,0.0475],[0.5625,0.6406,0.0804],[0.5781,0.6406,0.0681],[0.5938,0.6406,0.0593],[0.6094,0.6406,0.0196],[0.625,0.6406,0.0074],[0.6406,0.6406,0],[0.6562,0.6406,0],[0.6719,0.6406,0.001],[0.6875,0.6406,0.027],[0.7031,0.6406,0.0216],[0.7188,0.6406,0.0245],[0.7344,0.6406,0.0186],[0.75,0.6406,0.0127],[0.7656,0.6406,0.0005],[0.7812,0.6406,0.0039],[0.7969,0.6406,0.0005],[0.8125,0.6406,0.0078],[0.8281,0.6406,0],[0.8438,0.6406,0],[0.8594,0.6406,0],[0.875,0.6406,0.0103],[0.8906,0.6406,0.0005],[0.9062,0.6406,0],[0.9219,0.6406,0],[0.9375,0.6406,0],[0.9531,0.6406,0],[0.9688,0.6406,0],[0.9844,0.6406,0],[-1,0.6562,0],[-0.9844,0.6562,0],[-0.9688,0.6562,0],[-0.9531,0.6562,0],[-0.9375,0.6562,0],[-0.9219,0.6562,0],[-0.9062,0.6562,0],[-0.8906,0.6562,0],[-0.875,0.6562,0],[-0.8594,0.6562,0],[-0.8438,0.6562,0],[-0.8281,0.6562,0],[-0.8125,0.6562,0],[-0.7969,0.6562,0],[-0.7812,0.6562,0],[-0.7656,0.6562,0],[-0.75,0.6562,0],[-0.7344,0.6562,0],[-0.7188,0.6562,0],[-0.7031,0.6562,0],[-0.6875,0.6562,0],[-0.6719,0.6562,0],[-0.6562,0.6562,0],[-0.6406,0.6562,0],[-0.625,0.6562,0],[-0.6094,0.6562,0],[-0.5938,0.6562,0],[-0.5781,0.6562,0],[-0.5625,0.6562,0],[-0.5469,0.6562,0],[-0.5312,0.6562,0],[-0.5156,0.6562,0],[-0.5,0.6562,0],[-0.4844,0.6562,0],[-0.4688,0.6562,0],[-0.4531,0.6562,0],[-0.4375,0.6562,0],[-0.4219,0.6562,0],[-0.4062,0.6562,0],[-0.3906,0.6562,0],[-0.375,0.6562,0],[-0.3594,0.6562,0],[-0.3438,0.6562,0],[-0.3281,0.6562,0],[-0.3125,0.6562,0],[-0.2969,0.6562,0],[-0.2812,0.6562,0],[-0.2656,0.6562,0],[-0.25,0.6562,0],[-0.2344,0.6562,0],[-0.2188,0.6562,0],[-0.2031,0.6562,0],[-0.1875,0.6562,0],[-0.1719,0.6562,0],[-0.1562,0.6562,0],[-0.1406,0.6562,0],[-0.125,0.6562,0],[-0.1094,0.6562,0.001],[-0.0938,0.6562,0.0078],[-0.0781,0.6562,0],[-0.0625,0.6562,0.001],[-0.0469,0.6562,0],[-0.0312,0.6562,0],[-0.0156,0.6562,0],[0,0.6562,0],[0.0156,0.6562,0],[0.0312,0.6562,0],[0.0469,0.6562,0],[0.0625,0.6562,0],[0.0781,0.6562,0],[0.0938,0.6562,0],[0.1094,0.6562,0],[0.125,0.6562,0],[0.1406,0.6562,0],[0.1562,0.6562,0],[0.1719,0.6562,0],[0.1875,0.6562,0],[0.2031,0.6562,0],[0.2188,0.6562,0],[0.2344,0.6562,0],[0.25,0.6562,0],[0.2656,0.6562,0],[0.2812,0.6562,0],[0.2969,0.6562,0],[0.3125,0.6562,0],[0.3281,0.6562,0],[0.3438,0.6562,0],[0.3594,0.6562,0],[0.375,0.6562,0],[0.3906,0.6562,0],[0.4062,0.6562,0],[0.4219,0.6562,0],[0.4375,0.6562,0],[0.4531,0.6562,0],[0.4688,0.6562,0],[0.4844,0.6562,0],[0.5,0.6562,0],[0.5156,0.6562,0],[0.5312,0.6562,0],[0.5469,0.6562,0.0118],[0.5625,0.6562,0.0632],[0.5781,0.6562,0.0534],[0.5938,0.6562,0.0397],[0.6094,0.6562,0.0176],[0.625,0.6562,0.0113],[0.6406,0.6562,0],[0.6562,0.6562,0],[0.6719,0.6562,0],[0.6875,0.6562,0.0059],[0.7031,0.6562,0.0162],[0.7188,0.6562,0.0098],[0.7344,0.6562,0.0216],[0.75,0.6562,0.0196],[0.7656,0.6562,0.0176],[0.7812,0.6562,0.0029],[0.7969,0.6562,0],[0.8125,0.6562,0.002],[0.8281,0.6562,0],[0.8438,0.6562,0],[0.8594,0.6562,0],[0.875,0.6562,0.001],[0.8906,0.6562,0],[0.9062,0.6562,0],[0.9219,0.6562,0],[0.9375,0.6562,0],[0.9531,0.6562,0],[0.9688,0.6562,0],[0.9844,0.6562,0],[-1,0.6719,0],[-0.9844,0.6719,0],[-0.9688,0.6719,0],[-0.9531,0.6719,0],[-0.9375,0.6719,0],[-0.9219,0.6719,0],[-0.9062,0.6719,0],[-0.8906,0.6719,0],[-0.875,0.6719,0],[-0.8594,0.6719,0],[-0.8438,0.6719,0],[-0.8281,0.6719,0],[-0.8125,0.6719,0],[-0.7969,0.6719,0],[-0.7812,0.6719,0],[-0.7656,0.6719,0],[-0.75,0.6719,0],[-0.7344,0.6719,0],[-0.7188,0.6719,0],[-0.7031,0.6719,0],[-0.6875,0.6719,0],[-0.6719,0.6719,0],[-0.6562,0.6719,0],[-0.6406,0.6719,0],[-0.625,0.6719,0],[-0.6094,0.6719,0],[-0.5938,0.6719,0],[-0.5781,0.6719,0],[-0.5625,0.6719,0],[-0.5469,0.6719,0],[-0.5312,0.6719,0],[-0.5156,0.6719,0],[-0.5,0.6719,0],[-0.4844,0.6719,0],[-0.4688,0.6719,0],[-0.4531,0.6719,0],[-0.4375,0.6719,0],[-0.4219,0.6719,0],[-0.4062,0.6719,0],[-0.3906,0.6719,0],[-0.375,0.6719,0],[-0.3594,0.6719,0],[-0.3438,0.6719,0],[-0.3281,0.6719,0],[-0.3125,0.6719,0.001],[-0.2969,0.6719,0],[-0.2812,0.6719,0],[-0.2656,0.6719,0],[-0.25,0.6719,0],[-0.2344,0.6719,0],[-0.2188,0.6719,0],[-0.2031,0.6719,0],[-0.1875,0.6719,0],[-0.1719,0.6719,0],[-0.1562,0.6719,0],[-0.1406,0.6719,0],[-0.125,0.6719,0],[-0.1094,0.6719,0],[-0.0938,0.6719,0.0005],[-0.0781,0.6719,0],[-0.0625,0.6719,0],[-0.0469,0.6719,0],[-0.0312,0.6719,0],[-0.0156,0.6719,0],[0,0.6719,0],[0.0156,0.6719,0],[0.0312,0.6719,0],[0.0469,0.6719,0],[0.0625,0.6719,0],[0.0781,0.6719,0],[0.0938,0.6719,0],[0.1094,0.6719,0],[0.125,0.6719,0],[0.1406,0.6719,0],[0.1562,0.6719,0],[0.1719,0.6719,0],[0.1875,0.6719,0],[0.2031,0.6719,0],[0.2188,0.6719,0],[0.2344,0.6719,0],[0.25,0.6719,0],[0.2656,0.6719,0],[0.2812,0.6719,0],[0.2969,0.6719,0],[0.3125,0.6719,0],[0.3281,0.6719,0],[0.3438,0.6719,0],[0.3594,0.6719,0],[0.375,0.6719,0],[0.3906,0.6719,0],[0.4062,0.6719,0],[0.4219,0.6719,0],[0.4375,0.6719,0],[0.4531,0.6719,0],[0.4688,0.6719,0],[0.4844,0.6719,0],[0.5,0.6719,0],[0.5156,0.6719,0],[0.5312,0.6719,0],[0.5469,0.6719,0],[0.5625,0.6719,0.0118],[0.5781,0.6719,0.0176],[0.5938,0.6719,0.026],[0.6094,0.6719,0.023],[0.625,0.6719,0.0069],[0.6406,0.6719,0],[0.6562,0.6719,0],[0.6719,0.6719,0],[0.6875,0.6719,0],[0.7031,0.6719,0.0049],[0.7188,0.6719,0.0216],[0.7344,0.6719,0.0201],[0.75,0.6719,0.0363],[0.7656,0.6719,0.0245],[0.7812,0.6719,0.0216],[0.7969,0.6719,0],[0.8125,0.6719,0],[0.8281,0.6719,0],[0.8438,0.6719,0],[0.8594,0.6719,0],[0.875,0.6719,0],[0.8906,0.6719,0],[0.9062,0.6719,0],[0.9219,0.6719,0],[0.9375,0.6719,0],[0.9531,0.6719,0],[0.9688,0.6719,0],[0.9844,0.6719,0],[-1,0.6875,0],[-0.9844,0.6875,0],[-0.9688,0.6875,0],[-0.9531,0.6875,0],[-0.9375,0.6875,0],[-0.9219,0.6875,0],[-0.9062,0.6875,0],[-0.8906,0.6875,0],[-0.875,0.6875,0],[-0.8594,0.6875,0],[-0.8438,0.6875,0],[-0.8281,0.6875,0],[-0.8125,0.6875,0],[-0.7969,0.6875,0],[-0.7812,0.6875,0],[-0.7656,0.6875,0],[-0.75,0.6875,0],[-0.7344,0.6875,0],[-0.7188,0.6875,0],[-0.7031,0.6875,0],[-0.6875,0.6875,0],[-0.6719,0.6875,0],[-0.6562,0.6875,0],[-0.6406,0.6875,0],[-0.625,0.6875,0],[-0.6094,0.6875,0],[-0.5938,0.6875,0],[-0.5781,0.6875,0],[-0.5625,0.6875,0],[-0.5469,0.6875,0],[-0.5312,0.6875,0],[-0.5156,0.6875,0],[-0.5,0.6875,0],[-0.4844,0.6875,0],[-0.4688,0.6875,0],[-0.4531,0.6875,0],[-0.4375,0.6875,0],[-0.4219,0.6875,0],[-0.4062,0.6875,0],[-0.3906,0.6875,0],[-0.375,0.6875,0],[-0.3594,0.6875,0],[-0.3438,0.6875,0],[-0.3281,0.6875,0],[-0.3125,0.6875,0],[-0.2969,0.6875,0],[-0.2812,0.6875,0],[-0.2656,0.6875,0],[-0.25,0.6875,0],[-0.2344,0.6875,0],[-0.2188,0.6875,0],[-0.2031,0.6875,0],[-0.1875,0.6875,0],[-0.1719,0.6875,0],[-0.1562,0.6875,0],[-0.1406,0.6875,0],[-0.125,0.6875,0],[-0.1094,0.6875,0],[-0.0938,0.6875,0],[-0.0781,0.6875,0],[-0.0625,0.6875,0],[-0.0469,0.6875,0],[-0.0312,0.6875,0],[-0.0156,0.6875,0],[0,0.6875,0],[0.0156,0.6875,0],[0.0312,0.6875,0],[0.0469,0.6875,0],[0.0625,0.6875,0],[0.0781,0.6875,0],[0.0938,0.6875,0],[0.1094,0.6875,0],[0.125,0.6875,0],[0.1406,0.6875,0],[0.1562,0.6875,0],[0.1719,0.6875,0],[0.1875,0.6875,0],[0.2031,0.6875,0],[0.2188,0.6875,0],[0.2344,0.6875,0],[0.25,0.6875,0],[0.2656,0.6875,0],[0.2812,0.6875,0],[0.2969,0.6875,0],[0.3125,0.6875,0],[0.3281,0.6875,0],[0.3438,0.6875,0],[0.3594,0.6875,0],[0.375,0.6875,0],[0.3906,0.6875,0],[0.4062,0.6875,0],[0.4219,0.6875,0],[0.4375,0.6875,0],[0.4531,0.6875,0],[0.4688,0.6875,0],[0.4844,0.6875,0],[0.5,0.6875,0],[0.5156,0.6875,0],[0.5312,0.6875,0],[0.5469,0.6875,0],[0.5625,0.6875,0.0015],[0.5781,0.6875,0.0069],[0.5938,0.6875,0.0098],[0.6094,0.6875,0.0201],[0.625,0.6875,0.0147],[0.6406,0.6875,0],[0.6562,0.6875,0],[0.6719,0.6875,0],[0.6875,0.6875,0],[0.7031,0.6875,0],[0.7188,0.6875,0.0093],[0.7344,0.6875,0.0147],[0.75,0.6875,0.0211],[0.7656,0.6875,0.0015],[0.7812,0.6875,0],[0.7969,0.6875,0],[0.8125,0.6875,0],[0.8281,0.6875,0],[0.8438,0.6875,0],[0.8594,0.6875,0],[0.875,0.6875,0],[0.8906,0.6875,0],[0.9062,0.6875,0],[0.9219,0.6875,0],[0.9375,0.6875,0],[0.9531,0.6875,0],[0.9688,0.6875,0],[0.9844,0.6875,0],[-1,0.7031,0],[-0.9844,0.7031,0],[-0.9688,0.7031,0],[-0.9531,0.7031,0],[-0.9375,0.7031,0],[-0.9219,0.7031,0],[-0.9062,0.7031,0],[-0.8906,0.7031,0],[-0.875,0.7031,0],[-0.8594,0.7031,0],[-0.8438,0.7031,0],[-0.8281,0.7031,0],[-0.8125,0.7031,0],[-0.7969,0.7031,0],[-0.7812,0.7031,0],[-0.7656,0.7031,0],[-0.75,0.7031,0],[-0.7344,0.7031,0],[-0.7188,0.7031,0],[-0.7031,0.7031,0],[-0.6875,0.7031,0],[-0.6719,0.7031,0],[-0.6562,0.7031,0],[-0.6406,0.7031,0],[-0.625,0.7031,0],[-0.6094,0.7031,0],[-0.5938,0.7031,0],[-0.5781,0.7031,0],[-0.5625,0.7031,0],[-0.5469,0.7031,0],[-0.5312,0.7031,0],[-0.5156,0.7031,0],[-0.5,0.7031,0],[-0.4844,0.7031,0],[-0.4688,0.7031,0],[-0.4531,0.7031,0],[-0.4375,0.7031,0],[-0.4219,0.7031,0],[-0.4062,0.7031,0],[-0.3906,0.7031,0],[-0.375,0.7031,0],[-0.3594,0.7031,0],[-0.3438,0.7031,0],[-0.3281,0.7031,0],[-0.3125,0.7031,0],[-0.2969,0.7031,0],[-0.2812,0.7031,0],[-0.2656,0.7031,0],[-0.25,0.7031,0],[-0.2344,0.7031,0],[-0.2188,0.7031,0],[-0.2031,0.7031,0],[-0.1875,0.7031,0],[-0.1719,0.7031,0],[-0.1562,0.7031,0],[-0.1406,0.7031,0],[-0.125,0.7031,0],[-0.1094,0.7031,0],[-0.0938,0.7031,0],[-0.0781,0.7031,0],[-0.0625,0.7031,0],[-0.0469,0.7031,0],[-0.0312,0.7031,0],[-0.0156,0.7031,0],[0,0.7031,0],[0.0156,0.7031,0],[0.0312,0.7031,0],[0.0469,0.7031,0],[0.0625,0.7031,0],[0.0781,0.7031,0],[0.0938,0.7031,0],[0.1094,0.7031,0],[0.125,0.7031,0],[0.1406,0.7031,0],[0.1562,0.7031,0],[0.1719,0.7031,0],[0.1875,0.7031,0],[0.2031,0.7031,0],[0.2188,0.7031,0],[0.2344,0.7031,0],[0.25,0.7031,0],[0.2656,0.7031,0],[0.2812,0.7031,0],[0.2969,0.7031,0],[0.3125,0.7031,0],[0.3281,0.7031,0],[0.3438,0.7031,0],[0.3594,0.7031,0],[0.375,0.7031,0],[0.3906,0.7031,0],[0.4062,0.7031,0],[0.4219,0.7031,0],[0.4375,0.7031,0],[0.4531,0.7031,0],[0.4688,0.7031,0],[0.4844,0.7031,0],[0.5,0.7031,0],[0.5156,0.7031,0],[0.5312,0.7031,0],[0.5469,0.7031,0],[0.5625,0.7031,0],[0.5781,0.7031,0.0039],[0.5938,0.7031,0.0142],[0.6094,0.7031,0.0324],[0.625,0.7031,0.0446],[0.6406,0.7031,0.0005],[0.6562,0.7031,0],[0.6719,0.7031,0],[0.6875,0.7031,0],[0.7031,0.7031,0],[0.7188,0.7031,0],[0.7344,0.7031,0.0074],[0.75,0.7031,0],[0.7656,0.7031,0.0005],[0.7812,0.7031,0.0005],[0.7969,0.7031,0],[0.8125,0.7031,0],[0.8281,0.7031,0],[0.8438,0.7031,0],[0.8594,0.7031,0],[0.875,0.7031,0],[0.8906,0.7031,0],[0.9062,0.7031,0],[0.9219,0.7031,0],[0.9375,0.7031,0],[0.9531,0.7031,0],[0.9688,0.7031,0],[0.9844,0.7031,0],[-1,0.7188,0],[-0.9844,0.7188,0],[-0.9688,0.7188,0],[-0.9531,0.7188,0],[-0.9375,0.7188,0],[-0.9219,0.7188,0],[-0.9062,0.7188,0],[-0.8906,0.7188,0],[-0.875,0.7188,0],[-0.8594,0.7188,0],[-0.8438,0.7188,0],[-0.8281,0.7188,0],[-0.8125,0.7188,0],[-0.7969,0.7188,0],[-0.7812,0.7188,0],[-0.7656,0.7188,0],[-0.75,0.7188,0],[-0.7344,0.7188,0],[-0.7188,0.7188,0],[-0.7031,0.7188,0],[-0.6875,0.7188,0],[-0.6719,0.7188,0],[-0.6562,0.7188,0],[-0.6406,0.7188,0],[-0.625,0.7188,0],[-0.6094,0.7188,0],[-0.5938,0.7188,0],[-0.5781,0.7188,0],[-0.5625,0.7188,0],[-0.5469,0.7188,0],[-0.5312,0.7188,0],[-0.5156,0.7188,0],[-0.5,0.7188,0],[-0.4844,0.7188,0],[-0.4688,0.7188,0],[-0.4531,0.7188,0],[-0.4375,0.7188,0],[-0.4219,0.7188,0],[-0.4062,0.7188,0],[-0.3906,0.7188,0],[-0.375,0.7188,0],[-0.3594,0.7188,0],[-0.3438,0.7188,0],[-0.3281,0.7188,0],[-0.3125,0.7188,0],[-0.2969,0.7188,0],[-0.2812,0.7188,0],[-0.2656,0.7188,0],[-0.25,0.7188,0],[-0.2344,0.7188,0],[-0.2188,0.7188,0],[-0.2031,0.7188,0],[-0.1875,0.7188,0],[-0.1719,0.7188,0],[-0.1562,0.7188,0],[-0.1406,0.7188,0],[-0.125,0.7188,0],[-0.1094,0.7188,0],[-0.0938,0.7188,0],[-0.0781,0.7188,0],[-0.0625,0.7188,0],[-0.0469,0.7188,0],[-0.0312,0.7188,0],[-0.0156,0.7188,0],[0,0.7188,0],[0.0156,0.7188,0],[0.0312,0.7188,0],[0.0469,0.7188,0],[0.0625,0.7188,0],[0.0781,0.7188,0],[0.0938,0.7188,0],[0.1094,0.7188,0],[0.125,0.7188,0],[0.1406,0.7188,0],[0.1562,0.7188,0],[0.1719,0.7188,0],[0.1875,0.7188,0],[0.2031,0.7188,0],[0.2188,0.7188,0],[0.2344,0.7188,0],[0.25,0.7188,0],[0.2656,0.7188,0],[0.2812,0.7188,0],[0.2969,0.7188,0],[0.3125,0.7188,0],[0.3281,0.7188,0],[0.3438,0.7188,0],[0.3594,0.7188,0],[0.375,0.7188,0],[0.3906,0.7188,0],[0.4062,0.7188,0],[0.4219,0.7188,0],[0.4375,0.7188,0],[0.4531,0.7188,0],[0.4688,0.7188,0],[0.4844,0.7188,0],[0.5,0.7188,0],[0.5156,0.7188,0],[0.5312,0.7188,0],[0.5469,0.7188,0],[0.5625,0.7188,0],[0.5781,0.7188,0],[0.5938,0.7188,0.001],[0.6094,0.7188,0.0015],[0.625,0.7188,0.0074],[0.6406,0.7188,0.001],[0.6562,0.7188,0],[0.6719,0.7188,0],[0.6875,0.7188,0],[0.7031,0.7188,0],[0.7188,0.7188,0],[0.7344,0.7188,0],[0.75,0.7188,0],[0.7656,0.7188,0],[0.7812,0.7188,0.001],[0.7969,0.7188,0],[0.8125,0.7188,0],[0.8281,0.7188,0],[0.8438,0.7188,0],[0.8594,0.7188,0],[0.875,0.7188,0],[0.8906,0.7188,0],[0.9062,0.7188,0],[0.9219,0.7188,0],[0.9375,0.7188,0],[0.9531,0.7188,0],[0.9688,0.7188,0],[0.9844,0.7188,0],[-1,0.7344,0],[-0.9844,0.7344,0],[-0.9688,0.7344,0],[-0.9531,0.7344,0],[-0.9375,0.7344,0],[-0.9219,0.7344,0],[-0.9062,0.7344,0],[-0.8906,0.7344,0],[-0.875,0.7344,0],[-0.8594,0.7344,0],[-0.8438,0.7344,0],[-0.8281,0.7344,0],[-0.8125,0.7344,0],[-0.7969,0.7344,0],[-0.7812,0.7344,0],[-0.7656,0.7344,0],[-0.75,0.7344,0],[-0.7344,0.7344,0],[-0.7188,0.7344,0],[-0.7031,0.7344,0],[-0.6875,0.7344,0],[-0.6719,0.7344,0],[-0.6562,0.7344,0],[-0.6406,0.7344,0],[-0.625,0.7344,0],[-0.6094,0.7344,0],[-0.5938,0.7344,0],[-0.5781,0.7344,0],[-0.5625,0.7344,0],[-0.5469,0.7344,0],[-0.5312,0.7344,0],[-0.5156,0.7344,0],[-0.5,0.7344,0],[-0.4844,0.7344,0],[-0.4688,0.7344,0],[-0.4531,0.7344,0],[-0.4375,0.7344,0],[-0.4219,0.7344,0],[-0.4062,0.7344,0],[-0.3906,0.7344,0],[-0.375,0.7344,0],[-0.3594,0.7344,0],[-0.3438,0.7344,0],[-0.3281,0.7344,0],[-0.3125,0.7344,0],[-0.2969,0.7344,0],[-0.2812,0.7344,0],[-0.2656,0.7344,0],[-0.25,0.7344,0],[-0.2344,0.7344,0],[-0.2188,0.7344,0],[-0.2031,0.7344,0],[-0.1875,0.7344,0],[-0.1719,0.7344,0],[-0.1562,0.7344,0],[-0.1406,0.7344,0],[-0.125,0.7344,0],[-0.1094,0.7344,0],[-0.0938,0.7344,0],[-0.0781,0.7344,0],[-0.0625,0.7344,0],[-0.0469,0.7344,0],[-0.0312,0.7344,0],[-0.0156,0.7344,0],[0,0.7344,0],[0.0156,0.7344,0],[0.0312,0.7344,0],[0.0469,0.7344,0],[0.0625,0.7344,0],[0.0781,0.7344,0],[0.0938,0.7344,0],[0.1094,0.7344,0],[0.125,0.7344,0],[0.1406,0.7344,0],[0.1562,0.7344,0],[0.1719,0.7344,0],[0.1875,0.7344,0],[0.2031,0.7344,0],[0.2188,0.7344,0],[0.2344,0.7344,0],[0.25,0.7344,0],[0.2656,0.7344,0],[0.2812,0.7344,0],[0.2969,0.7344,0],[0.3125,0.7344,0],[0.3281,0.7344,0],[0.3438,0.7344,0],[0.3594,0.7344,0],[0.375,0.7344,0],[0.3906,0.7344,0],[0.4062,0.7344,0],[0.4219,0.7344,0],[0.4375,0.7344,0],[0.4531,0.7344,0],[0.4688,0.7344,0],[0.4844,0.7344,0],[0.5,0.7344,0],[0.5156,0.7344,0],[0.5312,0.7344,0],[0.5469,0.7344,0],[0.5625,0.7344,0],[0.5781,0.7344,0],[0.5938,0.7344,0],[0.6094,0.7344,0.001],[0.625,0.7344,0.0044],[0.6406,0.7344,0.0147],[0.6562,0.7344,0],[0.6719,0.7344,0],[0.6875,0.7344,0],[0.7031,0.7344,0],[0.7188,0.7344,0],[0.7344,0.7344,0],[0.75,0.7344,0],[0.7656,0.7344,0],[0.7812,0.7344,0.0005],[0.7969,0.7344,0.001],[0.8125,0.7344,0],[0.8281,0.7344,0],[0.8438,0.7344,0],[0.8594,0.7344,0],[0.875,0.7344,0],[0.8906,0.7344,0],[0.9062,0.7344,0],[0.9219,0.7344,0],[0.9375,0.7344,0],[0.9531,0.7344,0],[0.9688,0.7344,0],[0.9844,0.7344,0],[-1,0.75,0],[-0.9844,0.75,0],[-0.9688,0.75,0],[-0.9531,0.75,0],[-0.9375,0.75,0],[-0.9219,0.75,0],[-0.9062,0.75,0],[-0.8906,0.75,0],[-0.875,0.75,0],[-0.8594,0.75,0],[-0.8438,0.75,0],[-0.8281,0.75,0],[-0.8125,0.75,0],[-0.7969,0.75,0],[-0.7812,0.75,0],[-0.7656,0.75,0],[-0.75,0.75,0],[-0.7344,0.75,0],[-0.7188,0.75,0],[-0.7031,0.75,0],[-0.6875,0.75,0],[-0.6719,0.75,0],[-0.6562,0.75,0],[-0.6406,0.75,0],[-0.625,0.75,0],[-0.6094,0.75,0],[-0.5938,0.75,0],[-0.5781,0.75,0],[-0.5625,0.75,0],[-0.5469,0.75,0],[-0.5312,0.75,0],[-0.5156,0.75,0],[-0.5,0.75,0],[-0.4844,0.75,0],[-0.4688,0.75,0],[-0.4531,0.75,0],[-0.4375,0.75,0],[-0.4219,0.75,0],[-0.4062,0.75,0],[-0.3906,0.75,0],[-0.375,0.75,0],[-0.3594,0.75,0],[-0.3438,0.75,0],[-0.3281,0.75,0],[-0.3125,0.75,0],[-0.2969,0.75,0],[-0.2812,0.75,0],[-0.2656,0.75,0],[-0.25,0.75,0],[-0.2344,0.75,0],[-0.2188,0.75,0],[-0.2031,0.75,0],[-0.1875,0.75,0],[-0.1719,0.75,0],[-0.1562,0.75,0],[-0.1406,0.75,0],[-0.125,0.75,0],[-0.1094,0.75,0],[-0.0938,0.75,0],[-0.0781,0.75,0],[-0.0625,0.75,0],[-0.0469,0.75,0],[-0.0312,0.75,0],[-0.0156,0.75,0],[0,0.75,0],[0.0156,0.75,0],[0.0312,0.75,0],[0.0469,0.75,0],[0.0625,0.75,0],[0.0781,0.75,0],[0.0938,0.75,0],[0.1094,0.75,0],[0.125,0.75,0],[0.1406,0.75,0],[0.1562,0.75,0],[0.1719,0.75,0],[0.1875,0.75,0],[0.2031,0.75,0],[0.2188,0.75,0],[0.2344,0.75,0],[0.25,0.75,0],[0.2656,0.75,0],[0.2812,0.75,0],[0.2969,0.75,0],[0.3125,0.75,0],[0.3281,0.75,0],[0.3438,0.75,0],[0.3594,0.75,0],[0.375,0.75,0],[0.3906,0.75,0],[0.4062,0.75,0],[0.4219,0.75,0],[0.4375,0.75,0],[0.4531,0.75,0],[0.4688,0.75,0],[0.4844,0.75,0],[0.5,0.75,0],[0.5156,0.75,0],[0.5312,0.75,0],[0.5469,0.75,0],[0.5625,0.75,0],[0.5781,0.75,0],[0.5938,0.75,0],[0.6094,0.75,0.002],[0.625,0.75,0.002],[0.6406,0.75,0.001],[0.6562,0.75,0.0059],[0.6719,0.75,0],[0.6875,0.75,0],[0.7031,0.75,0],[0.7188,0.75,0],[0.7344,0.75,0],[0.75,0.75,0],[0.7656,0.75,0],[0.7812,0.75,0],[0.7969,0.75,0],[0.8125,0.75,0],[0.8281,0.75,0],[0.8438,0.75,0],[0.8594,0.75,0],[0.875,0.75,0],[0.8906,0.75,0],[0.9062,0.75,0],[0.9219,0.75,0],[0.9375,0.75,0],[0.9531,0.75,0],[0.9688,0.75,0],[0.9844,0.75,0],[-1,0.7656,0],[-0.9844,0.7656,0],[-0.9688,0.7656,0],[-0.9531,0.7656,0],[-0.9375,0.7656,0],[-0.9219,0.7656,0],[-0.9062,0.7656,0],[-0.8906,0.7656,0],[-0.875,0.7656,0],[-0.8594,0.7656,0],[-0.8438,0.7656,0],[-0.8281,0.7656,0],[-0.8125,0.7656,0],[-0.7969,0.7656,0],[-0.7812,0.7656,0],[-0.7656,0.7656,0],[-0.75,0.7656,0],[-0.7344,0.7656,0],[-0.7188,0.7656,0],[-0.7031,0.7656,0],[-0.6875,0.7656,0],[-0.6719,0.7656,0],[-0.6562,0.7656,0],[-0.6406,0.7656,0],[-0.625,0.7656,0],[-0.6094,0.7656,0],[-0.5938,0.7656,0],[-0.5781,0.7656,0],[-0.5625,0.7656,0],[-0.5469,0.7656,0],[-0.5312,0.7656,0],[-0.5156,0.7656,0],[-0.5,0.7656,0],[-0.4844,0.7656,0],[-0.4688,0.7656,0],[-0.4531,0.7656,0],[-0.4375,0.7656,0],[-0.4219,0.7656,0],[-0.4062,0.7656,0],[-0.3906,0.7656,0],[-0.375,0.7656,0],[-0.3594,0.7656,0],[-0.3438,0.7656,0],[-0.3281,0.7656,0],[-0.3125,0.7656,0],[-0.2969,0.7656,0],[-0.2812,0.7656,0],[-0.2656,0.7656,0],[-0.25,0.7656,0],[-0.2344,0.7656,0],[-0.2188,0.7656,0],[-0.2031,0.7656,0],[-0.1875,0.7656,0],[-0.1719,0.7656,0],[-0.1562,0.7656,0],[-0.1406,0.7656,0],[-0.125,0.7656,0],[-0.1094,0.7656,0],[-0.0938,0.7656,0],[-0.0781,0.7656,0],[-0.0625,0.7656,0],[-0.0469,0.7656,0],[-0.0312,0.7656,0],[-0.0156,0.7656,0],[0,0.7656,0],[0.0156,0.7656,0],[0.0312,0.7656,0],[0.0469,0.7656,0],[0.0625,0.7656,0],[0.0781,0.7656,0],[0.0938,0.7656,0],[0.1094,0.7656,0],[0.125,0.7656,0],[0.1406,0.7656,0],[0.1562,0.7656,0],[0.1719,0.7656,0],[0.1875,0.7656,0],[0.2031,0.7656,0],[0.2188,0.7656,0],[0.2344,0.7656,0],[0.25,0.7656,0],[0.2656,0.7656,0],[0.2812,0.7656,0],[0.2969,0.7656,0],[0.3125,0.7656,0],[0.3281,0.7656,0],[0.3438,0.7656,0],[0.3594,0.7656,0],[0.375,0.7656,0],[0.3906,0.7656,0],[0.4062,0.7656,0],[0.4219,0.7656,0],[0.4375,0.7656,0],[0.4531,0.7656,0],[0.4688,0.7656,0],[0.4844,0.7656,0],[0.5,0.7656,0],[0.5156,0.7656,0],[0.5312,0.7656,0],[0.5469,0.7656,0],[0.5625,0.7656,0],[0.5781,0.7656,0],[0.5938,0.7656,0],[0.6094,0.7656,0],[0.625,0.7656,0],[0.6406,0.7656,0.0015],[0.6562,0.7656,0.0005],[0.6719,0.7656,0],[0.6875,0.7656,0],[0.7031,0.7656,0],[0.7188,0.7656,0],[0.7344,0.7656,0],[0.75,0.7656,0],[0.7656,0.7656,0],[0.7812,0.7656,0],[0.7969,0.7656,0],[0.8125,0.7656,0],[0.8281,0.7656,0],[0.8438,0.7656,0],[0.8594,0.7656,0],[0.875,0.7656,0],[0.8906,0.7656,0],[0.9062,0.7656,0],[0.9219,0.7656,0],[0.9375,0.7656,0],[0.9531,0.7656,0],[0.9688,0.7656,0],[0.9844,0.7656,0],[-1,0.7812,0],[-0.9844,0.7812,0],[-0.9688,0.7812,0],[-0.9531,0.7812,0],[-0.9375,0.7812,0],[-0.9219,0.7812,0],[-0.9062,0.7812,0],[-0.8906,0.7812,0],[-0.875,0.7812,0],[-0.8594,0.7812,0],[-0.8438,0.7812,0],[-0.8281,0.7812,0],[-0.8125,0.7812,0],[-0.7969,0.7812,0],[-0.7812,0.7812,0],[-0.7656,0.7812,0],[-0.75,0.7812,0],[-0.7344,0.7812,0],[-0.7188,0.7812,0],[-0.7031,0.7812,0],[-0.6875,0.7812,0],[-0.6719,0.7812,0],[-0.6562,0.7812,0],[-0.6406,0.7812,0],[-0.625,0.7812,0],[-0.6094,0.7812,0],[-0.5938,0.7812,0],[-0.5781,0.7812,0],[-0.5625,0.7812,0],[-0.5469,0.7812,0],[-0.5312,0.7812,0],[-0.5156,0.7812,0],[-0.5,0.7812,0],[-0.4844,0.7812,0],[-0.4688,0.7812,0],[-0.4531,0.7812,0],[-0.4375,0.7812,0],[-0.4219,0.7812,0],[-0.4062,0.7812,0],[-0.3906,0.7812,0],[-0.375,0.7812,0],[-0.3594,0.7812,0],[-0.3438,0.7812,0],[-0.3281,0.7812,0],[-0.3125,0.7812,0],[-0.2969,0.7812,0],[-0.2812,0.7812,0],[-0.2656,0.7812,0],[-0.25,0.7812,0],[-0.2344,0.7812,0],[-0.2188,0.7812,0],[-0.2031,0.7812,0],[-0.1875,0.7812,0],[-0.1719,0.7812,0],[-0.1562,0.7812,0],[-0.1406,0.7812,0],[-0.125,0.7812,0],[-0.1094,0.7812,0],[-0.0938,0.7812,0],[-0.0781,0.7812,0],[-0.0625,0.7812,0],[-0.0469,0.7812,0],[-0.0312,0.7812,0],[-0.0156,0.7812,0],[0,0.7812,0],[0.0156,0.7812,0],[0.0312,0.7812,0],[0.0469,0.7812,0],[0.0625,0.7812,0],[0.0781,0.7812,0],[0.0938,0.7812,0],[0.1094,0.7812,0],[0.125,0.7812,0],[0.1406,0.7812,0],[0.1562,0.7812,0],[0.1719,0.7812,0],[0.1875,0.7812,0],[0.2031,0.7812,0],[0.2188,0.7812,0],[0.2344,0.7812,0],[0.25,0.7812,0],[0.2656,0.7812,0],[0.2812,0.7812,0],[0.2969,0.7812,0],[0.3125,0.7812,0],[0.3281,0.7812,0],[0.3438,0.7812,0],[0.3594,0.7812,0],[0.375,0.7812,0],[0.3906,0.7812,0],[0.4062,0.7812,0],[0.4219,0.7812,0],[0.4375,0.7812,0],[0.4531,0.7812,0],[0.4688,0.7812,0],[0.4844,0.7812,0],[0.5,0.7812,0],[0.5156,0.7812,0],[0.5312,0.7812,0],[0.5469,0.7812,0],[0.5625,0.7812,0],[0.5781,0.7812,0],[0.5938,0.7812,0],[0.6094,0.7812,0],[0.625,0.7812,0],[0.6406,0.7812,0],[0.6562,0.7812,0],[0.6719,0.7812,0],[0.6875,0.7812,0],[0.7031,0.7812,0],[0.7188,0.7812,0],[0.7344,0.7812,0],[0.75,0.7812,0],[0.7656,0.7812,0],[0.7812,0.7812,0],[0.7969,0.7812,0],[0.8125,0.7812,0],[0.8281,0.7812,0],[0.8438,0.7812,0],[0.8594,0.7812,0],[0.875,0.7812,0],[0.8906,0.7812,0],[0.9062,0.7812,0],[0.9219,0.7812,0],[0.9375,0.7812,0],[0.9531,0.7812,0],[0.9688,0.7812,0],[0.9844,0.7812,0],[-1,0.7969,0],[-0.9844,0.7969,0],[-0.9688,0.7969,0],[-0.9531,0.7969,0],[-0.9375,0.7969,0],[-0.9219,0.7969,0],[-0.9062,0.7969,0],[-0.8906,0.7969,0],[-0.875,0.7969,0],[-0.8594,0.7969,0],[-0.8438,0.7969,0],[-0.8281,0.7969,0],[-0.8125,0.7969,0],[-0.7969,0.7969,0],[-0.7812,0.7969,0],[-0.7656,0.7969,0],[-0.75,0.7969,0],[-0.7344,0.7969,0],[-0.7188,0.7969,0],[-0.7031,0.7969,0],[-0.6875,0.7969,0],[-0.6719,0.7969,0],[-0.6562,0.7969,0],[-0.6406,0.7969,0],[-0.625,0.7969,0],[-0.6094,0.7969,0],[-0.5938,0.7969,0],[-0.5781,0.7969,0],[-0.5625,0.7969,0],[-0.5469,0.7969,0],[-0.5312,0.7969,0],[-0.5156,0.7969,0],[-0.5,0.7969,0],[-0.4844,0.7969,0],[-0.4688,0.7969,0],[-0.4531,0.7969,0],[-0.4375,0.7969,0],[-0.4219,0.7969,0],[-0.4062,0.7969,0],[-0.3906,0.7969,0],[-0.375,0.7969,0],[-0.3594,0.7969,0],[-0.3438,0.7969,0],[-0.3281,0.7969,0],[-0.3125,0.7969,0],[-0.2969,0.7969,0],[-0.2812,0.7969,0],[-0.2656,0.7969,0],[-0.25,0.7969,0],[-0.2344,0.7969,0],[-0.2188,0.7969,0],[-0.2031,0.7969,0],[-0.1875,0.7969,0],[-0.1719,0.7969,0],[-0.1562,0.7969,0],[-0.1406,0.7969,0],[-0.125,0.7969,0],[-0.1094,0.7969,0],[-0.0938,0.7969,0],[-0.0781,0.7969,0],[-0.0625,0.7969,0],[-0.0469,0.7969,0],[-0.0312,0.7969,0],[-0.0156,0.7969,0],[0,0.7969,0],[0.0156,0.7969,0],[0.0312,0.7969,0],[0.0469,0.7969,0],[0.0625,0.7969,0],[0.0781,0.7969,0],[0.0938,0.7969,0],[0.1094,0.7969,0],[0.125,0.7969,0],[0.1406,0.7969,0],[0.1562,0.7969,0],[0.1719,0.7969,0],[0.1875,0.7969,0],[0.2031,0.7969,0],[0.2188,0.7969,0],[0.2344,0.7969,0],[0.25,0.7969,0],[0.2656,0.7969,0],[0.2812,0.7969,0],[0.2969,0.7969,0],[0.3125,0.7969,0],[0.3281,0.7969,0],[0.3438,0.7969,0],[0.3594,0.7969,0],[0.375,0.7969,0],[0.3906,0.7969,0],[0.4062,0.7969,0],[0.4219,0.7969,0],[0.4375,0.7969,0],[0.4531,0.7969,0],[0.4688,0.7969,0],[0.4844,0.7969,0],[0.5,0.7969,0],[0.5156,0.7969,0],[0.5312,0.7969,0],[0.5469,0.7969,0],[0.5625,0.7969,0],[0.5781,0.7969,0],[0.5938,0.7969,0],[0.6094,0.7969,0],[0.625,0.7969,0],[0.6406,0.7969,0],[0.6562,0.7969,0],[0.6719,0.7969,0],[0.6875,0.7969,0],[0.7031,0.7969,0],[0.7188,0.7969,0],[0.7344,0.7969,0],[0.75,0.7969,0],[0.7656,0.7969,0],[0.7812,0.7969,0],[0.7969,0.7969,0],[0.8125,0.7969,0],[0.8281,0.7969,0],[0.8438,0.7969,0],[0.8594,0.7969,0],[0.875,0.7969,0],[0.8906,0.7969,0],[0.9062,0.7969,0],[0.9219,0.7969,0],[0.9375,0.7969,0],[0.9531,0.7969,0],[0.9688,0.7969,0],[0.9844,0.7969,0],[-1,0.8125,0],[-0.9844,0.8125,0],[-0.9688,0.8125,0],[-0.9531,0.8125,0],[-0.9375,0.8125,0],[-0.9219,0.8125,0],[-0.9062,0.8125,0],[-0.8906,0.8125,0],[-0.875,0.8125,0],[-0.8594,0.8125,0],[-0.8438,0.8125,0],[-0.8281,0.8125,0],[-0.8125,0.8125,0],[-0.7969,0.8125,0],[-0.7812,0.8125,0],[-0.7656,0.8125,0],[-0.75,0.8125,0],[-0.7344,0.8125,0],[-0.7188,0.8125,0],[-0.7031,0.8125,0],[-0.6875,0.8125,0],[-0.6719,0.8125,0],[-0.6562,0.8125,0],[-0.6406,0.8125,0],[-0.625,0.8125,0],[-0.6094,0.8125,0],[-0.5938,0.8125,0],[-0.5781,0.8125,0],[-0.5625,0.8125,0],[-0.5469,0.8125,0],[-0.5312,0.8125,0],[-0.5156,0.8125,0],[-0.5,0.8125,0],[-0.4844,0.8125,0],[-0.4688,0.8125,0],[-0.4531,0.8125,0],[-0.4375,0.8125,0],[-0.4219,0.8125,0],[-0.4062,0.8125,0],[-0.3906,0.8125,0],[-0.375,0.8125,0],[-0.3594,0.8125,0],[-0.3438,0.8125,0],[-0.3281,0.8125,0],[-0.3125,0.8125,0],[-0.2969,0.8125,0],[-0.2812,0.8125,0],[-0.2656,0.8125,0],[-0.25,0.8125,0],[-0.2344,0.8125,0],[-0.2188,0.8125,0],[-0.2031,0.8125,0],[-0.1875,0.8125,0],[-0.1719,0.8125,0],[-0.1562,0.8125,0],[-0.1406,0.8125,0],[-0.125,0.8125,0],[-0.1094,0.8125,0],[-0.0938,0.8125,0],[-0.0781,0.8125,0],[-0.0625,0.8125,0],[-0.0469,0.8125,0],[-0.0312,0.8125,0],[-0.0156,0.8125,0],[0,0.8125,0],[0.0156,0.8125,0],[0.0312,0.8125,0],[0.0469,0.8125,0],[0.0625,0.8125,0],[0.0781,0.8125,0],[0.0938,0.8125,0],[0.1094,0.8125,0],[0.125,0.8125,0],[0.1406,0.8125,0],[0.1562,0.8125,0],[0.1719,0.8125,0],[0.1875,0.8125,0],[0.2031,0.8125,0],[0.2188,0.8125,0],[0.2344,0.8125,0],[0.25,0.8125,0],[0.2656,0.8125,0],[0.2812,0.8125,0],[0.2969,0.8125,0],[0.3125,0.8125,0],[0.3281,0.8125,0],[0.3438,0.8125,0],[0.3594,0.8125,0],[0.375,0.8125,0],[0.3906,0.8125,0],[0.4062,0.8125,0],[0.4219,0.8125,0],[0.4375,0.8125,0],[0.4531,0.8125,0],[0.4688,0.8125,0],[0.4844,0.8125,0],[0.5,0.8125,0],[0.5156,0.8125,0],[0.5312,0.8125,0],[0.5469,0.8125,0],[0.5625,0.8125,0],[0.5781,0.8125,0],[0.5938,0.8125,0],[0.6094,0.8125,0],[0.625,0.8125,0],[0.6406,0.8125,0],[0.6562,0.8125,0],[0.6719,0.8125,0],[0.6875,0.8125,0],[0.7031,0.8125,0],[0.7188,0.8125,0],[0.7344,0.8125,0],[0.75,0.8125,0],[0.7656,0.8125,0],[0.7812,0.8125,0],[0.7969,0.8125,0],[0.8125,0.8125,0],[0.8281,0.8125,0],[0.8438,0.8125,0],[0.8594,0.8125,0],[0.875,0.8125,0],[0.8906,0.8125,0],[0.9062,0.8125,0],[0.9219,0.8125,0],[0.9375,0.8125,0],[0.9531,0.8125,0],[0.9688,0.8125,0],[0.9844,0.8125,0],[-1,0.8281,0],[-0.9844,0.8281,0],[-0.9688,0.8281,0],[-0.9531,0.8281,0],[-0.9375,0.8281,0],[-0.9219,0.8281,0],[-0.9062,0.8281,0],[-0.8906,0.8281,0],[-0.875,0.8281,0],[-0.8594,0.8281,0],[-0.8438,0.8281,0],[-0.8281,0.8281,0],[-0.8125,0.8281,0],[-0.7969,0.8281,0],[-0.7812,0.8281,0],[-0.7656,0.8281,0],[-0.75,0.8281,0],[-0.7344,0.8281,0],[-0.7188,0.8281,0],[-0.7031,0.8281,0],[-0.6875,0.8281,0],[-0.6719,0.8281,0],[-0.6562,0.8281,0],[-0.6406,0.8281,0],[-0.625,0.8281,0],[-0.6094,0.8281,0],[-0.5938,0.8281,0],[-0.5781,0.8281,0],[-0.5625,0.8281,0],[-0.5469,0.8281,0],[-0.5312,0.8281,0],[-0.5156,0.8281,0],[-0.5,0.8281,0],[-0.4844,0.8281,0],[-0.4688,0.8281,0],[-0.4531,0.8281,0],[-0.4375,0.8281,0],[-0.4219,0.8281,0],[-0.4062,0.8281,0],[-0.3906,0.8281,0],[-0.375,0.8281,0],[-0.3594,0.8281,0],[-0.3438,0.8281,0],[-0.3281,0.8281,0],[-0.3125,0.8281,0],[-0.2969,0.8281,0],[-0.2812,0.8281,0],[-0.2656,0.8281,0],[-0.25,0.8281,0],[-0.2344,0.8281,0],[-0.2188,0.8281,0],[-0.2031,0.8281,0],[-0.1875,0.8281,0],[-0.1719,0.8281,0],[-0.1562,0.8281,0],[-0.1406,0.8281,0],[-0.125,0.8281,0],[-0.1094,0.8281,0],[-0.0938,0.8281,0],[-0.0781,0.8281,0],[-0.0625,0.8281,0],[-0.0469,0.8281,0],[-0.0312,0.8281,0],[-0.0156,0.8281,0],[0,0.8281,0],[0.0156,0.8281,0],[0.0312,0.8281,0],[0.0469,0.8281,0],[0.0625,0.8281,0],[0.0781,0.8281,0],[0.0938,0.8281,0],[0.1094,0.8281,0],[0.125,0.8281,0],[0.1406,0.8281,0],[0.1562,0.8281,0],[0.1719,0.8281,0],[0.1875,0.8281,0],[0.2031,0.8281,0],[0.2188,0.8281,0],[0.2344,0.8281,0],[0.25,0.8281,0],[0.2656,0.8281,0],[0.2812,0.8281,0],[0.2969,0.8281,0],[0.3125,0.8281,0],[0.3281,0.8281,0],[0.3438,0.8281,0],[0.3594,0.8281,0],[0.375,0.8281,0],[0.3906,0.8281,0],[0.4062,0.8281,0],[0.4219,0.8281,0],[0.4375,0.8281,0],[0.4531,0.8281,0],[0.4688,0.8281,0],[0.4844,0.8281,0],[0.5,0.8281,0],[0.5156,0.8281,0],[0.5312,0.8281,0],[0.5469,0.8281,0],[0.5625,0.8281,0],[0.5781,0.8281,0],[0.5938,0.8281,0],[0.6094,0.8281,0],[0.625,0.8281,0],[0.6406,0.8281,0],[0.6562,0.8281,0],[0.6719,0.8281,0],[0.6875,0.8281,0],[0.7031,0.8281,0],[0.7188,0.8281,0],[0.7344,0.8281,0],[0.75,0.8281,0],[0.7656,0.8281,0],[0.7812,0.8281,0],[0.7969,0.8281,0],[0.8125,0.8281,0],[0.8281,0.8281,0],[0.8438,0.8281,0],[0.8594,0.8281,0],[0.875,0.8281,0],[0.8906,0.8281,0],[0.9062,0.8281,0],[0.9219,0.8281,0],[0.9375,0.8281,0],[0.9531,0.8281,0],[0.9688,0.8281,0],[0.9844,0.8281,0],[-1,0.8438,0],[-0.9844,0.8438,0],[-0.9688,0.8438,0],[-0.9531,0.8438,0],[-0.9375,0.8438,0],[-0.9219,0.8438,0],[-0.9062,0.8438,0],[-0.8906,0.8438,0],[-0.875,0.8438,0],[-0.8594,0.8438,0],[-0.8438,0.8438,0],[-0.8281,0.8438,0],[-0.8125,0.8438,0],[-0.7969,0.8438,0],[-0.7812,0.8438,0],[-0.7656,0.8438,0],[-0.75,0.8438,0],[-0.7344,0.8438,0],[-0.7188,0.8438,0],[-0.7031,0.8438,0],[-0.6875,0.8438,0],[-0.6719,0.8438,0],[-0.6562,0.8438,0],[-0.6406,0.8438,0],[-0.625,0.8438,0],[-0.6094,0.8438,0],[-0.5938,0.8438,0],[-0.5781,0.8438,0],[-0.5625,0.8438,0],[-0.5469,0.8438,0],[-0.5312,0.8438,0],[-0.5156,0.8438,0],[-0.5,0.8438,0],[-0.4844,0.8438,0],[-0.4688,0.8438,0],[-0.4531,0.8438,0],[-0.4375,0.8438,0],[-0.4219,0.8438,0],[-0.4062,0.8438,0],[-0.3906,0.8438,0],[-0.375,0.8438,0],[-0.3594,0.8438,0],[-0.3438,0.8438,0],[-0.3281,0.8438,0],[-0.3125,0.8438,0],[-0.2969,0.8438,0],[-0.2812,0.8438,0],[-0.2656,0.8438,0],[-0.25,0.8438,0],[-0.2344,0.8438,0],[-0.2188,0.8438,0],[-0.2031,0.8438,0],[-0.1875,0.8438,0],[-0.1719,0.8438,0],[-0.1562,0.8438,0],[-0.1406,0.8438,0],[-0.125,0.8438,0],[-0.1094,0.8438,0],[-0.0938,0.8438,0],[-0.0781,0.8438,0],[-0.0625,0.8438,0],[-0.0469,0.8438,0],[-0.0312,0.8438,0],[-0.0156,0.8438,0],[0,0.8438,0],[0.0156,0.8438,0],[0.0312,0.8438,0],[0.0469,0.8438,0],[0.0625,0.8438,0],[0.0781,0.8438,0],[0.0938,0.8438,0],[0.1094,0.8438,0],[0.125,0.8438,0],[0.1406,0.8438,0],[0.1562,0.8438,0],[0.1719,0.8438,0],[0.1875,0.8438,0],[0.2031,0.8438,0],[0.2188,0.8438,0],[0.2344,0.8438,0],[0.25,0.8438,0],[0.2656,0.8438,0],[0.2812,0.8438,0],[0.2969,0.8438,0],[0.3125,0.8438,0],[0.3281,0.8438,0],[0.3438,0.8438,0],[0.3594,0.8438,0],[0.375,0.8438,0],[0.3906,0.8438,0],[0.4062,0.8438,0],[0.4219,0.8438,0],[0.4375,0.8438,0],[0.4531,0.8438,0],[0.4688,0.8438,0],[0.4844,0.8438,0],[0.5,0.8438,0],[0.5156,0.8438,0],[0.5312,0.8438,0],[0.5469,0.8438,0],[0.5625,0.8438,0],[0.5781,0.8438,0],[0.5938,0.8438,0],[0.6094,0.8438,0],[0.625,0.8438,0],[0.6406,0.8438,0],[0.6562,0.8438,0],[0.6719,0.8438,0],[0.6875,0.8438,0],[0.7031,0.8438,0],[0.7188,0.8438,0],[0.7344,0.8438,0],[0.75,0.8438,0],[0.7656,0.8438,0],[0.7812,0.8438,0],[0.7969,0.8438,0],[0.8125,0.8438,0],[0.8281,0.8438,0],[0.8438,0.8438,0],[0.8594,0.8438,0],[0.875,0.8438,0],[0.8906,0.8438,0],[0.9062,0.8438,0],[0.9219,0.8438,0],[0.9375,0.8438,0],[0.9531,0.8438,0],[0.9688,0.8438,0],[0.9844,0.8438,0],[-1,0.8594,0],[-0.9844,0.8594,0],[-0.9688,0.8594,0],[-0.9531,0.8594,0],[-0.9375,0.8594,0],[-0.9219,0.8594,0],[-0.9062,0.8594,0],[-0.8906,0.8594,0],[-0.875,0.8594,0],[-0.8594,0.8594,0],[-0.8438,0.8594,0],[-0.8281,0.8594,0],[-0.8125,0.8594,0],[-0.7969,0.8594,0],[-0.7812,0.8594,0],[-0.7656,0.8594,0],[-0.75,0.8594,0],[-0.7344,0.8594,0],[-0.7188,0.8594,0],[-0.7031,0.8594,0],[-0.6875,0.8594,0],[-0.6719,0.8594,0],[-0.6562,0.8594,0],[-0.6406,0.8594,0],[-0.625,0.8594,0],[-0.6094,0.8594,0],[-0.5938,0.8594,0],[-0.5781,0.8594,0],[-0.5625,0.8594,0],[-0.5469,0.8594,0],[-0.5312,0.8594,0],[-0.5156,0.8594,0],[-0.5,0.8594,0],[-0.4844,0.8594,0],[-0.4688,0.8594,0],[-0.4531,0.8594,0],[-0.4375,0.8594,0],[-0.4219,0.8594,0],[-0.4062,0.8594,0],[-0.3906,0.8594,0],[-0.375,0.8594,0],[-0.3594,0.8594,0],[-0.3438,0.8594,0],[-0.3281,0.8594,0],[-0.3125,0.8594,0],[-0.2969,0.8594,0],[-0.2812,0.8594,0],[-0.2656,0.8594,0],[-0.25,0.8594,0],[-0.2344,0.8594,0],[-0.2188,0.8594,0],[-0.2031,0.8594,0],[-0.1875,0.8594,0],[-0.1719,0.8594,0],[-0.1562,0.8594,0],[-0.1406,0.8594,0],[-0.125,0.8594,0],[-0.1094,0.8594,0],[-0.0938,0.8594,0],[-0.0781,0.8594,0],[-0.0625,0.8594,0],[-0.0469,0.8594,0],[-0.0312,0.8594,0],[-0.0156,0.8594,0],[0,0.8594,0],[0.0156,0.8594,0],[0.0312,0.8594,0],[0.0469,0.8594,0],[0.0625,0.8594,0],[0.0781,0.8594,0],[0.0938,0.8594,0],[0.1094,0.8594,0],[0.125,0.8594,0],[0.1406,0.8594,0],[0.1562,0.8594,0],[0.1719,0.8594,0],[0.1875,0.8594,0],[0.2031,0.8594,0],[0.2188,0.8594,0],[0.2344,0.8594,0],[0.25,0.8594,0],[0.2656,0.8594,0],[0.2812,0.8594,0],[0.2969,0.8594,0],[0.3125,0.8594,0],[0.3281,0.8594,0],[0.3438,0.8594,0],[0.3594,0.8594,0],[0.375,0.8594,0],[0.3906,0.8594,0],[0.4062,0.8594,0],[0.4219,0.8594,0],[0.4375,0.8594,0],[0.4531,0.8594,0],[0.4688,0.8594,0],[0.4844,0.8594,0],[0.5,0.8594,0],[0.5156,0.8594,0],[0.5312,0.8594,0],[0.5469,0.8594,0],[0.5625,0.8594,0],[0.5781,0.8594,0],[0.5938,0.8594,0],[0.6094,0.8594,0],[0.625,0.8594,0],[0.6406,0.8594,0],[0.6562,0.8594,0],[0.6719,0.8594,0],[0.6875,0.8594,0],[0.7031,0.8594,0],[0.7188,0.8594,0],[0.7344,0.8594,0],[0.75,0.8594,0],[0.7656,0.8594,0],[0.7812,0.8594,0],[0.7969,0.8594,0],[0.8125,0.8594,0],[0.8281,0.8594,0],[0.8438,0.8594,0],[0.8594,0.8594,0],[0.875,0.8594,0],[0.8906,0.8594,0],[0.9062,0.8594,0],[0.9219,0.8594,0],[0.9375,0.8594,0],[0.9531,0.8594,0],[0.9688,0.8594,0],[0.9844,0.8594,0],[-1,0.875,0],[-0.9844,0.875,0],[-0.9688,0.875,0],[-0.9531,0.875,0],[-0.9375,0.875,0],[-0.9219,0.875,0],[-0.9062,0.875,0],[-0.8906,0.875,0],[-0.875,0.875,0],[-0.8594,0.875,0],[-0.8438,0.875,0],[-0.8281,0.875,0],[-0.8125,0.875,0],[-0.7969,0.875,0],[-0.7812,0.875,0],[-0.7656,0.875,0],[-0.75,0.875,0],[-0.7344,0.875,0],[-0.7188,0.875,0],[-0.7031,0.875,0],[-0.6875,0.875,0],[-0.6719,0.875,0],[-0.6562,0.875,0],[-0.6406,0.875,0],[-0.625,0.875,0],[-0.6094,0.875,0],[-0.5938,0.875,0],[-0.5781,0.875,0],[-0.5625,0.875,0],[-0.5469,0.875,0],[-0.5312,0.875,0],[-0.5156,0.875,0],[-0.5,0.875,0],[-0.4844,0.875,0],[-0.4688,0.875,0],[-0.4531,0.875,0],[-0.4375,0.875,0],[-0.4219,0.875,0],[-0.4062,0.875,0],[-0.3906,0.875,0],[-0.375,0.875,0],[-0.3594,0.875,0],[-0.3438,0.875,0],[-0.3281,0.875,0],[-0.3125,0.875,0],[-0.2969,0.875,0],[-0.2812,0.875,0],[-0.2656,0.875,0],[-0.25,0.875,0],[-0.2344,0.875,0],[-0.2188,0.875,0],[-0.2031,0.875,0],[-0.1875,0.875,0],[-0.1719,0.875,0],[-0.1562,0.875,0],[-0.1406,0.875,0],[-0.125,0.875,0],[-0.1094,0.875,0],[-0.0938,0.875,0],[-0.0781,0.875,0],[-0.0625,0.875,0],[-0.0469,0.875,0],[-0.0312,0.875,0],[-0.0156,0.875,0],[0,0.875,0],[0.0156,0.875,0],[0.0312,0.875,0],[0.0469,0.875,0],[0.0625,0.875,0],[0.0781,0.875,0],[0.0938,0.875,0],[0.1094,0.875,0],[0.125,0.875,0],[0.1406,0.875,0],[0.1562,0.875,0],[0.1719,0.875,0],[0.1875,0.875,0],[0.2031,0.875,0],[0.2188,0.875,0],[0.2344,0.875,0],[0.25,0.875,0],[0.2656,0.875,0],[0.2812,0.875,0],[0.2969,0.875,0],[0.3125,0.875,0],[0.3281,0.875,0],[0.3438,0.875,0],[0.3594,0.875,0],[0.375,0.875,0],[0.3906,0.875,0],[0.4062,0.875,0],[0.4219,0.875,0],[0.4375,0.875,0],[0.4531,0.875,0],[0.4688,0.875,0],[0.4844,0.875,0],[0.5,0.875,0],[0.5156,0.875,0],[0.5312,0.875,0],[0.5469,0.875,0],[0.5625,0.875,0],[0.5781,0.875,0],[0.5938,0.875,0],[0.6094,0.875,0],[0.625,0.875,0],[0.6406,0.875,0],[0.6562,0.875,0],[0.6719,0.875,0],[0.6875,0.875,0],[0.7031,0.875,0],[0.7188,0.875,0],[0.7344,0.875,0],[0.75,0.875,0],[0.7656,0.875,0],[0.7812,0.875,0],[0.7969,0.875,0],[0.8125,0.875,0],[0.8281,0.875,0],[0.8438,0.875,0],[0.8594,0.875,0],[0.875,0.875,0],[0.8906,0.875,0],[0.9062,0.875,0],[0.9219,0.875,0],[0.9375,0.875,0],[0.9531,0.875,0],[0.9688,0.875,0],[0.9844,0.875,0],[-1,0.8906,0],[-0.9844,0.8906,0],[-0.9688,0.8906,0],[-0.9531,0.8906,0],[-0.9375,0.8906,0],[-0.9219,0.8906,0],[-0.9062,0.8906,0],[-0.8906,0.8906,0],[-0.875,0.8906,0],[-0.8594,0.8906,0],[-0.8438,0.8906,0],[-0.8281,0.8906,0],[-0.8125,0.8906,0],[-0.7969,0.8906,0],[-0.7812,0.8906,0],[-0.7656,0.8906,0],[-0.75,0.8906,0],[-0.7344,0.8906,0],[-0.7188,0.8906,0],[-0.7031,0.8906,0],[-0.6875,0.8906,0],[-0.6719,0.8906,0],[-0.6562,0.8906,0],[-0.6406,0.8906,0],[-0.625,0.8906,0],[-0.6094,0.8906,0],[-0.5938,0.8906,0],[-0.5781,0.8906,0],[-0.5625,0.8906,0],[-0.5469,0.8906,0],[-0.5312,0.8906,0],[-0.5156,0.8906,0],[-0.5,0.8906,0],[-0.4844,0.8906,0],[-0.4688,0.8906,0],[-0.4531,0.8906,0],[-0.4375,0.8906,0],[-0.4219,0.8906,0],[-0.4062,0.8906,0],[-0.3906,0.8906,0],[-0.375,0.8906,0],[-0.3594,0.8906,0],[-0.3438,0.8906,0],[-0.3281,0.8906,0],[-0.3125,0.8906,0],[-0.2969,0.8906,0],[-0.2812,0.8906,0],[-0.2656,0.8906,0],[-0.25,0.8906,0],[-0.2344,0.8906,0],[-0.2188,0.8906,0],[-0.2031,0.8906,0],[-0.1875,0.8906,0],[-0.1719,0.8906,0],[-0.1562,0.8906,0],[-0.1406,0.8906,0],[-0.125,0.8906,0],[-0.1094,0.8906,0],[-0.0938,0.8906,0],[-0.0781,0.8906,0],[-0.0625,0.8906,0],[-0.0469,0.8906,0],[-0.0312,0.8906,0],[-0.0156,0.8906,0],[0,0.8906,0],[0.0156,0.8906,0],[0.0312,0.8906,0],[0.0469,0.8906,0],[0.0625,0.8906,0],[0.0781,0.8906,0],[0.0938,0.8906,0],[0.1094,0.8906,0],[0.125,0.8906,0],[0.1406,0.8906,0],[0.1562,0.8906,0],[0.1719,0.8906,0],[0.1875,0.8906,0],[0.2031,0.8906,0],[0.2188,0.8906,0],[0.2344,0.8906,0],[0.25,0.8906,0],[0.2656,0.8906,0],[0.2812,0.8906,0],[0.2969,0.8906,0],[0.3125,0.8906,0],[0.3281,0.8906,0],[0.3438,0.8906,0],[0.3594,0.8906,0],[0.375,0.8906,0],[0.3906,0.8906,0],[0.4062,0.8906,0],[0.4219,0.8906,0],[0.4375,0.8906,0],[0.4531,0.8906,0],[0.4688,0.8906,0],[0.4844,0.8906,0],[0.5,0.8906,0],[0.5156,0.8906,0],[0.5312,0.8906,0],[0.5469,0.8906,0],[0.5625,0.8906,0],[0.5781,0.8906,0],[0.5938,0.8906,0],[0.6094,0.8906,0],[0.625,0.8906,0],[0.6406,0.8906,0],[0.6562,0.8906,0],[0.6719,0.8906,0],[0.6875,0.8906,0],[0.7031,0.8906,0],[0.7188,0.8906,0],[0.7344,0.8906,0],[0.75,0.8906,0],[0.7656,0.8906,0],[0.7812,0.8906,0],[0.7969,0.8906,0],[0.8125,0.8906,0],[0.8281,0.8906,0],[0.8438,0.8906,0],[0.8594,0.8906,0],[0.875,0.8906,0],[0.8906,0.8906,0],[0.9062,0.8906,0],[0.9219,0.8906,0],[0.9375,0.8906,0],[0.9531,0.8906,0],[0.9688,0.8906,0],[0.9844,0.8906,0],[-1,0.9062,0],[-0.9844,0.9062,0],[-0.9688,0.9062,0],[-0.9531,0.9062,0],[-0.9375,0.9062,0],[-0.9219,0.9062,0],[-0.9062,0.9062,0],[-0.8906,0.9062,0],[-0.875,0.9062,0],[-0.8594,0.9062,0],[-0.8438,0.9062,0],[-0.8281,0.9062,0],[-0.8125,0.9062,0],[-0.7969,0.9062,0],[-0.7812,0.9062,0],[-0.7656,0.9062,0],[-0.75,0.9062,0],[-0.7344,0.9062,0],[-0.7188,0.9062,0],[-0.7031,0.9062,0],[-0.6875,0.9062,0],[-0.6719,0.9062,0],[-0.6562,0.9062,0],[-0.6406,0.9062,0],[-0.625,0.9062,0],[-0.6094,0.9062,0],[-0.5938,0.9062,0],[-0.5781,0.9062,0],[-0.5625,0.9062,0],[-0.5469,0.9062,0],[-0.5312,0.9062,0],[-0.5156,0.9062,0],[-0.5,0.9062,0],[-0.4844,0.9062,0],[-0.4688,0.9062,0],[-0.4531,0.9062,0],[-0.4375,0.9062,0],[-0.4219,0.9062,0],[-0.4062,0.9062,0],[-0.3906,0.9062,0],[-0.375,0.9062,0],[-0.3594,0.9062,0],[-0.3438,0.9062,0],[-0.3281,0.9062,0],[-0.3125,0.9062,0],[-0.2969,0.9062,0],[-0.2812,0.9062,0],[-0.2656,0.9062,0],[-0.25,0.9062,0],[-0.2344,0.9062,0],[-0.2188,0.9062,0],[-0.2031,0.9062,0],[-0.1875,0.9062,0],[-0.1719,0.9062,0],[-0.1562,0.9062,0],[-0.1406,0.9062,0],[-0.125,0.9062,0],[-0.1094,0.9062,0],[-0.0938,0.9062,0],[-0.0781,0.9062,0],[-0.0625,0.9062,0],[-0.0469,0.9062,0],[-0.0312,0.9062,0],[-0.0156,0.9062,0],[0,0.9062,0],[0.0156,0.9062,0],[0.0312,0.9062,0],[0.0469,0.9062,0],[0.0625,0.9062,0],[0.0781,0.9062,0],[0.0938,0.9062,0],[0.1094,0.9062,0],[0.125,0.9062,0],[0.1406,0.9062,0],[0.1562,0.9062,0],[0.1719,0.9062,0],[0.1875,0.9062,0],[0.2031,0.9062,0],[0.2188,0.9062,0],[0.2344,0.9062,0],[0.25,0.9062,0],[0.2656,0.9062,0],[0.2812,0.9062,0],[0.2969,0.9062,0],[0.3125,0.9062,0],[0.3281,0.9062,0],[0.3438,0.9062,0],[0.3594,0.9062,0],[0.375,0.9062,0],[0.3906,0.9062,0],[0.4062,0.9062,0],[0.4219,0.9062,0],[0.4375,0.9062,0],[0.4531,0.9062,0],[0.4688,0.9062,0],[0.4844,0.9062,0],[0.5,0.9062,0],[0.5156,0.9062,0],[0.5312,0.9062,0],[0.5469,0.9062,0],[0.5625,0.9062,0],[0.5781,0.9062,0],[0.5938,0.9062,0],[0.6094,0.9062,0],[0.625,0.9062,0],[0.6406,0.9062,0],[0.6562,0.9062,0],[0.6719,0.9062,0],[0.6875,0.9062,0],[0.7031,0.9062,0],[0.7188,0.9062,0],[0.7344,0.9062,0],[0.75,0.9062,0],[0.7656,0.9062,0],[0.7812,0.9062,0],[0.7969,0.9062,0],[0.8125,0.9062,0],[0.8281,0.9062,0],[0.8438,0.9062,0],[0.8594,0.9062,0],[0.875,0.9062,0],[0.8906,0.9062,0],[0.9062,0.9062,0],[0.9219,0.9062,0],[0.9375,0.9062,0],[0.9531,0.9062,0],[0.9688,0.9062,0],[0.9844,0.9062,0],[-1,0.9219,0],[-0.9844,0.9219,0],[-0.9688,0.9219,0],[-0.9531,0.9219,0],[-0.9375,0.9219,0],[-0.9219,0.9219,0],[-0.9062,0.9219,0],[-0.8906,0.9219,0],[-0.875,0.9219,0],[-0.8594,0.9219,0],[-0.8438,0.9219,0],[-0.8281,0.9219,0],[-0.8125,0.9219,0],[-0.7969,0.9219,0],[-0.7812,0.9219,0],[-0.7656,0.9219,0],[-0.75,0.9219,0],[-0.7344,0.9219,0],[-0.7188,0.9219,0],[-0.7031,0.9219,0],[-0.6875,0.9219,0],[-0.6719,0.9219,0],[-0.6562,0.9219,0],[-0.6406,0.9219,0],[-0.625,0.9219,0],[-0.6094,0.9219,0],[-0.5938,0.9219,0],[-0.5781,0.9219,0],[-0.5625,0.9219,0],[-0.5469,0.9219,0],[-0.5312,0.9219,0],[-0.5156,0.9219,0],[-0.5,0.9219,0],[-0.4844,0.9219,0],[-0.4688,0.9219,0],[-0.4531,0.9219,0],[-0.4375,0.9219,0],[-0.4219,0.9219,0],[-0.4062,0.9219,0],[-0.3906,0.9219,0],[-0.375,0.9219,0],[-0.3594,0.9219,0],[-0.3438,0.9219,0],[-0.3281,0.9219,0],[-0.3125,0.9219,0],[-0.2969,0.9219,0],[-0.2812,0.9219,0],[-0.2656,0.9219,0],[-0.25,0.9219,0],[-0.2344,0.9219,0],[-0.2188,0.9219,0],[-0.2031,0.9219,0],[-0.1875,0.9219,0],[-0.1719,0.9219,0],[-0.1562,0.9219,0],[-0.1406,0.9219,0],[-0.125,0.9219,0],[-0.1094,0.9219,0],[-0.0938,0.9219,0],[-0.0781,0.9219,0],[-0.0625,0.9219,0],[-0.0469,0.9219,0],[-0.0312,0.9219,0],[-0.0156,0.9219,0],[0,0.9219,0],[0.0156,0.9219,0],[0.0312,0.9219,0],[0.0469,0.9219,0],[0.0625,0.9219,0],[0.0781,0.9219,0],[0.0938,0.9219,0],[0.1094,0.9219,0],[0.125,0.9219,0],[0.1406,0.9219,0],[0.1562,0.9219,0],[0.1719,0.9219,0],[0.1875,0.9219,0],[0.2031,0.9219,0],[0.2188,0.9219,0],[0.2344,0.9219,0],[0.25,0.9219,0],[0.2656,0.9219,0],[0.2812,0.9219,0],[0.2969,0.9219,0],[0.3125,0.9219,0],[0.3281,0.9219,0],[0.3438,0.9219,0],[0.3594,0.9219,0],[0.375,0.9219,0],[0.3906,0.9219,0],[0.4062,0.9219,0],[0.4219,0.9219,0],[0.4375,0.9219,0],[0.4531,0.9219,0],[0.4688,0.9219,0],[0.4844,0.9219,0],[0.5,0.9219,0],[0.5156,0.9219,0],[0.5312,0.9219,0],[0.5469,0.9219,0],[0.5625,0.9219,0],[0.5781,0.9219,0],[0.5938,0.9219,0],[0.6094,0.9219,0],[0.625,0.9219,0],[0.6406,0.9219,0],[0.6562,0.9219,0],[0.6719,0.9219,0],[0.6875,0.9219,0],[0.7031,0.9219,0],[0.7188,0.9219,0],[0.7344,0.9219,0],[0.75,0.9219,0],[0.7656,0.9219,0],[0.7812,0.9219,0],[0.7969,0.9219,0],[0.8125,0.9219,0],[0.8281,0.9219,0],[0.8438,0.9219,0],[0.8594,0.9219,0],[0.875,0.9219,0],[0.8906,0.9219,0],[0.9062,0.9219,0],[0.9219,0.9219,0],[0.9375,0.9219,0],[0.9531,0.9219,0],[0.9688,0.9219,0],[0.9844,0.9219,0],[-1,0.9375,0],[-0.9844,0.9375,0],[-0.9688,0.9375,0],[-0.9531,0.9375,0],[-0.9375,0.9375,0],[-0.9219,0.9375,0],[-0.9062,0.9375,0],[-0.8906,0.9375,0],[-0.875,0.9375,0],[-0.8594,0.9375,0],[-0.8438,0.9375,0],[-0.8281,0.9375,0],[-0.8125,0.9375,0],[-0.7969,0.9375,0],[-0.7812,0.9375,0],[-0.7656,0.9375,0],[-0.75,0.9375,0],[-0.7344,0.9375,0],[-0.7188,0.9375,0],[-0.7031,0.9375,0],[-0.6875,0.9375,0],[-0.6719,0.9375,0],[-0.6562,0.9375,0],[-0.6406,0.9375,0],[-0.625,0.9375,0],[-0.6094,0.9375,0],[-0.5938,0.9375,0],[-0.5781,0.9375,0],[-0.5625,0.9375,0],[-0.5469,0.9375,0],[-0.5312,0.9375,0],[-0.5156,0.9375,0],[-0.5,0.9375,0],[-0.4844,0.9375,0],[-0.4688,0.9375,0],[-0.4531,0.9375,0],[-0.4375,0.9375,0],[-0.4219,0.9375,0],[-0.4062,0.9375,0],[-0.3906,0.9375,0],[-0.375,0.9375,0],[-0.3594,0.9375,0],[-0.3438,0.9375,0],[-0.3281,0.9375,0],[-0.3125,0.9375,0],[-0.2969,0.9375,0],[-0.2812,0.9375,0],[-0.2656,0.9375,0],[-0.25,0.9375,0],[-0.2344,0.9375,0],[-0.2188,0.9375,0],[-0.2031,0.9375,0],[-0.1875,0.9375,0],[-0.1719,0.9375,0],[-0.1562,0.9375,0],[-0.1406,0.9375,0],[-0.125,0.9375,0],[-0.1094,0.9375,0],[-0.0938,0.9375,0],[-0.0781,0.9375,0],[-0.0625,0.9375,0],[-0.0469,0.9375,0],[-0.0312,0.9375,0],[-0.0156,0.9375,0],[0,0.9375,0],[0.0156,0.9375,0],[0.0312,0.9375,0],[0.0469,0.9375,0],[0.0625,0.9375,0],[0.0781,0.9375,0],[0.0938,0.9375,0],[0.1094,0.9375,0],[0.125,0.9375,0],[0.1406,0.9375,0],[0.1562,0.9375,0],[0.1719,0.9375,0],[0.1875,0.9375,0],[0.2031,0.9375,0],[0.2188,0.9375,0],[0.2344,0.9375,0],[0.25,0.9375,0],[0.2656,0.9375,0],[0.2812,0.9375,0],[0.2969,0.9375,0],[0.3125,0.9375,0],[0.3281,0.9375,0],[0.3438,0.9375,0],[0.3594,0.9375,0],[0.375,0.9375,0],[0.3906,0.9375,0],[0.4062,0.9375,0],[0.4219,0.9375,0],[0.4375,0.9375,0],[0.4531,0.9375,0],[0.4688,0.9375,0],[0.4844,0.9375,0],[0.5,0.9375,0],[0.5156,0.9375,0],[0.5312,0.9375,0],[0.5469,0.9375,0],[0.5625,0.9375,0],[0.5781,0.9375,0],[0.5938,0.9375,0],[0.6094,0.9375,0],[0.625,0.9375,0],[0.6406,0.9375,0],[0.6562,0.9375,0],[0.6719,0.9375,0],[0.6875,0.9375,0],[0.7031,0.9375,0],[0.7188,0.9375,0],[0.7344,0.9375,0],[0.75,0.9375,0],[0.7656,0.9375,0],[0.7812,0.9375,0],[0.7969,0.9375,0],[0.8125,0.9375,0],[0.8281,0.9375,0],[0.8438,0.9375,0],[0.8594,0.9375,0],[0.875,0.9375,0],[0.8906,0.9375,0],[0.9062,0.9375,0],[0.9219,0.9375,0],[0.9375,0.9375,0],[0.9531,0.9375,0],[0.9688,0.9375,0],[0.9844,0.9375,0],[-1,0.9531,0],[-0.9844,0.9531,0],[-0.9688,0.9531,0],[-0.9531,0.9531,0],[-0.9375,0.9531,0],[-0.9219,0.9531,0],[-0.9062,0.9531,0],[-0.8906,0.9531,0],[-0.875,0.9531,0],[-0.8594,0.9531,0],[-0.8438,0.9531,0],[-0.8281,0.9531,0],[-0.8125,0.9531,0],[-0.7969,0.9531,0],[-0.7812,0.9531,0],[-0.7656,0.9531,0],[-0.75,0.9531,0],[-0.7344,0.9531,0],[-0.7188,0.9531,0],[-0.7031,0.9531,0],[-0.6875,0.9531,0],[-0.6719,0.9531,0],[-0.6562,0.9531,0],[-0.6406,0.9531,0],[-0.625,0.9531,0],[-0.6094,0.9531,0],[-0.5938,0.9531,0],[-0.5781,0.9531,0],[-0.5625,0.9531,0],[-0.5469,0.9531,0],[-0.5312,0.9531,0],[-0.5156,0.9531,0],[-0.5,0.9531,0],[-0.4844,0.9531,0],[-0.4688,0.9531,0],[-0.4531,0.9531,0],[-0.4375,0.9531,0],[-0.4219,0.9531,0],[-0.4062,0.9531,0],[-0.3906,0.9531,0],[-0.375,0.9531,0],[-0.3594,0.9531,0],[-0.3438,0.9531,0],[-0.3281,0.9531,0],[-0.3125,0.9531,0],[-0.2969,0.9531,0],[-0.2812,0.9531,0],[-0.2656,0.9531,0],[-0.25,0.9531,0],[-0.2344,0.9531,0],[-0.2188,0.9531,0],[-0.2031,0.9531,0],[-0.1875,0.9531,0],[-0.1719,0.9531,0],[-0.1562,0.9531,0],[-0.1406,0.9531,0],[-0.125,0.9531,0],[-0.1094,0.9531,0],[-0.0938,0.9531,0],[-0.0781,0.9531,0],[-0.0625,0.9531,0],[-0.0469,0.9531,0],[-0.0312,0.9531,0],[-0.0156,0.9531,0],[0,0.9531,0],[0.0156,0.9531,0],[0.0312,0.9531,0],[0.0469,0.9531,0],[0.0625,0.9531,0],[0.0781,0.9531,0],[0.0938,0.9531,0],[0.1094,0.9531,0],[0.125,0.9531,0],[0.1406,0.9531,0],[0.1562,0.9531,0],[0.1719,0.9531,0],[0.1875,0.9531,0],[0.2031,0.9531,0],[0.2188,0.9531,0],[0.2344,0.9531,0],[0.25,0.9531,0],[0.2656,0.9531,0],[0.2812,0.9531,0],[0.2969,0.9531,0],[0.3125,0.9531,0],[0.3281,0.9531,0],[0.3438,0.9531,0],[0.3594,0.9531,0],[0.375,0.9531,0],[0.3906,0.9531,0],[0.4062,0.9531,0],[0.4219,0.9531,0],[0.4375,0.9531,0],[0.4531,0.9531,0],[0.4688,0.9531,0],[0.4844,0.9531,0],[0.5,0.9531,0],[0.5156,0.9531,0],[0.5312,0.9531,0],[0.5469,0.9531,0],[0.5625,0.9531,0],[0.5781,0.9531,0],[0.5938,0.9531,0],[0.6094,0.9531,0],[0.625,0.9531,0],[0.6406,0.9531,0],[0.6562,0.9531,0],[0.6719,0.9531,0],[0.6875,0.9531,0],[0.7031,0.9531,0],[0.7188,0.9531,0],[0.7344,0.9531,0],[0.75,0.9531,0],[0.7656,0.9531,0],[0.7812,0.9531,0],[0.7969,0.9531,0],[0.8125,0.9531,0],[0.8281,0.9531,0],[0.8438,0.9531,0],[0.8594,0.9531,0],[0.875,0.9531,0],[0.8906,0.9531,0],[0.9062,0.9531,0],[0.9219,0.9531,0],[0.9375,0.9531,0],[0.9531,0.9531,0],[0.9688,0.9531,0],[0.9844,0.9531,0],[-1,0.9688,0],[-0.9844,0.9688,0],[-0.9688,0.9688,0],[-0.9531,0.9688,0],[-0.9375,0.9688,0],[-0.9219,0.9688,0],[-0.9062,0.9688,0],[-0.8906,0.9688,0],[-0.875,0.9688,0],[-0.8594,0.9688,0],[-0.8438,0.9688,0],[-0.8281,0.9688,0],[-0.8125,0.9688,0],[-0.7969,0.9688,0],[-0.7812,0.9688,0],[-0.7656,0.9688,0],[-0.75,0.9688,0],[-0.7344,0.9688,0],[-0.7188,0.9688,0],[-0.7031,0.9688,0],[-0.6875,0.9688,0],[-0.6719,0.9688,0],[-0.6562,0.9688,0],[-0.6406,0.9688,0],[-0.625,0.9688,0],[-0.6094,0.9688,0],[-0.5938,0.9688,0],[-0.5781,0.9688,0],[-0.5625,0.9688,0],[-0.5469,0.9688,0],[-0.5312,0.9688,0],[-0.5156,0.9688,0],[-0.5,0.9688,0],[-0.4844,0.9688,0],[-0.4688,0.9688,0],[-0.4531,0.9688,0],[-0.4375,0.9688,0],[-0.4219,0.9688,0],[-0.4062,0.9688,0],[-0.3906,0.9688,0],[-0.375,0.9688,0],[-0.3594,0.9688,0],[-0.3438,0.9688,0],[-0.3281,0.9688,0],[-0.3125,0.9688,0],[-0.2969,0.9688,0],[-0.2812,0.9688,0],[-0.2656,0.9688,0],[-0.25,0.9688,0],[-0.2344,0.9688,0],[-0.2188,0.9688,0],[-0.2031,0.9688,0],[-0.1875,0.9688,0],[-0.1719,0.9688,0],[-0.1562,0.9688,0],[-0.1406,0.9688,0],[-0.125,0.9688,0],[-0.1094,0.9688,0],[-0.0938,0.9688,0],[-0.0781,0.9688,0],[-0.0625,0.9688,0],[-0.0469,0.9688,0],[-0.0312,0.9688,0],[-0.0156,0.9688,0],[0,0.9688,0],[0.0156,0.9688,0],[0.0312,0.9688,0],[0.0469,0.9688,0],[0.0625,0.9688,0],[0.0781,0.9688,0],[0.0938,0.9688,0],[0.1094,0.9688,0],[0.125,0.9688,0],[0.1406,0.9688,0],[0.1562,0.9688,0],[0.1719,0.9688,0],[0.1875,0.9688,0],[0.2031,0.9688,0],[0.2188,0.9688,0],[0.2344,0.9688,0],[0.25,0.9688,0],[0.2656,0.9688,0],[0.2812,0.9688,0],[0.2969,0.9688,0],[0.3125,0.9688,0],[0.3281,0.9688,0],[0.3438,0.9688,0],[0.3594,0.9688,0],[0.375,0.9688,0],[0.3906,0.9688,0],[0.4062,0.9688,0],[0.4219,0.9688,0],[0.4375,0.9688,0],[0.4531,0.9688,0],[0.4688,0.9688,0],[0.4844,0.9688,0],[0.5,0.9688,0],[0.5156,0.9688,0],[0.5312,0.9688,0],[0.5469,0.9688,0],[0.5625,0.9688,0],[0.5781,0.9688,0],[0.5938,0.9688,0],[0.6094,0.9688,0],[0.625,0.9688,0],[0.6406,0.9688,0],[0.6562,0.9688,0],[0.6719,0.9688,0],[0.6875,0.9688,0],[0.7031,0.9688,0],[0.7188,0.9688,0],[0.7344,0.9688,0],[0.75,0.9688,0],[0.7656,0.9688,0],[0.7812,0.9688,0],[0.7969,0.9688,0],[0.8125,0.9688,0],[0.8281,0.9688,0],[0.8438,0.9688,0],[0.8594,0.9688,0],[0.875,0.9688,0],[0.8906,0.9688,0],[0.9062,0.9688,0],[0.9219,0.9688,0],[0.9375,0.9688,0],[0.9531,0.9688,0],[0.9688,0.9688,0],[0.9844,0.9688,0],[-1,0.9844,0],[-0.9844,0.9844,0],[-0.9688,0.9844,0],[-0.9531,0.9844,0],[-0.9375,0.9844,0],[-0.9219,0.9844,0],[-0.9062,0.9844,0],[-0.8906,0.9844,0],[-0.875,0.9844,0],[-0.8594,0.9844,0],[-0.8438,0.9844,0],[-0.8281,0.9844,0],[-0.8125,0.9844,0],[-0.7969,0.9844,0],[-0.7812,0.9844,0],[-0.7656,0.9844,0],[-0.75,0.9844,0],[-0.7344,0.9844,0],[-0.7188,0.9844,0],[-0.7031,0.9844,0],[-0.6875,0.9844,0],[-0.6719,0.9844,0],[-0.6562,0.9844,0],[-0.6406,0.9844,0],[-0.625,0.9844,0],[-0.6094,0.9844,0],[-0.5938,0.9844,0],[-0.5781,0.9844,0],[-0.5625,0.9844,0],[-0.5469,0.9844,0],[-0.5312,0.9844,0],[-0.5156,0.9844,0],[-0.5,0.9844,0],[-0.4844,0.9844,0],[-0.4688,0.9844,0],[-0.4531,0.9844,0],[-0.4375,0.9844,0],[-0.4219,0.9844,0],[-0.4062,0.9844,0],[-0.3906,0.9844,0],[-0.375,0.9844,0],[-0.3594,0.9844,0],[-0.3438,0.9844,0],[-0.3281,0.9844,0],[-0.3125,0.9844,0],[-0.2969,0.9844,0],[-0.2812,0.9844,0],[-0.2656,0.9844,0],[-0.25,0.9844,0],[-0.2344,0.9844,0],[-0.2188,0.9844,0],[-0.2031,0.9844,0],[-0.1875,0.9844,0],[-0.1719,0.9844,0],[-0.1562,0.9844,0],[-0.1406,0.9844,0],[-0.125,0.9844,0],[-0.1094,0.9844,0],[-0.0938,0.9844,0],[-0.0781,0.9844,0],[-0.0625,0.9844,0],[-0.0469,0.9844,0],[-0.0312,0.9844,0],[-0.0156,0.9844,0],[0,0.9844,0],[0.0156,0.9844,0],[0.0312,0.9844,0],[0.0469,0.9844,0],[0.0625,0.9844,0],[0.0781,0.9844,0],[0.0938,0.9844,0],[0.1094,0.9844,0],[0.125,0.9844,0],[0.1406,0.9844,0],[0.1562,0.9844,0],[0.1719,0.9844,0],[0.1875,0.9844,0],[0.2031,0.9844,0],[0.2188,0.9844,0],[0.2344,0.9844,0],[0.25,0.9844,0],[0.2656,0.9844,0],[0.2812,0.9844,0],[0.2969,0.9844,0],[0.3125,0.9844,0],[0.3281,0.9844,0],[0.3438,0.9844,0],[0.3594,0.9844,0],[0.375,0.9844,0],[0.3906,0.9844,0],[0.4062,0.9844,0],[0.4219,0.9844,0],[0.4375,0.9844,0],[0.4531,0.9844,0],[0.4688,0.9844,0],[0.4844,0.9844,0],[0.5,0.9844,0],[0.5156,0.9844,0],[0.5312,0.9844,0],[0.5469,0.9844,0],[0.5625,0.9844,0],[0.5781,0.9844,0],[0.5938,0.9844,0],[0.6094,0.9844,0],[0.625,0.9844,0],[0.6406,0.9844,0],[0.6562,0.9844,0],[0.6719,0.9844,0],[0.6875,0.9844,0],[0.7031,0.9844,0],[0.7188,0.9844,0],[0.7344,0.9844,0],[0.75,0.9844,0],[0.7656,0.9844,0],[0.7812,0.9844,0],[0.7969,0.9844,0],[0.8125,0.9844,0],[0.8281,0.9844,0],[0.8438,0.9844,0],[0.8594,0.9844,0],[0.875,0.9844,0],[0.8906,0.9844,0],[0.9062,0.9844,0],[0.9219,0.9844,0],[0.9375,0.9844,0],[0.9531,0.9844,0],[0.9688,0.9844,0],[0.9844,0.9844,0]]

    			    .flat(Infinity)),
    			size: 3
    		},

    		normal: {
    			data: new Float32Array(



    			    .flat(Infinity)),
    			size: 3
    		},

    		uv: {
    			data: new Float32Array(

    [[0.0001,0.9999],[0.0079,0.9999],[0.0158,0.9999],[0.0237,0.9999],[0.0316,0.9999],[0.0394,0.9999],[0.0473,0.9999],[0.0552,0.9999],[0.063,0.9999],[0.0709,0.9999],[0.0788,0.9999],[0.0867,0.9999],[0.0945,0.9999],[0.1024,0.9999],[0.1103,0.9999],[0.1182,0.9999],[0.126,0.9999],[0.1339,0.9999],[0.1418,0.9999],[0.1497,0.9999],[0.1575,0.9999],[0.1654,0.9999],[0.1733,0.9999],[0.1812,0.9999],[0.189,0.9999],[0.1969,0.9999],[0.2048,0.9999],[0.2126,0.9999],[0.2205,0.9999],[0.2284,0.9999],[0.2363,0.9999],[0.2441,0.9999],[0.252,0.9999],[0.2599,0.9999],[0.2678,0.9999],[0.2756,0.9999],[0.2835,0.9999],[0.2914,0.9999],[0.2993,0.9999],[0.3071,0.9999],[0.315,0.9999],[0.3229,0.9999],[0.3308,0.9999],[0.3386,0.9999],[0.3465,0.9999],[0.3544,0.9999],[0.3622,0.9999],[0.3701,0.9999],[0.378,0.9999],[0.3859,0.9999],[0.3937,0.9999],[0.4016,0.9999],[0.4095,0.9999],[0.4174,0.9999],[0.4252,0.9999],[0.4331,0.9999],[0.441,0.9999],[0.4489,0.9999],[0.4567,0.9999],[0.4646,0.9999],[0.4725,0.9999],[0.4803,0.9999],[0.4882,0.9999],[0.4961,0.9999],[0.504,0.9999],[0.5118,0.9999],[0.5197,0.9999],[0.5276,0.9999],[0.5355,0.9999],[0.5433,0.9999],[0.5512,0.9999],[0.5591,0.9999],[0.567,0.9999],[0.5748,0.9999],[0.5827,0.9999],[0.5906,0.9999],[0.5984,0.9999],[0.6063,0.9999],[0.6142,0.9999],[0.6221,0.9999],[0.6299,0.9999],[0.6378,0.9999],[0.6457,0.9999],[0.6536,0.9999],[0.6614,0.9999],[0.6693,0.9999],[0.6772,0.9999],[0.6851,0.9999],[0.6929,0.9999],[0.7008,0.9999],[0.7087,0.9999],[0.7166,0.9999],[0.7244,0.9999],[0.7323,0.9999],[0.7402,0.9999],[0.748,0.9999],[0.7559,0.9999],[0.7638,0.9999],[0.7717,0.9999],[0.7795,0.9999],[0.7874,0.9999],[0.7953,0.9999],[0.8032,0.9999],[0.811,0.9999],[0.8189,0.9999],[0.8268,0.9999],[0.8347,0.9999],[0.8425,0.9999],[0.8504,0.9999],[0.8583,0.9999],[0.8662,0.9999],[0.874,0.9999],[0.8819,0.9999],[0.8898,0.9999],[0.8976,0.9999],[0.9055,0.9999],[0.9134,0.9999],[0.9213,0.9999],[0.9291,0.9999],[0.937,0.9999],[0.9449,0.9999],[0.9528,0.9999],[0.9606,0.9999],[0.9685,0.9999],[0.9764,0.9999],[0.9843,0.9999],[0.9921,0.9999],[1,0.9999],[0.0001,0.9921],[0.0079,0.9921],[0.0158,0.9921],[0.0237,0.9921],[0.0316,0.9921],[0.0394,0.9921],[0.0473,0.9921],[0.0552,0.9921],[0.063,0.9921],[0.0709,0.9921],[0.0788,0.9921],[0.0867,0.9921],[0.0945,0.9921],[0.1024,0.9921],[0.1103,0.9921],[0.1182,0.9921],[0.126,0.9921],[0.1339,0.9921],[0.1418,0.9921],[0.1497,0.9921],[0.1575,0.9921],[0.1654,0.9921],[0.1733,0.9921],[0.1812,0.9921],[0.189,0.9921],[0.1969,0.9921],[0.2048,0.9921],[0.2126,0.9921],[0.2205,0.9921],[0.2284,0.9921],[0.2363,0.9921],[0.2441,0.9921],[0.252,0.9921],[0.2599,0.9921],[0.2678,0.9921],[0.2756,0.9921],[0.2835,0.9921],[0.2914,0.9921],[0.2993,0.9921],[0.3071,0.9921],[0.315,0.9921],[0.3229,0.9921],[0.3308,0.9921],[0.3386,0.9921],[0.3465,0.9921],[0.3544,0.9921],[0.3622,0.9921],[0.3701,0.9921],[0.378,0.9921],[0.3859,0.9921],[0.3937,0.9921],[0.4016,0.9921],[0.4095,0.9921],[0.4174,0.9921],[0.4252,0.9921],[0.4331,0.9921],[0.441,0.9921],[0.4489,0.9921],[0.4567,0.9921],[0.4646,0.9921],[0.4725,0.9921],[0.4803,0.9921],[0.4882,0.9921],[0.4961,0.9921],[0.504,0.9921],[0.5118,0.9921],[0.5197,0.9921],[0.5276,0.9921],[0.5355,0.9921],[0.5433,0.9921],[0.5512,0.9921],[0.5591,0.9921],[0.567,0.9921],[0.5748,0.9921],[0.5827,0.9921],[0.5906,0.9921],[0.5984,0.9921],[0.6063,0.9921],[0.6142,0.9921],[0.6221,0.9921],[0.6299,0.9921],[0.6378,0.9921],[0.6457,0.9921],[0.6536,0.9921],[0.6614,0.9921],[0.6693,0.9921],[0.6772,0.9921],[0.6851,0.9921],[0.6929,0.9921],[0.7008,0.9921],[0.7087,0.9921],[0.7166,0.9921],[0.7244,0.9921],[0.7323,0.9921],[0.7402,0.9921],[0.748,0.9921],[0.7559,0.9921],[0.7638,0.9921],[0.7717,0.9921],[0.7795,0.9921],[0.7874,0.9921],[0.7953,0.9921],[0.8032,0.9921],[0.811,0.9921],[0.8189,0.9921],[0.8268,0.9921],[0.8347,0.9921],[0.8425,0.9921],[0.8504,0.9921],[0.8583,0.9921],[0.8662,0.9921],[0.874,0.9921],[0.8819,0.9921],[0.8898,0.9921],[0.8976,0.9921],[0.9055,0.9921],[0.9134,0.9921],[0.9213,0.9921],[0.9291,0.9921],[0.937,0.9921],[0.9449,0.9921],[0.9528,0.9921],[0.9606,0.9921],[0.9685,0.9921],[0.9764,0.9921],[0.9843,0.9921],[0.9921,0.9921],[1,0.9921],[0.0001,0.9842],[0.0079,0.9842],[0.0158,0.9842],[0.0237,0.9842],[0.0316,0.9842],[0.0394,0.9842],[0.0473,0.9842],[0.0552,0.9842],[0.063,0.9842],[0.0709,0.9842],[0.0788,0.9842],[0.0867,0.9842],[0.0945,0.9842],[0.1024,0.9842],[0.1103,0.9842],[0.1182,0.9842],[0.126,0.9842],[0.1339,0.9842],[0.1418,0.9842],[0.1497,0.9842],[0.1575,0.9842],[0.1654,0.9842],[0.1733,0.9842],[0.1812,0.9842],[0.189,0.9842],[0.1969,0.9842],[0.2048,0.9842],[0.2126,0.9842],[0.2205,0.9842],[0.2284,0.9842],[0.2363,0.9842],[0.2441,0.9842],[0.252,0.9842],[0.2599,0.9842],[0.2678,0.9842],[0.2756,0.9842],[0.2835,0.9842],[0.2914,0.9842],[0.2993,0.9842],[0.3071,0.9842],[0.315,0.9842],[0.3229,0.9842],[0.3308,0.9842],[0.3386,0.9842],[0.3465,0.9842],[0.3544,0.9842],[0.3622,0.9842],[0.3701,0.9842],[0.378,0.9842],[0.3859,0.9842],[0.3937,0.9842],[0.4016,0.9842],[0.4095,0.9842],[0.4174,0.9842],[0.4252,0.9842],[0.4331,0.9842],[0.441,0.9842],[0.4489,0.9842],[0.4567,0.9842],[0.4646,0.9842],[0.4725,0.9842],[0.4803,0.9842],[0.4882,0.9842],[0.4961,0.9842],[0.504,0.9842],[0.5118,0.9842],[0.5197,0.9842],[0.5276,0.9842],[0.5355,0.9842],[0.5433,0.9842],[0.5512,0.9842],[0.5591,0.9842],[0.567,0.9842],[0.5748,0.9842],[0.5827,0.9842],[0.5906,0.9842],[0.5984,0.9842],[0.6063,0.9842],[0.6142,0.9842],[0.6221,0.9842],[0.6299,0.9842],[0.6378,0.9842],[0.6457,0.9842],[0.6536,0.9842],[0.6614,0.9842],[0.6693,0.9842],[0.6772,0.9842],[0.6851,0.9842],[0.6929,0.9842],[0.7008,0.9842],[0.7087,0.9842],[0.7166,0.9842],[0.7244,0.9842],[0.7323,0.9842],[0.7402,0.9842],[0.748,0.9842],[0.7559,0.9842],[0.7638,0.9842],[0.7717,0.9842],[0.7795,0.9842],[0.7874,0.9842],[0.7953,0.9842],[0.8032,0.9842],[0.811,0.9842],[0.8189,0.9842],[0.8268,0.9842],[0.8347,0.9842],[0.8425,0.9842],[0.8504,0.9842],[0.8583,0.9842],[0.8662,0.9842],[0.874,0.9842],[0.8819,0.9842],[0.8898,0.9842],[0.8976,0.9842],[0.9055,0.9842],[0.9134,0.9842],[0.9213,0.9842],[0.9291,0.9842],[0.937,0.9842],[0.9449,0.9842],[0.9528,0.9842],[0.9606,0.9842],[0.9685,0.9842],[0.9764,0.9842],[0.9843,0.9842],[0.9921,0.9842],[1,0.9842],[0.0001,0.9763],[0.0079,0.9763],[0.0158,0.9763],[0.0237,0.9763],[0.0316,0.9763],[0.0394,0.9763],[0.0473,0.9763],[0.0552,0.9763],[0.063,0.9763],[0.0709,0.9763],[0.0788,0.9763],[0.0867,0.9763],[0.0945,0.9763],[0.1024,0.9763],[0.1103,0.9763],[0.1182,0.9763],[0.126,0.9763],[0.1339,0.9763],[0.1418,0.9763],[0.1497,0.9763],[0.1575,0.9763],[0.1654,0.9763],[0.1733,0.9763],[0.1812,0.9763],[0.189,0.9763],[0.1969,0.9763],[0.2048,0.9763],[0.2126,0.9763],[0.2205,0.9763],[0.2284,0.9763],[0.2363,0.9763],[0.2441,0.9763],[0.252,0.9763],[0.2599,0.9763],[0.2678,0.9763],[0.2756,0.9763],[0.2835,0.9763],[0.2914,0.9763],[0.2993,0.9763],[0.3071,0.9763],[0.315,0.9763],[0.3229,0.9763],[0.3308,0.9763],[0.3386,0.9763],[0.3465,0.9763],[0.3544,0.9763],[0.3622,0.9763],[0.3701,0.9763],[0.378,0.9763],[0.3859,0.9763],[0.3937,0.9763],[0.4016,0.9763],[0.4095,0.9763],[0.4174,0.9763],[0.4252,0.9763],[0.4331,0.9763],[0.441,0.9763],[0.4489,0.9763],[0.4567,0.9763],[0.4646,0.9763],[0.4725,0.9763],[0.4803,0.9763],[0.4882,0.9763],[0.4961,0.9763],[0.504,0.9763],[0.5118,0.9763],[0.5197,0.9763],[0.5276,0.9763],[0.5355,0.9763],[0.5433,0.9763],[0.5512,0.9763],[0.5591,0.9763],[0.567,0.9763],[0.5748,0.9763],[0.5827,0.9763],[0.5906,0.9763],[0.5984,0.9763],[0.6063,0.9763],[0.6142,0.9763],[0.6221,0.9763],[0.6299,0.9763],[0.6378,0.9763],[0.6457,0.9763],[0.6536,0.9763],[0.6614,0.9763],[0.6693,0.9763],[0.6772,0.9763],[0.6851,0.9763],[0.6929,0.9763],[0.7008,0.9763],[0.7087,0.9763],[0.7166,0.9763],[0.7244,0.9763],[0.7323,0.9763],[0.7402,0.9763],[0.748,0.9763],[0.7559,0.9763],[0.7638,0.9763],[0.7717,0.9763],[0.7795,0.9763],[0.7874,0.9763],[0.7953,0.9763],[0.8032,0.9763],[0.811,0.9763],[0.8189,0.9763],[0.8268,0.9763],[0.8347,0.9763],[0.8425,0.9763],[0.8504,0.9763],[0.8583,0.9763],[0.8662,0.9763],[0.874,0.9763],[0.8819,0.9763],[0.8898,0.9763],[0.8976,0.9763],[0.9055,0.9763],[0.9134,0.9763],[0.9213,0.9763],[0.9291,0.9763],[0.937,0.9763],[0.9449,0.9763],[0.9528,0.9763],[0.9606,0.9763],[0.9685,0.9763],[0.9764,0.9763],[0.9843,0.9763],[0.9921,0.9763],[1,0.9763],[0.0001,0.9684],[0.0079,0.9684],[0.0158,0.9684],[0.0237,0.9684],[0.0316,0.9684],[0.0394,0.9684],[0.0473,0.9684],[0.0552,0.9684],[0.063,0.9684],[0.0709,0.9684],[0.0788,0.9684],[0.0867,0.9684],[0.0945,0.9684],[0.1024,0.9684],[0.1103,0.9684],[0.1182,0.9684],[0.126,0.9684],[0.1339,0.9684],[0.1418,0.9684],[0.1497,0.9684],[0.1575,0.9684],[0.1654,0.9684],[0.1733,0.9684],[0.1812,0.9684],[0.189,0.9684],[0.1969,0.9684],[0.2048,0.9684],[0.2126,0.9684],[0.2205,0.9684],[0.2284,0.9684],[0.2363,0.9684],[0.2441,0.9684],[0.252,0.9684],[0.2599,0.9684],[0.2678,0.9684],[0.2756,0.9684],[0.2835,0.9684],[0.2914,0.9684],[0.2993,0.9684],[0.3071,0.9684],[0.315,0.9684],[0.3229,0.9684],[0.3308,0.9684],[0.3386,0.9684],[0.3465,0.9684],[0.3544,0.9684],[0.3622,0.9684],[0.3701,0.9684],[0.378,0.9684],[0.3859,0.9684],[0.3937,0.9684],[0.4016,0.9684],[0.4095,0.9684],[0.4174,0.9684],[0.4252,0.9684],[0.4331,0.9684],[0.441,0.9684],[0.4489,0.9684],[0.4567,0.9684],[0.4646,0.9684],[0.4725,0.9684],[0.4803,0.9684],[0.4882,0.9684],[0.4961,0.9684],[0.504,0.9684],[0.5118,0.9684],[0.5197,0.9684],[0.5276,0.9684],[0.5355,0.9684],[0.5433,0.9684],[0.5512,0.9684],[0.5591,0.9684],[0.567,0.9684],[0.5748,0.9684],[0.5827,0.9684],[0.5906,0.9684],[0.5984,0.9684],[0.6063,0.9684],[0.6142,0.9684],[0.6221,0.9684],[0.6299,0.9684],[0.6378,0.9684],[0.6457,0.9684],[0.6536,0.9684],[0.6614,0.9684],[0.6693,0.9684],[0.6772,0.9684],[0.6851,0.9684],[0.6929,0.9684],[0.7008,0.9684],[0.7087,0.9684],[0.7166,0.9684],[0.7244,0.9684],[0.7323,0.9684],[0.7402,0.9684],[0.748,0.9684],[0.7559,0.9684],[0.7638,0.9684],[0.7717,0.9684],[0.7795,0.9684],[0.7874,0.9684],[0.7953,0.9684],[0.8032,0.9684],[0.811,0.9684],[0.8189,0.9684],[0.8268,0.9684],[0.8347,0.9684],[0.8425,0.9684],[0.8504,0.9684],[0.8583,0.9684],[0.8662,0.9684],[0.874,0.9684],[0.8819,0.9684],[0.8898,0.9684],[0.8976,0.9684],[0.9055,0.9684],[0.9134,0.9684],[0.9213,0.9684],[0.9291,0.9684],[0.937,0.9684],[0.9449,0.9684],[0.9528,0.9684],[0.9606,0.9684],[0.9685,0.9684],[0.9764,0.9684],[0.9843,0.9684],[0.9921,0.9684],[1,0.9684],[0.0001,0.9606],[0.0079,0.9606],[0.0158,0.9606],[0.0237,0.9606],[0.0316,0.9606],[0.0394,0.9606],[0.0473,0.9606],[0.0552,0.9606],[0.063,0.9606],[0.0709,0.9606],[0.0788,0.9606],[0.0867,0.9606],[0.0945,0.9606],[0.1024,0.9606],[0.1103,0.9606],[0.1182,0.9606],[0.126,0.9606],[0.1339,0.9606],[0.1418,0.9606],[0.1497,0.9606],[0.1575,0.9606],[0.1654,0.9606],[0.1733,0.9606],[0.1812,0.9606],[0.189,0.9606],[0.1969,0.9606],[0.2048,0.9606],[0.2126,0.9606],[0.2205,0.9606],[0.2284,0.9606],[0.2363,0.9606],[0.2441,0.9606],[0.252,0.9606],[0.2599,0.9606],[0.2678,0.9606],[0.2756,0.9606],[0.2835,0.9606],[0.2914,0.9606],[0.2993,0.9606],[0.3071,0.9606],[0.315,0.9606],[0.3229,0.9606],[0.3308,0.9606],[0.3386,0.9606],[0.3465,0.9606],[0.3544,0.9606],[0.3622,0.9606],[0.3701,0.9606],[0.378,0.9606],[0.3859,0.9606],[0.3937,0.9606],[0.4016,0.9606],[0.4095,0.9606],[0.4174,0.9606],[0.4252,0.9606],[0.4331,0.9606],[0.441,0.9606],[0.4489,0.9606],[0.4567,0.9606],[0.4646,0.9606],[0.4725,0.9606],[0.4803,0.9606],[0.4882,0.9606],[0.4961,0.9606],[0.504,0.9606],[0.5118,0.9606],[0.5197,0.9606],[0.5276,0.9606],[0.5355,0.9606],[0.5433,0.9606],[0.5512,0.9606],[0.5591,0.9606],[0.567,0.9606],[0.5748,0.9606],[0.5827,0.9606],[0.5906,0.9606],[0.5984,0.9606],[0.6063,0.9606],[0.6142,0.9606],[0.6221,0.9606],[0.6299,0.9606],[0.6378,0.9606],[0.6457,0.9606],[0.6536,0.9606],[0.6614,0.9606],[0.6693,0.9606],[0.6772,0.9606],[0.6851,0.9606],[0.6929,0.9606],[0.7008,0.9606],[0.7087,0.9606],[0.7166,0.9606],[0.7244,0.9606],[0.7323,0.9606],[0.7402,0.9606],[0.748,0.9606],[0.7559,0.9606],[0.7638,0.9606],[0.7717,0.9606],[0.7795,0.9606],[0.7874,0.9606],[0.7953,0.9606],[0.8032,0.9606],[0.811,0.9606],[0.8189,0.9606],[0.8268,0.9606],[0.8347,0.9606],[0.8425,0.9606],[0.8504,0.9606],[0.8583,0.9606],[0.8662,0.9606],[0.874,0.9606],[0.8819,0.9606],[0.8898,0.9606],[0.8976,0.9606],[0.9055,0.9606],[0.9134,0.9606],[0.9213,0.9606],[0.9291,0.9606],[0.937,0.9606],[0.9449,0.9606],[0.9528,0.9606],[0.9606,0.9606],[0.9685,0.9606],[0.9764,0.9606],[0.9843,0.9606],[0.9921,0.9606],[1,0.9606],[0.0001,0.9527],[0.0079,0.9527],[0.0158,0.9527],[0.0237,0.9527],[0.0316,0.9527],[0.0394,0.9527],[0.0473,0.9527],[0.0552,0.9527],[0.063,0.9527],[0.0709,0.9527],[0.0788,0.9527],[0.0867,0.9527],[0.0945,0.9527],[0.1024,0.9527],[0.1103,0.9527],[0.1182,0.9527],[0.126,0.9527],[0.1339,0.9527],[0.1418,0.9527],[0.1497,0.9527],[0.1575,0.9527],[0.1654,0.9527],[0.1733,0.9527],[0.1812,0.9527],[0.189,0.9527],[0.1969,0.9527],[0.2048,0.9527],[0.2126,0.9527],[0.2205,0.9527],[0.2284,0.9527],[0.2363,0.9527],[0.2441,0.9527],[0.252,0.9527],[0.2599,0.9527],[0.2678,0.9527],[0.2756,0.9527],[0.2835,0.9527],[0.2914,0.9527],[0.2993,0.9527],[0.3071,0.9527],[0.315,0.9527],[0.3229,0.9527],[0.3308,0.9527],[0.3386,0.9527],[0.3465,0.9527],[0.3544,0.9527],[0.3622,0.9527],[0.3701,0.9527],[0.378,0.9527],[0.3859,0.9527],[0.3937,0.9527],[0.4016,0.9527],[0.4095,0.9527],[0.4174,0.9527],[0.4252,0.9527],[0.4331,0.9527],[0.441,0.9527],[0.4489,0.9527],[0.4567,0.9527],[0.4646,0.9527],[0.4725,0.9527],[0.4803,0.9527],[0.4882,0.9527],[0.4961,0.9527],[0.504,0.9527],[0.5118,0.9527],[0.5197,0.9527],[0.5276,0.9527],[0.5355,0.9527],[0.5433,0.9527],[0.5512,0.9527],[0.5591,0.9527],[0.567,0.9527],[0.5748,0.9527],[0.5827,0.9527],[0.5906,0.9527],[0.5984,0.9527],[0.6063,0.9527],[0.6142,0.9527],[0.6221,0.9527],[0.6299,0.9527],[0.6378,0.9527],[0.6457,0.9527],[0.6536,0.9527],[0.6614,0.9527],[0.6693,0.9527],[0.6772,0.9527],[0.6851,0.9527],[0.6929,0.9527],[0.7008,0.9527],[0.7087,0.9527],[0.7166,0.9527],[0.7244,0.9527],[0.7323,0.9527],[0.7402,0.9527],[0.748,0.9527],[0.7559,0.9527],[0.7638,0.9527],[0.7717,0.9527],[0.7795,0.9527],[0.7874,0.9527],[0.7953,0.9527],[0.8032,0.9527],[0.811,0.9527],[0.8189,0.9527],[0.8268,0.9527],[0.8347,0.9527],[0.8425,0.9527],[0.8504,0.9527],[0.8583,0.9527],[0.8662,0.9527],[0.874,0.9527],[0.8819,0.9527],[0.8898,0.9527],[0.8976,0.9527],[0.9055,0.9527],[0.9134,0.9527],[0.9213,0.9527],[0.9291,0.9527],[0.937,0.9527],[0.9449,0.9527],[0.9528,0.9527],[0.9606,0.9527],[0.9685,0.9527],[0.9764,0.9527],[0.9843,0.9527],[0.9921,0.9527],[1,0.9527],[0.0001,0.9448],[0.0079,0.9448],[0.0158,0.9448],[0.0237,0.9448],[0.0316,0.9448],[0.0394,0.9448],[0.0473,0.9448],[0.0552,0.9448],[0.063,0.9448],[0.0709,0.9448],[0.0788,0.9448],[0.0867,0.9448],[0.0945,0.9448],[0.1024,0.9448],[0.1103,0.9448],[0.1182,0.9448],[0.126,0.9448],[0.1339,0.9448],[0.1418,0.9448],[0.1497,0.9448],[0.1575,0.9448],[0.1654,0.9448],[0.1733,0.9448],[0.1812,0.9448],[0.189,0.9448],[0.1969,0.9448],[0.2048,0.9448],[0.2126,0.9448],[0.2205,0.9448],[0.2284,0.9448],[0.2363,0.9448],[0.2441,0.9448],[0.252,0.9448],[0.2599,0.9448],[0.2678,0.9448],[0.2756,0.9448],[0.2835,0.9448],[0.2914,0.9448],[0.2993,0.9448],[0.3071,0.9448],[0.315,0.9448],[0.3229,0.9448],[0.3308,0.9448],[0.3386,0.9448],[0.3465,0.9448],[0.3544,0.9448],[0.3622,0.9448],[0.3701,0.9448],[0.378,0.9448],[0.3859,0.9448],[0.3937,0.9448],[0.4016,0.9448],[0.4095,0.9448],[0.4174,0.9448],[0.4252,0.9448],[0.4331,0.9448],[0.441,0.9448],[0.4489,0.9448],[0.4567,0.9448],[0.4646,0.9448],[0.4725,0.9448],[0.4803,0.9448],[0.4882,0.9448],[0.4961,0.9448],[0.504,0.9448],[0.5118,0.9448],[0.5197,0.9448],[0.5276,0.9448],[0.5355,0.9448],[0.5433,0.9448],[0.5512,0.9448],[0.5591,0.9448],[0.567,0.9448],[0.5748,0.9448],[0.5827,0.9448],[0.5906,0.9448],[0.5984,0.9448],[0.6063,0.9448],[0.6142,0.9448],[0.6221,0.9448],[0.6299,0.9448],[0.6378,0.9448],[0.6457,0.9448],[0.6536,0.9448],[0.6614,0.9448],[0.6693,0.9448],[0.6772,0.9448],[0.6851,0.9448],[0.6929,0.9448],[0.7008,0.9448],[0.7087,0.9448],[0.7166,0.9448],[0.7244,0.9448],[0.7323,0.9448],[0.7402,0.9448],[0.748,0.9448],[0.7559,0.9448],[0.7638,0.9448],[0.7717,0.9448],[0.7795,0.9448],[0.7874,0.9448],[0.7953,0.9448],[0.8032,0.9448],[0.811,0.9448],[0.8189,0.9448],[0.8268,0.9448],[0.8347,0.9448],[0.8425,0.9448],[0.8504,0.9448],[0.8583,0.9448],[0.8662,0.9448],[0.874,0.9448],[0.8819,0.9448],[0.8898,0.9448],[0.8976,0.9448],[0.9055,0.9448],[0.9134,0.9448],[0.9213,0.9448],[0.9291,0.9448],[0.937,0.9448],[0.9449,0.9448],[0.9528,0.9448],[0.9606,0.9448],[0.9685,0.9448],[0.9764,0.9448],[0.9843,0.9448],[0.9921,0.9448],[1,0.9448],[0.0001,0.937],[0.0079,0.937],[0.0158,0.937],[0.0237,0.937],[0.0316,0.937],[0.0394,0.937],[0.0473,0.937],[0.0552,0.937],[0.063,0.937],[0.0709,0.937],[0.0788,0.937],[0.0867,0.937],[0.0945,0.937],[0.1024,0.937],[0.1103,0.937],[0.1182,0.937],[0.126,0.937],[0.1339,0.937],[0.1418,0.937],[0.1497,0.937],[0.1575,0.937],[0.1654,0.937],[0.1733,0.937],[0.1812,0.937],[0.189,0.937],[0.1969,0.937],[0.2048,0.937],[0.2126,0.937],[0.2205,0.937],[0.2284,0.937],[0.2363,0.937],[0.2441,0.937],[0.252,0.937],[0.2599,0.937],[0.2678,0.937],[0.2756,0.937],[0.2835,0.937],[0.2914,0.937],[0.2993,0.937],[0.3071,0.937],[0.315,0.937],[0.3229,0.937],[0.3308,0.937],[0.3386,0.937],[0.3465,0.937],[0.3544,0.937],[0.3622,0.937],[0.3701,0.937],[0.378,0.937],[0.3859,0.937],[0.3937,0.937],[0.4016,0.937],[0.4095,0.937],[0.4174,0.937],[0.4252,0.937],[0.4331,0.937],[0.441,0.937],[0.4489,0.937],[0.4567,0.937],[0.4646,0.937],[0.4725,0.937],[0.4803,0.937],[0.4882,0.937],[0.4961,0.937],[0.504,0.937],[0.5118,0.937],[0.5197,0.937],[0.5276,0.937],[0.5355,0.937],[0.5433,0.937],[0.5512,0.937],[0.5591,0.937],[0.567,0.937],[0.5748,0.937],[0.5827,0.937],[0.5906,0.937],[0.5984,0.937],[0.6063,0.937],[0.6142,0.937],[0.6221,0.937],[0.6299,0.937],[0.6378,0.937],[0.6457,0.937],[0.6536,0.937],[0.6614,0.937],[0.6693,0.937],[0.6772,0.937],[0.6851,0.937],[0.6929,0.937],[0.7008,0.937],[0.7087,0.937],[0.7166,0.937],[0.7244,0.937],[0.7323,0.937],[0.7402,0.937],[0.748,0.937],[0.7559,0.937],[0.7638,0.937],[0.7717,0.937],[0.7795,0.937],[0.7874,0.937],[0.7953,0.937],[0.8032,0.937],[0.811,0.937],[0.8189,0.937],[0.8268,0.937],[0.8347,0.937],[0.8425,0.937],[0.8504,0.937],[0.8583,0.937],[0.8662,0.937],[0.874,0.937],[0.8819,0.937],[0.8898,0.937],[0.8976,0.937],[0.9055,0.937],[0.9134,0.937],[0.9213,0.937],[0.9291,0.937],[0.937,0.937],[0.9449,0.937],[0.9528,0.937],[0.9606,0.937],[0.9685,0.937],[0.9764,0.937],[0.9843,0.937],[0.9921,0.937],[1,0.937],[0.0001,0.9291],[0.0079,0.9291],[0.0158,0.9291],[0.0237,0.9291],[0.0316,0.9291],[0.0394,0.9291],[0.0473,0.9291],[0.0552,0.9291],[0.063,0.9291],[0.0709,0.9291],[0.0788,0.9291],[0.0867,0.9291],[0.0945,0.9291],[0.1024,0.9291],[0.1103,0.9291],[0.1182,0.9291],[0.126,0.9291],[0.1339,0.9291],[0.1418,0.9291],[0.1497,0.9291],[0.1575,0.9291],[0.1654,0.9291],[0.1733,0.9291],[0.1812,0.9291],[0.189,0.9291],[0.1969,0.9291],[0.2048,0.9291],[0.2126,0.9291],[0.2205,0.9291],[0.2284,0.9291],[0.2363,0.9291],[0.2441,0.9291],[0.252,0.9291],[0.2599,0.9291],[0.2678,0.9291],[0.2756,0.9291],[0.2835,0.9291],[0.2914,0.9291],[0.2993,0.9291],[0.3071,0.9291],[0.315,0.9291],[0.3229,0.9291],[0.3308,0.9291],[0.3386,0.9291],[0.3465,0.9291],[0.3544,0.9291],[0.3622,0.9291],[0.3701,0.9291],[0.378,0.9291],[0.3859,0.9291],[0.3937,0.9291],[0.4016,0.9291],[0.4095,0.9291],[0.4174,0.9291],[0.4252,0.9291],[0.4331,0.9291],[0.441,0.9291],[0.4489,0.9291],[0.4567,0.9291],[0.4646,0.9291],[0.4725,0.9291],[0.4803,0.9291],[0.4882,0.9291],[0.4961,0.9291],[0.504,0.9291],[0.5118,0.9291],[0.5197,0.9291],[0.5276,0.9291],[0.5355,0.9291],[0.5433,0.9291],[0.5512,0.9291],[0.5591,0.9291],[0.567,0.9291],[0.5748,0.9291],[0.5827,0.9291],[0.5906,0.9291],[0.5984,0.9291],[0.6063,0.9291],[0.6142,0.9291],[0.6221,0.9291],[0.6299,0.9291],[0.6378,0.9291],[0.6457,0.9291],[0.6536,0.9291],[0.6614,0.9291],[0.6693,0.9291],[0.6772,0.9291],[0.6851,0.9291],[0.6929,0.9291],[0.7008,0.9291],[0.7087,0.9291],[0.7166,0.9291],[0.7244,0.9291],[0.7323,0.9291],[0.7402,0.9291],[0.748,0.9291],[0.7559,0.9291],[0.7638,0.9291],[0.7717,0.9291],[0.7795,0.9291],[0.7874,0.9291],[0.7953,0.9291],[0.8032,0.9291],[0.811,0.9291],[0.8189,0.9291],[0.8268,0.9291],[0.8347,0.9291],[0.8425,0.9291],[0.8504,0.9291],[0.8583,0.9291],[0.8662,0.9291],[0.874,0.9291],[0.8819,0.9291],[0.8898,0.9291],[0.8976,0.9291],[0.9055,0.9291],[0.9134,0.9291],[0.9213,0.9291],[0.9291,0.9291],[0.937,0.9291],[0.9449,0.9291],[0.9528,0.9291],[0.9606,0.9291],[0.9685,0.9291],[0.9764,0.9291],[0.9843,0.9291],[0.9921,0.9291],[1,0.9291],[0.0001,0.9212],[0.0079,0.9212],[0.0158,0.9212],[0.0237,0.9212],[0.0316,0.9212],[0.0394,0.9212],[0.0473,0.9212],[0.0552,0.9212],[0.063,0.9212],[0.0709,0.9212],[0.0788,0.9212],[0.0867,0.9212],[0.0945,0.9212],[0.1024,0.9212],[0.1103,0.9212],[0.1182,0.9212],[0.126,0.9212],[0.1339,0.9212],[0.1418,0.9212],[0.1497,0.9212],[0.1575,0.9212],[0.1654,0.9212],[0.1733,0.9212],[0.1812,0.9212],[0.189,0.9212],[0.1969,0.9212],[0.2048,0.9212],[0.2126,0.9212],[0.2205,0.9212],[0.2284,0.9212],[0.2363,0.9212],[0.2441,0.9212],[0.252,0.9212],[0.2599,0.9212],[0.2678,0.9212],[0.2756,0.9212],[0.2835,0.9212],[0.2914,0.9212],[0.2993,0.9212],[0.3071,0.9212],[0.315,0.9212],[0.3229,0.9212],[0.3308,0.9212],[0.3386,0.9212],[0.3465,0.9212],[0.3544,0.9212],[0.3622,0.9212],[0.3701,0.9212],[0.378,0.9212],[0.3859,0.9212],[0.3937,0.9212],[0.4016,0.9212],[0.4095,0.9212],[0.4174,0.9212],[0.4252,0.9212],[0.4331,0.9212],[0.441,0.9212],[0.4489,0.9212],[0.4567,0.9212],[0.4646,0.9212],[0.4725,0.9212],[0.4803,0.9212],[0.4882,0.9212],[0.4961,0.9212],[0.504,0.9212],[0.5118,0.9212],[0.5197,0.9212],[0.5276,0.9212],[0.5355,0.9212],[0.5433,0.9212],[0.5512,0.9212],[0.5591,0.9212],[0.567,0.9212],[0.5748,0.9212],[0.5827,0.9212],[0.5906,0.9212],[0.5984,0.9212],[0.6063,0.9212],[0.6142,0.9212],[0.6221,0.9212],[0.6299,0.9212],[0.6378,0.9212],[0.6457,0.9212],[0.6536,0.9212],[0.6614,0.9212],[0.6693,0.9212],[0.6772,0.9212],[0.6851,0.9212],[0.6929,0.9212],[0.7008,0.9212],[0.7087,0.9212],[0.7166,0.9212],[0.7244,0.9212],[0.7323,0.9212],[0.7402,0.9212],[0.748,0.9212],[0.7559,0.9212],[0.7638,0.9212],[0.7717,0.9212],[0.7795,0.9212],[0.7874,0.9212],[0.7953,0.9212],[0.8032,0.9212],[0.811,0.9212],[0.8189,0.9212],[0.8268,0.9212],[0.8347,0.9212],[0.8425,0.9212],[0.8504,0.9212],[0.8583,0.9212],[0.8662,0.9212],[0.874,0.9212],[0.8819,0.9212],[0.8898,0.9212],[0.8976,0.9212],[0.9055,0.9212],[0.9134,0.9212],[0.9213,0.9212],[0.9291,0.9212],[0.937,0.9212],[0.9449,0.9212],[0.9528,0.9212],[0.9606,0.9212],[0.9685,0.9212],[0.9764,0.9212],[0.9843,0.9212],[0.9921,0.9212],[1,0.9212],[0.0001,0.9133],[0.0079,0.9133],[0.0158,0.9133],[0.0237,0.9133],[0.0316,0.9133],[0.0394,0.9133],[0.0473,0.9133],[0.0552,0.9133],[0.063,0.9133],[0.0709,0.9133],[0.0788,0.9133],[0.0867,0.9133],[0.0945,0.9133],[0.1024,0.9133],[0.1103,0.9133],[0.1182,0.9133],[0.126,0.9133],[0.1339,0.9133],[0.1418,0.9133],[0.1497,0.9133],[0.1575,0.9133],[0.1654,0.9133],[0.1733,0.9133],[0.1812,0.9133],[0.189,0.9133],[0.1969,0.9133],[0.2048,0.9133],[0.2126,0.9133],[0.2205,0.9133],[0.2284,0.9133],[0.2363,0.9133],[0.2441,0.9133],[0.252,0.9133],[0.2599,0.9133],[0.2678,0.9133],[0.2756,0.9133],[0.2835,0.9133],[0.2914,0.9133],[0.2993,0.9133],[0.3071,0.9133],[0.315,0.9133],[0.3229,0.9133],[0.3308,0.9133],[0.3386,0.9133],[0.3465,0.9133],[0.3544,0.9133],[0.3622,0.9133],[0.3701,0.9133],[0.378,0.9133],[0.3859,0.9133],[0.3937,0.9133],[0.4016,0.9133],[0.4095,0.9133],[0.4174,0.9133],[0.4252,0.9133],[0.4331,0.9133],[0.441,0.9133],[0.4489,0.9133],[0.4567,0.9133],[0.4646,0.9133],[0.4725,0.9133],[0.4803,0.9133],[0.4882,0.9133],[0.4961,0.9133],[0.504,0.9133],[0.5118,0.9133],[0.5197,0.9133],[0.5276,0.9133],[0.5355,0.9133],[0.5433,0.9133],[0.5512,0.9133],[0.5591,0.9133],[0.567,0.9133],[0.5748,0.9133],[0.5827,0.9133],[0.5906,0.9133],[0.5984,0.9133],[0.6063,0.9133],[0.6142,0.9133],[0.6221,0.9133],[0.6299,0.9133],[0.6378,0.9133],[0.6457,0.9133],[0.6536,0.9133],[0.6614,0.9133],[0.6693,0.9133],[0.6772,0.9133],[0.6851,0.9133],[0.6929,0.9133],[0.7008,0.9133],[0.7087,0.9133],[0.7166,0.9133],[0.7244,0.9133],[0.7323,0.9133],[0.7402,0.9133],[0.748,0.9133],[0.7559,0.9133],[0.7638,0.9133],[0.7717,0.9133],[0.7795,0.9133],[0.7874,0.9133],[0.7953,0.9133],[0.8032,0.9133],[0.811,0.9133],[0.8189,0.9133],[0.8268,0.9133],[0.8347,0.9133],[0.8425,0.9133],[0.8504,0.9133],[0.8583,0.9133],[0.8662,0.9133],[0.874,0.9133],[0.8819,0.9133],[0.8898,0.9133],[0.8976,0.9133],[0.9055,0.9133],[0.9134,0.9133],[0.9213,0.9133],[0.9291,0.9133],[0.937,0.9133],[0.9449,0.9133],[0.9528,0.9133],[0.9606,0.9133],[0.9685,0.9133],[0.9764,0.9133],[0.9843,0.9133],[0.9921,0.9133],[1,0.9133],[0.0001,0.9055],[0.0079,0.9055],[0.0158,0.9055],[0.0237,0.9055],[0.0316,0.9055],[0.0394,0.9055],[0.0473,0.9055],[0.0552,0.9055],[0.063,0.9055],[0.0709,0.9055],[0.0788,0.9055],[0.0867,0.9055],[0.0945,0.9055],[0.1024,0.9055],[0.1103,0.9055],[0.1182,0.9055],[0.126,0.9055],[0.1339,0.9055],[0.1418,0.9055],[0.1497,0.9055],[0.1575,0.9055],[0.1654,0.9055],[0.1733,0.9055],[0.1812,0.9055],[0.189,0.9055],[0.1969,0.9055],[0.2048,0.9055],[0.2126,0.9055],[0.2205,0.9055],[0.2284,0.9055],[0.2363,0.9055],[0.2441,0.9055],[0.252,0.9055],[0.2599,0.9055],[0.2678,0.9055],[0.2756,0.9055],[0.2835,0.9055],[0.2914,0.9055],[0.2993,0.9055],[0.3071,0.9055],[0.315,0.9055],[0.3229,0.9055],[0.3308,0.9055],[0.3386,0.9055],[0.3465,0.9055],[0.3544,0.9055],[0.3622,0.9055],[0.3701,0.9055],[0.378,0.9055],[0.3859,0.9055],[0.3937,0.9055],[0.4016,0.9055],[0.4095,0.9055],[0.4174,0.9055],[0.4252,0.9055],[0.4331,0.9055],[0.441,0.9055],[0.4489,0.9055],[0.4567,0.9055],[0.4646,0.9055],[0.4725,0.9055],[0.4803,0.9055],[0.4882,0.9055],[0.4961,0.9055],[0.504,0.9055],[0.5118,0.9055],[0.5197,0.9055],[0.5276,0.9055],[0.5355,0.9055],[0.5433,0.9055],[0.5512,0.9055],[0.5591,0.9055],[0.567,0.9055],[0.5748,0.9055],[0.5827,0.9055],[0.5906,0.9055],[0.5984,0.9055],[0.6063,0.9055],[0.6142,0.9055],[0.6221,0.9055],[0.6299,0.9055],[0.6378,0.9055],[0.6457,0.9055],[0.6536,0.9055],[0.6614,0.9055],[0.6693,0.9055],[0.6772,0.9055],[0.6851,0.9055],[0.6929,0.9055],[0.7008,0.9055],[0.7087,0.9055],[0.7166,0.9055],[0.7244,0.9055],[0.7323,0.9055],[0.7402,0.9055],[0.748,0.9055],[0.7559,0.9055],[0.7638,0.9055],[0.7717,0.9055],[0.7795,0.9055],[0.7874,0.9055],[0.7953,0.9055],[0.8032,0.9055],[0.811,0.9055],[0.8189,0.9055],[0.8268,0.9055],[0.8347,0.9055],[0.8425,0.9055],[0.8504,0.9055],[0.8583,0.9055],[0.8662,0.9055],[0.874,0.9055],[0.8819,0.9055],[0.8898,0.9055],[0.8976,0.9055],[0.9055,0.9055],[0.9134,0.9055],[0.9213,0.9055],[0.9291,0.9055],[0.937,0.9055],[0.9449,0.9055],[0.9528,0.9055],[0.9606,0.9055],[0.9685,0.9055],[0.9764,0.9055],[0.9843,0.9055],[0.9921,0.9055],[1,0.9055],[0.0001,0.8976],[0.0079,0.8976],[0.0158,0.8976],[0.0237,0.8976],[0.0316,0.8976],[0.0394,0.8976],[0.0473,0.8976],[0.0552,0.8976],[0.063,0.8976],[0.0709,0.8976],[0.0788,0.8976],[0.0867,0.8976],[0.0945,0.8976],[0.1024,0.8976],[0.1103,0.8976],[0.1182,0.8976],[0.126,0.8976],[0.1339,0.8976],[0.1418,0.8976],[0.1497,0.8976],[0.1575,0.8976],[0.1654,0.8976],[0.1733,0.8976],[0.1812,0.8976],[0.189,0.8976],[0.1969,0.8976],[0.2048,0.8976],[0.2126,0.8976],[0.2205,0.8976],[0.2284,0.8976],[0.2363,0.8976],[0.2441,0.8976],[0.252,0.8976],[0.2599,0.8976],[0.2678,0.8976],[0.2756,0.8976],[0.2835,0.8976],[0.2914,0.8976],[0.2993,0.8976],[0.3071,0.8976],[0.315,0.8976],[0.3229,0.8976],[0.3308,0.8976],[0.3386,0.8976],[0.3465,0.8976],[0.3544,0.8976],[0.3622,0.8976],[0.3701,0.8976],[0.378,0.8976],[0.3859,0.8976],[0.3937,0.8976],[0.4016,0.8976],[0.4095,0.8976],[0.4174,0.8976],[0.4252,0.8976],[0.4331,0.8976],[0.441,0.8976],[0.4489,0.8976],[0.4567,0.8976],[0.4646,0.8976],[0.4725,0.8976],[0.4803,0.8976],[0.4882,0.8976],[0.4961,0.8976],[0.504,0.8976],[0.5118,0.8976],[0.5197,0.8976],[0.5276,0.8976],[0.5355,0.8976],[0.5433,0.8976],[0.5512,0.8976],[0.5591,0.8976],[0.567,0.8976],[0.5748,0.8976],[0.5827,0.8976],[0.5906,0.8976],[0.5984,0.8976],[0.6063,0.8976],[0.6142,0.8976],[0.6221,0.8976],[0.6299,0.8976],[0.6378,0.8976],[0.6457,0.8976],[0.6536,0.8976],[0.6614,0.8976],[0.6693,0.8976],[0.6772,0.8976],[0.6851,0.8976],[0.6929,0.8976],[0.7008,0.8976],[0.7087,0.8976],[0.7166,0.8976],[0.7244,0.8976],[0.7323,0.8976],[0.7402,0.8976],[0.748,0.8976],[0.7559,0.8976],[0.7638,0.8976],[0.7717,0.8976],[0.7795,0.8976],[0.7874,0.8976],[0.7953,0.8976],[0.8032,0.8976],[0.811,0.8976],[0.8189,0.8976],[0.8268,0.8976],[0.8347,0.8976],[0.8425,0.8976],[0.8504,0.8976],[0.8583,0.8976],[0.8662,0.8976],[0.874,0.8976],[0.8819,0.8976],[0.8898,0.8976],[0.8976,0.8976],[0.9055,0.8976],[0.9134,0.8976],[0.9213,0.8976],[0.9291,0.8976],[0.937,0.8976],[0.9449,0.8976],[0.9528,0.8976],[0.9606,0.8976],[0.9685,0.8976],[0.9764,0.8976],[0.9843,0.8976],[0.9921,0.8976],[1,0.8976],[0.0001,0.8897],[0.0079,0.8897],[0.0158,0.8897],[0.0237,0.8897],[0.0316,0.8897],[0.0394,0.8897],[0.0473,0.8897],[0.0552,0.8897],[0.063,0.8897],[0.0709,0.8897],[0.0788,0.8897],[0.0867,0.8897],[0.0945,0.8897],[0.1024,0.8897],[0.1103,0.8897],[0.1182,0.8897],[0.126,0.8897],[0.1339,0.8897],[0.1418,0.8897],[0.1497,0.8897],[0.1575,0.8897],[0.1654,0.8897],[0.1733,0.8897],[0.1812,0.8897],[0.189,0.8897],[0.1969,0.8897],[0.2048,0.8897],[0.2126,0.8897],[0.2205,0.8897],[0.2284,0.8897],[0.2363,0.8897],[0.2441,0.8897],[0.252,0.8897],[0.2599,0.8897],[0.2678,0.8897],[0.2756,0.8897],[0.2835,0.8897],[0.2914,0.8897],[0.2993,0.8897],[0.3071,0.8897],[0.315,0.8897],[0.3229,0.8897],[0.3308,0.8897],[0.3386,0.8897],[0.3465,0.8897],[0.3544,0.8897],[0.3622,0.8897],[0.3701,0.8897],[0.378,0.8897],[0.3859,0.8897],[0.3937,0.8897],[0.4016,0.8897],[0.4095,0.8897],[0.4174,0.8897],[0.4252,0.8897],[0.4331,0.8897],[0.441,0.8897],[0.4489,0.8897],[0.4567,0.8897],[0.4646,0.8897],[0.4725,0.8897],[0.4803,0.8897],[0.4882,0.8897],[0.4961,0.8897],[0.504,0.8897],[0.5118,0.8897],[0.5197,0.8897],[0.5276,0.8897],[0.5355,0.8897],[0.5433,0.8897],[0.5512,0.8897],[0.5591,0.8897],[0.567,0.8897],[0.5748,0.8897],[0.5827,0.8897],[0.5906,0.8897],[0.5984,0.8897],[0.6063,0.8897],[0.6142,0.8897],[0.6221,0.8897],[0.6299,0.8897],[0.6378,0.8897],[0.6457,0.8897],[0.6536,0.8897],[0.6614,0.8897],[0.6693,0.8897],[0.6772,0.8897],[0.6851,0.8897],[0.6929,0.8897],[0.7008,0.8897],[0.7087,0.8897],[0.7166,0.8897],[0.7244,0.8897],[0.7323,0.8897],[0.7402,0.8897],[0.748,0.8897],[0.7559,0.8897],[0.7638,0.8897],[0.7717,0.8897],[0.7795,0.8897],[0.7874,0.8897],[0.7953,0.8897],[0.8032,0.8897],[0.811,0.8897],[0.8189,0.8897],[0.8268,0.8897],[0.8347,0.8897],[0.8425,0.8897],[0.8504,0.8897],[0.8583,0.8897],[0.8662,0.8897],[0.874,0.8897],[0.8819,0.8897],[0.8898,0.8897],[0.8976,0.8897],[0.9055,0.8897],[0.9134,0.8897],[0.9213,0.8897],[0.9291,0.8897],[0.937,0.8897],[0.9449,0.8897],[0.9528,0.8897],[0.9606,0.8897],[0.9685,0.8897],[0.9764,0.8897],[0.9843,0.8897],[0.9921,0.8897],[1,0.8897],[0.0001,0.8818],[0.0079,0.8818],[0.0158,0.8818],[0.0237,0.8818],[0.0316,0.8818],[0.0394,0.8818],[0.0473,0.8818],[0.0552,0.8818],[0.063,0.8818],[0.0709,0.8818],[0.0788,0.8818],[0.0867,0.8818],[0.0945,0.8818],[0.1024,0.8818],[0.1103,0.8818],[0.1182,0.8818],[0.126,0.8818],[0.1339,0.8818],[0.1418,0.8818],[0.1497,0.8818],[0.1575,0.8818],[0.1654,0.8818],[0.1733,0.8818],[0.1812,0.8818],[0.189,0.8818],[0.1969,0.8818],[0.2048,0.8818],[0.2126,0.8818],[0.2205,0.8818],[0.2284,0.8818],[0.2363,0.8818],[0.2441,0.8818],[0.252,0.8818],[0.2599,0.8818],[0.2678,0.8818],[0.2756,0.8818],[0.2835,0.8818],[0.2914,0.8818],[0.2993,0.8818],[0.3071,0.8818],[0.315,0.8818],[0.3229,0.8818],[0.3308,0.8818],[0.3386,0.8818],[0.3465,0.8818],[0.3544,0.8818],[0.3622,0.8818],[0.3701,0.8818],[0.378,0.8818],[0.3859,0.8818],[0.3937,0.8818],[0.4016,0.8818],[0.4095,0.8818],[0.4174,0.8818],[0.4252,0.8818],[0.4331,0.8818],[0.441,0.8818],[0.4489,0.8818],[0.4567,0.8818],[0.4646,0.8818],[0.4725,0.8818],[0.4803,0.8818],[0.4882,0.8818],[0.4961,0.8818],[0.504,0.8818],[0.5118,0.8818],[0.5197,0.8818],[0.5276,0.8818],[0.5355,0.8818],[0.5433,0.8818],[0.5512,0.8818],[0.5591,0.8818],[0.567,0.8818],[0.5748,0.8818],[0.5827,0.8818],[0.5906,0.8818],[0.5984,0.8818],[0.6063,0.8818],[0.6142,0.8818],[0.6221,0.8818],[0.6299,0.8818],[0.6378,0.8818],[0.6457,0.8818],[0.6536,0.8818],[0.6614,0.8818],[0.6693,0.8818],[0.6772,0.8818],[0.6851,0.8818],[0.6929,0.8818],[0.7008,0.8818],[0.7087,0.8818],[0.7166,0.8818],[0.7244,0.8818],[0.7323,0.8818],[0.7402,0.8818],[0.748,0.8818],[0.7559,0.8818],[0.7638,0.8818],[0.7717,0.8818],[0.7795,0.8818],[0.7874,0.8818],[0.7953,0.8818],[0.8032,0.8818],[0.811,0.8818],[0.8189,0.8818],[0.8268,0.8818],[0.8347,0.8818],[0.8425,0.8818],[0.8504,0.8818],[0.8583,0.8818],[0.8662,0.8818],[0.874,0.8818],[0.8819,0.8818],[0.8898,0.8818],[0.8976,0.8818],[0.9055,0.8818],[0.9134,0.8818],[0.9213,0.8818],[0.9291,0.8818],[0.937,0.8818],[0.9449,0.8818],[0.9528,0.8818],[0.9606,0.8818],[0.9685,0.8818],[0.9764,0.8818],[0.9843,0.8818],[0.9921,0.8818],[1,0.8818],[0.0001,0.874],[0.0079,0.874],[0.0158,0.874],[0.0237,0.874],[0.0316,0.874],[0.0394,0.874],[0.0473,0.874],[0.0552,0.874],[0.063,0.874],[0.0709,0.874],[0.0788,0.874],[0.0867,0.874],[0.0945,0.874],[0.1024,0.874],[0.1103,0.874],[0.1182,0.874],[0.126,0.874],[0.1339,0.874],[0.1418,0.874],[0.1497,0.874],[0.1575,0.874],[0.1654,0.874],[0.1733,0.874],[0.1812,0.874],[0.189,0.874],[0.1969,0.874],[0.2048,0.874],[0.2126,0.874],[0.2205,0.874],[0.2284,0.874],[0.2363,0.874],[0.2441,0.874],[0.252,0.874],[0.2599,0.874],[0.2678,0.874],[0.2756,0.874],[0.2835,0.874],[0.2914,0.874],[0.2993,0.874],[0.3071,0.874],[0.315,0.874],[0.3229,0.874],[0.3308,0.874],[0.3386,0.874],[0.3465,0.874],[0.3544,0.874],[0.3622,0.874],[0.3701,0.874],[0.378,0.874],[0.3859,0.874],[0.3937,0.874],[0.4016,0.874],[0.4095,0.874],[0.4174,0.874],[0.4252,0.874],[0.4331,0.874],[0.441,0.874],[0.4489,0.874],[0.4567,0.874],[0.4646,0.874],[0.4725,0.874],[0.4803,0.874],[0.4882,0.874],[0.4961,0.874],[0.504,0.874],[0.5118,0.874],[0.5197,0.874],[0.5276,0.874],[0.5355,0.874],[0.5433,0.874],[0.5512,0.874],[0.5591,0.874],[0.567,0.874],[0.5748,0.874],[0.5827,0.874],[0.5906,0.874],[0.5984,0.874],[0.6063,0.874],[0.6142,0.874],[0.6221,0.874],[0.6299,0.874],[0.6378,0.874],[0.6457,0.874],[0.6536,0.874],[0.6614,0.874],[0.6693,0.874],[0.6772,0.874],[0.6851,0.874],[0.6929,0.874],[0.7008,0.874],[0.7087,0.874],[0.7166,0.874],[0.7244,0.874],[0.7323,0.874],[0.7402,0.874],[0.748,0.874],[0.7559,0.874],[0.7638,0.874],[0.7717,0.874],[0.7795,0.874],[0.7874,0.874],[0.7953,0.874],[0.8032,0.874],[0.811,0.874],[0.8189,0.874],[0.8268,0.874],[0.8347,0.874],[0.8425,0.874],[0.8504,0.874],[0.8583,0.874],[0.8662,0.874],[0.874,0.874],[0.8819,0.874],[0.8898,0.874],[0.8976,0.874],[0.9055,0.874],[0.9134,0.874],[0.9213,0.874],[0.9291,0.874],[0.937,0.874],[0.9449,0.874],[0.9528,0.874],[0.9606,0.874],[0.9685,0.874],[0.9764,0.874],[0.9843,0.874],[0.9921,0.874],[1,0.874],[0.0001,0.8661],[0.0079,0.8661],[0.0158,0.8661],[0.0237,0.8661],[0.0316,0.8661],[0.0394,0.8661],[0.0473,0.8661],[0.0552,0.8661],[0.063,0.8661],[0.0709,0.8661],[0.0788,0.8661],[0.0867,0.8661],[0.0945,0.8661],[0.1024,0.8661],[0.1103,0.8661],[0.1182,0.8661],[0.126,0.8661],[0.1339,0.8661],[0.1418,0.8661],[0.1497,0.8661],[0.1575,0.8661],[0.1654,0.8661],[0.1733,0.8661],[0.1812,0.8661],[0.189,0.8661],[0.1969,0.8661],[0.2048,0.8661],[0.2126,0.8661],[0.2205,0.8661],[0.2284,0.8661],[0.2363,0.8661],[0.2441,0.8661],[0.252,0.8661],[0.2599,0.8661],[0.2678,0.8661],[0.2756,0.8661],[0.2835,0.8661],[0.2914,0.8661],[0.2993,0.8661],[0.3071,0.8661],[0.315,0.8661],[0.3229,0.8661],[0.3308,0.8661],[0.3386,0.8661],[0.3465,0.8661],[0.3544,0.8661],[0.3622,0.8661],[0.3701,0.8661],[0.378,0.8661],[0.3859,0.8661],[0.3937,0.8661],[0.4016,0.8661],[0.4095,0.8661],[0.4174,0.8661],[0.4252,0.8661],[0.4331,0.8661],[0.441,0.8661],[0.4489,0.8661],[0.4567,0.8661],[0.4646,0.8661],[0.4725,0.8661],[0.4803,0.8661],[0.4882,0.8661],[0.4961,0.8661],[0.504,0.8661],[0.5118,0.8661],[0.5197,0.8661],[0.5276,0.8661],[0.5355,0.8661],[0.5433,0.8661],[0.5512,0.8661],[0.5591,0.8661],[0.567,0.8661],[0.5748,0.8661],[0.5827,0.8661],[0.5906,0.8661],[0.5984,0.8661],[0.6063,0.8661],[0.6142,0.8661],[0.6221,0.8661],[0.6299,0.8661],[0.6378,0.8661],[0.6457,0.8661],[0.6536,0.8661],[0.6614,0.8661],[0.6693,0.8661],[0.6772,0.8661],[0.6851,0.8661],[0.6929,0.8661],[0.7008,0.8661],[0.7087,0.8661],[0.7166,0.8661],[0.7244,0.8661],[0.7323,0.8661],[0.7402,0.8661],[0.748,0.8661],[0.7559,0.8661],[0.7638,0.8661],[0.7717,0.8661],[0.7795,0.8661],[0.7874,0.8661],[0.7953,0.8661],[0.8032,0.8661],[0.811,0.8661],[0.8189,0.8661],[0.8268,0.8661],[0.8347,0.8661],[0.8425,0.8661],[0.8504,0.8661],[0.8583,0.8661],[0.8662,0.8661],[0.874,0.8661],[0.8819,0.8661],[0.8898,0.8661],[0.8976,0.8661],[0.9055,0.8661],[0.9134,0.8661],[0.9213,0.8661],[0.9291,0.8661],[0.937,0.8661],[0.9449,0.8661],[0.9528,0.8661],[0.9606,0.8661],[0.9685,0.8661],[0.9764,0.8661],[0.9843,0.8661],[0.9921,0.8661],[1,0.8661],[0.0001,0.8582],[0.0079,0.8582],[0.0158,0.8582],[0.0237,0.8582],[0.0316,0.8582],[0.0394,0.8582],[0.0473,0.8582],[0.0552,0.8582],[0.063,0.8582],[0.0709,0.8582],[0.0788,0.8582],[0.0867,0.8582],[0.0945,0.8582],[0.1024,0.8582],[0.1103,0.8582],[0.1182,0.8582],[0.126,0.8582],[0.1339,0.8582],[0.1418,0.8582],[0.1497,0.8582],[0.1575,0.8582],[0.1654,0.8582],[0.1733,0.8582],[0.1812,0.8582],[0.189,0.8582],[0.1969,0.8582],[0.2048,0.8582],[0.2126,0.8582],[0.2205,0.8582],[0.2284,0.8582],[0.2363,0.8582],[0.2441,0.8582],[0.252,0.8582],[0.2599,0.8582],[0.2678,0.8582],[0.2756,0.8582],[0.2835,0.8582],[0.2914,0.8582],[0.2993,0.8582],[0.3071,0.8582],[0.315,0.8582],[0.3229,0.8582],[0.3308,0.8582],[0.3386,0.8582],[0.3465,0.8582],[0.3544,0.8582],[0.3622,0.8582],[0.3701,0.8582],[0.378,0.8582],[0.3859,0.8582],[0.3937,0.8582],[0.4016,0.8582],[0.4095,0.8582],[0.4174,0.8582],[0.4252,0.8582],[0.4331,0.8582],[0.441,0.8582],[0.4489,0.8582],[0.4567,0.8582],[0.4646,0.8582],[0.4725,0.8582],[0.4803,0.8582],[0.4882,0.8582],[0.4961,0.8582],[0.504,0.8582],[0.5118,0.8582],[0.5197,0.8582],[0.5276,0.8582],[0.5355,0.8582],[0.5433,0.8582],[0.5512,0.8582],[0.5591,0.8582],[0.567,0.8582],[0.5748,0.8582],[0.5827,0.8582],[0.5906,0.8582],[0.5984,0.8582],[0.6063,0.8582],[0.6142,0.8582],[0.6221,0.8582],[0.6299,0.8582],[0.6378,0.8582],[0.6457,0.8582],[0.6536,0.8582],[0.6614,0.8582],[0.6693,0.8582],[0.6772,0.8582],[0.6851,0.8582],[0.6929,0.8582],[0.7008,0.8582],[0.7087,0.8582],[0.7166,0.8582],[0.7244,0.8582],[0.7323,0.8582],[0.7402,0.8582],[0.748,0.8582],[0.7559,0.8582],[0.7638,0.8582],[0.7717,0.8582],[0.7795,0.8582],[0.7874,0.8582],[0.7953,0.8582],[0.8032,0.8582],[0.811,0.8582],[0.8189,0.8582],[0.8268,0.8582],[0.8347,0.8582],[0.8425,0.8582],[0.8504,0.8582],[0.8583,0.8582],[0.8662,0.8582],[0.874,0.8582],[0.8819,0.8582],[0.8898,0.8582],[0.8976,0.8582],[0.9055,0.8582],[0.9134,0.8582],[0.9213,0.8582],[0.9291,0.8582],[0.937,0.8582],[0.9449,0.8582],[0.9528,0.8582],[0.9606,0.8582],[0.9685,0.8582],[0.9764,0.8582],[0.9843,0.8582],[0.9921,0.8582],[1,0.8582],[0.0001,0.8503],[0.0079,0.8503],[0.0158,0.8503],[0.0237,0.8503],[0.0316,0.8503],[0.0394,0.8503],[0.0473,0.8503],[0.0552,0.8503],[0.063,0.8503],[0.0709,0.8503],[0.0788,0.8503],[0.0867,0.8503],[0.0945,0.8503],[0.1024,0.8503],[0.1103,0.8503],[0.1182,0.8503],[0.126,0.8503],[0.1339,0.8503],[0.1418,0.8503],[0.1497,0.8503],[0.1575,0.8503],[0.1654,0.8503],[0.1733,0.8503],[0.1812,0.8503],[0.189,0.8503],[0.1969,0.8503],[0.2048,0.8503],[0.2126,0.8503],[0.2205,0.8503],[0.2284,0.8503],[0.2363,0.8503],[0.2441,0.8503],[0.252,0.8503],[0.2599,0.8503],[0.2678,0.8503],[0.2756,0.8503],[0.2835,0.8503],[0.2914,0.8503],[0.2993,0.8503],[0.3071,0.8503],[0.315,0.8503],[0.3229,0.8503],[0.3308,0.8503],[0.3386,0.8503],[0.3465,0.8503],[0.3544,0.8503],[0.3622,0.8503],[0.3701,0.8503],[0.378,0.8503],[0.3859,0.8503],[0.3937,0.8503],[0.4016,0.8503],[0.4095,0.8503],[0.4174,0.8503],[0.4252,0.8503],[0.4331,0.8503],[0.441,0.8503],[0.4489,0.8503],[0.4567,0.8503],[0.4646,0.8503],[0.4725,0.8503],[0.4803,0.8503],[0.4882,0.8503],[0.4961,0.8503],[0.504,0.8503],[0.5118,0.8503],[0.5197,0.8503],[0.5276,0.8503],[0.5355,0.8503],[0.5433,0.8503],[0.5512,0.8503],[0.5591,0.8503],[0.567,0.8503],[0.5748,0.8503],[0.5827,0.8503],[0.5906,0.8503],[0.5984,0.8503],[0.6063,0.8503],[0.6142,0.8503],[0.6221,0.8503],[0.6299,0.8503],[0.6378,0.8503],[0.6457,0.8503],[0.6536,0.8503],[0.6614,0.8503],[0.6693,0.8503],[0.6772,0.8503],[0.6851,0.8503],[0.6929,0.8503],[0.7008,0.8503],[0.7087,0.8503],[0.7166,0.8503],[0.7244,0.8503],[0.7323,0.8503],[0.7402,0.8503],[0.748,0.8503],[0.7559,0.8503],[0.7638,0.8503],[0.7717,0.8503],[0.7795,0.8503],[0.7874,0.8503],[0.7953,0.8503],[0.8032,0.8503],[0.811,0.8503],[0.8189,0.8503],[0.8268,0.8503],[0.8347,0.8503],[0.8425,0.8503],[0.8504,0.8503],[0.8583,0.8503],[0.8662,0.8503],[0.874,0.8503],[0.8819,0.8503],[0.8898,0.8503],[0.8976,0.8503],[0.9055,0.8503],[0.9134,0.8503],[0.9213,0.8503],[0.9291,0.8503],[0.937,0.8503],[0.9449,0.8503],[0.9528,0.8503],[0.9606,0.8503],[0.9685,0.8503],[0.9764,0.8503],[0.9843,0.8503],[0.9921,0.8503],[1,0.8503],[0.0001,0.8425],[0.0079,0.8425],[0.0158,0.8425],[0.0237,0.8425],[0.0316,0.8425],[0.0394,0.8425],[0.0473,0.8425],[0.0552,0.8425],[0.063,0.8425],[0.0709,0.8425],[0.0788,0.8425],[0.0867,0.8425],[0.0945,0.8425],[0.1024,0.8425],[0.1103,0.8425],[0.1182,0.8425],[0.126,0.8425],[0.1339,0.8425],[0.1418,0.8425],[0.1497,0.8425],[0.1575,0.8425],[0.1654,0.8425],[0.1733,0.8425],[0.1812,0.8425],[0.189,0.8425],[0.1969,0.8425],[0.2048,0.8425],[0.2126,0.8425],[0.2205,0.8425],[0.2284,0.8425],[0.2363,0.8425],[0.2441,0.8425],[0.252,0.8425],[0.2599,0.8425],[0.2678,0.8425],[0.2756,0.8425],[0.2835,0.8425],[0.2914,0.8425],[0.2993,0.8425],[0.3071,0.8425],[0.315,0.8425],[0.3229,0.8425],[0.3308,0.8425],[0.3386,0.8425],[0.3465,0.8425],[0.3544,0.8425],[0.3622,0.8425],[0.3701,0.8425],[0.378,0.8425],[0.3859,0.8425],[0.3937,0.8425],[0.4016,0.8425],[0.4095,0.8425],[0.4174,0.8425],[0.4252,0.8425],[0.4331,0.8425],[0.441,0.8425],[0.4489,0.8425],[0.4567,0.8425],[0.4646,0.8425],[0.4725,0.8425],[0.4803,0.8425],[0.4882,0.8425],[0.4961,0.8425],[0.504,0.8425],[0.5118,0.8425],[0.5197,0.8425],[0.5276,0.8425],[0.5355,0.8425],[0.5433,0.8425],[0.5512,0.8425],[0.5591,0.8425],[0.567,0.8425],[0.5748,0.8425],[0.5827,0.8425],[0.5906,0.8425],[0.5984,0.8425],[0.6063,0.8425],[0.6142,0.8425],[0.6221,0.8425],[0.6299,0.8425],[0.6378,0.8425],[0.6457,0.8425],[0.6536,0.8425],[0.6614,0.8425],[0.6693,0.8425],[0.6772,0.8425],[0.6851,0.8425],[0.6929,0.8425],[0.7008,0.8425],[0.7087,0.8425],[0.7166,0.8425],[0.7244,0.8425],[0.7323,0.8425],[0.7402,0.8425],[0.748,0.8425],[0.7559,0.8425],[0.7638,0.8425],[0.7717,0.8425],[0.7795,0.8425],[0.7874,0.8425],[0.7953,0.8425],[0.8032,0.8425],[0.811,0.8425],[0.8189,0.8425],[0.8268,0.8425],[0.8347,0.8425],[0.8425,0.8425],[0.8504,0.8425],[0.8583,0.8425],[0.8662,0.8425],[0.874,0.8425],[0.8819,0.8425],[0.8898,0.8425],[0.8976,0.8425],[0.9055,0.8425],[0.9134,0.8425],[0.9213,0.8425],[0.9291,0.8425],[0.937,0.8425],[0.9449,0.8425],[0.9528,0.8425],[0.9606,0.8425],[0.9685,0.8425],[0.9764,0.8425],[0.9843,0.8425],[0.9921,0.8425],[1,0.8425],[0.0001,0.8346],[0.0079,0.8346],[0.0158,0.8346],[0.0237,0.8346],[0.0316,0.8346],[0.0394,0.8346],[0.0473,0.8346],[0.0552,0.8346],[0.063,0.8346],[0.0709,0.8346],[0.0788,0.8346],[0.0867,0.8346],[0.0945,0.8346],[0.1024,0.8346],[0.1103,0.8346],[0.1182,0.8346],[0.126,0.8346],[0.1339,0.8346],[0.1418,0.8346],[0.1497,0.8346],[0.1575,0.8346],[0.1654,0.8346],[0.1733,0.8346],[0.1812,0.8346],[0.189,0.8346],[0.1969,0.8346],[0.2048,0.8346],[0.2126,0.8346],[0.2205,0.8346],[0.2284,0.8346],[0.2363,0.8346],[0.2441,0.8346],[0.252,0.8346],[0.2599,0.8346],[0.2678,0.8346],[0.2756,0.8346],[0.2835,0.8346],[0.2914,0.8346],[0.2993,0.8346],[0.3071,0.8346],[0.315,0.8346],[0.3229,0.8346],[0.3308,0.8346],[0.3386,0.8346],[0.3465,0.8346],[0.3544,0.8346],[0.3622,0.8346],[0.3701,0.8346],[0.378,0.8346],[0.3859,0.8346],[0.3937,0.8346],[0.4016,0.8346],[0.4095,0.8346],[0.4174,0.8346],[0.4252,0.8346],[0.4331,0.8346],[0.441,0.8346],[0.4489,0.8346],[0.4567,0.8346],[0.4646,0.8346],[0.4725,0.8346],[0.4803,0.8346],[0.4882,0.8346],[0.4961,0.8346],[0.504,0.8346],[0.5118,0.8346],[0.5197,0.8346],[0.5276,0.8346],[0.5355,0.8346],[0.5433,0.8346],[0.5512,0.8346],[0.5591,0.8346],[0.567,0.8346],[0.5748,0.8346],[0.5827,0.8346],[0.5906,0.8346],[0.5984,0.8346],[0.6063,0.8346],[0.6142,0.8346],[0.6221,0.8346],[0.6299,0.8346],[0.6378,0.8346],[0.6457,0.8346],[0.6536,0.8346],[0.6614,0.8346],[0.6693,0.8346],[0.6772,0.8346],[0.6851,0.8346],[0.6929,0.8346],[0.7008,0.8346],[0.7087,0.8346],[0.7166,0.8346],[0.7244,0.8346],[0.7323,0.8346],[0.7402,0.8346],[0.748,0.8346],[0.7559,0.8346],[0.7638,0.8346],[0.7717,0.8346],[0.7795,0.8346],[0.7874,0.8346],[0.7953,0.8346],[0.8032,0.8346],[0.811,0.8346],[0.8189,0.8346],[0.8268,0.8346],[0.8347,0.8346],[0.8425,0.8346],[0.8504,0.8346],[0.8583,0.8346],[0.8662,0.8346],[0.874,0.8346],[0.8819,0.8346],[0.8898,0.8346],[0.8976,0.8346],[0.9055,0.8346],[0.9134,0.8346],[0.9213,0.8346],[0.9291,0.8346],[0.937,0.8346],[0.9449,0.8346],[0.9528,0.8346],[0.9606,0.8346],[0.9685,0.8346],[0.9764,0.8346],[0.9843,0.8346],[0.9921,0.8346],[1,0.8346],[0.0001,0.8267],[0.0079,0.8267],[0.0158,0.8267],[0.0237,0.8267],[0.0316,0.8267],[0.0394,0.8267],[0.0473,0.8267],[0.0552,0.8267],[0.063,0.8267],[0.0709,0.8267],[0.0788,0.8267],[0.0867,0.8267],[0.0945,0.8267],[0.1024,0.8267],[0.1103,0.8267],[0.1182,0.8267],[0.126,0.8267],[0.1339,0.8267],[0.1418,0.8267],[0.1497,0.8267],[0.1575,0.8267],[0.1654,0.8267],[0.1733,0.8267],[0.1812,0.8267],[0.189,0.8267],[0.1969,0.8267],[0.2048,0.8267],[0.2126,0.8267],[0.2205,0.8267],[0.2284,0.8267],[0.2363,0.8267],[0.2441,0.8267],[0.252,0.8267],[0.2599,0.8267],[0.2678,0.8267],[0.2756,0.8267],[0.2835,0.8267],[0.2914,0.8267],[0.2993,0.8267],[0.3071,0.8267],[0.315,0.8267],[0.3229,0.8267],[0.3308,0.8267],[0.3386,0.8267],[0.3465,0.8267],[0.3544,0.8267],[0.3622,0.8267],[0.3701,0.8267],[0.378,0.8267],[0.3859,0.8267],[0.3937,0.8267],[0.4016,0.8267],[0.4095,0.8267],[0.4174,0.8267],[0.4252,0.8267],[0.4331,0.8267],[0.441,0.8267],[0.4489,0.8267],[0.4567,0.8267],[0.4646,0.8267],[0.4725,0.8267],[0.4803,0.8267],[0.4882,0.8267],[0.4961,0.8267],[0.504,0.8267],[0.5118,0.8267],[0.5197,0.8267],[0.5276,0.8267],[0.5355,0.8267],[0.5433,0.8267],[0.5512,0.8267],[0.5591,0.8267],[0.567,0.8267],[0.5748,0.8267],[0.5827,0.8267],[0.5906,0.8267],[0.5984,0.8267],[0.6063,0.8267],[0.6142,0.8267],[0.6221,0.8267],[0.6299,0.8267],[0.6378,0.8267],[0.6457,0.8267],[0.6536,0.8267],[0.6614,0.8267],[0.6693,0.8267],[0.6772,0.8267],[0.6851,0.8267],[0.6929,0.8267],[0.7008,0.8267],[0.7087,0.8267],[0.7166,0.8267],[0.7244,0.8267],[0.7323,0.8267],[0.7402,0.8267],[0.748,0.8267],[0.7559,0.8267],[0.7638,0.8267],[0.7717,0.8267],[0.7795,0.8267],[0.7874,0.8267],[0.7953,0.8267],[0.8032,0.8267],[0.811,0.8267],[0.8189,0.8267],[0.8268,0.8267],[0.8347,0.8267],[0.8425,0.8267],[0.8504,0.8267],[0.8583,0.8267],[0.8662,0.8267],[0.874,0.8267],[0.8819,0.8267],[0.8898,0.8267],[0.8976,0.8267],[0.9055,0.8267],[0.9134,0.8267],[0.9213,0.8267],[0.9291,0.8267],[0.937,0.8267],[0.9449,0.8267],[0.9528,0.8267],[0.9606,0.8267],[0.9685,0.8267],[0.9764,0.8267],[0.9843,0.8267],[0.9921,0.8267],[1,0.8267],[0.0001,0.8188],[0.0079,0.8188],[0.0158,0.8188],[0.0237,0.8188],[0.0316,0.8188],[0.0394,0.8188],[0.0473,0.8188],[0.0552,0.8188],[0.063,0.8188],[0.0709,0.8188],[0.0788,0.8188],[0.0867,0.8188],[0.0945,0.8188],[0.1024,0.8188],[0.1103,0.8188],[0.1182,0.8188],[0.126,0.8188],[0.1339,0.8188],[0.1418,0.8188],[0.1497,0.8188],[0.1575,0.8188],[0.1654,0.8188],[0.1733,0.8188],[0.1812,0.8188],[0.189,0.8188],[0.1969,0.8188],[0.2048,0.8188],[0.2126,0.8188],[0.2205,0.8188],[0.2284,0.8188],[0.2363,0.8188],[0.2441,0.8188],[0.252,0.8188],[0.2599,0.8188],[0.2678,0.8188],[0.2756,0.8188],[0.2835,0.8188],[0.2914,0.8188],[0.2993,0.8188],[0.3071,0.8188],[0.315,0.8188],[0.3229,0.8188],[0.3308,0.8188],[0.3386,0.8188],[0.3465,0.8188],[0.3544,0.8188],[0.3622,0.8188],[0.3701,0.8188],[0.378,0.8188],[0.3859,0.8188],[0.3937,0.8188],[0.4016,0.8188],[0.4095,0.8188],[0.4174,0.8188],[0.4252,0.8188],[0.4331,0.8188],[0.441,0.8188],[0.4489,0.8188],[0.4567,0.8188],[0.4646,0.8188],[0.4725,0.8188],[0.4803,0.8188],[0.4882,0.8188],[0.4961,0.8188],[0.504,0.8188],[0.5118,0.8188],[0.5197,0.8188],[0.5276,0.8188],[0.5355,0.8188],[0.5433,0.8188],[0.5512,0.8188],[0.5591,0.8188],[0.567,0.8188],[0.5748,0.8188],[0.5827,0.8188],[0.5906,0.8188],[0.5984,0.8188],[0.6063,0.8188],[0.6142,0.8188],[0.6221,0.8188],[0.6299,0.8188],[0.6378,0.8188],[0.6457,0.8188],[0.6536,0.8188],[0.6614,0.8188],[0.6693,0.8188],[0.6772,0.8188],[0.6851,0.8188],[0.6929,0.8188],[0.7008,0.8188],[0.7087,0.8188],[0.7166,0.8188],[0.7244,0.8188],[0.7323,0.8188],[0.7402,0.8188],[0.748,0.8188],[0.7559,0.8188],[0.7638,0.8188],[0.7717,0.8188],[0.7795,0.8188],[0.7874,0.8188],[0.7953,0.8188],[0.8032,0.8188],[0.811,0.8188],[0.8189,0.8188],[0.8268,0.8188],[0.8347,0.8188],[0.8425,0.8188],[0.8504,0.8188],[0.8583,0.8188],[0.8662,0.8188],[0.874,0.8188],[0.8819,0.8188],[0.8898,0.8188],[0.8976,0.8188],[0.9055,0.8188],[0.9134,0.8188],[0.9213,0.8188],[0.9291,0.8188],[0.937,0.8188],[0.9449,0.8188],[0.9528,0.8188],[0.9606,0.8188],[0.9685,0.8188],[0.9764,0.8188],[0.9843,0.8188],[0.9921,0.8188],[1,0.8188],[0.0001,0.811],[0.0079,0.811],[0.0158,0.811],[0.0237,0.811],[0.0316,0.811],[0.0394,0.811],[0.0473,0.811],[0.0552,0.811],[0.063,0.811],[0.0709,0.811],[0.0788,0.811],[0.0867,0.811],[0.0945,0.811],[0.1024,0.811],[0.1103,0.811],[0.1182,0.811],[0.126,0.811],[0.1339,0.811],[0.1418,0.811],[0.1497,0.811],[0.1575,0.811],[0.1654,0.811],[0.1733,0.811],[0.1812,0.811],[0.189,0.811],[0.1969,0.811],[0.2048,0.811],[0.2126,0.811],[0.2205,0.811],[0.2284,0.811],[0.2363,0.811],[0.2441,0.811],[0.252,0.811],[0.2599,0.811],[0.2678,0.811],[0.2756,0.811],[0.2835,0.811],[0.2914,0.811],[0.2993,0.811],[0.3071,0.811],[0.315,0.811],[0.3229,0.811],[0.3308,0.811],[0.3386,0.811],[0.3465,0.811],[0.3544,0.811],[0.3622,0.811],[0.3701,0.811],[0.378,0.811],[0.3859,0.811],[0.3937,0.811],[0.4016,0.811],[0.4095,0.811],[0.4174,0.811],[0.4252,0.811],[0.4331,0.811],[0.441,0.811],[0.4489,0.811],[0.4567,0.811],[0.4646,0.811],[0.4725,0.811],[0.4803,0.811],[0.4882,0.811],[0.4961,0.811],[0.504,0.811],[0.5118,0.811],[0.5197,0.811],[0.5276,0.811],[0.5355,0.811],[0.5433,0.811],[0.5512,0.811],[0.5591,0.811],[0.567,0.811],[0.5748,0.811],[0.5827,0.811],[0.5906,0.811],[0.5984,0.811],[0.6063,0.811],[0.6142,0.811],[0.6221,0.811],[0.6299,0.811],[0.6378,0.811],[0.6457,0.811],[0.6536,0.811],[0.6614,0.811],[0.6693,0.811],[0.6772,0.811],[0.6851,0.811],[0.6929,0.811],[0.7008,0.811],[0.7087,0.811],[0.7166,0.811],[0.7244,0.811],[0.7323,0.811],[0.7402,0.811],[0.748,0.811],[0.7559,0.811],[0.7638,0.811],[0.7717,0.811],[0.7795,0.811],[0.7874,0.811],[0.7953,0.811],[0.8032,0.811],[0.811,0.811],[0.8189,0.811],[0.8268,0.811],[0.8347,0.811],[0.8425,0.811],[0.8504,0.811],[0.8583,0.811],[0.8662,0.811],[0.874,0.811],[0.8819,0.811],[0.8898,0.811],[0.8976,0.811],[0.9055,0.811],[0.9134,0.811],[0.9213,0.811],[0.9291,0.811],[0.937,0.811],[0.9449,0.811],[0.9528,0.811],[0.9606,0.811],[0.9685,0.811],[0.9764,0.811],[0.9843,0.811],[0.9921,0.811],[1,0.811],[0.0001,0.8031],[0.0079,0.8031],[0.0158,0.8031],[0.0237,0.8031],[0.0316,0.8031],[0.0394,0.8031],[0.0473,0.8031],[0.0552,0.8031],[0.063,0.8031],[0.0709,0.8031],[0.0788,0.8031],[0.0867,0.8031],[0.0945,0.8031],[0.1024,0.8031],[0.1103,0.8031],[0.1182,0.8031],[0.126,0.8031],[0.1339,0.8031],[0.1418,0.8031],[0.1497,0.8031],[0.1575,0.8031],[0.1654,0.8031],[0.1733,0.8031],[0.1812,0.8031],[0.189,0.8031],[0.1969,0.8031],[0.2048,0.8031],[0.2126,0.8031],[0.2205,0.8031],[0.2284,0.8031],[0.2363,0.8031],[0.2441,0.8031],[0.252,0.8031],[0.2599,0.8031],[0.2678,0.8031],[0.2756,0.8031],[0.2835,0.8031],[0.2914,0.8031],[0.2993,0.8031],[0.3071,0.8031],[0.315,0.8031],[0.3229,0.8031],[0.3308,0.8031],[0.3386,0.8031],[0.3465,0.8031],[0.3544,0.8031],[0.3622,0.8031],[0.3701,0.8031],[0.378,0.8031],[0.3859,0.8031],[0.3937,0.8031],[0.4016,0.8031],[0.4095,0.8031],[0.4174,0.8031],[0.4252,0.8031],[0.4331,0.8031],[0.441,0.8031],[0.4489,0.8031],[0.4567,0.8031],[0.4646,0.8031],[0.4725,0.8031],[0.4803,0.8031],[0.4882,0.8031],[0.4961,0.8031],[0.504,0.8031],[0.5118,0.8031],[0.5197,0.8031],[0.5276,0.8031],[0.5355,0.8031],[0.5433,0.8031],[0.5512,0.8031],[0.5591,0.8031],[0.567,0.8031],[0.5748,0.8031],[0.5827,0.8031],[0.5906,0.8031],[0.5984,0.8031],[0.6063,0.8031],[0.6142,0.8031],[0.6221,0.8031],[0.6299,0.8031],[0.6378,0.8031],[0.6457,0.8031],[0.6536,0.8031],[0.6614,0.8031],[0.6693,0.8031],[0.6772,0.8031],[0.6851,0.8031],[0.6929,0.8031],[0.7008,0.8031],[0.7087,0.8031],[0.7166,0.8031],[0.7244,0.8031],[0.7323,0.8031],[0.7402,0.8031],[0.748,0.8031],[0.7559,0.8031],[0.7638,0.8031],[0.7717,0.8031],[0.7795,0.8031],[0.7874,0.8031],[0.7953,0.8031],[0.8032,0.8031],[0.811,0.8031],[0.8189,0.8031],[0.8268,0.8031],[0.8347,0.8031],[0.8425,0.8031],[0.8504,0.8031],[0.8583,0.8031],[0.8662,0.8031],[0.874,0.8031],[0.8819,0.8031],[0.8898,0.8031],[0.8976,0.8031],[0.9055,0.8031],[0.9134,0.8031],[0.9213,0.8031],[0.9291,0.8031],[0.937,0.8031],[0.9449,0.8031],[0.9528,0.8031],[0.9606,0.8031],[0.9685,0.8031],[0.9764,0.8031],[0.9843,0.8031],[0.9921,0.8031],[1,0.8031],[0.0001,0.7952],[0.0079,0.7952],[0.0158,0.7952],[0.0237,0.7952],[0.0316,0.7952],[0.0394,0.7952],[0.0473,0.7952],[0.0552,0.7952],[0.063,0.7952],[0.0709,0.7952],[0.0788,0.7952],[0.0867,0.7952],[0.0945,0.7952],[0.1024,0.7952],[0.1103,0.7952],[0.1182,0.7952],[0.126,0.7952],[0.1339,0.7952],[0.1418,0.7952],[0.1497,0.7952],[0.1575,0.7952],[0.1654,0.7952],[0.1733,0.7952],[0.1812,0.7952],[0.189,0.7952],[0.1969,0.7952],[0.2048,0.7952],[0.2126,0.7952],[0.2205,0.7952],[0.2284,0.7952],[0.2363,0.7952],[0.2441,0.7952],[0.252,0.7952],[0.2599,0.7952],[0.2678,0.7952],[0.2756,0.7952],[0.2835,0.7952],[0.2914,0.7952],[0.2993,0.7952],[0.3071,0.7952],[0.315,0.7952],[0.3229,0.7952],[0.3308,0.7952],[0.3386,0.7952],[0.3465,0.7952],[0.3544,0.7952],[0.3622,0.7952],[0.3701,0.7952],[0.378,0.7952],[0.3859,0.7952],[0.3937,0.7952],[0.4016,0.7952],[0.4095,0.7952],[0.4174,0.7952],[0.4252,0.7952],[0.4331,0.7952],[0.441,0.7952],[0.4489,0.7952],[0.4567,0.7952],[0.4646,0.7952],[0.4725,0.7952],[0.4803,0.7952],[0.4882,0.7952],[0.4961,0.7952],[0.504,0.7952],[0.5118,0.7952],[0.5197,0.7952],[0.5276,0.7952],[0.5355,0.7952],[0.5433,0.7952],[0.5512,0.7952],[0.5591,0.7952],[0.567,0.7952],[0.5748,0.7952],[0.5827,0.7952],[0.5906,0.7952],[0.5984,0.7952],[0.6063,0.7952],[0.6142,0.7952],[0.6221,0.7952],[0.6299,0.7952],[0.6378,0.7952],[0.6457,0.7952],[0.6536,0.7952],[0.6614,0.7952],[0.6693,0.7952],[0.6772,0.7952],[0.6851,0.7952],[0.6929,0.7952],[0.7008,0.7952],[0.7087,0.7952],[0.7166,0.7952],[0.7244,0.7952],[0.7323,0.7952],[0.7402,0.7952],[0.748,0.7952],[0.7559,0.7952],[0.7638,0.7952],[0.7717,0.7952],[0.7795,0.7952],[0.7874,0.7952],[0.7953,0.7952],[0.8032,0.7952],[0.811,0.7952],[0.8189,0.7952],[0.8268,0.7952],[0.8347,0.7952],[0.8425,0.7952],[0.8504,0.7952],[0.8583,0.7952],[0.8662,0.7952],[0.874,0.7952],[0.8819,0.7952],[0.8898,0.7952],[0.8976,0.7952],[0.9055,0.7952],[0.9134,0.7952],[0.9213,0.7952],[0.9291,0.7952],[0.937,0.7952],[0.9449,0.7952],[0.9528,0.7952],[0.9606,0.7952],[0.9685,0.7952],[0.9764,0.7952],[0.9843,0.7952],[0.9921,0.7952],[1,0.7952],[0.0001,0.7874],[0.0079,0.7874],[0.0158,0.7874],[0.0237,0.7874],[0.0316,0.7874],[0.0394,0.7874],[0.0473,0.7874],[0.0552,0.7874],[0.063,0.7874],[0.0709,0.7874],[0.0788,0.7874],[0.0867,0.7874],[0.0945,0.7874],[0.1024,0.7874],[0.1103,0.7874],[0.1182,0.7874],[0.126,0.7874],[0.1339,0.7874],[0.1418,0.7874],[0.1497,0.7874],[0.1575,0.7874],[0.1654,0.7874],[0.1733,0.7874],[0.1812,0.7874],[0.189,0.7874],[0.1969,0.7874],[0.2048,0.7874],[0.2126,0.7874],[0.2205,0.7874],[0.2284,0.7874],[0.2363,0.7874],[0.2441,0.7874],[0.252,0.7874],[0.2599,0.7874],[0.2678,0.7874],[0.2756,0.7874],[0.2835,0.7874],[0.2914,0.7874],[0.2993,0.7874],[0.3071,0.7874],[0.315,0.7874],[0.3229,0.7874],[0.3308,0.7874],[0.3386,0.7874],[0.3465,0.7874],[0.3544,0.7874],[0.3622,0.7874],[0.3701,0.7874],[0.378,0.7874],[0.3859,0.7874],[0.3937,0.7874],[0.4016,0.7874],[0.4095,0.7874],[0.4174,0.7874],[0.4252,0.7874],[0.4331,0.7874],[0.441,0.7874],[0.4489,0.7874],[0.4567,0.7874],[0.4646,0.7874],[0.4725,0.7874],[0.4803,0.7874],[0.4882,0.7874],[0.4961,0.7874],[0.504,0.7874],[0.5118,0.7874],[0.5197,0.7874],[0.5276,0.7874],[0.5355,0.7874],[0.5433,0.7874],[0.5512,0.7874],[0.5591,0.7874],[0.567,0.7874],[0.5748,0.7874],[0.5827,0.7874],[0.5906,0.7874],[0.5984,0.7874],[0.6063,0.7874],[0.6142,0.7874],[0.6221,0.7874],[0.6299,0.7874],[0.6378,0.7874],[0.6457,0.7874],[0.6536,0.7874],[0.6614,0.7874],[0.6693,0.7874],[0.6772,0.7874],[0.6851,0.7874],[0.6929,0.7874],[0.7008,0.7874],[0.7087,0.7874],[0.7166,0.7874],[0.7244,0.7874],[0.7323,0.7874],[0.7402,0.7874],[0.748,0.7874],[0.7559,0.7874],[0.7638,0.7874],[0.7717,0.7874],[0.7795,0.7874],[0.7874,0.7874],[0.7953,0.7874],[0.8032,0.7874],[0.811,0.7874],[0.8189,0.7874],[0.8268,0.7874],[0.8347,0.7874],[0.8425,0.7874],[0.8504,0.7874],[0.8583,0.7874],[0.8662,0.7874],[0.874,0.7874],[0.8819,0.7874],[0.8898,0.7874],[0.8976,0.7874],[0.9055,0.7874],[0.9134,0.7874],[0.9213,0.7874],[0.9291,0.7874],[0.937,0.7874],[0.9449,0.7874],[0.9528,0.7874],[0.9606,0.7874],[0.9685,0.7874],[0.9764,0.7874],[0.9843,0.7874],[0.9921,0.7874],[1,0.7874],[0.0001,0.7795],[0.0079,0.7795],[0.0158,0.7795],[0.0237,0.7795],[0.0316,0.7795],[0.0394,0.7795],[0.0473,0.7795],[0.0552,0.7795],[0.063,0.7795],[0.0709,0.7795],[0.0788,0.7795],[0.0867,0.7795],[0.0945,0.7795],[0.1024,0.7795],[0.1103,0.7795],[0.1182,0.7795],[0.126,0.7795],[0.1339,0.7795],[0.1418,0.7795],[0.1497,0.7795],[0.1575,0.7795],[0.1654,0.7795],[0.1733,0.7795],[0.1812,0.7795],[0.189,0.7795],[0.1969,0.7795],[0.2048,0.7795],[0.2126,0.7795],[0.2205,0.7795],[0.2284,0.7795],[0.2363,0.7795],[0.2441,0.7795],[0.252,0.7795],[0.2599,0.7795],[0.2678,0.7795],[0.2756,0.7795],[0.2835,0.7795],[0.2914,0.7795],[0.2993,0.7795],[0.3071,0.7795],[0.315,0.7795],[0.3229,0.7795],[0.3308,0.7795],[0.3386,0.7795],[0.3465,0.7795],[0.3544,0.7795],[0.3622,0.7795],[0.3701,0.7795],[0.378,0.7795],[0.3859,0.7795],[0.3937,0.7795],[0.4016,0.7795],[0.4095,0.7795],[0.4174,0.7795],[0.4252,0.7795],[0.4331,0.7795],[0.441,0.7795],[0.4489,0.7795],[0.4567,0.7795],[0.4646,0.7795],[0.4725,0.7795],[0.4803,0.7795],[0.4882,0.7795],[0.4961,0.7795],[0.504,0.7795],[0.5118,0.7795],[0.5197,0.7795],[0.5276,0.7795],[0.5355,0.7795],[0.5433,0.7795],[0.5512,0.7795],[0.5591,0.7795],[0.567,0.7795],[0.5748,0.7795],[0.5827,0.7795],[0.5906,0.7795],[0.5984,0.7795],[0.6063,0.7795],[0.6142,0.7795],[0.6221,0.7795],[0.6299,0.7795],[0.6378,0.7795],[0.6457,0.7795],[0.6536,0.7795],[0.6614,0.7795],[0.6693,0.7795],[0.6772,0.7795],[0.6851,0.7795],[0.6929,0.7795],[0.7008,0.7795],[0.7087,0.7795],[0.7166,0.7795],[0.7244,0.7795],[0.7323,0.7795],[0.7402,0.7795],[0.748,0.7795],[0.7559,0.7795],[0.7638,0.7795],[0.7717,0.7795],[0.7795,0.7795],[0.7874,0.7795],[0.7953,0.7795],[0.8032,0.7795],[0.811,0.7795],[0.8189,0.7795],[0.8268,0.7795],[0.8347,0.7795],[0.8425,0.7795],[0.8504,0.7795],[0.8583,0.7795],[0.8662,0.7795],[0.874,0.7795],[0.8819,0.7795],[0.8898,0.7795],[0.8976,0.7795],[0.9055,0.7795],[0.9134,0.7795],[0.9213,0.7795],[0.9291,0.7795],[0.937,0.7795],[0.9449,0.7795],[0.9528,0.7795],[0.9606,0.7795],[0.9685,0.7795],[0.9764,0.7795],[0.9843,0.7795],[0.9921,0.7795],[1,0.7795],[0.0001,0.7716],[0.0079,0.7716],[0.0158,0.7716],[0.0237,0.7716],[0.0316,0.7716],[0.0394,0.7716],[0.0473,0.7716],[0.0552,0.7716],[0.063,0.7716],[0.0709,0.7716],[0.0788,0.7716],[0.0867,0.7716],[0.0945,0.7716],[0.1024,0.7716],[0.1103,0.7716],[0.1182,0.7716],[0.126,0.7716],[0.1339,0.7716],[0.1418,0.7716],[0.1497,0.7716],[0.1575,0.7716],[0.1654,0.7716],[0.1733,0.7716],[0.1812,0.7716],[0.189,0.7716],[0.1969,0.7716],[0.2048,0.7716],[0.2126,0.7716],[0.2205,0.7716],[0.2284,0.7716],[0.2363,0.7716],[0.2441,0.7716],[0.252,0.7716],[0.2599,0.7716],[0.2678,0.7716],[0.2756,0.7716],[0.2835,0.7716],[0.2914,0.7716],[0.2993,0.7716],[0.3071,0.7716],[0.315,0.7716],[0.3229,0.7716],[0.3308,0.7716],[0.3386,0.7716],[0.3465,0.7716],[0.3544,0.7716],[0.3622,0.7716],[0.3701,0.7716],[0.378,0.7716],[0.3859,0.7716],[0.3937,0.7716],[0.4016,0.7716],[0.4095,0.7716],[0.4174,0.7716],[0.4252,0.7716],[0.4331,0.7716],[0.441,0.7716],[0.4489,0.7716],[0.4567,0.7716],[0.4646,0.7716],[0.4725,0.7716],[0.4803,0.7716],[0.4882,0.7716],[0.4961,0.7716],[0.504,0.7716],[0.5118,0.7716],[0.5197,0.7716],[0.5276,0.7716],[0.5355,0.7716],[0.5433,0.7716],[0.5512,0.7716],[0.5591,0.7716],[0.567,0.7716],[0.5748,0.7716],[0.5827,0.7716],[0.5906,0.7716],[0.5984,0.7716],[0.6063,0.7716],[0.6142,0.7716],[0.6221,0.7716],[0.6299,0.7716],[0.6378,0.7716],[0.6457,0.7716],[0.6536,0.7716],[0.6614,0.7716],[0.6693,0.7716],[0.6772,0.7716],[0.6851,0.7716],[0.6929,0.7716],[0.7008,0.7716],[0.7087,0.7716],[0.7166,0.7716],[0.7244,0.7716],[0.7323,0.7716],[0.7402,0.7716],[0.748,0.7716],[0.7559,0.7716],[0.7638,0.7716],[0.7717,0.7716],[0.7795,0.7716],[0.7874,0.7716],[0.7953,0.7716],[0.8032,0.7716],[0.811,0.7716],[0.8189,0.7716],[0.8268,0.7716],[0.8347,0.7716],[0.8425,0.7716],[0.8504,0.7716],[0.8583,0.7716],[0.8662,0.7716],[0.874,0.7716],[0.8819,0.7716],[0.8898,0.7716],[0.8976,0.7716],[0.9055,0.7716],[0.9134,0.7716],[0.9213,0.7716],[0.9291,0.7716],[0.937,0.7716],[0.9449,0.7716],[0.9528,0.7716],[0.9606,0.7716],[0.9685,0.7716],[0.9764,0.7716],[0.9843,0.7716],[0.9921,0.7716],[1,0.7716],[0.0001,0.7637],[0.0079,0.7637],[0.0158,0.7637],[0.0237,0.7637],[0.0316,0.7637],[0.0394,0.7637],[0.0473,0.7637],[0.0552,0.7637],[0.063,0.7637],[0.0709,0.7637],[0.0788,0.7637],[0.0867,0.7637],[0.0945,0.7637],[0.1024,0.7637],[0.1103,0.7637],[0.1182,0.7637],[0.126,0.7637],[0.1339,0.7637],[0.1418,0.7637],[0.1497,0.7637],[0.1575,0.7637],[0.1654,0.7637],[0.1733,0.7637],[0.1812,0.7637],[0.189,0.7637],[0.1969,0.7637],[0.2048,0.7637],[0.2126,0.7637],[0.2205,0.7637],[0.2284,0.7637],[0.2363,0.7637],[0.2441,0.7637],[0.252,0.7637],[0.2599,0.7637],[0.2678,0.7637],[0.2756,0.7637],[0.2835,0.7637],[0.2914,0.7637],[0.2993,0.7637],[0.3071,0.7637],[0.315,0.7637],[0.3229,0.7637],[0.3308,0.7637],[0.3386,0.7637],[0.3465,0.7637],[0.3544,0.7637],[0.3622,0.7637],[0.3701,0.7637],[0.378,0.7637],[0.3859,0.7637],[0.3937,0.7637],[0.4016,0.7637],[0.4095,0.7637],[0.4174,0.7637],[0.4252,0.7637],[0.4331,0.7637],[0.441,0.7637],[0.4489,0.7637],[0.4567,0.7637],[0.4646,0.7637],[0.4725,0.7637],[0.4803,0.7637],[0.4882,0.7637],[0.4961,0.7637],[0.504,0.7637],[0.5118,0.7637],[0.5197,0.7637],[0.5276,0.7637],[0.5355,0.7637],[0.5433,0.7637],[0.5512,0.7637],[0.5591,0.7637],[0.567,0.7637],[0.5748,0.7637],[0.5827,0.7637],[0.5906,0.7637],[0.5984,0.7637],[0.6063,0.7637],[0.6142,0.7637],[0.6221,0.7637],[0.6299,0.7637],[0.6378,0.7637],[0.6457,0.7637],[0.6536,0.7637],[0.6614,0.7637],[0.6693,0.7637],[0.6772,0.7637],[0.6851,0.7637],[0.6929,0.7637],[0.7008,0.7637],[0.7087,0.7637],[0.7166,0.7637],[0.7244,0.7637],[0.7323,0.7637],[0.7402,0.7637],[0.748,0.7637],[0.7559,0.7637],[0.7638,0.7637],[0.7717,0.7637],[0.7795,0.7637],[0.7874,0.7637],[0.7953,0.7637],[0.8032,0.7637],[0.811,0.7637],[0.8189,0.7637],[0.8268,0.7637],[0.8347,0.7637],[0.8425,0.7637],[0.8504,0.7637],[0.8583,0.7637],[0.8662,0.7637],[0.874,0.7637],[0.8819,0.7637],[0.8898,0.7637],[0.8976,0.7637],[0.9055,0.7637],[0.9134,0.7637],[0.9213,0.7637],[0.9291,0.7637],[0.937,0.7637],[0.9449,0.7637],[0.9528,0.7637],[0.9606,0.7637],[0.9685,0.7637],[0.9764,0.7637],[0.9843,0.7637],[0.9921,0.7637],[1,0.7637],[0.0001,0.7559],[0.0079,0.7559],[0.0158,0.7559],[0.0237,0.7559],[0.0316,0.7559],[0.0394,0.7559],[0.0473,0.7559],[0.0552,0.7559],[0.063,0.7559],[0.0709,0.7559],[0.0788,0.7559],[0.0867,0.7559],[0.0945,0.7559],[0.1024,0.7559],[0.1103,0.7559],[0.1182,0.7559],[0.126,0.7559],[0.1339,0.7559],[0.1418,0.7559],[0.1497,0.7559],[0.1575,0.7559],[0.1654,0.7559],[0.1733,0.7559],[0.1812,0.7559],[0.189,0.7559],[0.1969,0.7559],[0.2048,0.7559],[0.2126,0.7559],[0.2205,0.7559],[0.2284,0.7559],[0.2363,0.7559],[0.2441,0.7559],[0.252,0.7559],[0.2599,0.7559],[0.2678,0.7559],[0.2756,0.7559],[0.2835,0.7559],[0.2914,0.7559],[0.2993,0.7559],[0.3071,0.7559],[0.315,0.7559],[0.3229,0.7559],[0.3308,0.7559],[0.3386,0.7559],[0.3465,0.7559],[0.3544,0.7559],[0.3622,0.7559],[0.3701,0.7559],[0.378,0.7559],[0.3859,0.7559],[0.3937,0.7559],[0.4016,0.7559],[0.4095,0.7559],[0.4174,0.7559],[0.4252,0.7559],[0.4331,0.7559],[0.441,0.7559],[0.4489,0.7559],[0.4567,0.7559],[0.4646,0.7559],[0.4725,0.7559],[0.4803,0.7559],[0.4882,0.7559],[0.4961,0.7559],[0.504,0.7559],[0.5118,0.7559],[0.5197,0.7559],[0.5276,0.7559],[0.5355,0.7559],[0.5433,0.7559],[0.5512,0.7559],[0.5591,0.7559],[0.567,0.7559],[0.5748,0.7559],[0.5827,0.7559],[0.5906,0.7559],[0.5984,0.7559],[0.6063,0.7559],[0.6142,0.7559],[0.6221,0.7559],[0.6299,0.7559],[0.6378,0.7559],[0.6457,0.7559],[0.6536,0.7559],[0.6614,0.7559],[0.6693,0.7559],[0.6772,0.7559],[0.6851,0.7559],[0.6929,0.7559],[0.7008,0.7559],[0.7087,0.7559],[0.7166,0.7559],[0.7244,0.7559],[0.7323,0.7559],[0.7402,0.7559],[0.748,0.7559],[0.7559,0.7559],[0.7638,0.7559],[0.7717,0.7559],[0.7795,0.7559],[0.7874,0.7559],[0.7953,0.7559],[0.8032,0.7559],[0.811,0.7559],[0.8189,0.7559],[0.8268,0.7559],[0.8347,0.7559],[0.8425,0.7559],[0.8504,0.7559],[0.8583,0.7559],[0.8662,0.7559],[0.874,0.7559],[0.8819,0.7559],[0.8898,0.7559],[0.8976,0.7559],[0.9055,0.7559],[0.9134,0.7559],[0.9213,0.7559],[0.9291,0.7559],[0.937,0.7559],[0.9449,0.7559],[0.9528,0.7559],[0.9606,0.7559],[0.9685,0.7559],[0.9764,0.7559],[0.9843,0.7559],[0.9921,0.7559],[1,0.7559],[0.0001,0.748],[0.0079,0.748],[0.0158,0.748],[0.0237,0.748],[0.0316,0.748],[0.0394,0.748],[0.0473,0.748],[0.0552,0.748],[0.063,0.748],[0.0709,0.748],[0.0788,0.748],[0.0867,0.748],[0.0945,0.748],[0.1024,0.748],[0.1103,0.748],[0.1182,0.748],[0.126,0.748],[0.1339,0.748],[0.1418,0.748],[0.1497,0.748],[0.1575,0.748],[0.1654,0.748],[0.1733,0.748],[0.1812,0.748],[0.189,0.748],[0.1969,0.748],[0.2048,0.748],[0.2126,0.748],[0.2205,0.748],[0.2284,0.748],[0.2363,0.748],[0.2441,0.748],[0.252,0.748],[0.2599,0.748],[0.2678,0.748],[0.2756,0.748],[0.2835,0.748],[0.2914,0.748],[0.2993,0.748],[0.3071,0.748],[0.315,0.748],[0.3229,0.748],[0.3308,0.748],[0.3386,0.748],[0.3465,0.748],[0.3544,0.748],[0.3622,0.748],[0.3701,0.748],[0.378,0.748],[0.3859,0.748],[0.3937,0.748],[0.4016,0.748],[0.4095,0.748],[0.4174,0.748],[0.4252,0.748],[0.4331,0.748],[0.441,0.748],[0.4489,0.748],[0.4567,0.748],[0.4646,0.748],[0.4725,0.748],[0.4803,0.748],[0.4882,0.748],[0.4961,0.748],[0.504,0.748],[0.5118,0.748],[0.5197,0.748],[0.5276,0.748],[0.5355,0.748],[0.5433,0.748],[0.5512,0.748],[0.5591,0.748],[0.567,0.748],[0.5748,0.748],[0.5827,0.748],[0.5906,0.748],[0.5984,0.748],[0.6063,0.748],[0.6142,0.748],[0.6221,0.748],[0.6299,0.748],[0.6378,0.748],[0.6457,0.748],[0.6536,0.748],[0.6614,0.748],[0.6693,0.748],[0.6772,0.748],[0.6851,0.748],[0.6929,0.748],[0.7008,0.748],[0.7087,0.748],[0.7166,0.748],[0.7244,0.748],[0.7323,0.748],[0.7402,0.748],[0.748,0.748],[0.7559,0.748],[0.7638,0.748],[0.7717,0.748],[0.7795,0.748],[0.7874,0.748],[0.7953,0.748],[0.8032,0.748],[0.811,0.748],[0.8189,0.748],[0.8268,0.748],[0.8347,0.748],[0.8425,0.748],[0.8504,0.748],[0.8583,0.748],[0.8662,0.748],[0.874,0.748],[0.8819,0.748],[0.8898,0.748],[0.8976,0.748],[0.9055,0.748],[0.9134,0.748],[0.9213,0.748],[0.9291,0.748],[0.937,0.748],[0.9449,0.748],[0.9528,0.748],[0.9606,0.748],[0.9685,0.748],[0.9764,0.748],[0.9843,0.748],[0.9921,0.748],[1,0.748],[0.0001,0.7401],[0.0079,0.7401],[0.0158,0.7401],[0.0237,0.7401],[0.0316,0.7401],[0.0394,0.7401],[0.0473,0.7401],[0.0552,0.7401],[0.063,0.7401],[0.0709,0.7401],[0.0788,0.7401],[0.0867,0.7401],[0.0945,0.7401],[0.1024,0.7401],[0.1103,0.7401],[0.1182,0.7401],[0.126,0.7401],[0.1339,0.7401],[0.1418,0.7401],[0.1497,0.7401],[0.1575,0.7401],[0.1654,0.7401],[0.1733,0.7401],[0.1812,0.7401],[0.189,0.7401],[0.1969,0.7401],[0.2048,0.7401],[0.2126,0.7401],[0.2205,0.7401],[0.2284,0.7401],[0.2363,0.7401],[0.2441,0.7401],[0.252,0.7401],[0.2599,0.7401],[0.2678,0.7401],[0.2756,0.7401],[0.2835,0.7401],[0.2914,0.7401],[0.2993,0.7401],[0.3071,0.7401],[0.315,0.7401],[0.3229,0.7401],[0.3308,0.7401],[0.3386,0.7401],[0.3465,0.7401],[0.3544,0.7401],[0.3622,0.7401],[0.3701,0.7401],[0.378,0.7401],[0.3859,0.7401],[0.3937,0.7401],[0.4016,0.7401],[0.4095,0.7401],[0.4174,0.7401],[0.4252,0.7401],[0.4331,0.7401],[0.441,0.7401],[0.4489,0.7401],[0.4567,0.7401],[0.4646,0.7401],[0.4725,0.7401],[0.4803,0.7401],[0.4882,0.7401],[0.4961,0.7401],[0.504,0.7401],[0.5118,0.7401],[0.5197,0.7401],[0.5276,0.7401],[0.5355,0.7401],[0.5433,0.7401],[0.5512,0.7401],[0.5591,0.7401],[0.567,0.7401],[0.5748,0.7401],[0.5827,0.7401],[0.5906,0.7401],[0.5984,0.7401],[0.6063,0.7401],[0.6142,0.7401],[0.6221,0.7401],[0.6299,0.7401],[0.6378,0.7401],[0.6457,0.7401],[0.6536,0.7401],[0.6614,0.7401],[0.6693,0.7401],[0.6772,0.7401],[0.6851,0.7401],[0.6929,0.7401],[0.7008,0.7401],[0.7087,0.7401],[0.7166,0.7401],[0.7244,0.7401],[0.7323,0.7401],[0.7402,0.7401],[0.748,0.7401],[0.7559,0.7401],[0.7638,0.7401],[0.7717,0.7401],[0.7795,0.7401],[0.7874,0.7401],[0.7953,0.7401],[0.8032,0.7401],[0.811,0.7401],[0.8189,0.7401],[0.8268,0.7401],[0.8347,0.7401],[0.8425,0.7401],[0.8504,0.7401],[0.8583,0.7401],[0.8662,0.7401],[0.874,0.7401],[0.8819,0.7401],[0.8898,0.7401],[0.8976,0.7401],[0.9055,0.7401],[0.9134,0.7401],[0.9213,0.7401],[0.9291,0.7401],[0.937,0.7401],[0.9449,0.7401],[0.9528,0.7401],[0.9606,0.7401],[0.9685,0.7401],[0.9764,0.7401],[0.9843,0.7401],[0.9921,0.7401],[1,0.7401],[0.0001,0.7322],[0.0079,0.7322],[0.0158,0.7322],[0.0237,0.7322],[0.0316,0.7322],[0.0394,0.7322],[0.0473,0.7322],[0.0552,0.7322],[0.063,0.7322],[0.0709,0.7322],[0.0788,0.7322],[0.0867,0.7322],[0.0945,0.7322],[0.1024,0.7322],[0.1103,0.7322],[0.1182,0.7322],[0.126,0.7322],[0.1339,0.7322],[0.1418,0.7322],[0.1497,0.7322],[0.1575,0.7322],[0.1654,0.7322],[0.1733,0.7322],[0.1812,0.7322],[0.189,0.7322],[0.1969,0.7322],[0.2048,0.7322],[0.2126,0.7322],[0.2205,0.7322],[0.2284,0.7322],[0.2363,0.7322],[0.2441,0.7322],[0.252,0.7322],[0.2599,0.7322],[0.2678,0.7322],[0.2756,0.7322],[0.2835,0.7322],[0.2914,0.7322],[0.2993,0.7322],[0.3071,0.7322],[0.315,0.7322],[0.3229,0.7322],[0.3308,0.7322],[0.3386,0.7322],[0.3465,0.7322],[0.3544,0.7322],[0.3622,0.7322],[0.3701,0.7322],[0.378,0.7322],[0.3859,0.7322],[0.3937,0.7322],[0.4016,0.7322],[0.4095,0.7322],[0.4174,0.7322],[0.4252,0.7322],[0.4331,0.7322],[0.441,0.7322],[0.4489,0.7322],[0.4567,0.7322],[0.4646,0.7322],[0.4725,0.7322],[0.4803,0.7322],[0.4882,0.7322],[0.4961,0.7322],[0.504,0.7322],[0.5118,0.7322],[0.5197,0.7322],[0.5276,0.7322],[0.5355,0.7322],[0.5433,0.7322],[0.5512,0.7322],[0.5591,0.7322],[0.567,0.7322],[0.5748,0.7322],[0.5827,0.7322],[0.5906,0.7322],[0.5984,0.7322],[0.6063,0.7322],[0.6142,0.7322],[0.6221,0.7322],[0.6299,0.7322],[0.6378,0.7322],[0.6457,0.7322],[0.6536,0.7322],[0.6614,0.7322],[0.6693,0.7322],[0.6772,0.7322],[0.6851,0.7322],[0.6929,0.7322],[0.7008,0.7322],[0.7087,0.7322],[0.7166,0.7322],[0.7244,0.7322],[0.7323,0.7322],[0.7402,0.7322],[0.748,0.7322],[0.7559,0.7322],[0.7638,0.7322],[0.7717,0.7322],[0.7795,0.7322],[0.7874,0.7322],[0.7953,0.7322],[0.8032,0.7322],[0.811,0.7322],[0.8189,0.7322],[0.8268,0.7322],[0.8347,0.7322],[0.8425,0.7322],[0.8504,0.7322],[0.8583,0.7322],[0.8662,0.7322],[0.874,0.7322],[0.8819,0.7322],[0.8898,0.7322],[0.8976,0.7322],[0.9055,0.7322],[0.9134,0.7322],[0.9213,0.7322],[0.9291,0.7322],[0.937,0.7322],[0.9449,0.7322],[0.9528,0.7322],[0.9606,0.7322],[0.9685,0.7322],[0.9764,0.7322],[0.9843,0.7322],[0.9921,0.7322],[1,0.7322],[0.0001,0.7244],[0.0079,0.7244],[0.0158,0.7244],[0.0237,0.7244],[0.0316,0.7244],[0.0394,0.7244],[0.0473,0.7244],[0.0552,0.7244],[0.063,0.7244],[0.0709,0.7244],[0.0788,0.7244],[0.0867,0.7244],[0.0945,0.7244],[0.1024,0.7244],[0.1103,0.7244],[0.1182,0.7244],[0.126,0.7244],[0.1339,0.7244],[0.1418,0.7244],[0.1497,0.7244],[0.1575,0.7244],[0.1654,0.7244],[0.1733,0.7244],[0.1812,0.7244],[0.189,0.7244],[0.1969,0.7244],[0.2048,0.7244],[0.2126,0.7244],[0.2205,0.7244],[0.2284,0.7244],[0.2363,0.7244],[0.2441,0.7244],[0.252,0.7244],[0.2599,0.7244],[0.2678,0.7244],[0.2756,0.7244],[0.2835,0.7244],[0.2914,0.7244],[0.2993,0.7244],[0.3071,0.7244],[0.315,0.7244],[0.3229,0.7244],[0.3308,0.7244],[0.3386,0.7244],[0.3465,0.7244],[0.3544,0.7244],[0.3622,0.7244],[0.3701,0.7244],[0.378,0.7244],[0.3859,0.7244],[0.3937,0.7244],[0.4016,0.7244],[0.4095,0.7244],[0.4174,0.7244],[0.4252,0.7244],[0.4331,0.7244],[0.441,0.7244],[0.4489,0.7244],[0.4567,0.7244],[0.4646,0.7244],[0.4725,0.7244],[0.4803,0.7244],[0.4882,0.7244],[0.4961,0.7244],[0.504,0.7244],[0.5118,0.7244],[0.5197,0.7244],[0.5276,0.7244],[0.5355,0.7244],[0.5433,0.7244],[0.5512,0.7244],[0.5591,0.7244],[0.567,0.7244],[0.5748,0.7244],[0.5827,0.7244],[0.5906,0.7244],[0.5984,0.7244],[0.6063,0.7244],[0.6142,0.7244],[0.6221,0.7244],[0.6299,0.7244],[0.6378,0.7244],[0.6457,0.7244],[0.6536,0.7244],[0.6614,0.7244],[0.6693,0.7244],[0.6772,0.7244],[0.6851,0.7244],[0.6929,0.7244],[0.7008,0.7244],[0.7087,0.7244],[0.7166,0.7244],[0.7244,0.7244],[0.7323,0.7244],[0.7402,0.7244],[0.748,0.7244],[0.7559,0.7244],[0.7638,0.7244],[0.7717,0.7244],[0.7795,0.7244],[0.7874,0.7244],[0.7953,0.7244],[0.8032,0.7244],[0.811,0.7244],[0.8189,0.7244],[0.8268,0.7244],[0.8347,0.7244],[0.8425,0.7244],[0.8504,0.7244],[0.8583,0.7244],[0.8662,0.7244],[0.874,0.7244],[0.8819,0.7244],[0.8898,0.7244],[0.8976,0.7244],[0.9055,0.7244],[0.9134,0.7244],[0.9213,0.7244],[0.9291,0.7244],[0.937,0.7244],[0.9449,0.7244],[0.9528,0.7244],[0.9606,0.7244],[0.9685,0.7244],[0.9764,0.7244],[0.9843,0.7244],[0.9921,0.7244],[1,0.7244],[0.0001,0.7165],[0.0079,0.7165],[0.0158,0.7165],[0.0237,0.7165],[0.0316,0.7165],[0.0394,0.7165],[0.0473,0.7165],[0.0552,0.7165],[0.063,0.7165],[0.0709,0.7165],[0.0788,0.7165],[0.0867,0.7165],[0.0945,0.7165],[0.1024,0.7165],[0.1103,0.7165],[0.1182,0.7165],[0.126,0.7165],[0.1339,0.7165],[0.1418,0.7165],[0.1497,0.7165],[0.1575,0.7165],[0.1654,0.7165],[0.1733,0.7165],[0.1812,0.7165],[0.189,0.7165],[0.1969,0.7165],[0.2048,0.7165],[0.2126,0.7165],[0.2205,0.7165],[0.2284,0.7165],[0.2363,0.7165],[0.2441,0.7165],[0.252,0.7165],[0.2599,0.7165],[0.2678,0.7165],[0.2756,0.7165],[0.2835,0.7165],[0.2914,0.7165],[0.2993,0.7165],[0.3071,0.7165],[0.315,0.7165],[0.3229,0.7165],[0.3308,0.7165],[0.3386,0.7165],[0.3465,0.7165],[0.3544,0.7165],[0.3622,0.7165],[0.3701,0.7165],[0.378,0.7165],[0.3859,0.7165],[0.3937,0.7165],[0.4016,0.7165],[0.4095,0.7165],[0.4174,0.7165],[0.4252,0.7165],[0.4331,0.7165],[0.441,0.7165],[0.4489,0.7165],[0.4567,0.7165],[0.4646,0.7165],[0.4725,0.7165],[0.4803,0.7165],[0.4882,0.7165],[0.4961,0.7165],[0.504,0.7165],[0.5118,0.7165],[0.5197,0.7165],[0.5276,0.7165],[0.5355,0.7165],[0.5433,0.7165],[0.5512,0.7165],[0.5591,0.7165],[0.567,0.7165],[0.5748,0.7165],[0.5827,0.7165],[0.5906,0.7165],[0.5984,0.7165],[0.6063,0.7165],[0.6142,0.7165],[0.6221,0.7165],[0.6299,0.7165],[0.6378,0.7165],[0.6457,0.7165],[0.6536,0.7165],[0.6614,0.7165],[0.6693,0.7165],[0.6772,0.7165],[0.6851,0.7165],[0.6929,0.7165],[0.7008,0.7165],[0.7087,0.7165],[0.7166,0.7165],[0.7244,0.7165],[0.7323,0.7165],[0.7402,0.7165],[0.748,0.7165],[0.7559,0.7165],[0.7638,0.7165],[0.7717,0.7165],[0.7795,0.7165],[0.7874,0.7165],[0.7953,0.7165],[0.8032,0.7165],[0.811,0.7165],[0.8189,0.7165],[0.8268,0.7165],[0.8347,0.7165],[0.8425,0.7165],[0.8504,0.7165],[0.8583,0.7165],[0.8662,0.7165],[0.874,0.7165],[0.8819,0.7165],[0.8898,0.7165],[0.8976,0.7165],[0.9055,0.7165],[0.9134,0.7165],[0.9213,0.7165],[0.9291,0.7165],[0.937,0.7165],[0.9449,0.7165],[0.9528,0.7165],[0.9606,0.7165],[0.9685,0.7165],[0.9764,0.7165],[0.9843,0.7165],[0.9921,0.7165],[1,0.7165],[0.0001,0.7086],[0.0079,0.7086],[0.0158,0.7086],[0.0237,0.7086],[0.0316,0.7086],[0.0394,0.7086],[0.0473,0.7086],[0.0552,0.7086],[0.063,0.7086],[0.0709,0.7086],[0.0788,0.7086],[0.0867,0.7086],[0.0945,0.7086],[0.1024,0.7086],[0.1103,0.7086],[0.1182,0.7086],[0.126,0.7086],[0.1339,0.7086],[0.1418,0.7086],[0.1497,0.7086],[0.1575,0.7086],[0.1654,0.7086],[0.1733,0.7086],[0.1812,0.7086],[0.189,0.7086],[0.1969,0.7086],[0.2048,0.7086],[0.2126,0.7086],[0.2205,0.7086],[0.2284,0.7086],[0.2363,0.7086],[0.2441,0.7086],[0.252,0.7086],[0.2599,0.7086],[0.2678,0.7086],[0.2756,0.7086],[0.2835,0.7086],[0.2914,0.7086],[0.2993,0.7086],[0.3071,0.7086],[0.315,0.7086],[0.3229,0.7086],[0.3308,0.7086],[0.3386,0.7086],[0.3465,0.7086],[0.3544,0.7086],[0.3622,0.7086],[0.3701,0.7086],[0.378,0.7086],[0.3859,0.7086],[0.3937,0.7086],[0.4016,0.7086],[0.4095,0.7086],[0.4174,0.7086],[0.4252,0.7086],[0.4331,0.7086],[0.441,0.7086],[0.4489,0.7086],[0.4567,0.7086],[0.4646,0.7086],[0.4725,0.7086],[0.4803,0.7086],[0.4882,0.7086],[0.4961,0.7086],[0.504,0.7086],[0.5118,0.7086],[0.5197,0.7086],[0.5276,0.7086],[0.5355,0.7086],[0.5433,0.7086],[0.5512,0.7086],[0.5591,0.7086],[0.567,0.7086],[0.5748,0.7086],[0.5827,0.7086],[0.5906,0.7086],[0.5984,0.7086],[0.6063,0.7086],[0.6142,0.7086],[0.6221,0.7086],[0.6299,0.7086],[0.6378,0.7086],[0.6457,0.7086],[0.6536,0.7086],[0.6614,0.7086],[0.6693,0.7086],[0.6772,0.7086],[0.6851,0.7086],[0.6929,0.7086],[0.7008,0.7086],[0.7087,0.7086],[0.7166,0.7086],[0.7244,0.7086],[0.7323,0.7086],[0.7402,0.7086],[0.748,0.7086],[0.7559,0.7086],[0.7638,0.7086],[0.7717,0.7086],[0.7795,0.7086],[0.7874,0.7086],[0.7953,0.7086],[0.8032,0.7086],[0.811,0.7086],[0.8189,0.7086],[0.8268,0.7086],[0.8347,0.7086],[0.8425,0.7086],[0.8504,0.7086],[0.8583,0.7086],[0.8662,0.7086],[0.874,0.7086],[0.8819,0.7086],[0.8898,0.7086],[0.8976,0.7086],[0.9055,0.7086],[0.9134,0.7086],[0.9213,0.7086],[0.9291,0.7086],[0.937,0.7086],[0.9449,0.7086],[0.9528,0.7086],[0.9606,0.7086],[0.9685,0.7086],[0.9764,0.7086],[0.9843,0.7086],[0.9921,0.7086],[1,0.7086],[0.0001,0.7007],[0.0079,0.7007],[0.0158,0.7007],[0.0237,0.7007],[0.0316,0.7007],[0.0394,0.7007],[0.0473,0.7007],[0.0552,0.7007],[0.063,0.7007],[0.0709,0.7007],[0.0788,0.7007],[0.0867,0.7007],[0.0945,0.7007],[0.1024,0.7007],[0.1103,0.7007],[0.1182,0.7007],[0.126,0.7007],[0.1339,0.7007],[0.1418,0.7007],[0.1497,0.7007],[0.1575,0.7007],[0.1654,0.7007],[0.1733,0.7007],[0.1812,0.7007],[0.189,0.7007],[0.1969,0.7007],[0.2048,0.7007],[0.2126,0.7007],[0.2205,0.7007],[0.2284,0.7007],[0.2363,0.7007],[0.2441,0.7007],[0.252,0.7007],[0.2599,0.7007],[0.2678,0.7007],[0.2756,0.7007],[0.2835,0.7007],[0.2914,0.7007],[0.2993,0.7007],[0.3071,0.7007],[0.315,0.7007],[0.3229,0.7007],[0.3308,0.7007],[0.3386,0.7007],[0.3465,0.7007],[0.3544,0.7007],[0.3622,0.7007],[0.3701,0.7007],[0.378,0.7007],[0.3859,0.7007],[0.3937,0.7007],[0.4016,0.7007],[0.4095,0.7007],[0.4174,0.7007],[0.4252,0.7007],[0.4331,0.7007],[0.441,0.7007],[0.4489,0.7007],[0.4567,0.7007],[0.4646,0.7007],[0.4725,0.7007],[0.4803,0.7007],[0.4882,0.7007],[0.4961,0.7007],[0.504,0.7007],[0.5118,0.7007],[0.5197,0.7007],[0.5276,0.7007],[0.5355,0.7007],[0.5433,0.7007],[0.5512,0.7007],[0.5591,0.7007],[0.567,0.7007],[0.5748,0.7007],[0.5827,0.7007],[0.5906,0.7007],[0.5984,0.7007],[0.6063,0.7007],[0.6142,0.7007],[0.6221,0.7007],[0.6299,0.7007],[0.6378,0.7007],[0.6457,0.7007],[0.6536,0.7007],[0.6614,0.7007],[0.6693,0.7007],[0.6772,0.7007],[0.6851,0.7007],[0.6929,0.7007],[0.7008,0.7007],[0.7087,0.7007],[0.7166,0.7007],[0.7244,0.7007],[0.7323,0.7007],[0.7402,0.7007],[0.748,0.7007],[0.7559,0.7007],[0.7638,0.7007],[0.7717,0.7007],[0.7795,0.7007],[0.7874,0.7007],[0.7953,0.7007],[0.8032,0.7007],[0.811,0.7007],[0.8189,0.7007],[0.8268,0.7007],[0.8347,0.7007],[0.8425,0.7007],[0.8504,0.7007],[0.8583,0.7007],[0.8662,0.7007],[0.874,0.7007],[0.8819,0.7007],[0.8898,0.7007],[0.8976,0.7007],[0.9055,0.7007],[0.9134,0.7007],[0.9213,0.7007],[0.9291,0.7007],[0.937,0.7007],[0.9449,0.7007],[0.9528,0.7007],[0.9606,0.7007],[0.9685,0.7007],[0.9764,0.7007],[0.9843,0.7007],[0.9921,0.7007],[1,0.7007],[0.0001,0.6929],[0.0079,0.6929],[0.0158,0.6929],[0.0237,0.6929],[0.0316,0.6929],[0.0394,0.6929],[0.0473,0.6929],[0.0552,0.6929],[0.063,0.6929],[0.0709,0.6929],[0.0788,0.6929],[0.0867,0.6929],[0.0945,0.6929],[0.1024,0.6929],[0.1103,0.6929],[0.1182,0.6929],[0.126,0.6929],[0.1339,0.6929],[0.1418,0.6929],[0.1497,0.6929],[0.1575,0.6929],[0.1654,0.6929],[0.1733,0.6929],[0.1812,0.6929],[0.189,0.6929],[0.1969,0.6929],[0.2048,0.6929],[0.2126,0.6929],[0.2205,0.6929],[0.2284,0.6929],[0.2363,0.6929],[0.2441,0.6929],[0.252,0.6929],[0.2599,0.6929],[0.2678,0.6929],[0.2756,0.6929],[0.2835,0.6929],[0.2914,0.6929],[0.2993,0.6929],[0.3071,0.6929],[0.315,0.6929],[0.3229,0.6929],[0.3308,0.6929],[0.3386,0.6929],[0.3465,0.6929],[0.3544,0.6929],[0.3622,0.6929],[0.3701,0.6929],[0.378,0.6929],[0.3859,0.6929],[0.3937,0.6929],[0.4016,0.6929],[0.4095,0.6929],[0.4174,0.6929],[0.4252,0.6929],[0.4331,0.6929],[0.441,0.6929],[0.4489,0.6929],[0.4567,0.6929],[0.4646,0.6929],[0.4725,0.6929],[0.4803,0.6929],[0.4882,0.6929],[0.4961,0.6929],[0.504,0.6929],[0.5118,0.6929],[0.5197,0.6929],[0.5276,0.6929],[0.5355,0.6929],[0.5433,0.6929],[0.5512,0.6929],[0.5591,0.6929],[0.567,0.6929],[0.5748,0.6929],[0.5827,0.6929],[0.5906,0.6929],[0.5984,0.6929],[0.6063,0.6929],[0.6142,0.6929],[0.6221,0.6929],[0.6299,0.6929],[0.6378,0.6929],[0.6457,0.6929],[0.6536,0.6929],[0.6614,0.6929],[0.6693,0.6929],[0.6772,0.6929],[0.6851,0.6929],[0.6929,0.6929],[0.7008,0.6929],[0.7087,0.6929],[0.7166,0.6929],[0.7244,0.6929],[0.7323,0.6929],[0.7402,0.6929],[0.748,0.6929],[0.7559,0.6929],[0.7638,0.6929],[0.7717,0.6929],[0.7795,0.6929],[0.7874,0.6929],[0.7953,0.6929],[0.8032,0.6929],[0.811,0.6929],[0.8189,0.6929],[0.8268,0.6929],[0.8347,0.6929],[0.8425,0.6929],[0.8504,0.6929],[0.8583,0.6929],[0.8662,0.6929],[0.874,0.6929],[0.8819,0.6929],[0.8898,0.6929],[0.8976,0.6929],[0.9055,0.6929],[0.9134,0.6929],[0.9213,0.6929],[0.9291,0.6929],[0.937,0.6929],[0.9449,0.6929],[0.9528,0.6929],[0.9606,0.6929],[0.9685,0.6929],[0.9764,0.6929],[0.9843,0.6929],[0.9921,0.6929],[1,0.6929],[0.0001,0.685],[0.0079,0.685],[0.0158,0.685],[0.0237,0.685],[0.0316,0.685],[0.0394,0.685],[0.0473,0.685],[0.0552,0.685],[0.063,0.685],[0.0709,0.685],[0.0788,0.685],[0.0867,0.685],[0.0945,0.685],[0.1024,0.685],[0.1103,0.685],[0.1182,0.685],[0.126,0.685],[0.1339,0.685],[0.1418,0.685],[0.1497,0.685],[0.1575,0.685],[0.1654,0.685],[0.1733,0.685],[0.1812,0.685],[0.189,0.685],[0.1969,0.685],[0.2048,0.685],[0.2126,0.685],[0.2205,0.685],[0.2284,0.685],[0.2363,0.685],[0.2441,0.685],[0.252,0.685],[0.2599,0.685],[0.2678,0.685],[0.2756,0.685],[0.2835,0.685],[0.2914,0.685],[0.2993,0.685],[0.3071,0.685],[0.315,0.685],[0.3229,0.685],[0.3308,0.685],[0.3386,0.685],[0.3465,0.685],[0.3544,0.685],[0.3622,0.685],[0.3701,0.685],[0.378,0.685],[0.3859,0.685],[0.3937,0.685],[0.4016,0.685],[0.4095,0.685],[0.4174,0.685],[0.4252,0.685],[0.4331,0.685],[0.441,0.685],[0.4489,0.685],[0.4567,0.685],[0.4646,0.685],[0.4725,0.685],[0.4803,0.685],[0.4882,0.685],[0.4961,0.685],[0.504,0.685],[0.5118,0.685],[0.5197,0.685],[0.5276,0.685],[0.5355,0.685],[0.5433,0.685],[0.5512,0.685],[0.5591,0.685],[0.567,0.685],[0.5748,0.685],[0.5827,0.685],[0.5906,0.685],[0.5984,0.685],[0.6063,0.685],[0.6142,0.685],[0.6221,0.685],[0.6299,0.685],[0.6378,0.685],[0.6457,0.685],[0.6536,0.685],[0.6614,0.685],[0.6693,0.685],[0.6772,0.685],[0.6851,0.685],[0.6929,0.685],[0.7008,0.685],[0.7087,0.685],[0.7166,0.685],[0.7244,0.685],[0.7323,0.685],[0.7402,0.685],[0.748,0.685],[0.7559,0.685],[0.7638,0.685],[0.7717,0.685],[0.7795,0.685],[0.7874,0.685],[0.7953,0.685],[0.8032,0.685],[0.811,0.685],[0.8189,0.685],[0.8268,0.685],[0.8347,0.685],[0.8425,0.685],[0.8504,0.685],[0.8583,0.685],[0.8662,0.685],[0.874,0.685],[0.8819,0.685],[0.8898,0.685],[0.8976,0.685],[0.9055,0.685],[0.9134,0.685],[0.9213,0.685],[0.9291,0.685],[0.937,0.685],[0.9449,0.685],[0.9528,0.685],[0.9606,0.685],[0.9685,0.685],[0.9764,0.685],[0.9843,0.685],[0.9921,0.685],[1,0.685],[0.0001,0.6771],[0.0079,0.6771],[0.0158,0.6771],[0.0237,0.6771],[0.0316,0.6771],[0.0394,0.6771],[0.0473,0.6771],[0.0552,0.6771],[0.063,0.6771],[0.0709,0.6771],[0.0788,0.6771],[0.0867,0.6771],[0.0945,0.6771],[0.1024,0.6771],[0.1103,0.6771],[0.1182,0.6771],[0.126,0.6771],[0.1339,0.6771],[0.1418,0.6771],[0.1497,0.6771],[0.1575,0.6771],[0.1654,0.6771],[0.1733,0.6771],[0.1812,0.6771],[0.189,0.6771],[0.1969,0.6771],[0.2048,0.6771],[0.2126,0.6771],[0.2205,0.6771],[0.2284,0.6771],[0.2363,0.6771],[0.2441,0.6771],[0.252,0.6771],[0.2599,0.6771],[0.2678,0.6771],[0.2756,0.6771],[0.2835,0.6771],[0.2914,0.6771],[0.2993,0.6771],[0.3071,0.6771],[0.315,0.6771],[0.3229,0.6771],[0.3308,0.6771],[0.3386,0.6771],[0.3465,0.6771],[0.3544,0.6771],[0.3622,0.6771],[0.3701,0.6771],[0.378,0.6771],[0.3859,0.6771],[0.3937,0.6771],[0.4016,0.6771],[0.4095,0.6771],[0.4174,0.6771],[0.4252,0.6771],[0.4331,0.6771],[0.441,0.6771],[0.4489,0.6771],[0.4567,0.6771],[0.4646,0.6771],[0.4725,0.6771],[0.4803,0.6771],[0.4882,0.6771],[0.4961,0.6771],[0.504,0.6771],[0.5118,0.6771],[0.5197,0.6771],[0.5276,0.6771],[0.5355,0.6771],[0.5433,0.6771],[0.5512,0.6771],[0.5591,0.6771],[0.567,0.6771],[0.5748,0.6771],[0.5827,0.6771],[0.5906,0.6771],[0.5984,0.6771],[0.6063,0.6771],[0.6142,0.6771],[0.6221,0.6771],[0.6299,0.6771],[0.6378,0.6771],[0.6457,0.6771],[0.6536,0.6771],[0.6614,0.6771],[0.6693,0.6771],[0.6772,0.6771],[0.6851,0.6771],[0.6929,0.6771],[0.7008,0.6771],[0.7087,0.6771],[0.7166,0.6771],[0.7244,0.6771],[0.7323,0.6771],[0.7402,0.6771],[0.748,0.6771],[0.7559,0.6771],[0.7638,0.6771],[0.7717,0.6771],[0.7795,0.6771],[0.7874,0.6771],[0.7953,0.6771],[0.8032,0.6771],[0.811,0.6771],[0.8189,0.6771],[0.8268,0.6771],[0.8347,0.6771],[0.8425,0.6771],[0.8504,0.6771],[0.8583,0.6771],[0.8662,0.6771],[0.874,0.6771],[0.8819,0.6771],[0.8898,0.6771],[0.8976,0.6771],[0.9055,0.6771],[0.9134,0.6771],[0.9213,0.6771],[0.9291,0.6771],[0.937,0.6771],[0.9449,0.6771],[0.9528,0.6771],[0.9606,0.6771],[0.9685,0.6771],[0.9764,0.6771],[0.9843,0.6771],[0.9921,0.6771],[1,0.6771],[0.0001,0.6692],[0.0079,0.6692],[0.0158,0.6692],[0.0237,0.6692],[0.0316,0.6692],[0.0394,0.6692],[0.0473,0.6692],[0.0552,0.6692],[0.063,0.6692],[0.0709,0.6692],[0.0788,0.6692],[0.0867,0.6692],[0.0945,0.6692],[0.1024,0.6692],[0.1103,0.6692],[0.1182,0.6692],[0.126,0.6692],[0.1339,0.6692],[0.1418,0.6692],[0.1497,0.6692],[0.1575,0.6692],[0.1654,0.6692],[0.1733,0.6692],[0.1812,0.6692],[0.189,0.6692],[0.1969,0.6692],[0.2048,0.6692],[0.2126,0.6692],[0.2205,0.6692],[0.2284,0.6692],[0.2363,0.6692],[0.2441,0.6692],[0.252,0.6692],[0.2599,0.6692],[0.2678,0.6692],[0.2756,0.6692],[0.2835,0.6692],[0.2914,0.6692],[0.2993,0.6692],[0.3071,0.6692],[0.315,0.6692],[0.3229,0.6692],[0.3308,0.6692],[0.3386,0.6692],[0.3465,0.6692],[0.3544,0.6692],[0.3622,0.6692],[0.3701,0.6692],[0.378,0.6692],[0.3859,0.6692],[0.3937,0.6692],[0.4016,0.6692],[0.4095,0.6692],[0.4174,0.6692],[0.4252,0.6692],[0.4331,0.6692],[0.441,0.6692],[0.4489,0.6692],[0.4567,0.6692],[0.4646,0.6692],[0.4725,0.6692],[0.4803,0.6692],[0.4882,0.6692],[0.4961,0.6692],[0.504,0.6692],[0.5118,0.6692],[0.5197,0.6692],[0.5276,0.6692],[0.5355,0.6692],[0.5433,0.6692],[0.5512,0.6692],[0.5591,0.6692],[0.567,0.6692],[0.5748,0.6692],[0.5827,0.6692],[0.5906,0.6692],[0.5984,0.6692],[0.6063,0.6692],[0.6142,0.6692],[0.6221,0.6692],[0.6299,0.6692],[0.6378,0.6692],[0.6457,0.6692],[0.6536,0.6692],[0.6614,0.6692],[0.6693,0.6692],[0.6772,0.6692],[0.6851,0.6692],[0.6929,0.6692],[0.7008,0.6692],[0.7087,0.6692],[0.7166,0.6692],[0.7244,0.6692],[0.7323,0.6692],[0.7402,0.6692],[0.748,0.6692],[0.7559,0.6692],[0.7638,0.6692],[0.7717,0.6692],[0.7795,0.6692],[0.7874,0.6692],[0.7953,0.6692],[0.8032,0.6692],[0.811,0.6692],[0.8189,0.6692],[0.8268,0.6692],[0.8347,0.6692],[0.8425,0.6692],[0.8504,0.6692],[0.8583,0.6692],[0.8662,0.6692],[0.874,0.6692],[0.8819,0.6692],[0.8898,0.6692],[0.8976,0.6692],[0.9055,0.6692],[0.9134,0.6692],[0.9213,0.6692],[0.9291,0.6692],[0.937,0.6692],[0.9449,0.6692],[0.9528,0.6692],[0.9606,0.6692],[0.9685,0.6692],[0.9764,0.6692],[0.9843,0.6692],[0.9921,0.6692],[1,0.6692],[0.0001,0.6614],[0.0079,0.6614],[0.0158,0.6614],[0.0237,0.6614],[0.0316,0.6614],[0.0394,0.6614],[0.0473,0.6614],[0.0552,0.6614],[0.063,0.6614],[0.0709,0.6614],[0.0788,0.6614],[0.0867,0.6614],[0.0945,0.6614],[0.1024,0.6614],[0.1103,0.6614],[0.1182,0.6614],[0.126,0.6614],[0.1339,0.6614],[0.1418,0.6614],[0.1497,0.6614],[0.1575,0.6614],[0.1654,0.6614],[0.1733,0.6614],[0.1812,0.6614],[0.189,0.6614],[0.1969,0.6614],[0.2048,0.6614],[0.2126,0.6614],[0.2205,0.6614],[0.2284,0.6614],[0.2363,0.6614],[0.2441,0.6614],[0.252,0.6614],[0.2599,0.6614],[0.2678,0.6614],[0.2756,0.6614],[0.2835,0.6614],[0.2914,0.6614],[0.2993,0.6614],[0.3071,0.6614],[0.315,0.6614],[0.3229,0.6614],[0.3308,0.6614],[0.3386,0.6614],[0.3465,0.6614],[0.3544,0.6614],[0.3622,0.6614],[0.3701,0.6614],[0.378,0.6614],[0.3859,0.6614],[0.3937,0.6614],[0.4016,0.6614],[0.4095,0.6614],[0.4174,0.6614],[0.4252,0.6614],[0.4331,0.6614],[0.441,0.6614],[0.4489,0.6614],[0.4567,0.6614],[0.4646,0.6614],[0.4725,0.6614],[0.4803,0.6614],[0.4882,0.6614],[0.4961,0.6614],[0.504,0.6614],[0.5118,0.6614],[0.5197,0.6614],[0.5276,0.6614],[0.5355,0.6614],[0.5433,0.6614],[0.5512,0.6614],[0.5591,0.6614],[0.567,0.6614],[0.5748,0.6614],[0.5827,0.6614],[0.5906,0.6614],[0.5984,0.6614],[0.6063,0.6614],[0.6142,0.6614],[0.6221,0.6614],[0.6299,0.6614],[0.6378,0.6614],[0.6457,0.6614],[0.6536,0.6614],[0.6614,0.6614],[0.6693,0.6614],[0.6772,0.6614],[0.6851,0.6614],[0.6929,0.6614],[0.7008,0.6614],[0.7087,0.6614],[0.7166,0.6614],[0.7244,0.6614],[0.7323,0.6614],[0.7402,0.6614],[0.748,0.6614],[0.7559,0.6614],[0.7638,0.6614],[0.7717,0.6614],[0.7795,0.6614],[0.7874,0.6614],[0.7953,0.6614],[0.8032,0.6614],[0.811,0.6614],[0.8189,0.6614],[0.8268,0.6614],[0.8347,0.6614],[0.8425,0.6614],[0.8504,0.6614],[0.8583,0.6614],[0.8662,0.6614],[0.874,0.6614],[0.8819,0.6614],[0.8898,0.6614],[0.8976,0.6614],[0.9055,0.6614],[0.9134,0.6614],[0.9213,0.6614],[0.9291,0.6614],[0.937,0.6614],[0.9449,0.6614],[0.9528,0.6614],[0.9606,0.6614],[0.9685,0.6614],[0.9764,0.6614],[0.9843,0.6614],[0.9921,0.6614],[1,0.6614],[0.0001,0.6535],[0.0079,0.6535],[0.0158,0.6535],[0.0237,0.6535],[0.0316,0.6535],[0.0394,0.6535],[0.0473,0.6535],[0.0552,0.6535],[0.063,0.6535],[0.0709,0.6535],[0.0788,0.6535],[0.0867,0.6535],[0.0945,0.6535],[0.1024,0.6535],[0.1103,0.6535],[0.1182,0.6535],[0.126,0.6535],[0.1339,0.6535],[0.1418,0.6535],[0.1497,0.6535],[0.1575,0.6535],[0.1654,0.6535],[0.1733,0.6535],[0.1812,0.6535],[0.189,0.6535],[0.1969,0.6535],[0.2048,0.6535],[0.2126,0.6535],[0.2205,0.6535],[0.2284,0.6535],[0.2363,0.6535],[0.2441,0.6535],[0.252,0.6535],[0.2599,0.6535],[0.2678,0.6535],[0.2756,0.6535],[0.2835,0.6535],[0.2914,0.6535],[0.2993,0.6535],[0.3071,0.6535],[0.315,0.6535],[0.3229,0.6535],[0.3308,0.6535],[0.3386,0.6535],[0.3465,0.6535],[0.3544,0.6535],[0.3622,0.6535],[0.3701,0.6535],[0.378,0.6535],[0.3859,0.6535],[0.3937,0.6535],[0.4016,0.6535],[0.4095,0.6535],[0.4174,0.6535],[0.4252,0.6535],[0.4331,0.6535],[0.441,0.6535],[0.4489,0.6535],[0.4567,0.6535],[0.4646,0.6535],[0.4725,0.6535],[0.4803,0.6535],[0.4882,0.6535],[0.4961,0.6535],[0.504,0.6535],[0.5118,0.6535],[0.5197,0.6535],[0.5276,0.6535],[0.5355,0.6535],[0.5433,0.6535],[0.5512,0.6535],[0.5591,0.6535],[0.567,0.6535],[0.5748,0.6535],[0.5827,0.6535],[0.5906,0.6535],[0.5984,0.6535],[0.6063,0.6535],[0.6142,0.6535],[0.6221,0.6535],[0.6299,0.6535],[0.6378,0.6535],[0.6457,0.6535],[0.6536,0.6535],[0.6614,0.6535],[0.6693,0.6535],[0.6772,0.6535],[0.6851,0.6535],[0.6929,0.6535],[0.7008,0.6535],[0.7087,0.6535],[0.7166,0.6535],[0.7244,0.6535],[0.7323,0.6535],[0.7402,0.6535],[0.748,0.6535],[0.7559,0.6535],[0.7638,0.6535],[0.7717,0.6535],[0.7795,0.6535],[0.7874,0.6535],[0.7953,0.6535],[0.8032,0.6535],[0.811,0.6535],[0.8189,0.6535],[0.8268,0.6535],[0.8347,0.6535],[0.8425,0.6535],[0.8504,0.6535],[0.8583,0.6535],[0.8662,0.6535],[0.874,0.6535],[0.8819,0.6535],[0.8898,0.6535],[0.8976,0.6535],[0.9055,0.6535],[0.9134,0.6535],[0.9213,0.6535],[0.9291,0.6535],[0.937,0.6535],[0.9449,0.6535],[0.9528,0.6535],[0.9606,0.6535],[0.9685,0.6535],[0.9764,0.6535],[0.9843,0.6535],[0.9921,0.6535],[1,0.6535],[0.0001,0.6456],[0.0079,0.6456],[0.0158,0.6456],[0.0237,0.6456],[0.0316,0.6456],[0.0394,0.6456],[0.0473,0.6456],[0.0552,0.6456],[0.063,0.6456],[0.0709,0.6456],[0.0788,0.6456],[0.0867,0.6456],[0.0945,0.6456],[0.1024,0.6456],[0.1103,0.6456],[0.1182,0.6456],[0.126,0.6456],[0.1339,0.6456],[0.1418,0.6456],[0.1497,0.6456],[0.1575,0.6456],[0.1654,0.6456],[0.1733,0.6456],[0.1812,0.6456],[0.189,0.6456],[0.1969,0.6456],[0.2048,0.6456],[0.2126,0.6456],[0.2205,0.6456],[0.2284,0.6456],[0.2363,0.6456],[0.2441,0.6456],[0.252,0.6456],[0.2599,0.6456],[0.2678,0.6456],[0.2756,0.6456],[0.2835,0.6456],[0.2914,0.6456],[0.2993,0.6456],[0.3071,0.6456],[0.315,0.6456],[0.3229,0.6456],[0.3308,0.6456],[0.3386,0.6456],[0.3465,0.6456],[0.3544,0.6456],[0.3622,0.6456],[0.3701,0.6456],[0.378,0.6456],[0.3859,0.6456],[0.3937,0.6456],[0.4016,0.6456],[0.4095,0.6456],[0.4174,0.6456],[0.4252,0.6456],[0.4331,0.6456],[0.441,0.6456],[0.4489,0.6456],[0.4567,0.6456],[0.4646,0.6456],[0.4725,0.6456],[0.4803,0.6456],[0.4882,0.6456],[0.4961,0.6456],[0.504,0.6456],[0.5118,0.6456],[0.5197,0.6456],[0.5276,0.6456],[0.5355,0.6456],[0.5433,0.6456],[0.5512,0.6456],[0.5591,0.6456],[0.567,0.6456],[0.5748,0.6456],[0.5827,0.6456],[0.5906,0.6456],[0.5984,0.6456],[0.6063,0.6456],[0.6142,0.6456],[0.6221,0.6456],[0.6299,0.6456],[0.6378,0.6456],[0.6457,0.6456],[0.6536,0.6456],[0.6614,0.6456],[0.6693,0.6456],[0.6772,0.6456],[0.6851,0.6456],[0.6929,0.6456],[0.7008,0.6456],[0.7087,0.6456],[0.7166,0.6456],[0.7244,0.6456],[0.7323,0.6456],[0.7402,0.6456],[0.748,0.6456],[0.7559,0.6456],[0.7638,0.6456],[0.7717,0.6456],[0.7795,0.6456],[0.7874,0.6456],[0.7953,0.6456],[0.8032,0.6456],[0.811,0.6456],[0.8189,0.6456],[0.8268,0.6456],[0.8347,0.6456],[0.8425,0.6456],[0.8504,0.6456],[0.8583,0.6456],[0.8662,0.6456],[0.874,0.6456],[0.8819,0.6456],[0.8898,0.6456],[0.8976,0.6456],[0.9055,0.6456],[0.9134,0.6456],[0.9213,0.6456],[0.9291,0.6456],[0.937,0.6456],[0.9449,0.6456],[0.9528,0.6456],[0.9606,0.6456],[0.9685,0.6456],[0.9764,0.6456],[0.9843,0.6456],[0.9921,0.6456],[1,0.6456],[0.0001,0.6378],[0.0079,0.6378],[0.0158,0.6378],[0.0237,0.6378],[0.0316,0.6378],[0.0394,0.6378],[0.0473,0.6378],[0.0552,0.6378],[0.063,0.6378],[0.0709,0.6378],[0.0788,0.6378],[0.0867,0.6378],[0.0945,0.6378],[0.1024,0.6378],[0.1103,0.6378],[0.1182,0.6378],[0.126,0.6378],[0.1339,0.6378],[0.1418,0.6378],[0.1497,0.6378],[0.1575,0.6378],[0.1654,0.6378],[0.1733,0.6378],[0.1812,0.6378],[0.189,0.6378],[0.1969,0.6378],[0.2048,0.6378],[0.2126,0.6378],[0.2205,0.6378],[0.2284,0.6378],[0.2363,0.6378],[0.2441,0.6378],[0.252,0.6378],[0.2599,0.6378],[0.2678,0.6378],[0.2756,0.6378],[0.2835,0.6378],[0.2914,0.6378],[0.2993,0.6378],[0.3071,0.6378],[0.315,0.6378],[0.3229,0.6378],[0.3308,0.6378],[0.3386,0.6378],[0.3465,0.6378],[0.3544,0.6378],[0.3622,0.6378],[0.3701,0.6378],[0.378,0.6378],[0.3859,0.6378],[0.3937,0.6378],[0.4016,0.6378],[0.4095,0.6378],[0.4174,0.6378],[0.4252,0.6378],[0.4331,0.6378],[0.441,0.6378],[0.4489,0.6378],[0.4567,0.6378],[0.4646,0.6378],[0.4725,0.6378],[0.4803,0.6378],[0.4882,0.6378],[0.4961,0.6378],[0.504,0.6378],[0.5118,0.6378],[0.5197,0.6378],[0.5276,0.6378],[0.5355,0.6378],[0.5433,0.6378],[0.5512,0.6378],[0.5591,0.6378],[0.567,0.6378],[0.5748,0.6378],[0.5827,0.6378],[0.5906,0.6378],[0.5984,0.6378],[0.6063,0.6378],[0.6142,0.6378],[0.6221,0.6378],[0.6299,0.6378],[0.6378,0.6378],[0.6457,0.6378],[0.6536,0.6378],[0.6614,0.6378],[0.6693,0.6378],[0.6772,0.6378],[0.6851,0.6378],[0.6929,0.6378],[0.7008,0.6378],[0.7087,0.6378],[0.7166,0.6378],[0.7244,0.6378],[0.7323,0.6378],[0.7402,0.6378],[0.748,0.6378],[0.7559,0.6378],[0.7638,0.6378],[0.7717,0.6378],[0.7795,0.6378],[0.7874,0.6378],[0.7953,0.6378],[0.8032,0.6378],[0.811,0.6378],[0.8189,0.6378],[0.8268,0.6378],[0.8347,0.6378],[0.8425,0.6378],[0.8504,0.6378],[0.8583,0.6378],[0.8662,0.6378],[0.874,0.6378],[0.8819,0.6378],[0.8898,0.6378],[0.8976,0.6378],[0.9055,0.6378],[0.9134,0.6378],[0.9213,0.6378],[0.9291,0.6378],[0.937,0.6378],[0.9449,0.6378],[0.9528,0.6378],[0.9606,0.6378],[0.9685,0.6378],[0.9764,0.6378],[0.9843,0.6378],[0.9921,0.6378],[1,0.6378],[0.0001,0.6299],[0.0079,0.6299],[0.0158,0.6299],[0.0237,0.6299],[0.0316,0.6299],[0.0394,0.6299],[0.0473,0.6299],[0.0552,0.6299],[0.063,0.6299],[0.0709,0.6299],[0.0788,0.6299],[0.0867,0.6299],[0.0945,0.6299],[0.1024,0.6299],[0.1103,0.6299],[0.1182,0.6299],[0.126,0.6299],[0.1339,0.6299],[0.1418,0.6299],[0.1497,0.6299],[0.1575,0.6299],[0.1654,0.6299],[0.1733,0.6299],[0.1812,0.6299],[0.189,0.6299],[0.1969,0.6299],[0.2048,0.6299],[0.2126,0.6299],[0.2205,0.6299],[0.2284,0.6299],[0.2363,0.6299],[0.2441,0.6299],[0.252,0.6299],[0.2599,0.6299],[0.2678,0.6299],[0.2756,0.6299],[0.2835,0.6299],[0.2914,0.6299],[0.2993,0.6299],[0.3071,0.6299],[0.315,0.6299],[0.3229,0.6299],[0.3308,0.6299],[0.3386,0.6299],[0.3465,0.6299],[0.3544,0.6299],[0.3622,0.6299],[0.3701,0.6299],[0.378,0.6299],[0.3859,0.6299],[0.3937,0.6299],[0.4016,0.6299],[0.4095,0.6299],[0.4174,0.6299],[0.4252,0.6299],[0.4331,0.6299],[0.441,0.6299],[0.4489,0.6299],[0.4567,0.6299],[0.4646,0.6299],[0.4725,0.6299],[0.4803,0.6299],[0.4882,0.6299],[0.4961,0.6299],[0.504,0.6299],[0.5118,0.6299],[0.5197,0.6299],[0.5276,0.6299],[0.5355,0.6299],[0.5433,0.6299],[0.5512,0.6299],[0.5591,0.6299],[0.567,0.6299],[0.5748,0.6299],[0.5827,0.6299],[0.5906,0.6299],[0.5984,0.6299],[0.6063,0.6299],[0.6142,0.6299],[0.6221,0.6299],[0.6299,0.6299],[0.6378,0.6299],[0.6457,0.6299],[0.6536,0.6299],[0.6614,0.6299],[0.6693,0.6299],[0.6772,0.6299],[0.6851,0.6299],[0.6929,0.6299],[0.7008,0.6299],[0.7087,0.6299],[0.7166,0.6299],[0.7244,0.6299],[0.7323,0.6299],[0.7402,0.6299],[0.748,0.6299],[0.7559,0.6299],[0.7638,0.6299],[0.7717,0.6299],[0.7795,0.6299],[0.7874,0.6299],[0.7953,0.6299],[0.8032,0.6299],[0.811,0.6299],[0.8189,0.6299],[0.8268,0.6299],[0.8347,0.6299],[0.8425,0.6299],[0.8504,0.6299],[0.8583,0.6299],[0.8662,0.6299],[0.874,0.6299],[0.8819,0.6299],[0.8898,0.6299],[0.8976,0.6299],[0.9055,0.6299],[0.9134,0.6299],[0.9213,0.6299],[0.9291,0.6299],[0.937,0.6299],[0.9449,0.6299],[0.9528,0.6299],[0.9606,0.6299],[0.9685,0.6299],[0.9764,0.6299],[0.9843,0.6299],[0.9921,0.6299],[1,0.6299],[0.0001,0.622],[0.0079,0.622],[0.0158,0.622],[0.0237,0.622],[0.0316,0.622],[0.0394,0.622],[0.0473,0.622],[0.0552,0.622],[0.063,0.622],[0.0709,0.622],[0.0788,0.622],[0.0867,0.622],[0.0945,0.622],[0.1024,0.622],[0.1103,0.622],[0.1182,0.622],[0.126,0.622],[0.1339,0.622],[0.1418,0.622],[0.1497,0.622],[0.1575,0.622],[0.1654,0.622],[0.1733,0.622],[0.1812,0.622],[0.189,0.622],[0.1969,0.622],[0.2048,0.622],[0.2126,0.622],[0.2205,0.622],[0.2284,0.622],[0.2363,0.622],[0.2441,0.622],[0.252,0.622],[0.2599,0.622],[0.2678,0.622],[0.2756,0.622],[0.2835,0.622],[0.2914,0.622],[0.2993,0.622],[0.3071,0.622],[0.315,0.622],[0.3229,0.622],[0.3308,0.622],[0.3386,0.622],[0.3465,0.622],[0.3544,0.622],[0.3622,0.622],[0.3701,0.622],[0.378,0.622],[0.3859,0.622],[0.3937,0.622],[0.4016,0.622],[0.4095,0.622],[0.4174,0.622],[0.4252,0.622],[0.4331,0.622],[0.441,0.622],[0.4489,0.622],[0.4567,0.622],[0.4646,0.622],[0.4725,0.622],[0.4803,0.622],[0.4882,0.622],[0.4961,0.622],[0.504,0.622],[0.5118,0.622],[0.5197,0.622],[0.5276,0.622],[0.5355,0.622],[0.5433,0.622],[0.5512,0.622],[0.5591,0.622],[0.567,0.622],[0.5748,0.622],[0.5827,0.622],[0.5906,0.622],[0.5984,0.622],[0.6063,0.622],[0.6142,0.622],[0.6221,0.622],[0.6299,0.622],[0.6378,0.622],[0.6457,0.622],[0.6536,0.622],[0.6614,0.622],[0.6693,0.622],[0.6772,0.622],[0.6851,0.622],[0.6929,0.622],[0.7008,0.622],[0.7087,0.622],[0.7166,0.622],[0.7244,0.622],[0.7323,0.622],[0.7402,0.622],[0.748,0.622],[0.7559,0.622],[0.7638,0.622],[0.7717,0.622],[0.7795,0.622],[0.7874,0.622],[0.7953,0.622],[0.8032,0.622],[0.811,0.622],[0.8189,0.622],[0.8268,0.622],[0.8347,0.622],[0.8425,0.622],[0.8504,0.622],[0.8583,0.622],[0.8662,0.622],[0.874,0.622],[0.8819,0.622],[0.8898,0.622],[0.8976,0.622],[0.9055,0.622],[0.9134,0.622],[0.9213,0.622],[0.9291,0.622],[0.937,0.622],[0.9449,0.622],[0.9528,0.622],[0.9606,0.622],[0.9685,0.622],[0.9764,0.622],[0.9843,0.622],[0.9921,0.622],[1,0.622],[0.0001,0.6141],[0.0079,0.6141],[0.0158,0.6141],[0.0237,0.6141],[0.0316,0.6141],[0.0394,0.6141],[0.0473,0.6141],[0.0552,0.6141],[0.063,0.6141],[0.0709,0.6141],[0.0788,0.6141],[0.0867,0.6141],[0.0945,0.6141],[0.1024,0.6141],[0.1103,0.6141],[0.1182,0.6141],[0.126,0.6141],[0.1339,0.6141],[0.1418,0.6141],[0.1497,0.6141],[0.1575,0.6141],[0.1654,0.6141],[0.1733,0.6141],[0.1812,0.6141],[0.189,0.6141],[0.1969,0.6141],[0.2048,0.6141],[0.2126,0.6141],[0.2205,0.6141],[0.2284,0.6141],[0.2363,0.6141],[0.2441,0.6141],[0.252,0.6141],[0.2599,0.6141],[0.2678,0.6141],[0.2756,0.6141],[0.2835,0.6141],[0.2914,0.6141],[0.2993,0.6141],[0.3071,0.6141],[0.315,0.6141],[0.3229,0.6141],[0.3308,0.6141],[0.3386,0.6141],[0.3465,0.6141],[0.3544,0.6141],[0.3622,0.6141],[0.3701,0.6141],[0.378,0.6141],[0.3859,0.6141],[0.3937,0.6141],[0.4016,0.6141],[0.4095,0.6141],[0.4174,0.6141],[0.4252,0.6141],[0.4331,0.6141],[0.441,0.6141],[0.4489,0.6141],[0.4567,0.6141],[0.4646,0.6141],[0.4725,0.6141],[0.4803,0.6141],[0.4882,0.6141],[0.4961,0.6141],[0.504,0.6141],[0.5118,0.6141],[0.5197,0.6141],[0.5276,0.6141],[0.5355,0.6141],[0.5433,0.6141],[0.5512,0.6141],[0.5591,0.6141],[0.567,0.6141],[0.5748,0.6141],[0.5827,0.6141],[0.5906,0.6141],[0.5984,0.6141],[0.6063,0.6141],[0.6142,0.6141],[0.6221,0.6141],[0.6299,0.6141],[0.6378,0.6141],[0.6457,0.6141],[0.6536,0.6141],[0.6614,0.6141],[0.6693,0.6141],[0.6772,0.6141],[0.6851,0.6141],[0.6929,0.6141],[0.7008,0.6141],[0.7087,0.6141],[0.7166,0.6141],[0.7244,0.6141],[0.7323,0.6141],[0.7402,0.6141],[0.748,0.6141],[0.7559,0.6141],[0.7638,0.6141],[0.7717,0.6141],[0.7795,0.6141],[0.7874,0.6141],[0.7953,0.6141],[0.8032,0.6141],[0.811,0.6141],[0.8189,0.6141],[0.8268,0.6141],[0.8347,0.6141],[0.8425,0.6141],[0.8504,0.6141],[0.8583,0.6141],[0.8662,0.6141],[0.874,0.6141],[0.8819,0.6141],[0.8898,0.6141],[0.8976,0.6141],[0.9055,0.6141],[0.9134,0.6141],[0.9213,0.6141],[0.9291,0.6141],[0.937,0.6141],[0.9449,0.6141],[0.9528,0.6141],[0.9606,0.6141],[0.9685,0.6141],[0.9764,0.6141],[0.9843,0.6141],[0.9921,0.6141],[1,0.6141],[0.0001,0.6063],[0.0079,0.6063],[0.0158,0.6063],[0.0237,0.6063],[0.0316,0.6063],[0.0394,0.6063],[0.0473,0.6063],[0.0552,0.6063],[0.063,0.6063],[0.0709,0.6063],[0.0788,0.6063],[0.0867,0.6063],[0.0945,0.6063],[0.1024,0.6063],[0.1103,0.6063],[0.1182,0.6063],[0.126,0.6063],[0.1339,0.6063],[0.1418,0.6063],[0.1497,0.6063],[0.1575,0.6063],[0.1654,0.6063],[0.1733,0.6063],[0.1812,0.6063],[0.189,0.6063],[0.1969,0.6063],[0.2048,0.6063],[0.2126,0.6063],[0.2205,0.6063],[0.2284,0.6063],[0.2363,0.6063],[0.2441,0.6063],[0.252,0.6063],[0.2599,0.6063],[0.2678,0.6063],[0.2756,0.6063],[0.2835,0.6063],[0.2914,0.6063],[0.2993,0.6063],[0.3071,0.6063],[0.315,0.6063],[0.3229,0.6063],[0.3308,0.6063],[0.3386,0.6063],[0.3465,0.6063],[0.3544,0.6063],[0.3622,0.6063],[0.3701,0.6063],[0.378,0.6063],[0.3859,0.6063],[0.3937,0.6063],[0.4016,0.6063],[0.4095,0.6063],[0.4174,0.6063],[0.4252,0.6063],[0.4331,0.6063],[0.441,0.6063],[0.4489,0.6063],[0.4567,0.6063],[0.4646,0.6063],[0.4725,0.6063],[0.4803,0.6063],[0.4882,0.6063],[0.4961,0.6063],[0.504,0.6063],[0.5118,0.6063],[0.5197,0.6063],[0.5276,0.6063],[0.5355,0.6063],[0.5433,0.6063],[0.5512,0.6063],[0.5591,0.6063],[0.567,0.6063],[0.5748,0.6063],[0.5827,0.6063],[0.5906,0.6063],[0.5984,0.6063],[0.6063,0.6063],[0.6142,0.6063],[0.6221,0.6063],[0.6299,0.6063],[0.6378,0.6063],[0.6457,0.6063],[0.6536,0.6063],[0.6614,0.6063],[0.6693,0.6063],[0.6772,0.6063],[0.6851,0.6063],[0.6929,0.6063],[0.7008,0.6063],[0.7087,0.6063],[0.7166,0.6063],[0.7244,0.6063],[0.7323,0.6063],[0.7402,0.6063],[0.748,0.6063],[0.7559,0.6063],[0.7638,0.6063],[0.7717,0.6063],[0.7795,0.6063],[0.7874,0.6063],[0.7953,0.6063],[0.8032,0.6063],[0.811,0.6063],[0.8189,0.6063],[0.8268,0.6063],[0.8347,0.6063],[0.8425,0.6063],[0.8504,0.6063],[0.8583,0.6063],[0.8662,0.6063],[0.874,0.6063],[0.8819,0.6063],[0.8898,0.6063],[0.8976,0.6063],[0.9055,0.6063],[0.9134,0.6063],[0.9213,0.6063],[0.9291,0.6063],[0.937,0.6063],[0.9449,0.6063],[0.9528,0.6063],[0.9606,0.6063],[0.9685,0.6063],[0.9764,0.6063],[0.9843,0.6063],[0.9921,0.6063],[1,0.6063],[0.0001,0.5984],[0.0079,0.5984],[0.0158,0.5984],[0.0237,0.5984],[0.0316,0.5984],[0.0394,0.5984],[0.0473,0.5984],[0.0552,0.5984],[0.063,0.5984],[0.0709,0.5984],[0.0788,0.5984],[0.0867,0.5984],[0.0945,0.5984],[0.1024,0.5984],[0.1103,0.5984],[0.1182,0.5984],[0.126,0.5984],[0.1339,0.5984],[0.1418,0.5984],[0.1497,0.5984],[0.1575,0.5984],[0.1654,0.5984],[0.1733,0.5984],[0.1812,0.5984],[0.189,0.5984],[0.1969,0.5984],[0.2048,0.5984],[0.2126,0.5984],[0.2205,0.5984],[0.2284,0.5984],[0.2363,0.5984],[0.2441,0.5984],[0.252,0.5984],[0.2599,0.5984],[0.2678,0.5984],[0.2756,0.5984],[0.2835,0.5984],[0.2914,0.5984],[0.2993,0.5984],[0.3071,0.5984],[0.315,0.5984],[0.3229,0.5984],[0.3308,0.5984],[0.3386,0.5984],[0.3465,0.5984],[0.3544,0.5984],[0.3622,0.5984],[0.3701,0.5984],[0.378,0.5984],[0.3859,0.5984],[0.3937,0.5984],[0.4016,0.5984],[0.4095,0.5984],[0.4174,0.5984],[0.4252,0.5984],[0.4331,0.5984],[0.441,0.5984],[0.4489,0.5984],[0.4567,0.5984],[0.4646,0.5984],[0.4725,0.5984],[0.4803,0.5984],[0.4882,0.5984],[0.4961,0.5984],[0.504,0.5984],[0.5118,0.5984],[0.5197,0.5984],[0.5276,0.5984],[0.5355,0.5984],[0.5433,0.5984],[0.5512,0.5984],[0.5591,0.5984],[0.567,0.5984],[0.5748,0.5984],[0.5827,0.5984],[0.5906,0.5984],[0.5984,0.5984],[0.6063,0.5984],[0.6142,0.5984],[0.6221,0.5984],[0.6299,0.5984],[0.6378,0.5984],[0.6457,0.5984],[0.6536,0.5984],[0.6614,0.5984],[0.6693,0.5984],[0.6772,0.5984],[0.6851,0.5984],[0.6929,0.5984],[0.7008,0.5984],[0.7087,0.5984],[0.7166,0.5984],[0.7244,0.5984],[0.7323,0.5984],[0.7402,0.5984],[0.748,0.5984],[0.7559,0.5984],[0.7638,0.5984],[0.7717,0.5984],[0.7795,0.5984],[0.7874,0.5984],[0.7953,0.5984],[0.8032,0.5984],[0.811,0.5984],[0.8189,0.5984],[0.8268,0.5984],[0.8347,0.5984],[0.8425,0.5984],[0.8504,0.5984],[0.8583,0.5984],[0.8662,0.5984],[0.874,0.5984],[0.8819,0.5984],[0.8898,0.5984],[0.8976,0.5984],[0.9055,0.5984],[0.9134,0.5984],[0.9213,0.5984],[0.9291,0.5984],[0.937,0.5984],[0.9449,0.5984],[0.9528,0.5984],[0.9606,0.5984],[0.9685,0.5984],[0.9764,0.5984],[0.9843,0.5984],[0.9921,0.5984],[1,0.5984],[0.0001,0.5905],[0.0079,0.5905],[0.0158,0.5905],[0.0237,0.5905],[0.0316,0.5905],[0.0394,0.5905],[0.0473,0.5905],[0.0552,0.5905],[0.063,0.5905],[0.0709,0.5905],[0.0788,0.5905],[0.0867,0.5905],[0.0945,0.5905],[0.1024,0.5905],[0.1103,0.5905],[0.1182,0.5905],[0.126,0.5905],[0.1339,0.5905],[0.1418,0.5905],[0.1497,0.5905],[0.1575,0.5905],[0.1654,0.5905],[0.1733,0.5905],[0.1812,0.5905],[0.189,0.5905],[0.1969,0.5905],[0.2048,0.5905],[0.2126,0.5905],[0.2205,0.5905],[0.2284,0.5905],[0.2363,0.5905],[0.2441,0.5905],[0.252,0.5905],[0.2599,0.5905],[0.2678,0.5905],[0.2756,0.5905],[0.2835,0.5905],[0.2914,0.5905],[0.2993,0.5905],[0.3071,0.5905],[0.315,0.5905],[0.3229,0.5905],[0.3308,0.5905],[0.3386,0.5905],[0.3465,0.5905],[0.3544,0.5905],[0.3622,0.5905],[0.3701,0.5905],[0.378,0.5905],[0.3859,0.5905],[0.3937,0.5905],[0.4016,0.5905],[0.4095,0.5905],[0.4174,0.5905],[0.4252,0.5905],[0.4331,0.5905],[0.441,0.5905],[0.4489,0.5905],[0.4567,0.5905],[0.4646,0.5905],[0.4725,0.5905],[0.4803,0.5905],[0.4882,0.5905],[0.4961,0.5905],[0.504,0.5905],[0.5118,0.5905],[0.5197,0.5905],[0.5276,0.5905],[0.5355,0.5905],[0.5433,0.5905],[0.5512,0.5905],[0.5591,0.5905],[0.567,0.5905],[0.5748,0.5905],[0.5827,0.5905],[0.5906,0.5905],[0.5984,0.5905],[0.6063,0.5905],[0.6142,0.5905],[0.6221,0.5905],[0.6299,0.5905],[0.6378,0.5905],[0.6457,0.5905],[0.6536,0.5905],[0.6614,0.5905],[0.6693,0.5905],[0.6772,0.5905],[0.6851,0.5905],[0.6929,0.5905],[0.7008,0.5905],[0.7087,0.5905],[0.7166,0.5905],[0.7244,0.5905],[0.7323,0.5905],[0.7402,0.5905],[0.748,0.5905],[0.7559,0.5905],[0.7638,0.5905],[0.7717,0.5905],[0.7795,0.5905],[0.7874,0.5905],[0.7953,0.5905],[0.8032,0.5905],[0.811,0.5905],[0.8189,0.5905],[0.8268,0.5905],[0.8347,0.5905],[0.8425,0.5905],[0.8504,0.5905],[0.8583,0.5905],[0.8662,0.5905],[0.874,0.5905],[0.8819,0.5905],[0.8898,0.5905],[0.8976,0.5905],[0.9055,0.5905],[0.9134,0.5905],[0.9213,0.5905],[0.9291,0.5905],[0.937,0.5905],[0.9449,0.5905],[0.9528,0.5905],[0.9606,0.5905],[0.9685,0.5905],[0.9764,0.5905],[0.9843,0.5905],[0.9921,0.5905],[1,0.5905],[0.0001,0.5826],[0.0079,0.5826],[0.0158,0.5826],[0.0237,0.5826],[0.0316,0.5826],[0.0394,0.5826],[0.0473,0.5826],[0.0552,0.5826],[0.063,0.5826],[0.0709,0.5826],[0.0788,0.5826],[0.0867,0.5826],[0.0945,0.5826],[0.1024,0.5826],[0.1103,0.5826],[0.1182,0.5826],[0.126,0.5826],[0.1339,0.5826],[0.1418,0.5826],[0.1497,0.5826],[0.1575,0.5826],[0.1654,0.5826],[0.1733,0.5826],[0.1812,0.5826],[0.189,0.5826],[0.1969,0.5826],[0.2048,0.5826],[0.2126,0.5826],[0.2205,0.5826],[0.2284,0.5826],[0.2363,0.5826],[0.2441,0.5826],[0.252,0.5826],[0.2599,0.5826],[0.2678,0.5826],[0.2756,0.5826],[0.2835,0.5826],[0.2914,0.5826],[0.2993,0.5826],[0.3071,0.5826],[0.315,0.5826],[0.3229,0.5826],[0.3308,0.5826],[0.3386,0.5826],[0.3465,0.5826],[0.3544,0.5826],[0.3622,0.5826],[0.3701,0.5826],[0.378,0.5826],[0.3859,0.5826],[0.3937,0.5826],[0.4016,0.5826],[0.4095,0.5826],[0.4174,0.5826],[0.4252,0.5826],[0.4331,0.5826],[0.441,0.5826],[0.4489,0.5826],[0.4567,0.5826],[0.4646,0.5826],[0.4725,0.5826],[0.4803,0.5826],[0.4882,0.5826],[0.4961,0.5826],[0.504,0.5826],[0.5118,0.5826],[0.5197,0.5826],[0.5276,0.5826],[0.5355,0.5826],[0.5433,0.5826],[0.5512,0.5826],[0.5591,0.5826],[0.567,0.5826],[0.5748,0.5826],[0.5827,0.5826],[0.5906,0.5826],[0.5984,0.5826],[0.6063,0.5826],[0.6142,0.5826],[0.6221,0.5826],[0.6299,0.5826],[0.6378,0.5826],[0.6457,0.5826],[0.6536,0.5826],[0.6614,0.5826],[0.6693,0.5826],[0.6772,0.5826],[0.6851,0.5826],[0.6929,0.5826],[0.7008,0.5826],[0.7087,0.5826],[0.7166,0.5826],[0.7244,0.5826],[0.7323,0.5826],[0.7402,0.5826],[0.748,0.5826],[0.7559,0.5826],[0.7638,0.5826],[0.7717,0.5826],[0.7795,0.5826],[0.7874,0.5826],[0.7953,0.5826],[0.8032,0.5826],[0.811,0.5826],[0.8189,0.5826],[0.8268,0.5826],[0.8347,0.5826],[0.8425,0.5826],[0.8504,0.5826],[0.8583,0.5826],[0.8662,0.5826],[0.874,0.5826],[0.8819,0.5826],[0.8898,0.5826],[0.8976,0.5826],[0.9055,0.5826],[0.9134,0.5826],[0.9213,0.5826],[0.9291,0.5826],[0.937,0.5826],[0.9449,0.5826],[0.9528,0.5826],[0.9606,0.5826],[0.9685,0.5826],[0.9764,0.5826],[0.9843,0.5826],[0.9921,0.5826],[1,0.5826],[0.0001,0.5748],[0.0079,0.5748],[0.0158,0.5748],[0.0237,0.5748],[0.0316,0.5748],[0.0394,0.5748],[0.0473,0.5748],[0.0552,0.5748],[0.063,0.5748],[0.0709,0.5748],[0.0788,0.5748],[0.0867,0.5748],[0.0945,0.5748],[0.1024,0.5748],[0.1103,0.5748],[0.1182,0.5748],[0.126,0.5748],[0.1339,0.5748],[0.1418,0.5748],[0.1497,0.5748],[0.1575,0.5748],[0.1654,0.5748],[0.1733,0.5748],[0.1812,0.5748],[0.189,0.5748],[0.1969,0.5748],[0.2048,0.5748],[0.2126,0.5748],[0.2205,0.5748],[0.2284,0.5748],[0.2363,0.5748],[0.2441,0.5748],[0.252,0.5748],[0.2599,0.5748],[0.2678,0.5748],[0.2756,0.5748],[0.2835,0.5748],[0.2914,0.5748],[0.2993,0.5748],[0.3071,0.5748],[0.315,0.5748],[0.3229,0.5748],[0.3308,0.5748],[0.3386,0.5748],[0.3465,0.5748],[0.3544,0.5748],[0.3622,0.5748],[0.3701,0.5748],[0.378,0.5748],[0.3859,0.5748],[0.3937,0.5748],[0.4016,0.5748],[0.4095,0.5748],[0.4174,0.5748],[0.4252,0.5748],[0.4331,0.5748],[0.441,0.5748],[0.4489,0.5748],[0.4567,0.5748],[0.4646,0.5748],[0.4725,0.5748],[0.4803,0.5748],[0.4882,0.5748],[0.4961,0.5748],[0.504,0.5748],[0.5118,0.5748],[0.5197,0.5748],[0.5276,0.5748],[0.5355,0.5748],[0.5433,0.5748],[0.5512,0.5748],[0.5591,0.5748],[0.567,0.5748],[0.5748,0.5748],[0.5827,0.5748],[0.5906,0.5748],[0.5984,0.5748],[0.6063,0.5748],[0.6142,0.5748],[0.6221,0.5748],[0.6299,0.5748],[0.6378,0.5748],[0.6457,0.5748],[0.6536,0.5748],[0.6614,0.5748],[0.6693,0.5748],[0.6772,0.5748],[0.6851,0.5748],[0.6929,0.5748],[0.7008,0.5748],[0.7087,0.5748],[0.7166,0.5748],[0.7244,0.5748],[0.7323,0.5748],[0.7402,0.5748],[0.748,0.5748],[0.7559,0.5748],[0.7638,0.5748],[0.7717,0.5748],[0.7795,0.5748],[0.7874,0.5748],[0.7953,0.5748],[0.8032,0.5748],[0.811,0.5748],[0.8189,0.5748],[0.8268,0.5748],[0.8347,0.5748],[0.8425,0.5748],[0.8504,0.5748],[0.8583,0.5748],[0.8662,0.5748],[0.874,0.5748],[0.8819,0.5748],[0.8898,0.5748],[0.8976,0.5748],[0.9055,0.5748],[0.9134,0.5748],[0.9213,0.5748],[0.9291,0.5748],[0.937,0.5748],[0.9449,0.5748],[0.9528,0.5748],[0.9606,0.5748],[0.9685,0.5748],[0.9764,0.5748],[0.9843,0.5748],[0.9921,0.5748],[1,0.5748],[0.0001,0.5669],[0.0079,0.5669],[0.0158,0.5669],[0.0237,0.5669],[0.0316,0.5669],[0.0394,0.5669],[0.0473,0.5669],[0.0552,0.5669],[0.063,0.5669],[0.0709,0.5669],[0.0788,0.5669],[0.0867,0.5669],[0.0945,0.5669],[0.1024,0.5669],[0.1103,0.5669],[0.1182,0.5669],[0.126,0.5669],[0.1339,0.5669],[0.1418,0.5669],[0.1497,0.5669],[0.1575,0.5669],[0.1654,0.5669],[0.1733,0.5669],[0.1812,0.5669],[0.189,0.5669],[0.1969,0.5669],[0.2048,0.5669],[0.2126,0.5669],[0.2205,0.5669],[0.2284,0.5669],[0.2363,0.5669],[0.2441,0.5669],[0.252,0.5669],[0.2599,0.5669],[0.2678,0.5669],[0.2756,0.5669],[0.2835,0.5669],[0.2914,0.5669],[0.2993,0.5669],[0.3071,0.5669],[0.315,0.5669],[0.3229,0.5669],[0.3308,0.5669],[0.3386,0.5669],[0.3465,0.5669],[0.3544,0.5669],[0.3622,0.5669],[0.3701,0.5669],[0.378,0.5669],[0.3859,0.5669],[0.3937,0.5669],[0.4016,0.5669],[0.4095,0.5669],[0.4174,0.5669],[0.4252,0.5669],[0.4331,0.5669],[0.441,0.5669],[0.4489,0.5669],[0.4567,0.5669],[0.4646,0.5669],[0.4725,0.5669],[0.4803,0.5669],[0.4882,0.5669],[0.4961,0.5669],[0.504,0.5669],[0.5118,0.5669],[0.5197,0.5669],[0.5276,0.5669],[0.5355,0.5669],[0.5433,0.5669],[0.5512,0.5669],[0.5591,0.5669],[0.567,0.5669],[0.5748,0.5669],[0.5827,0.5669],[0.5906,0.5669],[0.5984,0.5669],[0.6063,0.5669],[0.6142,0.5669],[0.6221,0.5669],[0.6299,0.5669],[0.6378,0.5669],[0.6457,0.5669],[0.6536,0.5669],[0.6614,0.5669],[0.6693,0.5669],[0.6772,0.5669],[0.6851,0.5669],[0.6929,0.5669],[0.7008,0.5669],[0.7087,0.5669],[0.7166,0.5669],[0.7244,0.5669],[0.7323,0.5669],[0.7402,0.5669],[0.748,0.5669],[0.7559,0.5669],[0.7638,0.5669],[0.7717,0.5669],[0.7795,0.5669],[0.7874,0.5669],[0.7953,0.5669],[0.8032,0.5669],[0.811,0.5669],[0.8189,0.5669],[0.8268,0.5669],[0.8347,0.5669],[0.8425,0.5669],[0.8504,0.5669],[0.8583,0.5669],[0.8662,0.5669],[0.874,0.5669],[0.8819,0.5669],[0.8898,0.5669],[0.8976,0.5669],[0.9055,0.5669],[0.9134,0.5669],[0.9213,0.5669],[0.9291,0.5669],[0.937,0.5669],[0.9449,0.5669],[0.9528,0.5669],[0.9606,0.5669],[0.9685,0.5669],[0.9764,0.5669],[0.9843,0.5669],[0.9921,0.5669],[1,0.5669],[0.0001,0.559],[0.0079,0.559],[0.0158,0.559],[0.0237,0.559],[0.0316,0.559],[0.0394,0.559],[0.0473,0.559],[0.0552,0.559],[0.063,0.559],[0.0709,0.559],[0.0788,0.559],[0.0867,0.559],[0.0945,0.559],[0.1024,0.559],[0.1103,0.559],[0.1182,0.559],[0.126,0.559],[0.1339,0.559],[0.1418,0.559],[0.1497,0.559],[0.1575,0.559],[0.1654,0.559],[0.1733,0.559],[0.1812,0.559],[0.189,0.559],[0.1969,0.559],[0.2048,0.559],[0.2126,0.559],[0.2205,0.559],[0.2284,0.559],[0.2363,0.559],[0.2441,0.559],[0.252,0.559],[0.2599,0.559],[0.2678,0.559],[0.2756,0.559],[0.2835,0.559],[0.2914,0.559],[0.2993,0.559],[0.3071,0.559],[0.315,0.559],[0.3229,0.559],[0.3308,0.559],[0.3386,0.559],[0.3465,0.559],[0.3544,0.559],[0.3622,0.559],[0.3701,0.559],[0.378,0.559],[0.3859,0.559],[0.3937,0.559],[0.4016,0.559],[0.4095,0.559],[0.4174,0.559],[0.4252,0.559],[0.4331,0.559],[0.441,0.559],[0.4489,0.559],[0.4567,0.559],[0.4646,0.559],[0.4725,0.559],[0.4803,0.559],[0.4882,0.559],[0.4961,0.559],[0.504,0.559],[0.5118,0.559],[0.5197,0.559],[0.5276,0.559],[0.5355,0.559],[0.5433,0.559],[0.5512,0.559],[0.5591,0.559],[0.567,0.559],[0.5748,0.559],[0.5827,0.559],[0.5906,0.559],[0.5984,0.559],[0.6063,0.559],[0.6142,0.559],[0.6221,0.559],[0.6299,0.559],[0.6378,0.559],[0.6457,0.559],[0.6536,0.559],[0.6614,0.559],[0.6693,0.559],[0.6772,0.559],[0.6851,0.559],[0.6929,0.559],[0.7008,0.559],[0.7087,0.559],[0.7166,0.559],[0.7244,0.559],[0.7323,0.559],[0.7402,0.559],[0.748,0.559],[0.7559,0.559],[0.7638,0.559],[0.7717,0.559],[0.7795,0.559],[0.7874,0.559],[0.7953,0.559],[0.8032,0.559],[0.811,0.559],[0.8189,0.559],[0.8268,0.559],[0.8347,0.559],[0.8425,0.559],[0.8504,0.559],[0.8583,0.559],[0.8662,0.559],[0.874,0.559],[0.8819,0.559],[0.8898,0.559],[0.8976,0.559],[0.9055,0.559],[0.9134,0.559],[0.9213,0.559],[0.9291,0.559],[0.937,0.559],[0.9449,0.559],[0.9528,0.559],[0.9606,0.559],[0.9685,0.559],[0.9764,0.559],[0.9843,0.559],[0.9921,0.559],[1,0.559],[0.0001,0.5511],[0.0079,0.5511],[0.0158,0.5511],[0.0237,0.5511],[0.0316,0.5511],[0.0394,0.5511],[0.0473,0.5511],[0.0552,0.5511],[0.063,0.5511],[0.0709,0.5511],[0.0788,0.5511],[0.0867,0.5511],[0.0945,0.5511],[0.1024,0.5511],[0.1103,0.5511],[0.1182,0.5511],[0.126,0.5511],[0.1339,0.5511],[0.1418,0.5511],[0.1497,0.5511],[0.1575,0.5511],[0.1654,0.5511],[0.1733,0.5511],[0.1812,0.5511],[0.189,0.5511],[0.1969,0.5511],[0.2048,0.5511],[0.2126,0.5511],[0.2205,0.5511],[0.2284,0.5511],[0.2363,0.5511],[0.2441,0.5511],[0.252,0.5511],[0.2599,0.5511],[0.2678,0.5511],[0.2756,0.5511],[0.2835,0.5511],[0.2914,0.5511],[0.2993,0.5511],[0.3071,0.5511],[0.315,0.5511],[0.3229,0.5511],[0.3308,0.5511],[0.3386,0.5511],[0.3465,0.5511],[0.3544,0.5511],[0.3622,0.5511],[0.3701,0.5511],[0.378,0.5511],[0.3859,0.5511],[0.3937,0.5511],[0.4016,0.5511],[0.4095,0.5511],[0.4174,0.5511],[0.4252,0.5511],[0.4331,0.5511],[0.441,0.5511],[0.4489,0.5511],[0.4567,0.5511],[0.4646,0.5511],[0.4725,0.5511],[0.4803,0.5511],[0.4882,0.5511],[0.4961,0.5511],[0.504,0.5511],[0.5118,0.5511],[0.5197,0.5511],[0.5276,0.5511],[0.5355,0.5511],[0.5433,0.5511],[0.5512,0.5511],[0.5591,0.5511],[0.567,0.5511],[0.5748,0.5511],[0.5827,0.5511],[0.5906,0.5511],[0.5984,0.5511],[0.6063,0.5511],[0.6142,0.5511],[0.6221,0.5511],[0.6299,0.5511],[0.6378,0.5511],[0.6457,0.5511],[0.6536,0.5511],[0.6614,0.5511],[0.6693,0.5511],[0.6772,0.5511],[0.6851,0.5511],[0.6929,0.5511],[0.7008,0.5511],[0.7087,0.5511],[0.7166,0.5511],[0.7244,0.5511],[0.7323,0.5511],[0.7402,0.5511],[0.748,0.5511],[0.7559,0.5511],[0.7638,0.5511],[0.7717,0.5511],[0.7795,0.5511],[0.7874,0.5511],[0.7953,0.5511],[0.8032,0.5511],[0.811,0.5511],[0.8189,0.5511],[0.8268,0.5511],[0.8347,0.5511],[0.8425,0.5511],[0.8504,0.5511],[0.8583,0.5511],[0.8662,0.5511],[0.874,0.5511],[0.8819,0.5511],[0.8898,0.5511],[0.8976,0.5511],[0.9055,0.5511],[0.9134,0.5511],[0.9213,0.5511],[0.9291,0.5511],[0.937,0.5511],[0.9449,0.5511],[0.9528,0.5511],[0.9606,0.5511],[0.9685,0.5511],[0.9764,0.5511],[0.9843,0.5511],[0.9921,0.5511],[1,0.5511],[0.0001,0.5433],[0.0079,0.5433],[0.0158,0.5433],[0.0237,0.5433],[0.0316,0.5433],[0.0394,0.5433],[0.0473,0.5433],[0.0552,0.5433],[0.063,0.5433],[0.0709,0.5433],[0.0788,0.5433],[0.0867,0.5433],[0.0945,0.5433],[0.1024,0.5433],[0.1103,0.5433],[0.1182,0.5433],[0.126,0.5433],[0.1339,0.5433],[0.1418,0.5433],[0.1497,0.5433],[0.1575,0.5433],[0.1654,0.5433],[0.1733,0.5433],[0.1812,0.5433],[0.189,0.5433],[0.1969,0.5433],[0.2048,0.5433],[0.2126,0.5433],[0.2205,0.5433],[0.2284,0.5433],[0.2363,0.5433],[0.2441,0.5433],[0.252,0.5433],[0.2599,0.5433],[0.2678,0.5433],[0.2756,0.5433],[0.2835,0.5433],[0.2914,0.5433],[0.2993,0.5433],[0.3071,0.5433],[0.315,0.5433],[0.3229,0.5433],[0.3308,0.5433],[0.3386,0.5433],[0.3465,0.5433],[0.3544,0.5433],[0.3622,0.5433],[0.3701,0.5433],[0.378,0.5433],[0.3859,0.5433],[0.3937,0.5433],[0.4016,0.5433],[0.4095,0.5433],[0.4174,0.5433],[0.4252,0.5433],[0.4331,0.5433],[0.441,0.5433],[0.4489,0.5433],[0.4567,0.5433],[0.4646,0.5433],[0.4725,0.5433],[0.4803,0.5433],[0.4882,0.5433],[0.4961,0.5433],[0.504,0.5433],[0.5118,0.5433],[0.5197,0.5433],[0.5276,0.5433],[0.5355,0.5433],[0.5433,0.5433],[0.5512,0.5433],[0.5591,0.5433],[0.567,0.5433],[0.5748,0.5433],[0.5827,0.5433],[0.5906,0.5433],[0.5984,0.5433],[0.6063,0.5433],[0.6142,0.5433],[0.6221,0.5433],[0.6299,0.5433],[0.6378,0.5433],[0.6457,0.5433],[0.6536,0.5433],[0.6614,0.5433],[0.6693,0.5433],[0.6772,0.5433],[0.6851,0.5433],[0.6929,0.5433],[0.7008,0.5433],[0.7087,0.5433],[0.7166,0.5433],[0.7244,0.5433],[0.7323,0.5433],[0.7402,0.5433],[0.748,0.5433],[0.7559,0.5433],[0.7638,0.5433],[0.7717,0.5433],[0.7795,0.5433],[0.7874,0.5433],[0.7953,0.5433],[0.8032,0.5433],[0.811,0.5433],[0.8189,0.5433],[0.8268,0.5433],[0.8347,0.5433],[0.8425,0.5433],[0.8504,0.5433],[0.8583,0.5433],[0.8662,0.5433],[0.874,0.5433],[0.8819,0.5433],[0.8898,0.5433],[0.8976,0.5433],[0.9055,0.5433],[0.9134,0.5433],[0.9213,0.5433],[0.9291,0.5433],[0.937,0.5433],[0.9449,0.5433],[0.9528,0.5433],[0.9606,0.5433],[0.9685,0.5433],[0.9764,0.5433],[0.9843,0.5433],[0.9921,0.5433],[1,0.5433],[0.0001,0.5354],[0.0079,0.5354],[0.0158,0.5354],[0.0237,0.5354],[0.0316,0.5354],[0.0394,0.5354],[0.0473,0.5354],[0.0552,0.5354],[0.063,0.5354],[0.0709,0.5354],[0.0788,0.5354],[0.0867,0.5354],[0.0945,0.5354],[0.1024,0.5354],[0.1103,0.5354],[0.1182,0.5354],[0.126,0.5354],[0.1339,0.5354],[0.1418,0.5354],[0.1497,0.5354],[0.1575,0.5354],[0.1654,0.5354],[0.1733,0.5354],[0.1812,0.5354],[0.189,0.5354],[0.1969,0.5354],[0.2048,0.5354],[0.2126,0.5354],[0.2205,0.5354],[0.2284,0.5354],[0.2363,0.5354],[0.2441,0.5354],[0.252,0.5354],[0.2599,0.5354],[0.2678,0.5354],[0.2756,0.5354],[0.2835,0.5354],[0.2914,0.5354],[0.2993,0.5354],[0.3071,0.5354],[0.315,0.5354],[0.3229,0.5354],[0.3308,0.5354],[0.3386,0.5354],[0.3465,0.5354],[0.3544,0.5354],[0.3622,0.5354],[0.3701,0.5354],[0.378,0.5354],[0.3859,0.5354],[0.3937,0.5354],[0.4016,0.5354],[0.4095,0.5354],[0.4174,0.5354],[0.4252,0.5354],[0.4331,0.5354],[0.441,0.5354],[0.4489,0.5354],[0.4567,0.5354],[0.4646,0.5354],[0.4725,0.5354],[0.4803,0.5354],[0.4882,0.5354],[0.4961,0.5354],[0.504,0.5354],[0.5118,0.5354],[0.5197,0.5354],[0.5276,0.5354],[0.5355,0.5354],[0.5433,0.5354],[0.5512,0.5354],[0.5591,0.5354],[0.567,0.5354],[0.5748,0.5354],[0.5827,0.5354],[0.5906,0.5354],[0.5984,0.5354],[0.6063,0.5354],[0.6142,0.5354],[0.6221,0.5354],[0.6299,0.5354],[0.6378,0.5354],[0.6457,0.5354],[0.6536,0.5354],[0.6614,0.5354],[0.6693,0.5354],[0.6772,0.5354],[0.6851,0.5354],[0.6929,0.5354],[0.7008,0.5354],[0.7087,0.5354],[0.7166,0.5354],[0.7244,0.5354],[0.7323,0.5354],[0.7402,0.5354],[0.748,0.5354],[0.7559,0.5354],[0.7638,0.5354],[0.7717,0.5354],[0.7795,0.5354],[0.7874,0.5354],[0.7953,0.5354],[0.8032,0.5354],[0.811,0.5354],[0.8189,0.5354],[0.8268,0.5354],[0.8347,0.5354],[0.8425,0.5354],[0.8504,0.5354],[0.8583,0.5354],[0.8662,0.5354],[0.874,0.5354],[0.8819,0.5354],[0.8898,0.5354],[0.8976,0.5354],[0.9055,0.5354],[0.9134,0.5354],[0.9213,0.5354],[0.9291,0.5354],[0.937,0.5354],[0.9449,0.5354],[0.9528,0.5354],[0.9606,0.5354],[0.9685,0.5354],[0.9764,0.5354],[0.9843,0.5354],[0.9921,0.5354],[1,0.5354],[0.0001,0.5275],[0.0079,0.5275],[0.0158,0.5275],[0.0237,0.5275],[0.0316,0.5275],[0.0394,0.5275],[0.0473,0.5275],[0.0552,0.5275],[0.063,0.5275],[0.0709,0.5275],[0.0788,0.5275],[0.0867,0.5275],[0.0945,0.5275],[0.1024,0.5275],[0.1103,0.5275],[0.1182,0.5275],[0.126,0.5275],[0.1339,0.5275],[0.1418,0.5275],[0.1497,0.5275],[0.1575,0.5275],[0.1654,0.5275],[0.1733,0.5275],[0.1812,0.5275],[0.189,0.5275],[0.1969,0.5275],[0.2048,0.5275],[0.2126,0.5275],[0.2205,0.5275],[0.2284,0.5275],[0.2363,0.5275],[0.2441,0.5275],[0.252,0.5275],[0.2599,0.5275],[0.2678,0.5275],[0.2756,0.5275],[0.2835,0.5275],[0.2914,0.5275],[0.2993,0.5275],[0.3071,0.5275],[0.315,0.5275],[0.3229,0.5275],[0.3308,0.5275],[0.3386,0.5275],[0.3465,0.5275],[0.3544,0.5275],[0.3622,0.5275],[0.3701,0.5275],[0.378,0.5275],[0.3859,0.5275],[0.3937,0.5275],[0.4016,0.5275],[0.4095,0.5275],[0.4174,0.5275],[0.4252,0.5275],[0.4331,0.5275],[0.441,0.5275],[0.4489,0.5275],[0.4567,0.5275],[0.4646,0.5275],[0.4725,0.5275],[0.4803,0.5275],[0.4882,0.5275],[0.4961,0.5275],[0.504,0.5275],[0.5118,0.5275],[0.5197,0.5275],[0.5276,0.5275],[0.5355,0.5275],[0.5433,0.5275],[0.5512,0.5275],[0.5591,0.5275],[0.567,0.5275],[0.5748,0.5275],[0.5827,0.5275],[0.5906,0.5275],[0.5984,0.5275],[0.6063,0.5275],[0.6142,0.5275],[0.6221,0.5275],[0.6299,0.5275],[0.6378,0.5275],[0.6457,0.5275],[0.6536,0.5275],[0.6614,0.5275],[0.6693,0.5275],[0.6772,0.5275],[0.6851,0.5275],[0.6929,0.5275],[0.7008,0.5275],[0.7087,0.5275],[0.7166,0.5275],[0.7244,0.5275],[0.7323,0.5275],[0.7402,0.5275],[0.748,0.5275],[0.7559,0.5275],[0.7638,0.5275],[0.7717,0.5275],[0.7795,0.5275],[0.7874,0.5275],[0.7953,0.5275],[0.8032,0.5275],[0.811,0.5275],[0.8189,0.5275],[0.8268,0.5275],[0.8347,0.5275],[0.8425,0.5275],[0.8504,0.5275],[0.8583,0.5275],[0.8662,0.5275],[0.874,0.5275],[0.8819,0.5275],[0.8898,0.5275],[0.8976,0.5275],[0.9055,0.5275],[0.9134,0.5275],[0.9213,0.5275],[0.9291,0.5275],[0.937,0.5275],[0.9449,0.5275],[0.9528,0.5275],[0.9606,0.5275],[0.9685,0.5275],[0.9764,0.5275],[0.9843,0.5275],[0.9921,0.5275],[1,0.5275],[0.0001,0.5197],[0.0079,0.5197],[0.0158,0.5197],[0.0237,0.5197],[0.0316,0.5197],[0.0394,0.5197],[0.0473,0.5197],[0.0552,0.5197],[0.063,0.5197],[0.0709,0.5197],[0.0788,0.5197],[0.0867,0.5197],[0.0945,0.5197],[0.1024,0.5197],[0.1103,0.5197],[0.1182,0.5197],[0.126,0.5197],[0.1339,0.5197],[0.1418,0.5197],[0.1497,0.5197],[0.1575,0.5197],[0.1654,0.5197],[0.1733,0.5197],[0.1812,0.5197],[0.189,0.5197],[0.1969,0.5197],[0.2048,0.5197],[0.2126,0.5197],[0.2205,0.5197],[0.2284,0.5197],[0.2363,0.5197],[0.2441,0.5197],[0.252,0.5197],[0.2599,0.5197],[0.2678,0.5197],[0.2756,0.5197],[0.2835,0.5197],[0.2914,0.5197],[0.2993,0.5197],[0.3071,0.5197],[0.315,0.5197],[0.3229,0.5197],[0.3308,0.5197],[0.3386,0.5197],[0.3465,0.5197],[0.3544,0.5197],[0.3622,0.5197],[0.3701,0.5197],[0.378,0.5197],[0.3859,0.5197],[0.3937,0.5197],[0.4016,0.5197],[0.4095,0.5197],[0.4174,0.5197],[0.4252,0.5197],[0.4331,0.5197],[0.441,0.5197],[0.4489,0.5197],[0.4567,0.5197],[0.4646,0.5197],[0.4725,0.5197],[0.4803,0.5197],[0.4882,0.5197],[0.4961,0.5197],[0.504,0.5197],[0.5118,0.5197],[0.5197,0.5197],[0.5276,0.5197],[0.5355,0.5197],[0.5433,0.5197],[0.5512,0.5197],[0.5591,0.5197],[0.567,0.5197],[0.5748,0.5197],[0.5827,0.5197],[0.5906,0.5197],[0.5984,0.5197],[0.6063,0.5197],[0.6142,0.5197],[0.6221,0.5197],[0.6299,0.5197],[0.6378,0.5197],[0.6457,0.5197],[0.6536,0.5197],[0.6614,0.5197],[0.6693,0.5197],[0.6772,0.5197],[0.6851,0.5197],[0.6929,0.5197],[0.7008,0.5197],[0.7087,0.5197],[0.7166,0.5197],[0.7244,0.5197],[0.7323,0.5197],[0.7402,0.5197],[0.748,0.5197],[0.7559,0.5197],[0.7638,0.5197],[0.7717,0.5197],[0.7795,0.5197],[0.7874,0.5197],[0.7953,0.5197],[0.8032,0.5197],[0.811,0.5197],[0.8189,0.5197],[0.8268,0.5197],[0.8347,0.5197],[0.8425,0.5197],[0.8504,0.5197],[0.8583,0.5197],[0.8662,0.5197],[0.874,0.5197],[0.8819,0.5197],[0.8898,0.5197],[0.8976,0.5197],[0.9055,0.5197],[0.9134,0.5197],[0.9213,0.5197],[0.9291,0.5197],[0.937,0.5197],[0.9449,0.5197],[0.9528,0.5197],[0.9606,0.5197],[0.9685,0.5197],[0.9764,0.5197],[0.9843,0.5197],[0.9921,0.5197],[1,0.5197],[0.0001,0.5118],[0.0079,0.5118],[0.0158,0.5118],[0.0237,0.5118],[0.0316,0.5118],[0.0394,0.5118],[0.0473,0.5118],[0.0552,0.5118],[0.063,0.5118],[0.0709,0.5118],[0.0788,0.5118],[0.0867,0.5118],[0.0945,0.5118],[0.1024,0.5118],[0.1103,0.5118],[0.1182,0.5118],[0.126,0.5118],[0.1339,0.5118],[0.1418,0.5118],[0.1497,0.5118],[0.1575,0.5118],[0.1654,0.5118],[0.1733,0.5118],[0.1812,0.5118],[0.189,0.5118],[0.1969,0.5118],[0.2048,0.5118],[0.2126,0.5118],[0.2205,0.5118],[0.2284,0.5118],[0.2363,0.5118],[0.2441,0.5118],[0.252,0.5118],[0.2599,0.5118],[0.2678,0.5118],[0.2756,0.5118],[0.2835,0.5118],[0.2914,0.5118],[0.2993,0.5118],[0.3071,0.5118],[0.315,0.5118],[0.3229,0.5118],[0.3308,0.5118],[0.3386,0.5118],[0.3465,0.5118],[0.3544,0.5118],[0.3622,0.5118],[0.3701,0.5118],[0.378,0.5118],[0.3859,0.5118],[0.3937,0.5118],[0.4016,0.5118],[0.4095,0.5118],[0.4174,0.5118],[0.4252,0.5118],[0.4331,0.5118],[0.441,0.5118],[0.4489,0.5118],[0.4567,0.5118],[0.4646,0.5118],[0.4725,0.5118],[0.4803,0.5118],[0.4882,0.5118],[0.4961,0.5118],[0.504,0.5118],[0.5118,0.5118],[0.5197,0.5118],[0.5276,0.5118],[0.5355,0.5118],[0.5433,0.5118],[0.5512,0.5118],[0.5591,0.5118],[0.567,0.5118],[0.5748,0.5118],[0.5827,0.5118],[0.5906,0.5118],[0.5984,0.5118],[0.6063,0.5118],[0.6142,0.5118],[0.6221,0.5118],[0.6299,0.5118],[0.6378,0.5118],[0.6457,0.5118],[0.6536,0.5118],[0.6614,0.5118],[0.6693,0.5118],[0.6772,0.5118],[0.6851,0.5118],[0.6929,0.5118],[0.7008,0.5118],[0.7087,0.5118],[0.7166,0.5118],[0.7244,0.5118],[0.7323,0.5118],[0.7402,0.5118],[0.748,0.5118],[0.7559,0.5118],[0.7638,0.5118],[0.7717,0.5118],[0.7795,0.5118],[0.7874,0.5118],[0.7953,0.5118],[0.8032,0.5118],[0.811,0.5118],[0.8189,0.5118],[0.8268,0.5118],[0.8347,0.5118],[0.8425,0.5118],[0.8504,0.5118],[0.8583,0.5118],[0.8662,0.5118],[0.874,0.5118],[0.8819,0.5118],[0.8898,0.5118],[0.8976,0.5118],[0.9055,0.5118],[0.9134,0.5118],[0.9213,0.5118],[0.9291,0.5118],[0.937,0.5118],[0.9449,0.5118],[0.9528,0.5118],[0.9606,0.5118],[0.9685,0.5118],[0.9764,0.5118],[0.9843,0.5118],[0.9921,0.5118],[1,0.5118],[0.0001,0.5039],[0.0079,0.5039],[0.0158,0.5039],[0.0237,0.5039],[0.0316,0.5039],[0.0394,0.5039],[0.0473,0.5039],[0.0552,0.5039],[0.063,0.5039],[0.0709,0.5039],[0.0788,0.5039],[0.0867,0.5039],[0.0945,0.5039],[0.1024,0.5039],[0.1103,0.5039],[0.1182,0.5039],[0.126,0.5039],[0.1339,0.5039],[0.1418,0.5039],[0.1497,0.5039],[0.1575,0.5039],[0.1654,0.5039],[0.1733,0.5039],[0.1812,0.5039],[0.189,0.5039],[0.1969,0.5039],[0.2048,0.5039],[0.2126,0.5039],[0.2205,0.5039],[0.2284,0.5039],[0.2363,0.5039],[0.2441,0.5039],[0.252,0.5039],[0.2599,0.5039],[0.2678,0.5039],[0.2756,0.5039],[0.2835,0.5039],[0.2914,0.5039],[0.2993,0.5039],[0.3071,0.5039],[0.315,0.5039],[0.3229,0.5039],[0.3308,0.5039],[0.3386,0.5039],[0.3465,0.5039],[0.3544,0.5039],[0.3622,0.5039],[0.3701,0.5039],[0.378,0.5039],[0.3859,0.5039],[0.3937,0.5039],[0.4016,0.5039],[0.4095,0.5039],[0.4174,0.5039],[0.4252,0.5039],[0.4331,0.5039],[0.441,0.5039],[0.4489,0.5039],[0.4567,0.5039],[0.4646,0.5039],[0.4725,0.5039],[0.4803,0.5039],[0.4882,0.5039],[0.4961,0.5039],[0.504,0.5039],[0.5118,0.5039],[0.5197,0.5039],[0.5276,0.5039],[0.5355,0.5039],[0.5433,0.5039],[0.5512,0.5039],[0.5591,0.5039],[0.567,0.5039],[0.5748,0.5039],[0.5827,0.5039],[0.5906,0.5039],[0.5984,0.5039],[0.6063,0.5039],[0.6142,0.5039],[0.6221,0.5039],[0.6299,0.5039],[0.6378,0.5039],[0.6457,0.5039],[0.6536,0.5039],[0.6614,0.5039],[0.6693,0.5039],[0.6772,0.5039],[0.6851,0.5039],[0.6929,0.5039],[0.7008,0.5039],[0.7087,0.5039],[0.7166,0.5039],[0.7244,0.5039],[0.7323,0.5039],[0.7402,0.5039],[0.748,0.5039],[0.7559,0.5039],[0.7638,0.5039],[0.7717,0.5039],[0.7795,0.5039],[0.7874,0.5039],[0.7953,0.5039],[0.8032,0.5039],[0.811,0.5039],[0.8189,0.5039],[0.8268,0.5039],[0.8347,0.5039],[0.8425,0.5039],[0.8504,0.5039],[0.8583,0.5039],[0.8662,0.5039],[0.874,0.5039],[0.8819,0.5039],[0.8898,0.5039],[0.8976,0.5039],[0.9055,0.5039],[0.9134,0.5039],[0.9213,0.5039],[0.9291,0.5039],[0.937,0.5039],[0.9449,0.5039],[0.9528,0.5039],[0.9606,0.5039],[0.9685,0.5039],[0.9764,0.5039],[0.9843,0.5039],[0.9921,0.5039],[1,0.5039],[0.0001,0.496],[0.0079,0.496],[0.0158,0.496],[0.0237,0.496],[0.0316,0.496],[0.0394,0.496],[0.0473,0.496],[0.0552,0.496],[0.063,0.496],[0.0709,0.496],[0.0788,0.496],[0.0867,0.496],[0.0945,0.496],[0.1024,0.496],[0.1103,0.496],[0.1182,0.496],[0.126,0.496],[0.1339,0.496],[0.1418,0.496],[0.1497,0.496],[0.1575,0.496],[0.1654,0.496],[0.1733,0.496],[0.1812,0.496],[0.189,0.496],[0.1969,0.496],[0.2048,0.496],[0.2126,0.496],[0.2205,0.496],[0.2284,0.496],[0.2363,0.496],[0.2441,0.496],[0.252,0.496],[0.2599,0.496],[0.2678,0.496],[0.2756,0.496],[0.2835,0.496],[0.2914,0.496],[0.2993,0.496],[0.3071,0.496],[0.315,0.496],[0.3229,0.496],[0.3308,0.496],[0.3386,0.496],[0.3465,0.496],[0.3544,0.496],[0.3622,0.496],[0.3701,0.496],[0.378,0.496],[0.3859,0.496],[0.3937,0.496],[0.4016,0.496],[0.4095,0.496],[0.4174,0.496],[0.4252,0.496],[0.4331,0.496],[0.441,0.496],[0.4489,0.496],[0.4567,0.496],[0.4646,0.496],[0.4725,0.496],[0.4803,0.496],[0.4882,0.496],[0.4961,0.496],[0.504,0.496],[0.5118,0.496],[0.5197,0.496],[0.5276,0.496],[0.5355,0.496],[0.5433,0.496],[0.5512,0.496],[0.5591,0.496],[0.567,0.496],[0.5748,0.496],[0.5827,0.496],[0.5906,0.496],[0.5984,0.496],[0.6063,0.496],[0.6142,0.496],[0.6221,0.496],[0.6299,0.496],[0.6378,0.496],[0.6457,0.496],[0.6536,0.496],[0.6614,0.496],[0.6693,0.496],[0.6772,0.496],[0.6851,0.496],[0.6929,0.496],[0.7008,0.496],[0.7087,0.496],[0.7166,0.496],[0.7244,0.496],[0.7323,0.496],[0.7402,0.496],[0.748,0.496],[0.7559,0.496],[0.7638,0.496],[0.7717,0.496],[0.7795,0.496],[0.7874,0.496],[0.7953,0.496],[0.8032,0.496],[0.811,0.496],[0.8189,0.496],[0.8268,0.496],[0.8347,0.496],[0.8425,0.496],[0.8504,0.496],[0.8583,0.496],[0.8662,0.496],[0.874,0.496],[0.8819,0.496],[0.8898,0.496],[0.8976,0.496],[0.9055,0.496],[0.9134,0.496],[0.9213,0.496],[0.9291,0.496],[0.937,0.496],[0.9449,0.496],[0.9528,0.496],[0.9606,0.496],[0.9685,0.496],[0.9764,0.496],[0.9843,0.496],[0.9921,0.496],[1,0.496],[0.0001,0.4882],[0.0079,0.4882],[0.0158,0.4882],[0.0237,0.4882],[0.0316,0.4882],[0.0394,0.4882],[0.0473,0.4882],[0.0552,0.4882],[0.063,0.4882],[0.0709,0.4882],[0.0788,0.4882],[0.0867,0.4882],[0.0945,0.4882],[0.1024,0.4882],[0.1103,0.4882],[0.1182,0.4882],[0.126,0.4882],[0.1339,0.4882],[0.1418,0.4882],[0.1497,0.4882],[0.1575,0.4882],[0.1654,0.4882],[0.1733,0.4882],[0.1812,0.4882],[0.189,0.4882],[0.1969,0.4882],[0.2048,0.4882],[0.2126,0.4882],[0.2205,0.4882],[0.2284,0.4882],[0.2363,0.4882],[0.2441,0.4882],[0.252,0.4882],[0.2599,0.4882],[0.2678,0.4882],[0.2756,0.4882],[0.2835,0.4882],[0.2914,0.4882],[0.2993,0.4882],[0.3071,0.4882],[0.315,0.4882],[0.3229,0.4882],[0.3308,0.4882],[0.3386,0.4882],[0.3465,0.4882],[0.3544,0.4882],[0.3622,0.4882],[0.3701,0.4882],[0.378,0.4882],[0.3859,0.4882],[0.3937,0.4882],[0.4016,0.4882],[0.4095,0.4882],[0.4174,0.4882],[0.4252,0.4882],[0.4331,0.4882],[0.441,0.4882],[0.4489,0.4882],[0.4567,0.4882],[0.4646,0.4882],[0.4725,0.4882],[0.4803,0.4882],[0.4882,0.4882],[0.4961,0.4882],[0.504,0.4882],[0.5118,0.4882],[0.5197,0.4882],[0.5276,0.4882],[0.5355,0.4882],[0.5433,0.4882],[0.5512,0.4882],[0.5591,0.4882],[0.567,0.4882],[0.5748,0.4882],[0.5827,0.4882],[0.5906,0.4882],[0.5984,0.4882],[0.6063,0.4882],[0.6142,0.4882],[0.6221,0.4882],[0.6299,0.4882],[0.6378,0.4882],[0.6457,0.4882],[0.6536,0.4882],[0.6614,0.4882],[0.6693,0.4882],[0.6772,0.4882],[0.6851,0.4882],[0.6929,0.4882],[0.7008,0.4882],[0.7087,0.4882],[0.7166,0.4882],[0.7244,0.4882],[0.7323,0.4882],[0.7402,0.4882],[0.748,0.4882],[0.7559,0.4882],[0.7638,0.4882],[0.7717,0.4882],[0.7795,0.4882],[0.7874,0.4882],[0.7953,0.4882],[0.8032,0.4882],[0.811,0.4882],[0.8189,0.4882],[0.8268,0.4882],[0.8347,0.4882],[0.8425,0.4882],[0.8504,0.4882],[0.8583,0.4882],[0.8662,0.4882],[0.874,0.4882],[0.8819,0.4882],[0.8898,0.4882],[0.8976,0.4882],[0.9055,0.4882],[0.9134,0.4882],[0.9213,0.4882],[0.9291,0.4882],[0.937,0.4882],[0.9449,0.4882],[0.9528,0.4882],[0.9606,0.4882],[0.9685,0.4882],[0.9764,0.4882],[0.9843,0.4882],[0.9921,0.4882],[1,0.4882],[0.0001,0.4803],[0.0079,0.4803],[0.0158,0.4803],[0.0237,0.4803],[0.0316,0.4803],[0.0394,0.4803],[0.0473,0.4803],[0.0552,0.4803],[0.063,0.4803],[0.0709,0.4803],[0.0788,0.4803],[0.0867,0.4803],[0.0945,0.4803],[0.1024,0.4803],[0.1103,0.4803],[0.1182,0.4803],[0.126,0.4803],[0.1339,0.4803],[0.1418,0.4803],[0.1497,0.4803],[0.1575,0.4803],[0.1654,0.4803],[0.1733,0.4803],[0.1812,0.4803],[0.189,0.4803],[0.1969,0.4803],[0.2048,0.4803],[0.2126,0.4803],[0.2205,0.4803],[0.2284,0.4803],[0.2363,0.4803],[0.2441,0.4803],[0.252,0.4803],[0.2599,0.4803],[0.2678,0.4803],[0.2756,0.4803],[0.2835,0.4803],[0.2914,0.4803],[0.2993,0.4803],[0.3071,0.4803],[0.315,0.4803],[0.3229,0.4803],[0.3308,0.4803],[0.3386,0.4803],[0.3465,0.4803],[0.3544,0.4803],[0.3622,0.4803],[0.3701,0.4803],[0.378,0.4803],[0.3859,0.4803],[0.3937,0.4803],[0.4016,0.4803],[0.4095,0.4803],[0.4174,0.4803],[0.4252,0.4803],[0.4331,0.4803],[0.441,0.4803],[0.4489,0.4803],[0.4567,0.4803],[0.4646,0.4803],[0.4725,0.4803],[0.4803,0.4803],[0.4882,0.4803],[0.4961,0.4803],[0.504,0.4803],[0.5118,0.4803],[0.5197,0.4803],[0.5276,0.4803],[0.5355,0.4803],[0.5433,0.4803],[0.5512,0.4803],[0.5591,0.4803],[0.567,0.4803],[0.5748,0.4803],[0.5827,0.4803],[0.5906,0.4803],[0.5984,0.4803],[0.6063,0.4803],[0.6142,0.4803],[0.6221,0.4803],[0.6299,0.4803],[0.6378,0.4803],[0.6457,0.4803],[0.6536,0.4803],[0.6614,0.4803],[0.6693,0.4803],[0.6772,0.4803],[0.6851,0.4803],[0.6929,0.4803],[0.7008,0.4803],[0.7087,0.4803],[0.7166,0.4803],[0.7244,0.4803],[0.7323,0.4803],[0.7402,0.4803],[0.748,0.4803],[0.7559,0.4803],[0.7638,0.4803],[0.7717,0.4803],[0.7795,0.4803],[0.7874,0.4803],[0.7953,0.4803],[0.8032,0.4803],[0.811,0.4803],[0.8189,0.4803],[0.8268,0.4803],[0.8347,0.4803],[0.8425,0.4803],[0.8504,0.4803],[0.8583,0.4803],[0.8662,0.4803],[0.874,0.4803],[0.8819,0.4803],[0.8898,0.4803],[0.8976,0.4803],[0.9055,0.4803],[0.9134,0.4803],[0.9213,0.4803],[0.9291,0.4803],[0.937,0.4803],[0.9449,0.4803],[0.9528,0.4803],[0.9606,0.4803],[0.9685,0.4803],[0.9764,0.4803],[0.9843,0.4803],[0.9921,0.4803],[1,0.4803],[0.0001,0.4724],[0.0079,0.4724],[0.0158,0.4724],[0.0237,0.4724],[0.0316,0.4724],[0.0394,0.4724],[0.0473,0.4724],[0.0552,0.4724],[0.063,0.4724],[0.0709,0.4724],[0.0788,0.4724],[0.0867,0.4724],[0.0945,0.4724],[0.1024,0.4724],[0.1103,0.4724],[0.1182,0.4724],[0.126,0.4724],[0.1339,0.4724],[0.1418,0.4724],[0.1497,0.4724],[0.1575,0.4724],[0.1654,0.4724],[0.1733,0.4724],[0.1812,0.4724],[0.189,0.4724],[0.1969,0.4724],[0.2048,0.4724],[0.2126,0.4724],[0.2205,0.4724],[0.2284,0.4724],[0.2363,0.4724],[0.2441,0.4724],[0.252,0.4724],[0.2599,0.4724],[0.2678,0.4724],[0.2756,0.4724],[0.2835,0.4724],[0.2914,0.4724],[0.2993,0.4724],[0.3071,0.4724],[0.315,0.4724],[0.3229,0.4724],[0.3308,0.4724],[0.3386,0.4724],[0.3465,0.4724],[0.3544,0.4724],[0.3622,0.4724],[0.3701,0.4724],[0.378,0.4724],[0.3859,0.4724],[0.3937,0.4724],[0.4016,0.4724],[0.4095,0.4724],[0.4174,0.4724],[0.4252,0.4724],[0.4331,0.4724],[0.441,0.4724],[0.4489,0.4724],[0.4567,0.4724],[0.4646,0.4724],[0.4725,0.4724],[0.4803,0.4724],[0.4882,0.4724],[0.4961,0.4724],[0.504,0.4724],[0.5118,0.4724],[0.5197,0.4724],[0.5276,0.4724],[0.5355,0.4724],[0.5433,0.4724],[0.5512,0.4724],[0.5591,0.4724],[0.567,0.4724],[0.5748,0.4724],[0.5827,0.4724],[0.5906,0.4724],[0.5984,0.4724],[0.6063,0.4724],[0.6142,0.4724],[0.6221,0.4724],[0.6299,0.4724],[0.6378,0.4724],[0.6457,0.4724],[0.6536,0.4724],[0.6614,0.4724],[0.6693,0.4724],[0.6772,0.4724],[0.6851,0.4724],[0.6929,0.4724],[0.7008,0.4724],[0.7087,0.4724],[0.7166,0.4724],[0.7244,0.4724],[0.7323,0.4724],[0.7402,0.4724],[0.748,0.4724],[0.7559,0.4724],[0.7638,0.4724],[0.7717,0.4724],[0.7795,0.4724],[0.7874,0.4724],[0.7953,0.4724],[0.8032,0.4724],[0.811,0.4724],[0.8189,0.4724],[0.8268,0.4724],[0.8347,0.4724],[0.8425,0.4724],[0.8504,0.4724],[0.8583,0.4724],[0.8662,0.4724],[0.874,0.4724],[0.8819,0.4724],[0.8898,0.4724],[0.8976,0.4724],[0.9055,0.4724],[0.9134,0.4724],[0.9213,0.4724],[0.9291,0.4724],[0.937,0.4724],[0.9449,0.4724],[0.9528,0.4724],[0.9606,0.4724],[0.9685,0.4724],[0.9764,0.4724],[0.9843,0.4724],[0.9921,0.4724],[1,0.4724],[0.0001,0.4645],[0.0079,0.4645],[0.0158,0.4645],[0.0237,0.4645],[0.0316,0.4645],[0.0394,0.4645],[0.0473,0.4645],[0.0552,0.4645],[0.063,0.4645],[0.0709,0.4645],[0.0788,0.4645],[0.0867,0.4645],[0.0945,0.4645],[0.1024,0.4645],[0.1103,0.4645],[0.1182,0.4645],[0.126,0.4645],[0.1339,0.4645],[0.1418,0.4645],[0.1497,0.4645],[0.1575,0.4645],[0.1654,0.4645],[0.1733,0.4645],[0.1812,0.4645],[0.189,0.4645],[0.1969,0.4645],[0.2048,0.4645],[0.2126,0.4645],[0.2205,0.4645],[0.2284,0.4645],[0.2363,0.4645],[0.2441,0.4645],[0.252,0.4645],[0.2599,0.4645],[0.2678,0.4645],[0.2756,0.4645],[0.2835,0.4645],[0.2914,0.4645],[0.2993,0.4645],[0.3071,0.4645],[0.315,0.4645],[0.3229,0.4645],[0.3308,0.4645],[0.3386,0.4645],[0.3465,0.4645],[0.3544,0.4645],[0.3622,0.4645],[0.3701,0.4645],[0.378,0.4645],[0.3859,0.4645],[0.3937,0.4645],[0.4016,0.4645],[0.4095,0.4645],[0.4174,0.4645],[0.4252,0.4645],[0.4331,0.4645],[0.441,0.4645],[0.4489,0.4645],[0.4567,0.4645],[0.4646,0.4645],[0.4725,0.4645],[0.4803,0.4645],[0.4882,0.4645],[0.4961,0.4645],[0.504,0.4645],[0.5118,0.4645],[0.5197,0.4645],[0.5276,0.4645],[0.5355,0.4645],[0.5433,0.4645],[0.5512,0.4645],[0.5591,0.4645],[0.567,0.4645],[0.5748,0.4645],[0.5827,0.4645],[0.5906,0.4645],[0.5984,0.4645],[0.6063,0.4645],[0.6142,0.4645],[0.6221,0.4645],[0.6299,0.4645],[0.6378,0.4645],[0.6457,0.4645],[0.6536,0.4645],[0.6614,0.4645],[0.6693,0.4645],[0.6772,0.4645],[0.6851,0.4645],[0.6929,0.4645],[0.7008,0.4645],[0.7087,0.4645],[0.7166,0.4645],[0.7244,0.4645],[0.7323,0.4645],[0.7402,0.4645],[0.748,0.4645],[0.7559,0.4645],[0.7638,0.4645],[0.7717,0.4645],[0.7795,0.4645],[0.7874,0.4645],[0.7953,0.4645],[0.8032,0.4645],[0.811,0.4645],[0.8189,0.4645],[0.8268,0.4645],[0.8347,0.4645],[0.8425,0.4645],[0.8504,0.4645],[0.8583,0.4645],[0.8662,0.4645],[0.874,0.4645],[0.8819,0.4645],[0.8898,0.4645],[0.8976,0.4645],[0.9055,0.4645],[0.9134,0.4645],[0.9213,0.4645],[0.9291,0.4645],[0.937,0.4645],[0.9449,0.4645],[0.9528,0.4645],[0.9606,0.4645],[0.9685,0.4645],[0.9764,0.4645],[0.9843,0.4645],[0.9921,0.4645],[1,0.4645],[0.0001,0.4567],[0.0079,0.4567],[0.0158,0.4567],[0.0237,0.4567],[0.0316,0.4567],[0.0394,0.4567],[0.0473,0.4567],[0.0552,0.4567],[0.063,0.4567],[0.0709,0.4567],[0.0788,0.4567],[0.0867,0.4567],[0.0945,0.4567],[0.1024,0.4567],[0.1103,0.4567],[0.1182,0.4567],[0.126,0.4567],[0.1339,0.4567],[0.1418,0.4567],[0.1497,0.4567],[0.1575,0.4567],[0.1654,0.4567],[0.1733,0.4567],[0.1812,0.4567],[0.189,0.4567],[0.1969,0.4567],[0.2048,0.4567],[0.2126,0.4567],[0.2205,0.4567],[0.2284,0.4567],[0.2363,0.4567],[0.2441,0.4567],[0.252,0.4567],[0.2599,0.4567],[0.2678,0.4567],[0.2756,0.4567],[0.2835,0.4567],[0.2914,0.4567],[0.2993,0.4567],[0.3071,0.4567],[0.315,0.4567],[0.3229,0.4567],[0.3308,0.4567],[0.3386,0.4567],[0.3465,0.4567],[0.3544,0.4567],[0.3622,0.4567],[0.3701,0.4567],[0.378,0.4567],[0.3859,0.4567],[0.3937,0.4567],[0.4016,0.4567],[0.4095,0.4567],[0.4174,0.4567],[0.4252,0.4567],[0.4331,0.4567],[0.441,0.4567],[0.4489,0.4567],[0.4567,0.4567],[0.4646,0.4567],[0.4725,0.4567],[0.4803,0.4567],[0.4882,0.4567],[0.4961,0.4567],[0.504,0.4567],[0.5118,0.4567],[0.5197,0.4567],[0.5276,0.4567],[0.5355,0.4567],[0.5433,0.4567],[0.5512,0.4567],[0.5591,0.4567],[0.567,0.4567],[0.5748,0.4567],[0.5827,0.4567],[0.5906,0.4567],[0.5984,0.4567],[0.6063,0.4567],[0.6142,0.4567],[0.6221,0.4567],[0.6299,0.4567],[0.6378,0.4567],[0.6457,0.4567],[0.6536,0.4567],[0.6614,0.4567],[0.6693,0.4567],[0.6772,0.4567],[0.6851,0.4567],[0.6929,0.4567],[0.7008,0.4567],[0.7087,0.4567],[0.7166,0.4567],[0.7244,0.4567],[0.7323,0.4567],[0.7402,0.4567],[0.748,0.4567],[0.7559,0.4567],[0.7638,0.4567],[0.7717,0.4567],[0.7795,0.4567],[0.7874,0.4567],[0.7953,0.4567],[0.8032,0.4567],[0.811,0.4567],[0.8189,0.4567],[0.8268,0.4567],[0.8347,0.4567],[0.8425,0.4567],[0.8504,0.4567],[0.8583,0.4567],[0.8662,0.4567],[0.874,0.4567],[0.8819,0.4567],[0.8898,0.4567],[0.8976,0.4567],[0.9055,0.4567],[0.9134,0.4567],[0.9213,0.4567],[0.9291,0.4567],[0.937,0.4567],[0.9449,0.4567],[0.9528,0.4567],[0.9606,0.4567],[0.9685,0.4567],[0.9764,0.4567],[0.9843,0.4567],[0.9921,0.4567],[1,0.4567],[0.0001,0.4488],[0.0079,0.4488],[0.0158,0.4488],[0.0237,0.4488],[0.0316,0.4488],[0.0394,0.4488],[0.0473,0.4488],[0.0552,0.4488],[0.063,0.4488],[0.0709,0.4488],[0.0788,0.4488],[0.0867,0.4488],[0.0945,0.4488],[0.1024,0.4488],[0.1103,0.4488],[0.1182,0.4488],[0.126,0.4488],[0.1339,0.4488],[0.1418,0.4488],[0.1497,0.4488],[0.1575,0.4488],[0.1654,0.4488],[0.1733,0.4488],[0.1812,0.4488],[0.189,0.4488],[0.1969,0.4488],[0.2048,0.4488],[0.2126,0.4488],[0.2205,0.4488],[0.2284,0.4488],[0.2363,0.4488],[0.2441,0.4488],[0.252,0.4488],[0.2599,0.4488],[0.2678,0.4488],[0.2756,0.4488],[0.2835,0.4488],[0.2914,0.4488],[0.2993,0.4488],[0.3071,0.4488],[0.315,0.4488],[0.3229,0.4488],[0.3308,0.4488],[0.3386,0.4488],[0.3465,0.4488],[0.3544,0.4488],[0.3622,0.4488],[0.3701,0.4488],[0.378,0.4488],[0.3859,0.4488],[0.3937,0.4488],[0.4016,0.4488],[0.4095,0.4488],[0.4174,0.4488],[0.4252,0.4488],[0.4331,0.4488],[0.441,0.4488],[0.4489,0.4488],[0.4567,0.4488],[0.4646,0.4488],[0.4725,0.4488],[0.4803,0.4488],[0.4882,0.4488],[0.4961,0.4488],[0.504,0.4488],[0.5118,0.4488],[0.5197,0.4488],[0.5276,0.4488],[0.5355,0.4488],[0.5433,0.4488],[0.5512,0.4488],[0.5591,0.4488],[0.567,0.4488],[0.5748,0.4488],[0.5827,0.4488],[0.5906,0.4488],[0.5984,0.4488],[0.6063,0.4488],[0.6142,0.4488],[0.6221,0.4488],[0.6299,0.4488],[0.6378,0.4488],[0.6457,0.4488],[0.6536,0.4488],[0.6614,0.4488],[0.6693,0.4488],[0.6772,0.4488],[0.6851,0.4488],[0.6929,0.4488],[0.7008,0.4488],[0.7087,0.4488],[0.7166,0.4488],[0.7244,0.4488],[0.7323,0.4488],[0.7402,0.4488],[0.748,0.4488],[0.7559,0.4488],[0.7638,0.4488],[0.7717,0.4488],[0.7795,0.4488],[0.7874,0.4488],[0.7953,0.4488],[0.8032,0.4488],[0.811,0.4488],[0.8189,0.4488],[0.8268,0.4488],[0.8347,0.4488],[0.8425,0.4488],[0.8504,0.4488],[0.8583,0.4488],[0.8662,0.4488],[0.874,0.4488],[0.8819,0.4488],[0.8898,0.4488],[0.8976,0.4488],[0.9055,0.4488],[0.9134,0.4488],[0.9213,0.4488],[0.9291,0.4488],[0.937,0.4488],[0.9449,0.4488],[0.9528,0.4488],[0.9606,0.4488],[0.9685,0.4488],[0.9764,0.4488],[0.9843,0.4488],[0.9921,0.4488],[1,0.4488],[0.0001,0.4409],[0.0079,0.4409],[0.0158,0.4409],[0.0237,0.4409],[0.0316,0.4409],[0.0394,0.4409],[0.0473,0.4409],[0.0552,0.4409],[0.063,0.4409],[0.0709,0.4409],[0.0788,0.4409],[0.0867,0.4409],[0.0945,0.4409],[0.1024,0.4409],[0.1103,0.4409],[0.1182,0.4409],[0.126,0.4409],[0.1339,0.4409],[0.1418,0.4409],[0.1497,0.4409],[0.1575,0.4409],[0.1654,0.4409],[0.1733,0.4409],[0.1812,0.4409],[0.189,0.4409],[0.1969,0.4409],[0.2048,0.4409],[0.2126,0.4409],[0.2205,0.4409],[0.2284,0.4409],[0.2363,0.4409],[0.2441,0.4409],[0.252,0.4409],[0.2599,0.4409],[0.2678,0.4409],[0.2756,0.4409],[0.2835,0.4409],[0.2914,0.4409],[0.2993,0.4409],[0.3071,0.4409],[0.315,0.4409],[0.3229,0.4409],[0.3308,0.4409],[0.3386,0.4409],[0.3465,0.4409],[0.3544,0.4409],[0.3622,0.4409],[0.3701,0.4409],[0.378,0.4409],[0.3859,0.4409],[0.3937,0.4409],[0.4016,0.4409],[0.4095,0.4409],[0.4174,0.4409],[0.4252,0.4409],[0.4331,0.4409],[0.441,0.4409],[0.4489,0.4409],[0.4567,0.4409],[0.4646,0.4409],[0.4725,0.4409],[0.4803,0.4409],[0.4882,0.4409],[0.4961,0.4409],[0.504,0.4409],[0.5118,0.4409],[0.5197,0.4409],[0.5276,0.4409],[0.5355,0.4409],[0.5433,0.4409],[0.5512,0.4409],[0.5591,0.4409],[0.567,0.4409],[0.5748,0.4409],[0.5827,0.4409],[0.5906,0.4409],[0.5984,0.4409],[0.6063,0.4409],[0.6142,0.4409],[0.6221,0.4409],[0.6299,0.4409],[0.6378,0.4409],[0.6457,0.4409],[0.6536,0.4409],[0.6614,0.4409],[0.6693,0.4409],[0.6772,0.4409],[0.6851,0.4409],[0.6929,0.4409],[0.7008,0.4409],[0.7087,0.4409],[0.7166,0.4409],[0.7244,0.4409],[0.7323,0.4409],[0.7402,0.4409],[0.748,0.4409],[0.7559,0.4409],[0.7638,0.4409],[0.7717,0.4409],[0.7795,0.4409],[0.7874,0.4409],[0.7953,0.4409],[0.8032,0.4409],[0.811,0.4409],[0.8189,0.4409],[0.8268,0.4409],[0.8347,0.4409],[0.8425,0.4409],[0.8504,0.4409],[0.8583,0.4409],[0.8662,0.4409],[0.874,0.4409],[0.8819,0.4409],[0.8898,0.4409],[0.8976,0.4409],[0.9055,0.4409],[0.9134,0.4409],[0.9213,0.4409],[0.9291,0.4409],[0.937,0.4409],[0.9449,0.4409],[0.9528,0.4409],[0.9606,0.4409],[0.9685,0.4409],[0.9764,0.4409],[0.9843,0.4409],[0.9921,0.4409],[1,0.4409],[0.0001,0.433],[0.0079,0.433],[0.0158,0.433],[0.0237,0.433],[0.0316,0.433],[0.0394,0.433],[0.0473,0.433],[0.0552,0.433],[0.063,0.433],[0.0709,0.433],[0.0788,0.433],[0.0867,0.433],[0.0945,0.433],[0.1024,0.433],[0.1103,0.433],[0.1182,0.433],[0.126,0.433],[0.1339,0.433],[0.1418,0.433],[0.1497,0.433],[0.1575,0.433],[0.1654,0.433],[0.1733,0.433],[0.1812,0.433],[0.189,0.433],[0.1969,0.433],[0.2048,0.433],[0.2126,0.433],[0.2205,0.433],[0.2284,0.433],[0.2363,0.433],[0.2441,0.433],[0.252,0.433],[0.2599,0.433],[0.2678,0.433],[0.2756,0.433],[0.2835,0.433],[0.2914,0.433],[0.2993,0.433],[0.3071,0.433],[0.315,0.433],[0.3229,0.433],[0.3308,0.433],[0.3386,0.433],[0.3465,0.433],[0.3544,0.433],[0.3622,0.433],[0.3701,0.433],[0.378,0.433],[0.3859,0.433],[0.3937,0.433],[0.4016,0.433],[0.4095,0.433],[0.4174,0.433],[0.4252,0.433],[0.4331,0.433],[0.441,0.433],[0.4489,0.433],[0.4567,0.433],[0.4646,0.433],[0.4725,0.433],[0.4803,0.433],[0.4882,0.433],[0.4961,0.433],[0.504,0.433],[0.5118,0.433],[0.5197,0.433],[0.5276,0.433],[0.5355,0.433],[0.5433,0.433],[0.5512,0.433],[0.5591,0.433],[0.567,0.433],[0.5748,0.433],[0.5827,0.433],[0.5906,0.433],[0.5984,0.433],[0.6063,0.433],[0.6142,0.433],[0.6221,0.433],[0.6299,0.433],[0.6378,0.433],[0.6457,0.433],[0.6536,0.433],[0.6614,0.433],[0.6693,0.433],[0.6772,0.433],[0.6851,0.433],[0.6929,0.433],[0.7008,0.433],[0.7087,0.433],[0.7166,0.433],[0.7244,0.433],[0.7323,0.433],[0.7402,0.433],[0.748,0.433],[0.7559,0.433],[0.7638,0.433],[0.7717,0.433],[0.7795,0.433],[0.7874,0.433],[0.7953,0.433],[0.8032,0.433],[0.811,0.433],[0.8189,0.433],[0.8268,0.433],[0.8347,0.433],[0.8425,0.433],[0.8504,0.433],[0.8583,0.433],[0.8662,0.433],[0.874,0.433],[0.8819,0.433],[0.8898,0.433],[0.8976,0.433],[0.9055,0.433],[0.9134,0.433],[0.9213,0.433],[0.9291,0.433],[0.937,0.433],[0.9449,0.433],[0.9528,0.433],[0.9606,0.433],[0.9685,0.433],[0.9764,0.433],[0.9843,0.433],[0.9921,0.433],[1,0.433],[0.0001,0.4252],[0.0079,0.4252],[0.0158,0.4252],[0.0237,0.4252],[0.0316,0.4252],[0.0394,0.4252],[0.0473,0.4252],[0.0552,0.4252],[0.063,0.4252],[0.0709,0.4252],[0.0788,0.4252],[0.0867,0.4252],[0.0945,0.4252],[0.1024,0.4252],[0.1103,0.4252],[0.1182,0.4252],[0.126,0.4252],[0.1339,0.4252],[0.1418,0.4252],[0.1497,0.4252],[0.1575,0.4252],[0.1654,0.4252],[0.1733,0.4252],[0.1812,0.4252],[0.189,0.4252],[0.1969,0.4252],[0.2048,0.4252],[0.2126,0.4252],[0.2205,0.4252],[0.2284,0.4252],[0.2363,0.4252],[0.2441,0.4252],[0.252,0.4252],[0.2599,0.4252],[0.2678,0.4252],[0.2756,0.4252],[0.2835,0.4252],[0.2914,0.4252],[0.2993,0.4252],[0.3071,0.4252],[0.315,0.4252],[0.3229,0.4252],[0.3308,0.4252],[0.3386,0.4252],[0.3465,0.4252],[0.3544,0.4252],[0.3622,0.4252],[0.3701,0.4252],[0.378,0.4252],[0.3859,0.4252],[0.3937,0.4252],[0.4016,0.4252],[0.4095,0.4252],[0.4174,0.4252],[0.4252,0.4252],[0.4331,0.4252],[0.441,0.4252],[0.4489,0.4252],[0.4567,0.4252],[0.4646,0.4252],[0.4725,0.4252],[0.4803,0.4252],[0.4882,0.4252],[0.4961,0.4252],[0.504,0.4252],[0.5118,0.4252],[0.5197,0.4252],[0.5276,0.4252],[0.5355,0.4252],[0.5433,0.4252],[0.5512,0.4252],[0.5591,0.4252],[0.567,0.4252],[0.5748,0.4252],[0.5827,0.4252],[0.5906,0.4252],[0.5984,0.4252],[0.6063,0.4252],[0.6142,0.4252],[0.6221,0.4252],[0.6299,0.4252],[0.6378,0.4252],[0.6457,0.4252],[0.6536,0.4252],[0.6614,0.4252],[0.6693,0.4252],[0.6772,0.4252],[0.6851,0.4252],[0.6929,0.4252],[0.7008,0.4252],[0.7087,0.4252],[0.7166,0.4252],[0.7244,0.4252],[0.7323,0.4252],[0.7402,0.4252],[0.748,0.4252],[0.7559,0.4252],[0.7638,0.4252],[0.7717,0.4252],[0.7795,0.4252],[0.7874,0.4252],[0.7953,0.4252],[0.8032,0.4252],[0.811,0.4252],[0.8189,0.4252],[0.8268,0.4252],[0.8347,0.4252],[0.8425,0.4252],[0.8504,0.4252],[0.8583,0.4252],[0.8662,0.4252],[0.874,0.4252],[0.8819,0.4252],[0.8898,0.4252],[0.8976,0.4252],[0.9055,0.4252],[0.9134,0.4252],[0.9213,0.4252],[0.9291,0.4252],[0.937,0.4252],[0.9449,0.4252],[0.9528,0.4252],[0.9606,0.4252],[0.9685,0.4252],[0.9764,0.4252],[0.9843,0.4252],[0.9921,0.4252],[1,0.4252],[0.0001,0.4173],[0.0079,0.4173],[0.0158,0.4173],[0.0237,0.4173],[0.0316,0.4173],[0.0394,0.4173],[0.0473,0.4173],[0.0552,0.4173],[0.063,0.4173],[0.0709,0.4173],[0.0788,0.4173],[0.0867,0.4173],[0.0945,0.4173],[0.1024,0.4173],[0.1103,0.4173],[0.1182,0.4173],[0.126,0.4173],[0.1339,0.4173],[0.1418,0.4173],[0.1497,0.4173],[0.1575,0.4173],[0.1654,0.4173],[0.1733,0.4173],[0.1812,0.4173],[0.189,0.4173],[0.1969,0.4173],[0.2048,0.4173],[0.2126,0.4173],[0.2205,0.4173],[0.2284,0.4173],[0.2363,0.4173],[0.2441,0.4173],[0.252,0.4173],[0.2599,0.4173],[0.2678,0.4173],[0.2756,0.4173],[0.2835,0.4173],[0.2914,0.4173],[0.2993,0.4173],[0.3071,0.4173],[0.315,0.4173],[0.3229,0.4173],[0.3308,0.4173],[0.3386,0.4173],[0.3465,0.4173],[0.3544,0.4173],[0.3622,0.4173],[0.3701,0.4173],[0.378,0.4173],[0.3859,0.4173],[0.3937,0.4173],[0.4016,0.4173],[0.4095,0.4173],[0.4174,0.4173],[0.4252,0.4173],[0.4331,0.4173],[0.441,0.4173],[0.4489,0.4173],[0.4567,0.4173],[0.4646,0.4173],[0.4725,0.4173],[0.4803,0.4173],[0.4882,0.4173],[0.4961,0.4173],[0.504,0.4173],[0.5118,0.4173],[0.5197,0.4173],[0.5276,0.4173],[0.5355,0.4173],[0.5433,0.4173],[0.5512,0.4173],[0.5591,0.4173],[0.567,0.4173],[0.5748,0.4173],[0.5827,0.4173],[0.5906,0.4173],[0.5984,0.4173],[0.6063,0.4173],[0.6142,0.4173],[0.6221,0.4173],[0.6299,0.4173],[0.6378,0.4173],[0.6457,0.4173],[0.6536,0.4173],[0.6614,0.4173],[0.6693,0.4173],[0.6772,0.4173],[0.6851,0.4173],[0.6929,0.4173],[0.7008,0.4173],[0.7087,0.4173],[0.7166,0.4173],[0.7244,0.4173],[0.7323,0.4173],[0.7402,0.4173],[0.748,0.4173],[0.7559,0.4173],[0.7638,0.4173],[0.7717,0.4173],[0.7795,0.4173],[0.7874,0.4173],[0.7953,0.4173],[0.8032,0.4173],[0.811,0.4173],[0.8189,0.4173],[0.8268,0.4173],[0.8347,0.4173],[0.8425,0.4173],[0.8504,0.4173],[0.8583,0.4173],[0.8662,0.4173],[0.874,0.4173],[0.8819,0.4173],[0.8898,0.4173],[0.8976,0.4173],[0.9055,0.4173],[0.9134,0.4173],[0.9213,0.4173],[0.9291,0.4173],[0.937,0.4173],[0.9449,0.4173],[0.9528,0.4173],[0.9606,0.4173],[0.9685,0.4173],[0.9764,0.4173],[0.9843,0.4173],[0.9921,0.4173],[1,0.4173],[0.0001,0.4094],[0.0079,0.4094],[0.0158,0.4094],[0.0237,0.4094],[0.0316,0.4094],[0.0394,0.4094],[0.0473,0.4094],[0.0552,0.4094],[0.063,0.4094],[0.0709,0.4094],[0.0788,0.4094],[0.0867,0.4094],[0.0945,0.4094],[0.1024,0.4094],[0.1103,0.4094],[0.1182,0.4094],[0.126,0.4094],[0.1339,0.4094],[0.1418,0.4094],[0.1497,0.4094],[0.1575,0.4094],[0.1654,0.4094],[0.1733,0.4094],[0.1812,0.4094],[0.189,0.4094],[0.1969,0.4094],[0.2048,0.4094],[0.2126,0.4094],[0.2205,0.4094],[0.2284,0.4094],[0.2363,0.4094],[0.2441,0.4094],[0.252,0.4094],[0.2599,0.4094],[0.2678,0.4094],[0.2756,0.4094],[0.2835,0.4094],[0.2914,0.4094],[0.2993,0.4094],[0.3071,0.4094],[0.315,0.4094],[0.3229,0.4094],[0.3308,0.4094],[0.3386,0.4094],[0.3465,0.4094],[0.3544,0.4094],[0.3622,0.4094],[0.3701,0.4094],[0.378,0.4094],[0.3859,0.4094],[0.3937,0.4094],[0.4016,0.4094],[0.4095,0.4094],[0.4174,0.4094],[0.4252,0.4094],[0.4331,0.4094],[0.441,0.4094],[0.4489,0.4094],[0.4567,0.4094],[0.4646,0.4094],[0.4725,0.4094],[0.4803,0.4094],[0.4882,0.4094],[0.4961,0.4094],[0.504,0.4094],[0.5118,0.4094],[0.5197,0.4094],[0.5276,0.4094],[0.5355,0.4094],[0.5433,0.4094],[0.5512,0.4094],[0.5591,0.4094],[0.567,0.4094],[0.5748,0.4094],[0.5827,0.4094],[0.5906,0.4094],[0.5984,0.4094],[0.6063,0.4094],[0.6142,0.4094],[0.6221,0.4094],[0.6299,0.4094],[0.6378,0.4094],[0.6457,0.4094],[0.6536,0.4094],[0.6614,0.4094],[0.6693,0.4094],[0.6772,0.4094],[0.6851,0.4094],[0.6929,0.4094],[0.7008,0.4094],[0.7087,0.4094],[0.7166,0.4094],[0.7244,0.4094],[0.7323,0.4094],[0.7402,0.4094],[0.748,0.4094],[0.7559,0.4094],[0.7638,0.4094],[0.7717,0.4094],[0.7795,0.4094],[0.7874,0.4094],[0.7953,0.4094],[0.8032,0.4094],[0.811,0.4094],[0.8189,0.4094],[0.8268,0.4094],[0.8347,0.4094],[0.8425,0.4094],[0.8504,0.4094],[0.8583,0.4094],[0.8662,0.4094],[0.874,0.4094],[0.8819,0.4094],[0.8898,0.4094],[0.8976,0.4094],[0.9055,0.4094],[0.9134,0.4094],[0.9213,0.4094],[0.9291,0.4094],[0.937,0.4094],[0.9449,0.4094],[0.9528,0.4094],[0.9606,0.4094],[0.9685,0.4094],[0.9764,0.4094],[0.9843,0.4094],[0.9921,0.4094],[1,0.4094],[0.0001,0.4016],[0.0079,0.4016],[0.0158,0.4016],[0.0237,0.4016],[0.0316,0.4016],[0.0394,0.4016],[0.0473,0.4016],[0.0552,0.4016],[0.063,0.4016],[0.0709,0.4016],[0.0788,0.4016],[0.0867,0.4016],[0.0945,0.4016],[0.1024,0.4016],[0.1103,0.4016],[0.1182,0.4016],[0.126,0.4016],[0.1339,0.4016],[0.1418,0.4016],[0.1497,0.4016],[0.1575,0.4016],[0.1654,0.4016],[0.1733,0.4016],[0.1812,0.4016],[0.189,0.4016],[0.1969,0.4016],[0.2048,0.4016],[0.2126,0.4016],[0.2205,0.4016],[0.2284,0.4016],[0.2363,0.4016],[0.2441,0.4016],[0.252,0.4016],[0.2599,0.4016],[0.2678,0.4016],[0.2756,0.4016],[0.2835,0.4016],[0.2914,0.4016],[0.2993,0.4016],[0.3071,0.4016],[0.315,0.4016],[0.3229,0.4016],[0.3308,0.4016],[0.3386,0.4016],[0.3465,0.4016],[0.3544,0.4016],[0.3622,0.4016],[0.3701,0.4016],[0.378,0.4016],[0.3859,0.4016],[0.3937,0.4016],[0.4016,0.4016],[0.4095,0.4016],[0.4174,0.4016],[0.4252,0.4016],[0.4331,0.4016],[0.441,0.4016],[0.4489,0.4016],[0.4567,0.4016],[0.4646,0.4016],[0.4725,0.4016],[0.4803,0.4016],[0.4882,0.4016],[0.4961,0.4016],[0.504,0.4016],[0.5118,0.4016],[0.5197,0.4016],[0.5276,0.4016],[0.5355,0.4016],[0.5433,0.4016],[0.5512,0.4016],[0.5591,0.4016],[0.567,0.4016],[0.5748,0.4016],[0.5827,0.4016],[0.5906,0.4016],[0.5984,0.4016],[0.6063,0.4016],[0.6142,0.4016],[0.6221,0.4016],[0.6299,0.4016],[0.6378,0.4016],[0.6457,0.4016],[0.6536,0.4016],[0.6614,0.4016],[0.6693,0.4016],[0.6772,0.4016],[0.6851,0.4016],[0.6929,0.4016],[0.7008,0.4016],[0.7087,0.4016],[0.7166,0.4016],[0.7244,0.4016],[0.7323,0.4016],[0.7402,0.4016],[0.748,0.4016],[0.7559,0.4016],[0.7638,0.4016],[0.7717,0.4016],[0.7795,0.4016],[0.7874,0.4016],[0.7953,0.4016],[0.8032,0.4016],[0.811,0.4016],[0.8189,0.4016],[0.8268,0.4016],[0.8347,0.4016],[0.8425,0.4016],[0.8504,0.4016],[0.8583,0.4016],[0.8662,0.4016],[0.874,0.4016],[0.8819,0.4016],[0.8898,0.4016],[0.8976,0.4016],[0.9055,0.4016],[0.9134,0.4016],[0.9213,0.4016],[0.9291,0.4016],[0.937,0.4016],[0.9449,0.4016],[0.9528,0.4016],[0.9606,0.4016],[0.9685,0.4016],[0.9764,0.4016],[0.9843,0.4016],[0.9921,0.4016],[1,0.4016],[0.0001,0.3937],[0.0079,0.3937],[0.0158,0.3937],[0.0237,0.3937],[0.0316,0.3937],[0.0394,0.3937],[0.0473,0.3937],[0.0552,0.3937],[0.063,0.3937],[0.0709,0.3937],[0.0788,0.3937],[0.0867,0.3937],[0.0945,0.3937],[0.1024,0.3937],[0.1103,0.3937],[0.1182,0.3937],[0.126,0.3937],[0.1339,0.3937],[0.1418,0.3937],[0.1497,0.3937],[0.1575,0.3937],[0.1654,0.3937],[0.1733,0.3937],[0.1812,0.3937],[0.189,0.3937],[0.1969,0.3937],[0.2048,0.3937],[0.2126,0.3937],[0.2205,0.3937],[0.2284,0.3937],[0.2363,0.3937],[0.2441,0.3937],[0.252,0.3937],[0.2599,0.3937],[0.2678,0.3937],[0.2756,0.3937],[0.2835,0.3937],[0.2914,0.3937],[0.2993,0.3937],[0.3071,0.3937],[0.315,0.3937],[0.3229,0.3937],[0.3308,0.3937],[0.3386,0.3937],[0.3465,0.3937],[0.3544,0.3937],[0.3622,0.3937],[0.3701,0.3937],[0.378,0.3937],[0.3859,0.3937],[0.3937,0.3937],[0.4016,0.3937],[0.4095,0.3937],[0.4174,0.3937],[0.4252,0.3937],[0.4331,0.3937],[0.441,0.3937],[0.4489,0.3937],[0.4567,0.3937],[0.4646,0.3937],[0.4725,0.3937],[0.4803,0.3937],[0.4882,0.3937],[0.4961,0.3937],[0.504,0.3937],[0.5118,0.3937],[0.5197,0.3937],[0.5276,0.3937],[0.5355,0.3937],[0.5433,0.3937],[0.5512,0.3937],[0.5591,0.3937],[0.567,0.3937],[0.5748,0.3937],[0.5827,0.3937],[0.5906,0.3937],[0.5984,0.3937],[0.6063,0.3937],[0.6142,0.3937],[0.6221,0.3937],[0.6299,0.3937],[0.6378,0.3937],[0.6457,0.3937],[0.6536,0.3937],[0.6614,0.3937],[0.6693,0.3937],[0.6772,0.3937],[0.6851,0.3937],[0.6929,0.3937],[0.7008,0.3937],[0.7087,0.3937],[0.7166,0.3937],[0.7244,0.3937],[0.7323,0.3937],[0.7402,0.3937],[0.748,0.3937],[0.7559,0.3937],[0.7638,0.3937],[0.7717,0.3937],[0.7795,0.3937],[0.7874,0.3937],[0.7953,0.3937],[0.8032,0.3937],[0.811,0.3937],[0.8189,0.3937],[0.8268,0.3937],[0.8347,0.3937],[0.8425,0.3937],[0.8504,0.3937],[0.8583,0.3937],[0.8662,0.3937],[0.874,0.3937],[0.8819,0.3937],[0.8898,0.3937],[0.8976,0.3937],[0.9055,0.3937],[0.9134,0.3937],[0.9213,0.3937],[0.9291,0.3937],[0.937,0.3937],[0.9449,0.3937],[0.9528,0.3937],[0.9606,0.3937],[0.9685,0.3937],[0.9764,0.3937],[0.9843,0.3937],[0.9921,0.3937],[1,0.3937],[0.0001,0.3858],[0.0079,0.3858],[0.0158,0.3858],[0.0237,0.3858],[0.0316,0.3858],[0.0394,0.3858],[0.0473,0.3858],[0.0552,0.3858],[0.063,0.3858],[0.0709,0.3858],[0.0788,0.3858],[0.0867,0.3858],[0.0945,0.3858],[0.1024,0.3858],[0.1103,0.3858],[0.1182,0.3858],[0.126,0.3858],[0.1339,0.3858],[0.1418,0.3858],[0.1497,0.3858],[0.1575,0.3858],[0.1654,0.3858],[0.1733,0.3858],[0.1812,0.3858],[0.189,0.3858],[0.1969,0.3858],[0.2048,0.3858],[0.2126,0.3858],[0.2205,0.3858],[0.2284,0.3858],[0.2363,0.3858],[0.2441,0.3858],[0.252,0.3858],[0.2599,0.3858],[0.2678,0.3858],[0.2756,0.3858],[0.2835,0.3858],[0.2914,0.3858],[0.2993,0.3858],[0.3071,0.3858],[0.315,0.3858],[0.3229,0.3858],[0.3308,0.3858],[0.3386,0.3858],[0.3465,0.3858],[0.3544,0.3858],[0.3622,0.3858],[0.3701,0.3858],[0.378,0.3858],[0.3859,0.3858],[0.3937,0.3858],[0.4016,0.3858],[0.4095,0.3858],[0.4174,0.3858],[0.4252,0.3858],[0.4331,0.3858],[0.441,0.3858],[0.4489,0.3858],[0.4567,0.3858],[0.4646,0.3858],[0.4725,0.3858],[0.4803,0.3858],[0.4882,0.3858],[0.4961,0.3858],[0.504,0.3858],[0.5118,0.3858],[0.5197,0.3858],[0.5276,0.3858],[0.5355,0.3858],[0.5433,0.3858],[0.5512,0.3858],[0.5591,0.3858],[0.567,0.3858],[0.5748,0.3858],[0.5827,0.3858],[0.5906,0.3858],[0.5984,0.3858],[0.6063,0.3858],[0.6142,0.3858],[0.6221,0.3858],[0.6299,0.3858],[0.6378,0.3858],[0.6457,0.3858],[0.6536,0.3858],[0.6614,0.3858],[0.6693,0.3858],[0.6772,0.3858],[0.6851,0.3858],[0.6929,0.3858],[0.7008,0.3858],[0.7087,0.3858],[0.7166,0.3858],[0.7244,0.3858],[0.7323,0.3858],[0.7402,0.3858],[0.748,0.3858],[0.7559,0.3858],[0.7638,0.3858],[0.7717,0.3858],[0.7795,0.3858],[0.7874,0.3858],[0.7953,0.3858],[0.8032,0.3858],[0.811,0.3858],[0.8189,0.3858],[0.8268,0.3858],[0.8347,0.3858],[0.8425,0.3858],[0.8504,0.3858],[0.8583,0.3858],[0.8662,0.3858],[0.874,0.3858],[0.8819,0.3858],[0.8898,0.3858],[0.8976,0.3858],[0.9055,0.3858],[0.9134,0.3858],[0.9213,0.3858],[0.9291,0.3858],[0.937,0.3858],[0.9449,0.3858],[0.9528,0.3858],[0.9606,0.3858],[0.9685,0.3858],[0.9764,0.3858],[0.9843,0.3858],[0.9921,0.3858],[1,0.3858],[0.0001,0.3779],[0.0079,0.3779],[0.0158,0.3779],[0.0237,0.3779],[0.0316,0.3779],[0.0394,0.3779],[0.0473,0.3779],[0.0552,0.3779],[0.063,0.3779],[0.0709,0.3779],[0.0788,0.3779],[0.0867,0.3779],[0.0945,0.3779],[0.1024,0.3779],[0.1103,0.3779],[0.1182,0.3779],[0.126,0.3779],[0.1339,0.3779],[0.1418,0.3779],[0.1497,0.3779],[0.1575,0.3779],[0.1654,0.3779],[0.1733,0.3779],[0.1812,0.3779],[0.189,0.3779],[0.1969,0.3779],[0.2048,0.3779],[0.2126,0.3779],[0.2205,0.3779],[0.2284,0.3779],[0.2363,0.3779],[0.2441,0.3779],[0.252,0.3779],[0.2599,0.3779],[0.2678,0.3779],[0.2756,0.3779],[0.2835,0.3779],[0.2914,0.3779],[0.2993,0.3779],[0.3071,0.3779],[0.315,0.3779],[0.3229,0.3779],[0.3308,0.3779],[0.3386,0.3779],[0.3465,0.3779],[0.3544,0.3779],[0.3622,0.3779],[0.3701,0.3779],[0.378,0.3779],[0.3859,0.3779],[0.3937,0.3779],[0.4016,0.3779],[0.4095,0.3779],[0.4174,0.3779],[0.4252,0.3779],[0.4331,0.3779],[0.441,0.3779],[0.4489,0.3779],[0.4567,0.3779],[0.4646,0.3779],[0.4725,0.3779],[0.4803,0.3779],[0.4882,0.3779],[0.4961,0.3779],[0.504,0.3779],[0.5118,0.3779],[0.5197,0.3779],[0.5276,0.3779],[0.5355,0.3779],[0.5433,0.3779],[0.5512,0.3779],[0.5591,0.3779],[0.567,0.3779],[0.5748,0.3779],[0.5827,0.3779],[0.5906,0.3779],[0.5984,0.3779],[0.6063,0.3779],[0.6142,0.3779],[0.6221,0.3779],[0.6299,0.3779],[0.6378,0.3779],[0.6457,0.3779],[0.6536,0.3779],[0.6614,0.3779],[0.6693,0.3779],[0.6772,0.3779],[0.6851,0.3779],[0.6929,0.3779],[0.7008,0.3779],[0.7087,0.3779],[0.7166,0.3779],[0.7244,0.3779],[0.7323,0.3779],[0.7402,0.3779],[0.748,0.3779],[0.7559,0.3779],[0.7638,0.3779],[0.7717,0.3779],[0.7795,0.3779],[0.7874,0.3779],[0.7953,0.3779],[0.8032,0.3779],[0.811,0.3779],[0.8189,0.3779],[0.8268,0.3779],[0.8347,0.3779],[0.8425,0.3779],[0.8504,0.3779],[0.8583,0.3779],[0.8662,0.3779],[0.874,0.3779],[0.8819,0.3779],[0.8898,0.3779],[0.8976,0.3779],[0.9055,0.3779],[0.9134,0.3779],[0.9213,0.3779],[0.9291,0.3779],[0.937,0.3779],[0.9449,0.3779],[0.9528,0.3779],[0.9606,0.3779],[0.9685,0.3779],[0.9764,0.3779],[0.9843,0.3779],[0.9921,0.3779],[1,0.3779],[0.0001,0.3701],[0.0079,0.3701],[0.0158,0.3701],[0.0237,0.3701],[0.0316,0.3701],[0.0394,0.3701],[0.0473,0.3701],[0.0552,0.3701],[0.063,0.3701],[0.0709,0.3701],[0.0788,0.3701],[0.0867,0.3701],[0.0945,0.3701],[0.1024,0.3701],[0.1103,0.3701],[0.1182,0.3701],[0.126,0.3701],[0.1339,0.3701],[0.1418,0.3701],[0.1497,0.3701],[0.1575,0.3701],[0.1654,0.3701],[0.1733,0.3701],[0.1812,0.3701],[0.189,0.3701],[0.1969,0.3701],[0.2048,0.3701],[0.2126,0.3701],[0.2205,0.3701],[0.2284,0.3701],[0.2363,0.3701],[0.2441,0.3701],[0.252,0.3701],[0.2599,0.3701],[0.2678,0.3701],[0.2756,0.3701],[0.2835,0.3701],[0.2914,0.3701],[0.2993,0.3701],[0.3071,0.3701],[0.315,0.3701],[0.3229,0.3701],[0.3308,0.3701],[0.3386,0.3701],[0.3465,0.3701],[0.3544,0.3701],[0.3622,0.3701],[0.3701,0.3701],[0.378,0.3701],[0.3859,0.3701],[0.3937,0.3701],[0.4016,0.3701],[0.4095,0.3701],[0.4174,0.3701],[0.4252,0.3701],[0.4331,0.3701],[0.441,0.3701],[0.4489,0.3701],[0.4567,0.3701],[0.4646,0.3701],[0.4725,0.3701],[0.4803,0.3701],[0.4882,0.3701],[0.4961,0.3701],[0.504,0.3701],[0.5118,0.3701],[0.5197,0.3701],[0.5276,0.3701],[0.5355,0.3701],[0.5433,0.3701],[0.5512,0.3701],[0.5591,0.3701],[0.567,0.3701],[0.5748,0.3701],[0.5827,0.3701],[0.5906,0.3701],[0.5984,0.3701],[0.6063,0.3701],[0.6142,0.3701],[0.6221,0.3701],[0.6299,0.3701],[0.6378,0.3701],[0.6457,0.3701],[0.6536,0.3701],[0.6614,0.3701],[0.6693,0.3701],[0.6772,0.3701],[0.6851,0.3701],[0.6929,0.3701],[0.7008,0.3701],[0.7087,0.3701],[0.7166,0.3701],[0.7244,0.3701],[0.7323,0.3701],[0.7402,0.3701],[0.748,0.3701],[0.7559,0.3701],[0.7638,0.3701],[0.7717,0.3701],[0.7795,0.3701],[0.7874,0.3701],[0.7953,0.3701],[0.8032,0.3701],[0.811,0.3701],[0.8189,0.3701],[0.8268,0.3701],[0.8347,0.3701],[0.8425,0.3701],[0.8504,0.3701],[0.8583,0.3701],[0.8662,0.3701],[0.874,0.3701],[0.8819,0.3701],[0.8898,0.3701],[0.8976,0.3701],[0.9055,0.3701],[0.9134,0.3701],[0.9213,0.3701],[0.9291,0.3701],[0.937,0.3701],[0.9449,0.3701],[0.9528,0.3701],[0.9606,0.3701],[0.9685,0.3701],[0.9764,0.3701],[0.9843,0.3701],[0.9921,0.3701],[1,0.3701],[0.0001,0.3622],[0.0079,0.3622],[0.0158,0.3622],[0.0237,0.3622],[0.0316,0.3622],[0.0394,0.3622],[0.0473,0.3622],[0.0552,0.3622],[0.063,0.3622],[0.0709,0.3622],[0.0788,0.3622],[0.0867,0.3622],[0.0945,0.3622],[0.1024,0.3622],[0.1103,0.3622],[0.1182,0.3622],[0.126,0.3622],[0.1339,0.3622],[0.1418,0.3622],[0.1497,0.3622],[0.1575,0.3622],[0.1654,0.3622],[0.1733,0.3622],[0.1812,0.3622],[0.189,0.3622],[0.1969,0.3622],[0.2048,0.3622],[0.2126,0.3622],[0.2205,0.3622],[0.2284,0.3622],[0.2363,0.3622],[0.2441,0.3622],[0.252,0.3622],[0.2599,0.3622],[0.2678,0.3622],[0.2756,0.3622],[0.2835,0.3622],[0.2914,0.3622],[0.2993,0.3622],[0.3071,0.3622],[0.315,0.3622],[0.3229,0.3622],[0.3308,0.3622],[0.3386,0.3622],[0.3465,0.3622],[0.3544,0.3622],[0.3622,0.3622],[0.3701,0.3622],[0.378,0.3622],[0.3859,0.3622],[0.3937,0.3622],[0.4016,0.3622],[0.4095,0.3622],[0.4174,0.3622],[0.4252,0.3622],[0.4331,0.3622],[0.441,0.3622],[0.4489,0.3622],[0.4567,0.3622],[0.4646,0.3622],[0.4725,0.3622],[0.4803,0.3622],[0.4882,0.3622],[0.4961,0.3622],[0.504,0.3622],[0.5118,0.3622],[0.5197,0.3622],[0.5276,0.3622],[0.5355,0.3622],[0.5433,0.3622],[0.5512,0.3622],[0.5591,0.3622],[0.567,0.3622],[0.5748,0.3622],[0.5827,0.3622],[0.5906,0.3622],[0.5984,0.3622],[0.6063,0.3622],[0.6142,0.3622],[0.6221,0.3622],[0.6299,0.3622],[0.6378,0.3622],[0.6457,0.3622],[0.6536,0.3622],[0.6614,0.3622],[0.6693,0.3622],[0.6772,0.3622],[0.6851,0.3622],[0.6929,0.3622],[0.7008,0.3622],[0.7087,0.3622],[0.7166,0.3622],[0.7244,0.3622],[0.7323,0.3622],[0.7402,0.3622],[0.748,0.3622],[0.7559,0.3622],[0.7638,0.3622],[0.7717,0.3622],[0.7795,0.3622],[0.7874,0.3622],[0.7953,0.3622],[0.8032,0.3622],[0.811,0.3622],[0.8189,0.3622],[0.8268,0.3622],[0.8347,0.3622],[0.8425,0.3622],[0.8504,0.3622],[0.8583,0.3622],[0.8662,0.3622],[0.874,0.3622],[0.8819,0.3622],[0.8898,0.3622],[0.8976,0.3622],[0.9055,0.3622],[0.9134,0.3622],[0.9213,0.3622],[0.9291,0.3622],[0.937,0.3622],[0.9449,0.3622],[0.9528,0.3622],[0.9606,0.3622],[0.9685,0.3622],[0.9764,0.3622],[0.9843,0.3622],[0.9921,0.3622],[1,0.3622],[0.0001,0.3543],[0.0079,0.3543],[0.0158,0.3543],[0.0237,0.3543],[0.0316,0.3543],[0.0394,0.3543],[0.0473,0.3543],[0.0552,0.3543],[0.063,0.3543],[0.0709,0.3543],[0.0788,0.3543],[0.0867,0.3543],[0.0945,0.3543],[0.1024,0.3543],[0.1103,0.3543],[0.1182,0.3543],[0.126,0.3543],[0.1339,0.3543],[0.1418,0.3543],[0.1497,0.3543],[0.1575,0.3543],[0.1654,0.3543],[0.1733,0.3543],[0.1812,0.3543],[0.189,0.3543],[0.1969,0.3543],[0.2048,0.3543],[0.2126,0.3543],[0.2205,0.3543],[0.2284,0.3543],[0.2363,0.3543],[0.2441,0.3543],[0.252,0.3543],[0.2599,0.3543],[0.2678,0.3543],[0.2756,0.3543],[0.2835,0.3543],[0.2914,0.3543],[0.2993,0.3543],[0.3071,0.3543],[0.315,0.3543],[0.3229,0.3543],[0.3308,0.3543],[0.3386,0.3543],[0.3465,0.3543],[0.3544,0.3543],[0.3622,0.3543],[0.3701,0.3543],[0.378,0.3543],[0.3859,0.3543],[0.3937,0.3543],[0.4016,0.3543],[0.4095,0.3543],[0.4174,0.3543],[0.4252,0.3543],[0.4331,0.3543],[0.441,0.3543],[0.4489,0.3543],[0.4567,0.3543],[0.4646,0.3543],[0.4725,0.3543],[0.4803,0.3543],[0.4882,0.3543],[0.4961,0.3543],[0.504,0.3543],[0.5118,0.3543],[0.5197,0.3543],[0.5276,0.3543],[0.5355,0.3543],[0.5433,0.3543],[0.5512,0.3543],[0.5591,0.3543],[0.567,0.3543],[0.5748,0.3543],[0.5827,0.3543],[0.5906,0.3543],[0.5984,0.3543],[0.6063,0.3543],[0.6142,0.3543],[0.6221,0.3543],[0.6299,0.3543],[0.6378,0.3543],[0.6457,0.3543],[0.6536,0.3543],[0.6614,0.3543],[0.6693,0.3543],[0.6772,0.3543],[0.6851,0.3543],[0.6929,0.3543],[0.7008,0.3543],[0.7087,0.3543],[0.7166,0.3543],[0.7244,0.3543],[0.7323,0.3543],[0.7402,0.3543],[0.748,0.3543],[0.7559,0.3543],[0.7638,0.3543],[0.7717,0.3543],[0.7795,0.3543],[0.7874,0.3543],[0.7953,0.3543],[0.8032,0.3543],[0.811,0.3543],[0.8189,0.3543],[0.8268,0.3543],[0.8347,0.3543],[0.8425,0.3543],[0.8504,0.3543],[0.8583,0.3543],[0.8662,0.3543],[0.874,0.3543],[0.8819,0.3543],[0.8898,0.3543],[0.8976,0.3543],[0.9055,0.3543],[0.9134,0.3543],[0.9213,0.3543],[0.9291,0.3543],[0.937,0.3543],[0.9449,0.3543],[0.9528,0.3543],[0.9606,0.3543],[0.9685,0.3543],[0.9764,0.3543],[0.9843,0.3543],[0.9921,0.3543],[1,0.3543],[0.0001,0.3464],[0.0079,0.3464],[0.0158,0.3464],[0.0237,0.3464],[0.0316,0.3464],[0.0394,0.3464],[0.0473,0.3464],[0.0552,0.3464],[0.063,0.3464],[0.0709,0.3464],[0.0788,0.3464],[0.0867,0.3464],[0.0945,0.3464],[0.1024,0.3464],[0.1103,0.3464],[0.1182,0.3464],[0.126,0.3464],[0.1339,0.3464],[0.1418,0.3464],[0.1497,0.3464],[0.1575,0.3464],[0.1654,0.3464],[0.1733,0.3464],[0.1812,0.3464],[0.189,0.3464],[0.1969,0.3464],[0.2048,0.3464],[0.2126,0.3464],[0.2205,0.3464],[0.2284,0.3464],[0.2363,0.3464],[0.2441,0.3464],[0.252,0.3464],[0.2599,0.3464],[0.2678,0.3464],[0.2756,0.3464],[0.2835,0.3464],[0.2914,0.3464],[0.2993,0.3464],[0.3071,0.3464],[0.315,0.3464],[0.3229,0.3464],[0.3308,0.3464],[0.3386,0.3464],[0.3465,0.3464],[0.3544,0.3464],[0.3622,0.3464],[0.3701,0.3464],[0.378,0.3464],[0.3859,0.3464],[0.3937,0.3464],[0.4016,0.3464],[0.4095,0.3464],[0.4174,0.3464],[0.4252,0.3464],[0.4331,0.3464],[0.441,0.3464],[0.4489,0.3464],[0.4567,0.3464],[0.4646,0.3464],[0.4725,0.3464],[0.4803,0.3464],[0.4882,0.3464],[0.4961,0.3464],[0.504,0.3464],[0.5118,0.3464],[0.5197,0.3464],[0.5276,0.3464],[0.5355,0.3464],[0.5433,0.3464],[0.5512,0.3464],[0.5591,0.3464],[0.567,0.3464],[0.5748,0.3464],[0.5827,0.3464],[0.5906,0.3464],[0.5984,0.3464],[0.6063,0.3464],[0.6142,0.3464],[0.6221,0.3464],[0.6299,0.3464],[0.6378,0.3464],[0.6457,0.3464],[0.6536,0.3464],[0.6614,0.3464],[0.6693,0.3464],[0.6772,0.3464],[0.6851,0.3464],[0.6929,0.3464],[0.7008,0.3464],[0.7087,0.3464],[0.7166,0.3464],[0.7244,0.3464],[0.7323,0.3464],[0.7402,0.3464],[0.748,0.3464],[0.7559,0.3464],[0.7638,0.3464],[0.7717,0.3464],[0.7795,0.3464],[0.7874,0.3464],[0.7953,0.3464],[0.8032,0.3464],[0.811,0.3464],[0.8189,0.3464],[0.8268,0.3464],[0.8347,0.3464],[0.8425,0.3464],[0.8504,0.3464],[0.8583,0.3464],[0.8662,0.3464],[0.874,0.3464],[0.8819,0.3464],[0.8898,0.3464],[0.8976,0.3464],[0.9055,0.3464],[0.9134,0.3464],[0.9213,0.3464],[0.9291,0.3464],[0.937,0.3464],[0.9449,0.3464],[0.9528,0.3464],[0.9606,0.3464],[0.9685,0.3464],[0.9764,0.3464],[0.9843,0.3464],[0.9921,0.3464],[1,0.3464],[0.0001,0.3386],[0.0079,0.3386],[0.0158,0.3386],[0.0237,0.3386],[0.0316,0.3386],[0.0394,0.3386],[0.0473,0.3386],[0.0552,0.3386],[0.063,0.3386],[0.0709,0.3386],[0.0788,0.3386],[0.0867,0.3386],[0.0945,0.3386],[0.1024,0.3386],[0.1103,0.3386],[0.1182,0.3386],[0.126,0.3386],[0.1339,0.3386],[0.1418,0.3386],[0.1497,0.3386],[0.1575,0.3386],[0.1654,0.3386],[0.1733,0.3386],[0.1812,0.3386],[0.189,0.3386],[0.1969,0.3386],[0.2048,0.3386],[0.2126,0.3386],[0.2205,0.3386],[0.2284,0.3386],[0.2363,0.3386],[0.2441,0.3386],[0.252,0.3386],[0.2599,0.3386],[0.2678,0.3386],[0.2756,0.3386],[0.2835,0.3386],[0.2914,0.3386],[0.2993,0.3386],[0.3071,0.3386],[0.315,0.3386],[0.3229,0.3386],[0.3308,0.3386],[0.3386,0.3386],[0.3465,0.3386],[0.3544,0.3386],[0.3622,0.3386],[0.3701,0.3386],[0.378,0.3386],[0.3859,0.3386],[0.3937,0.3386],[0.4016,0.3386],[0.4095,0.3386],[0.4174,0.3386],[0.4252,0.3386],[0.4331,0.3386],[0.441,0.3386],[0.4489,0.3386],[0.4567,0.3386],[0.4646,0.3386],[0.4725,0.3386],[0.4803,0.3386],[0.4882,0.3386],[0.4961,0.3386],[0.504,0.3386],[0.5118,0.3386],[0.5197,0.3386],[0.5276,0.3386],[0.5355,0.3386],[0.5433,0.3386],[0.5512,0.3386],[0.5591,0.3386],[0.567,0.3386],[0.5748,0.3386],[0.5827,0.3386],[0.5906,0.3386],[0.5984,0.3386],[0.6063,0.3386],[0.6142,0.3386],[0.6221,0.3386],[0.6299,0.3386],[0.6378,0.3386],[0.6457,0.3386],[0.6536,0.3386],[0.6614,0.3386],[0.6693,0.3386],[0.6772,0.3386],[0.6851,0.3386],[0.6929,0.3386],[0.7008,0.3386],[0.7087,0.3386],[0.7166,0.3386],[0.7244,0.3386],[0.7323,0.3386],[0.7402,0.3386],[0.748,0.3386],[0.7559,0.3386],[0.7638,0.3386],[0.7717,0.3386],[0.7795,0.3386],[0.7874,0.3386],[0.7953,0.3386],[0.8032,0.3386],[0.811,0.3386],[0.8189,0.3386],[0.8268,0.3386],[0.8347,0.3386],[0.8425,0.3386],[0.8504,0.3386],[0.8583,0.3386],[0.8662,0.3386],[0.874,0.3386],[0.8819,0.3386],[0.8898,0.3386],[0.8976,0.3386],[0.9055,0.3386],[0.9134,0.3386],[0.9213,0.3386],[0.9291,0.3386],[0.937,0.3386],[0.9449,0.3386],[0.9528,0.3386],[0.9606,0.3386],[0.9685,0.3386],[0.9764,0.3386],[0.9843,0.3386],[0.9921,0.3386],[1,0.3386],[0.0001,0.3307],[0.0079,0.3307],[0.0158,0.3307],[0.0237,0.3307],[0.0316,0.3307],[0.0394,0.3307],[0.0473,0.3307],[0.0552,0.3307],[0.063,0.3307],[0.0709,0.3307],[0.0788,0.3307],[0.0867,0.3307],[0.0945,0.3307],[0.1024,0.3307],[0.1103,0.3307],[0.1182,0.3307],[0.126,0.3307],[0.1339,0.3307],[0.1418,0.3307],[0.1497,0.3307],[0.1575,0.3307],[0.1654,0.3307],[0.1733,0.3307],[0.1812,0.3307],[0.189,0.3307],[0.1969,0.3307],[0.2048,0.3307],[0.2126,0.3307],[0.2205,0.3307],[0.2284,0.3307],[0.2363,0.3307],[0.2441,0.3307],[0.252,0.3307],[0.2599,0.3307],[0.2678,0.3307],[0.2756,0.3307],[0.2835,0.3307],[0.2914,0.3307],[0.2993,0.3307],[0.3071,0.3307],[0.315,0.3307],[0.3229,0.3307],[0.3308,0.3307],[0.3386,0.3307],[0.3465,0.3307],[0.3544,0.3307],[0.3622,0.3307],[0.3701,0.3307],[0.378,0.3307],[0.3859,0.3307],[0.3937,0.3307],[0.4016,0.3307],[0.4095,0.3307],[0.4174,0.3307],[0.4252,0.3307],[0.4331,0.3307],[0.441,0.3307],[0.4489,0.3307],[0.4567,0.3307],[0.4646,0.3307],[0.4725,0.3307],[0.4803,0.3307],[0.4882,0.3307],[0.4961,0.3307],[0.504,0.3307],[0.5118,0.3307],[0.5197,0.3307],[0.5276,0.3307],[0.5355,0.3307],[0.5433,0.3307],[0.5512,0.3307],[0.5591,0.3307],[0.567,0.3307],[0.5748,0.3307],[0.5827,0.3307],[0.5906,0.3307],[0.5984,0.3307],[0.6063,0.3307],[0.6142,0.3307],[0.6221,0.3307],[0.6299,0.3307],[0.6378,0.3307],[0.6457,0.3307],[0.6536,0.3307],[0.6614,0.3307],[0.6693,0.3307],[0.6772,0.3307],[0.6851,0.3307],[0.6929,0.3307],[0.7008,0.3307],[0.7087,0.3307],[0.7166,0.3307],[0.7244,0.3307],[0.7323,0.3307],[0.7402,0.3307],[0.748,0.3307],[0.7559,0.3307],[0.7638,0.3307],[0.7717,0.3307],[0.7795,0.3307],[0.7874,0.3307],[0.7953,0.3307],[0.8032,0.3307],[0.811,0.3307],[0.8189,0.3307],[0.8268,0.3307],[0.8347,0.3307],[0.8425,0.3307],[0.8504,0.3307],[0.8583,0.3307],[0.8662,0.3307],[0.874,0.3307],[0.8819,0.3307],[0.8898,0.3307],[0.8976,0.3307],[0.9055,0.3307],[0.9134,0.3307],[0.9213,0.3307],[0.9291,0.3307],[0.937,0.3307],[0.9449,0.3307],[0.9528,0.3307],[0.9606,0.3307],[0.9685,0.3307],[0.9764,0.3307],[0.9843,0.3307],[0.9921,0.3307],[1,0.3307],[0.0001,0.3228],[0.0079,0.3228],[0.0158,0.3228],[0.0237,0.3228],[0.0316,0.3228],[0.0394,0.3228],[0.0473,0.3228],[0.0552,0.3228],[0.063,0.3228],[0.0709,0.3228],[0.0788,0.3228],[0.0867,0.3228],[0.0945,0.3228],[0.1024,0.3228],[0.1103,0.3228],[0.1182,0.3228],[0.126,0.3228],[0.1339,0.3228],[0.1418,0.3228],[0.1497,0.3228],[0.1575,0.3228],[0.1654,0.3228],[0.1733,0.3228],[0.1812,0.3228],[0.189,0.3228],[0.1969,0.3228],[0.2048,0.3228],[0.2126,0.3228],[0.2205,0.3228],[0.2284,0.3228],[0.2363,0.3228],[0.2441,0.3228],[0.252,0.3228],[0.2599,0.3228],[0.2678,0.3228],[0.2756,0.3228],[0.2835,0.3228],[0.2914,0.3228],[0.2993,0.3228],[0.3071,0.3228],[0.315,0.3228],[0.3229,0.3228],[0.3308,0.3228],[0.3386,0.3228],[0.3465,0.3228],[0.3544,0.3228],[0.3622,0.3228],[0.3701,0.3228],[0.378,0.3228],[0.3859,0.3228],[0.3937,0.3228],[0.4016,0.3228],[0.4095,0.3228],[0.4174,0.3228],[0.4252,0.3228],[0.4331,0.3228],[0.441,0.3228],[0.4489,0.3228],[0.4567,0.3228],[0.4646,0.3228],[0.4725,0.3228],[0.4803,0.3228],[0.4882,0.3228],[0.4961,0.3228],[0.504,0.3228],[0.5118,0.3228],[0.5197,0.3228],[0.5276,0.3228],[0.5355,0.3228],[0.5433,0.3228],[0.5512,0.3228],[0.5591,0.3228],[0.567,0.3228],[0.5748,0.3228],[0.5827,0.3228],[0.5906,0.3228],[0.5984,0.3228],[0.6063,0.3228],[0.6142,0.3228],[0.6221,0.3228],[0.6299,0.3228],[0.6378,0.3228],[0.6457,0.3228],[0.6536,0.3228],[0.6614,0.3228],[0.6693,0.3228],[0.6772,0.3228],[0.6851,0.3228],[0.6929,0.3228],[0.7008,0.3228],[0.7087,0.3228],[0.7166,0.3228],[0.7244,0.3228],[0.7323,0.3228],[0.7402,0.3228],[0.748,0.3228],[0.7559,0.3228],[0.7638,0.3228],[0.7717,0.3228],[0.7795,0.3228],[0.7874,0.3228],[0.7953,0.3228],[0.8032,0.3228],[0.811,0.3228],[0.8189,0.3228],[0.8268,0.3228],[0.8347,0.3228],[0.8425,0.3228],[0.8504,0.3228],[0.8583,0.3228],[0.8662,0.3228],[0.874,0.3228],[0.8819,0.3228],[0.8898,0.3228],[0.8976,0.3228],[0.9055,0.3228],[0.9134,0.3228],[0.9213,0.3228],[0.9291,0.3228],[0.937,0.3228],[0.9449,0.3228],[0.9528,0.3228],[0.9606,0.3228],[0.9685,0.3228],[0.9764,0.3228],[0.9843,0.3228],[0.9921,0.3228],[1,0.3228],[0.0001,0.3149],[0.0079,0.3149],[0.0158,0.3149],[0.0237,0.3149],[0.0316,0.3149],[0.0394,0.3149],[0.0473,0.3149],[0.0552,0.3149],[0.063,0.3149],[0.0709,0.3149],[0.0788,0.3149],[0.0867,0.3149],[0.0945,0.3149],[0.1024,0.3149],[0.1103,0.3149],[0.1182,0.3149],[0.126,0.3149],[0.1339,0.3149],[0.1418,0.3149],[0.1497,0.3149],[0.1575,0.3149],[0.1654,0.3149],[0.1733,0.3149],[0.1812,0.3149],[0.189,0.3149],[0.1969,0.3149],[0.2048,0.3149],[0.2126,0.3149],[0.2205,0.3149],[0.2284,0.3149],[0.2363,0.3149],[0.2441,0.3149],[0.252,0.3149],[0.2599,0.3149],[0.2678,0.3149],[0.2756,0.3149],[0.2835,0.3149],[0.2914,0.3149],[0.2993,0.3149],[0.3071,0.3149],[0.315,0.3149],[0.3229,0.3149],[0.3308,0.3149],[0.3386,0.3149],[0.3465,0.3149],[0.3544,0.3149],[0.3622,0.3149],[0.3701,0.3149],[0.378,0.3149],[0.3859,0.3149],[0.3937,0.3149],[0.4016,0.3149],[0.4095,0.3149],[0.4174,0.3149],[0.4252,0.3149],[0.4331,0.3149],[0.441,0.3149],[0.4489,0.3149],[0.4567,0.3149],[0.4646,0.3149],[0.4725,0.3149],[0.4803,0.3149],[0.4882,0.3149],[0.4961,0.3149],[0.504,0.3149],[0.5118,0.3149],[0.5197,0.3149],[0.5276,0.3149],[0.5355,0.3149],[0.5433,0.3149],[0.5512,0.3149],[0.5591,0.3149],[0.567,0.3149],[0.5748,0.3149],[0.5827,0.3149],[0.5906,0.3149],[0.5984,0.3149],[0.6063,0.3149],[0.6142,0.3149],[0.6221,0.3149],[0.6299,0.3149],[0.6378,0.3149],[0.6457,0.3149],[0.6536,0.3149],[0.6614,0.3149],[0.6693,0.3149],[0.6772,0.3149],[0.6851,0.3149],[0.6929,0.3149],[0.7008,0.3149],[0.7087,0.3149],[0.7166,0.3149],[0.7244,0.3149],[0.7323,0.3149],[0.7402,0.3149],[0.748,0.3149],[0.7559,0.3149],[0.7638,0.3149],[0.7717,0.3149],[0.7795,0.3149],[0.7874,0.3149],[0.7953,0.3149],[0.8032,0.3149],[0.811,0.3149],[0.8189,0.3149],[0.8268,0.3149],[0.8347,0.3149],[0.8425,0.3149],[0.8504,0.3149],[0.8583,0.3149],[0.8662,0.3149],[0.874,0.3149],[0.8819,0.3149],[0.8898,0.3149],[0.8976,0.3149],[0.9055,0.3149],[0.9134,0.3149],[0.9213,0.3149],[0.9291,0.3149],[0.937,0.3149],[0.9449,0.3149],[0.9528,0.3149],[0.9606,0.3149],[0.9685,0.3149],[0.9764,0.3149],[0.9843,0.3149],[0.9921,0.3149],[1,0.3149],[0.0001,0.3071],[0.0079,0.3071],[0.0158,0.3071],[0.0237,0.3071],[0.0316,0.3071],[0.0394,0.3071],[0.0473,0.3071],[0.0552,0.3071],[0.063,0.3071],[0.0709,0.3071],[0.0788,0.3071],[0.0867,0.3071],[0.0945,0.3071],[0.1024,0.3071],[0.1103,0.3071],[0.1182,0.3071],[0.126,0.3071],[0.1339,0.3071],[0.1418,0.3071],[0.1497,0.3071],[0.1575,0.3071],[0.1654,0.3071],[0.1733,0.3071],[0.1812,0.3071],[0.189,0.3071],[0.1969,0.3071],[0.2048,0.3071],[0.2126,0.3071],[0.2205,0.3071],[0.2284,0.3071],[0.2363,0.3071],[0.2441,0.3071],[0.252,0.3071],[0.2599,0.3071],[0.2678,0.3071],[0.2756,0.3071],[0.2835,0.3071],[0.2914,0.3071],[0.2993,0.3071],[0.3071,0.3071],[0.315,0.3071],[0.3229,0.3071],[0.3308,0.3071],[0.3386,0.3071],[0.3465,0.3071],[0.3544,0.3071],[0.3622,0.3071],[0.3701,0.3071],[0.378,0.3071],[0.3859,0.3071],[0.3937,0.3071],[0.4016,0.3071],[0.4095,0.3071],[0.4174,0.3071],[0.4252,0.3071],[0.4331,0.3071],[0.441,0.3071],[0.4489,0.3071],[0.4567,0.3071],[0.4646,0.3071],[0.4725,0.3071],[0.4803,0.3071],[0.4882,0.3071],[0.4961,0.3071],[0.504,0.3071],[0.5118,0.3071],[0.5197,0.3071],[0.5276,0.3071],[0.5355,0.3071],[0.5433,0.3071],[0.5512,0.3071],[0.5591,0.3071],[0.567,0.3071],[0.5748,0.3071],[0.5827,0.3071],[0.5906,0.3071],[0.5984,0.3071],[0.6063,0.3071],[0.6142,0.3071],[0.6221,0.3071],[0.6299,0.3071],[0.6378,0.3071],[0.6457,0.3071],[0.6536,0.3071],[0.6614,0.3071],[0.6693,0.3071],[0.6772,0.3071],[0.6851,0.3071],[0.6929,0.3071],[0.7008,0.3071],[0.7087,0.3071],[0.7166,0.3071],[0.7244,0.3071],[0.7323,0.3071],[0.7402,0.3071],[0.748,0.3071],[0.7559,0.3071],[0.7638,0.3071],[0.7717,0.3071],[0.7795,0.3071],[0.7874,0.3071],[0.7953,0.3071],[0.8032,0.3071],[0.811,0.3071],[0.8189,0.3071],[0.8268,0.3071],[0.8347,0.3071],[0.8425,0.3071],[0.8504,0.3071],[0.8583,0.3071],[0.8662,0.3071],[0.874,0.3071],[0.8819,0.3071],[0.8898,0.3071],[0.8976,0.3071],[0.9055,0.3071],[0.9134,0.3071],[0.9213,0.3071],[0.9291,0.3071],[0.937,0.3071],[0.9449,0.3071],[0.9528,0.3071],[0.9606,0.3071],[0.9685,0.3071],[0.9764,0.3071],[0.9843,0.3071],[0.9921,0.3071],[1,0.3071],[0.0001,0.2992],[0.0079,0.2992],[0.0158,0.2992],[0.0237,0.2992],[0.0316,0.2992],[0.0394,0.2992],[0.0473,0.2992],[0.0552,0.2992],[0.063,0.2992],[0.0709,0.2992],[0.0788,0.2992],[0.0867,0.2992],[0.0945,0.2992],[0.1024,0.2992],[0.1103,0.2992],[0.1182,0.2992],[0.126,0.2992],[0.1339,0.2992],[0.1418,0.2992],[0.1497,0.2992],[0.1575,0.2992],[0.1654,0.2992],[0.1733,0.2992],[0.1812,0.2992],[0.189,0.2992],[0.1969,0.2992],[0.2048,0.2992],[0.2126,0.2992],[0.2205,0.2992],[0.2284,0.2992],[0.2363,0.2992],[0.2441,0.2992],[0.252,0.2992],[0.2599,0.2992],[0.2678,0.2992],[0.2756,0.2992],[0.2835,0.2992],[0.2914,0.2992],[0.2993,0.2992],[0.3071,0.2992],[0.315,0.2992],[0.3229,0.2992],[0.3308,0.2992],[0.3386,0.2992],[0.3465,0.2992],[0.3544,0.2992],[0.3622,0.2992],[0.3701,0.2992],[0.378,0.2992],[0.3859,0.2992],[0.3937,0.2992],[0.4016,0.2992],[0.4095,0.2992],[0.4174,0.2992],[0.4252,0.2992],[0.4331,0.2992],[0.441,0.2992],[0.4489,0.2992],[0.4567,0.2992],[0.4646,0.2992],[0.4725,0.2992],[0.4803,0.2992],[0.4882,0.2992],[0.4961,0.2992],[0.504,0.2992],[0.5118,0.2992],[0.5197,0.2992],[0.5276,0.2992],[0.5355,0.2992],[0.5433,0.2992],[0.5512,0.2992],[0.5591,0.2992],[0.567,0.2992],[0.5748,0.2992],[0.5827,0.2992],[0.5906,0.2992],[0.5984,0.2992],[0.6063,0.2992],[0.6142,0.2992],[0.6221,0.2992],[0.6299,0.2992],[0.6378,0.2992],[0.6457,0.2992],[0.6536,0.2992],[0.6614,0.2992],[0.6693,0.2992],[0.6772,0.2992],[0.6851,0.2992],[0.6929,0.2992],[0.7008,0.2992],[0.7087,0.2992],[0.7166,0.2992],[0.7244,0.2992],[0.7323,0.2992],[0.7402,0.2992],[0.748,0.2992],[0.7559,0.2992],[0.7638,0.2992],[0.7717,0.2992],[0.7795,0.2992],[0.7874,0.2992],[0.7953,0.2992],[0.8032,0.2992],[0.811,0.2992],[0.8189,0.2992],[0.8268,0.2992],[0.8347,0.2992],[0.8425,0.2992],[0.8504,0.2992],[0.8583,0.2992],[0.8662,0.2992],[0.874,0.2992],[0.8819,0.2992],[0.8898,0.2992],[0.8976,0.2992],[0.9055,0.2992],[0.9134,0.2992],[0.9213,0.2992],[0.9291,0.2992],[0.937,0.2992],[0.9449,0.2992],[0.9528,0.2992],[0.9606,0.2992],[0.9685,0.2992],[0.9764,0.2992],[0.9843,0.2992],[0.9921,0.2992],[1,0.2992],[0.0001,0.2913],[0.0079,0.2913],[0.0158,0.2913],[0.0237,0.2913],[0.0316,0.2913],[0.0394,0.2913],[0.0473,0.2913],[0.0552,0.2913],[0.063,0.2913],[0.0709,0.2913],[0.0788,0.2913],[0.0867,0.2913],[0.0945,0.2913],[0.1024,0.2913],[0.1103,0.2913],[0.1182,0.2913],[0.126,0.2913],[0.1339,0.2913],[0.1418,0.2913],[0.1497,0.2913],[0.1575,0.2913],[0.1654,0.2913],[0.1733,0.2913],[0.1812,0.2913],[0.189,0.2913],[0.1969,0.2913],[0.2048,0.2913],[0.2126,0.2913],[0.2205,0.2913],[0.2284,0.2913],[0.2363,0.2913],[0.2441,0.2913],[0.252,0.2913],[0.2599,0.2913],[0.2678,0.2913],[0.2756,0.2913],[0.2835,0.2913],[0.2914,0.2913],[0.2993,0.2913],[0.3071,0.2913],[0.315,0.2913],[0.3229,0.2913],[0.3308,0.2913],[0.3386,0.2913],[0.3465,0.2913],[0.3544,0.2913],[0.3622,0.2913],[0.3701,0.2913],[0.378,0.2913],[0.3859,0.2913],[0.3937,0.2913],[0.4016,0.2913],[0.4095,0.2913],[0.4174,0.2913],[0.4252,0.2913],[0.4331,0.2913],[0.441,0.2913],[0.4489,0.2913],[0.4567,0.2913],[0.4646,0.2913],[0.4725,0.2913],[0.4803,0.2913],[0.4882,0.2913],[0.4961,0.2913],[0.504,0.2913],[0.5118,0.2913],[0.5197,0.2913],[0.5276,0.2913],[0.5355,0.2913],[0.5433,0.2913],[0.5512,0.2913],[0.5591,0.2913],[0.567,0.2913],[0.5748,0.2913],[0.5827,0.2913],[0.5906,0.2913],[0.5984,0.2913],[0.6063,0.2913],[0.6142,0.2913],[0.6221,0.2913],[0.6299,0.2913],[0.6378,0.2913],[0.6457,0.2913],[0.6536,0.2913],[0.6614,0.2913],[0.6693,0.2913],[0.6772,0.2913],[0.6851,0.2913],[0.6929,0.2913],[0.7008,0.2913],[0.7087,0.2913],[0.7166,0.2913],[0.7244,0.2913],[0.7323,0.2913],[0.7402,0.2913],[0.748,0.2913],[0.7559,0.2913],[0.7638,0.2913],[0.7717,0.2913],[0.7795,0.2913],[0.7874,0.2913],[0.7953,0.2913],[0.8032,0.2913],[0.811,0.2913],[0.8189,0.2913],[0.8268,0.2913],[0.8347,0.2913],[0.8425,0.2913],[0.8504,0.2913],[0.8583,0.2913],[0.8662,0.2913],[0.874,0.2913],[0.8819,0.2913],[0.8898,0.2913],[0.8976,0.2913],[0.9055,0.2913],[0.9134,0.2913],[0.9213,0.2913],[0.9291,0.2913],[0.937,0.2913],[0.9449,0.2913],[0.9528,0.2913],[0.9606,0.2913],[0.9685,0.2913],[0.9764,0.2913],[0.9843,0.2913],[0.9921,0.2913],[1,0.2913],[0.0001,0.2834],[0.0079,0.2834],[0.0158,0.2834],[0.0237,0.2834],[0.0316,0.2834],[0.0394,0.2834],[0.0473,0.2834],[0.0552,0.2834],[0.063,0.2834],[0.0709,0.2834],[0.0788,0.2834],[0.0867,0.2834],[0.0945,0.2834],[0.1024,0.2834],[0.1103,0.2834],[0.1182,0.2834],[0.126,0.2834],[0.1339,0.2834],[0.1418,0.2834],[0.1497,0.2834],[0.1575,0.2834],[0.1654,0.2834],[0.1733,0.2834],[0.1812,0.2834],[0.189,0.2834],[0.1969,0.2834],[0.2048,0.2834],[0.2126,0.2834],[0.2205,0.2834],[0.2284,0.2834],[0.2363,0.2834],[0.2441,0.2834],[0.252,0.2834],[0.2599,0.2834],[0.2678,0.2834],[0.2756,0.2834],[0.2835,0.2834],[0.2914,0.2834],[0.2993,0.2834],[0.3071,0.2834],[0.315,0.2834],[0.3229,0.2834],[0.3308,0.2834],[0.3386,0.2834],[0.3465,0.2834],[0.3544,0.2834],[0.3622,0.2834],[0.3701,0.2834],[0.378,0.2834],[0.3859,0.2834],[0.3937,0.2834],[0.4016,0.2834],[0.4095,0.2834],[0.4174,0.2834],[0.4252,0.2834],[0.4331,0.2834],[0.441,0.2834],[0.4489,0.2834],[0.4567,0.2834],[0.4646,0.2834],[0.4725,0.2834],[0.4803,0.2834],[0.4882,0.2834],[0.4961,0.2834],[0.504,0.2834],[0.5118,0.2834],[0.5197,0.2834],[0.5276,0.2834],[0.5355,0.2834],[0.5433,0.2834],[0.5512,0.2834],[0.5591,0.2834],[0.567,0.2834],[0.5748,0.2834],[0.5827,0.2834],[0.5906,0.2834],[0.5984,0.2834],[0.6063,0.2834],[0.6142,0.2834],[0.6221,0.2834],[0.6299,0.2834],[0.6378,0.2834],[0.6457,0.2834],[0.6536,0.2834],[0.6614,0.2834],[0.6693,0.2834],[0.6772,0.2834],[0.6851,0.2834],[0.6929,0.2834],[0.7008,0.2834],[0.7087,0.2834],[0.7166,0.2834],[0.7244,0.2834],[0.7323,0.2834],[0.7402,0.2834],[0.748,0.2834],[0.7559,0.2834],[0.7638,0.2834],[0.7717,0.2834],[0.7795,0.2834],[0.7874,0.2834],[0.7953,0.2834],[0.8032,0.2834],[0.811,0.2834],[0.8189,0.2834],[0.8268,0.2834],[0.8347,0.2834],[0.8425,0.2834],[0.8504,0.2834],[0.8583,0.2834],[0.8662,0.2834],[0.874,0.2834],[0.8819,0.2834],[0.8898,0.2834],[0.8976,0.2834],[0.9055,0.2834],[0.9134,0.2834],[0.9213,0.2834],[0.9291,0.2834],[0.937,0.2834],[0.9449,0.2834],[0.9528,0.2834],[0.9606,0.2834],[0.9685,0.2834],[0.9764,0.2834],[0.9843,0.2834],[0.9921,0.2834],[1,0.2834],[0.0001,0.2756],[0.0079,0.2756],[0.0158,0.2756],[0.0237,0.2756],[0.0316,0.2756],[0.0394,0.2756],[0.0473,0.2756],[0.0552,0.2756],[0.063,0.2756],[0.0709,0.2756],[0.0788,0.2756],[0.0867,0.2756],[0.0945,0.2756],[0.1024,0.2756],[0.1103,0.2756],[0.1182,0.2756],[0.126,0.2756],[0.1339,0.2756],[0.1418,0.2756],[0.1497,0.2756],[0.1575,0.2756],[0.1654,0.2756],[0.1733,0.2756],[0.1812,0.2756],[0.189,0.2756],[0.1969,0.2756],[0.2048,0.2756],[0.2126,0.2756],[0.2205,0.2756],[0.2284,0.2756],[0.2363,0.2756],[0.2441,0.2756],[0.252,0.2756],[0.2599,0.2756],[0.2678,0.2756],[0.2756,0.2756],[0.2835,0.2756],[0.2914,0.2756],[0.2993,0.2756],[0.3071,0.2756],[0.315,0.2756],[0.3229,0.2756],[0.3308,0.2756],[0.3386,0.2756],[0.3465,0.2756],[0.3544,0.2756],[0.3622,0.2756],[0.3701,0.2756],[0.378,0.2756],[0.3859,0.2756],[0.3937,0.2756],[0.4016,0.2756],[0.4095,0.2756],[0.4174,0.2756],[0.4252,0.2756],[0.4331,0.2756],[0.441,0.2756],[0.4489,0.2756],[0.4567,0.2756],[0.4646,0.2756],[0.4725,0.2756],[0.4803,0.2756],[0.4882,0.2756],[0.4961,0.2756],[0.504,0.2756],[0.5118,0.2756],[0.5197,0.2756],[0.5276,0.2756],[0.5355,0.2756],[0.5433,0.2756],[0.5512,0.2756],[0.5591,0.2756],[0.567,0.2756],[0.5748,0.2756],[0.5827,0.2756],[0.5906,0.2756],[0.5984,0.2756],[0.6063,0.2756],[0.6142,0.2756],[0.6221,0.2756],[0.6299,0.2756],[0.6378,0.2756],[0.6457,0.2756],[0.6536,0.2756],[0.6614,0.2756],[0.6693,0.2756],[0.6772,0.2756],[0.6851,0.2756],[0.6929,0.2756],[0.7008,0.2756],[0.7087,0.2756],[0.7166,0.2756],[0.7244,0.2756],[0.7323,0.2756],[0.7402,0.2756],[0.748,0.2756],[0.7559,0.2756],[0.7638,0.2756],[0.7717,0.2756],[0.7795,0.2756],[0.7874,0.2756],[0.7953,0.2756],[0.8032,0.2756],[0.811,0.2756],[0.8189,0.2756],[0.8268,0.2756],[0.8347,0.2756],[0.8425,0.2756],[0.8504,0.2756],[0.8583,0.2756],[0.8662,0.2756],[0.874,0.2756],[0.8819,0.2756],[0.8898,0.2756],[0.8976,0.2756],[0.9055,0.2756],[0.9134,0.2756],[0.9213,0.2756],[0.9291,0.2756],[0.937,0.2756],[0.9449,0.2756],[0.9528,0.2756],[0.9606,0.2756],[0.9685,0.2756],[0.9764,0.2756],[0.9843,0.2756],[0.9921,0.2756],[1,0.2756],[0.0001,0.2677],[0.0079,0.2677],[0.0158,0.2677],[0.0237,0.2677],[0.0316,0.2677],[0.0394,0.2677],[0.0473,0.2677],[0.0552,0.2677],[0.063,0.2677],[0.0709,0.2677],[0.0788,0.2677],[0.0867,0.2677],[0.0945,0.2677],[0.1024,0.2677],[0.1103,0.2677],[0.1182,0.2677],[0.126,0.2677],[0.1339,0.2677],[0.1418,0.2677],[0.1497,0.2677],[0.1575,0.2677],[0.1654,0.2677],[0.1733,0.2677],[0.1812,0.2677],[0.189,0.2677],[0.1969,0.2677],[0.2048,0.2677],[0.2126,0.2677],[0.2205,0.2677],[0.2284,0.2677],[0.2363,0.2677],[0.2441,0.2677],[0.252,0.2677],[0.2599,0.2677],[0.2678,0.2677],[0.2756,0.2677],[0.2835,0.2677],[0.2914,0.2677],[0.2993,0.2677],[0.3071,0.2677],[0.315,0.2677],[0.3229,0.2677],[0.3308,0.2677],[0.3386,0.2677],[0.3465,0.2677],[0.3544,0.2677],[0.3622,0.2677],[0.3701,0.2677],[0.378,0.2677],[0.3859,0.2677],[0.3937,0.2677],[0.4016,0.2677],[0.4095,0.2677],[0.4174,0.2677],[0.4252,0.2677],[0.4331,0.2677],[0.441,0.2677],[0.4489,0.2677],[0.4567,0.2677],[0.4646,0.2677],[0.4725,0.2677],[0.4803,0.2677],[0.4882,0.2677],[0.4961,0.2677],[0.504,0.2677],[0.5118,0.2677],[0.5197,0.2677],[0.5276,0.2677],[0.5355,0.2677],[0.5433,0.2677],[0.5512,0.2677],[0.5591,0.2677],[0.567,0.2677],[0.5748,0.2677],[0.5827,0.2677],[0.5906,0.2677],[0.5984,0.2677],[0.6063,0.2677],[0.6142,0.2677],[0.6221,0.2677],[0.6299,0.2677],[0.6378,0.2677],[0.6457,0.2677],[0.6536,0.2677],[0.6614,0.2677],[0.6693,0.2677],[0.6772,0.2677],[0.6851,0.2677],[0.6929,0.2677],[0.7008,0.2677],[0.7087,0.2677],[0.7166,0.2677],[0.7244,0.2677],[0.7323,0.2677],[0.7402,0.2677],[0.748,0.2677],[0.7559,0.2677],[0.7638,0.2677],[0.7717,0.2677],[0.7795,0.2677],[0.7874,0.2677],[0.7953,0.2677],[0.8032,0.2677],[0.811,0.2677],[0.8189,0.2677],[0.8268,0.2677],[0.8347,0.2677],[0.8425,0.2677],[0.8504,0.2677],[0.8583,0.2677],[0.8662,0.2677],[0.874,0.2677],[0.8819,0.2677],[0.8898,0.2677],[0.8976,0.2677],[0.9055,0.2677],[0.9134,0.2677],[0.9213,0.2677],[0.9291,0.2677],[0.937,0.2677],[0.9449,0.2677],[0.9528,0.2677],[0.9606,0.2677],[0.9685,0.2677],[0.9764,0.2677],[0.9843,0.2677],[0.9921,0.2677],[1,0.2677],[0.0001,0.2598],[0.0079,0.2598],[0.0158,0.2598],[0.0237,0.2598],[0.0316,0.2598],[0.0394,0.2598],[0.0473,0.2598],[0.0552,0.2598],[0.063,0.2598],[0.0709,0.2598],[0.0788,0.2598],[0.0867,0.2598],[0.0945,0.2598],[0.1024,0.2598],[0.1103,0.2598],[0.1182,0.2598],[0.126,0.2598],[0.1339,0.2598],[0.1418,0.2598],[0.1497,0.2598],[0.1575,0.2598],[0.1654,0.2598],[0.1733,0.2598],[0.1812,0.2598],[0.189,0.2598],[0.1969,0.2598],[0.2048,0.2598],[0.2126,0.2598],[0.2205,0.2598],[0.2284,0.2598],[0.2363,0.2598],[0.2441,0.2598],[0.252,0.2598],[0.2599,0.2598],[0.2678,0.2598],[0.2756,0.2598],[0.2835,0.2598],[0.2914,0.2598],[0.2993,0.2598],[0.3071,0.2598],[0.315,0.2598],[0.3229,0.2598],[0.3308,0.2598],[0.3386,0.2598],[0.3465,0.2598],[0.3544,0.2598],[0.3622,0.2598],[0.3701,0.2598],[0.378,0.2598],[0.3859,0.2598],[0.3937,0.2598],[0.4016,0.2598],[0.4095,0.2598],[0.4174,0.2598],[0.4252,0.2598],[0.4331,0.2598],[0.441,0.2598],[0.4489,0.2598],[0.4567,0.2598],[0.4646,0.2598],[0.4725,0.2598],[0.4803,0.2598],[0.4882,0.2598],[0.4961,0.2598],[0.504,0.2598],[0.5118,0.2598],[0.5197,0.2598],[0.5276,0.2598],[0.5355,0.2598],[0.5433,0.2598],[0.5512,0.2598],[0.5591,0.2598],[0.567,0.2598],[0.5748,0.2598],[0.5827,0.2598],[0.5906,0.2598],[0.5984,0.2598],[0.6063,0.2598],[0.6142,0.2598],[0.6221,0.2598],[0.6299,0.2598],[0.6378,0.2598],[0.6457,0.2598],[0.6536,0.2598],[0.6614,0.2598],[0.6693,0.2598],[0.6772,0.2598],[0.6851,0.2598],[0.6929,0.2598],[0.7008,0.2598],[0.7087,0.2598],[0.7166,0.2598],[0.7244,0.2598],[0.7323,0.2598],[0.7402,0.2598],[0.748,0.2598],[0.7559,0.2598],[0.7638,0.2598],[0.7717,0.2598],[0.7795,0.2598],[0.7874,0.2598],[0.7953,0.2598],[0.8032,0.2598],[0.811,0.2598],[0.8189,0.2598],[0.8268,0.2598],[0.8347,0.2598],[0.8425,0.2598],[0.8504,0.2598],[0.8583,0.2598],[0.8662,0.2598],[0.874,0.2598],[0.8819,0.2598],[0.8898,0.2598],[0.8976,0.2598],[0.9055,0.2598],[0.9134,0.2598],[0.9213,0.2598],[0.9291,0.2598],[0.937,0.2598],[0.9449,0.2598],[0.9528,0.2598],[0.9606,0.2598],[0.9685,0.2598],[0.9764,0.2598],[0.9843,0.2598],[0.9921,0.2598],[1,0.2598],[0.0001,0.252],[0.0079,0.252],[0.0158,0.252],[0.0237,0.252],[0.0316,0.252],[0.0394,0.252],[0.0473,0.252],[0.0552,0.252],[0.063,0.252],[0.0709,0.252],[0.0788,0.252],[0.0867,0.252],[0.0945,0.252],[0.1024,0.252],[0.1103,0.252],[0.1182,0.252],[0.126,0.252],[0.1339,0.252],[0.1418,0.252],[0.1497,0.252],[0.1575,0.252],[0.1654,0.252],[0.1733,0.252],[0.1812,0.252],[0.189,0.252],[0.1969,0.252],[0.2048,0.252],[0.2126,0.252],[0.2205,0.252],[0.2284,0.252],[0.2363,0.252],[0.2441,0.252],[0.252,0.252],[0.2599,0.252],[0.2678,0.252],[0.2756,0.252],[0.2835,0.252],[0.2914,0.252],[0.2993,0.252],[0.3071,0.252],[0.315,0.252],[0.3229,0.252],[0.3308,0.252],[0.3386,0.252],[0.3465,0.252],[0.3544,0.252],[0.3622,0.252],[0.3701,0.252],[0.378,0.252],[0.3859,0.252],[0.3937,0.252],[0.4016,0.252],[0.4095,0.252],[0.4174,0.252],[0.4252,0.252],[0.4331,0.252],[0.441,0.252],[0.4489,0.252],[0.4567,0.252],[0.4646,0.252],[0.4725,0.252],[0.4803,0.252],[0.4882,0.252],[0.4961,0.252],[0.504,0.252],[0.5118,0.252],[0.5197,0.252],[0.5276,0.252],[0.5355,0.252],[0.5433,0.252],[0.5512,0.252],[0.5591,0.252],[0.567,0.252],[0.5748,0.252],[0.5827,0.252],[0.5906,0.252],[0.5984,0.252],[0.6063,0.252],[0.6142,0.252],[0.6221,0.252],[0.6299,0.252],[0.6378,0.252],[0.6457,0.252],[0.6536,0.252],[0.6614,0.252],[0.6693,0.252],[0.6772,0.252],[0.6851,0.252],[0.6929,0.252],[0.7008,0.252],[0.7087,0.252],[0.7166,0.252],[0.7244,0.252],[0.7323,0.252],[0.7402,0.252],[0.748,0.252],[0.7559,0.252],[0.7638,0.252],[0.7717,0.252],[0.7795,0.252],[0.7874,0.252],[0.7953,0.252],[0.8032,0.252],[0.811,0.252],[0.8189,0.252],[0.8268,0.252],[0.8347,0.252],[0.8425,0.252],[0.8504,0.252],[0.8583,0.252],[0.8662,0.252],[0.874,0.252],[0.8819,0.252],[0.8898,0.252],[0.8976,0.252],[0.9055,0.252],[0.9134,0.252],[0.9213,0.252],[0.9291,0.252],[0.937,0.252],[0.9449,0.252],[0.9528,0.252],[0.9606,0.252],[0.9685,0.252],[0.9764,0.252],[0.9843,0.252],[0.9921,0.252],[1,0.252],[0.0001,0.2441],[0.0079,0.2441],[0.0158,0.2441],[0.0237,0.2441],[0.0316,0.2441],[0.0394,0.2441],[0.0473,0.2441],[0.0552,0.2441],[0.063,0.2441],[0.0709,0.2441],[0.0788,0.2441],[0.0867,0.2441],[0.0945,0.2441],[0.1024,0.2441],[0.1103,0.2441],[0.1182,0.2441],[0.126,0.2441],[0.1339,0.2441],[0.1418,0.2441],[0.1497,0.2441],[0.1575,0.2441],[0.1654,0.2441],[0.1733,0.2441],[0.1812,0.2441],[0.189,0.2441],[0.1969,0.2441],[0.2048,0.2441],[0.2126,0.2441],[0.2205,0.2441],[0.2284,0.2441],[0.2363,0.2441],[0.2441,0.2441],[0.252,0.2441],[0.2599,0.2441],[0.2678,0.2441],[0.2756,0.2441],[0.2835,0.2441],[0.2914,0.2441],[0.2993,0.2441],[0.3071,0.2441],[0.315,0.2441],[0.3229,0.2441],[0.3308,0.2441],[0.3386,0.2441],[0.3465,0.2441],[0.3544,0.2441],[0.3622,0.2441],[0.3701,0.2441],[0.378,0.2441],[0.3859,0.2441],[0.3937,0.2441],[0.4016,0.2441],[0.4095,0.2441],[0.4174,0.2441],[0.4252,0.2441],[0.4331,0.2441],[0.441,0.2441],[0.4489,0.2441],[0.4567,0.2441],[0.4646,0.2441],[0.4725,0.2441],[0.4803,0.2441],[0.4882,0.2441],[0.4961,0.2441],[0.504,0.2441],[0.5118,0.2441],[0.5197,0.2441],[0.5276,0.2441],[0.5355,0.2441],[0.5433,0.2441],[0.5512,0.2441],[0.5591,0.2441],[0.567,0.2441],[0.5748,0.2441],[0.5827,0.2441],[0.5906,0.2441],[0.5984,0.2441],[0.6063,0.2441],[0.6142,0.2441],[0.6221,0.2441],[0.6299,0.2441],[0.6378,0.2441],[0.6457,0.2441],[0.6536,0.2441],[0.6614,0.2441],[0.6693,0.2441],[0.6772,0.2441],[0.6851,0.2441],[0.6929,0.2441],[0.7008,0.2441],[0.7087,0.2441],[0.7166,0.2441],[0.7244,0.2441],[0.7323,0.2441],[0.7402,0.2441],[0.748,0.2441],[0.7559,0.2441],[0.7638,0.2441],[0.7717,0.2441],[0.7795,0.2441],[0.7874,0.2441],[0.7953,0.2441],[0.8032,0.2441],[0.811,0.2441],[0.8189,0.2441],[0.8268,0.2441],[0.8347,0.2441],[0.8425,0.2441],[0.8504,0.2441],[0.8583,0.2441],[0.8662,0.2441],[0.874,0.2441],[0.8819,0.2441],[0.8898,0.2441],[0.8976,0.2441],[0.9055,0.2441],[0.9134,0.2441],[0.9213,0.2441],[0.9291,0.2441],[0.937,0.2441],[0.9449,0.2441],[0.9528,0.2441],[0.9606,0.2441],[0.9685,0.2441],[0.9764,0.2441],[0.9843,0.2441],[0.9921,0.2441],[1,0.2441],[0.0001,0.2362],[0.0079,0.2362],[0.0158,0.2362],[0.0237,0.2362],[0.0316,0.2362],[0.0394,0.2362],[0.0473,0.2362],[0.0552,0.2362],[0.063,0.2362],[0.0709,0.2362],[0.0788,0.2362],[0.0867,0.2362],[0.0945,0.2362],[0.1024,0.2362],[0.1103,0.2362],[0.1182,0.2362],[0.126,0.2362],[0.1339,0.2362],[0.1418,0.2362],[0.1497,0.2362],[0.1575,0.2362],[0.1654,0.2362],[0.1733,0.2362],[0.1812,0.2362],[0.189,0.2362],[0.1969,0.2362],[0.2048,0.2362],[0.2126,0.2362],[0.2205,0.2362],[0.2284,0.2362],[0.2363,0.2362],[0.2441,0.2362],[0.252,0.2362],[0.2599,0.2362],[0.2678,0.2362],[0.2756,0.2362],[0.2835,0.2362],[0.2914,0.2362],[0.2993,0.2362],[0.3071,0.2362],[0.315,0.2362],[0.3229,0.2362],[0.3308,0.2362],[0.3386,0.2362],[0.3465,0.2362],[0.3544,0.2362],[0.3622,0.2362],[0.3701,0.2362],[0.378,0.2362],[0.3859,0.2362],[0.3937,0.2362],[0.4016,0.2362],[0.4095,0.2362],[0.4174,0.2362],[0.4252,0.2362],[0.4331,0.2362],[0.441,0.2362],[0.4489,0.2362],[0.4567,0.2362],[0.4646,0.2362],[0.4725,0.2362],[0.4803,0.2362],[0.4882,0.2362],[0.4961,0.2362],[0.504,0.2362],[0.5118,0.2362],[0.5197,0.2362],[0.5276,0.2362],[0.5355,0.2362],[0.5433,0.2362],[0.5512,0.2362],[0.5591,0.2362],[0.567,0.2362],[0.5748,0.2362],[0.5827,0.2362],[0.5906,0.2362],[0.5984,0.2362],[0.6063,0.2362],[0.6142,0.2362],[0.6221,0.2362],[0.6299,0.2362],[0.6378,0.2362],[0.6457,0.2362],[0.6536,0.2362],[0.6614,0.2362],[0.6693,0.2362],[0.6772,0.2362],[0.6851,0.2362],[0.6929,0.2362],[0.7008,0.2362],[0.7087,0.2362],[0.7166,0.2362],[0.7244,0.2362],[0.7323,0.2362],[0.7402,0.2362],[0.748,0.2362],[0.7559,0.2362],[0.7638,0.2362],[0.7717,0.2362],[0.7795,0.2362],[0.7874,0.2362],[0.7953,0.2362],[0.8032,0.2362],[0.811,0.2362],[0.8189,0.2362],[0.8268,0.2362],[0.8347,0.2362],[0.8425,0.2362],[0.8504,0.2362],[0.8583,0.2362],[0.8662,0.2362],[0.874,0.2362],[0.8819,0.2362],[0.8898,0.2362],[0.8976,0.2362],[0.9055,0.2362],[0.9134,0.2362],[0.9213,0.2362],[0.9291,0.2362],[0.937,0.2362],[0.9449,0.2362],[0.9528,0.2362],[0.9606,0.2362],[0.9685,0.2362],[0.9764,0.2362],[0.9843,0.2362],[0.9921,0.2362],[1,0.2362],[0.0001,0.2283],[0.0079,0.2283],[0.0158,0.2283],[0.0237,0.2283],[0.0316,0.2283],[0.0394,0.2283],[0.0473,0.2283],[0.0552,0.2283],[0.063,0.2283],[0.0709,0.2283],[0.0788,0.2283],[0.0867,0.2283],[0.0945,0.2283],[0.1024,0.2283],[0.1103,0.2283],[0.1182,0.2283],[0.126,0.2283],[0.1339,0.2283],[0.1418,0.2283],[0.1497,0.2283],[0.1575,0.2283],[0.1654,0.2283],[0.1733,0.2283],[0.1812,0.2283],[0.189,0.2283],[0.1969,0.2283],[0.2048,0.2283],[0.2126,0.2283],[0.2205,0.2283],[0.2284,0.2283],[0.2363,0.2283],[0.2441,0.2283],[0.252,0.2283],[0.2599,0.2283],[0.2678,0.2283],[0.2756,0.2283],[0.2835,0.2283],[0.2914,0.2283],[0.2993,0.2283],[0.3071,0.2283],[0.315,0.2283],[0.3229,0.2283],[0.3308,0.2283],[0.3386,0.2283],[0.3465,0.2283],[0.3544,0.2283],[0.3622,0.2283],[0.3701,0.2283],[0.378,0.2283],[0.3859,0.2283],[0.3937,0.2283],[0.4016,0.2283],[0.4095,0.2283],[0.4174,0.2283],[0.4252,0.2283],[0.4331,0.2283],[0.441,0.2283],[0.4489,0.2283],[0.4567,0.2283],[0.4646,0.2283],[0.4725,0.2283],[0.4803,0.2283],[0.4882,0.2283],[0.4961,0.2283],[0.504,0.2283],[0.5118,0.2283],[0.5197,0.2283],[0.5276,0.2283],[0.5355,0.2283],[0.5433,0.2283],[0.5512,0.2283],[0.5591,0.2283],[0.567,0.2283],[0.5748,0.2283],[0.5827,0.2283],[0.5906,0.2283],[0.5984,0.2283],[0.6063,0.2283],[0.6142,0.2283],[0.6221,0.2283],[0.6299,0.2283],[0.6378,0.2283],[0.6457,0.2283],[0.6536,0.2283],[0.6614,0.2283],[0.6693,0.2283],[0.6772,0.2283],[0.6851,0.2283],[0.6929,0.2283],[0.7008,0.2283],[0.7087,0.2283],[0.7166,0.2283],[0.7244,0.2283],[0.7323,0.2283],[0.7402,0.2283],[0.748,0.2283],[0.7559,0.2283],[0.7638,0.2283],[0.7717,0.2283],[0.7795,0.2283],[0.7874,0.2283],[0.7953,0.2283],[0.8032,0.2283],[0.811,0.2283],[0.8189,0.2283],[0.8268,0.2283],[0.8347,0.2283],[0.8425,0.2283],[0.8504,0.2283],[0.8583,0.2283],[0.8662,0.2283],[0.874,0.2283],[0.8819,0.2283],[0.8898,0.2283],[0.8976,0.2283],[0.9055,0.2283],[0.9134,0.2283],[0.9213,0.2283],[0.9291,0.2283],[0.937,0.2283],[0.9449,0.2283],[0.9528,0.2283],[0.9606,0.2283],[0.9685,0.2283],[0.9764,0.2283],[0.9843,0.2283],[0.9921,0.2283],[1,0.2283],[0.0001,0.2205],[0.0079,0.2205],[0.0158,0.2205],[0.0237,0.2205],[0.0316,0.2205],[0.0394,0.2205],[0.0473,0.2205],[0.0552,0.2205],[0.063,0.2205],[0.0709,0.2205],[0.0788,0.2205],[0.0867,0.2205],[0.0945,0.2205],[0.1024,0.2205],[0.1103,0.2205],[0.1182,0.2205],[0.126,0.2205],[0.1339,0.2205],[0.1418,0.2205],[0.1497,0.2205],[0.1575,0.2205],[0.1654,0.2205],[0.1733,0.2205],[0.1812,0.2205],[0.189,0.2205],[0.1969,0.2205],[0.2048,0.2205],[0.2126,0.2205],[0.2205,0.2205],[0.2284,0.2205],[0.2363,0.2205],[0.2441,0.2205],[0.252,0.2205],[0.2599,0.2205],[0.2678,0.2205],[0.2756,0.2205],[0.2835,0.2205],[0.2914,0.2205],[0.2993,0.2205],[0.3071,0.2205],[0.315,0.2205],[0.3229,0.2205],[0.3308,0.2205],[0.3386,0.2205],[0.3465,0.2205],[0.3544,0.2205],[0.3622,0.2205],[0.3701,0.2205],[0.378,0.2205],[0.3859,0.2205],[0.3937,0.2205],[0.4016,0.2205],[0.4095,0.2205],[0.4174,0.2205],[0.4252,0.2205],[0.4331,0.2205],[0.441,0.2205],[0.4489,0.2205],[0.4567,0.2205],[0.4646,0.2205],[0.4725,0.2205],[0.4803,0.2205],[0.4882,0.2205],[0.4961,0.2205],[0.504,0.2205],[0.5118,0.2205],[0.5197,0.2205],[0.5276,0.2205],[0.5355,0.2205],[0.5433,0.2205],[0.5512,0.2205],[0.5591,0.2205],[0.567,0.2205],[0.5748,0.2205],[0.5827,0.2205],[0.5906,0.2205],[0.5984,0.2205],[0.6063,0.2205],[0.6142,0.2205],[0.6221,0.2205],[0.6299,0.2205],[0.6378,0.2205],[0.6457,0.2205],[0.6536,0.2205],[0.6614,0.2205],[0.6693,0.2205],[0.6772,0.2205],[0.6851,0.2205],[0.6929,0.2205],[0.7008,0.2205],[0.7087,0.2205],[0.7166,0.2205],[0.7244,0.2205],[0.7323,0.2205],[0.7402,0.2205],[0.748,0.2205],[0.7559,0.2205],[0.7638,0.2205],[0.7717,0.2205],[0.7795,0.2205],[0.7874,0.2205],[0.7953,0.2205],[0.8032,0.2205],[0.811,0.2205],[0.8189,0.2205],[0.8268,0.2205],[0.8347,0.2205],[0.8425,0.2205],[0.8504,0.2205],[0.8583,0.2205],[0.8662,0.2205],[0.874,0.2205],[0.8819,0.2205],[0.8898,0.2205],[0.8976,0.2205],[0.9055,0.2205],[0.9134,0.2205],[0.9213,0.2205],[0.9291,0.2205],[0.937,0.2205],[0.9449,0.2205],[0.9528,0.2205],[0.9606,0.2205],[0.9685,0.2205],[0.9764,0.2205],[0.9843,0.2205],[0.9921,0.2205],[1,0.2205],[0.0001,0.2126],[0.0079,0.2126],[0.0158,0.2126],[0.0237,0.2126],[0.0316,0.2126],[0.0394,0.2126],[0.0473,0.2126],[0.0552,0.2126],[0.063,0.2126],[0.0709,0.2126],[0.0788,0.2126],[0.0867,0.2126],[0.0945,0.2126],[0.1024,0.2126],[0.1103,0.2126],[0.1182,0.2126],[0.126,0.2126],[0.1339,0.2126],[0.1418,0.2126],[0.1497,0.2126],[0.1575,0.2126],[0.1654,0.2126],[0.1733,0.2126],[0.1812,0.2126],[0.189,0.2126],[0.1969,0.2126],[0.2048,0.2126],[0.2126,0.2126],[0.2205,0.2126],[0.2284,0.2126],[0.2363,0.2126],[0.2441,0.2126],[0.252,0.2126],[0.2599,0.2126],[0.2678,0.2126],[0.2756,0.2126],[0.2835,0.2126],[0.2914,0.2126],[0.2993,0.2126],[0.3071,0.2126],[0.315,0.2126],[0.3229,0.2126],[0.3308,0.2126],[0.3386,0.2126],[0.3465,0.2126],[0.3544,0.2126],[0.3622,0.2126],[0.3701,0.2126],[0.378,0.2126],[0.3859,0.2126],[0.3937,0.2126],[0.4016,0.2126],[0.4095,0.2126],[0.4174,0.2126],[0.4252,0.2126],[0.4331,0.2126],[0.441,0.2126],[0.4489,0.2126],[0.4567,0.2126],[0.4646,0.2126],[0.4725,0.2126],[0.4803,0.2126],[0.4882,0.2126],[0.4961,0.2126],[0.504,0.2126],[0.5118,0.2126],[0.5197,0.2126],[0.5276,0.2126],[0.5355,0.2126],[0.5433,0.2126],[0.5512,0.2126],[0.5591,0.2126],[0.567,0.2126],[0.5748,0.2126],[0.5827,0.2126],[0.5906,0.2126],[0.5984,0.2126],[0.6063,0.2126],[0.6142,0.2126],[0.6221,0.2126],[0.6299,0.2126],[0.6378,0.2126],[0.6457,0.2126],[0.6536,0.2126],[0.6614,0.2126],[0.6693,0.2126],[0.6772,0.2126],[0.6851,0.2126],[0.6929,0.2126],[0.7008,0.2126],[0.7087,0.2126],[0.7166,0.2126],[0.7244,0.2126],[0.7323,0.2126],[0.7402,0.2126],[0.748,0.2126],[0.7559,0.2126],[0.7638,0.2126],[0.7717,0.2126],[0.7795,0.2126],[0.7874,0.2126],[0.7953,0.2126],[0.8032,0.2126],[0.811,0.2126],[0.8189,0.2126],[0.8268,0.2126],[0.8347,0.2126],[0.8425,0.2126],[0.8504,0.2126],[0.8583,0.2126],[0.8662,0.2126],[0.874,0.2126],[0.8819,0.2126],[0.8898,0.2126],[0.8976,0.2126],[0.9055,0.2126],[0.9134,0.2126],[0.9213,0.2126],[0.9291,0.2126],[0.937,0.2126],[0.9449,0.2126],[0.9528,0.2126],[0.9606,0.2126],[0.9685,0.2126],[0.9764,0.2126],[0.9843,0.2126],[0.9921,0.2126],[1,0.2126],[0.0001,0.2047],[0.0079,0.2047],[0.0158,0.2047],[0.0237,0.2047],[0.0316,0.2047],[0.0394,0.2047],[0.0473,0.2047],[0.0552,0.2047],[0.063,0.2047],[0.0709,0.2047],[0.0788,0.2047],[0.0867,0.2047],[0.0945,0.2047],[0.1024,0.2047],[0.1103,0.2047],[0.1182,0.2047],[0.126,0.2047],[0.1339,0.2047],[0.1418,0.2047],[0.1497,0.2047],[0.1575,0.2047],[0.1654,0.2047],[0.1733,0.2047],[0.1812,0.2047],[0.189,0.2047],[0.1969,0.2047],[0.2048,0.2047],[0.2126,0.2047],[0.2205,0.2047],[0.2284,0.2047],[0.2363,0.2047],[0.2441,0.2047],[0.252,0.2047],[0.2599,0.2047],[0.2678,0.2047],[0.2756,0.2047],[0.2835,0.2047],[0.2914,0.2047],[0.2993,0.2047],[0.3071,0.2047],[0.315,0.2047],[0.3229,0.2047],[0.3308,0.2047],[0.3386,0.2047],[0.3465,0.2047],[0.3544,0.2047],[0.3622,0.2047],[0.3701,0.2047],[0.378,0.2047],[0.3859,0.2047],[0.3937,0.2047],[0.4016,0.2047],[0.4095,0.2047],[0.4174,0.2047],[0.4252,0.2047],[0.4331,0.2047],[0.441,0.2047],[0.4489,0.2047],[0.4567,0.2047],[0.4646,0.2047],[0.4725,0.2047],[0.4803,0.2047],[0.4882,0.2047],[0.4961,0.2047],[0.504,0.2047],[0.5118,0.2047],[0.5197,0.2047],[0.5276,0.2047],[0.5355,0.2047],[0.5433,0.2047],[0.5512,0.2047],[0.5591,0.2047],[0.567,0.2047],[0.5748,0.2047],[0.5827,0.2047],[0.5906,0.2047],[0.5984,0.2047],[0.6063,0.2047],[0.6142,0.2047],[0.6221,0.2047],[0.6299,0.2047],[0.6378,0.2047],[0.6457,0.2047],[0.6536,0.2047],[0.6614,0.2047],[0.6693,0.2047],[0.6772,0.2047],[0.6851,0.2047],[0.6929,0.2047],[0.7008,0.2047],[0.7087,0.2047],[0.7166,0.2047],[0.7244,0.2047],[0.7323,0.2047],[0.7402,0.2047],[0.748,0.2047],[0.7559,0.2047],[0.7638,0.2047],[0.7717,0.2047],[0.7795,0.2047],[0.7874,0.2047],[0.7953,0.2047],[0.8032,0.2047],[0.811,0.2047],[0.8189,0.2047],[0.8268,0.2047],[0.8347,0.2047],[0.8425,0.2047],[0.8504,0.2047],[0.8583,0.2047],[0.8662,0.2047],[0.874,0.2047],[0.8819,0.2047],[0.8898,0.2047],[0.8976,0.2047],[0.9055,0.2047],[0.9134,0.2047],[0.9213,0.2047],[0.9291,0.2047],[0.937,0.2047],[0.9449,0.2047],[0.9528,0.2047],[0.9606,0.2047],[0.9685,0.2047],[0.9764,0.2047],[0.9843,0.2047],[0.9921,0.2047],[1,0.2047],[0.0001,0.1968],[0.0079,0.1968],[0.0158,0.1968],[0.0237,0.1968],[0.0316,0.1968],[0.0394,0.1968],[0.0473,0.1968],[0.0552,0.1968],[0.063,0.1968],[0.0709,0.1968],[0.0788,0.1968],[0.0867,0.1968],[0.0945,0.1968],[0.1024,0.1968],[0.1103,0.1968],[0.1182,0.1968],[0.126,0.1968],[0.1339,0.1968],[0.1418,0.1968],[0.1497,0.1968],[0.1575,0.1968],[0.1654,0.1968],[0.1733,0.1968],[0.1812,0.1968],[0.189,0.1968],[0.1969,0.1968],[0.2048,0.1968],[0.2126,0.1968],[0.2205,0.1968],[0.2284,0.1968],[0.2363,0.1968],[0.2441,0.1968],[0.252,0.1968],[0.2599,0.1968],[0.2678,0.1968],[0.2756,0.1968],[0.2835,0.1968],[0.2914,0.1968],[0.2993,0.1968],[0.3071,0.1968],[0.315,0.1968],[0.3229,0.1968],[0.3308,0.1968],[0.3386,0.1968],[0.3465,0.1968],[0.3544,0.1968],[0.3622,0.1968],[0.3701,0.1968],[0.378,0.1968],[0.3859,0.1968],[0.3937,0.1968],[0.4016,0.1968],[0.4095,0.1968],[0.4174,0.1968],[0.4252,0.1968],[0.4331,0.1968],[0.441,0.1968],[0.4489,0.1968],[0.4567,0.1968],[0.4646,0.1968],[0.4725,0.1968],[0.4803,0.1968],[0.4882,0.1968],[0.4961,0.1968],[0.504,0.1968],[0.5118,0.1968],[0.5197,0.1968],[0.5276,0.1968],[0.5355,0.1968],[0.5433,0.1968],[0.5512,0.1968],[0.5591,0.1968],[0.567,0.1968],[0.5748,0.1968],[0.5827,0.1968],[0.5906,0.1968],[0.5984,0.1968],[0.6063,0.1968],[0.6142,0.1968],[0.6221,0.1968],[0.6299,0.1968],[0.6378,0.1968],[0.6457,0.1968],[0.6536,0.1968],[0.6614,0.1968],[0.6693,0.1968],[0.6772,0.1968],[0.6851,0.1968],[0.6929,0.1968],[0.7008,0.1968],[0.7087,0.1968],[0.7166,0.1968],[0.7244,0.1968],[0.7323,0.1968],[0.7402,0.1968],[0.748,0.1968],[0.7559,0.1968],[0.7638,0.1968],[0.7717,0.1968],[0.7795,0.1968],[0.7874,0.1968],[0.7953,0.1968],[0.8032,0.1968],[0.811,0.1968],[0.8189,0.1968],[0.8268,0.1968],[0.8347,0.1968],[0.8425,0.1968],[0.8504,0.1968],[0.8583,0.1968],[0.8662,0.1968],[0.874,0.1968],[0.8819,0.1968],[0.8898,0.1968],[0.8976,0.1968],[0.9055,0.1968],[0.9134,0.1968],[0.9213,0.1968],[0.9291,0.1968],[0.937,0.1968],[0.9449,0.1968],[0.9528,0.1968],[0.9606,0.1968],[0.9685,0.1968],[0.9764,0.1968],[0.9843,0.1968],[0.9921,0.1968],[1,0.1968],[0.0001,0.189],[0.0079,0.189],[0.0158,0.189],[0.0237,0.189],[0.0316,0.189],[0.0394,0.189],[0.0473,0.189],[0.0552,0.189],[0.063,0.189],[0.0709,0.189],[0.0788,0.189],[0.0867,0.189],[0.0945,0.189],[0.1024,0.189],[0.1103,0.189],[0.1182,0.189],[0.126,0.189],[0.1339,0.189],[0.1418,0.189],[0.1497,0.189],[0.1575,0.189],[0.1654,0.189],[0.1733,0.189],[0.1812,0.189],[0.189,0.189],[0.1969,0.189],[0.2048,0.189],[0.2126,0.189],[0.2205,0.189],[0.2284,0.189],[0.2363,0.189],[0.2441,0.189],[0.252,0.189],[0.2599,0.189],[0.2678,0.189],[0.2756,0.189],[0.2835,0.189],[0.2914,0.189],[0.2993,0.189],[0.3071,0.189],[0.315,0.189],[0.3229,0.189],[0.3308,0.189],[0.3386,0.189],[0.3465,0.189],[0.3544,0.189],[0.3622,0.189],[0.3701,0.189],[0.378,0.189],[0.3859,0.189],[0.3937,0.189],[0.4016,0.189],[0.4095,0.189],[0.4174,0.189],[0.4252,0.189],[0.4331,0.189],[0.441,0.189],[0.4489,0.189],[0.4567,0.189],[0.4646,0.189],[0.4725,0.189],[0.4803,0.189],[0.4882,0.189],[0.4961,0.189],[0.504,0.189],[0.5118,0.189],[0.5197,0.189],[0.5276,0.189],[0.5355,0.189],[0.5433,0.189],[0.5512,0.189],[0.5591,0.189],[0.567,0.189],[0.5748,0.189],[0.5827,0.189],[0.5906,0.189],[0.5984,0.189],[0.6063,0.189],[0.6142,0.189],[0.6221,0.189],[0.6299,0.189],[0.6378,0.189],[0.6457,0.189],[0.6536,0.189],[0.6614,0.189],[0.6693,0.189],[0.6772,0.189],[0.6851,0.189],[0.6929,0.189],[0.7008,0.189],[0.7087,0.189],[0.7166,0.189],[0.7244,0.189],[0.7323,0.189],[0.7402,0.189],[0.748,0.189],[0.7559,0.189],[0.7638,0.189],[0.7717,0.189],[0.7795,0.189],[0.7874,0.189],[0.7953,0.189],[0.8032,0.189],[0.811,0.189],[0.8189,0.189],[0.8268,0.189],[0.8347,0.189],[0.8425,0.189],[0.8504,0.189],[0.8583,0.189],[0.8662,0.189],[0.874,0.189],[0.8819,0.189],[0.8898,0.189],[0.8976,0.189],[0.9055,0.189],[0.9134,0.189],[0.9213,0.189],[0.9291,0.189],[0.937,0.189],[0.9449,0.189],[0.9528,0.189],[0.9606,0.189],[0.9685,0.189],[0.9764,0.189],[0.9843,0.189],[0.9921,0.189],[1,0.189],[0.0001,0.1811],[0.0079,0.1811],[0.0158,0.1811],[0.0237,0.1811],[0.0316,0.1811],[0.0394,0.1811],[0.0473,0.1811],[0.0552,0.1811],[0.063,0.1811],[0.0709,0.1811],[0.0788,0.1811],[0.0867,0.1811],[0.0945,0.1811],[0.1024,0.1811],[0.1103,0.1811],[0.1182,0.1811],[0.126,0.1811],[0.1339,0.1811],[0.1418,0.1811],[0.1497,0.1811],[0.1575,0.1811],[0.1654,0.1811],[0.1733,0.1811],[0.1812,0.1811],[0.189,0.1811],[0.1969,0.1811],[0.2048,0.1811],[0.2126,0.1811],[0.2205,0.1811],[0.2284,0.1811],[0.2363,0.1811],[0.2441,0.1811],[0.252,0.1811],[0.2599,0.1811],[0.2678,0.1811],[0.2756,0.1811],[0.2835,0.1811],[0.2914,0.1811],[0.2993,0.1811],[0.3071,0.1811],[0.315,0.1811],[0.3229,0.1811],[0.3308,0.1811],[0.3386,0.1811],[0.3465,0.1811],[0.3544,0.1811],[0.3622,0.1811],[0.3701,0.1811],[0.378,0.1811],[0.3859,0.1811],[0.3937,0.1811],[0.4016,0.1811],[0.4095,0.1811],[0.4174,0.1811],[0.4252,0.1811],[0.4331,0.1811],[0.441,0.1811],[0.4489,0.1811],[0.4567,0.1811],[0.4646,0.1811],[0.4725,0.1811],[0.4803,0.1811],[0.4882,0.1811],[0.4961,0.1811],[0.504,0.1811],[0.5118,0.1811],[0.5197,0.1811],[0.5276,0.1811],[0.5355,0.1811],[0.5433,0.1811],[0.5512,0.1811],[0.5591,0.1811],[0.567,0.1811],[0.5748,0.1811],[0.5827,0.1811],[0.5906,0.1811],[0.5984,0.1811],[0.6063,0.1811],[0.6142,0.1811],[0.6221,0.1811],[0.6299,0.1811],[0.6378,0.1811],[0.6457,0.1811],[0.6536,0.1811],[0.6614,0.1811],[0.6693,0.1811],[0.6772,0.1811],[0.6851,0.1811],[0.6929,0.1811],[0.7008,0.1811],[0.7087,0.1811],[0.7166,0.1811],[0.7244,0.1811],[0.7323,0.1811],[0.7402,0.1811],[0.748,0.1811],[0.7559,0.1811],[0.7638,0.1811],[0.7717,0.1811],[0.7795,0.1811],[0.7874,0.1811],[0.7953,0.1811],[0.8032,0.1811],[0.811,0.1811],[0.8189,0.1811],[0.8268,0.1811],[0.8347,0.1811],[0.8425,0.1811],[0.8504,0.1811],[0.8583,0.1811],[0.8662,0.1811],[0.874,0.1811],[0.8819,0.1811],[0.8898,0.1811],[0.8976,0.1811],[0.9055,0.1811],[0.9134,0.1811],[0.9213,0.1811],[0.9291,0.1811],[0.937,0.1811],[0.9449,0.1811],[0.9528,0.1811],[0.9606,0.1811],[0.9685,0.1811],[0.9764,0.1811],[0.9843,0.1811],[0.9921,0.1811],[1,0.1811],[0.0001,0.1732],[0.0079,0.1732],[0.0158,0.1732],[0.0237,0.1732],[0.0316,0.1732],[0.0394,0.1732],[0.0473,0.1732],[0.0552,0.1732],[0.063,0.1732],[0.0709,0.1732],[0.0788,0.1732],[0.0867,0.1732],[0.0945,0.1732],[0.1024,0.1732],[0.1103,0.1732],[0.1182,0.1732],[0.126,0.1732],[0.1339,0.1732],[0.1418,0.1732],[0.1497,0.1732],[0.1575,0.1732],[0.1654,0.1732],[0.1733,0.1732],[0.1812,0.1732],[0.189,0.1732],[0.1969,0.1732],[0.2048,0.1732],[0.2126,0.1732],[0.2205,0.1732],[0.2284,0.1732],[0.2363,0.1732],[0.2441,0.1732],[0.252,0.1732],[0.2599,0.1732],[0.2678,0.1732],[0.2756,0.1732],[0.2835,0.1732],[0.2914,0.1732],[0.2993,0.1732],[0.3071,0.1732],[0.315,0.1732],[0.3229,0.1732],[0.3308,0.1732],[0.3386,0.1732],[0.3465,0.1732],[0.3544,0.1732],[0.3622,0.1732],[0.3701,0.1732],[0.378,0.1732],[0.3859,0.1732],[0.3937,0.1732],[0.4016,0.1732],[0.4095,0.1732],[0.4174,0.1732],[0.4252,0.1732],[0.4331,0.1732],[0.441,0.1732],[0.4489,0.1732],[0.4567,0.1732],[0.4646,0.1732],[0.4725,0.1732],[0.4803,0.1732],[0.4882,0.1732],[0.4961,0.1732],[0.504,0.1732],[0.5118,0.1732],[0.5197,0.1732],[0.5276,0.1732],[0.5355,0.1732],[0.5433,0.1732],[0.5512,0.1732],[0.5591,0.1732],[0.567,0.1732],[0.5748,0.1732],[0.5827,0.1732],[0.5906,0.1732],[0.5984,0.1732],[0.6063,0.1732],[0.6142,0.1732],[0.6221,0.1732],[0.6299,0.1732],[0.6378,0.1732],[0.6457,0.1732],[0.6536,0.1732],[0.6614,0.1732],[0.6693,0.1732],[0.6772,0.1732],[0.6851,0.1732],[0.6929,0.1732],[0.7008,0.1732],[0.7087,0.1732],[0.7166,0.1732],[0.7244,0.1732],[0.7323,0.1732],[0.7402,0.1732],[0.748,0.1732],[0.7559,0.1732],[0.7638,0.1732],[0.7717,0.1732],[0.7795,0.1732],[0.7874,0.1732],[0.7953,0.1732],[0.8032,0.1732],[0.811,0.1732],[0.8189,0.1732],[0.8268,0.1732],[0.8347,0.1732],[0.8425,0.1732],[0.8504,0.1732],[0.8583,0.1732],[0.8662,0.1732],[0.874,0.1732],[0.8819,0.1732],[0.8898,0.1732],[0.8976,0.1732],[0.9055,0.1732],[0.9134,0.1732],[0.9213,0.1732],[0.9291,0.1732],[0.937,0.1732],[0.9449,0.1732],[0.9528,0.1732],[0.9606,0.1732],[0.9685,0.1732],[0.9764,0.1732],[0.9843,0.1732],[0.9921,0.1732],[1,0.1732],[0.0001,0.1653],[0.0079,0.1653],[0.0158,0.1653],[0.0237,0.1653],[0.0316,0.1653],[0.0394,0.1653],[0.0473,0.1653],[0.0552,0.1653],[0.063,0.1653],[0.0709,0.1653],[0.0788,0.1653],[0.0867,0.1653],[0.0945,0.1653],[0.1024,0.1653],[0.1103,0.1653],[0.1182,0.1653],[0.126,0.1653],[0.1339,0.1653],[0.1418,0.1653],[0.1497,0.1653],[0.1575,0.1653],[0.1654,0.1653],[0.1733,0.1653],[0.1812,0.1653],[0.189,0.1653],[0.1969,0.1653],[0.2048,0.1653],[0.2126,0.1653],[0.2205,0.1653],[0.2284,0.1653],[0.2363,0.1653],[0.2441,0.1653],[0.252,0.1653],[0.2599,0.1653],[0.2678,0.1653],[0.2756,0.1653],[0.2835,0.1653],[0.2914,0.1653],[0.2993,0.1653],[0.3071,0.1653],[0.315,0.1653],[0.3229,0.1653],[0.3308,0.1653],[0.3386,0.1653],[0.3465,0.1653],[0.3544,0.1653],[0.3622,0.1653],[0.3701,0.1653],[0.378,0.1653],[0.3859,0.1653],[0.3937,0.1653],[0.4016,0.1653],[0.4095,0.1653],[0.4174,0.1653],[0.4252,0.1653],[0.4331,0.1653],[0.441,0.1653],[0.4489,0.1653],[0.4567,0.1653],[0.4646,0.1653],[0.4725,0.1653],[0.4803,0.1653],[0.4882,0.1653],[0.4961,0.1653],[0.504,0.1653],[0.5118,0.1653],[0.5197,0.1653],[0.5276,0.1653],[0.5355,0.1653],[0.5433,0.1653],[0.5512,0.1653],[0.5591,0.1653],[0.567,0.1653],[0.5748,0.1653],[0.5827,0.1653],[0.5906,0.1653],[0.5984,0.1653],[0.6063,0.1653],[0.6142,0.1653],[0.6221,0.1653],[0.6299,0.1653],[0.6378,0.1653],[0.6457,0.1653],[0.6536,0.1653],[0.6614,0.1653],[0.6693,0.1653],[0.6772,0.1653],[0.6851,0.1653],[0.6929,0.1653],[0.7008,0.1653],[0.7087,0.1653],[0.7166,0.1653],[0.7244,0.1653],[0.7323,0.1653],[0.7402,0.1653],[0.748,0.1653],[0.7559,0.1653],[0.7638,0.1653],[0.7717,0.1653],[0.7795,0.1653],[0.7874,0.1653],[0.7953,0.1653],[0.8032,0.1653],[0.811,0.1653],[0.8189,0.1653],[0.8268,0.1653],[0.8347,0.1653],[0.8425,0.1653],[0.8504,0.1653],[0.8583,0.1653],[0.8662,0.1653],[0.874,0.1653],[0.8819,0.1653],[0.8898,0.1653],[0.8976,0.1653],[0.9055,0.1653],[0.9134,0.1653],[0.9213,0.1653],[0.9291,0.1653],[0.937,0.1653],[0.9449,0.1653],[0.9528,0.1653],[0.9606,0.1653],[0.9685,0.1653],[0.9764,0.1653],[0.9843,0.1653],[0.9921,0.1653],[1,0.1653],[0.0001,0.1575],[0.0079,0.1575],[0.0158,0.1575],[0.0237,0.1575],[0.0316,0.1575],[0.0394,0.1575],[0.0473,0.1575],[0.0552,0.1575],[0.063,0.1575],[0.0709,0.1575],[0.0788,0.1575],[0.0867,0.1575],[0.0945,0.1575],[0.1024,0.1575],[0.1103,0.1575],[0.1182,0.1575],[0.126,0.1575],[0.1339,0.1575],[0.1418,0.1575],[0.1497,0.1575],[0.1575,0.1575],[0.1654,0.1575],[0.1733,0.1575],[0.1812,0.1575],[0.189,0.1575],[0.1969,0.1575],[0.2048,0.1575],[0.2126,0.1575],[0.2205,0.1575],[0.2284,0.1575],[0.2363,0.1575],[0.2441,0.1575],[0.252,0.1575],[0.2599,0.1575],[0.2678,0.1575],[0.2756,0.1575],[0.2835,0.1575],[0.2914,0.1575],[0.2993,0.1575],[0.3071,0.1575],[0.315,0.1575],[0.3229,0.1575],[0.3308,0.1575],[0.3386,0.1575],[0.3465,0.1575],[0.3544,0.1575],[0.3622,0.1575],[0.3701,0.1575],[0.378,0.1575],[0.3859,0.1575],[0.3937,0.1575],[0.4016,0.1575],[0.4095,0.1575],[0.4174,0.1575],[0.4252,0.1575],[0.4331,0.1575],[0.441,0.1575],[0.4489,0.1575],[0.4567,0.1575],[0.4646,0.1575],[0.4725,0.1575],[0.4803,0.1575],[0.4882,0.1575],[0.4961,0.1575],[0.504,0.1575],[0.5118,0.1575],[0.5197,0.1575],[0.5276,0.1575],[0.5355,0.1575],[0.5433,0.1575],[0.5512,0.1575],[0.5591,0.1575],[0.567,0.1575],[0.5748,0.1575],[0.5827,0.1575],[0.5906,0.1575],[0.5984,0.1575],[0.6063,0.1575],[0.6142,0.1575],[0.6221,0.1575],[0.6299,0.1575],[0.6378,0.1575],[0.6457,0.1575],[0.6536,0.1575],[0.6614,0.1575],[0.6693,0.1575],[0.6772,0.1575],[0.6851,0.1575],[0.6929,0.1575],[0.7008,0.1575],[0.7087,0.1575],[0.7166,0.1575],[0.7244,0.1575],[0.7323,0.1575],[0.7402,0.1575],[0.748,0.1575],[0.7559,0.1575],[0.7638,0.1575],[0.7717,0.1575],[0.7795,0.1575],[0.7874,0.1575],[0.7953,0.1575],[0.8032,0.1575],[0.811,0.1575],[0.8189,0.1575],[0.8268,0.1575],[0.8347,0.1575],[0.8425,0.1575],[0.8504,0.1575],[0.8583,0.1575],[0.8662,0.1575],[0.874,0.1575],[0.8819,0.1575],[0.8898,0.1575],[0.8976,0.1575],[0.9055,0.1575],[0.9134,0.1575],[0.9213,0.1575],[0.9291,0.1575],[0.937,0.1575],[0.9449,0.1575],[0.9528,0.1575],[0.9606,0.1575],[0.9685,0.1575],[0.9764,0.1575],[0.9843,0.1575],[0.9921,0.1575],[1,0.1575],[0.0001,0.1496],[0.0079,0.1496],[0.0158,0.1496],[0.0237,0.1496],[0.0316,0.1496],[0.0394,0.1496],[0.0473,0.1496],[0.0552,0.1496],[0.063,0.1496],[0.0709,0.1496],[0.0788,0.1496],[0.0867,0.1496],[0.0945,0.1496],[0.1024,0.1496],[0.1103,0.1496],[0.1182,0.1496],[0.126,0.1496],[0.1339,0.1496],[0.1418,0.1496],[0.1497,0.1496],[0.1575,0.1496],[0.1654,0.1496],[0.1733,0.1496],[0.1812,0.1496],[0.189,0.1496],[0.1969,0.1496],[0.2048,0.1496],[0.2126,0.1496],[0.2205,0.1496],[0.2284,0.1496],[0.2363,0.1496],[0.2441,0.1496],[0.252,0.1496],[0.2599,0.1496],[0.2678,0.1496],[0.2756,0.1496],[0.2835,0.1496],[0.2914,0.1496],[0.2993,0.1496],[0.3071,0.1496],[0.315,0.1496],[0.3229,0.1496],[0.3308,0.1496],[0.3386,0.1496],[0.3465,0.1496],[0.3544,0.1496],[0.3622,0.1496],[0.3701,0.1496],[0.378,0.1496],[0.3859,0.1496],[0.3937,0.1496],[0.4016,0.1496],[0.4095,0.1496],[0.4174,0.1496],[0.4252,0.1496],[0.4331,0.1496],[0.441,0.1496],[0.4489,0.1496],[0.4567,0.1496],[0.4646,0.1496],[0.4725,0.1496],[0.4803,0.1496],[0.4882,0.1496],[0.4961,0.1496],[0.504,0.1496],[0.5118,0.1496],[0.5197,0.1496],[0.5276,0.1496],[0.5355,0.1496],[0.5433,0.1496],[0.5512,0.1496],[0.5591,0.1496],[0.567,0.1496],[0.5748,0.1496],[0.5827,0.1496],[0.5906,0.1496],[0.5984,0.1496],[0.6063,0.1496],[0.6142,0.1496],[0.6221,0.1496],[0.6299,0.1496],[0.6378,0.1496],[0.6457,0.1496],[0.6536,0.1496],[0.6614,0.1496],[0.6693,0.1496],[0.6772,0.1496],[0.6851,0.1496],[0.6929,0.1496],[0.7008,0.1496],[0.7087,0.1496],[0.7166,0.1496],[0.7244,0.1496],[0.7323,0.1496],[0.7402,0.1496],[0.748,0.1496],[0.7559,0.1496],[0.7638,0.1496],[0.7717,0.1496],[0.7795,0.1496],[0.7874,0.1496],[0.7953,0.1496],[0.8032,0.1496],[0.811,0.1496],[0.8189,0.1496],[0.8268,0.1496],[0.8347,0.1496],[0.8425,0.1496],[0.8504,0.1496],[0.8583,0.1496],[0.8662,0.1496],[0.874,0.1496],[0.8819,0.1496],[0.8898,0.1496],[0.8976,0.1496],[0.9055,0.1496],[0.9134,0.1496],[0.9213,0.1496],[0.9291,0.1496],[0.937,0.1496],[0.9449,0.1496],[0.9528,0.1496],[0.9606,0.1496],[0.9685,0.1496],[0.9764,0.1496],[0.9843,0.1496],[0.9921,0.1496],[1,0.1496],[0.0001,0.1417],[0.0079,0.1417],[0.0158,0.1417],[0.0237,0.1417],[0.0316,0.1417],[0.0394,0.1417],[0.0473,0.1417],[0.0552,0.1417],[0.063,0.1417],[0.0709,0.1417],[0.0788,0.1417],[0.0867,0.1417],[0.0945,0.1417],[0.1024,0.1417],[0.1103,0.1417],[0.1182,0.1417],[0.126,0.1417],[0.1339,0.1417],[0.1418,0.1417],[0.1497,0.1417],[0.1575,0.1417],[0.1654,0.1417],[0.1733,0.1417],[0.1812,0.1417],[0.189,0.1417],[0.1969,0.1417],[0.2048,0.1417],[0.2126,0.1417],[0.2205,0.1417],[0.2284,0.1417],[0.2363,0.1417],[0.2441,0.1417],[0.252,0.1417],[0.2599,0.1417],[0.2678,0.1417],[0.2756,0.1417],[0.2835,0.1417],[0.2914,0.1417],[0.2993,0.1417],[0.3071,0.1417],[0.315,0.1417],[0.3229,0.1417],[0.3308,0.1417],[0.3386,0.1417],[0.3465,0.1417],[0.3544,0.1417],[0.3622,0.1417],[0.3701,0.1417],[0.378,0.1417],[0.3859,0.1417],[0.3937,0.1417],[0.4016,0.1417],[0.4095,0.1417],[0.4174,0.1417],[0.4252,0.1417],[0.4331,0.1417],[0.441,0.1417],[0.4489,0.1417],[0.4567,0.1417],[0.4646,0.1417],[0.4725,0.1417],[0.4803,0.1417],[0.4882,0.1417],[0.4961,0.1417],[0.504,0.1417],[0.5118,0.1417],[0.5197,0.1417],[0.5276,0.1417],[0.5355,0.1417],[0.5433,0.1417],[0.5512,0.1417],[0.5591,0.1417],[0.567,0.1417],[0.5748,0.1417],[0.5827,0.1417],[0.5906,0.1417],[0.5984,0.1417],[0.6063,0.1417],[0.6142,0.1417],[0.6221,0.1417],[0.6299,0.1417],[0.6378,0.1417],[0.6457,0.1417],[0.6536,0.1417],[0.6614,0.1417],[0.6693,0.1417],[0.6772,0.1417],[0.6851,0.1417],[0.6929,0.1417],[0.7008,0.1417],[0.7087,0.1417],[0.7166,0.1417],[0.7244,0.1417],[0.7323,0.1417],[0.7402,0.1417],[0.748,0.1417],[0.7559,0.1417],[0.7638,0.1417],[0.7717,0.1417],[0.7795,0.1417],[0.7874,0.1417],[0.7953,0.1417],[0.8032,0.1417],[0.811,0.1417],[0.8189,0.1417],[0.8268,0.1417],[0.8347,0.1417],[0.8425,0.1417],[0.8504,0.1417],[0.8583,0.1417],[0.8662,0.1417],[0.874,0.1417],[0.8819,0.1417],[0.8898,0.1417],[0.8976,0.1417],[0.9055,0.1417],[0.9134,0.1417],[0.9213,0.1417],[0.9291,0.1417],[0.937,0.1417],[0.9449,0.1417],[0.9528,0.1417],[0.9606,0.1417],[0.9685,0.1417],[0.9764,0.1417],[0.9843,0.1417],[0.9921,0.1417],[1,0.1417],[0.0001,0.1338],[0.0079,0.1338],[0.0158,0.1338],[0.0237,0.1338],[0.0316,0.1338],[0.0394,0.1338],[0.0473,0.1338],[0.0552,0.1338],[0.063,0.1338],[0.0709,0.1338],[0.0788,0.1338],[0.0867,0.1338],[0.0945,0.1338],[0.1024,0.1338],[0.1103,0.1338],[0.1182,0.1338],[0.126,0.1338],[0.1339,0.1338],[0.1418,0.1338],[0.1497,0.1338],[0.1575,0.1338],[0.1654,0.1338],[0.1733,0.1338],[0.1812,0.1338],[0.189,0.1338],[0.1969,0.1338],[0.2048,0.1338],[0.2126,0.1338],[0.2205,0.1338],[0.2284,0.1338],[0.2363,0.1338],[0.2441,0.1338],[0.252,0.1338],[0.2599,0.1338],[0.2678,0.1338],[0.2756,0.1338],[0.2835,0.1338],[0.2914,0.1338],[0.2993,0.1338],[0.3071,0.1338],[0.315,0.1338],[0.3229,0.1338],[0.3308,0.1338],[0.3386,0.1338],[0.3465,0.1338],[0.3544,0.1338],[0.3622,0.1338],[0.3701,0.1338],[0.378,0.1338],[0.3859,0.1338],[0.3937,0.1338],[0.4016,0.1338],[0.4095,0.1338],[0.4174,0.1338],[0.4252,0.1338],[0.4331,0.1338],[0.441,0.1338],[0.4489,0.1338],[0.4567,0.1338],[0.4646,0.1338],[0.4725,0.1338],[0.4803,0.1338],[0.4882,0.1338],[0.4961,0.1338],[0.504,0.1338],[0.5118,0.1338],[0.5197,0.1338],[0.5276,0.1338],[0.5355,0.1338],[0.5433,0.1338],[0.5512,0.1338],[0.5591,0.1338],[0.567,0.1338],[0.5748,0.1338],[0.5827,0.1338],[0.5906,0.1338],[0.5984,0.1338],[0.6063,0.1338],[0.6142,0.1338],[0.6221,0.1338],[0.6299,0.1338],[0.6378,0.1338],[0.6457,0.1338],[0.6536,0.1338],[0.6614,0.1338],[0.6693,0.1338],[0.6772,0.1338],[0.6851,0.1338],[0.6929,0.1338],[0.7008,0.1338],[0.7087,0.1338],[0.7166,0.1338],[0.7244,0.1338],[0.7323,0.1338],[0.7402,0.1338],[0.748,0.1338],[0.7559,0.1338],[0.7638,0.1338],[0.7717,0.1338],[0.7795,0.1338],[0.7874,0.1338],[0.7953,0.1338],[0.8032,0.1338],[0.811,0.1338],[0.8189,0.1338],[0.8268,0.1338],[0.8347,0.1338],[0.8425,0.1338],[0.8504,0.1338],[0.8583,0.1338],[0.8662,0.1338],[0.874,0.1338],[0.8819,0.1338],[0.8898,0.1338],[0.8976,0.1338],[0.9055,0.1338],[0.9134,0.1338],[0.9213,0.1338],[0.9291,0.1338],[0.937,0.1338],[0.9449,0.1338],[0.9528,0.1338],[0.9606,0.1338],[0.9685,0.1338],[0.9764,0.1338],[0.9843,0.1338],[0.9921,0.1338],[1,0.1338],[0.0001,0.126],[0.0079,0.126],[0.0158,0.126],[0.0237,0.126],[0.0316,0.126],[0.0394,0.126],[0.0473,0.126],[0.0552,0.126],[0.063,0.126],[0.0709,0.126],[0.0788,0.126],[0.0867,0.126],[0.0945,0.126],[0.1024,0.126],[0.1103,0.126],[0.1182,0.126],[0.126,0.126],[0.1339,0.126],[0.1418,0.126],[0.1497,0.126],[0.1575,0.126],[0.1654,0.126],[0.1733,0.126],[0.1812,0.126],[0.189,0.126],[0.1969,0.126],[0.2048,0.126],[0.2126,0.126],[0.2205,0.126],[0.2284,0.126],[0.2363,0.126],[0.2441,0.126],[0.252,0.126],[0.2599,0.126],[0.2678,0.126],[0.2756,0.126],[0.2835,0.126],[0.2914,0.126],[0.2993,0.126],[0.3071,0.126],[0.315,0.126],[0.3229,0.126],[0.3308,0.126],[0.3386,0.126],[0.3465,0.126],[0.3544,0.126],[0.3622,0.126],[0.3701,0.126],[0.378,0.126],[0.3859,0.126],[0.3937,0.126],[0.4016,0.126],[0.4095,0.126],[0.4174,0.126],[0.4252,0.126],[0.4331,0.126],[0.441,0.126],[0.4489,0.126],[0.4567,0.126],[0.4646,0.126],[0.4725,0.126],[0.4803,0.126],[0.4882,0.126],[0.4961,0.126],[0.504,0.126],[0.5118,0.126],[0.5197,0.126],[0.5276,0.126],[0.5355,0.126],[0.5433,0.126],[0.5512,0.126],[0.5591,0.126],[0.567,0.126],[0.5748,0.126],[0.5827,0.126],[0.5906,0.126],[0.5984,0.126],[0.6063,0.126],[0.6142,0.126],[0.6221,0.126],[0.6299,0.126],[0.6378,0.126],[0.6457,0.126],[0.6536,0.126],[0.6614,0.126],[0.6693,0.126],[0.6772,0.126],[0.6851,0.126],[0.6929,0.126],[0.7008,0.126],[0.7087,0.126],[0.7166,0.126],[0.7244,0.126],[0.7323,0.126],[0.7402,0.126],[0.748,0.126],[0.7559,0.126],[0.7638,0.126],[0.7717,0.126],[0.7795,0.126],[0.7874,0.126],[0.7953,0.126],[0.8032,0.126],[0.811,0.126],[0.8189,0.126],[0.8268,0.126],[0.8347,0.126],[0.8425,0.126],[0.8504,0.126],[0.8583,0.126],[0.8662,0.126],[0.874,0.126],[0.8819,0.126],[0.8898,0.126],[0.8976,0.126],[0.9055,0.126],[0.9134,0.126],[0.9213,0.126],[0.9291,0.126],[0.937,0.126],[0.9449,0.126],[0.9528,0.126],[0.9606,0.126],[0.9685,0.126],[0.9764,0.126],[0.9843,0.126],[0.9921,0.126],[1,0.126],[0.0001,0.1181],[0.0079,0.1181],[0.0158,0.1181],[0.0237,0.1181],[0.0316,0.1181],[0.0394,0.1181],[0.0473,0.1181],[0.0552,0.1181],[0.063,0.1181],[0.0709,0.1181],[0.0788,0.1181],[0.0867,0.1181],[0.0945,0.1181],[0.1024,0.1181],[0.1103,0.1181],[0.1182,0.1181],[0.126,0.1181],[0.1339,0.1181],[0.1418,0.1181],[0.1497,0.1181],[0.1575,0.1181],[0.1654,0.1181],[0.1733,0.1181],[0.1812,0.1181],[0.189,0.1181],[0.1969,0.1181],[0.2048,0.1181],[0.2126,0.1181],[0.2205,0.1181],[0.2284,0.1181],[0.2363,0.1181],[0.2441,0.1181],[0.252,0.1181],[0.2599,0.1181],[0.2678,0.1181],[0.2756,0.1181],[0.2835,0.1181],[0.2914,0.1181],[0.2993,0.1181],[0.3071,0.1181],[0.315,0.1181],[0.3229,0.1181],[0.3308,0.1181],[0.3386,0.1181],[0.3465,0.1181],[0.3544,0.1181],[0.3622,0.1181],[0.3701,0.1181],[0.378,0.1181],[0.3859,0.1181],[0.3937,0.1181],[0.4016,0.1181],[0.4095,0.1181],[0.4174,0.1181],[0.4252,0.1181],[0.4331,0.1181],[0.441,0.1181],[0.4489,0.1181],[0.4567,0.1181],[0.4646,0.1181],[0.4725,0.1181],[0.4803,0.1181],[0.4882,0.1181],[0.4961,0.1181],[0.504,0.1181],[0.5118,0.1181],[0.5197,0.1181],[0.5276,0.1181],[0.5355,0.1181],[0.5433,0.1181],[0.5512,0.1181],[0.5591,0.1181],[0.567,0.1181],[0.5748,0.1181],[0.5827,0.1181],[0.5906,0.1181],[0.5984,0.1181],[0.6063,0.1181],[0.6142,0.1181],[0.6221,0.1181],[0.6299,0.1181],[0.6378,0.1181],[0.6457,0.1181],[0.6536,0.1181],[0.6614,0.1181],[0.6693,0.1181],[0.6772,0.1181],[0.6851,0.1181],[0.6929,0.1181],[0.7008,0.1181],[0.7087,0.1181],[0.7166,0.1181],[0.7244,0.1181],[0.7323,0.1181],[0.7402,0.1181],[0.748,0.1181],[0.7559,0.1181],[0.7638,0.1181],[0.7717,0.1181],[0.7795,0.1181],[0.7874,0.1181],[0.7953,0.1181],[0.8032,0.1181],[0.811,0.1181],[0.8189,0.1181],[0.8268,0.1181],[0.8347,0.1181],[0.8425,0.1181],[0.8504,0.1181],[0.8583,0.1181],[0.8662,0.1181],[0.874,0.1181],[0.8819,0.1181],[0.8898,0.1181],[0.8976,0.1181],[0.9055,0.1181],[0.9134,0.1181],[0.9213,0.1181],[0.9291,0.1181],[0.937,0.1181],[0.9449,0.1181],[0.9528,0.1181],[0.9606,0.1181],[0.9685,0.1181],[0.9764,0.1181],[0.9843,0.1181],[0.9921,0.1181],[1,0.1181],[0.0001,0.1102],[0.0079,0.1102],[0.0158,0.1102],[0.0237,0.1102],[0.0316,0.1102],[0.0394,0.1102],[0.0473,0.1102],[0.0552,0.1102],[0.063,0.1102],[0.0709,0.1102],[0.0788,0.1102],[0.0867,0.1102],[0.0945,0.1102],[0.1024,0.1102],[0.1103,0.1102],[0.1182,0.1102],[0.126,0.1102],[0.1339,0.1102],[0.1418,0.1102],[0.1497,0.1102],[0.1575,0.1102],[0.1654,0.1102],[0.1733,0.1102],[0.1812,0.1102],[0.189,0.1102],[0.1969,0.1102],[0.2048,0.1102],[0.2126,0.1102],[0.2205,0.1102],[0.2284,0.1102],[0.2363,0.1102],[0.2441,0.1102],[0.252,0.1102],[0.2599,0.1102],[0.2678,0.1102],[0.2756,0.1102],[0.2835,0.1102],[0.2914,0.1102],[0.2993,0.1102],[0.3071,0.1102],[0.315,0.1102],[0.3229,0.1102],[0.3308,0.1102],[0.3386,0.1102],[0.3465,0.1102],[0.3544,0.1102],[0.3622,0.1102],[0.3701,0.1102],[0.378,0.1102],[0.3859,0.1102],[0.3937,0.1102],[0.4016,0.1102],[0.4095,0.1102],[0.4174,0.1102],[0.4252,0.1102],[0.4331,0.1102],[0.441,0.1102],[0.4489,0.1102],[0.4567,0.1102],[0.4646,0.1102],[0.4725,0.1102],[0.4803,0.1102],[0.4882,0.1102],[0.4961,0.1102],[0.504,0.1102],[0.5118,0.1102],[0.5197,0.1102],[0.5276,0.1102],[0.5355,0.1102],[0.5433,0.1102],[0.5512,0.1102],[0.5591,0.1102],[0.567,0.1102],[0.5748,0.1102],[0.5827,0.1102],[0.5906,0.1102],[0.5984,0.1102],[0.6063,0.1102],[0.6142,0.1102],[0.6221,0.1102],[0.6299,0.1102],[0.6378,0.1102],[0.6457,0.1102],[0.6536,0.1102],[0.6614,0.1102],[0.6693,0.1102],[0.6772,0.1102],[0.6851,0.1102],[0.6929,0.1102],[0.7008,0.1102],[0.7087,0.1102],[0.7166,0.1102],[0.7244,0.1102],[0.7323,0.1102],[0.7402,0.1102],[0.748,0.1102],[0.7559,0.1102],[0.7638,0.1102],[0.7717,0.1102],[0.7795,0.1102],[0.7874,0.1102],[0.7953,0.1102],[0.8032,0.1102],[0.811,0.1102],[0.8189,0.1102],[0.8268,0.1102],[0.8347,0.1102],[0.8425,0.1102],[0.8504,0.1102],[0.8583,0.1102],[0.8662,0.1102],[0.874,0.1102],[0.8819,0.1102],[0.8898,0.1102],[0.8976,0.1102],[0.9055,0.1102],[0.9134,0.1102],[0.9213,0.1102],[0.9291,0.1102],[0.937,0.1102],[0.9449,0.1102],[0.9528,0.1102],[0.9606,0.1102],[0.9685,0.1102],[0.9764,0.1102],[0.9843,0.1102],[0.9921,0.1102],[1,0.1102],[0.0001,0.1024],[0.0079,0.1024],[0.0158,0.1024],[0.0237,0.1024],[0.0316,0.1024],[0.0394,0.1024],[0.0473,0.1024],[0.0552,0.1024],[0.063,0.1024],[0.0709,0.1024],[0.0788,0.1024],[0.0867,0.1024],[0.0945,0.1024],[0.1024,0.1024],[0.1103,0.1024],[0.1182,0.1024],[0.126,0.1024],[0.1339,0.1024],[0.1418,0.1024],[0.1497,0.1024],[0.1575,0.1024],[0.1654,0.1024],[0.1733,0.1024],[0.1812,0.1024],[0.189,0.1024],[0.1969,0.1024],[0.2048,0.1024],[0.2126,0.1024],[0.2205,0.1024],[0.2284,0.1024],[0.2363,0.1024],[0.2441,0.1024],[0.252,0.1024],[0.2599,0.1024],[0.2678,0.1024],[0.2756,0.1024],[0.2835,0.1024],[0.2914,0.1024],[0.2993,0.1024],[0.3071,0.1024],[0.315,0.1024],[0.3229,0.1024],[0.3308,0.1024],[0.3386,0.1024],[0.3465,0.1024],[0.3544,0.1024],[0.3622,0.1024],[0.3701,0.1024],[0.378,0.1024],[0.3859,0.1024],[0.3937,0.1024],[0.4016,0.1024],[0.4095,0.1024],[0.4174,0.1024],[0.4252,0.1024],[0.4331,0.1024],[0.441,0.1024],[0.4489,0.1024],[0.4567,0.1024],[0.4646,0.1024],[0.4725,0.1024],[0.4803,0.1024],[0.4882,0.1024],[0.4961,0.1024],[0.504,0.1024],[0.5118,0.1024],[0.5197,0.1024],[0.5276,0.1024],[0.5355,0.1024],[0.5433,0.1024],[0.5512,0.1024],[0.5591,0.1024],[0.567,0.1024],[0.5748,0.1024],[0.5827,0.1024],[0.5906,0.1024],[0.5984,0.1024],[0.6063,0.1024],[0.6142,0.1024],[0.6221,0.1024],[0.6299,0.1024],[0.6378,0.1024],[0.6457,0.1024],[0.6536,0.1024],[0.6614,0.1024],[0.6693,0.1024],[0.6772,0.1024],[0.6851,0.1024],[0.6929,0.1024],[0.7008,0.1024],[0.7087,0.1024],[0.7166,0.1024],[0.7244,0.1024],[0.7323,0.1024],[0.7402,0.1024],[0.748,0.1024],[0.7559,0.1024],[0.7638,0.1024],[0.7717,0.1024],[0.7795,0.1024],[0.7874,0.1024],[0.7953,0.1024],[0.8032,0.1024],[0.811,0.1024],[0.8189,0.1024],[0.8268,0.1024],[0.8347,0.1024],[0.8425,0.1024],[0.8504,0.1024],[0.8583,0.1024],[0.8662,0.1024],[0.874,0.1024],[0.8819,0.1024],[0.8898,0.1024],[0.8976,0.1024],[0.9055,0.1024],[0.9134,0.1024],[0.9213,0.1024],[0.9291,0.1024],[0.937,0.1024],[0.9449,0.1024],[0.9528,0.1024],[0.9606,0.1024],[0.9685,0.1024],[0.9764,0.1024],[0.9843,0.1024],[0.9921,0.1024],[1,0.1024],[0.0001,0.0945],[0.0079,0.0945],[0.0158,0.0945],[0.0237,0.0945],[0.0316,0.0945],[0.0394,0.0945],[0.0473,0.0945],[0.0552,0.0945],[0.063,0.0945],[0.0709,0.0945],[0.0788,0.0945],[0.0867,0.0945],[0.0945,0.0945],[0.1024,0.0945],[0.1103,0.0945],[0.1182,0.0945],[0.126,0.0945],[0.1339,0.0945],[0.1418,0.0945],[0.1497,0.0945],[0.1575,0.0945],[0.1654,0.0945],[0.1733,0.0945],[0.1812,0.0945],[0.189,0.0945],[0.1969,0.0945],[0.2048,0.0945],[0.2126,0.0945],[0.2205,0.0945],[0.2284,0.0945],[0.2363,0.0945],[0.2441,0.0945],[0.252,0.0945],[0.2599,0.0945],[0.2678,0.0945],[0.2756,0.0945],[0.2835,0.0945],[0.2914,0.0945],[0.2993,0.0945],[0.3071,0.0945],[0.315,0.0945],[0.3229,0.0945],[0.3308,0.0945],[0.3386,0.0945],[0.3465,0.0945],[0.3544,0.0945],[0.3622,0.0945],[0.3701,0.0945],[0.378,0.0945],[0.3859,0.0945],[0.3937,0.0945],[0.4016,0.0945],[0.4095,0.0945],[0.4174,0.0945],[0.4252,0.0945],[0.4331,0.0945],[0.441,0.0945],[0.4489,0.0945],[0.4567,0.0945],[0.4646,0.0945],[0.4725,0.0945],[0.4803,0.0945],[0.4882,0.0945],[0.4961,0.0945],[0.504,0.0945],[0.5118,0.0945],[0.5197,0.0945],[0.5276,0.0945],[0.5355,0.0945],[0.5433,0.0945],[0.5512,0.0945],[0.5591,0.0945],[0.567,0.0945],[0.5748,0.0945],[0.5827,0.0945],[0.5906,0.0945],[0.5984,0.0945],[0.6063,0.0945],[0.6142,0.0945],[0.6221,0.0945],[0.6299,0.0945],[0.6378,0.0945],[0.6457,0.0945],[0.6536,0.0945],[0.6614,0.0945],[0.6693,0.0945],[0.6772,0.0945],[0.6851,0.0945],[0.6929,0.0945],[0.7008,0.0945],[0.7087,0.0945],[0.7166,0.0945],[0.7244,0.0945],[0.7323,0.0945],[0.7402,0.0945],[0.748,0.0945],[0.7559,0.0945],[0.7638,0.0945],[0.7717,0.0945],[0.7795,0.0945],[0.7874,0.0945],[0.7953,0.0945],[0.8032,0.0945],[0.811,0.0945],[0.8189,0.0945],[0.8268,0.0945],[0.8347,0.0945],[0.8425,0.0945],[0.8504,0.0945],[0.8583,0.0945],[0.8662,0.0945],[0.874,0.0945],[0.8819,0.0945],[0.8898,0.0945],[0.8976,0.0945],[0.9055,0.0945],[0.9134,0.0945],[0.9213,0.0945],[0.9291,0.0945],[0.937,0.0945],[0.9449,0.0945],[0.9528,0.0945],[0.9606,0.0945],[0.9685,0.0945],[0.9764,0.0945],[0.9843,0.0945],[0.9921,0.0945],[1,0.0945],[0.0001,0.0866],[0.0079,0.0866],[0.0158,0.0866],[0.0237,0.0866],[0.0316,0.0866],[0.0394,0.0866],[0.0473,0.0866],[0.0552,0.0866],[0.063,0.0866],[0.0709,0.0866],[0.0788,0.0866],[0.0867,0.0866],[0.0945,0.0866],[0.1024,0.0866],[0.1103,0.0866],[0.1182,0.0866],[0.126,0.0866],[0.1339,0.0866],[0.1418,0.0866],[0.1497,0.0866],[0.1575,0.0866],[0.1654,0.0866],[0.1733,0.0866],[0.1812,0.0866],[0.189,0.0866],[0.1969,0.0866],[0.2048,0.0866],[0.2126,0.0866],[0.2205,0.0866],[0.2284,0.0866],[0.2363,0.0866],[0.2441,0.0866],[0.252,0.0866],[0.2599,0.0866],[0.2678,0.0866],[0.2756,0.0866],[0.2835,0.0866],[0.2914,0.0866],[0.2993,0.0866],[0.3071,0.0866],[0.315,0.0866],[0.3229,0.0866],[0.3308,0.0866],[0.3386,0.0866],[0.3465,0.0866],[0.3544,0.0866],[0.3622,0.0866],[0.3701,0.0866],[0.378,0.0866],[0.3859,0.0866],[0.3937,0.0866],[0.4016,0.0866],[0.4095,0.0866],[0.4174,0.0866],[0.4252,0.0866],[0.4331,0.0866],[0.441,0.0866],[0.4489,0.0866],[0.4567,0.0866],[0.4646,0.0866],[0.4725,0.0866],[0.4803,0.0866],[0.4882,0.0866],[0.4961,0.0866],[0.504,0.0866],[0.5118,0.0866],[0.5197,0.0866],[0.5276,0.0866],[0.5355,0.0866],[0.5433,0.0866],[0.5512,0.0866],[0.5591,0.0866],[0.567,0.0866],[0.5748,0.0866],[0.5827,0.0866],[0.5906,0.0866],[0.5984,0.0866],[0.6063,0.0866],[0.6142,0.0866],[0.6221,0.0866],[0.6299,0.0866],[0.6378,0.0866],[0.6457,0.0866],[0.6536,0.0866],[0.6614,0.0866],[0.6693,0.0866],[0.6772,0.0866],[0.6851,0.0866],[0.6929,0.0866],[0.7008,0.0866],[0.7087,0.0866],[0.7166,0.0866],[0.7244,0.0866],[0.7323,0.0866],[0.7402,0.0866],[0.748,0.0866],[0.7559,0.0866],[0.7638,0.0866],[0.7717,0.0866],[0.7795,0.0866],[0.7874,0.0866],[0.7953,0.0866],[0.8032,0.0866],[0.811,0.0866],[0.8189,0.0866],[0.8268,0.0866],[0.8347,0.0866],[0.8425,0.0866],[0.8504,0.0866],[0.8583,0.0866],[0.8662,0.0866],[0.874,0.0866],[0.8819,0.0866],[0.8898,0.0866],[0.8976,0.0866],[0.9055,0.0866],[0.9134,0.0866],[0.9213,0.0866],[0.9291,0.0866],[0.937,0.0866],[0.9449,0.0866],[0.9528,0.0866],[0.9606,0.0866],[0.9685,0.0866],[0.9764,0.0866],[0.9843,0.0866],[0.9921,0.0866],[1,0.0866],[0.0001,0.0787],[0.0079,0.0787],[0.0158,0.0787],[0.0237,0.0787],[0.0316,0.0787],[0.0394,0.0787],[0.0473,0.0787],[0.0552,0.0787],[0.063,0.0787],[0.0709,0.0787],[0.0788,0.0787],[0.0867,0.0787],[0.0945,0.0787],[0.1024,0.0787],[0.1103,0.0787],[0.1182,0.0787],[0.126,0.0787],[0.1339,0.0787],[0.1418,0.0787],[0.1497,0.0787],[0.1575,0.0787],[0.1654,0.0787],[0.1733,0.0787],[0.1812,0.0787],[0.189,0.0787],[0.1969,0.0787],[0.2048,0.0787],[0.2126,0.0787],[0.2205,0.0787],[0.2284,0.0787],[0.2363,0.0787],[0.2441,0.0787],[0.252,0.0787],[0.2599,0.0787],[0.2678,0.0787],[0.2756,0.0787],[0.2835,0.0787],[0.2914,0.0787],[0.2993,0.0787],[0.3071,0.0787],[0.315,0.0787],[0.3229,0.0787],[0.3308,0.0787],[0.3386,0.0787],[0.3465,0.0787],[0.3544,0.0787],[0.3622,0.0787],[0.3701,0.0787],[0.378,0.0787],[0.3859,0.0787],[0.3937,0.0787],[0.4016,0.0787],[0.4095,0.0787],[0.4174,0.0787],[0.4252,0.0787],[0.4331,0.0787],[0.441,0.0787],[0.4489,0.0787],[0.4567,0.0787],[0.4646,0.0787],[0.4725,0.0787],[0.4803,0.0787],[0.4882,0.0787],[0.4961,0.0787],[0.504,0.0787],[0.5118,0.0787],[0.5197,0.0787],[0.5276,0.0787],[0.5355,0.0787],[0.5433,0.0787],[0.5512,0.0787],[0.5591,0.0787],[0.567,0.0787],[0.5748,0.0787],[0.5827,0.0787],[0.5906,0.0787],[0.5984,0.0787],[0.6063,0.0787],[0.6142,0.0787],[0.6221,0.0787],[0.6299,0.0787],[0.6378,0.0787],[0.6457,0.0787],[0.6536,0.0787],[0.6614,0.0787],[0.6693,0.0787],[0.6772,0.0787],[0.6851,0.0787],[0.6929,0.0787],[0.7008,0.0787],[0.7087,0.0787],[0.7166,0.0787],[0.7244,0.0787],[0.7323,0.0787],[0.7402,0.0787],[0.748,0.0787],[0.7559,0.0787],[0.7638,0.0787],[0.7717,0.0787],[0.7795,0.0787],[0.7874,0.0787],[0.7953,0.0787],[0.8032,0.0787],[0.811,0.0787],[0.8189,0.0787],[0.8268,0.0787],[0.8347,0.0787],[0.8425,0.0787],[0.8504,0.0787],[0.8583,0.0787],[0.8662,0.0787],[0.874,0.0787],[0.8819,0.0787],[0.8898,0.0787],[0.8976,0.0787],[0.9055,0.0787],[0.9134,0.0787],[0.9213,0.0787],[0.9291,0.0787],[0.937,0.0787],[0.9449,0.0787],[0.9528,0.0787],[0.9606,0.0787],[0.9685,0.0787],[0.9764,0.0787],[0.9843,0.0787],[0.9921,0.0787],[1,0.0787],[0.0001,0.0709],[0.0079,0.0709],[0.0158,0.0709],[0.0237,0.0709],[0.0316,0.0709],[0.0394,0.0709],[0.0473,0.0709],[0.0552,0.0709],[0.063,0.0709],[0.0709,0.0709],[0.0788,0.0709],[0.0867,0.0709],[0.0945,0.0709],[0.1024,0.0709],[0.1103,0.0709],[0.1182,0.0709],[0.126,0.0709],[0.1339,0.0709],[0.1418,0.0709],[0.1497,0.0709],[0.1575,0.0709],[0.1654,0.0709],[0.1733,0.0709],[0.1812,0.0709],[0.189,0.0709],[0.1969,0.0709],[0.2048,0.0709],[0.2126,0.0709],[0.2205,0.0709],[0.2284,0.0709],[0.2363,0.0709],[0.2441,0.0709],[0.252,0.0709],[0.2599,0.0709],[0.2678,0.0709],[0.2756,0.0709],[0.2835,0.0709],[0.2914,0.0709],[0.2993,0.0709],[0.3071,0.0709],[0.315,0.0709],[0.3229,0.0709],[0.3308,0.0709],[0.3386,0.0709],[0.3465,0.0709],[0.3544,0.0709],[0.3622,0.0709],[0.3701,0.0709],[0.378,0.0709],[0.3859,0.0709],[0.3937,0.0709],[0.4016,0.0709],[0.4095,0.0709],[0.4174,0.0709],[0.4252,0.0709],[0.4331,0.0709],[0.441,0.0709],[0.4489,0.0709],[0.4567,0.0709],[0.4646,0.0709],[0.4725,0.0709],[0.4803,0.0709],[0.4882,0.0709],[0.4961,0.0709],[0.504,0.0709],[0.5118,0.0709],[0.5197,0.0709],[0.5276,0.0709],[0.5355,0.0709],[0.5433,0.0709],[0.5512,0.0709],[0.5591,0.0709],[0.567,0.0709],[0.5748,0.0709],[0.5827,0.0709],[0.5906,0.0709],[0.5984,0.0709],[0.6063,0.0709],[0.6142,0.0709],[0.6221,0.0709],[0.6299,0.0709],[0.6378,0.0709],[0.6457,0.0709],[0.6536,0.0709],[0.6614,0.0709],[0.6693,0.0709],[0.6772,0.0709],[0.6851,0.0709],[0.6929,0.0709],[0.7008,0.0709],[0.7087,0.0709],[0.7166,0.0709],[0.7244,0.0709],[0.7323,0.0709],[0.7402,0.0709],[0.748,0.0709],[0.7559,0.0709],[0.7638,0.0709],[0.7717,0.0709],[0.7795,0.0709],[0.7874,0.0709],[0.7953,0.0709],[0.8032,0.0709],[0.811,0.0709],[0.8189,0.0709],[0.8268,0.0709],[0.8347,0.0709],[0.8425,0.0709],[0.8504,0.0709],[0.8583,0.0709],[0.8662,0.0709],[0.874,0.0709],[0.8819,0.0709],[0.8898,0.0709],[0.8976,0.0709],[0.9055,0.0709],[0.9134,0.0709],[0.9213,0.0709],[0.9291,0.0709],[0.937,0.0709],[0.9449,0.0709],[0.9528,0.0709],[0.9606,0.0709],[0.9685,0.0709],[0.9764,0.0709],[0.9843,0.0709],[0.9921,0.0709],[1,0.0709],[0.0001,0.063],[0.0079,0.063],[0.0158,0.063],[0.0237,0.063],[0.0316,0.063],[0.0394,0.063],[0.0473,0.063],[0.0552,0.063],[0.063,0.063],[0.0709,0.063],[0.0788,0.063],[0.0867,0.063],[0.0945,0.063],[0.1024,0.063],[0.1103,0.063],[0.1182,0.063],[0.126,0.063],[0.1339,0.063],[0.1418,0.063],[0.1497,0.063],[0.1575,0.063],[0.1654,0.063],[0.1733,0.063],[0.1812,0.063],[0.189,0.063],[0.1969,0.063],[0.2048,0.063],[0.2126,0.063],[0.2205,0.063],[0.2284,0.063],[0.2363,0.063],[0.2441,0.063],[0.252,0.063],[0.2599,0.063],[0.2678,0.063],[0.2756,0.063],[0.2835,0.063],[0.2914,0.063],[0.2993,0.063],[0.3071,0.063],[0.315,0.063],[0.3229,0.063],[0.3308,0.063],[0.3386,0.063],[0.3465,0.063],[0.3544,0.063],[0.3622,0.063],[0.3701,0.063],[0.378,0.063],[0.3859,0.063],[0.3937,0.063],[0.4016,0.063],[0.4095,0.063],[0.4174,0.063],[0.4252,0.063],[0.4331,0.063],[0.441,0.063],[0.4489,0.063],[0.4567,0.063],[0.4646,0.063],[0.4725,0.063],[0.4803,0.063],[0.4882,0.063],[0.4961,0.063],[0.504,0.063],[0.5118,0.063],[0.5197,0.063],[0.5276,0.063],[0.5355,0.063],[0.5433,0.063],[0.5512,0.063],[0.5591,0.063],[0.567,0.063],[0.5748,0.063],[0.5827,0.063],[0.5906,0.063],[0.5984,0.063],[0.6063,0.063],[0.6142,0.063],[0.6221,0.063],[0.6299,0.063],[0.6378,0.063],[0.6457,0.063],[0.6536,0.063],[0.6614,0.063],[0.6693,0.063],[0.6772,0.063],[0.6851,0.063],[0.6929,0.063],[0.7008,0.063],[0.7087,0.063],[0.7166,0.063],[0.7244,0.063],[0.7323,0.063],[0.7402,0.063],[0.748,0.063],[0.7559,0.063],[0.7638,0.063],[0.7717,0.063],[0.7795,0.063],[0.7874,0.063],[0.7953,0.063],[0.8032,0.063],[0.811,0.063],[0.8189,0.063],[0.8268,0.063],[0.8347,0.063],[0.8425,0.063],[0.8504,0.063],[0.8583,0.063],[0.8662,0.063],[0.874,0.063],[0.8819,0.063],[0.8898,0.063],[0.8976,0.063],[0.9055,0.063],[0.9134,0.063],[0.9213,0.063],[0.9291,0.063],[0.937,0.063],[0.9449,0.063],[0.9528,0.063],[0.9606,0.063],[0.9685,0.063],[0.9764,0.063],[0.9843,0.063],[0.9921,0.063],[1,0.063],[0.0001,0.0551],[0.0079,0.0551],[0.0158,0.0551],[0.0237,0.0551],[0.0316,0.0551],[0.0394,0.0551],[0.0473,0.0551],[0.0552,0.0551],[0.063,0.0551],[0.0709,0.0551],[0.0788,0.0551],[0.0867,0.0551],[0.0945,0.0551],[0.1024,0.0551],[0.1103,0.0551],[0.1182,0.0551],[0.126,0.0551],[0.1339,0.0551],[0.1418,0.0551],[0.1497,0.0551],[0.1575,0.0551],[0.1654,0.0551],[0.1733,0.0551],[0.1812,0.0551],[0.189,0.0551],[0.1969,0.0551],[0.2048,0.0551],[0.2126,0.0551],[0.2205,0.0551],[0.2284,0.0551],[0.2363,0.0551],[0.2441,0.0551],[0.252,0.0551],[0.2599,0.0551],[0.2678,0.0551],[0.2756,0.0551],[0.2835,0.0551],[0.2914,0.0551],[0.2993,0.0551],[0.3071,0.0551],[0.315,0.0551],[0.3229,0.0551],[0.3308,0.0551],[0.3386,0.0551],[0.3465,0.0551],[0.3544,0.0551],[0.3622,0.0551],[0.3701,0.0551],[0.378,0.0551],[0.3859,0.0551],[0.3937,0.0551],[0.4016,0.0551],[0.4095,0.0551],[0.4174,0.0551],[0.4252,0.0551],[0.4331,0.0551],[0.441,0.0551],[0.4489,0.0551],[0.4567,0.0551],[0.4646,0.0551],[0.4725,0.0551],[0.4803,0.0551],[0.4882,0.0551],[0.4961,0.0551],[0.504,0.0551],[0.5118,0.0551],[0.5197,0.0551],[0.5276,0.0551],[0.5355,0.0551],[0.5433,0.0551],[0.5512,0.0551],[0.5591,0.0551],[0.567,0.0551],[0.5748,0.0551],[0.5827,0.0551],[0.5906,0.0551],[0.5984,0.0551],[0.6063,0.0551],[0.6142,0.0551],[0.6221,0.0551],[0.6299,0.0551],[0.6378,0.0551],[0.6457,0.0551],[0.6536,0.0551],[0.6614,0.0551],[0.6693,0.0551],[0.6772,0.0551],[0.6851,0.0551],[0.6929,0.0551],[0.7008,0.0551],[0.7087,0.0551],[0.7166,0.0551],[0.7244,0.0551],[0.7323,0.0551],[0.7402,0.0551],[0.748,0.0551],[0.7559,0.0551],[0.7638,0.0551],[0.7717,0.0551],[0.7795,0.0551],[0.7874,0.0551],[0.7953,0.0551],[0.8032,0.0551],[0.811,0.0551],[0.8189,0.0551],[0.8268,0.0551],[0.8347,0.0551],[0.8425,0.0551],[0.8504,0.0551],[0.8583,0.0551],[0.8662,0.0551],[0.874,0.0551],[0.8819,0.0551],[0.8898,0.0551],[0.8976,0.0551],[0.9055,0.0551],[0.9134,0.0551],[0.9213,0.0551],[0.9291,0.0551],[0.937,0.0551],[0.9449,0.0551],[0.9528,0.0551],[0.9606,0.0551],[0.9685,0.0551],[0.9764,0.0551],[0.9843,0.0551],[0.9921,0.0551],[1,0.0551],[0.0001,0.0472],[0.0079,0.0472],[0.0158,0.0472],[0.0237,0.0472],[0.0316,0.0472],[0.0394,0.0472],[0.0473,0.0472],[0.0552,0.0472],[0.063,0.0472],[0.0709,0.0472],[0.0788,0.0472],[0.0867,0.0472],[0.0945,0.0472],[0.1024,0.0472],[0.1103,0.0472],[0.1182,0.0472],[0.126,0.0472],[0.1339,0.0472],[0.1418,0.0472],[0.1497,0.0472],[0.1575,0.0472],[0.1654,0.0472],[0.1733,0.0472],[0.1812,0.0472],[0.189,0.0472],[0.1969,0.0472],[0.2048,0.0472],[0.2126,0.0472],[0.2205,0.0472],[0.2284,0.0472],[0.2363,0.0472],[0.2441,0.0472],[0.252,0.0472],[0.2599,0.0472],[0.2678,0.0472],[0.2756,0.0472],[0.2835,0.0472],[0.2914,0.0472],[0.2993,0.0472],[0.3071,0.0472],[0.315,0.0472],[0.3229,0.0472],[0.3308,0.0472],[0.3386,0.0472],[0.3465,0.0472],[0.3544,0.0472],[0.3622,0.0472],[0.3701,0.0472],[0.378,0.0472],[0.3859,0.0472],[0.3937,0.0472],[0.4016,0.0472],[0.4095,0.0472],[0.4174,0.0472],[0.4252,0.0472],[0.4331,0.0472],[0.441,0.0472],[0.4489,0.0472],[0.4567,0.0472],[0.4646,0.0472],[0.4725,0.0472],[0.4803,0.0472],[0.4882,0.0472],[0.4961,0.0472],[0.504,0.0472],[0.5118,0.0472],[0.5197,0.0472],[0.5276,0.0472],[0.5355,0.0472],[0.5433,0.0472],[0.5512,0.0472],[0.5591,0.0472],[0.567,0.0472],[0.5748,0.0472],[0.5827,0.0472],[0.5906,0.0472],[0.5984,0.0472],[0.6063,0.0472],[0.6142,0.0472],[0.6221,0.0472],[0.6299,0.0472],[0.6378,0.0472],[0.6457,0.0472],[0.6536,0.0472],[0.6614,0.0472],[0.6693,0.0472],[0.6772,0.0472],[0.6851,0.0472],[0.6929,0.0472],[0.7008,0.0472],[0.7087,0.0472],[0.7166,0.0472],[0.7244,0.0472],[0.7323,0.0472],[0.7402,0.0472],[0.748,0.0472],[0.7559,0.0472],[0.7638,0.0472],[0.7717,0.0472],[0.7795,0.0472],[0.7874,0.0472],[0.7953,0.0472],[0.8032,0.0472],[0.811,0.0472],[0.8189,0.0472],[0.8268,0.0472],[0.8347,0.0472],[0.8425,0.0472],[0.8504,0.0472],[0.8583,0.0472],[0.8662,0.0472],[0.874,0.0472],[0.8819,0.0472],[0.8898,0.0472],[0.8976,0.0472],[0.9055,0.0472],[0.9134,0.0472],[0.9213,0.0472],[0.9291,0.0472],[0.937,0.0472],[0.9449,0.0472],[0.9528,0.0472],[0.9606,0.0472],[0.9685,0.0472],[0.9764,0.0472],[0.9843,0.0472],[0.9921,0.0472],[1,0.0472],[0.0001,0.0394],[0.0079,0.0394],[0.0158,0.0394],[0.0237,0.0394],[0.0316,0.0394],[0.0394,0.0394],[0.0473,0.0394],[0.0552,0.0394],[0.063,0.0394],[0.0709,0.0394],[0.0788,0.0394],[0.0867,0.0394],[0.0945,0.0394],[0.1024,0.0394],[0.1103,0.0394],[0.1182,0.0394],[0.126,0.0394],[0.1339,0.0394],[0.1418,0.0394],[0.1497,0.0394],[0.1575,0.0394],[0.1654,0.0394],[0.1733,0.0394],[0.1812,0.0394],[0.189,0.0394],[0.1969,0.0394],[0.2048,0.0394],[0.2126,0.0394],[0.2205,0.0394],[0.2284,0.0394],[0.2363,0.0394],[0.2441,0.0394],[0.252,0.0394],[0.2599,0.0394],[0.2678,0.0394],[0.2756,0.0394],[0.2835,0.0394],[0.2914,0.0394],[0.2993,0.0394],[0.3071,0.0394],[0.315,0.0394],[0.3229,0.0394],[0.3308,0.0394],[0.3386,0.0394],[0.3465,0.0394],[0.3544,0.0394],[0.3622,0.0394],[0.3701,0.0394],[0.378,0.0394],[0.3859,0.0394],[0.3937,0.0394],[0.4016,0.0394],[0.4095,0.0394],[0.4174,0.0394],[0.4252,0.0394],[0.4331,0.0394],[0.441,0.0394],[0.4489,0.0394],[0.4567,0.0394],[0.4646,0.0394],[0.4725,0.0394],[0.4803,0.0394],[0.4882,0.0394],[0.4961,0.0394],[0.504,0.0394],[0.5118,0.0394],[0.5197,0.0394],[0.5276,0.0394],[0.5355,0.0394],[0.5433,0.0394],[0.5512,0.0394],[0.5591,0.0394],[0.567,0.0394],[0.5748,0.0394],[0.5827,0.0394],[0.5906,0.0394],[0.5984,0.0394],[0.6063,0.0394],[0.6142,0.0394],[0.6221,0.0394],[0.6299,0.0394],[0.6378,0.0394],[0.6457,0.0394],[0.6536,0.0394],[0.6614,0.0394],[0.6693,0.0394],[0.6772,0.0394],[0.6851,0.0394],[0.6929,0.0394],[0.7008,0.0394],[0.7087,0.0394],[0.7166,0.0394],[0.7244,0.0394],[0.7323,0.0394],[0.7402,0.0394],[0.748,0.0394],[0.7559,0.0394],[0.7638,0.0394],[0.7717,0.0394],[0.7795,0.0394],[0.7874,0.0394],[0.7953,0.0394],[0.8032,0.0394],[0.811,0.0394],[0.8189,0.0394],[0.8268,0.0394],[0.8347,0.0394],[0.8425,0.0394],[0.8504,0.0394],[0.8583,0.0394],[0.8662,0.0394],[0.874,0.0394],[0.8819,0.0394],[0.8898,0.0394],[0.8976,0.0394],[0.9055,0.0394],[0.9134,0.0394],[0.9213,0.0394],[0.9291,0.0394],[0.937,0.0394],[0.9449,0.0394],[0.9528,0.0394],[0.9606,0.0394],[0.9685,0.0394],[0.9764,0.0394],[0.9843,0.0394],[0.9921,0.0394],[1,0.0394],[0.0001,0.0315],[0.0079,0.0315],[0.0158,0.0315],[0.0237,0.0315],[0.0316,0.0315],[0.0394,0.0315],[0.0473,0.0315],[0.0552,0.0315],[0.063,0.0315],[0.0709,0.0315],[0.0788,0.0315],[0.0867,0.0315],[0.0945,0.0315],[0.1024,0.0315],[0.1103,0.0315],[0.1182,0.0315],[0.126,0.0315],[0.1339,0.0315],[0.1418,0.0315],[0.1497,0.0315],[0.1575,0.0315],[0.1654,0.0315],[0.1733,0.0315],[0.1812,0.0315],[0.189,0.0315],[0.1969,0.0315],[0.2048,0.0315],[0.2126,0.0315],[0.2205,0.0315],[0.2284,0.0315],[0.2363,0.0315],[0.2441,0.0315],[0.252,0.0315],[0.2599,0.0315],[0.2678,0.0315],[0.2756,0.0315],[0.2835,0.0315],[0.2914,0.0315],[0.2993,0.0315],[0.3071,0.0315],[0.315,0.0315],[0.3229,0.0315],[0.3308,0.0315],[0.3386,0.0315],[0.3465,0.0315],[0.3544,0.0315],[0.3622,0.0315],[0.3701,0.0315],[0.378,0.0315],[0.3859,0.0315],[0.3937,0.0315],[0.4016,0.0315],[0.4095,0.0315],[0.4174,0.0315],[0.4252,0.0315],[0.4331,0.0315],[0.441,0.0315],[0.4489,0.0315],[0.4567,0.0315],[0.4646,0.0315],[0.4725,0.0315],[0.4803,0.0315],[0.4882,0.0315],[0.4961,0.0315],[0.504,0.0315],[0.5118,0.0315],[0.5197,0.0315],[0.5276,0.0315],[0.5355,0.0315],[0.5433,0.0315],[0.5512,0.0315],[0.5591,0.0315],[0.567,0.0315],[0.5748,0.0315],[0.5827,0.0315],[0.5906,0.0315],[0.5984,0.0315],[0.6063,0.0315],[0.6142,0.0315],[0.6221,0.0315],[0.6299,0.0315],[0.6378,0.0315],[0.6457,0.0315],[0.6536,0.0315],[0.6614,0.0315],[0.6693,0.0315],[0.6772,0.0315],[0.6851,0.0315],[0.6929,0.0315],[0.7008,0.0315],[0.7087,0.0315],[0.7166,0.0315],[0.7244,0.0315],[0.7323,0.0315],[0.7402,0.0315],[0.748,0.0315],[0.7559,0.0315],[0.7638,0.0315],[0.7717,0.0315],[0.7795,0.0315],[0.7874,0.0315],[0.7953,0.0315],[0.8032,0.0315],[0.811,0.0315],[0.8189,0.0315],[0.8268,0.0315],[0.8347,0.0315],[0.8425,0.0315],[0.8504,0.0315],[0.8583,0.0315],[0.8662,0.0315],[0.874,0.0315],[0.8819,0.0315],[0.8898,0.0315],[0.8976,0.0315],[0.9055,0.0315],[0.9134,0.0315],[0.9213,0.0315],[0.9291,0.0315],[0.937,0.0315],[0.9449,0.0315],[0.9528,0.0315],[0.9606,0.0315],[0.9685,0.0315],[0.9764,0.0315],[0.9843,0.0315],[0.9921,0.0315],[1,0.0315],[0.0001,0.0236],[0.0079,0.0236],[0.0158,0.0236],[0.0237,0.0236],[0.0316,0.0236],[0.0394,0.0236],[0.0473,0.0236],[0.0552,0.0236],[0.063,0.0236],[0.0709,0.0236],[0.0788,0.0236],[0.0867,0.0236],[0.0945,0.0236],[0.1024,0.0236],[0.1103,0.0236],[0.1182,0.0236],[0.126,0.0236],[0.1339,0.0236],[0.1418,0.0236],[0.1497,0.0236],[0.1575,0.0236],[0.1654,0.0236],[0.1733,0.0236],[0.1812,0.0236],[0.189,0.0236],[0.1969,0.0236],[0.2048,0.0236],[0.2126,0.0236],[0.2205,0.0236],[0.2284,0.0236],[0.2363,0.0236],[0.2441,0.0236],[0.252,0.0236],[0.2599,0.0236],[0.2678,0.0236],[0.2756,0.0236],[0.2835,0.0236],[0.2914,0.0236],[0.2993,0.0236],[0.3071,0.0236],[0.315,0.0236],[0.3229,0.0236],[0.3308,0.0236],[0.3386,0.0236],[0.3465,0.0236],[0.3544,0.0236],[0.3622,0.0236],[0.3701,0.0236],[0.378,0.0236],[0.3859,0.0236],[0.3937,0.0236],[0.4016,0.0236],[0.4095,0.0236],[0.4174,0.0236],[0.4252,0.0236],[0.4331,0.0236],[0.441,0.0236],[0.4489,0.0236],[0.4567,0.0236],[0.4646,0.0236],[0.4725,0.0236],[0.4803,0.0236],[0.4882,0.0236],[0.4961,0.0236],[0.504,0.0236],[0.5118,0.0236],[0.5197,0.0236],[0.5276,0.0236],[0.5355,0.0236],[0.5433,0.0236],[0.5512,0.0236],[0.5591,0.0236],[0.567,0.0236],[0.5748,0.0236],[0.5827,0.0236],[0.5906,0.0236],[0.5984,0.0236],[0.6063,0.0236],[0.6142,0.0236],[0.6221,0.0236],[0.6299,0.0236],[0.6378,0.0236],[0.6457,0.0236],[0.6536,0.0236],[0.6614,0.0236],[0.6693,0.0236],[0.6772,0.0236],[0.6851,0.0236],[0.6929,0.0236],[0.7008,0.0236],[0.7087,0.0236],[0.7166,0.0236],[0.7244,0.0236],[0.7323,0.0236],[0.7402,0.0236],[0.748,0.0236],[0.7559,0.0236],[0.7638,0.0236],[0.7717,0.0236],[0.7795,0.0236],[0.7874,0.0236],[0.7953,0.0236],[0.8032,0.0236],[0.811,0.0236],[0.8189,0.0236],[0.8268,0.0236],[0.8347,0.0236],[0.8425,0.0236],[0.8504,0.0236],[0.8583,0.0236],[0.8662,0.0236],[0.874,0.0236],[0.8819,0.0236],[0.8898,0.0236],[0.8976,0.0236],[0.9055,0.0236],[0.9134,0.0236],[0.9213,0.0236],[0.9291,0.0236],[0.937,0.0236],[0.9449,0.0236],[0.9528,0.0236],[0.9606,0.0236],[0.9685,0.0236],[0.9764,0.0236],[0.9843,0.0236],[0.9921,0.0236],[1,0.0236],[0.0001,0.0157],[0.0079,0.0157],[0.0158,0.0157],[0.0237,0.0157],[0.0316,0.0157],[0.0394,0.0157],[0.0473,0.0157],[0.0552,0.0157],[0.063,0.0157],[0.0709,0.0157],[0.0788,0.0157],[0.0867,0.0157],[0.0945,0.0157],[0.1024,0.0157],[0.1103,0.0157],[0.1182,0.0157],[0.126,0.0157],[0.1339,0.0157],[0.1418,0.0157],[0.1497,0.0157],[0.1575,0.0157],[0.1654,0.0157],[0.1733,0.0157],[0.1812,0.0157],[0.189,0.0157],[0.1969,0.0157],[0.2048,0.0157],[0.2126,0.0157],[0.2205,0.0157],[0.2284,0.0157],[0.2363,0.0157],[0.2441,0.0157],[0.252,0.0157],[0.2599,0.0157],[0.2678,0.0157],[0.2756,0.0157],[0.2835,0.0157],[0.2914,0.0157],[0.2993,0.0157],[0.3071,0.0157],[0.315,0.0157],[0.3229,0.0157],[0.3308,0.0157],[0.3386,0.0157],[0.3465,0.0157],[0.3544,0.0157],[0.3622,0.0157],[0.3701,0.0157],[0.378,0.0157],[0.3859,0.0157],[0.3937,0.0157],[0.4016,0.0157],[0.4095,0.0157],[0.4174,0.0157],[0.4252,0.0157],[0.4331,0.0157],[0.441,0.0157],[0.4489,0.0157],[0.4567,0.0157],[0.4646,0.0157],[0.4725,0.0157],[0.4803,0.0157],[0.4882,0.0157],[0.4961,0.0157],[0.504,0.0157],[0.5118,0.0157],[0.5197,0.0157],[0.5276,0.0157],[0.5355,0.0157],[0.5433,0.0157],[0.5512,0.0157],[0.5591,0.0157],[0.567,0.0157],[0.5748,0.0157],[0.5827,0.0157],[0.5906,0.0157],[0.5984,0.0157],[0.6063,0.0157],[0.6142,0.0157],[0.6221,0.0157],[0.6299,0.0157],[0.6378,0.0157],[0.6457,0.0157],[0.6536,0.0157],[0.6614,0.0157],[0.6693,0.0157],[0.6772,0.0157],[0.6851,0.0157],[0.6929,0.0157],[0.7008,0.0157],[0.7087,0.0157],[0.7166,0.0157],[0.7244,0.0157],[0.7323,0.0157],[0.7402,0.0157],[0.748,0.0157],[0.7559,0.0157],[0.7638,0.0157],[0.7717,0.0157],[0.7795,0.0157],[0.7874,0.0157],[0.7953,0.0157],[0.8032,0.0157],[0.811,0.0157],[0.8189,0.0157],[0.8268,0.0157],[0.8347,0.0157],[0.8425,0.0157],[0.8504,0.0157],[0.8583,0.0157],[0.8662,0.0157],[0.874,0.0157],[0.8819,0.0157],[0.8898,0.0157],[0.8976,0.0157],[0.9055,0.0157],[0.9134,0.0157],[0.9213,0.0157],[0.9291,0.0157],[0.937,0.0157],[0.9449,0.0157],[0.9528,0.0157],[0.9606,0.0157],[0.9685,0.0157],[0.9764,0.0157],[0.9843,0.0157],[0.9921,0.0157],[1,0.0157],[0.0001,0.0079],[0.0079,0.0079],[0.0158,0.0079],[0.0237,0.0079],[0.0316,0.0079],[0.0394,0.0079],[0.0473,0.0079],[0.0552,0.0079],[0.063,0.0079],[0.0709,0.0079],[0.0788,0.0079],[0.0867,0.0079],[0.0945,0.0079],[0.1024,0.0079],[0.1103,0.0079],[0.1182,0.0079],[0.126,0.0079],[0.1339,0.0079],[0.1418,0.0079],[0.1497,0.0079],[0.1575,0.0079],[0.1654,0.0079],[0.1733,0.0079],[0.1812,0.0079],[0.189,0.0079],[0.1969,0.0079],[0.2048,0.0079],[0.2126,0.0079],[0.2205,0.0079],[0.2284,0.0079],[0.2363,0.0079],[0.2441,0.0079],[0.252,0.0079],[0.2599,0.0079],[0.2678,0.0079],[0.2756,0.0079],[0.2835,0.0079],[0.2914,0.0079],[0.2993,0.0079],[0.3071,0.0079],[0.315,0.0079],[0.3229,0.0079],[0.3308,0.0079],[0.3386,0.0079],[0.3465,0.0079],[0.3544,0.0079],[0.3622,0.0079],[0.3701,0.0079],[0.378,0.0079],[0.3859,0.0079],[0.3937,0.0079],[0.4016,0.0079],[0.4095,0.0079],[0.4174,0.0079],[0.4252,0.0079],[0.4331,0.0079],[0.441,0.0079],[0.4489,0.0079],[0.4567,0.0079],[0.4646,0.0079],[0.4725,0.0079],[0.4803,0.0079],[0.4882,0.0079],[0.4961,0.0079],[0.504,0.0079],[0.5118,0.0079],[0.5197,0.0079],[0.5276,0.0079],[0.5355,0.0079],[0.5433,0.0079],[0.5512,0.0079],[0.5591,0.0079],[0.567,0.0079],[0.5748,0.0079],[0.5827,0.0079],[0.5906,0.0079],[0.5984,0.0079],[0.6063,0.0079],[0.6142,0.0079],[0.6221,0.0079],[0.6299,0.0079],[0.6378,0.0079],[0.6457,0.0079],[0.6536,0.0079],[0.6614,0.0079],[0.6693,0.0079],[0.6772,0.0079],[0.6851,0.0079],[0.6929,0.0079],[0.7008,0.0079],[0.7087,0.0079],[0.7166,0.0079],[0.7244,0.0079],[0.7323,0.0079],[0.7402,0.0079],[0.748,0.0079],[0.7559,0.0079],[0.7638,0.0079],[0.7717,0.0079],[0.7795,0.0079],[0.7874,0.0079],[0.7953,0.0079],[0.8032,0.0079],[0.811,0.0079],[0.8189,0.0079],[0.8268,0.0079],[0.8347,0.0079],[0.8425,0.0079],[0.8504,0.0079],[0.8583,0.0079],[0.8662,0.0079],[0.874,0.0079],[0.8819,0.0079],[0.8898,0.0079],[0.8976,0.0079],[0.9055,0.0079],[0.9134,0.0079],[0.9213,0.0079],[0.9291,0.0079],[0.937,0.0079],[0.9449,0.0079],[0.9528,0.0079],[0.9606,0.0079],[0.9685,0.0079],[0.9764,0.0079],[0.9843,0.0079],[0.9921,0.0079],[1,0.0079],[0.0001,0],[0.0079,0],[0.0158,0],[0.0237,0],[0.0316,0],[0.0394,0],[0.0473,0],[0.0552,0],[0.063,0],[0.0709,0],[0.0788,0],[0.0867,0],[0.0945,0],[0.1024,0],[0.1103,0],[0.1182,0],[0.126,0],[0.1339,0],[0.1418,0],[0.1497,0],[0.1575,0],[0.1654,0],[0.1733,0],[0.1812,0],[0.189,0],[0.1969,0],[0.2048,0],[0.2126,0],[0.2205,0],[0.2284,0],[0.2363,0],[0.2441,0],[0.252,0],[0.2599,0],[0.2678,0],[0.2756,0],[0.2835,0],[0.2914,0],[0.2993,0],[0.3071,0],[0.315,0],[0.3229,0],[0.3308,0],[0.3386,0],[0.3465,0],[0.3544,0],[0.3622,0],[0.3701,0],[0.378,0],[0.3859,0],[0.3937,0],[0.4016,0],[0.4095,0],[0.4174,0],[0.4252,0],[0.4331,0],[0.441,0],[0.4489,0],[0.4567,0],[0.4646,0],[0.4725,0],[0.4803,0],[0.4882,0],[0.4961,0],[0.504,0],[0.5118,0],[0.5197,0],[0.5276,0],[0.5355,0],[0.5433,0],[0.5512,0],[0.5591,0],[0.567,0],[0.5748,0],[0.5827,0],[0.5906,0],[0.5984,0],[0.6063,0],[0.6142,0],[0.6221,0],[0.6299,0],[0.6378,0],[0.6457,0],[0.6536,0],[0.6614,0],[0.6693,0],[0.6772,0],[0.6851,0],[0.6929,0],[0.7008,0],[0.7087,0],[0.7166,0],[0.7244,0],[0.7323,0],[0.7402,0],[0.748,0],[0.7559,0],[0.7638,0],[0.7717,0],[0.7795,0],[0.7874,0],[0.7953,0],[0.8032,0],[0.811,0],[0.8189,0],[0.8268,0],[0.8347,0],[0.8425,0],[0.8504,0],[0.8583,0],[0.8662,0],[0.874,0],[0.8819,0],[0.8898,0],[0.8976,0],[0.9055,0],[0.9134,0],[0.9213,0],[0.9291,0],[0.937,0],[0.9449,0],[0.9528,0],[0.9606,0],[0.9685,0],[0.9764,0],[0.9843,0],[0.9921,0],[1,0]]

    			    .flat(Infinity)),
    			size: 2
    		}
    	}, {
    		index: new Uint32Array(

    [126,255,254,255,126,127,125,254,253,254,125,126,124,253,252,253,124,125,123,252,251,252,123,124,122,251,250,251,122,123,121,250,249,250,121,122,120,249,248,249,120,121,119,248,247,248,119,120,118,247,246,247,118,119,117,246,245,246,117,118,116,245,244,245,116,117,115,244,243,244,115,116,114,243,242,243,114,115,113,242,241,242,113,114,112,241,240,241,112,113,111,240,239,240,111,112,110,239,238,239,110,111,109,238,237,238,109,110,108,237,236,237,108,109,107,236,235,236,107,108,106,235,234,235,106,107,105,234,233,234,105,106,104,233,232,233,104,105,103,232,231,232,103,104,102,231,230,231,102,103,101,230,229,230,101,102,100,229,228,229,100,101,99,228,227,228,99,100,98,227,226,227,98,99,97,226,225,226,97,98,96,225,224,225,96,97,95,224,223,224,95,96,94,223,222,223,94,95,93,222,221,222,93,94,92,221,220,221,92,93,91,220,219,220,91,92,90,219,218,219,90,91,89,218,217,218,89,90,88,217,216,217,88,89,87,216,215,216,87,88,86,215,214,215,86,87,85,214,213,214,85,86,84,213,212,213,84,85,83,212,211,212,83,84,82,211,210,211,82,83,81,210,209,210,81,82,80,209,208,209,80,81,79,208,207,208,79,80,78,207,206,207,78,79,77,206,205,206,77,78,76,205,204,205,76,77,75,204,203,204,75,76,74,203,202,203,74,75,73,202,201,202,73,74,72,201,200,201,72,73,71,200,199,200,71,72,70,199,198,199,70,71,69,198,197,198,69,70,68,197,196,197,68,69,67,196,195,196,67,68,66,195,194,195,66,67,65,194,193,194,65,66,64,193,192,193,64,65,63,192,191,192,63,64,62,191,190,191,62,63,61,190,189,190,61,62,60,189,188,189,60,61,59,188,187,188,59,60,58,187,186,187,58,59,57,186,185,186,57,58,56,185,184,185,56,57,55,184,183,184,55,56,54,183,182,183,54,55,53,182,181,182,53,54,52,181,180,181,52,53,51,180,179,180,51,52,50,179,178,179,50,51,49,178,177,178,49,50,48,177,176,177,48,49,47,176,175,176,47,48,46,175,174,175,46,47,45,174,173,174,45,46,44,173,172,173,44,45,43,172,171,172,43,44,42,171,170,171,42,43,41,170,169,170,41,42,40,169,168,169,40,41,39,168,167,168,39,40,38,167,166,167,38,39,37,166,165,166,37,38,36,165,164,165,36,37,35,164,163,164,35,36,34,163,162,163,34,35,33,162,161,162,33,34,32,161,160,161,32,33,31,160,159,160,31,32,30,159,158,159,30,31,29,158,157,158,29,30,28,157,156,157,28,29,27,156,155,156,27,28,26,155,154,155,26,27,25,154,153,154,25,26,24,153,152,153,24,25,23,152,151,152,23,24,22,151,150,151,22,23,21,150,149,150,21,22,20,149,148,149,20,21,19,148,147,148,19,20,18,147,146,147,18,19,17,146,145,146,17,18,16,145,144,145,16,17,15,144,143,144,15,16,14,143,142,143,14,15,13,142,141,142,13,14,12,141,140,141,12,13,11,140,139,140,11,12,10,139,138,139,10,11,9,138,137,138,9,10,8,137,136,137,8,9,7,136,135,136,7,8,6,135,134,135,6,7,5,134,133,134,5,6,4,133,132,133,4,5,3,132,131,132,3,4,2,131,130,131,2,3,1,130,129,130,1,2,0,129,128,129,0,1,254,383,382,383,254,255,253,382,381,382,253,254,252,381,380,381,252,253,251,380,379,380,251,252,250,379,378,379,250,251,249,378,377,378,249,250,248,377,376,377,248,249,247,376,375,376,247,248,246,375,374,375,246,247,245,374,373,374,245,246,244,373,372,373,244,245,243,372,371,372,243,244,242,371,370,371,242,243,241,370,369,370,241,242,240,369,368,369,240,241,239,368,367,368,239,240,238,367,366,367,238,239,237,366,365,366,237,238,236,365,364,365,236,237,235,364,363,364,235,236,234,363,362,363,234,235,233,362,361,362,233,234,232,361,360,361,232,233,231,360,359,360,231,232,230,359,358,359,230,231,229,358,357,358,229,230,228,357,356,357,228,229,227,356,355,356,227,228,226,355,354,355,226,227,225,354,353,354,225,226,224,353,352,353,224,225,223,352,351,352,223,224,222,351,350,351,222,223,221,350,349,350,221,222,220,349,348,349,220,221,219,348,347,348,219,220,218,347,346,347,218,219,217,346,345,346,217,218,216,345,344,345,216,217,215,344,343,344,215,216,214,343,342,343,214,215,213,342,341,342,213,214,212,341,340,341,212,213,211,340,339,340,211,212,210,339,338,339,210,211,209,338,337,338,209,210,208,337,336,337,208,209,207,336,335,336,207,208,206,335,334,335,206,207,205,334,333,334,205,206,204,333,332,333,204,205,203,332,331,332,203,204,202,331,330,331,202,203,201,330,329,330,201,202,200,329,328,329,200,201,199,328,327,328,199,200,198,327,326,327,198,199,197,326,325,326,197,198,196,325,324,325,196,197,195,324,323,324,195,196,194,323,322,323,194,195,193,322,321,322,193,194,192,321,320,321,192,193,191,320,319,320,191,192,190,319,318,319,190,191,189,318,317,318,189,190,188,317,316,317,188,189,187,316,315,316,187,188,186,315,314,315,186,187,185,314,313,314,185,186,184,313,312,313,184,185,183,312,311,312,183,184,182,311,310,311,182,183,181,310,309,310,181,182,180,309,308,309,180,181,179,308,307,308,179,180,178,307,306,307,178,179,177,306,305,306,177,178,176,305,304,305,176,177,175,304,303,304,175,176,174,303,302,303,174,175,173,302,301,302,173,174,172,301,300,301,172,173,171,300,299,300,171,172,170,299,298,299,170,171,169,298,297,298,169,170,168,297,296,297,168,169,167,296,295,296,167,168,166,295,294,295,166,167,165,294,293,294,165,166,164,293,292,293,164,165,163,292,291,292,163,164,162,291,290,291,162,163,161,290,289,290,161,162,160,289,288,289,160,161,159,288,287,288,159,160,158,287,286,287,158,159,157,286,285,286,157,158,156,285,284,285,156,157,155,284,283,284,155,156,154,283,282,283,154,155,153,282,281,282,153,154,152,281,280,281,152,153,151,280,279,280,151,152,150,279,278,279,150,151,149,278,277,278,149,150,148,277,276,277,148,149,147,276,275,276,147,148,146,275,274,275,146,147,145,274,273,274,145,146,144,273,272,273,144,145,143,272,271,272,143,144,142,271,270,271,142,143,141,270,269,270,141,142,140,269,268,269,140,141,139,268,267,268,139,140,138,267,266,267,138,139,137,266,265,266,137,138,136,265,264,265,136,137,135,264,263,264,135,136,134,263,262,263,134,135,133,262,261,262,133,134,132,261,260,261,132,133,131,260,259,260,131,132,130,259,258,259,130,131,129,258,257,258,129,130,128,257,256,257,128,129,382,511,510,511,382,383,381,510,509,510,381,382,380,509,508,509,380,381,379,508,507,508,379,380,378,507,506,507,378,379,377,506,505,506,377,378,376,505,504,505,376,377,375,504,503,504,375,376,374,503,502,503,374,375,373,502,501,502,373,374,372,501,500,501,372,373,371,500,499,500,371,372,370,499,498,499,370,371,369,498,497,498,369,370,368,497,496,497,368,369,367,496,495,496,367,368,366,495,494,495,366,367,365,494,493,494,365,366,364,493,492,493,364,365,363,492,491,492,363,364,362,491,490,491,362,363,361,490,489,490,361,362,360,489,488,489,360,361,359,488,487,488,359,360,358,487,486,487,358,359,357,486,485,486,357,358,356,485,484,485,356,357,355,484,483,484,355,356,354,483,482,483,354,355,353,482,481,482,353,354,352,481,480,481,352,353,351,480,479,480,351,352,350,479,478,479,350,351,349,478,477,478,349,350,348,477,476,477,348,349,347,476,475,476,347,348,346,475,474,475,346,347,345,474,473,474,345,346,344,473,472,473,344,345,343,472,471,472,343,344,342,471,470,471,342,343,341,470,469,470,341,342,340,469,468,469,340,341,339,468,467,468,339,340,338,467,466,467,338,339,337,466,465,466,337,338,336,465,464,465,336,337,335,464,463,464,335,336,334,463,462,463,334,335,333,462,461,462,333,334,332,461,460,461,332,333,331,460,459,460,331,332,330,459,458,459,330,331,329,458,457,458,329,330,328,457,456,457,328,329,327,456,455,456,327,328,326,455,454,455,326,327,325,454,453,454,325,326,324,453,452,453,324,325,323,452,451,452,323,324,322,451,450,451,322,323,321,450,449,450,321,322,320,449,448,449,320,321,319,448,447,448,319,320,318,447,446,447,318,319,317,446,445,446,317,318,316,445,444,445,316,317,315,444,443,444,315,316,314,443,442,443,314,315,313,442,441,442,313,314,312,441,440,441,312,313,311,440,439,440,311,312,310,439,438,439,310,311,309,438,437,438,309,310,308,437,436,437,308,309,307,436,435,436,307,308,306,435,434,435,306,307,305,434,433,434,305,306,304,433,432,433,304,305,303,432,431,432,303,304,302,431,430,431,302,303,301,430,429,430,301,302,300,429,428,429,300,301,299,428,427,428,299,300,298,427,426,427,298,299,297,426,425,426,297,298,296,425,424,425,296,297,295,424,423,424,295,296,294,423,422,423,294,295,293,422,421,422,293,294,292,421,420,421,292,293,291,420,419,420,291,292,290,419,418,419,290,291,289,418,417,418,289,290,288,417,416,417,288,289,287,416,415,416,287,288,286,415,414,415,286,287,285,414,413,414,285,286,284,413,412,413,284,285,283,412,411,412,283,284,282,411,410,411,282,283,281,410,409,410,281,282,280,409,408,409,280,281,279,408,407,408,279,280,278,407,406,407,278,279,277,406,405,406,277,278,276,405,404,405,276,277,275,404,403,404,275,276,274,403,402,403,274,275,273,402,401,402,273,274,272,401,400,401,272,273,271,400,399,400,271,272,270,399,398,399,270,271,269,398,397,398,269,270,268,397,396,397,268,269,267,396,395,396,267,268,266,395,394,395,266,267,265,394,393,394,265,266,264,393,392,393,264,265,263,392,391,392,263,264,262,391,390,391,262,263,261,390,389,390,261,262,260,389,388,389,260,261,259,388,387,388,259,260,258,387,386,387,258,259,257,386,385,386,257,258,256,385,384,385,256,257,510,639,638,639,510,511,509,638,637,638,509,510,508,637,636,637,508,509,507,636,635,636,507,508,506,635,634,635,506,507,505,634,633,634,505,506,504,633,632,633,504,505,503,632,631,632,503,504,502,631,630,631,502,503,501,630,629,630,501,502,500,629,628,629,500,501,499,628,627,628,499,500,498,627,626,627,498,499,497,626,625,626,497,498,496,625,624,625,496,497,495,624,623,624,495,496,494,623,622,623,494,495,493,622,621,622,493,494,492,621,620,621,492,493,491,620,619,620,491,492,490,619,618,619,490,491,489,618,617,618,489,490,488,617,616,617,488,489,487,616,615,616,487,488,486,615,614,615,486,487,485,614,613,614,485,486,484,613,612,613,484,485,483,612,611,612,483,484,482,611,610,611,482,483,481,610,609,610,481,482,480,609,608,609,480,481,479,608,607,608,479,480,478,607,606,607,478,479,477,606,605,606,477,478,476,605,604,605,476,477,475,604,603,604,475,476,474,603,602,603,474,475,473,602,601,602,473,474,472,601,600,601,472,473,471,600,599,600,471,472,470,599,598,599,470,471,469,598,597,598,469,470,468,597,596,597,468,469,467,596,595,596,467,468,466,595,594,595,466,467,465,594,593,594,465,466,464,593,592,593,464,465,463,592,591,592,463,464,462,591,590,591,462,463,461,590,589,590,461,462,460,589,588,589,460,461,459,588,587,588,459,460,458,587,586,587,458,459,457,586,585,586,457,458,456,585,584,585,456,457,455,584,583,584,455,456,454,583,582,583,454,455,453,582,581,582,453,454,452,581,580,581,452,453,451,580,579,580,451,452,450,579,578,579,450,451,449,578,577,578,449,450,448,577,576,577,448,449,447,576,575,576,447,448,446,575,574,575,446,447,445,574,573,574,445,446,444,573,572,573,444,445,443,572,571,572,443,444,442,571,570,571,442,443,441,570,569,570,441,442,440,569,568,569,440,441,439,568,567,568,439,440,438,567,566,567,438,439,437,566,565,566,437,438,436,565,564,565,436,437,435,564,563,564,435,436,434,563,562,563,434,435,433,562,561,562,433,434,432,561,560,561,432,433,431,560,559,560,431,432,430,559,558,559,430,431,429,558,557,558,429,430,428,557,556,557,428,429,427,556,555,556,427,428,426,555,554,555,426,427,425,554,553,554,425,426,424,553,552,553,424,425,423,552,551,552,423,424,422,551,550,551,422,423,421,550,549,550,421,422,420,549,548,549,420,421,419,548,547,548,419,420,418,547,546,547,418,419,417,546,545,546,417,418,416,545,544,545,416,417,415,544,543,544,415,416,414,543,542,543,414,415,413,542,541,542,413,414,412,541,540,541,412,413,411,540,539,540,411,412,410,539,538,539,410,411,409,538,537,538,409,410,408,537,536,537,408,409,407,536,535,536,407,408,406,535,534,535,406,407,405,534,533,534,405,406,404,533,532,533,404,405,403,532,531,532,403,404,402,531,530,531,402,403,401,530,529,530,401,402,400,529,528,529,400,401,399,528,527,528,399,400,398,527,526,527,398,399,397,526,525,526,397,398,396,525,524,525,396,397,395,524,523,524,395,396,394,523,522,523,394,395,393,522,521,522,393,394,392,521,520,521,392,393,391,520,519,520,391,392,390,519,518,519,390,391,389,518,517,518,389,390,388,517,516,517,388,389,387,516,515,516,387,388,386,515,514,515,386,387,385,514,513,514,385,386,384,513,512,513,384,385,638,767,766,767,638,639,637,766,765,766,637,638,636,765,764,765,636,637,635,764,763,764,635,636,634,763,762,763,634,635,633,762,761,762,633,634,632,761,760,761,632,633,631,760,759,760,631,632,630,759,758,759,630,631,629,758,757,758,629,630,628,757,756,757,628,629,627,756,755,756,627,628,626,755,754,755,626,627,625,754,753,754,625,626,624,753,752,753,624,625,623,752,751,752,623,624,622,751,750,751,622,623,621,750,749,750,621,622,620,749,748,749,620,621,619,748,747,748,619,620,618,747,746,747,618,619,617,746,745,746,617,618,616,745,744,745,616,617,615,744,743,744,615,616,614,743,742,743,614,615,613,742,741,742,613,614,612,741,740,741,612,613,611,740,739,740,611,612,610,739,738,739,610,611,609,738,737,738,609,610,608,737,736,737,608,609,607,736,735,736,607,608,606,735,734,735,606,607,605,734,733,734,605,606,604,733,732,733,604,605,603,732,731,732,603,604,602,731,730,731,602,603,601,730,729,730,601,602,600,729,728,729,600,601,599,728,727,728,599,600,598,727,726,727,598,599,597,726,725,726,597,598,596,725,724,725,596,597,595,724,723,724,595,596,594,723,722,723,594,595,593,722,721,722,593,594,592,721,720,721,592,593,591,720,719,720,591,592,590,719,718,719,590,591,589,718,717,718,589,590,588,717,716,717,588,589,587,716,715,716,587,588,586,715,714,715,586,587,585,714,713,714,585,586,584,713,712,713,584,585,583,712,711,712,583,584,582,711,710,711,582,583,581,710,709,710,581,582,580,709,708,709,580,581,579,708,707,708,579,580,578,707,706,707,578,579,577,706,705,706,577,578,576,705,704,705,576,577,575,704,703,704,575,576,574,703,702,703,574,575,573,702,701,702,573,574,572,701,700,701,572,573,571,700,699,700,571,572,570,699,698,699,570,571,569,698,697,698,569,570,568,697,696,697,568,569,567,696,695,696,567,568,566,695,694,695,566,567,565,694,693,694,565,566,564,693,692,693,564,565,563,692,691,692,563,564,562,691,690,691,562,563,561,690,689,690,561,562,560,689,688,689,560,561,559,688,687,688,559,560,558,687,686,687,558,559,557,686,685,686,557,558,556,685,684,685,556,557,555,684,683,684,555,556,554,683,682,683,554,555,553,682,681,682,553,554,552,681,680,681,552,553,551,680,679,680,551,552,550,679,678,679,550,551,549,678,677,678,549,550,548,677,676,677,548,549,547,676,675,676,547,548,546,675,674,675,546,547,545,674,673,674,545,546,544,673,672,673,544,545,543,672,671,672,543,544,542,671,670,671,542,543,541,670,669,670,541,542,540,669,668,669,540,541,539,668,667,668,539,540,538,667,666,667,538,539,537,666,665,666,537,538,536,665,664,665,536,537,535,664,663,664,535,536,534,663,662,663,534,535,533,662,661,662,533,534,532,661,660,661,532,533,531,660,659,660,531,532,530,659,658,659,530,531,529,658,657,658,529,530,528,657,656,657,528,529,527,656,655,656,527,528,526,655,654,655,526,527,525,654,653,654,525,526,524,653,652,653,524,525,523,652,651,652,523,524,522,651,650,651,522,523,521,650,649,650,521,522,520,649,648,649,520,521,519,648,647,648,519,520,518,647,646,647,518,519,517,646,645,646,517,518,516,645,644,645,516,517,515,644,643,644,515,516,514,643,642,643,514,515,513,642,641,642,513,514,512,641,640,641,512,513,766,895,894,895,766,767,765,894,893,894,765,766,764,893,892,893,764,765,763,892,891,892,763,764,762,891,890,891,762,763,761,890,889,890,761,762,760,889,888,889,760,761,759,888,887,888,759,760,758,887,886,887,758,759,757,886,885,886,757,758,756,885,884,885,756,757,755,884,883,884,755,756,754,883,882,883,754,755,753,882,881,882,753,754,752,881,880,881,752,753,751,880,879,880,751,752,750,879,878,879,750,751,749,878,877,878,749,750,748,877,876,877,748,749,747,876,875,876,747,748,746,875,874,875,746,747,745,874,873,874,745,746,744,873,872,873,744,745,743,872,871,872,743,744,742,871,870,871,742,743,741,870,869,870,741,742,740,869,868,869,740,741,739,868,867,868,739,740,738,867,866,867,738,739,737,866,865,866,737,738,736,865,864,865,736,737,735,864,863,864,735,736,734,863,862,863,734,735,733,862,861,862,733,734,732,861,860,861,732,733,731,860,859,860,731,732,730,859,858,859,730,731,729,858,857,858,729,730,728,857,856,857,728,729,727,856,855,856,727,728,726,855,854,855,726,727,725,854,853,854,725,726,724,853,852,853,724,725,723,852,851,852,723,724,722,851,850,851,722,723,721,850,849,850,721,722,720,849,848,849,720,721,719,848,847,848,719,720,718,847,846,847,718,719,717,846,845,846,717,718,716,845,844,845,716,717,715,844,843,844,715,716,714,843,842,843,714,715,713,842,841,842,713,714,712,841,840,841,712,713,711,840,839,840,711,712,710,839,838,839,710,711,709,838,837,838,709,710,708,837,836,837,708,709,707,836,835,836,707,708,706,835,834,835,706,707,705,834,833,834,705,706,704,833,832,833,704,705,703,832,831,832,703,704,702,831,830,831,702,703,701,830,829,830,701,702,700,829,828,829,700,701,699,828,827,828,699,700,698,827,826,827,698,699,697,826,825,826,697,698,696,825,824,825,696,697,695,824,823,824,695,696,694,823,822,823,694,695,693,822,821,822,693,694,692,821,820,821,692,693,691,820,819,820,691,692,690,819,818,819,690,691,689,818,817,818,689,690,688,817,816,817,688,689,687,816,815,816,687,688,686,815,814,815,686,687,685,814,813,814,685,686,684,813,812,813,684,685,683,812,811,812,683,684,682,811,810,811,682,683,681,810,809,810,681,682,680,809,808,809,680,681,679,808,807,808,679,680,678,807,806,807,678,679,677,806,805,806,677,678,676,805,804,805,676,677,675,804,803,804,675,676,674,803,802,803,674,675,673,802,801,802,673,674,672,801,800,801,672,673,671,800,799,800,671,672,670,799,798,799,670,671,669,798,797,798,669,670,668,797,796,797,668,669,667,796,795,796,667,668,666,795,794,795,666,667,665,794,793,794,665,666,664,793,792,793,664,665,663,792,791,792,663,664,662,791,790,791,662,663,661,790,789,790,661,662,660,789,788,789,660,661,659,788,787,788,659,660,658,787,786,787,658,659,657,786,785,786,657,658,656,785,784,785,656,657,655,784,783,784,655,656,654,783,782,783,654,655,653,782,781,782,653,654,652,781,780,781,652,653,651,780,779,780,651,652,650,779,778,779,650,651,649,778,777,778,649,650,648,777,776,777,648,649,647,776,775,776,647,648,646,775,774,775,646,647,645,774,773,774,645,646,644,773,772,773,644,645,643,772,771,772,643,644,642,771,770,771,642,643,641,770,769,770,641,642,640,769,768,769,640,641,894,1023,1022,1023,894,895,893,1022,1021,1022,893,894,892,1021,1020,1021,892,893,891,1020,1019,1020,891,892,890,1019,1018,1019,890,891,889,1018,1017,1018,889,890,888,1017,1016,1017,888,889,887,1016,1015,1016,887,888,886,1015,1014,1015,886,887,885,1014,1013,1014,885,886,884,1013,1012,1013,884,885,883,1012,1011,1012,883,884,882,1011,1010,1011,882,883,881,1010,1009,1010,881,882,880,1009,1008,1009,880,881,879,1008,1007,1008,879,880,878,1007,1006,1007,878,879,877,1006,1005,1006,877,878,876,1005,1004,1005,876,877,875,1004,1003,1004,875,876,874,1003,1002,1003,874,875,873,1002,1001,1002,873,874,872,1001,1000,1001,872,873,871,1000,999,1000,871,872,870,999,998,999,870,871,869,998,997,998,869,870,868,997,996,997,868,869,867,996,995,996,867,868,866,995,994,995,866,867,865,994,993,994,865,866,864,993,992,993,864,865,863,992,991,992,863,864,862,991,990,991,862,863,861,990,989,990,861,862,860,989,988,989,860,861,859,988,987,988,859,860,858,987,986,987,858,859,857,986,985,986,857,858,856,985,984,985,856,857,855,984,983,984,855,856,854,983,982,983,854,855,853,982,981,982,853,854,852,981,980,981,852,853,851,980,979,980,851,852,850,979,978,979,850,851,849,978,977,978,849,850,848,977,976,977,848,849,847,976,975,976,847,848,846,975,974,975,846,847,845,974,973,974,845,846,844,973,972,973,844,845,843,972,971,972,843,844,842,971,970,971,842,843,841,970,969,970,841,842,840,969,968,969,840,841,839,968,967,968,839,840,838,967,966,967,838,839,837,966,965,966,837,838,836,965,964,965,836,837,835,964,963,964,835,836,834,963,962,963,834,835,833,962,961,962,833,834,832,961,960,961,832,833,831,960,959,960,831,832,830,959,958,959,830,831,829,958,957,958,829,830,828,957,956,957,828,829,827,956,955,956,827,828,826,955,954,955,826,827,825,954,953,954,825,826,824,953,952,953,824,825,823,952,951,952,823,824,822,951,950,951,822,823,821,950,949,950,821,822,820,949,948,949,820,821,819,948,947,948,819,820,818,947,946,947,818,819,817,946,945,946,817,818,816,945,944,945,816,817,815,944,943,944,815,816,814,943,942,943,814,815,813,942,941,942,813,814,812,941,940,941,812,813,811,940,939,940,811,812,810,939,938,939,810,811,809,938,937,938,809,810,808,937,936,937,808,809,807,936,935,936,807,808,806,935,934,935,806,807,805,934,933,934,805,806,804,933,932,933,804,805,803,932,931,932,803,804,802,931,930,931,802,803,801,930,929,930,801,802,800,929,928,929,800,801,799,928,927,928,799,800,798,927,926,927,798,799,797,926,925,926,797,798,796,925,924,925,796,797,795,924,923,924,795,796,794,923,922,923,794,795,793,922,921,922,793,794,792,921,920,921,792,793,791,920,919,920,791,792,790,919,918,919,790,791,789,918,917,918,789,790,788,917,916,917,788,789,787,916,915,916,787,788,786,915,914,915,786,787,785,914,913,914,785,786,784,913,912,913,784,785,783,912,911,912,783,784,782,911,910,911,782,783,781,910,909,910,781,782,780,909,908,909,780,781,779,908,907,908,779,780,778,907,906,907,778,779,777,906,905,906,777,778,776,905,904,905,776,777,775,904,903,904,775,776,774,903,902,903,774,775,773,902,901,902,773,774,772,901,900,901,772,773,771,900,899,900,771,772,770,899,898,899,770,771,769,898,897,898,769,770,768,897,896,897,768,769,1022,1151,1150,1151,1022,1023,1021,1150,1149,1150,1021,1022,1020,1149,1148,1149,1020,1021,1019,1148,1147,1148,1019,1020,1018,1147,1146,1147,1018,1019,1017,1146,1145,1146,1017,1018,1016,1145,1144,1145,1016,1017,1015,1144,1143,1144,1015,1016,1014,1143,1142,1143,1014,1015,1013,1142,1141,1142,1013,1014,1012,1141,1140,1141,1012,1013,1011,1140,1139,1140,1011,1012,1010,1139,1138,1139,1010,1011,1009,1138,1137,1138,1009,1010,1008,1137,1136,1137,1008,1009,1007,1136,1135,1136,1007,1008,1006,1135,1134,1135,1006,1007,1005,1134,1133,1134,1005,1006,1004,1133,1132,1133,1004,1005,1003,1132,1131,1132,1003,1004,1002,1131,1130,1131,1002,1003,1001,1130,1129,1130,1001,1002,1000,1129,1128,1129,1000,1001,999,1128,1127,1128,999,1000,998,1127,1126,1127,998,999,997,1126,1125,1126,997,998,996,1125,1124,1125,996,997,995,1124,1123,1124,995,996,994,1123,1122,1123,994,995,993,1122,1121,1122,993,994,992,1121,1120,1121,992,993,991,1120,1119,1120,991,992,990,1119,1118,1119,990,991,989,1118,1117,1118,989,990,988,1117,1116,1117,988,989,987,1116,1115,1116,987,988,986,1115,1114,1115,986,987,985,1114,1113,1114,985,986,984,1113,1112,1113,984,985,983,1112,1111,1112,983,984,982,1111,1110,1111,982,983,981,1110,1109,1110,981,982,980,1109,1108,1109,980,981,979,1108,1107,1108,979,980,978,1107,1106,1107,978,979,977,1106,1105,1106,977,978,976,1105,1104,1105,976,977,975,1104,1103,1104,975,976,974,1103,1102,1103,974,975,973,1102,1101,1102,973,974,972,1101,1100,1101,972,973,971,1100,1099,1100,971,972,970,1099,1098,1099,970,971,969,1098,1097,1098,969,970,968,1097,1096,1097,968,969,967,1096,1095,1096,967,968,966,1095,1094,1095,966,967,965,1094,1093,1094,965,966,964,1093,1092,1093,964,965,963,1092,1091,1092,963,964,962,1091,1090,1091,962,963,961,1090,1089,1090,961,962,960,1089,1088,1089,960,961,959,1088,1087,1088,959,960,958,1087,1086,1087,958,959,957,1086,1085,1086,957,958,956,1085,1084,1085,956,957,955,1084,1083,1084,955,956,954,1083,1082,1083,954,955,953,1082,1081,1082,953,954,952,1081,1080,1081,952,953,951,1080,1079,1080,951,952,950,1079,1078,1079,950,951,949,1078,1077,1078,949,950,948,1077,1076,1077,948,949,947,1076,1075,1076,947,948,946,1075,1074,1075,946,947,945,1074,1073,1074,945,946,944,1073,1072,1073,944,945,943,1072,1071,1072,943,944,942,1071,1070,1071,942,943,941,1070,1069,1070,941,942,940,1069,1068,1069,940,941,939,1068,1067,1068,939,940,938,1067,1066,1067,938,939,937,1066,1065,1066,937,938,936,1065,1064,1065,936,937,935,1064,1063,1064,935,936,934,1063,1062,1063,934,935,933,1062,1061,1062,933,934,932,1061,1060,1061,932,933,931,1060,1059,1060,931,932,930,1059,1058,1059,930,931,929,1058,1057,1058,929,930,928,1057,1056,1057,928,929,927,1056,1055,1056,927,928,926,1055,1054,1055,926,927,925,1054,1053,1054,925,926,924,1053,1052,1053,924,925,923,1052,1051,1052,923,924,922,1051,1050,1051,922,923,921,1050,1049,1050,921,922,920,1049,1048,1049,920,921,919,1048,1047,1048,919,920,918,1047,1046,1047,918,919,917,1046,1045,1046,917,918,916,1045,1044,1045,916,917,915,1044,1043,1044,915,916,914,1043,1042,1043,914,915,913,1042,1041,1042,913,914,912,1041,1040,1041,912,913,911,1040,1039,1040,911,912,910,1039,1038,1039,910,911,909,1038,1037,1038,909,910,908,1037,1036,1037,908,909,907,1036,1035,1036,907,908,906,1035,1034,1035,906,907,905,1034,1033,1034,905,906,904,1033,1032,1033,904,905,903,1032,1031,1032,903,904,902,1031,1030,1031,902,903,901,1030,1029,1030,901,902,900,1029,1028,1029,900,901,899,1028,1027,1028,899,900,898,1027,1026,1027,898,899,897,1026,1025,1026,897,898,896,1025,1024,1025,896,897,1150,1279,1278,1279,1150,1151,1149,1278,1277,1278,1149,1150,1148,1277,1276,1277,1148,1149,1147,1276,1275,1276,1147,1148,1146,1275,1274,1275,1146,1147,1145,1274,1273,1274,1145,1146,1144,1273,1272,1273,1144,1145,1143,1272,1271,1272,1143,1144,1142,1271,1270,1271,1142,1143,1141,1270,1269,1270,1141,1142,1140,1269,1268,1269,1140,1141,1139,1268,1267,1268,1139,1140,1138,1267,1266,1267,1138,1139,1137,1266,1265,1266,1137,1138,1136,1265,1264,1265,1136,1137,1135,1264,1263,1264,1135,1136,1134,1263,1262,1263,1134,1135,1133,1262,1261,1262,1133,1134,1132,1261,1260,1261,1132,1133,1131,1260,1259,1260,1131,1132,1130,1259,1258,1259,1130,1131,1129,1258,1257,1258,1129,1130,1128,1257,1256,1257,1128,1129,1127,1256,1255,1256,1127,1128,1126,1255,1254,1255,1126,1127,1125,1254,1253,1254,1125,1126,1124,1253,1252,1253,1124,1125,1123,1252,1251,1252,1123,1124,1122,1251,1250,1251,1122,1123,1121,1250,1249,1250,1121,1122,1120,1249,1248,1249,1120,1121,1119,1248,1247,1248,1119,1120,1118,1247,1246,1247,1118,1119,1117,1246,1245,1246,1117,1118,1116,1245,1244,1245,1116,1117,1115,1244,1243,1244,1115,1116,1114,1243,1242,1243,1114,1115,1113,1242,1241,1242,1113,1114,1112,1241,1240,1241,1112,1113,1111,1240,1239,1240,1111,1112,1110,1239,1238,1239,1110,1111,1109,1238,1237,1238,1109,1110,1108,1237,1236,1237,1108,1109,1107,1236,1235,1236,1107,1108,1106,1235,1234,1235,1106,1107,1105,1234,1233,1234,1105,1106,1104,1233,1232,1233,1104,1105,1103,1232,1231,1232,1103,1104,1102,1231,1230,1231,1102,1103,1101,1230,1229,1230,1101,1102,1100,1229,1228,1229,1100,1101,1099,1228,1227,1228,1099,1100,1098,1227,1226,1227,1098,1099,1097,1226,1225,1226,1097,1098,1096,1225,1224,1225,1096,1097,1095,1224,1223,1224,1095,1096,1094,1223,1222,1223,1094,1095,1093,1222,1221,1222,1093,1094,1092,1221,1220,1221,1092,1093,1091,1220,1219,1220,1091,1092,1090,1219,1218,1219,1090,1091,1089,1218,1217,1218,1089,1090,1088,1217,1216,1217,1088,1089,1087,1216,1215,1216,1087,1088,1086,1215,1214,1215,1086,1087,1085,1214,1213,1214,1085,1086,1084,1213,1212,1213,1084,1085,1083,1212,1211,1212,1083,1084,1082,1211,1210,1211,1082,1083,1081,1210,1209,1210,1081,1082,1080,1209,1208,1209,1080,1081,1079,1208,1207,1208,1079,1080,1078,1207,1206,1207,1078,1079,1077,1206,1205,1206,1077,1078,1076,1205,1204,1205,1076,1077,1075,1204,1203,1204,1075,1076,1074,1203,1202,1203,1074,1075,1073,1202,1201,1202,1073,1074,1072,1201,1200,1201,1072,1073,1071,1200,1199,1200,1071,1072,1070,1199,1198,1199,1070,1071,1069,1198,1197,1198,1069,1070,1068,1197,1196,1197,1068,1069,1067,1196,1195,1196,1067,1068,1066,1195,1194,1195,1066,1067,1065,1194,1193,1194,1065,1066,1064,1193,1192,1193,1064,1065,1063,1192,1191,1192,1063,1064,1062,1191,1190,1191,1062,1063,1061,1190,1189,1190,1061,1062,1060,1189,1188,1189,1060,1061,1059,1188,1187,1188,1059,1060,1058,1187,1186,1187,1058,1059,1057,1186,1185,1186,1057,1058,1056,1185,1184,1185,1056,1057,1055,1184,1183,1184,1055,1056,1054,1183,1182,1183,1054,1055,1053,1182,1181,1182,1053,1054,1052,1181,1180,1181,1052,1053,1051,1180,1179,1180,1051,1052,1050,1179,1178,1179,1050,1051,1049,1178,1177,1178,1049,1050,1048,1177,1176,1177,1048,1049,1047,1176,1175,1176,1047,1048,1046,1175,1174,1175,1046,1047,1045,1174,1173,1174,1045,1046,1044,1173,1172,1173,1044,1045,1043,1172,1171,1172,1043,1044,1042,1171,1170,1171,1042,1043,1041,1170,1169,1170,1041,1042,1040,1169,1168,1169,1040,1041,1039,1168,1167,1168,1039,1040,1038,1167,1166,1167,1038,1039,1037,1166,1165,1166,1037,1038,1036,1165,1164,1165,1036,1037,1035,1164,1163,1164,1035,1036,1034,1163,1162,1163,1034,1035,1033,1162,1161,1162,1033,1034,1032,1161,1160,1161,1032,1033,1031,1160,1159,1160,1031,1032,1030,1159,1158,1159,1030,1031,1029,1158,1157,1158,1029,1030,1028,1157,1156,1157,1028,1029,1027,1156,1155,1156,1027,1028,1026,1155,1154,1155,1026,1027,1025,1154,1153,1154,1025,1026,1024,1153,1152,1153,1024,1025,1278,1407,1406,1407,1278,1279,1277,1406,1405,1406,1277,1278,1276,1405,1404,1405,1276,1277,1275,1404,1403,1404,1275,1276,1274,1403,1402,1403,1274,1275,1273,1402,1401,1402,1273,1274,1272,1401,1400,1401,1272,1273,1271,1400,1399,1400,1271,1272,1270,1399,1398,1399,1270,1271,1269,1398,1397,1398,1269,1270,1268,1397,1396,1397,1268,1269,1267,1396,1395,1396,1267,1268,1266,1395,1394,1395,1266,1267,1265,1394,1393,1394,1265,1266,1264,1393,1392,1393,1264,1265,1263,1392,1391,1392,1263,1264,1262,1391,1390,1391,1262,1263,1261,1390,1389,1390,1261,1262,1260,1389,1388,1389,1260,1261,1259,1388,1387,1388,1259,1260,1258,1387,1386,1387,1258,1259,1257,1386,1385,1386,1257,1258,1256,1385,1384,1385,1256,1257,1255,1384,1383,1384,1255,1256,1254,1383,1382,1383,1254,1255,1253,1382,1381,1382,1253,1254,1252,1381,1380,1381,1252,1253,1251,1380,1379,1380,1251,1252,1250,1379,1378,1379,1250,1251,1249,1378,1377,1378,1249,1250,1248,1377,1376,1377,1248,1249,1247,1376,1375,1376,1247,1248,1246,1375,1374,1375,1246,1247,1245,1374,1373,1374,1245,1246,1244,1373,1372,1373,1244,1245,1243,1372,1371,1372,1243,1244,1242,1371,1370,1371,1242,1243,1241,1370,1369,1370,1241,1242,1240,1369,1368,1369,1240,1241,1239,1368,1367,1368,1239,1240,1238,1367,1366,1367,1238,1239,1237,1366,1365,1366,1237,1238,1236,1365,1364,1365,1236,1237,1235,1364,1363,1364,1235,1236,1234,1363,1362,1363,1234,1235,1233,1362,1361,1362,1233,1234,1232,1361,1360,1361,1232,1233,1231,1360,1359,1360,1231,1232,1230,1359,1358,1359,1230,1231,1229,1358,1357,1358,1229,1230,1228,1357,1356,1357,1228,1229,1227,1356,1355,1356,1227,1228,1226,1355,1354,1355,1226,1227,1225,1354,1353,1354,1225,1226,1224,1353,1352,1353,1224,1225,1223,1352,1351,1352,1223,1224,1222,1351,1350,1351,1222,1223,1221,1350,1349,1350,1221,1222,1220,1349,1348,1349,1220,1221,1219,1348,1347,1348,1219,1220,1218,1347,1346,1347,1218,1219,1217,1346,1345,1346,1217,1218,1216,1345,1344,1345,1216,1217,1215,1344,1343,1344,1215,1216,1214,1343,1342,1343,1214,1215,1213,1342,1341,1342,1213,1214,1212,1341,1340,1341,1212,1213,1211,1340,1339,1340,1211,1212,1210,1339,1338,1339,1210,1211,1209,1338,1337,1338,1209,1210,1208,1337,1336,1337,1208,1209,1207,1336,1335,1336,1207,1208,1206,1335,1334,1335,1206,1207,1205,1334,1333,1334,1205,1206,1204,1333,1332,1333,1204,1205,1203,1332,1331,1332,1203,1204,1202,1331,1330,1331,1202,1203,1201,1330,1329,1330,1201,1202,1200,1329,1328,1329,1200,1201,1199,1328,1327,1328,1199,1200,1198,1327,1326,1327,1198,1199,1197,1326,1325,1326,1197,1198,1196,1325,1324,1325,1196,1197,1195,1324,1323,1324,1195,1196,1194,1323,1322,1323,1194,1195,1193,1322,1321,1322,1193,1194,1192,1321,1320,1321,1192,1193,1191,1320,1319,1320,1191,1192,1190,1319,1318,1319,1190,1191,1189,1318,1317,1318,1189,1190,1188,1317,1316,1317,1188,1189,1187,1316,1315,1316,1187,1188,1186,1315,1314,1315,1186,1187,1185,1314,1313,1314,1185,1186,1184,1313,1312,1313,1184,1185,1183,1312,1311,1312,1183,1184,1182,1311,1310,1311,1182,1183,1181,1310,1309,1310,1181,1182,1180,1309,1308,1309,1180,1181,1179,1308,1307,1308,1179,1180,1178,1307,1306,1307,1178,1179,1177,1306,1305,1306,1177,1178,1176,1305,1304,1305,1176,1177,1175,1304,1303,1304,1175,1176,1174,1303,1302,1303,1174,1175,1173,1302,1301,1302,1173,1174,1172,1301,1300,1301,1172,1173,1171,1300,1299,1300,1171,1172,1170,1299,1298,1299,1170,1171,1169,1298,1297,1298,1169,1170,1168,1297,1296,1297,1168,1169,1167,1296,1295,1296,1167,1168,1166,1295,1294,1295,1166,1167,1165,1294,1293,1294,1165,1166,1164,1293,1292,1293,1164,1165,1163,1292,1291,1292,1163,1164,1162,1291,1290,1291,1162,1163,1161,1290,1289,1290,1161,1162,1160,1289,1288,1289,1160,1161,1159,1288,1287,1288,1159,1160,1158,1287,1286,1287,1158,1159,1157,1286,1285,1286,1157,1158,1156,1285,1284,1285,1156,1157,1155,1284,1283,1284,1155,1156,1154,1283,1282,1283,1154,1155,1153,1282,1281,1282,1153,1154,1152,1281,1280,1281,1152,1153,1406,1535,1534,1535,1406,1407,1405,1534,1533,1534,1405,1406,1404,1533,1532,1533,1404,1405,1403,1532,1531,1532,1403,1404,1402,1531,1530,1531,1402,1403,1401,1530,1529,1530,1401,1402,1400,1529,1528,1529,1400,1401,1399,1528,1527,1528,1399,1400,1398,1527,1526,1527,1398,1399,1397,1526,1525,1526,1397,1398,1396,1525,1524,1525,1396,1397,1395,1524,1523,1524,1395,1396,1394,1523,1522,1523,1394,1395,1393,1522,1521,1522,1393,1394,1392,1521,1520,1521,1392,1393,1391,1520,1519,1520,1391,1392,1390,1519,1518,1519,1390,1391,1389,1518,1517,1518,1389,1390,1388,1517,1516,1517,1388,1389,1387,1516,1515,1516,1387,1388,1386,1515,1514,1515,1386,1387,1385,1514,1513,1514,1385,1386,1384,1513,1512,1513,1384,1385,1383,1512,1511,1512,1383,1384,1382,1511,1510,1511,1382,1383,1381,1510,1509,1510,1381,1382,1380,1509,1508,1509,1380,1381,1379,1508,1507,1508,1379,1380,1378,1507,1506,1507,1378,1379,1377,1506,1505,1506,1377,1378,1376,1505,1504,1505,1376,1377,1375,1504,1503,1504,1375,1376,1374,1503,1502,1503,1374,1375,1373,1502,1501,1502,1373,1374,1372,1501,1500,1501,1372,1373,1371,1500,1499,1500,1371,1372,1370,1499,1498,1499,1370,1371,1369,1498,1497,1498,1369,1370,1368,1497,1496,1497,1368,1369,1367,1496,1495,1496,1367,1368,1366,1495,1494,1495,1366,1367,1365,1494,1493,1494,1365,1366,1364,1493,1492,1493,1364,1365,1363,1492,1491,1492,1363,1364,1362,1491,1490,1491,1362,1363,1361,1490,1489,1490,1361,1362,1360,1489,1488,1489,1360,1361,1359,1488,1487,1488,1359,1360,1358,1487,1486,1487,1358,1359,1357,1486,1485,1486,1357,1358,1356,1485,1484,1485,1356,1357,1355,1484,1483,1484,1355,1356,1354,1483,1482,1483,1354,1355,1353,1482,1481,1482,1353,1354,1352,1481,1480,1481,1352,1353,1351,1480,1479,1480,1351,1352,1350,1479,1478,1479,1350,1351,1349,1478,1477,1478,1349,1350,1348,1477,1476,1477,1348,1349,1347,1476,1475,1476,1347,1348,1346,1475,1474,1475,1346,1347,1345,1474,1473,1474,1345,1346,1344,1473,1472,1473,1344,1345,1343,1472,1471,1472,1343,1344,1342,1471,1470,1471,1342,1343,1341,1470,1469,1470,1341,1342,1340,1469,1468,1469,1340,1341,1339,1468,1467,1468,1339,1340,1338,1467,1466,1467,1338,1339,1337,1466,1465,1466,1337,1338,1336,1465,1464,1465,1336,1337,1335,1464,1463,1464,1335,1336,1334,1463,1462,1463,1334,1335,1333,1462,1461,1462,1333,1334,1332,1461,1460,1461,1332,1333,1331,1460,1459,1460,1331,1332,1330,1459,1458,1459,1330,1331,1329,1458,1457,1458,1329,1330,1328,1457,1456,1457,1328,1329,1327,1456,1455,1456,1327,1328,1326,1455,1454,1455,1326,1327,1325,1454,1453,1454,1325,1326,1324,1453,1452,1453,1324,1325,1323,1452,1451,1452,1323,1324,1322,1451,1450,1451,1322,1323,1321,1450,1449,1450,1321,1322,1320,1449,1448,1449,1320,1321,1319,1448,1447,1448,1319,1320,1318,1447,1446,1447,1318,1319,1317,1446,1445,1446,1317,1318,1316,1445,1444,1445,1316,1317,1315,1444,1443,1444,1315,1316,1314,1443,1442,1443,1314,1315,1313,1442,1441,1442,1313,1314,1312,1441,1440,1441,1312,1313,1311,1440,1439,1440,1311,1312,1310,1439,1438,1439,1310,1311,1309,1438,1437,1438,1309,1310,1308,1437,1436,1437,1308,1309,1307,1436,1435,1436,1307,1308,1306,1435,1434,1435,1306,1307,1305,1434,1433,1434,1305,1306,1304,1433,1432,1433,1304,1305,1303,1432,1431,1432,1303,1304,1302,1431,1430,1431,1302,1303,1301,1430,1429,1430,1301,1302,1300,1429,1428,1429,1300,1301,1299,1428,1427,1428,1299,1300,1298,1427,1426,1427,1298,1299,1297,1426,1425,1426,1297,1298,1296,1425,1424,1425,1296,1297,1295,1424,1423,1424,1295,1296,1294,1423,1422,1423,1294,1295,1293,1422,1421,1422,1293,1294,1292,1421,1420,1421,1292,1293,1291,1420,1419,1420,1291,1292,1290,1419,1418,1419,1290,1291,1289,1418,1417,1418,1289,1290,1288,1417,1416,1417,1288,1289,1287,1416,1415,1416,1287,1288,1286,1415,1414,1415,1286,1287,1285,1414,1413,1414,1285,1286,1284,1413,1412,1413,1284,1285,1283,1412,1411,1412,1283,1284,1282,1411,1410,1411,1282,1283,1281,1410,1409,1410,1281,1282,1280,1409,1408,1409,1280,1281,1534,1663,1662,1663,1534,1535,1533,1662,1661,1662,1533,1534,1532,1661,1660,1661,1532,1533,1531,1660,1659,1660,1531,1532,1530,1659,1658,1659,1530,1531,1529,1658,1657,1658,1529,1530,1528,1657,1656,1657,1528,1529,1527,1656,1655,1656,1527,1528,1526,1655,1654,1655,1526,1527,1525,1654,1653,1654,1525,1526,1524,1653,1652,1653,1524,1525,1523,1652,1651,1652,1523,1524,1522,1651,1650,1651,1522,1523,1521,1650,1649,1650,1521,1522,1520,1649,1648,1649,1520,1521,1519,1648,1647,1648,1519,1520,1518,1647,1646,1647,1518,1519,1517,1646,1645,1646,1517,1518,1516,1645,1644,1645,1516,1517,1515,1644,1643,1644,1515,1516,1514,1643,1642,1643,1514,1515,1513,1642,1641,1642,1513,1514,1512,1641,1640,1641,1512,1513,1511,1640,1639,1640,1511,1512,1510,1639,1638,1639,1510,1511,1509,1638,1637,1638,1509,1510,1508,1637,1636,1637,1508,1509,1507,1636,1635,1636,1507,1508,1506,1635,1634,1635,1506,1507,1505,1634,1633,1634,1505,1506,1504,1633,1632,1633,1504,1505,1503,1632,1631,1632,1503,1504,1502,1631,1630,1631,1502,1503,1501,1630,1629,1630,1501,1502,1500,1629,1628,1629,1500,1501,1499,1628,1627,1628,1499,1500,1498,1627,1626,1627,1498,1499,1497,1626,1625,1626,1497,1498,1496,1625,1624,1625,1496,1497,1495,1624,1623,1624,1495,1496,1494,1623,1622,1623,1494,1495,1493,1622,1621,1622,1493,1494,1492,1621,1620,1621,1492,1493,1491,1620,1619,1620,1491,1492,1490,1619,1618,1619,1490,1491,1489,1618,1617,1618,1489,1490,1488,1617,1616,1617,1488,1489,1487,1616,1615,1616,1487,1488,1486,1615,1614,1615,1486,1487,1485,1614,1613,1614,1485,1486,1484,1613,1612,1613,1484,1485,1483,1612,1611,1612,1483,1484,1482,1611,1610,1611,1482,1483,1481,1610,1609,1610,1481,1482,1480,1609,1608,1609,1480,1481,1479,1608,1607,1608,1479,1480,1478,1607,1606,1607,1478,1479,1477,1606,1605,1606,1477,1478,1476,1605,1604,1605,1476,1477,1475,1604,1603,1604,1475,1476,1474,1603,1602,1603,1474,1475,1473,1602,1601,1602,1473,1474,1472,1601,1600,1601,1472,1473,1471,1600,1599,1600,1471,1472,1470,1599,1598,1599,1470,1471,1469,1598,1597,1598,1469,1470,1468,1597,1596,1597,1468,1469,1467,1596,1595,1596,1467,1468,1466,1595,1594,1595,1466,1467,1465,1594,1593,1594,1465,1466,1464,1593,1592,1593,1464,1465,1463,1592,1591,1592,1463,1464,1462,1591,1590,1591,1462,1463,1461,1590,1589,1590,1461,1462,1460,1589,1588,1589,1460,1461,1459,1588,1587,1588,1459,1460,1458,1587,1586,1587,1458,1459,1457,1586,1585,1586,1457,1458,1456,1585,1584,1585,1456,1457,1455,1584,1583,1584,1455,1456,1454,1583,1582,1583,1454,1455,1453,1582,1581,1582,1453,1454,1452,1581,1580,1581,1452,1453,1451,1580,1579,1580,1451,1452,1450,1579,1578,1579,1450,1451,1449,1578,1577,1578,1449,1450,1448,1577,1576,1577,1448,1449,1447,1576,1575,1576,1447,1448,1446,1575,1574,1575,1446,1447,1445,1574,1573,1574,1445,1446,1444,1573,1572,1573,1444,1445,1443,1572,1571,1572,1443,1444,1442,1571,1570,1571,1442,1443,1441,1570,1569,1570,1441,1442,1440,1569,1568,1569,1440,1441,1439,1568,1567,1568,1439,1440,1438,1567,1566,1567,1438,1439,1437,1566,1565,1566,1437,1438,1436,1565,1564,1565,1436,1437,1435,1564,1563,1564,1435,1436,1434,1563,1562,1563,1434,1435,1433,1562,1561,1562,1433,1434,1432,1561,1560,1561,1432,1433,1431,1560,1559,1560,1431,1432,1430,1559,1558,1559,1430,1431,1429,1558,1557,1558,1429,1430,1428,1557,1556,1557,1428,1429,1427,1556,1555,1556,1427,1428,1426,1555,1554,1555,1426,1427,1425,1554,1553,1554,1425,1426,1424,1553,1552,1553,1424,1425,1423,1552,1551,1552,1423,1424,1422,1551,1550,1551,1422,1423,1421,1550,1549,1550,1421,1422,1420,1549,1548,1549,1420,1421,1419,1548,1547,1548,1419,1420,1418,1547,1546,1547,1418,1419,1417,1546,1545,1546,1417,1418,1416,1545,1544,1545,1416,1417,1415,1544,1543,1544,1415,1416,1414,1543,1542,1543,1414,1415,1413,1542,1541,1542,1413,1414,1412,1541,1540,1541,1412,1413,1411,1540,1539,1540,1411,1412,1410,1539,1538,1539,1410,1411,1409,1538,1537,1538,1409,1410,1408,1537,1536,1537,1408,1409,1662,1791,1790,1791,1662,1663,1661,1790,1789,1790,1661,1662,1660,1789,1788,1789,1660,1661,1659,1788,1787,1788,1659,1660,1658,1787,1786,1787,1658,1659,1657,1786,1785,1786,1657,1658,1656,1785,1784,1785,1656,1657,1655,1784,1783,1784,1655,1656,1654,1783,1782,1783,1654,1655,1653,1782,1781,1782,1653,1654,1652,1781,1780,1781,1652,1653,1651,1780,1779,1780,1651,1652,1650,1779,1778,1779,1650,1651,1649,1778,1777,1778,1649,1650,1648,1777,1776,1777,1648,1649,1647,1776,1775,1776,1647,1648,1646,1775,1774,1775,1646,1647,1645,1774,1773,1774,1645,1646,1644,1773,1772,1773,1644,1645,1643,1772,1771,1772,1643,1644,1642,1771,1770,1771,1642,1643,1641,1770,1769,1770,1641,1642,1640,1769,1768,1769,1640,1641,1639,1768,1767,1768,1639,1640,1638,1767,1766,1767,1638,1639,1637,1766,1765,1766,1637,1638,1636,1765,1764,1765,1636,1637,1635,1764,1763,1764,1635,1636,1634,1763,1762,1763,1634,1635,1633,1762,1761,1762,1633,1634,1632,1761,1760,1761,1632,1633,1631,1760,1759,1760,1631,1632,1630,1759,1758,1759,1630,1631,1629,1758,1757,1758,1629,1630,1628,1757,1756,1757,1628,1629,1627,1756,1755,1756,1627,1628,1626,1755,1754,1755,1626,1627,1625,1754,1753,1754,1625,1626,1624,1753,1752,1753,1624,1625,1623,1752,1751,1752,1623,1624,1622,1751,1750,1751,1622,1623,1621,1750,1749,1750,1621,1622,1620,1749,1748,1749,1620,1621,1619,1748,1747,1748,1619,1620,1618,1747,1746,1747,1618,1619,1617,1746,1745,1746,1617,1618,1616,1745,1744,1745,1616,1617,1615,1744,1743,1744,1615,1616,1614,1743,1742,1743,1614,1615,1613,1742,1741,1742,1613,1614,1612,1741,1740,1741,1612,1613,1611,1740,1739,1740,1611,1612,1610,1739,1738,1739,1610,1611,1609,1738,1737,1738,1609,1610,1608,1737,1736,1737,1608,1609,1607,1736,1735,1736,1607,1608,1606,1735,1734,1735,1606,1607,1605,1734,1733,1734,1605,1606,1604,1733,1732,1733,1604,1605,1603,1732,1731,1732,1603,1604,1602,1731,1730,1731,1602,1603,1601,1730,1729,1730,1601,1602,1600,1729,1728,1729,1600,1601,1599,1728,1727,1728,1599,1600,1598,1727,1726,1727,1598,1599,1597,1726,1725,1726,1597,1598,1596,1725,1724,1725,1596,1597,1595,1724,1723,1724,1595,1596,1594,1723,1722,1723,1594,1595,1593,1722,1721,1722,1593,1594,1592,1721,1720,1721,1592,1593,1591,1720,1719,1720,1591,1592,1590,1719,1718,1719,1590,1591,1589,1718,1717,1718,1589,1590,1588,1717,1716,1717,1588,1589,1587,1716,1715,1716,1587,1588,1586,1715,1714,1715,1586,1587,1585,1714,1713,1714,1585,1586,1584,1713,1712,1713,1584,1585,1583,1712,1711,1712,1583,1584,1582,1711,1710,1711,1582,1583,1581,1710,1709,1710,1581,1582,1580,1709,1708,1709,1580,1581,1579,1708,1707,1708,1579,1580,1578,1707,1706,1707,1578,1579,1577,1706,1705,1706,1577,1578,1576,1705,1704,1705,1576,1577,1575,1704,1703,1704,1575,1576,1574,1703,1702,1703,1574,1575,1573,1702,1701,1702,1573,1574,1572,1701,1700,1701,1572,1573,1571,1700,1699,1700,1571,1572,1570,1699,1698,1699,1570,1571,1569,1698,1697,1698,1569,1570,1568,1697,1696,1697,1568,1569,1567,1696,1695,1696,1567,1568,1566,1695,1694,1695,1566,1567,1565,1694,1693,1694,1565,1566,1564,1693,1692,1693,1564,1565,1563,1692,1691,1692,1563,1564,1562,1691,1690,1691,1562,1563,1561,1690,1689,1690,1561,1562,1560,1689,1688,1689,1560,1561,1559,1688,1687,1688,1559,1560,1558,1687,1686,1687,1558,1559,1557,1686,1685,1686,1557,1558,1556,1685,1684,1685,1556,1557,1555,1684,1683,1684,1555,1556,1554,1683,1682,1683,1554,1555,1553,1682,1681,1682,1553,1554,1552,1681,1680,1681,1552,1553,1551,1680,1679,1680,1551,1552,1550,1679,1678,1679,1550,1551,1549,1678,1677,1678,1549,1550,1548,1677,1676,1677,1548,1549,1547,1676,1675,1676,1547,1548,1546,1675,1674,1675,1546,1547,1545,1674,1673,1674,1545,1546,1544,1673,1672,1673,1544,1545,1543,1672,1671,1672,1543,1544,1542,1671,1670,1671,1542,1543,1541,1670,1669,1670,1541,1542,1540,1669,1668,1669,1540,1541,1539,1668,1667,1668,1539,1540,1538,1667,1666,1667,1538,1539,1537,1666,1665,1666,1537,1538,1536,1665,1664,1665,1536,1537,1790,1919,1918,1919,1790,1791,1789,1918,1917,1918,1789,1790,1788,1917,1916,1917,1788,1789,1787,1916,1915,1916,1787,1788,1786,1915,1914,1915,1786,1787,1785,1914,1913,1914,1785,1786,1784,1913,1912,1913,1784,1785,1783,1912,1911,1912,1783,1784,1782,1911,1910,1911,1782,1783,1781,1910,1909,1910,1781,1782,1780,1909,1908,1909,1780,1781,1779,1908,1907,1908,1779,1780,1778,1907,1906,1907,1778,1779,1777,1906,1905,1906,1777,1778,1776,1905,1904,1905,1776,1777,1775,1904,1903,1904,1775,1776,1774,1903,1902,1903,1774,1775,1773,1902,1901,1902,1773,1774,1772,1901,1900,1901,1772,1773,1771,1900,1899,1900,1771,1772,1770,1899,1898,1899,1770,1771,1769,1898,1897,1898,1769,1770,1768,1897,1896,1897,1768,1769,1767,1896,1895,1896,1767,1768,1766,1895,1894,1895,1766,1767,1765,1894,1893,1894,1765,1766,1764,1893,1892,1893,1764,1765,1763,1892,1891,1892,1763,1764,1762,1891,1890,1891,1762,1763,1761,1890,1889,1890,1761,1762,1760,1889,1888,1889,1760,1761,1759,1888,1887,1888,1759,1760,1758,1887,1886,1887,1758,1759,1757,1886,1885,1886,1757,1758,1756,1885,1884,1885,1756,1757,1755,1884,1883,1884,1755,1756,1754,1883,1882,1883,1754,1755,1753,1882,1881,1882,1753,1754,1752,1881,1880,1881,1752,1753,1751,1880,1879,1880,1751,1752,1750,1879,1878,1879,1750,1751,1749,1878,1877,1878,1749,1750,1748,1877,1876,1877,1748,1749,1747,1876,1875,1876,1747,1748,1746,1875,1874,1875,1746,1747,1745,1874,1873,1874,1745,1746,1744,1873,1872,1873,1744,1745,1743,1872,1871,1872,1743,1744,1742,1871,1870,1871,1742,1743,1741,1870,1869,1870,1741,1742,1740,1869,1868,1869,1740,1741,1739,1868,1867,1868,1739,1740,1738,1867,1866,1867,1738,1739,1737,1866,1865,1866,1737,1738,1736,1865,1864,1865,1736,1737,1735,1864,1863,1864,1735,1736,1734,1863,1862,1863,1734,1735,1733,1862,1861,1862,1733,1734,1732,1861,1860,1861,1732,1733,1731,1860,1859,1860,1731,1732,1730,1859,1858,1859,1730,1731,1729,1858,1857,1858,1729,1730,1728,1857,1856,1857,1728,1729,1727,1856,1855,1856,1727,1728,1726,1855,1854,1855,1726,1727,1725,1854,1853,1854,1725,1726,1724,1853,1852,1853,1724,1725,1723,1852,1851,1852,1723,1724,1722,1851,1850,1851,1722,1723,1721,1850,1849,1850,1721,1722,1720,1849,1848,1849,1720,1721,1719,1848,1847,1848,1719,1720,1718,1847,1846,1847,1718,1719,1717,1846,1845,1846,1717,1718,1716,1845,1844,1845,1716,1717,1715,1844,1843,1844,1715,1716,1714,1843,1842,1843,1714,1715,1713,1842,1841,1842,1713,1714,1712,1841,1840,1841,1712,1713,1711,1840,1839,1840,1711,1712,1710,1839,1838,1839,1710,1711,1709,1838,1837,1838,1709,1710,1708,1837,1836,1837,1708,1709,1707,1836,1835,1836,1707,1708,1706,1835,1834,1835,1706,1707,1705,1834,1833,1834,1705,1706,1704,1833,1832,1833,1704,1705,1703,1832,1831,1832,1703,1704,1702,1831,1830,1831,1702,1703,1701,1830,1829,1830,1701,1702,1700,1829,1828,1829,1700,1701,1699,1828,1827,1828,1699,1700,1698,1827,1826,1827,1698,1699,1697,1826,1825,1826,1697,1698,1696,1825,1824,1825,1696,1697,1695,1824,1823,1824,1695,1696,1694,1823,1822,1823,1694,1695,1693,1822,1821,1822,1693,1694,1692,1821,1820,1821,1692,1693,1691,1820,1819,1820,1691,1692,1690,1819,1818,1819,1690,1691,1689,1818,1817,1818,1689,1690,1688,1817,1816,1817,1688,1689,1687,1816,1815,1816,1687,1688,1686,1815,1814,1815,1686,1687,1685,1814,1813,1814,1685,1686,1684,1813,1812,1813,1684,1685,1683,1812,1811,1812,1683,1684,1682,1811,1810,1811,1682,1683,1681,1810,1809,1810,1681,1682,1680,1809,1808,1809,1680,1681,1679,1808,1807,1808,1679,1680,1678,1807,1806,1807,1678,1679,1677,1806,1805,1806,1677,1678,1676,1805,1804,1805,1676,1677,1675,1804,1803,1804,1675,1676,1674,1803,1802,1803,1674,1675,1673,1802,1801,1802,1673,1674,1672,1801,1800,1801,1672,1673,1671,1800,1799,1800,1671,1672,1670,1799,1798,1799,1670,1671,1669,1798,1797,1798,1669,1670,1668,1797,1796,1797,1668,1669,1667,1796,1795,1796,1667,1668,1666,1795,1794,1795,1666,1667,1665,1794,1793,1794,1665,1666,1664,1793,1792,1793,1664,1665,1918,2047,2046,2047,1918,1919,1917,2046,2045,2046,1917,1918,1916,2045,2044,2045,1916,1917,1915,2044,2043,2044,1915,1916,1914,2043,2042,2043,1914,1915,1913,2042,2041,2042,1913,1914,1912,2041,2040,2041,1912,1913,1911,2040,2039,2040,1911,1912,1910,2039,2038,2039,1910,1911,1909,2038,2037,2038,1909,1910,1908,2037,2036,2037,1908,1909,1907,2036,2035,2036,1907,1908,1906,2035,2034,2035,1906,1907,1905,2034,2033,2034,1905,1906,1904,2033,2032,2033,1904,1905,1903,2032,2031,2032,1903,1904,1902,2031,2030,2031,1902,1903,1901,2030,2029,2030,1901,1902,1900,2029,2028,2029,1900,1901,1899,2028,2027,2028,1899,1900,1898,2027,2026,2027,1898,1899,1897,2026,2025,2026,1897,1898,1896,2025,2024,2025,1896,1897,1895,2024,2023,2024,1895,1896,1894,2023,2022,2023,1894,1895,1893,2022,2021,2022,1893,1894,1892,2021,2020,2021,1892,1893,1891,2020,2019,2020,1891,1892,1890,2019,2018,2019,1890,1891,1889,2018,2017,2018,1889,1890,1888,2017,2016,2017,1888,1889,1887,2016,2015,2016,1887,1888,1886,2015,2014,2015,1886,1887,1885,2014,2013,2014,1885,1886,1884,2013,2012,2013,1884,1885,1883,2012,2011,2012,1883,1884,1882,2011,2010,2011,1882,1883,1881,2010,2009,2010,1881,1882,1880,2009,2008,2009,1880,1881,1879,2008,2007,2008,1879,1880,1878,2007,2006,2007,1878,1879,1877,2006,2005,2006,1877,1878,1876,2005,2004,2005,1876,1877,1875,2004,2003,2004,1875,1876,1874,2003,2002,2003,1874,1875,1873,2002,2001,2002,1873,1874,1872,2001,2000,2001,1872,1873,1871,2000,1999,2000,1871,1872,1870,1999,1998,1999,1870,1871,1869,1998,1997,1998,1869,1870,1868,1997,1996,1997,1868,1869,1867,1996,1995,1996,1867,1868,1866,1995,1994,1995,1866,1867,1865,1994,1993,1994,1865,1866,1864,1993,1992,1993,1864,1865,1863,1992,1991,1992,1863,1864,1862,1991,1990,1991,1862,1863,1861,1990,1989,1990,1861,1862,1860,1989,1988,1989,1860,1861,1859,1988,1987,1988,1859,1860,1858,1987,1986,1987,1858,1859,1857,1986,1985,1986,1857,1858,1856,1985,1984,1985,1856,1857,1855,1984,1983,1984,1855,1856,1854,1983,1982,1983,1854,1855,1853,1982,1981,1982,1853,1854,1852,1981,1980,1981,1852,1853,1851,1980,1979,1980,1851,1852,1850,1979,1978,1979,1850,1851,1849,1978,1977,1978,1849,1850,1848,1977,1976,1977,1848,1849,1847,1976,1975,1976,1847,1848,1846,1975,1974,1975,1846,1847,1845,1974,1973,1974,1845,1846,1844,1973,1972,1973,1844,1845,1843,1972,1971,1972,1843,1844,1842,1971,1970,1971,1842,1843,1841,1970,1969,1970,1841,1842,1840,1969,1968,1969,1840,1841,1839,1968,1967,1968,1839,1840,1838,1967,1966,1967,1838,1839,1837,1966,1965,1966,1837,1838,1836,1965,1964,1965,1836,1837,1835,1964,1963,1964,1835,1836,1834,1963,1962,1963,1834,1835,1833,1962,1961,1962,1833,1834,1832,1961,1960,1961,1832,1833,1831,1960,1959,1960,1831,1832,1830,1959,1958,1959,1830,1831,1829,1958,1957,1958,1829,1830,1828,1957,1956,1957,1828,1829,1827,1956,1955,1956,1827,1828,1826,1955,1954,1955,1826,1827,1825,1954,1953,1954,1825,1826,1824,1953,1952,1953,1824,1825,1823,1952,1951,1952,1823,1824,1822,1951,1950,1951,1822,1823,1821,1950,1949,1950,1821,1822,1820,1949,1948,1949,1820,1821,1819,1948,1947,1948,1819,1820,1818,1947,1946,1947,1818,1819,1817,1946,1945,1946,1817,1818,1816,1945,1944,1945,1816,1817,1815,1944,1943,1944,1815,1816,1814,1943,1942,1943,1814,1815,1813,1942,1941,1942,1813,1814,1812,1941,1940,1941,1812,1813,1811,1940,1939,1940,1811,1812,1810,1939,1938,1939,1810,1811,1809,1938,1937,1938,1809,1810,1808,1937,1936,1937,1808,1809,1807,1936,1935,1936,1807,1808,1806,1935,1934,1935,1806,1807,1805,1934,1933,1934,1805,1806,1804,1933,1932,1933,1804,1805,1803,1932,1931,1932,1803,1804,1802,1931,1930,1931,1802,1803,1801,1930,1929,1930,1801,1802,1800,1929,1928,1929,1800,1801,1799,1928,1927,1928,1799,1800,1798,1927,1926,1927,1798,1799,1797,1926,1925,1926,1797,1798,1796,1925,1924,1925,1796,1797,1795,1924,1923,1924,1795,1796,1794,1923,1922,1923,1794,1795,1793,1922,1921,1922,1793,1794,1792,1921,1920,1921,1792,1793,2046,2175,2174,2175,2046,2047,2045,2174,2173,2174,2045,2046,2044,2173,2172,2173,2044,2045,2043,2172,2171,2172,2043,2044,2042,2171,2170,2171,2042,2043,2041,2170,2169,2170,2041,2042,2040,2169,2168,2169,2040,2041,2039,2168,2167,2168,2039,2040,2038,2167,2166,2167,2038,2039,2037,2166,2165,2166,2037,2038,2036,2165,2164,2165,2036,2037,2035,2164,2163,2164,2035,2036,2034,2163,2162,2163,2034,2035,2033,2162,2161,2162,2033,2034,2032,2161,2160,2161,2032,2033,2031,2160,2159,2160,2031,2032,2030,2159,2158,2159,2030,2031,2029,2158,2157,2158,2029,2030,2028,2157,2156,2157,2028,2029,2027,2156,2155,2156,2027,2028,2026,2155,2154,2155,2026,2027,2025,2154,2153,2154,2025,2026,2024,2153,2152,2153,2024,2025,2023,2152,2151,2152,2023,2024,2022,2151,2150,2151,2022,2023,2021,2150,2149,2150,2021,2022,2020,2149,2148,2149,2020,2021,2019,2148,2147,2148,2019,2020,2018,2147,2146,2147,2018,2019,2017,2146,2145,2146,2017,2018,2016,2145,2144,2145,2016,2017,2015,2144,2143,2144,2015,2016,2014,2143,2142,2143,2014,2015,2013,2142,2141,2142,2013,2014,2012,2141,2140,2141,2012,2013,2011,2140,2139,2140,2011,2012,2010,2139,2138,2139,2010,2011,2009,2138,2137,2138,2009,2010,2008,2137,2136,2137,2008,2009,2007,2136,2135,2136,2007,2008,2006,2135,2134,2135,2006,2007,2005,2134,2133,2134,2005,2006,2004,2133,2132,2133,2004,2005,2003,2132,2131,2132,2003,2004,2002,2131,2130,2131,2002,2003,2001,2130,2129,2130,2001,2002,2000,2129,2128,2129,2000,2001,1999,2128,2127,2128,1999,2000,1998,2127,2126,2127,1998,1999,1997,2126,2125,2126,1997,1998,1996,2125,2124,2125,1996,1997,1995,2124,2123,2124,1995,1996,1994,2123,2122,2123,1994,1995,1993,2122,2121,2122,1993,1994,1992,2121,2120,2121,1992,1993,1991,2120,2119,2120,1991,1992,1990,2119,2118,2119,1990,1991,1989,2118,2117,2118,1989,1990,1988,2117,2116,2117,1988,1989,1987,2116,2115,2116,1987,1988,1986,2115,2114,2115,1986,1987,1985,2114,2113,2114,1985,1986,1984,2113,2112,2113,1984,1985,1983,2112,2111,2112,1983,1984,1982,2111,2110,2111,1982,1983,1981,2110,2109,2110,1981,1982,1980,2109,2108,2109,1980,1981,1979,2108,2107,2108,1979,1980,1978,2107,2106,2107,1978,1979,1977,2106,2105,2106,1977,1978,1976,2105,2104,2105,1976,1977,1975,2104,2103,2104,1975,1976,1974,2103,2102,2103,1974,1975,1973,2102,2101,2102,1973,1974,1972,2101,2100,2101,1972,1973,1971,2100,2099,2100,1971,1972,1970,2099,2098,2099,1970,1971,1969,2098,2097,2098,1969,1970,1968,2097,2096,2097,1968,1969,1967,2096,2095,2096,1967,1968,1966,2095,2094,2095,1966,1967,1965,2094,2093,2094,1965,1966,1964,2093,2092,2093,1964,1965,1963,2092,2091,2092,1963,1964,1962,2091,2090,2091,1962,1963,1961,2090,2089,2090,1961,1962,1960,2089,2088,2089,1960,1961,1959,2088,2087,2088,1959,1960,1958,2087,2086,2087,1958,1959,1957,2086,2085,2086,1957,1958,1956,2085,2084,2085,1956,1957,1955,2084,2083,2084,1955,1956,1954,2083,2082,2083,1954,1955,1953,2082,2081,2082,1953,1954,1952,2081,2080,2081,1952,1953,1951,2080,2079,2080,1951,1952,1950,2079,2078,2079,1950,1951,1949,2078,2077,2078,1949,1950,1948,2077,2076,2077,1948,1949,1947,2076,2075,2076,1947,1948,1946,2075,2074,2075,1946,1947,1945,2074,2073,2074,1945,1946,1944,2073,2072,2073,1944,1945,1943,2072,2071,2072,1943,1944,1942,2071,2070,2071,1942,1943,1941,2070,2069,2070,1941,1942,1940,2069,2068,2069,1940,1941,1939,2068,2067,2068,1939,1940,1938,2067,2066,2067,1938,1939,1937,2066,2065,2066,1937,1938,1936,2065,2064,2065,1936,1937,1935,2064,2063,2064,1935,1936,1934,2063,2062,2063,1934,1935,1933,2062,2061,2062,1933,1934,1932,2061,2060,2061,1932,1933,1931,2060,2059,2060,1931,1932,1930,2059,2058,2059,1930,1931,1929,2058,2057,2058,1929,1930,1928,2057,2056,2057,1928,1929,1927,2056,2055,2056,1927,1928,1926,2055,2054,2055,1926,1927,1925,2054,2053,2054,1925,1926,1924,2053,2052,2053,1924,1925,1923,2052,2051,2052,1923,1924,1922,2051,2050,2051,1922,1923,1921,2050,2049,2050,1921,1922,1920,2049,2048,2049,1920,1921,2174,2303,2302,2303,2174,2175,2173,2302,2301,2302,2173,2174,2172,2301,2300,2301,2172,2173,2171,2300,2299,2300,2171,2172,2170,2299,2298,2299,2170,2171,2169,2298,2297,2298,2169,2170,2168,2297,2296,2297,2168,2169,2167,2296,2295,2296,2167,2168,2166,2295,2294,2295,2166,2167,2165,2294,2293,2294,2165,2166,2164,2293,2292,2293,2164,2165,2163,2292,2291,2292,2163,2164,2162,2291,2290,2291,2162,2163,2161,2290,2289,2290,2161,2162,2160,2289,2288,2289,2160,2161,2159,2288,2287,2288,2159,2160,2158,2287,2286,2287,2158,2159,2157,2286,2285,2286,2157,2158,2156,2285,2284,2285,2156,2157,2155,2284,2283,2284,2155,2156,2154,2283,2282,2283,2154,2155,2153,2282,2281,2282,2153,2154,2152,2281,2280,2281,2152,2153,2151,2280,2279,2280,2151,2152,2150,2279,2278,2279,2150,2151,2149,2278,2277,2278,2149,2150,2148,2277,2276,2277,2148,2149,2147,2276,2275,2276,2147,2148,2146,2275,2274,2275,2146,2147,2145,2274,2273,2274,2145,2146,2144,2273,2272,2273,2144,2145,2143,2272,2271,2272,2143,2144,2142,2271,2270,2271,2142,2143,2141,2270,2269,2270,2141,2142,2140,2269,2268,2269,2140,2141,2139,2268,2267,2268,2139,2140,2138,2267,2266,2267,2138,2139,2137,2266,2265,2266,2137,2138,2136,2265,2264,2265,2136,2137,2135,2264,2263,2264,2135,2136,2134,2263,2262,2263,2134,2135,2133,2262,2261,2262,2133,2134,2132,2261,2260,2261,2132,2133,2131,2260,2259,2260,2131,2132,2130,2259,2258,2259,2130,2131,2129,2258,2257,2258,2129,2130,2128,2257,2256,2257,2128,2129,2127,2256,2255,2256,2127,2128,2126,2255,2254,2255,2126,2127,2125,2254,2253,2254,2125,2126,2124,2253,2252,2253,2124,2125,2123,2252,2251,2252,2123,2124,2122,2251,2250,2251,2122,2123,2121,2250,2249,2250,2121,2122,2120,2249,2248,2249,2120,2121,2119,2248,2247,2248,2119,2120,2118,2247,2246,2247,2118,2119,2117,2246,2245,2246,2117,2118,2116,2245,2244,2245,2116,2117,2115,2244,2243,2244,2115,2116,2114,2243,2242,2243,2114,2115,2113,2242,2241,2242,2113,2114,2112,2241,2240,2241,2112,2113,2111,2240,2239,2240,2111,2112,2110,2239,2238,2239,2110,2111,2109,2238,2237,2238,2109,2110,2108,2237,2236,2237,2108,2109,2107,2236,2235,2236,2107,2108,2106,2235,2234,2235,2106,2107,2105,2234,2233,2234,2105,2106,2104,2233,2232,2233,2104,2105,2103,2232,2231,2232,2103,2104,2102,2231,2230,2231,2102,2103,2101,2230,2229,2230,2101,2102,2100,2229,2228,2229,2100,2101,2099,2228,2227,2228,2099,2100,2098,2227,2226,2227,2098,2099,2097,2226,2225,2226,2097,2098,2096,2225,2224,2225,2096,2097,2095,2224,2223,2224,2095,2096,2094,2223,2222,2223,2094,2095,2093,2222,2221,2222,2093,2094,2092,2221,2220,2221,2092,2093,2091,2220,2219,2220,2091,2092,2090,2219,2218,2219,2090,2091,2089,2218,2217,2218,2089,2090,2088,2217,2216,2217,2088,2089,2087,2216,2215,2216,2087,2088,2086,2215,2214,2215,2086,2087,2085,2214,2213,2214,2085,2086,2084,2213,2212,2213,2084,2085,2083,2212,2211,2212,2083,2084,2082,2211,2210,2211,2082,2083,2081,2210,2209,2210,2081,2082,2080,2209,2208,2209,2080,2081,2079,2208,2207,2208,2079,2080,2078,2207,2206,2207,2078,2079,2077,2206,2205,2206,2077,2078,2076,2205,2204,2205,2076,2077,2075,2204,2203,2204,2075,2076,2074,2203,2202,2203,2074,2075,2073,2202,2201,2202,2073,2074,2072,2201,2200,2201,2072,2073,2071,2200,2199,2200,2071,2072,2070,2199,2198,2199,2070,2071,2069,2198,2197,2198,2069,2070,2068,2197,2196,2197,2068,2069,2067,2196,2195,2196,2067,2068,2066,2195,2194,2195,2066,2067,2065,2194,2193,2194,2065,2066,2064,2193,2192,2193,2064,2065,2063,2192,2191,2192,2063,2064,2062,2191,2190,2191,2062,2063,2061,2190,2189,2190,2061,2062,2060,2189,2188,2189,2060,2061,2059,2188,2187,2188,2059,2060,2058,2187,2186,2187,2058,2059,2057,2186,2185,2186,2057,2058,2056,2185,2184,2185,2056,2057,2055,2184,2183,2184,2055,2056,2054,2183,2182,2183,2054,2055,2053,2182,2181,2182,2053,2054,2052,2181,2180,2181,2052,2053,2051,2180,2179,2180,2051,2052,2050,2179,2178,2179,2050,2051,2049,2178,2177,2178,2049,2050,2048,2177,2176,2177,2048,2049,2302,2431,2430,2431,2302,2303,2301,2430,2429,2430,2301,2302,2300,2429,2428,2429,2300,2301,2299,2428,2427,2428,2299,2300,2298,2427,2426,2427,2298,2299,2297,2426,2425,2426,2297,2298,2296,2425,2424,2425,2296,2297,2295,2424,2423,2424,2295,2296,2294,2423,2422,2423,2294,2295,2293,2422,2421,2422,2293,2294,2292,2421,2420,2421,2292,2293,2291,2420,2419,2420,2291,2292,2290,2419,2418,2419,2290,2291,2289,2418,2417,2418,2289,2290,2288,2417,2416,2417,2288,2289,2287,2416,2415,2416,2287,2288,2286,2415,2414,2415,2286,2287,2285,2414,2413,2414,2285,2286,2284,2413,2412,2413,2284,2285,2283,2412,2411,2412,2283,2284,2282,2411,2410,2411,2282,2283,2281,2410,2409,2410,2281,2282,2280,2409,2408,2409,2280,2281,2279,2408,2407,2408,2279,2280,2278,2407,2406,2407,2278,2279,2277,2406,2405,2406,2277,2278,2276,2405,2404,2405,2276,2277,2275,2404,2403,2404,2275,2276,2274,2403,2402,2403,2274,2275,2273,2402,2401,2402,2273,2274,2272,2401,2400,2401,2272,2273,2271,2400,2399,2400,2271,2272,2270,2399,2398,2399,2270,2271,2269,2398,2397,2398,2269,2270,2268,2397,2396,2397,2268,2269,2267,2396,2395,2396,2267,2268,2266,2395,2394,2395,2266,2267,2265,2394,2393,2394,2265,2266,2264,2393,2392,2393,2264,2265,2263,2392,2391,2392,2263,2264,2262,2391,2390,2391,2262,2263,2261,2390,2389,2390,2261,2262,2260,2389,2388,2389,2260,2261,2259,2388,2387,2388,2259,2260,2258,2387,2386,2387,2258,2259,2257,2386,2385,2386,2257,2258,2256,2385,2384,2385,2256,2257,2255,2384,2383,2384,2255,2256,2254,2383,2382,2383,2254,2255,2253,2382,2381,2382,2253,2254,2252,2381,2380,2381,2252,2253,2251,2380,2379,2380,2251,2252,2250,2379,2378,2379,2250,2251,2249,2378,2377,2378,2249,2250,2248,2377,2376,2377,2248,2249,2247,2376,2375,2376,2247,2248,2246,2375,2374,2375,2246,2247,2245,2374,2373,2374,2245,2246,2244,2373,2372,2373,2244,2245,2243,2372,2371,2372,2243,2244,2242,2371,2370,2371,2242,2243,2241,2370,2369,2370,2241,2242,2240,2369,2368,2369,2240,2241,2239,2368,2367,2368,2239,2240,2238,2367,2366,2367,2238,2239,2237,2366,2365,2366,2237,2238,2236,2365,2364,2365,2236,2237,2235,2364,2363,2364,2235,2236,2234,2363,2362,2363,2234,2235,2233,2362,2361,2362,2233,2234,2232,2361,2360,2361,2232,2233,2231,2360,2359,2360,2231,2232,2230,2359,2358,2359,2230,2231,2229,2358,2357,2358,2229,2230,2228,2357,2356,2357,2228,2229,2227,2356,2355,2356,2227,2228,2226,2355,2354,2355,2226,2227,2225,2354,2353,2354,2225,2226,2224,2353,2352,2353,2224,2225,2223,2352,2351,2352,2223,2224,2222,2351,2350,2351,2222,2223,2221,2350,2349,2350,2221,2222,2220,2349,2348,2349,2220,2221,2219,2348,2347,2348,2219,2220,2218,2347,2346,2347,2218,2219,2217,2346,2345,2346,2217,2218,2216,2345,2344,2345,2216,2217,2215,2344,2343,2344,2215,2216,2214,2343,2342,2343,2214,2215,2213,2342,2341,2342,2213,2214,2212,2341,2340,2341,2212,2213,2211,2340,2339,2340,2211,2212,2210,2339,2338,2339,2210,2211,2209,2338,2337,2338,2209,2210,2208,2337,2336,2337,2208,2209,2207,2336,2335,2336,2207,2208,2206,2335,2334,2335,2206,2207,2205,2334,2333,2334,2205,2206,2204,2333,2332,2333,2204,2205,2203,2332,2331,2332,2203,2204,2202,2331,2330,2331,2202,2203,2201,2330,2329,2330,2201,2202,2200,2329,2328,2329,2200,2201,2199,2328,2327,2328,2199,2200,2198,2327,2326,2327,2198,2199,2197,2326,2325,2326,2197,2198,2196,2325,2324,2325,2196,2197,2195,2324,2323,2324,2195,2196,2194,2323,2322,2323,2194,2195,2193,2322,2321,2322,2193,2194,2192,2321,2320,2321,2192,2193,2191,2320,2319,2320,2191,2192,2190,2319,2318,2319,2190,2191,2189,2318,2317,2318,2189,2190,2188,2317,2316,2317,2188,2189,2187,2316,2315,2316,2187,2188,2186,2315,2314,2315,2186,2187,2185,2314,2313,2314,2185,2186,2184,2313,2312,2313,2184,2185,2183,2312,2311,2312,2183,2184,2182,2311,2310,2311,2182,2183,2181,2310,2309,2310,2181,2182,2180,2309,2308,2309,2180,2181,2179,2308,2307,2308,2179,2180,2178,2307,2306,2307,2178,2179,2177,2306,2305,2306,2177,2178,2176,2305,2304,2305,2176,2177,2430,2559,2558,2559,2430,2431,2429,2558,2557,2558,2429,2430,2428,2557,2556,2557,2428,2429,2427,2556,2555,2556,2427,2428,2426,2555,2554,2555,2426,2427,2425,2554,2553,2554,2425,2426,2424,2553,2552,2553,2424,2425,2423,2552,2551,2552,2423,2424,2422,2551,2550,2551,2422,2423,2421,2550,2549,2550,2421,2422,2420,2549,2548,2549,2420,2421,2419,2548,2547,2548,2419,2420,2418,2547,2546,2547,2418,2419,2417,2546,2545,2546,2417,2418,2416,2545,2544,2545,2416,2417,2415,2544,2543,2544,2415,2416,2414,2543,2542,2543,2414,2415,2413,2542,2541,2542,2413,2414,2412,2541,2540,2541,2412,2413,2411,2540,2539,2540,2411,2412,2410,2539,2538,2539,2410,2411,2409,2538,2537,2538,2409,2410,2408,2537,2536,2537,2408,2409,2407,2536,2535,2536,2407,2408,2406,2535,2534,2535,2406,2407,2405,2534,2533,2534,2405,2406,2404,2533,2532,2533,2404,2405,2403,2532,2531,2532,2403,2404,2402,2531,2530,2531,2402,2403,2401,2530,2529,2530,2401,2402,2400,2529,2528,2529,2400,2401,2399,2528,2527,2528,2399,2400,2398,2527,2526,2527,2398,2399,2397,2526,2525,2526,2397,2398,2396,2525,2524,2525,2396,2397,2395,2524,2523,2524,2395,2396,2394,2523,2522,2523,2394,2395,2393,2522,2521,2522,2393,2394,2392,2521,2520,2521,2392,2393,2391,2520,2519,2520,2391,2392,2390,2519,2518,2519,2390,2391,2389,2518,2517,2518,2389,2390,2388,2517,2516,2517,2388,2389,2387,2516,2515,2516,2387,2388,2386,2515,2514,2515,2386,2387,2385,2514,2513,2514,2385,2386,2384,2513,2512,2513,2384,2385,2383,2512,2511,2512,2383,2384,2382,2511,2510,2511,2382,2383,2381,2510,2509,2510,2381,2382,2380,2509,2508,2509,2380,2381,2379,2508,2507,2508,2379,2380,2378,2507,2506,2507,2378,2379,2377,2506,2505,2506,2377,2378,2376,2505,2504,2505,2376,2377,2375,2504,2503,2504,2375,2376,2374,2503,2502,2503,2374,2375,2373,2502,2501,2502,2373,2374,2372,2501,2500,2501,2372,2373,2371,2500,2499,2500,2371,2372,2370,2499,2498,2499,2370,2371,2369,2498,2497,2498,2369,2370,2368,2497,2496,2497,2368,2369,2367,2496,2495,2496,2367,2368,2366,2495,2494,2495,2366,2367,2365,2494,2493,2494,2365,2366,2364,2493,2492,2493,2364,2365,2363,2492,2491,2492,2363,2364,2362,2491,2490,2491,2362,2363,2361,2490,2489,2490,2361,2362,2360,2489,2488,2489,2360,2361,2359,2488,2487,2488,2359,2360,2358,2487,2486,2487,2358,2359,2357,2486,2485,2486,2357,2358,2356,2485,2484,2485,2356,2357,2355,2484,2483,2484,2355,2356,2354,2483,2482,2483,2354,2355,2353,2482,2481,2482,2353,2354,2352,2481,2480,2481,2352,2353,2351,2480,2479,2480,2351,2352,2350,2479,2478,2479,2350,2351,2349,2478,2477,2478,2349,2350,2348,2477,2476,2477,2348,2349,2347,2476,2475,2476,2347,2348,2346,2475,2474,2475,2346,2347,2345,2474,2473,2474,2345,2346,2344,2473,2472,2473,2344,2345,2343,2472,2471,2472,2343,2344,2342,2471,2470,2471,2342,2343,2341,2470,2469,2470,2341,2342,2340,2469,2468,2469,2340,2341,2339,2468,2467,2468,2339,2340,2338,2467,2466,2467,2338,2339,2337,2466,2465,2466,2337,2338,2336,2465,2464,2465,2336,2337,2335,2464,2463,2464,2335,2336,2334,2463,2462,2463,2334,2335,2333,2462,2461,2462,2333,2334,2332,2461,2460,2461,2332,2333,2331,2460,2459,2460,2331,2332,2330,2459,2458,2459,2330,2331,2329,2458,2457,2458,2329,2330,2328,2457,2456,2457,2328,2329,2327,2456,2455,2456,2327,2328,2326,2455,2454,2455,2326,2327,2325,2454,2453,2454,2325,2326,2324,2453,2452,2453,2324,2325,2323,2452,2451,2452,2323,2324,2322,2451,2450,2451,2322,2323,2321,2450,2449,2450,2321,2322,2320,2449,2448,2449,2320,2321,2319,2448,2447,2448,2319,2320,2318,2447,2446,2447,2318,2319,2317,2446,2445,2446,2317,2318,2316,2445,2444,2445,2316,2317,2315,2444,2443,2444,2315,2316,2314,2443,2442,2443,2314,2315,2313,2442,2441,2442,2313,2314,2312,2441,2440,2441,2312,2313,2311,2440,2439,2440,2311,2312,2310,2439,2438,2439,2310,2311,2309,2438,2437,2438,2309,2310,2308,2437,2436,2437,2308,2309,2307,2436,2435,2436,2307,2308,2306,2435,2434,2435,2306,2307,2305,2434,2433,2434,2305,2306,2304,2433,2432,2433,2304,2305,2558,2687,2686,2687,2558,2559,2557,2686,2685,2686,2557,2558,2556,2685,2684,2685,2556,2557,2555,2684,2683,2684,2555,2556,2554,2683,2682,2683,2554,2555,2553,2682,2681,2682,2553,2554,2552,2681,2680,2681,2552,2553,2551,2680,2679,2680,2551,2552,2550,2679,2678,2679,2550,2551,2549,2678,2677,2678,2549,2550,2548,2677,2676,2677,2548,2549,2547,2676,2675,2676,2547,2548,2546,2675,2674,2675,2546,2547,2545,2674,2673,2674,2545,2546,2544,2673,2672,2673,2544,2545,2543,2672,2671,2672,2543,2544,2542,2671,2670,2671,2542,2543,2541,2670,2669,2670,2541,2542,2540,2669,2668,2669,2540,2541,2539,2668,2667,2668,2539,2540,2538,2667,2666,2667,2538,2539,2537,2666,2665,2666,2537,2538,2536,2665,2664,2665,2536,2537,2535,2664,2663,2664,2535,2536,2534,2663,2662,2663,2534,2535,2533,2662,2661,2662,2533,2534,2532,2661,2660,2661,2532,2533,2531,2660,2659,2660,2531,2532,2530,2659,2658,2659,2530,2531,2529,2658,2657,2658,2529,2530,2528,2657,2656,2657,2528,2529,2527,2656,2655,2656,2527,2528,2526,2655,2654,2655,2526,2527,2525,2654,2653,2654,2525,2526,2524,2653,2652,2653,2524,2525,2523,2652,2651,2652,2523,2524,2522,2651,2650,2651,2522,2523,2521,2650,2649,2650,2521,2522,2520,2649,2648,2649,2520,2521,2519,2648,2647,2648,2519,2520,2518,2647,2646,2647,2518,2519,2517,2646,2645,2646,2517,2518,2516,2645,2644,2645,2516,2517,2515,2644,2643,2644,2515,2516,2514,2643,2642,2643,2514,2515,2513,2642,2641,2642,2513,2514,2512,2641,2640,2641,2512,2513,2511,2640,2639,2640,2511,2512,2510,2639,2638,2639,2510,2511,2509,2638,2637,2638,2509,2510,2508,2637,2636,2637,2508,2509,2507,2636,2635,2636,2507,2508,2506,2635,2634,2635,2506,2507,2505,2634,2633,2634,2505,2506,2504,2633,2632,2633,2504,2505,2503,2632,2631,2632,2503,2504,2502,2631,2630,2631,2502,2503,2501,2630,2629,2630,2501,2502,2500,2629,2628,2629,2500,2501,2499,2628,2627,2628,2499,2500,2498,2627,2626,2627,2498,2499,2497,2626,2625,2626,2497,2498,2496,2625,2624,2625,2496,2497,2495,2624,2623,2624,2495,2496,2494,2623,2622,2623,2494,2495,2493,2622,2621,2622,2493,2494,2492,2621,2620,2621,2492,2493,2491,2620,2619,2620,2491,2492,2490,2619,2618,2619,2490,2491,2489,2618,2617,2618,2489,2490,2488,2617,2616,2617,2488,2489,2487,2616,2615,2616,2487,2488,2486,2615,2614,2615,2486,2487,2485,2614,2613,2614,2485,2486,2484,2613,2612,2613,2484,2485,2483,2612,2611,2612,2483,2484,2482,2611,2610,2611,2482,2483,2481,2610,2609,2610,2481,2482,2480,2609,2608,2609,2480,2481,2479,2608,2607,2608,2479,2480,2478,2607,2606,2607,2478,2479,2477,2606,2605,2606,2477,2478,2476,2605,2604,2605,2476,2477,2475,2604,2603,2604,2475,2476,2474,2603,2602,2603,2474,2475,2473,2602,2601,2602,2473,2474,2472,2601,2600,2601,2472,2473,2471,2600,2599,2600,2471,2472,2470,2599,2598,2599,2470,2471,2469,2598,2597,2598,2469,2470,2468,2597,2596,2597,2468,2469,2467,2596,2595,2596,2467,2468,2466,2595,2594,2595,2466,2467,2465,2594,2593,2594,2465,2466,2464,2593,2592,2593,2464,2465,2463,2592,2591,2592,2463,2464,2462,2591,2590,2591,2462,2463,2461,2590,2589,2590,2461,2462,2460,2589,2588,2589,2460,2461,2459,2588,2587,2588,2459,2460,2458,2587,2586,2587,2458,2459,2457,2586,2585,2586,2457,2458,2456,2585,2584,2585,2456,2457,2455,2584,2583,2584,2455,2456,2454,2583,2582,2583,2454,2455,2453,2582,2581,2582,2453,2454,2452,2581,2580,2581,2452,2453,2451,2580,2579,2580,2451,2452,2450,2579,2578,2579,2450,2451,2449,2578,2577,2578,2449,2450,2448,2577,2576,2577,2448,2449,2447,2576,2575,2576,2447,2448,2446,2575,2574,2575,2446,2447,2445,2574,2573,2574,2445,2446,2444,2573,2572,2573,2444,2445,2443,2572,2571,2572,2443,2444,2442,2571,2570,2571,2442,2443,2441,2570,2569,2570,2441,2442,2440,2569,2568,2569,2440,2441,2439,2568,2567,2568,2439,2440,2438,2567,2566,2567,2438,2439,2437,2566,2565,2566,2437,2438,2436,2565,2564,2565,2436,2437,2435,2564,2563,2564,2435,2436,2434,2563,2562,2563,2434,2435,2433,2562,2561,2562,2433,2434,2432,2561,2560,2561,2432,2433,2686,2815,2814,2815,2686,2687,2685,2814,2813,2814,2685,2686,2684,2813,2812,2813,2684,2685,2683,2812,2811,2812,2683,2684,2682,2811,2810,2811,2682,2683,2681,2810,2809,2810,2681,2682,2680,2809,2808,2809,2680,2681,2679,2808,2807,2808,2679,2680,2678,2807,2806,2807,2678,2679,2677,2806,2805,2806,2677,2678,2676,2805,2804,2805,2676,2677,2675,2804,2803,2804,2675,2676,2674,2803,2802,2803,2674,2675,2673,2802,2801,2802,2673,2674,2672,2801,2800,2801,2672,2673,2671,2800,2799,2800,2671,2672,2670,2799,2798,2799,2670,2671,2669,2798,2797,2798,2669,2670,2668,2797,2796,2797,2668,2669,2667,2796,2795,2796,2667,2668,2666,2795,2794,2795,2666,2667,2665,2794,2793,2794,2665,2666,2664,2793,2792,2793,2664,2665,2663,2792,2791,2792,2663,2664,2662,2791,2790,2791,2662,2663,2661,2790,2789,2790,2661,2662,2660,2789,2788,2789,2660,2661,2659,2788,2787,2788,2659,2660,2658,2787,2786,2787,2658,2659,2657,2786,2785,2786,2657,2658,2656,2785,2784,2785,2656,2657,2655,2784,2783,2784,2655,2656,2654,2783,2782,2783,2654,2655,2653,2782,2781,2782,2653,2654,2652,2781,2780,2781,2652,2653,2651,2780,2779,2780,2651,2652,2650,2779,2778,2779,2650,2651,2649,2778,2777,2778,2649,2650,2648,2777,2776,2777,2648,2649,2647,2776,2775,2776,2647,2648,2646,2775,2774,2775,2646,2647,2645,2774,2773,2774,2645,2646,2644,2773,2772,2773,2644,2645,2643,2772,2771,2772,2643,2644,2642,2771,2770,2771,2642,2643,2641,2770,2769,2770,2641,2642,2640,2769,2768,2769,2640,2641,2639,2768,2767,2768,2639,2640,2638,2767,2766,2767,2638,2639,2637,2766,2765,2766,2637,2638,2636,2765,2764,2765,2636,2637,2635,2764,2763,2764,2635,2636,2634,2763,2762,2763,2634,2635,2633,2762,2761,2762,2633,2634,2632,2761,2760,2761,2632,2633,2631,2760,2759,2760,2631,2632,2630,2759,2758,2759,2630,2631,2629,2758,2757,2758,2629,2630,2628,2757,2756,2757,2628,2629,2627,2756,2755,2756,2627,2628,2626,2755,2754,2755,2626,2627,2625,2754,2753,2754,2625,2626,2624,2753,2752,2753,2624,2625,2623,2752,2751,2752,2623,2624,2622,2751,2750,2751,2622,2623,2621,2750,2749,2750,2621,2622,2620,2749,2748,2749,2620,2621,2619,2748,2747,2748,2619,2620,2618,2747,2746,2747,2618,2619,2617,2746,2745,2746,2617,2618,2616,2745,2744,2745,2616,2617,2615,2744,2743,2744,2615,2616,2614,2743,2742,2743,2614,2615,2613,2742,2741,2742,2613,2614,2612,2741,2740,2741,2612,2613,2611,2740,2739,2740,2611,2612,2610,2739,2738,2739,2610,2611,2609,2738,2737,2738,2609,2610,2608,2737,2736,2737,2608,2609,2607,2736,2735,2736,2607,2608,2606,2735,2734,2735,2606,2607,2605,2734,2733,2734,2605,2606,2604,2733,2732,2733,2604,2605,2603,2732,2731,2732,2603,2604,2602,2731,2730,2731,2602,2603,2601,2730,2729,2730,2601,2602,2600,2729,2728,2729,2600,2601,2599,2728,2727,2728,2599,2600,2598,2727,2726,2727,2598,2599,2597,2726,2725,2726,2597,2598,2596,2725,2724,2725,2596,2597,2595,2724,2723,2724,2595,2596,2594,2723,2722,2723,2594,2595,2593,2722,2721,2722,2593,2594,2592,2721,2720,2721,2592,2593,2591,2720,2719,2720,2591,2592,2590,2719,2718,2719,2590,2591,2589,2718,2717,2718,2589,2590,2588,2717,2716,2717,2588,2589,2587,2716,2715,2716,2587,2588,2586,2715,2714,2715,2586,2587,2585,2714,2713,2714,2585,2586,2584,2713,2712,2713,2584,2585,2583,2712,2711,2712,2583,2584,2582,2711,2710,2711,2582,2583,2581,2710,2709,2710,2581,2582,2580,2709,2708,2709,2580,2581,2579,2708,2707,2708,2579,2580,2578,2707,2706,2707,2578,2579,2577,2706,2705,2706,2577,2578,2576,2705,2704,2705,2576,2577,2575,2704,2703,2704,2575,2576,2574,2703,2702,2703,2574,2575,2573,2702,2701,2702,2573,2574,2572,2701,2700,2701,2572,2573,2571,2700,2699,2700,2571,2572,2570,2699,2698,2699,2570,2571,2569,2698,2697,2698,2569,2570,2568,2697,2696,2697,2568,2569,2567,2696,2695,2696,2567,2568,2566,2695,2694,2695,2566,2567,2565,2694,2693,2694,2565,2566,2564,2693,2692,2693,2564,2565,2563,2692,2691,2692,2563,2564,2562,2691,2690,2691,2562,2563,2561,2690,2689,2690,2561,2562,2560,2689,2688,2689,2560,2561,2814,2943,2942,2943,2814,2815,2813,2942,2941,2942,2813,2814,2812,2941,2940,2941,2812,2813,2811,2940,2939,2940,2811,2812,2810,2939,2938,2939,2810,2811,2809,2938,2937,2938,2809,2810,2808,2937,2936,2937,2808,2809,2807,2936,2935,2936,2807,2808,2806,2935,2934,2935,2806,2807,2805,2934,2933,2934,2805,2806,2804,2933,2932,2933,2804,2805,2803,2932,2931,2932,2803,2804,2802,2931,2930,2931,2802,2803,2801,2930,2929,2930,2801,2802,2800,2929,2928,2929,2800,2801,2799,2928,2927,2928,2799,2800,2798,2927,2926,2927,2798,2799,2797,2926,2925,2926,2797,2798,2796,2925,2924,2925,2796,2797,2795,2924,2923,2924,2795,2796,2794,2923,2922,2923,2794,2795,2793,2922,2921,2922,2793,2794,2792,2921,2920,2921,2792,2793,2791,2920,2919,2920,2791,2792,2790,2919,2918,2919,2790,2791,2789,2918,2917,2918,2789,2790,2788,2917,2916,2917,2788,2789,2787,2916,2915,2916,2787,2788,2786,2915,2914,2915,2786,2787,2785,2914,2913,2914,2785,2786,2784,2913,2912,2913,2784,2785,2783,2912,2911,2912,2783,2784,2782,2911,2910,2911,2782,2783,2781,2910,2909,2910,2781,2782,2780,2909,2908,2909,2780,2781,2779,2908,2907,2908,2779,2780,2778,2907,2906,2907,2778,2779,2777,2906,2905,2906,2777,2778,2776,2905,2904,2905,2776,2777,2775,2904,2903,2904,2775,2776,2774,2903,2902,2903,2774,2775,2773,2902,2901,2902,2773,2774,2772,2901,2900,2901,2772,2773,2771,2900,2899,2900,2771,2772,2770,2899,2898,2899,2770,2771,2769,2898,2897,2898,2769,2770,2768,2897,2896,2897,2768,2769,2767,2896,2895,2896,2767,2768,2766,2895,2894,2895,2766,2767,2765,2894,2893,2894,2765,2766,2764,2893,2892,2893,2764,2765,2763,2892,2891,2892,2763,2764,2762,2891,2890,2891,2762,2763,2761,2890,2889,2890,2761,2762,2760,2889,2888,2889,2760,2761,2759,2888,2887,2888,2759,2760,2758,2887,2886,2887,2758,2759,2757,2886,2885,2886,2757,2758,2756,2885,2884,2885,2756,2757,2755,2884,2883,2884,2755,2756,2754,2883,2882,2883,2754,2755,2753,2882,2881,2882,2753,2754,2752,2881,2880,2881,2752,2753,2751,2880,2879,2880,2751,2752,2750,2879,2878,2879,2750,2751,2749,2878,2877,2878,2749,2750,2748,2877,2876,2877,2748,2749,2747,2876,2875,2876,2747,2748,2746,2875,2874,2875,2746,2747,2745,2874,2873,2874,2745,2746,2744,2873,2872,2873,2744,2745,2743,2872,2871,2872,2743,2744,2742,2871,2870,2871,2742,2743,2741,2870,2869,2870,2741,2742,2740,2869,2868,2869,2740,2741,2739,2868,2867,2868,2739,2740,2738,2867,2866,2867,2738,2739,2737,2866,2865,2866,2737,2738,2736,2865,2864,2865,2736,2737,2735,2864,2863,2864,2735,2736,2734,2863,2862,2863,2734,2735,2733,2862,2861,2862,2733,2734,2732,2861,2860,2861,2732,2733,2731,2860,2859,2860,2731,2732,2730,2859,2858,2859,2730,2731,2729,2858,2857,2858,2729,2730,2728,2857,2856,2857,2728,2729,2727,2856,2855,2856,2727,2728,2726,2855,2854,2855,2726,2727,2725,2854,2853,2854,2725,2726,2724,2853,2852,2853,2724,2725,2723,2852,2851,2852,2723,2724,2722,2851,2850,2851,2722,2723,2721,2850,2849,2850,2721,2722,2720,2849,2848,2849,2720,2721,2719,2848,2847,2848,2719,2720,2718,2847,2846,2847,2718,2719,2717,2846,2845,2846,2717,2718,2716,2845,2844,2845,2716,2717,2715,2844,2843,2844,2715,2716,2714,2843,2842,2843,2714,2715,2713,2842,2841,2842,2713,2714,2712,2841,2840,2841,2712,2713,2711,2840,2839,2840,2711,2712,2710,2839,2838,2839,2710,2711,2709,2838,2837,2838,2709,2710,2708,2837,2836,2837,2708,2709,2707,2836,2835,2836,2707,2708,2706,2835,2834,2835,2706,2707,2705,2834,2833,2834,2705,2706,2704,2833,2832,2833,2704,2705,2703,2832,2831,2832,2703,2704,2702,2831,2830,2831,2702,2703,2701,2830,2829,2830,2701,2702,2700,2829,2828,2829,2700,2701,2699,2828,2827,2828,2699,2700,2698,2827,2826,2827,2698,2699,2697,2826,2825,2826,2697,2698,2696,2825,2824,2825,2696,2697,2695,2824,2823,2824,2695,2696,2694,2823,2822,2823,2694,2695,2693,2822,2821,2822,2693,2694,2692,2821,2820,2821,2692,2693,2691,2820,2819,2820,2691,2692,2690,2819,2818,2819,2690,2691,2689,2818,2817,2818,2689,2690,2688,2817,2816,2817,2688,2689,2942,3071,3070,3071,2942,2943,2941,3070,3069,3070,2941,2942,2940,3069,3068,3069,2940,2941,2939,3068,3067,3068,2939,2940,2938,3067,3066,3067,2938,2939,2937,3066,3065,3066,2937,2938,2936,3065,3064,3065,2936,2937,2935,3064,3063,3064,2935,2936,2934,3063,3062,3063,2934,2935,2933,3062,3061,3062,2933,2934,2932,3061,3060,3061,2932,2933,2931,3060,3059,3060,2931,2932,2930,3059,3058,3059,2930,2931,2929,3058,3057,3058,2929,2930,2928,3057,3056,3057,2928,2929,2927,3056,3055,3056,2927,2928,2926,3055,3054,3055,2926,2927,2925,3054,3053,3054,2925,2926,2924,3053,3052,3053,2924,2925,2923,3052,3051,3052,2923,2924,2922,3051,3050,3051,2922,2923,2921,3050,3049,3050,2921,2922,2920,3049,3048,3049,2920,2921,2919,3048,3047,3048,2919,2920,2918,3047,3046,3047,2918,2919,2917,3046,3045,3046,2917,2918,2916,3045,3044,3045,2916,2917,2915,3044,3043,3044,2915,2916,2914,3043,3042,3043,2914,2915,2913,3042,3041,3042,2913,2914,2912,3041,3040,3041,2912,2913,2911,3040,3039,3040,2911,2912,2910,3039,3038,3039,2910,2911,2909,3038,3037,3038,2909,2910,2908,3037,3036,3037,2908,2909,2907,3036,3035,3036,2907,2908,2906,3035,3034,3035,2906,2907,2905,3034,3033,3034,2905,2906,2904,3033,3032,3033,2904,2905,2903,3032,3031,3032,2903,2904,2902,3031,3030,3031,2902,2903,2901,3030,3029,3030,2901,2902,2900,3029,3028,3029,2900,2901,2899,3028,3027,3028,2899,2900,2898,3027,3026,3027,2898,2899,2897,3026,3025,3026,2897,2898,2896,3025,3024,3025,2896,2897,2895,3024,3023,3024,2895,2896,2894,3023,3022,3023,2894,2895,2893,3022,3021,3022,2893,2894,2892,3021,3020,3021,2892,2893,2891,3020,3019,3020,2891,2892,2890,3019,3018,3019,2890,2891,2889,3018,3017,3018,2889,2890,2888,3017,3016,3017,2888,2889,2887,3016,3015,3016,2887,2888,2886,3015,3014,3015,2886,2887,2885,3014,3013,3014,2885,2886,2884,3013,3012,3013,2884,2885,2883,3012,3011,3012,2883,2884,2882,3011,3010,3011,2882,2883,2881,3010,3009,3010,2881,2882,2880,3009,3008,3009,2880,2881,2879,3008,3007,3008,2879,2880,2878,3007,3006,3007,2878,2879,2877,3006,3005,3006,2877,2878,2876,3005,3004,3005,2876,2877,2875,3004,3003,3004,2875,2876,2874,3003,3002,3003,2874,2875,2873,3002,3001,3002,2873,2874,2872,3001,3000,3001,2872,2873,2871,3000,2999,3000,2871,2872,2870,2999,2998,2999,2870,2871,2869,2998,2997,2998,2869,2870,2868,2997,2996,2997,2868,2869,2867,2996,2995,2996,2867,2868,2866,2995,2994,2995,2866,2867,2865,2994,2993,2994,2865,2866,2864,2993,2992,2993,2864,2865,2863,2992,2991,2992,2863,2864,2862,2991,2990,2991,2862,2863,2861,2990,2989,2990,2861,2862,2860,2989,2988,2989,2860,2861,2859,2988,2987,2988,2859,2860,2858,2987,2986,2987,2858,2859,2857,2986,2985,2986,2857,2858,2856,2985,2984,2985,2856,2857,2855,2984,2983,2984,2855,2856,2854,2983,2982,2983,2854,2855,2853,2982,2981,2982,2853,2854,2852,2981,2980,2981,2852,2853,2851,2980,2979,2980,2851,2852,2850,2979,2978,2979,2850,2851,2849,2978,2977,2978,2849,2850,2848,2977,2976,2977,2848,2849,2847,2976,2975,2976,2847,2848,2846,2975,2974,2975,2846,2847,2845,2974,2973,2974,2845,2846,2844,2973,2972,2973,2844,2845,2843,2972,2971,2972,2843,2844,2842,2971,2970,2971,2842,2843,2841,2970,2969,2970,2841,2842,2840,2969,2968,2969,2840,2841,2839,2968,2967,2968,2839,2840,2838,2967,2966,2967,2838,2839,2837,2966,2965,2966,2837,2838,2836,2965,2964,2965,2836,2837,2835,2964,2963,2964,2835,2836,2834,2963,2962,2963,2834,2835,2833,2962,2961,2962,2833,2834,2832,2961,2960,2961,2832,2833,2831,2960,2959,2960,2831,2832,2830,2959,2958,2959,2830,2831,2829,2958,2957,2958,2829,2830,2828,2957,2956,2957,2828,2829,2827,2956,2955,2956,2827,2828,2826,2955,2954,2955,2826,2827,2825,2954,2953,2954,2825,2826,2824,2953,2952,2953,2824,2825,2823,2952,2951,2952,2823,2824,2822,2951,2950,2951,2822,2823,2821,2950,2949,2950,2821,2822,2820,2949,2948,2949,2820,2821,2819,2948,2947,2948,2819,2820,2818,2947,2946,2947,2818,2819,2817,2946,2945,2946,2817,2818,2816,2945,2944,2945,2816,2817,3070,3199,3198,3199,3070,3071,3069,3198,3197,3198,3069,3070,3068,3197,3196,3197,3068,3069,3067,3196,3195,3196,3067,3068,3066,3195,3194,3195,3066,3067,3065,3194,3193,3194,3065,3066,3064,3193,3192,3193,3064,3065,3063,3192,3191,3192,3063,3064,3062,3191,3190,3191,3062,3063,3061,3190,3189,3190,3061,3062,3060,3189,3188,3189,3060,3061,3059,3188,3187,3188,3059,3060,3058,3187,3186,3187,3058,3059,3057,3186,3185,3186,3057,3058,3056,3185,3184,3185,3056,3057,3055,3184,3183,3184,3055,3056,3054,3183,3182,3183,3054,3055,3053,3182,3181,3182,3053,3054,3052,3181,3180,3181,3052,3053,3051,3180,3179,3180,3051,3052,3050,3179,3178,3179,3050,3051,3049,3178,3177,3178,3049,3050,3048,3177,3176,3177,3048,3049,3047,3176,3175,3176,3047,3048,3046,3175,3174,3175,3046,3047,3045,3174,3173,3174,3045,3046,3044,3173,3172,3173,3044,3045,3043,3172,3171,3172,3043,3044,3042,3171,3170,3171,3042,3043,3041,3170,3169,3170,3041,3042,3040,3169,3168,3169,3040,3041,3039,3168,3167,3168,3039,3040,3038,3167,3166,3167,3038,3039,3037,3166,3165,3166,3037,3038,3036,3165,3164,3165,3036,3037,3035,3164,3163,3164,3035,3036,3034,3163,3162,3163,3034,3035,3033,3162,3161,3162,3033,3034,3032,3161,3160,3161,3032,3033,3031,3160,3159,3160,3031,3032,3030,3159,3158,3159,3030,3031,3029,3158,3157,3158,3029,3030,3028,3157,3156,3157,3028,3029,3027,3156,3155,3156,3027,3028,3026,3155,3154,3155,3026,3027,3025,3154,3153,3154,3025,3026,3024,3153,3152,3153,3024,3025,3023,3152,3151,3152,3023,3024,3022,3151,3150,3151,3022,3023,3021,3150,3149,3150,3021,3022,3020,3149,3148,3149,3020,3021,3019,3148,3147,3148,3019,3020,3018,3147,3146,3147,3018,3019,3017,3146,3145,3146,3017,3018,3016,3145,3144,3145,3016,3017,3015,3144,3143,3144,3015,3016,3014,3143,3142,3143,3014,3015,3013,3142,3141,3142,3013,3014,3012,3141,3140,3141,3012,3013,3011,3140,3139,3140,3011,3012,3010,3139,3138,3139,3010,3011,3009,3138,3137,3138,3009,3010,3008,3137,3136,3137,3008,3009,3007,3136,3135,3136,3007,3008,3006,3135,3134,3135,3006,3007,3005,3134,3133,3134,3005,3006,3004,3133,3132,3133,3004,3005,3003,3132,3131,3132,3003,3004,3002,3131,3130,3131,3002,3003,3001,3130,3129,3130,3001,3002,3000,3129,3128,3129,3000,3001,2999,3128,3127,3128,2999,3000,2998,3127,3126,3127,2998,2999,2997,3126,3125,3126,2997,2998,2996,3125,3124,3125,2996,2997,2995,3124,3123,3124,2995,2996,2994,3123,3122,3123,2994,2995,2993,3122,3121,3122,2993,2994,2992,3121,3120,3121,2992,2993,2991,3120,3119,3120,2991,2992,2990,3119,3118,3119,2990,2991,2989,3118,3117,3118,2989,2990,2988,3117,3116,3117,2988,2989,2987,3116,3115,3116,2987,2988,2986,3115,3114,3115,2986,2987,2985,3114,3113,3114,2985,2986,2984,3113,3112,3113,2984,2985,2983,3112,3111,3112,2983,2984,2982,3111,3110,3111,2982,2983,2981,3110,3109,3110,2981,2982,2980,3109,3108,3109,2980,2981,2979,3108,3107,3108,2979,2980,2978,3107,3106,3107,2978,2979,2977,3106,3105,3106,2977,2978,2976,3105,3104,3105,2976,2977,2975,3104,3103,3104,2975,2976,2974,3103,3102,3103,2974,2975,2973,3102,3101,3102,2973,2974,2972,3101,3100,3101,2972,2973,2971,3100,3099,3100,2971,2972,2970,3099,3098,3099,2970,2971,2969,3098,3097,3098,2969,2970,2968,3097,3096,3097,2968,2969,2967,3096,3095,3096,2967,2968,2966,3095,3094,3095,2966,2967,2965,3094,3093,3094,2965,2966,2964,3093,3092,3093,2964,2965,2963,3092,3091,3092,2963,2964,2962,3091,3090,3091,2962,2963,2961,3090,3089,3090,2961,2962,2960,3089,3088,3089,2960,2961,2959,3088,3087,3088,2959,2960,2958,3087,3086,3087,2958,2959,2957,3086,3085,3086,2957,2958,2956,3085,3084,3085,2956,2957,2955,3084,3083,3084,2955,2956,2954,3083,3082,3083,2954,2955,2953,3082,3081,3082,2953,2954,2952,3081,3080,3081,2952,2953,2951,3080,3079,3080,2951,2952,2950,3079,3078,3079,2950,2951,2949,3078,3077,3078,2949,2950,2948,3077,3076,3077,2948,2949,2947,3076,3075,3076,2947,2948,2946,3075,3074,3075,2946,2947,2945,3074,3073,3074,2945,2946,2944,3073,3072,3073,2944,2945,3198,3327,3326,3327,3198,3199,3197,3326,3325,3326,3197,3198,3196,3325,3324,3325,3196,3197,3195,3324,3323,3324,3195,3196,3194,3323,3322,3323,3194,3195,3193,3322,3321,3322,3193,3194,3192,3321,3320,3321,3192,3193,3191,3320,3319,3320,3191,3192,3190,3319,3318,3319,3190,3191,3189,3318,3317,3318,3189,3190,3188,3317,3316,3317,3188,3189,3187,3316,3315,3316,3187,3188,3186,3315,3314,3315,3186,3187,3185,3314,3313,3314,3185,3186,3184,3313,3312,3313,3184,3185,3183,3312,3311,3312,3183,3184,3182,3311,3310,3311,3182,3183,3181,3310,3309,3310,3181,3182,3180,3309,3308,3309,3180,3181,3179,3308,3307,3308,3179,3180,3178,3307,3306,3307,3178,3179,3177,3306,3305,3306,3177,3178,3176,3305,3304,3305,3176,3177,3175,3304,3303,3304,3175,3176,3174,3303,3302,3303,3174,3175,3173,3302,3301,3302,3173,3174,3172,3301,3300,3301,3172,3173,3171,3300,3299,3300,3171,3172,3170,3299,3298,3299,3170,3171,3169,3298,3297,3298,3169,3170,3168,3297,3296,3297,3168,3169,3167,3296,3295,3296,3167,3168,3166,3295,3294,3295,3166,3167,3165,3294,3293,3294,3165,3166,3164,3293,3292,3293,3164,3165,3163,3292,3291,3292,3163,3164,3162,3291,3290,3291,3162,3163,3161,3290,3289,3290,3161,3162,3160,3289,3288,3289,3160,3161,3159,3288,3287,3288,3159,3160,3158,3287,3286,3287,3158,3159,3157,3286,3285,3286,3157,3158,3156,3285,3284,3285,3156,3157,3155,3284,3283,3284,3155,3156,3154,3283,3282,3283,3154,3155,3153,3282,3281,3282,3153,3154,3152,3281,3280,3281,3152,3153,3151,3280,3279,3280,3151,3152,3150,3279,3278,3279,3150,3151,3149,3278,3277,3278,3149,3150,3148,3277,3276,3277,3148,3149,3147,3276,3275,3276,3147,3148,3146,3275,3274,3275,3146,3147,3145,3274,3273,3274,3145,3146,3144,3273,3272,3273,3144,3145,3143,3272,3271,3272,3143,3144,3142,3271,3270,3271,3142,3143,3141,3270,3269,3270,3141,3142,3140,3269,3268,3269,3140,3141,3139,3268,3267,3268,3139,3140,3138,3267,3266,3267,3138,3139,3137,3266,3265,3266,3137,3138,3136,3265,3264,3265,3136,3137,3135,3264,3263,3264,3135,3136,3134,3263,3262,3263,3134,3135,3133,3262,3261,3262,3133,3134,3132,3261,3260,3261,3132,3133,3131,3260,3259,3260,3131,3132,3130,3259,3258,3259,3130,3131,3129,3258,3257,3258,3129,3130,3128,3257,3256,3257,3128,3129,3127,3256,3255,3256,3127,3128,3126,3255,3254,3255,3126,3127,3125,3254,3253,3254,3125,3126,3124,3253,3252,3253,3124,3125,3123,3252,3251,3252,3123,3124,3122,3251,3250,3251,3122,3123,3121,3250,3249,3250,3121,3122,3120,3249,3248,3249,3120,3121,3119,3248,3247,3248,3119,3120,3118,3247,3246,3247,3118,3119,3117,3246,3245,3246,3117,3118,3116,3245,3244,3245,3116,3117,3115,3244,3243,3244,3115,3116,3114,3243,3242,3243,3114,3115,3113,3242,3241,3242,3113,3114,3112,3241,3240,3241,3112,3113,3111,3240,3239,3240,3111,3112,3110,3239,3238,3239,3110,3111,3109,3238,3237,3238,3109,3110,3108,3237,3236,3237,3108,3109,3107,3236,3235,3236,3107,3108,3106,3235,3234,3235,3106,3107,3105,3234,3233,3234,3105,3106,3104,3233,3232,3233,3104,3105,3103,3232,3231,3232,3103,3104,3102,3231,3230,3231,3102,3103,3101,3230,3229,3230,3101,3102,3100,3229,3228,3229,3100,3101,3099,3228,3227,3228,3099,3100,3098,3227,3226,3227,3098,3099,3097,3226,3225,3226,3097,3098,3096,3225,3224,3225,3096,3097,3095,3224,3223,3224,3095,3096,3094,3223,3222,3223,3094,3095,3093,3222,3221,3222,3093,3094,3092,3221,3220,3221,3092,3093,3091,3220,3219,3220,3091,3092,3090,3219,3218,3219,3090,3091,3089,3218,3217,3218,3089,3090,3088,3217,3216,3217,3088,3089,3087,3216,3215,3216,3087,3088,3086,3215,3214,3215,3086,3087,3085,3214,3213,3214,3085,3086,3084,3213,3212,3213,3084,3085,3083,3212,3211,3212,3083,3084,3082,3211,3210,3211,3082,3083,3081,3210,3209,3210,3081,3082,3080,3209,3208,3209,3080,3081,3079,3208,3207,3208,3079,3080,3078,3207,3206,3207,3078,3079,3077,3206,3205,3206,3077,3078,3076,3205,3204,3205,3076,3077,3075,3204,3203,3204,3075,3076,3074,3203,3202,3203,3074,3075,3073,3202,3201,3202,3073,3074,3072,3201,3200,3201,3072,3073,3326,3455,3454,3455,3326,3327,3325,3454,3453,3454,3325,3326,3324,3453,3452,3453,3324,3325,3323,3452,3451,3452,3323,3324,3322,3451,3450,3451,3322,3323,3321,3450,3449,3450,3321,3322,3320,3449,3448,3449,3320,3321,3319,3448,3447,3448,3319,3320,3318,3447,3446,3447,3318,3319,3317,3446,3445,3446,3317,3318,3316,3445,3444,3445,3316,3317,3315,3444,3443,3444,3315,3316,3314,3443,3442,3443,3314,3315,3313,3442,3441,3442,3313,3314,3312,3441,3440,3441,3312,3313,3311,3440,3439,3440,3311,3312,3310,3439,3438,3439,3310,3311,3309,3438,3437,3438,3309,3310,3308,3437,3436,3437,3308,3309,3307,3436,3435,3436,3307,3308,3306,3435,3434,3435,3306,3307,3305,3434,3433,3434,3305,3306,3304,3433,3432,3433,3304,3305,3303,3432,3431,3432,3303,3304,3302,3431,3430,3431,3302,3303,3301,3430,3429,3430,3301,3302,3300,3429,3428,3429,3300,3301,3299,3428,3427,3428,3299,3300,3298,3427,3426,3427,3298,3299,3297,3426,3425,3426,3297,3298,3296,3425,3424,3425,3296,3297,3295,3424,3423,3424,3295,3296,3294,3423,3422,3423,3294,3295,3293,3422,3421,3422,3293,3294,3292,3421,3420,3421,3292,3293,3291,3420,3419,3420,3291,3292,3290,3419,3418,3419,3290,3291,3289,3418,3417,3418,3289,3290,3288,3417,3416,3417,3288,3289,3287,3416,3415,3416,3287,3288,3286,3415,3414,3415,3286,3287,3285,3414,3413,3414,3285,3286,3284,3413,3412,3413,3284,3285,3283,3412,3411,3412,3283,3284,3282,3411,3410,3411,3282,3283,3281,3410,3409,3410,3281,3282,3280,3409,3408,3409,3280,3281,3279,3408,3407,3408,3279,3280,3278,3407,3406,3407,3278,3279,3277,3406,3405,3406,3277,3278,3276,3405,3404,3405,3276,3277,3275,3404,3403,3404,3275,3276,3274,3403,3402,3403,3274,3275,3273,3402,3401,3402,3273,3274,3272,3401,3400,3401,3272,3273,3271,3400,3399,3400,3271,3272,3270,3399,3398,3399,3270,3271,3269,3398,3397,3398,3269,3270,3268,3397,3396,3397,3268,3269,3267,3396,3395,3396,3267,3268,3266,3395,3394,3395,3266,3267,3265,3394,3393,3394,3265,3266,3264,3393,3392,3393,3264,3265,3263,3392,3391,3392,3263,3264,3262,3391,3390,3391,3262,3263,3261,3390,3389,3390,3261,3262,3260,3389,3388,3389,3260,3261,3259,3388,3387,3388,3259,3260,3258,3387,3386,3387,3258,3259,3257,3386,3385,3386,3257,3258,3256,3385,3384,3385,3256,3257,3255,3384,3383,3384,3255,3256,3254,3383,3382,3383,3254,3255,3253,3382,3381,3382,3253,3254,3252,3381,3380,3381,3252,3253,3251,3380,3379,3380,3251,3252,3250,3379,3378,3379,3250,3251,3249,3378,3377,3378,3249,3250,3248,3377,3376,3377,3248,3249,3247,3376,3375,3376,3247,3248,3246,3375,3374,3375,3246,3247,3245,3374,3373,3374,3245,3246,3244,3373,3372,3373,3244,3245,3243,3372,3371,3372,3243,3244,3242,3371,3370,3371,3242,3243,3241,3370,3369,3370,3241,3242,3240,3369,3368,3369,3240,3241,3239,3368,3367,3368,3239,3240,3238,3367,3366,3367,3238,3239,3237,3366,3365,3366,3237,3238,3236,3365,3364,3365,3236,3237,3235,3364,3363,3364,3235,3236,3234,3363,3362,3363,3234,3235,3233,3362,3361,3362,3233,3234,3232,3361,3360,3361,3232,3233,3231,3360,3359,3360,3231,3232,3230,3359,3358,3359,3230,3231,3229,3358,3357,3358,3229,3230,3228,3357,3356,3357,3228,3229,3227,3356,3355,3356,3227,3228,3226,3355,3354,3355,3226,3227,3225,3354,3353,3354,3225,3226,3224,3353,3352,3353,3224,3225,3223,3352,3351,3352,3223,3224,3222,3351,3350,3351,3222,3223,3221,3350,3349,3350,3221,3222,3220,3349,3348,3349,3220,3221,3219,3348,3347,3348,3219,3220,3218,3347,3346,3347,3218,3219,3217,3346,3345,3346,3217,3218,3216,3345,3344,3345,3216,3217,3215,3344,3343,3344,3215,3216,3214,3343,3342,3343,3214,3215,3213,3342,3341,3342,3213,3214,3212,3341,3340,3341,3212,3213,3211,3340,3339,3340,3211,3212,3210,3339,3338,3339,3210,3211,3209,3338,3337,3338,3209,3210,3208,3337,3336,3337,3208,3209,3207,3336,3335,3336,3207,3208,3206,3335,3334,3335,3206,3207,3205,3334,3333,3334,3205,3206,3204,3333,3332,3333,3204,3205,3203,3332,3331,3332,3203,3204,3202,3331,3330,3331,3202,3203,3201,3330,3329,3330,3201,3202,3200,3329,3328,3329,3200,3201,3454,3583,3582,3583,3454,3455,3453,3582,3581,3582,3453,3454,3452,3581,3580,3581,3452,3453,3451,3580,3579,3580,3451,3452,3450,3579,3578,3579,3450,3451,3449,3578,3577,3578,3449,3450,3448,3577,3576,3577,3448,3449,3447,3576,3575,3576,3447,3448,3446,3575,3574,3575,3446,3447,3445,3574,3573,3574,3445,3446,3444,3573,3572,3573,3444,3445,3443,3572,3571,3572,3443,3444,3442,3571,3570,3571,3442,3443,3441,3570,3569,3570,3441,3442,3440,3569,3568,3569,3440,3441,3439,3568,3567,3568,3439,3440,3438,3567,3566,3567,3438,3439,3437,3566,3565,3566,3437,3438,3436,3565,3564,3565,3436,3437,3435,3564,3563,3564,3435,3436,3434,3563,3562,3563,3434,3435,3433,3562,3561,3562,3433,3434,3432,3561,3560,3561,3432,3433,3431,3560,3559,3560,3431,3432,3430,3559,3558,3559,3430,3431,3429,3558,3557,3558,3429,3430,3428,3557,3556,3557,3428,3429,3427,3556,3555,3556,3427,3428,3426,3555,3554,3555,3426,3427,3425,3554,3553,3554,3425,3426,3424,3553,3552,3553,3424,3425,3423,3552,3551,3552,3423,3424,3422,3551,3550,3551,3422,3423,3421,3550,3549,3550,3421,3422,3420,3549,3548,3549,3420,3421,3419,3548,3547,3548,3419,3420,3418,3547,3546,3547,3418,3419,3417,3546,3545,3546,3417,3418,3416,3545,3544,3545,3416,3417,3415,3544,3543,3544,3415,3416,3414,3543,3542,3543,3414,3415,3413,3542,3541,3542,3413,3414,3412,3541,3540,3541,3412,3413,3411,3540,3539,3540,3411,3412,3410,3539,3538,3539,3410,3411,3409,3538,3537,3538,3409,3410,3408,3537,3536,3537,3408,3409,3407,3536,3535,3536,3407,3408,3406,3535,3534,3535,3406,3407,3405,3534,3533,3534,3405,3406,3404,3533,3532,3533,3404,3405,3403,3532,3531,3532,3403,3404,3402,3531,3530,3531,3402,3403,3401,3530,3529,3530,3401,3402,3400,3529,3528,3529,3400,3401,3399,3528,3527,3528,3399,3400,3398,3527,3526,3527,3398,3399,3397,3526,3525,3526,3397,3398,3396,3525,3524,3525,3396,3397,3395,3524,3523,3524,3395,3396,3394,3523,3522,3523,3394,3395,3393,3522,3521,3522,3393,3394,3392,3521,3520,3521,3392,3393,3391,3520,3519,3520,3391,3392,3390,3519,3518,3519,3390,3391,3389,3518,3517,3518,3389,3390,3388,3517,3516,3517,3388,3389,3387,3516,3515,3516,3387,3388,3386,3515,3514,3515,3386,3387,3385,3514,3513,3514,3385,3386,3384,3513,3512,3513,3384,3385,3383,3512,3511,3512,3383,3384,3382,3511,3510,3511,3382,3383,3381,3510,3509,3510,3381,3382,3380,3509,3508,3509,3380,3381,3379,3508,3507,3508,3379,3380,3378,3507,3506,3507,3378,3379,3377,3506,3505,3506,3377,3378,3376,3505,3504,3505,3376,3377,3375,3504,3503,3504,3375,3376,3374,3503,3502,3503,3374,3375,3373,3502,3501,3502,3373,3374,3372,3501,3500,3501,3372,3373,3371,3500,3499,3500,3371,3372,3370,3499,3498,3499,3370,3371,3369,3498,3497,3498,3369,3370,3368,3497,3496,3497,3368,3369,3367,3496,3495,3496,3367,3368,3366,3495,3494,3495,3366,3367,3365,3494,3493,3494,3365,3366,3364,3493,3492,3493,3364,3365,3363,3492,3491,3492,3363,3364,3362,3491,3490,3491,3362,3363,3361,3490,3489,3490,3361,3362,3360,3489,3488,3489,3360,3361,3359,3488,3487,3488,3359,3360,3358,3487,3486,3487,3358,3359,3357,3486,3485,3486,3357,3358,3356,3485,3484,3485,3356,3357,3355,3484,3483,3484,3355,3356,3354,3483,3482,3483,3354,3355,3353,3482,3481,3482,3353,3354,3352,3481,3480,3481,3352,3353,3351,3480,3479,3480,3351,3352,3350,3479,3478,3479,3350,3351,3349,3478,3477,3478,3349,3350,3348,3477,3476,3477,3348,3349,3347,3476,3475,3476,3347,3348,3346,3475,3474,3475,3346,3347,3345,3474,3473,3474,3345,3346,3344,3473,3472,3473,3344,3345,3343,3472,3471,3472,3343,3344,3342,3471,3470,3471,3342,3343,3341,3470,3469,3470,3341,3342,3340,3469,3468,3469,3340,3341,3339,3468,3467,3468,3339,3340,3338,3467,3466,3467,3338,3339,3337,3466,3465,3466,3337,3338,3336,3465,3464,3465,3336,3337,3335,3464,3463,3464,3335,3336,3334,3463,3462,3463,3334,3335,3333,3462,3461,3462,3333,3334,3332,3461,3460,3461,3332,3333,3331,3460,3459,3460,3331,3332,3330,3459,3458,3459,3330,3331,3329,3458,3457,3458,3329,3330,3328,3457,3456,3457,3328,3329,3582,3711,3710,3711,3582,3583,3581,3710,3709,3710,3581,3582,3580,3709,3708,3709,3580,3581,3579,3708,3707,3708,3579,3580,3578,3707,3706,3707,3578,3579,3577,3706,3705,3706,3577,3578,3576,3705,3704,3705,3576,3577,3575,3704,3703,3704,3575,3576,3574,3703,3702,3703,3574,3575,3573,3702,3701,3702,3573,3574,3572,3701,3700,3701,3572,3573,3571,3700,3699,3700,3571,3572,3570,3699,3698,3699,3570,3571,3569,3698,3697,3698,3569,3570,3568,3697,3696,3697,3568,3569,3567,3696,3695,3696,3567,3568,3566,3695,3694,3695,3566,3567,3565,3694,3693,3694,3565,3566,3564,3693,3692,3693,3564,3565,3563,3692,3691,3692,3563,3564,3562,3691,3690,3691,3562,3563,3561,3690,3689,3690,3561,3562,3560,3689,3688,3689,3560,3561,3559,3688,3687,3688,3559,3560,3558,3687,3686,3687,3558,3559,3557,3686,3685,3686,3557,3558,3556,3685,3684,3685,3556,3557,3555,3684,3683,3684,3555,3556,3554,3683,3682,3683,3554,3555,3553,3682,3681,3682,3553,3554,3552,3681,3680,3681,3552,3553,3551,3680,3679,3680,3551,3552,3550,3679,3678,3679,3550,3551,3549,3678,3677,3678,3549,3550,3548,3677,3676,3677,3548,3549,3547,3676,3675,3676,3547,3548,3546,3675,3674,3675,3546,3547,3545,3674,3673,3674,3545,3546,3544,3673,3672,3673,3544,3545,3543,3672,3671,3672,3543,3544,3542,3671,3670,3671,3542,3543,3541,3670,3669,3670,3541,3542,3540,3669,3668,3669,3540,3541,3539,3668,3667,3668,3539,3540,3538,3667,3666,3667,3538,3539,3537,3666,3665,3666,3537,3538,3536,3665,3664,3665,3536,3537,3535,3664,3663,3664,3535,3536,3534,3663,3662,3663,3534,3535,3533,3662,3661,3662,3533,3534,3532,3661,3660,3661,3532,3533,3531,3660,3659,3660,3531,3532,3530,3659,3658,3659,3530,3531,3529,3658,3657,3658,3529,3530,3528,3657,3656,3657,3528,3529,3527,3656,3655,3656,3527,3528,3526,3655,3654,3655,3526,3527,3525,3654,3653,3654,3525,3526,3524,3653,3652,3653,3524,3525,3523,3652,3651,3652,3523,3524,3522,3651,3650,3651,3522,3523,3521,3650,3649,3650,3521,3522,3520,3649,3648,3649,3520,3521,3519,3648,3647,3648,3519,3520,3518,3647,3646,3647,3518,3519,3517,3646,3645,3646,3517,3518,3516,3645,3644,3645,3516,3517,3515,3644,3643,3644,3515,3516,3514,3643,3642,3643,3514,3515,3513,3642,3641,3642,3513,3514,3512,3641,3640,3641,3512,3513,3511,3640,3639,3640,3511,3512,3510,3639,3638,3639,3510,3511,3509,3638,3637,3638,3509,3510,3508,3637,3636,3637,3508,3509,3507,3636,3635,3636,3507,3508,3506,3635,3634,3635,3506,3507,3505,3634,3633,3634,3505,3506,3504,3633,3632,3633,3504,3505,3503,3632,3631,3632,3503,3504,3502,3631,3630,3631,3502,3503,3501,3630,3629,3630,3501,3502,3500,3629,3628,3629,3500,3501,3499,3628,3627,3628,3499,3500,3498,3627,3626,3627,3498,3499,3497,3626,3625,3626,3497,3498,3496,3625,3624,3625,3496,3497,3495,3624,3623,3624,3495,3496,3494,3623,3622,3623,3494,3495,3493,3622,3621,3622,3493,3494,3492,3621,3620,3621,3492,3493,3491,3620,3619,3620,3491,3492,3490,3619,3618,3619,3490,3491,3489,3618,3617,3618,3489,3490,3488,3617,3616,3617,3488,3489,3487,3616,3615,3616,3487,3488,3486,3615,3614,3615,3486,3487,3485,3614,3613,3614,3485,3486,3484,3613,3612,3613,3484,3485,3483,3612,3611,3612,3483,3484,3482,3611,3610,3611,3482,3483,3481,3610,3609,3610,3481,3482,3480,3609,3608,3609,3480,3481,3479,3608,3607,3608,3479,3480,3478,3607,3606,3607,3478,3479,3477,3606,3605,3606,3477,3478,3476,3605,3604,3605,3476,3477,3475,3604,3603,3604,3475,3476,3474,3603,3602,3603,3474,3475,3473,3602,3601,3602,3473,3474,3472,3601,3600,3601,3472,3473,3471,3600,3599,3600,3471,3472,3470,3599,3598,3599,3470,3471,3469,3598,3597,3598,3469,3470,3468,3597,3596,3597,3468,3469,3467,3596,3595,3596,3467,3468,3466,3595,3594,3595,3466,3467,3465,3594,3593,3594,3465,3466,3464,3593,3592,3593,3464,3465,3463,3592,3591,3592,3463,3464,3462,3591,3590,3591,3462,3463,3461,3590,3589,3590,3461,3462,3460,3589,3588,3589,3460,3461,3459,3588,3587,3588,3459,3460,3458,3587,3586,3587,3458,3459,3457,3586,3585,3586,3457,3458,3456,3585,3584,3585,3456,3457,3710,3839,3838,3839,3710,3711,3709,3838,3837,3838,3709,3710,3708,3837,3836,3837,3708,3709,3707,3836,3835,3836,3707,3708,3706,3835,3834,3835,3706,3707,3705,3834,3833,3834,3705,3706,3704,3833,3832,3833,3704,3705,3703,3832,3831,3832,3703,3704,3702,3831,3830,3831,3702,3703,3701,3830,3829,3830,3701,3702,3700,3829,3828,3829,3700,3701,3699,3828,3827,3828,3699,3700,3698,3827,3826,3827,3698,3699,3697,3826,3825,3826,3697,3698,3696,3825,3824,3825,3696,3697,3695,3824,3823,3824,3695,3696,3694,3823,3822,3823,3694,3695,3693,3822,3821,3822,3693,3694,3692,3821,3820,3821,3692,3693,3691,3820,3819,3820,3691,3692,3690,3819,3818,3819,3690,3691,3689,3818,3817,3818,3689,3690,3688,3817,3816,3817,3688,3689,3687,3816,3815,3816,3687,3688,3686,3815,3814,3815,3686,3687,3685,3814,3813,3814,3685,3686,3684,3813,3812,3813,3684,3685,3683,3812,3811,3812,3683,3684,3682,3811,3810,3811,3682,3683,3681,3810,3809,3810,3681,3682,3680,3809,3808,3809,3680,3681,3679,3808,3807,3808,3679,3680,3678,3807,3806,3807,3678,3679,3677,3806,3805,3806,3677,3678,3676,3805,3804,3805,3676,3677,3675,3804,3803,3804,3675,3676,3674,3803,3802,3803,3674,3675,3673,3802,3801,3802,3673,3674,3672,3801,3800,3801,3672,3673,3671,3800,3799,3800,3671,3672,3670,3799,3798,3799,3670,3671,3669,3798,3797,3798,3669,3670,3668,3797,3796,3797,3668,3669,3667,3796,3795,3796,3667,3668,3666,3795,3794,3795,3666,3667,3665,3794,3793,3794,3665,3666,3664,3793,3792,3793,3664,3665,3663,3792,3791,3792,3663,3664,3662,3791,3790,3791,3662,3663,3661,3790,3789,3790,3661,3662,3660,3789,3788,3789,3660,3661,3659,3788,3787,3788,3659,3660,3658,3787,3786,3787,3658,3659,3657,3786,3785,3786,3657,3658,3656,3785,3784,3785,3656,3657,3655,3784,3783,3784,3655,3656,3654,3783,3782,3783,3654,3655,3653,3782,3781,3782,3653,3654,3652,3781,3780,3781,3652,3653,3651,3780,3779,3780,3651,3652,3650,3779,3778,3779,3650,3651,3649,3778,3777,3778,3649,3650,3648,3777,3776,3777,3648,3649,3647,3776,3775,3776,3647,3648,3646,3775,3774,3775,3646,3647,3645,3774,3773,3774,3645,3646,3644,3773,3772,3773,3644,3645,3643,3772,3771,3772,3643,3644,3642,3771,3770,3771,3642,3643,3641,3770,3769,3770,3641,3642,3640,3769,3768,3769,3640,3641,3639,3768,3767,3768,3639,3640,3638,3767,3766,3767,3638,3639,3637,3766,3765,3766,3637,3638,3636,3765,3764,3765,3636,3637,3635,3764,3763,3764,3635,3636,3634,3763,3762,3763,3634,3635,3633,3762,3761,3762,3633,3634,3632,3761,3760,3761,3632,3633,3631,3760,3759,3760,3631,3632,3630,3759,3758,3759,3630,3631,3629,3758,3757,3758,3629,3630,3628,3757,3756,3757,3628,3629,3627,3756,3755,3756,3627,3628,3626,3755,3754,3755,3626,3627,3625,3754,3753,3754,3625,3626,3624,3753,3752,3753,3624,3625,3623,3752,3751,3752,3623,3624,3622,3751,3750,3751,3622,3623,3621,3750,3749,3750,3621,3622,3620,3749,3748,3749,3620,3621,3619,3748,3747,3748,3619,3620,3618,3747,3746,3747,3618,3619,3617,3746,3745,3746,3617,3618,3616,3745,3744,3745,3616,3617,3615,3744,3743,3744,3615,3616,3614,3743,3742,3743,3614,3615,3613,3742,3741,3742,3613,3614,3612,3741,3740,3741,3612,3613,3611,3740,3739,3740,3611,3612,3610,3739,3738,3739,3610,3611,3609,3738,3737,3738,3609,3610,3608,3737,3736,3737,3608,3609,3607,3736,3735,3736,3607,3608,3606,3735,3734,3735,3606,3607,3605,3734,3733,3734,3605,3606,3604,3733,3732,3733,3604,3605,3603,3732,3731,3732,3603,3604,3602,3731,3730,3731,3602,3603,3601,3730,3729,3730,3601,3602,3600,3729,3728,3729,3600,3601,3599,3728,3727,3728,3599,3600,3598,3727,3726,3727,3598,3599,3597,3726,3725,3726,3597,3598,3596,3725,3724,3725,3596,3597,3595,3724,3723,3724,3595,3596,3594,3723,3722,3723,3594,3595,3593,3722,3721,3722,3593,3594,3592,3721,3720,3721,3592,3593,3591,3720,3719,3720,3591,3592,3590,3719,3718,3719,3590,3591,3589,3718,3717,3718,3589,3590,3588,3717,3716,3717,3588,3589,3587,3716,3715,3716,3587,3588,3586,3715,3714,3715,3586,3587,3585,3714,3713,3714,3585,3586,3584,3713,3712,3713,3584,3585,3838,3967,3966,3967,3838,3839,3837,3966,3965,3966,3837,3838,3836,3965,3964,3965,3836,3837,3835,3964,3963,3964,3835,3836,3834,3963,3962,3963,3834,3835,3833,3962,3961,3962,3833,3834,3832,3961,3960,3961,3832,3833,3831,3960,3959,3960,3831,3832,3830,3959,3958,3959,3830,3831,3829,3958,3957,3958,3829,3830,3828,3957,3956,3957,3828,3829,3827,3956,3955,3956,3827,3828,3826,3955,3954,3955,3826,3827,3825,3954,3953,3954,3825,3826,3824,3953,3952,3953,3824,3825,3823,3952,3951,3952,3823,3824,3822,3951,3950,3951,3822,3823,3821,3950,3949,3950,3821,3822,3820,3949,3948,3949,3820,3821,3819,3948,3947,3948,3819,3820,3818,3947,3946,3947,3818,3819,3817,3946,3945,3946,3817,3818,3816,3945,3944,3945,3816,3817,3815,3944,3943,3944,3815,3816,3814,3943,3942,3943,3814,3815,3813,3942,3941,3942,3813,3814,3812,3941,3940,3941,3812,3813,3811,3940,3939,3940,3811,3812,3810,3939,3938,3939,3810,3811,3809,3938,3937,3938,3809,3810,3808,3937,3936,3937,3808,3809,3807,3936,3935,3936,3807,3808,3806,3935,3934,3935,3806,3807,3805,3934,3933,3934,3805,3806,3804,3933,3932,3933,3804,3805,3803,3932,3931,3932,3803,3804,3802,3931,3930,3931,3802,3803,3801,3930,3929,3930,3801,3802,3800,3929,3928,3929,3800,3801,3799,3928,3927,3928,3799,3800,3798,3927,3926,3927,3798,3799,3797,3926,3925,3926,3797,3798,3796,3925,3924,3925,3796,3797,3795,3924,3923,3924,3795,3796,3794,3923,3922,3923,3794,3795,3793,3922,3921,3922,3793,3794,3792,3921,3920,3921,3792,3793,3791,3920,3919,3920,3791,3792,3790,3919,3918,3919,3790,3791,3789,3918,3917,3918,3789,3790,3788,3917,3916,3917,3788,3789,3787,3916,3915,3916,3787,3788,3786,3915,3914,3915,3786,3787,3785,3914,3913,3914,3785,3786,3784,3913,3912,3913,3784,3785,3783,3912,3911,3912,3783,3784,3782,3911,3910,3911,3782,3783,3781,3910,3909,3910,3781,3782,3780,3909,3908,3909,3780,3781,3779,3908,3907,3908,3779,3780,3778,3907,3906,3907,3778,3779,3777,3906,3905,3906,3777,3778,3776,3905,3904,3905,3776,3777,3775,3904,3903,3904,3775,3776,3774,3903,3902,3903,3774,3775,3773,3902,3901,3902,3773,3774,3772,3901,3900,3901,3772,3773,3771,3900,3899,3900,3771,3772,3770,3899,3898,3899,3770,3771,3769,3898,3897,3898,3769,3770,3768,3897,3896,3897,3768,3769,3767,3896,3895,3896,3767,3768,3766,3895,3894,3895,3766,3767,3765,3894,3893,3894,3765,3766,3764,3893,3892,3893,3764,3765,3763,3892,3891,3892,3763,3764,3762,3891,3890,3891,3762,3763,3761,3890,3889,3890,3761,3762,3760,3889,3888,3889,3760,3761,3759,3888,3887,3888,3759,3760,3758,3887,3886,3887,3758,3759,3757,3886,3885,3886,3757,3758,3756,3885,3884,3885,3756,3757,3755,3884,3883,3884,3755,3756,3754,3883,3882,3883,3754,3755,3753,3882,3881,3882,3753,3754,3752,3881,3880,3881,3752,3753,3751,3880,3879,3880,3751,3752,3750,3879,3878,3879,3750,3751,3749,3878,3877,3878,3749,3750,3748,3877,3876,3877,3748,3749,3747,3876,3875,3876,3747,3748,3746,3875,3874,3875,3746,3747,3745,3874,3873,3874,3745,3746,3744,3873,3872,3873,3744,3745,3743,3872,3871,3872,3743,3744,3742,3871,3870,3871,3742,3743,3741,3870,3869,3870,3741,3742,3740,3869,3868,3869,3740,3741,3739,3868,3867,3868,3739,3740,3738,3867,3866,3867,3738,3739,3737,3866,3865,3866,3737,3738,3736,3865,3864,3865,3736,3737,3735,3864,3863,3864,3735,3736,3734,3863,3862,3863,3734,3735,3733,3862,3861,3862,3733,3734,3732,3861,3860,3861,3732,3733,3731,3860,3859,3860,3731,3732,3730,3859,3858,3859,3730,3731,3729,3858,3857,3858,3729,3730,3728,3857,3856,3857,3728,3729,3727,3856,3855,3856,3727,3728,3726,3855,3854,3855,3726,3727,3725,3854,3853,3854,3725,3726,3724,3853,3852,3853,3724,3725,3723,3852,3851,3852,3723,3724,3722,3851,3850,3851,3722,3723,3721,3850,3849,3850,3721,3722,3720,3849,3848,3849,3720,3721,3719,3848,3847,3848,3719,3720,3718,3847,3846,3847,3718,3719,3717,3846,3845,3846,3717,3718,3716,3845,3844,3845,3716,3717,3715,3844,3843,3844,3715,3716,3714,3843,3842,3843,3714,3715,3713,3842,3841,3842,3713,3714,3712,3841,3840,3841,3712,3713,3966,4095,4094,4095,3966,3967,3965,4094,4093,4094,3965,3966,3964,4093,4092,4093,3964,3965,3963,4092,4091,4092,3963,3964,3962,4091,4090,4091,3962,3963,3961,4090,4089,4090,3961,3962,3960,4089,4088,4089,3960,3961,3959,4088,4087,4088,3959,3960,3958,4087,4086,4087,3958,3959,3957,4086,4085,4086,3957,3958,3956,4085,4084,4085,3956,3957,3955,4084,4083,4084,3955,3956,3954,4083,4082,4083,3954,3955,3953,4082,4081,4082,3953,3954,3952,4081,4080,4081,3952,3953,3951,4080,4079,4080,3951,3952,3950,4079,4078,4079,3950,3951,3949,4078,4077,4078,3949,3950,3948,4077,4076,4077,3948,3949,3947,4076,4075,4076,3947,3948,3946,4075,4074,4075,3946,3947,3945,4074,4073,4074,3945,3946,3944,4073,4072,4073,3944,3945,3943,4072,4071,4072,3943,3944,3942,4071,4070,4071,3942,3943,3941,4070,4069,4070,3941,3942,3940,4069,4068,4069,3940,3941,3939,4068,4067,4068,3939,3940,3938,4067,4066,4067,3938,3939,3937,4066,4065,4066,3937,3938,3936,4065,4064,4065,3936,3937,3935,4064,4063,4064,3935,3936,3934,4063,4062,4063,3934,3935,3933,4062,4061,4062,3933,3934,3932,4061,4060,4061,3932,3933,3931,4060,4059,4060,3931,3932,3930,4059,4058,4059,3930,3931,3929,4058,4057,4058,3929,3930,3928,4057,4056,4057,3928,3929,3927,4056,4055,4056,3927,3928,3926,4055,4054,4055,3926,3927,3925,4054,4053,4054,3925,3926,3924,4053,4052,4053,3924,3925,3923,4052,4051,4052,3923,3924,3922,4051,4050,4051,3922,3923,3921,4050,4049,4050,3921,3922,3920,4049,4048,4049,3920,3921,3919,4048,4047,4048,3919,3920,3918,4047,4046,4047,3918,3919,3917,4046,4045,4046,3917,3918,3916,4045,4044,4045,3916,3917,3915,4044,4043,4044,3915,3916,3914,4043,4042,4043,3914,3915,3913,4042,4041,4042,3913,3914,3912,4041,4040,4041,3912,3913,3911,4040,4039,4040,3911,3912,3910,4039,4038,4039,3910,3911,3909,4038,4037,4038,3909,3910,3908,4037,4036,4037,3908,3909,3907,4036,4035,4036,3907,3908,3906,4035,4034,4035,3906,3907,3905,4034,4033,4034,3905,3906,3904,4033,4032,4033,3904,3905,3903,4032,4031,4032,3903,3904,3902,4031,4030,4031,3902,3903,3901,4030,4029,4030,3901,3902,3900,4029,4028,4029,3900,3901,3899,4028,4027,4028,3899,3900,3898,4027,4026,4027,3898,3899,3897,4026,4025,4026,3897,3898,3896,4025,4024,4025,3896,3897,3895,4024,4023,4024,3895,3896,3894,4023,4022,4023,3894,3895,3893,4022,4021,4022,3893,3894,3892,4021,4020,4021,3892,3893,3891,4020,4019,4020,3891,3892,3890,4019,4018,4019,3890,3891,3889,4018,4017,4018,3889,3890,3888,4017,4016,4017,3888,3889,3887,4016,4015,4016,3887,3888,3886,4015,4014,4015,3886,3887,3885,4014,4013,4014,3885,3886,3884,4013,4012,4013,3884,3885,3883,4012,4011,4012,3883,3884,3882,4011,4010,4011,3882,3883,3881,4010,4009,4010,3881,3882,3880,4009,4008,4009,3880,3881,3879,4008,4007,4008,3879,3880,3878,4007,4006,4007,3878,3879,3877,4006,4005,4006,3877,3878,3876,4005,4004,4005,3876,3877,3875,4004,4003,4004,3875,3876,3874,4003,4002,4003,3874,3875,3873,4002,4001,4002,3873,3874,3872,4001,4000,4001,3872,3873,3871,4000,3999,4000,3871,3872,3870,3999,3998,3999,3870,3871,3869,3998,3997,3998,3869,3870,3868,3997,3996,3997,3868,3869,3867,3996,3995,3996,3867,3868,3866,3995,3994,3995,3866,3867,3865,3994,3993,3994,3865,3866,3864,3993,3992,3993,3864,3865,3863,3992,3991,3992,3863,3864,3862,3991,3990,3991,3862,3863,3861,3990,3989,3990,3861,3862,3860,3989,3988,3989,3860,3861,3859,3988,3987,3988,3859,3860,3858,3987,3986,3987,3858,3859,3857,3986,3985,3986,3857,3858,3856,3985,3984,3985,3856,3857,3855,3984,3983,3984,3855,3856,3854,3983,3982,3983,3854,3855,3853,3982,3981,3982,3853,3854,3852,3981,3980,3981,3852,3853,3851,3980,3979,3980,3851,3852,3850,3979,3978,3979,3850,3851,3849,3978,3977,3978,3849,3850,3848,3977,3976,3977,3848,3849,3847,3976,3975,3976,3847,3848,3846,3975,3974,3975,3846,3847,3845,3974,3973,3974,3845,3846,3844,3973,3972,3973,3844,3845,3843,3972,3971,3972,3843,3844,3842,3971,3970,3971,3842,3843,3841,3970,3969,3970,3841,3842,3840,3969,3968,3969,3840,3841,4094,4223,4222,4223,4094,4095,4093,4222,4221,4222,4093,4094,4092,4221,4220,4221,4092,4093,4091,4220,4219,4220,4091,4092,4090,4219,4218,4219,4090,4091,4089,4218,4217,4218,4089,4090,4088,4217,4216,4217,4088,4089,4087,4216,4215,4216,4087,4088,4086,4215,4214,4215,4086,4087,4085,4214,4213,4214,4085,4086,4084,4213,4212,4213,4084,4085,4083,4212,4211,4212,4083,4084,4082,4211,4210,4211,4082,4083,4081,4210,4209,4210,4081,4082,4080,4209,4208,4209,4080,4081,4079,4208,4207,4208,4079,4080,4078,4207,4206,4207,4078,4079,4077,4206,4205,4206,4077,4078,4076,4205,4204,4205,4076,4077,4075,4204,4203,4204,4075,4076,4074,4203,4202,4203,4074,4075,4073,4202,4201,4202,4073,4074,4072,4201,4200,4201,4072,4073,4071,4200,4199,4200,4071,4072,4070,4199,4198,4199,4070,4071,4069,4198,4197,4198,4069,4070,4068,4197,4196,4197,4068,4069,4067,4196,4195,4196,4067,4068,4066,4195,4194,4195,4066,4067,4065,4194,4193,4194,4065,4066,4064,4193,4192,4193,4064,4065,4063,4192,4191,4192,4063,4064,4062,4191,4190,4191,4062,4063,4061,4190,4189,4190,4061,4062,4060,4189,4188,4189,4060,4061,4059,4188,4187,4188,4059,4060,4058,4187,4186,4187,4058,4059,4057,4186,4185,4186,4057,4058,4056,4185,4184,4185,4056,4057,4055,4184,4183,4184,4055,4056,4054,4183,4182,4183,4054,4055,4053,4182,4181,4182,4053,4054,4052,4181,4180,4181,4052,4053,4051,4180,4179,4180,4051,4052,4050,4179,4178,4179,4050,4051,4049,4178,4177,4178,4049,4050,4048,4177,4176,4177,4048,4049,4047,4176,4175,4176,4047,4048,4046,4175,4174,4175,4046,4047,4045,4174,4173,4174,4045,4046,4044,4173,4172,4173,4044,4045,4043,4172,4171,4172,4043,4044,4042,4171,4170,4171,4042,4043,4041,4170,4169,4170,4041,4042,4040,4169,4168,4169,4040,4041,4039,4168,4167,4168,4039,4040,4038,4167,4166,4167,4038,4039,4037,4166,4165,4166,4037,4038,4036,4165,4164,4165,4036,4037,4035,4164,4163,4164,4035,4036,4034,4163,4162,4163,4034,4035,4033,4162,4161,4162,4033,4034,4032,4161,4160,4161,4032,4033,4031,4160,4159,4160,4031,4032,4030,4159,4158,4159,4030,4031,4029,4158,4157,4158,4029,4030,4028,4157,4156,4157,4028,4029,4027,4156,4155,4156,4027,4028,4026,4155,4154,4155,4026,4027,4025,4154,4153,4154,4025,4026,4024,4153,4152,4153,4024,4025,4023,4152,4151,4152,4023,4024,4022,4151,4150,4151,4022,4023,4021,4150,4149,4150,4021,4022,4020,4149,4148,4149,4020,4021,4019,4148,4147,4148,4019,4020,4018,4147,4146,4147,4018,4019,4017,4146,4145,4146,4017,4018,4016,4145,4144,4145,4016,4017,4015,4144,4143,4144,4015,4016,4014,4143,4142,4143,4014,4015,4013,4142,4141,4142,4013,4014,4012,4141,4140,4141,4012,4013,4011,4140,4139,4140,4011,4012,4010,4139,4138,4139,4010,4011,4009,4138,4137,4138,4009,4010,4008,4137,4136,4137,4008,4009,4007,4136,4135,4136,4007,4008,4006,4135,4134,4135,4006,4007,4005,4134,4133,4134,4005,4006,4004,4133,4132,4133,4004,4005,4003,4132,4131,4132,4003,4004,4002,4131,4130,4131,4002,4003,4001,4130,4129,4130,4001,4002,4000,4129,4128,4129,4000,4001,3999,4128,4127,4128,3999,4000,3998,4127,4126,4127,3998,3999,3997,4126,4125,4126,3997,3998,3996,4125,4124,4125,3996,3997,3995,4124,4123,4124,3995,3996,3994,4123,4122,4123,3994,3995,3993,4122,4121,4122,3993,3994,3992,4121,4120,4121,3992,3993,3991,4120,4119,4120,3991,3992,3990,4119,4118,4119,3990,3991,3989,4118,4117,4118,3989,3990,3988,4117,4116,4117,3988,3989,3987,4116,4115,4116,3987,3988,3986,4115,4114,4115,3986,3987,3985,4114,4113,4114,3985,3986,3984,4113,4112,4113,3984,3985,3983,4112,4111,4112,3983,3984,3982,4111,4110,4111,3982,3983,3981,4110,4109,4110,3981,3982,3980,4109,4108,4109,3980,3981,3979,4108,4107,4108,3979,3980,3978,4107,4106,4107,3978,3979,3977,4106,4105,4106,3977,3978,3976,4105,4104,4105,3976,3977,3975,4104,4103,4104,3975,3976,3974,4103,4102,4103,3974,3975,3973,4102,4101,4102,3973,3974,3972,4101,4100,4101,3972,3973,3971,4100,4099,4100,3971,3972,3970,4099,4098,4099,3970,3971,3969,4098,4097,4098,3969,3970,3968,4097,4096,4097,3968,3969,4222,4351,4350,4351,4222,4223,4221,4350,4349,4350,4221,4222,4220,4349,4348,4349,4220,4221,4219,4348,4347,4348,4219,4220,4218,4347,4346,4347,4218,4219,4217,4346,4345,4346,4217,4218,4216,4345,4344,4345,4216,4217,4215,4344,4343,4344,4215,4216,4214,4343,4342,4343,4214,4215,4213,4342,4341,4342,4213,4214,4212,4341,4340,4341,4212,4213,4211,4340,4339,4340,4211,4212,4210,4339,4338,4339,4210,4211,4209,4338,4337,4338,4209,4210,4208,4337,4336,4337,4208,4209,4207,4336,4335,4336,4207,4208,4206,4335,4334,4335,4206,4207,4205,4334,4333,4334,4205,4206,4204,4333,4332,4333,4204,4205,4203,4332,4331,4332,4203,4204,4202,4331,4330,4331,4202,4203,4201,4330,4329,4330,4201,4202,4200,4329,4328,4329,4200,4201,4199,4328,4327,4328,4199,4200,4198,4327,4326,4327,4198,4199,4197,4326,4325,4326,4197,4198,4196,4325,4324,4325,4196,4197,4195,4324,4323,4324,4195,4196,4194,4323,4322,4323,4194,4195,4193,4322,4321,4322,4193,4194,4192,4321,4320,4321,4192,4193,4191,4320,4319,4320,4191,4192,4190,4319,4318,4319,4190,4191,4189,4318,4317,4318,4189,4190,4188,4317,4316,4317,4188,4189,4187,4316,4315,4316,4187,4188,4186,4315,4314,4315,4186,4187,4185,4314,4313,4314,4185,4186,4184,4313,4312,4313,4184,4185,4183,4312,4311,4312,4183,4184,4182,4311,4310,4311,4182,4183,4181,4310,4309,4310,4181,4182,4180,4309,4308,4309,4180,4181,4179,4308,4307,4308,4179,4180,4178,4307,4306,4307,4178,4179,4177,4306,4305,4306,4177,4178,4176,4305,4304,4305,4176,4177,4175,4304,4303,4304,4175,4176,4174,4303,4302,4303,4174,4175,4173,4302,4301,4302,4173,4174,4172,4301,4300,4301,4172,4173,4171,4300,4299,4300,4171,4172,4170,4299,4298,4299,4170,4171,4169,4298,4297,4298,4169,4170,4168,4297,4296,4297,4168,4169,4167,4296,4295,4296,4167,4168,4166,4295,4294,4295,4166,4167,4165,4294,4293,4294,4165,4166,4164,4293,4292,4293,4164,4165,4163,4292,4291,4292,4163,4164,4162,4291,4290,4291,4162,4163,4161,4290,4289,4290,4161,4162,4160,4289,4288,4289,4160,4161,4159,4288,4287,4288,4159,4160,4158,4287,4286,4287,4158,4159,4157,4286,4285,4286,4157,4158,4156,4285,4284,4285,4156,4157,4155,4284,4283,4284,4155,4156,4154,4283,4282,4283,4154,4155,4153,4282,4281,4282,4153,4154,4152,4281,4280,4281,4152,4153,4151,4280,4279,4280,4151,4152,4150,4279,4278,4279,4150,4151,4149,4278,4277,4278,4149,4150,4148,4277,4276,4277,4148,4149,4147,4276,4275,4276,4147,4148,4146,4275,4274,4275,4146,4147,4145,4274,4273,4274,4145,4146,4144,4273,4272,4273,4144,4145,4143,4272,4271,4272,4143,4144,4142,4271,4270,4271,4142,4143,4141,4270,4269,4270,4141,4142,4140,4269,4268,4269,4140,4141,4139,4268,4267,4268,4139,4140,4138,4267,4266,4267,4138,4139,4137,4266,4265,4266,4137,4138,4136,4265,4264,4265,4136,4137,4135,4264,4263,4264,4135,4136,4134,4263,4262,4263,4134,4135,4133,4262,4261,4262,4133,4134,4132,4261,4260,4261,4132,4133,4131,4260,4259,4260,4131,4132,4130,4259,4258,4259,4130,4131,4129,4258,4257,4258,4129,4130,4128,4257,4256,4257,4128,4129,4127,4256,4255,4256,4127,4128,4126,4255,4254,4255,4126,4127,4125,4254,4253,4254,4125,4126,4124,4253,4252,4253,4124,4125,4123,4252,4251,4252,4123,4124,4122,4251,4250,4251,4122,4123,4121,4250,4249,4250,4121,4122,4120,4249,4248,4249,4120,4121,4119,4248,4247,4248,4119,4120,4118,4247,4246,4247,4118,4119,4117,4246,4245,4246,4117,4118,4116,4245,4244,4245,4116,4117,4115,4244,4243,4244,4115,4116,4114,4243,4242,4243,4114,4115,4113,4242,4241,4242,4113,4114,4112,4241,4240,4241,4112,4113,4111,4240,4239,4240,4111,4112,4110,4239,4238,4239,4110,4111,4109,4238,4237,4238,4109,4110,4108,4237,4236,4237,4108,4109,4107,4236,4235,4236,4107,4108,4106,4235,4234,4235,4106,4107,4105,4234,4233,4234,4105,4106,4104,4233,4232,4233,4104,4105,4103,4232,4231,4232,4103,4104,4102,4231,4230,4231,4102,4103,4101,4230,4229,4230,4101,4102,4100,4229,4228,4229,4100,4101,4099,4228,4227,4228,4099,4100,4098,4227,4226,4227,4098,4099,4097,4226,4225,4226,4097,4098,4096,4225,4224,4225,4096,4097,4350,4479,4478,4479,4350,4351,4349,4478,4477,4478,4349,4350,4348,4477,4476,4477,4348,4349,4347,4476,4475,4476,4347,4348,4346,4475,4474,4475,4346,4347,4345,4474,4473,4474,4345,4346,4344,4473,4472,4473,4344,4345,4343,4472,4471,4472,4343,4344,4342,4471,4470,4471,4342,4343,4341,4470,4469,4470,4341,4342,4340,4469,4468,4469,4340,4341,4339,4468,4467,4468,4339,4340,4338,4467,4466,4467,4338,4339,4337,4466,4465,4466,4337,4338,4336,4465,4464,4465,4336,4337,4335,4464,4463,4464,4335,4336,4334,4463,4462,4463,4334,4335,4333,4462,4461,4462,4333,4334,4332,4461,4460,4461,4332,4333,4331,4460,4459,4460,4331,4332,4330,4459,4458,4459,4330,4331,4329,4458,4457,4458,4329,4330,4328,4457,4456,4457,4328,4329,4327,4456,4455,4456,4327,4328,4326,4455,4454,4455,4326,4327,4325,4454,4453,4454,4325,4326,4324,4453,4452,4453,4324,4325,4323,4452,4451,4452,4323,4324,4322,4451,4450,4451,4322,4323,4321,4450,4449,4450,4321,4322,4320,4449,4448,4449,4320,4321,4319,4448,4447,4448,4319,4320,4318,4447,4446,4447,4318,4319,4317,4446,4445,4446,4317,4318,4316,4445,4444,4445,4316,4317,4315,4444,4443,4444,4315,4316,4314,4443,4442,4443,4314,4315,4313,4442,4441,4442,4313,4314,4312,4441,4440,4441,4312,4313,4311,4440,4439,4440,4311,4312,4310,4439,4438,4439,4310,4311,4309,4438,4437,4438,4309,4310,4308,4437,4436,4437,4308,4309,4307,4436,4435,4436,4307,4308,4306,4435,4434,4435,4306,4307,4305,4434,4433,4434,4305,4306,4304,4433,4432,4433,4304,4305,4303,4432,4431,4432,4303,4304,4302,4431,4430,4431,4302,4303,4301,4430,4429,4430,4301,4302,4300,4429,4428,4429,4300,4301,4299,4428,4427,4428,4299,4300,4298,4427,4426,4427,4298,4299,4297,4426,4425,4426,4297,4298,4296,4425,4424,4425,4296,4297,4295,4424,4423,4424,4295,4296,4294,4423,4422,4423,4294,4295,4293,4422,4421,4422,4293,4294,4292,4421,4420,4421,4292,4293,4291,4420,4419,4420,4291,4292,4290,4419,4418,4419,4290,4291,4289,4418,4417,4418,4289,4290,4288,4417,4416,4417,4288,4289,4287,4416,4415,4416,4287,4288,4286,4415,4414,4415,4286,4287,4285,4414,4413,4414,4285,4286,4284,4413,4412,4413,4284,4285,4283,4412,4411,4412,4283,4284,4282,4411,4410,4411,4282,4283,4281,4410,4409,4410,4281,4282,4280,4409,4408,4409,4280,4281,4279,4408,4407,4408,4279,4280,4278,4407,4406,4407,4278,4279,4277,4406,4405,4406,4277,4278,4276,4405,4404,4405,4276,4277,4275,4404,4403,4404,4275,4276,4274,4403,4402,4403,4274,4275,4273,4402,4401,4402,4273,4274,4272,4401,4400,4401,4272,4273,4271,4400,4399,4400,4271,4272,4270,4399,4398,4399,4270,4271,4269,4398,4397,4398,4269,4270,4268,4397,4396,4397,4268,4269,4267,4396,4395,4396,4267,4268,4266,4395,4394,4395,4266,4267,4265,4394,4393,4394,4265,4266,4264,4393,4392,4393,4264,4265,4263,4392,4391,4392,4263,4264,4262,4391,4390,4391,4262,4263,4261,4390,4389,4390,4261,4262,4260,4389,4388,4389,4260,4261,4259,4388,4387,4388,4259,4260,4258,4387,4386,4387,4258,4259,4257,4386,4385,4386,4257,4258,4256,4385,4384,4385,4256,4257,4255,4384,4383,4384,4255,4256,4254,4383,4382,4383,4254,4255,4253,4382,4381,4382,4253,4254,4252,4381,4380,4381,4252,4253,4251,4380,4379,4380,4251,4252,4250,4379,4378,4379,4250,4251,4249,4378,4377,4378,4249,4250,4248,4377,4376,4377,4248,4249,4247,4376,4375,4376,4247,4248,4246,4375,4374,4375,4246,4247,4245,4374,4373,4374,4245,4246,4244,4373,4372,4373,4244,4245,4243,4372,4371,4372,4243,4244,4242,4371,4370,4371,4242,4243,4241,4370,4369,4370,4241,4242,4240,4369,4368,4369,4240,4241,4239,4368,4367,4368,4239,4240,4238,4367,4366,4367,4238,4239,4237,4366,4365,4366,4237,4238,4236,4365,4364,4365,4236,4237,4235,4364,4363,4364,4235,4236,4234,4363,4362,4363,4234,4235,4233,4362,4361,4362,4233,4234,4232,4361,4360,4361,4232,4233,4231,4360,4359,4360,4231,4232,4230,4359,4358,4359,4230,4231,4229,4358,4357,4358,4229,4230,4228,4357,4356,4357,4228,4229,4227,4356,4355,4356,4227,4228,4226,4355,4354,4355,4226,4227,4225,4354,4353,4354,4225,4226,4224,4353,4352,4353,4224,4225,4478,4607,4606,4607,4478,4479,4477,4606,4605,4606,4477,4478,4476,4605,4604,4605,4476,4477,4475,4604,4603,4604,4475,4476,4474,4603,4602,4603,4474,4475,4473,4602,4601,4602,4473,4474,4472,4601,4600,4601,4472,4473,4471,4600,4599,4600,4471,4472,4470,4599,4598,4599,4470,4471,4469,4598,4597,4598,4469,4470,4468,4597,4596,4597,4468,4469,4467,4596,4595,4596,4467,4468,4466,4595,4594,4595,4466,4467,4465,4594,4593,4594,4465,4466,4464,4593,4592,4593,4464,4465,4463,4592,4591,4592,4463,4464,4462,4591,4590,4591,4462,4463,4461,4590,4589,4590,4461,4462,4460,4589,4588,4589,4460,4461,4459,4588,4587,4588,4459,4460,4458,4587,4586,4587,4458,4459,4457,4586,4585,4586,4457,4458,4456,4585,4584,4585,4456,4457,4455,4584,4583,4584,4455,4456,4454,4583,4582,4583,4454,4455,4453,4582,4581,4582,4453,4454,4452,4581,4580,4581,4452,4453,4451,4580,4579,4580,4451,4452,4450,4579,4578,4579,4450,4451,4449,4578,4577,4578,4449,4450,4448,4577,4576,4577,4448,4449,4447,4576,4575,4576,4447,4448,4446,4575,4574,4575,4446,4447,4445,4574,4573,4574,4445,4446,4444,4573,4572,4573,4444,4445,4443,4572,4571,4572,4443,4444,4442,4571,4570,4571,4442,4443,4441,4570,4569,4570,4441,4442,4440,4569,4568,4569,4440,4441,4439,4568,4567,4568,4439,4440,4438,4567,4566,4567,4438,4439,4437,4566,4565,4566,4437,4438,4436,4565,4564,4565,4436,4437,4435,4564,4563,4564,4435,4436,4434,4563,4562,4563,4434,4435,4433,4562,4561,4562,4433,4434,4432,4561,4560,4561,4432,4433,4431,4560,4559,4560,4431,4432,4430,4559,4558,4559,4430,4431,4429,4558,4557,4558,4429,4430,4428,4557,4556,4557,4428,4429,4427,4556,4555,4556,4427,4428,4426,4555,4554,4555,4426,4427,4425,4554,4553,4554,4425,4426,4424,4553,4552,4553,4424,4425,4423,4552,4551,4552,4423,4424,4422,4551,4550,4551,4422,4423,4421,4550,4549,4550,4421,4422,4420,4549,4548,4549,4420,4421,4419,4548,4547,4548,4419,4420,4418,4547,4546,4547,4418,4419,4417,4546,4545,4546,4417,4418,4416,4545,4544,4545,4416,4417,4415,4544,4543,4544,4415,4416,4414,4543,4542,4543,4414,4415,4413,4542,4541,4542,4413,4414,4412,4541,4540,4541,4412,4413,4411,4540,4539,4540,4411,4412,4410,4539,4538,4539,4410,4411,4409,4538,4537,4538,4409,4410,4408,4537,4536,4537,4408,4409,4407,4536,4535,4536,4407,4408,4406,4535,4534,4535,4406,4407,4405,4534,4533,4534,4405,4406,4404,4533,4532,4533,4404,4405,4403,4532,4531,4532,4403,4404,4402,4531,4530,4531,4402,4403,4401,4530,4529,4530,4401,4402,4400,4529,4528,4529,4400,4401,4399,4528,4527,4528,4399,4400,4398,4527,4526,4527,4398,4399,4397,4526,4525,4526,4397,4398,4396,4525,4524,4525,4396,4397,4395,4524,4523,4524,4395,4396,4394,4523,4522,4523,4394,4395,4393,4522,4521,4522,4393,4394,4392,4521,4520,4521,4392,4393,4391,4520,4519,4520,4391,4392,4390,4519,4518,4519,4390,4391,4389,4518,4517,4518,4389,4390,4388,4517,4516,4517,4388,4389,4387,4516,4515,4516,4387,4388,4386,4515,4514,4515,4386,4387,4385,4514,4513,4514,4385,4386,4384,4513,4512,4513,4384,4385,4383,4512,4511,4512,4383,4384,4382,4511,4510,4511,4382,4383,4381,4510,4509,4510,4381,4382,4380,4509,4508,4509,4380,4381,4379,4508,4507,4508,4379,4380,4378,4507,4506,4507,4378,4379,4377,4506,4505,4506,4377,4378,4376,4505,4504,4505,4376,4377,4375,4504,4503,4504,4375,4376,4374,4503,4502,4503,4374,4375,4373,4502,4501,4502,4373,4374,4372,4501,4500,4501,4372,4373,4371,4500,4499,4500,4371,4372,4370,4499,4498,4499,4370,4371,4369,4498,4497,4498,4369,4370,4368,4497,4496,4497,4368,4369,4367,4496,4495,4496,4367,4368,4366,4495,4494,4495,4366,4367,4365,4494,4493,4494,4365,4366,4364,4493,4492,4493,4364,4365,4363,4492,4491,4492,4363,4364,4362,4491,4490,4491,4362,4363,4361,4490,4489,4490,4361,4362,4360,4489,4488,4489,4360,4361,4359,4488,4487,4488,4359,4360,4358,4487,4486,4487,4358,4359,4357,4486,4485,4486,4357,4358,4356,4485,4484,4485,4356,4357,4355,4484,4483,4484,4355,4356,4354,4483,4482,4483,4354,4355,4353,4482,4481,4482,4353,4354,4352,4481,4480,4481,4352,4353,4606,4735,4734,4735,4606,4607,4605,4734,4733,4734,4605,4606,4604,4733,4732,4733,4604,4605,4603,4732,4731,4732,4603,4604,4602,4731,4730,4731,4602,4603,4601,4730,4729,4730,4601,4602,4600,4729,4728,4729,4600,4601,4599,4728,4727,4728,4599,4600,4598,4727,4726,4727,4598,4599,4597,4726,4725,4726,4597,4598,4596,4725,4724,4725,4596,4597,4595,4724,4723,4724,4595,4596,4594,4723,4722,4723,4594,4595,4593,4722,4721,4722,4593,4594,4592,4721,4720,4721,4592,4593,4591,4720,4719,4720,4591,4592,4590,4719,4718,4719,4590,4591,4589,4718,4717,4718,4589,4590,4588,4717,4716,4717,4588,4589,4587,4716,4715,4716,4587,4588,4586,4715,4714,4715,4586,4587,4585,4714,4713,4714,4585,4586,4584,4713,4712,4713,4584,4585,4583,4712,4711,4712,4583,4584,4582,4711,4710,4711,4582,4583,4581,4710,4709,4710,4581,4582,4580,4709,4708,4709,4580,4581,4579,4708,4707,4708,4579,4580,4578,4707,4706,4707,4578,4579,4577,4706,4705,4706,4577,4578,4576,4705,4704,4705,4576,4577,4575,4704,4703,4704,4575,4576,4574,4703,4702,4703,4574,4575,4573,4702,4701,4702,4573,4574,4572,4701,4700,4701,4572,4573,4571,4700,4699,4700,4571,4572,4570,4699,4698,4699,4570,4571,4569,4698,4697,4698,4569,4570,4568,4697,4696,4697,4568,4569,4567,4696,4695,4696,4567,4568,4566,4695,4694,4695,4566,4567,4565,4694,4693,4694,4565,4566,4564,4693,4692,4693,4564,4565,4563,4692,4691,4692,4563,4564,4562,4691,4690,4691,4562,4563,4561,4690,4689,4690,4561,4562,4560,4689,4688,4689,4560,4561,4559,4688,4687,4688,4559,4560,4558,4687,4686,4687,4558,4559,4557,4686,4685,4686,4557,4558,4556,4685,4684,4685,4556,4557,4555,4684,4683,4684,4555,4556,4554,4683,4682,4683,4554,4555,4553,4682,4681,4682,4553,4554,4552,4681,4680,4681,4552,4553,4551,4680,4679,4680,4551,4552,4550,4679,4678,4679,4550,4551,4549,4678,4677,4678,4549,4550,4548,4677,4676,4677,4548,4549,4547,4676,4675,4676,4547,4548,4546,4675,4674,4675,4546,4547,4545,4674,4673,4674,4545,4546,4544,4673,4672,4673,4544,4545,4543,4672,4671,4672,4543,4544,4542,4671,4670,4671,4542,4543,4541,4670,4669,4670,4541,4542,4540,4669,4668,4669,4540,4541,4539,4668,4667,4668,4539,4540,4538,4667,4666,4667,4538,4539,4537,4666,4665,4666,4537,4538,4536,4665,4664,4665,4536,4537,4535,4664,4663,4664,4535,4536,4534,4663,4662,4663,4534,4535,4533,4662,4661,4662,4533,4534,4532,4661,4660,4661,4532,4533,4531,4660,4659,4660,4531,4532,4530,4659,4658,4659,4530,4531,4529,4658,4657,4658,4529,4530,4528,4657,4656,4657,4528,4529,4527,4656,4655,4656,4527,4528,4526,4655,4654,4655,4526,4527,4525,4654,4653,4654,4525,4526,4524,4653,4652,4653,4524,4525,4523,4652,4651,4652,4523,4524,4522,4651,4650,4651,4522,4523,4521,4650,4649,4650,4521,4522,4520,4649,4648,4649,4520,4521,4519,4648,4647,4648,4519,4520,4518,4647,4646,4647,4518,4519,4517,4646,4645,4646,4517,4518,4516,4645,4644,4645,4516,4517,4515,4644,4643,4644,4515,4516,4514,4643,4642,4643,4514,4515,4513,4642,4641,4642,4513,4514,4512,4641,4640,4641,4512,4513,4511,4640,4639,4640,4511,4512,4510,4639,4638,4639,4510,4511,4509,4638,4637,4638,4509,4510,4508,4637,4636,4637,4508,4509,4507,4636,4635,4636,4507,4508,4506,4635,4634,4635,4506,4507,4505,4634,4633,4634,4505,4506,4504,4633,4632,4633,4504,4505,4503,4632,4631,4632,4503,4504,4502,4631,4630,4631,4502,4503,4501,4630,4629,4630,4501,4502,4500,4629,4628,4629,4500,4501,4499,4628,4627,4628,4499,4500,4498,4627,4626,4627,4498,4499,4497,4626,4625,4626,4497,4498,4496,4625,4624,4625,4496,4497,4495,4624,4623,4624,4495,4496,4494,4623,4622,4623,4494,4495,4493,4622,4621,4622,4493,4494,4492,4621,4620,4621,4492,4493,4491,4620,4619,4620,4491,4492,4490,4619,4618,4619,4490,4491,4489,4618,4617,4618,4489,4490,4488,4617,4616,4617,4488,4489,4487,4616,4615,4616,4487,4488,4486,4615,4614,4615,4486,4487,4485,4614,4613,4614,4485,4486,4484,4613,4612,4613,4484,4485,4483,4612,4611,4612,4483,4484,4482,4611,4610,4611,4482,4483,4481,4610,4609,4610,4481,4482,4480,4609,4608,4609,4480,4481,4734,4863,4862,4863,4734,4735,4733,4862,4861,4862,4733,4734,4732,4861,4860,4861,4732,4733,4731,4860,4859,4860,4731,4732,4730,4859,4858,4859,4730,4731,4729,4858,4857,4858,4729,4730,4728,4857,4856,4857,4728,4729,4727,4856,4855,4856,4727,4728,4726,4855,4854,4855,4726,4727,4725,4854,4853,4854,4725,4726,4724,4853,4852,4853,4724,4725,4723,4852,4851,4852,4723,4724,4722,4851,4850,4851,4722,4723,4721,4850,4849,4850,4721,4722,4720,4849,4848,4849,4720,4721,4719,4848,4847,4848,4719,4720,4718,4847,4846,4847,4718,4719,4717,4846,4845,4846,4717,4718,4716,4845,4844,4845,4716,4717,4715,4844,4843,4844,4715,4716,4714,4843,4842,4843,4714,4715,4713,4842,4841,4842,4713,4714,4712,4841,4840,4841,4712,4713,4711,4840,4839,4840,4711,4712,4710,4839,4838,4839,4710,4711,4709,4838,4837,4838,4709,4710,4708,4837,4836,4837,4708,4709,4707,4836,4835,4836,4707,4708,4706,4835,4834,4835,4706,4707,4705,4834,4833,4834,4705,4706,4704,4833,4832,4833,4704,4705,4703,4832,4831,4832,4703,4704,4702,4831,4830,4831,4702,4703,4701,4830,4829,4830,4701,4702,4700,4829,4828,4829,4700,4701,4699,4828,4827,4828,4699,4700,4698,4827,4826,4827,4698,4699,4697,4826,4825,4826,4697,4698,4696,4825,4824,4825,4696,4697,4695,4824,4823,4824,4695,4696,4694,4823,4822,4823,4694,4695,4693,4822,4821,4822,4693,4694,4692,4821,4820,4821,4692,4693,4691,4820,4819,4820,4691,4692,4690,4819,4818,4819,4690,4691,4689,4818,4817,4818,4689,4690,4688,4817,4816,4817,4688,4689,4687,4816,4815,4816,4687,4688,4686,4815,4814,4815,4686,4687,4685,4814,4813,4814,4685,4686,4684,4813,4812,4813,4684,4685,4683,4812,4811,4812,4683,4684,4682,4811,4810,4811,4682,4683,4681,4810,4809,4810,4681,4682,4680,4809,4808,4809,4680,4681,4679,4808,4807,4808,4679,4680,4678,4807,4806,4807,4678,4679,4677,4806,4805,4806,4677,4678,4676,4805,4804,4805,4676,4677,4675,4804,4803,4804,4675,4676,4674,4803,4802,4803,4674,4675,4673,4802,4801,4802,4673,4674,4672,4801,4800,4801,4672,4673,4671,4800,4799,4800,4671,4672,4670,4799,4798,4799,4670,4671,4669,4798,4797,4798,4669,4670,4668,4797,4796,4797,4668,4669,4667,4796,4795,4796,4667,4668,4666,4795,4794,4795,4666,4667,4665,4794,4793,4794,4665,4666,4664,4793,4792,4793,4664,4665,4663,4792,4791,4792,4663,4664,4662,4791,4790,4791,4662,4663,4661,4790,4789,4790,4661,4662,4660,4789,4788,4789,4660,4661,4659,4788,4787,4788,4659,4660,4658,4787,4786,4787,4658,4659,4657,4786,4785,4786,4657,4658,4656,4785,4784,4785,4656,4657,4655,4784,4783,4784,4655,4656,4654,4783,4782,4783,4654,4655,4653,4782,4781,4782,4653,4654,4652,4781,4780,4781,4652,4653,4651,4780,4779,4780,4651,4652,4650,4779,4778,4779,4650,4651,4649,4778,4777,4778,4649,4650,4648,4777,4776,4777,4648,4649,4647,4776,4775,4776,4647,4648,4646,4775,4774,4775,4646,4647,4645,4774,4773,4774,4645,4646,4644,4773,4772,4773,4644,4645,4643,4772,4771,4772,4643,4644,4642,4771,4770,4771,4642,4643,4641,4770,4769,4770,4641,4642,4640,4769,4768,4769,4640,4641,4639,4768,4767,4768,4639,4640,4638,4767,4766,4767,4638,4639,4637,4766,4765,4766,4637,4638,4636,4765,4764,4765,4636,4637,4635,4764,4763,4764,4635,4636,4634,4763,4762,4763,4634,4635,4633,4762,4761,4762,4633,4634,4632,4761,4760,4761,4632,4633,4631,4760,4759,4760,4631,4632,4630,4759,4758,4759,4630,4631,4629,4758,4757,4758,4629,4630,4628,4757,4756,4757,4628,4629,4627,4756,4755,4756,4627,4628,4626,4755,4754,4755,4626,4627,4625,4754,4753,4754,4625,4626,4624,4753,4752,4753,4624,4625,4623,4752,4751,4752,4623,4624,4622,4751,4750,4751,4622,4623,4621,4750,4749,4750,4621,4622,4620,4749,4748,4749,4620,4621,4619,4748,4747,4748,4619,4620,4618,4747,4746,4747,4618,4619,4617,4746,4745,4746,4617,4618,4616,4745,4744,4745,4616,4617,4615,4744,4743,4744,4615,4616,4614,4743,4742,4743,4614,4615,4613,4742,4741,4742,4613,4614,4612,4741,4740,4741,4612,4613,4611,4740,4739,4740,4611,4612,4610,4739,4738,4739,4610,4611,4609,4738,4737,4738,4609,4610,4608,4737,4736,4737,4608,4609,4862,4991,4990,4991,4862,4863,4861,4990,4989,4990,4861,4862,4860,4989,4988,4989,4860,4861,4859,4988,4987,4988,4859,4860,4858,4987,4986,4987,4858,4859,4857,4986,4985,4986,4857,4858,4856,4985,4984,4985,4856,4857,4855,4984,4983,4984,4855,4856,4854,4983,4982,4983,4854,4855,4853,4982,4981,4982,4853,4854,4852,4981,4980,4981,4852,4853,4851,4980,4979,4980,4851,4852,4850,4979,4978,4979,4850,4851,4849,4978,4977,4978,4849,4850,4848,4977,4976,4977,4848,4849,4847,4976,4975,4976,4847,4848,4846,4975,4974,4975,4846,4847,4845,4974,4973,4974,4845,4846,4844,4973,4972,4973,4844,4845,4843,4972,4971,4972,4843,4844,4842,4971,4970,4971,4842,4843,4841,4970,4969,4970,4841,4842,4840,4969,4968,4969,4840,4841,4839,4968,4967,4968,4839,4840,4838,4967,4966,4967,4838,4839,4837,4966,4965,4966,4837,4838,4836,4965,4964,4965,4836,4837,4835,4964,4963,4964,4835,4836,4834,4963,4962,4963,4834,4835,4833,4962,4961,4962,4833,4834,4832,4961,4960,4961,4832,4833,4831,4960,4959,4960,4831,4832,4830,4959,4958,4959,4830,4831,4829,4958,4957,4958,4829,4830,4828,4957,4956,4957,4828,4829,4827,4956,4955,4956,4827,4828,4826,4955,4954,4955,4826,4827,4825,4954,4953,4954,4825,4826,4824,4953,4952,4953,4824,4825,4823,4952,4951,4952,4823,4824,4822,4951,4950,4951,4822,4823,4821,4950,4949,4950,4821,4822,4820,4949,4948,4949,4820,4821,4819,4948,4947,4948,4819,4820,4818,4947,4946,4947,4818,4819,4817,4946,4945,4946,4817,4818,4816,4945,4944,4945,4816,4817,4815,4944,4943,4944,4815,4816,4814,4943,4942,4943,4814,4815,4813,4942,4941,4942,4813,4814,4812,4941,4940,4941,4812,4813,4811,4940,4939,4940,4811,4812,4810,4939,4938,4939,4810,4811,4809,4938,4937,4938,4809,4810,4808,4937,4936,4937,4808,4809,4807,4936,4935,4936,4807,4808,4806,4935,4934,4935,4806,4807,4805,4934,4933,4934,4805,4806,4804,4933,4932,4933,4804,4805,4803,4932,4931,4932,4803,4804,4802,4931,4930,4931,4802,4803,4801,4930,4929,4930,4801,4802,4800,4929,4928,4929,4800,4801,4799,4928,4927,4928,4799,4800,4798,4927,4926,4927,4798,4799,4797,4926,4925,4926,4797,4798,4796,4925,4924,4925,4796,4797,4795,4924,4923,4924,4795,4796,4794,4923,4922,4923,4794,4795,4793,4922,4921,4922,4793,4794,4792,4921,4920,4921,4792,4793,4791,4920,4919,4920,4791,4792,4790,4919,4918,4919,4790,4791,4789,4918,4917,4918,4789,4790,4788,4917,4916,4917,4788,4789,4787,4916,4915,4916,4787,4788,4786,4915,4914,4915,4786,4787,4785,4914,4913,4914,4785,4786,4784,4913,4912,4913,4784,4785,4783,4912,4911,4912,4783,4784,4782,4911,4910,4911,4782,4783,4781,4910,4909,4910,4781,4782,4780,4909,4908,4909,4780,4781,4779,4908,4907,4908,4779,4780,4778,4907,4906,4907,4778,4779,4777,4906,4905,4906,4777,4778,4776,4905,4904,4905,4776,4777,4775,4904,4903,4904,4775,4776,4774,4903,4902,4903,4774,4775,4773,4902,4901,4902,4773,4774,4772,4901,4900,4901,4772,4773,4771,4900,4899,4900,4771,4772,4770,4899,4898,4899,4770,4771,4769,4898,4897,4898,4769,4770,4768,4897,4896,4897,4768,4769,4767,4896,4895,4896,4767,4768,4766,4895,4894,4895,4766,4767,4765,4894,4893,4894,4765,4766,4764,4893,4892,4893,4764,4765,4763,4892,4891,4892,4763,4764,4762,4891,4890,4891,4762,4763,4761,4890,4889,4890,4761,4762,4760,4889,4888,4889,4760,4761,4759,4888,4887,4888,4759,4760,4758,4887,4886,4887,4758,4759,4757,4886,4885,4886,4757,4758,4756,4885,4884,4885,4756,4757,4755,4884,4883,4884,4755,4756,4754,4883,4882,4883,4754,4755,4753,4882,4881,4882,4753,4754,4752,4881,4880,4881,4752,4753,4751,4880,4879,4880,4751,4752,4750,4879,4878,4879,4750,4751,4749,4878,4877,4878,4749,4750,4748,4877,4876,4877,4748,4749,4747,4876,4875,4876,4747,4748,4746,4875,4874,4875,4746,4747,4745,4874,4873,4874,4745,4746,4744,4873,4872,4873,4744,4745,4743,4872,4871,4872,4743,4744,4742,4871,4870,4871,4742,4743,4741,4870,4869,4870,4741,4742,4740,4869,4868,4869,4740,4741,4739,4868,4867,4868,4739,4740,4738,4867,4866,4867,4738,4739,4737,4866,4865,4866,4737,4738,4736,4865,4864,4865,4736,4737,4990,5119,5118,5119,4990,4991,4989,5118,5117,5118,4989,4990,4988,5117,5116,5117,4988,4989,4987,5116,5115,5116,4987,4988,4986,5115,5114,5115,4986,4987,4985,5114,5113,5114,4985,4986,4984,5113,5112,5113,4984,4985,4983,5112,5111,5112,4983,4984,4982,5111,5110,5111,4982,4983,4981,5110,5109,5110,4981,4982,4980,5109,5108,5109,4980,4981,4979,5108,5107,5108,4979,4980,4978,5107,5106,5107,4978,4979,4977,5106,5105,5106,4977,4978,4976,5105,5104,5105,4976,4977,4975,5104,5103,5104,4975,4976,4974,5103,5102,5103,4974,4975,4973,5102,5101,5102,4973,4974,4972,5101,5100,5101,4972,4973,4971,5100,5099,5100,4971,4972,4970,5099,5098,5099,4970,4971,4969,5098,5097,5098,4969,4970,4968,5097,5096,5097,4968,4969,4967,5096,5095,5096,4967,4968,4966,5095,5094,5095,4966,4967,4965,5094,5093,5094,4965,4966,4964,5093,5092,5093,4964,4965,4963,5092,5091,5092,4963,4964,4962,5091,5090,5091,4962,4963,4961,5090,5089,5090,4961,4962,4960,5089,5088,5089,4960,4961,4959,5088,5087,5088,4959,4960,4958,5087,5086,5087,4958,4959,4957,5086,5085,5086,4957,4958,4956,5085,5084,5085,4956,4957,4955,5084,5083,5084,4955,4956,4954,5083,5082,5083,4954,4955,4953,5082,5081,5082,4953,4954,4952,5081,5080,5081,4952,4953,4951,5080,5079,5080,4951,4952,4950,5079,5078,5079,4950,4951,4949,5078,5077,5078,4949,4950,4948,5077,5076,5077,4948,4949,4947,5076,5075,5076,4947,4948,4946,5075,5074,5075,4946,4947,4945,5074,5073,5074,4945,4946,4944,5073,5072,5073,4944,4945,4943,5072,5071,5072,4943,4944,4942,5071,5070,5071,4942,4943,4941,5070,5069,5070,4941,4942,4940,5069,5068,5069,4940,4941,4939,5068,5067,5068,4939,4940,4938,5067,5066,5067,4938,4939,4937,5066,5065,5066,4937,4938,4936,5065,5064,5065,4936,4937,4935,5064,5063,5064,4935,4936,4934,5063,5062,5063,4934,4935,4933,5062,5061,5062,4933,4934,4932,5061,5060,5061,4932,4933,4931,5060,5059,5060,4931,4932,4930,5059,5058,5059,4930,4931,4929,5058,5057,5058,4929,4930,4928,5057,5056,5057,4928,4929,4927,5056,5055,5056,4927,4928,4926,5055,5054,5055,4926,4927,4925,5054,5053,5054,4925,4926,4924,5053,5052,5053,4924,4925,4923,5052,5051,5052,4923,4924,4922,5051,5050,5051,4922,4923,4921,5050,5049,5050,4921,4922,4920,5049,5048,5049,4920,4921,4919,5048,5047,5048,4919,4920,4918,5047,5046,5047,4918,4919,4917,5046,5045,5046,4917,4918,4916,5045,5044,5045,4916,4917,4915,5044,5043,5044,4915,4916,4914,5043,5042,5043,4914,4915,4913,5042,5041,5042,4913,4914,4912,5041,5040,5041,4912,4913,4911,5040,5039,5040,4911,4912,4910,5039,5038,5039,4910,4911,4909,5038,5037,5038,4909,4910,4908,5037,5036,5037,4908,4909,4907,5036,5035,5036,4907,4908,4906,5035,5034,5035,4906,4907,4905,5034,5033,5034,4905,4906,4904,5033,5032,5033,4904,4905,4903,5032,5031,5032,4903,4904,4902,5031,5030,5031,4902,4903,4901,5030,5029,5030,4901,4902,4900,5029,5028,5029,4900,4901,4899,5028,5027,5028,4899,4900,4898,5027,5026,5027,4898,4899,4897,5026,5025,5026,4897,4898,4896,5025,5024,5025,4896,4897,4895,5024,5023,5024,4895,4896,4894,5023,5022,5023,4894,4895,4893,5022,5021,5022,4893,4894,4892,5021,5020,5021,4892,4893,4891,5020,5019,5020,4891,4892,4890,5019,5018,5019,4890,4891,4889,5018,5017,5018,4889,4890,4888,5017,5016,5017,4888,4889,4887,5016,5015,5016,4887,4888,4886,5015,5014,5015,4886,4887,4885,5014,5013,5014,4885,4886,4884,5013,5012,5013,4884,4885,4883,5012,5011,5012,4883,4884,4882,5011,5010,5011,4882,4883,4881,5010,5009,5010,4881,4882,4880,5009,5008,5009,4880,4881,4879,5008,5007,5008,4879,4880,4878,5007,5006,5007,4878,4879,4877,5006,5005,5006,4877,4878,4876,5005,5004,5005,4876,4877,4875,5004,5003,5004,4875,4876,4874,5003,5002,5003,4874,4875,4873,5002,5001,5002,4873,4874,4872,5001,5000,5001,4872,4873,4871,5000,4999,5000,4871,4872,4870,4999,4998,4999,4870,4871,4869,4998,4997,4998,4869,4870,4868,4997,4996,4997,4868,4869,4867,4996,4995,4996,4867,4868,4866,4995,4994,4995,4866,4867,4865,4994,4993,4994,4865,4866,4864,4993,4992,4993,4864,4865,5118,5247,5246,5247,5118,5119,5117,5246,5245,5246,5117,5118,5116,5245,5244,5245,5116,5117,5115,5244,5243,5244,5115,5116,5114,5243,5242,5243,5114,5115,5113,5242,5241,5242,5113,5114,5112,5241,5240,5241,5112,5113,5111,5240,5239,5240,5111,5112,5110,5239,5238,5239,5110,5111,5109,5238,5237,5238,5109,5110,5108,5237,5236,5237,5108,5109,5107,5236,5235,5236,5107,5108,5106,5235,5234,5235,5106,5107,5105,5234,5233,5234,5105,5106,5104,5233,5232,5233,5104,5105,5103,5232,5231,5232,5103,5104,5102,5231,5230,5231,5102,5103,5101,5230,5229,5230,5101,5102,5100,5229,5228,5229,5100,5101,5099,5228,5227,5228,5099,5100,5098,5227,5226,5227,5098,5099,5097,5226,5225,5226,5097,5098,5096,5225,5224,5225,5096,5097,5095,5224,5223,5224,5095,5096,5094,5223,5222,5223,5094,5095,5093,5222,5221,5222,5093,5094,5092,5221,5220,5221,5092,5093,5091,5220,5219,5220,5091,5092,5090,5219,5218,5219,5090,5091,5089,5218,5217,5218,5089,5090,5088,5217,5216,5217,5088,5089,5087,5216,5215,5216,5087,5088,5086,5215,5214,5215,5086,5087,5085,5214,5213,5214,5085,5086,5084,5213,5212,5213,5084,5085,5083,5212,5211,5212,5083,5084,5082,5211,5210,5211,5082,5083,5081,5210,5209,5210,5081,5082,5080,5209,5208,5209,5080,5081,5079,5208,5207,5208,5079,5080,5078,5207,5206,5207,5078,5079,5077,5206,5205,5206,5077,5078,5076,5205,5204,5205,5076,5077,5075,5204,5203,5204,5075,5076,5074,5203,5202,5203,5074,5075,5073,5202,5201,5202,5073,5074,5072,5201,5200,5201,5072,5073,5071,5200,5199,5200,5071,5072,5070,5199,5198,5199,5070,5071,5069,5198,5197,5198,5069,5070,5068,5197,5196,5197,5068,5069,5067,5196,5195,5196,5067,5068,5066,5195,5194,5195,5066,5067,5065,5194,5193,5194,5065,5066,5064,5193,5192,5193,5064,5065,5063,5192,5191,5192,5063,5064,5062,5191,5190,5191,5062,5063,5061,5190,5189,5190,5061,5062,5060,5189,5188,5189,5060,5061,5059,5188,5187,5188,5059,5060,5058,5187,5186,5187,5058,5059,5057,5186,5185,5186,5057,5058,5056,5185,5184,5185,5056,5057,5055,5184,5183,5184,5055,5056,5054,5183,5182,5183,5054,5055,5053,5182,5181,5182,5053,5054,5052,5181,5180,5181,5052,5053,5051,5180,5179,5180,5051,5052,5050,5179,5178,5179,5050,5051,5049,5178,5177,5178,5049,5050,5048,5177,5176,5177,5048,5049,5047,5176,5175,5176,5047,5048,5046,5175,5174,5175,5046,5047,5045,5174,5173,5174,5045,5046,5044,5173,5172,5173,5044,5045,5043,5172,5171,5172,5043,5044,5042,5171,5170,5171,5042,5043,5041,5170,5169,5170,5041,5042,5040,5169,5168,5169,5040,5041,5039,5168,5167,5168,5039,5040,5038,5167,5166,5167,5038,5039,5037,5166,5165,5166,5037,5038,5036,5165,5164,5165,5036,5037,5035,5164,5163,5164,5035,5036,5034,5163,5162,5163,5034,5035,5033,5162,5161,5162,5033,5034,5032,5161,5160,5161,5032,5033,5031,5160,5159,5160,5031,5032,5030,5159,5158,5159,5030,5031,5029,5158,5157,5158,5029,5030,5028,5157,5156,5157,5028,5029,5027,5156,5155,5156,5027,5028,5026,5155,5154,5155,5026,5027,5025,5154,5153,5154,5025,5026,5024,5153,5152,5153,5024,5025,5023,5152,5151,5152,5023,5024,5022,5151,5150,5151,5022,5023,5021,5150,5149,5150,5021,5022,5020,5149,5148,5149,5020,5021,5019,5148,5147,5148,5019,5020,5018,5147,5146,5147,5018,5019,5017,5146,5145,5146,5017,5018,5016,5145,5144,5145,5016,5017,5015,5144,5143,5144,5015,5016,5014,5143,5142,5143,5014,5015,5013,5142,5141,5142,5013,5014,5012,5141,5140,5141,5012,5013,5011,5140,5139,5140,5011,5012,5010,5139,5138,5139,5010,5011,5009,5138,5137,5138,5009,5010,5008,5137,5136,5137,5008,5009,5007,5136,5135,5136,5007,5008,5006,5135,5134,5135,5006,5007,5005,5134,5133,5134,5005,5006,5004,5133,5132,5133,5004,5005,5003,5132,5131,5132,5003,5004,5002,5131,5130,5131,5002,5003,5001,5130,5129,5130,5001,5002,5000,5129,5128,5129,5000,5001,4999,5128,5127,5128,4999,5000,4998,5127,5126,5127,4998,4999,4997,5126,5125,5126,4997,4998,4996,5125,5124,5125,4996,4997,4995,5124,5123,5124,4995,4996,4994,5123,5122,5123,4994,4995,4993,5122,5121,5122,4993,4994,4992,5121,5120,5121,4992,4993,5246,5375,5374,5375,5246,5247,5245,5374,5373,5374,5245,5246,5244,5373,5372,5373,5244,5245,5243,5372,5371,5372,5243,5244,5242,5371,5370,5371,5242,5243,5241,5370,5369,5370,5241,5242,5240,5369,5368,5369,5240,5241,5239,5368,5367,5368,5239,5240,5238,5367,5366,5367,5238,5239,5237,5366,5365,5366,5237,5238,5236,5365,5364,5365,5236,5237,5235,5364,5363,5364,5235,5236,5234,5363,5362,5363,5234,5235,5233,5362,5361,5362,5233,5234,5232,5361,5360,5361,5232,5233,5231,5360,5359,5360,5231,5232,5230,5359,5358,5359,5230,5231,5229,5358,5357,5358,5229,5230,5228,5357,5356,5357,5228,5229,5227,5356,5355,5356,5227,5228,5226,5355,5354,5355,5226,5227,5225,5354,5353,5354,5225,5226,5224,5353,5352,5353,5224,5225,5223,5352,5351,5352,5223,5224,5222,5351,5350,5351,5222,5223,5221,5350,5349,5350,5221,5222,5220,5349,5348,5349,5220,5221,5219,5348,5347,5348,5219,5220,5218,5347,5346,5347,5218,5219,5217,5346,5345,5346,5217,5218,5216,5345,5344,5345,5216,5217,5215,5344,5343,5344,5215,5216,5214,5343,5342,5343,5214,5215,5213,5342,5341,5342,5213,5214,5212,5341,5340,5341,5212,5213,5211,5340,5339,5340,5211,5212,5210,5339,5338,5339,5210,5211,5209,5338,5337,5338,5209,5210,5208,5337,5336,5337,5208,5209,5207,5336,5335,5336,5207,5208,5206,5335,5334,5335,5206,5207,5205,5334,5333,5334,5205,5206,5204,5333,5332,5333,5204,5205,5203,5332,5331,5332,5203,5204,5202,5331,5330,5331,5202,5203,5201,5330,5329,5330,5201,5202,5200,5329,5328,5329,5200,5201,5199,5328,5327,5328,5199,5200,5198,5327,5326,5327,5198,5199,5197,5326,5325,5326,5197,5198,5196,5325,5324,5325,5196,5197,5195,5324,5323,5324,5195,5196,5194,5323,5322,5323,5194,5195,5193,5322,5321,5322,5193,5194,5192,5321,5320,5321,5192,5193,5191,5320,5319,5320,5191,5192,5190,5319,5318,5319,5190,5191,5189,5318,5317,5318,5189,5190,5188,5317,5316,5317,5188,5189,5187,5316,5315,5316,5187,5188,5186,5315,5314,5315,5186,5187,5185,5314,5313,5314,5185,5186,5184,5313,5312,5313,5184,5185,5183,5312,5311,5312,5183,5184,5182,5311,5310,5311,5182,5183,5181,5310,5309,5310,5181,5182,5180,5309,5308,5309,5180,5181,5179,5308,5307,5308,5179,5180,5178,5307,5306,5307,5178,5179,5177,5306,5305,5306,5177,5178,5176,5305,5304,5305,5176,5177,5175,5304,5303,5304,5175,5176,5174,5303,5302,5303,5174,5175,5173,5302,5301,5302,5173,5174,5172,5301,5300,5301,5172,5173,5171,5300,5299,5300,5171,5172,5170,5299,5298,5299,5170,5171,5169,5298,5297,5298,5169,5170,5168,5297,5296,5297,5168,5169,5167,5296,5295,5296,5167,5168,5166,5295,5294,5295,5166,5167,5165,5294,5293,5294,5165,5166,5164,5293,5292,5293,5164,5165,5163,5292,5291,5292,5163,5164,5162,5291,5290,5291,5162,5163,5161,5290,5289,5290,5161,5162,5160,5289,5288,5289,5160,5161,5159,5288,5287,5288,5159,5160,5158,5287,5286,5287,5158,5159,5157,5286,5285,5286,5157,5158,5156,5285,5284,5285,5156,5157,5155,5284,5283,5284,5155,5156,5154,5283,5282,5283,5154,5155,5153,5282,5281,5282,5153,5154,5152,5281,5280,5281,5152,5153,5151,5280,5279,5280,5151,5152,5150,5279,5278,5279,5150,5151,5149,5278,5277,5278,5149,5150,5148,5277,5276,5277,5148,5149,5147,5276,5275,5276,5147,5148,5146,5275,5274,5275,5146,5147,5145,5274,5273,5274,5145,5146,5144,5273,5272,5273,5144,5145,5143,5272,5271,5272,5143,5144,5142,5271,5270,5271,5142,5143,5141,5270,5269,5270,5141,5142,5140,5269,5268,5269,5140,5141,5139,5268,5267,5268,5139,5140,5138,5267,5266,5267,5138,5139,5137,5266,5265,5266,5137,5138,5136,5265,5264,5265,5136,5137,5135,5264,5263,5264,5135,5136,5134,5263,5262,5263,5134,5135,5133,5262,5261,5262,5133,5134,5132,5261,5260,5261,5132,5133,5131,5260,5259,5260,5131,5132,5130,5259,5258,5259,5130,5131,5129,5258,5257,5258,5129,5130,5128,5257,5256,5257,5128,5129,5127,5256,5255,5256,5127,5128,5126,5255,5254,5255,5126,5127,5125,5254,5253,5254,5125,5126,5124,5253,5252,5253,5124,5125,5123,5252,5251,5252,5123,5124,5122,5251,5250,5251,5122,5123,5121,5250,5249,5250,5121,5122,5120,5249,5248,5249,5120,5121,5374,5503,5502,5503,5374,5375,5373,5502,5501,5502,5373,5374,5372,5501,5500,5501,5372,5373,5371,5500,5499,5500,5371,5372,5370,5499,5498,5499,5370,5371,5369,5498,5497,5498,5369,5370,5368,5497,5496,5497,5368,5369,5367,5496,5495,5496,5367,5368,5366,5495,5494,5495,5366,5367,5365,5494,5493,5494,5365,5366,5364,5493,5492,5493,5364,5365,5363,5492,5491,5492,5363,5364,5362,5491,5490,5491,5362,5363,5361,5490,5489,5490,5361,5362,5360,5489,5488,5489,5360,5361,5359,5488,5487,5488,5359,5360,5358,5487,5486,5487,5358,5359,5357,5486,5485,5486,5357,5358,5356,5485,5484,5485,5356,5357,5355,5484,5483,5484,5355,5356,5354,5483,5482,5483,5354,5355,5353,5482,5481,5482,5353,5354,5352,5481,5480,5481,5352,5353,5351,5480,5479,5480,5351,5352,5350,5479,5478,5479,5350,5351,5349,5478,5477,5478,5349,5350,5348,5477,5476,5477,5348,5349,5347,5476,5475,5476,5347,5348,5346,5475,5474,5475,5346,5347,5345,5474,5473,5474,5345,5346,5344,5473,5472,5473,5344,5345,5343,5472,5471,5472,5343,5344,5342,5471,5470,5471,5342,5343,5341,5470,5469,5470,5341,5342,5340,5469,5468,5469,5340,5341,5339,5468,5467,5468,5339,5340,5338,5467,5466,5467,5338,5339,5337,5466,5465,5466,5337,5338,5336,5465,5464,5465,5336,5337,5335,5464,5463,5464,5335,5336,5334,5463,5462,5463,5334,5335,5333,5462,5461,5462,5333,5334,5332,5461,5460,5461,5332,5333,5331,5460,5459,5460,5331,5332,5330,5459,5458,5459,5330,5331,5329,5458,5457,5458,5329,5330,5328,5457,5456,5457,5328,5329,5327,5456,5455,5456,5327,5328,5326,5455,5454,5455,5326,5327,5325,5454,5453,5454,5325,5326,5324,5453,5452,5453,5324,5325,5323,5452,5451,5452,5323,5324,5322,5451,5450,5451,5322,5323,5321,5450,5449,5450,5321,5322,5320,5449,5448,5449,5320,5321,5319,5448,5447,5448,5319,5320,5318,5447,5446,5447,5318,5319,5317,5446,5445,5446,5317,5318,5316,5445,5444,5445,5316,5317,5315,5444,5443,5444,5315,5316,5314,5443,5442,5443,5314,5315,5313,5442,5441,5442,5313,5314,5312,5441,5440,5441,5312,5313,5311,5440,5439,5440,5311,5312,5310,5439,5438,5439,5310,5311,5309,5438,5437,5438,5309,5310,5308,5437,5436,5437,5308,5309,5307,5436,5435,5436,5307,5308,5306,5435,5434,5435,5306,5307,5305,5434,5433,5434,5305,5306,5304,5433,5432,5433,5304,5305,5303,5432,5431,5432,5303,5304,5302,5431,5430,5431,5302,5303,5301,5430,5429,5430,5301,5302,5300,5429,5428,5429,5300,5301,5299,5428,5427,5428,5299,5300,5298,5427,5426,5427,5298,5299,5297,5426,5425,5426,5297,5298,5296,5425,5424,5425,5296,5297,5295,5424,5423,5424,5295,5296,5294,5423,5422,5423,5294,5295,5293,5422,5421,5422,5293,5294,5292,5421,5420,5421,5292,5293,5291,5420,5419,5420,5291,5292,5290,5419,5418,5419,5290,5291,5289,5418,5417,5418,5289,5290,5288,5417,5416,5417,5288,5289,5287,5416,5415,5416,5287,5288,5286,5415,5414,5415,5286,5287,5285,5414,5413,5414,5285,5286,5284,5413,5412,5413,5284,5285,5283,5412,5411,5412,5283,5284,5282,5411,5410,5411,5282,5283,5281,5410,5409,5410,5281,5282,5280,5409,5408,5409,5280,5281,5279,5408,5407,5408,5279,5280,5278,5407,5406,5407,5278,5279,5277,5406,5405,5406,5277,5278,5276,5405,5404,5405,5276,5277,5275,5404,5403,5404,5275,5276,5274,5403,5402,5403,5274,5275,5273,5402,5401,5402,5273,5274,5272,5401,5400,5401,5272,5273,5271,5400,5399,5400,5271,5272,5270,5399,5398,5399,5270,5271,5269,5398,5397,5398,5269,5270,5268,5397,5396,5397,5268,5269,5267,5396,5395,5396,5267,5268,5266,5395,5394,5395,5266,5267,5265,5394,5393,5394,5265,5266,5264,5393,5392,5393,5264,5265,5263,5392,5391,5392,5263,5264,5262,5391,5390,5391,5262,5263,5261,5390,5389,5390,5261,5262,5260,5389,5388,5389,5260,5261,5259,5388,5387,5388,5259,5260,5258,5387,5386,5387,5258,5259,5257,5386,5385,5386,5257,5258,5256,5385,5384,5385,5256,5257,5255,5384,5383,5384,5255,5256,5254,5383,5382,5383,5254,5255,5253,5382,5381,5382,5253,5254,5252,5381,5380,5381,5252,5253,5251,5380,5379,5380,5251,5252,5250,5379,5378,5379,5250,5251,5249,5378,5377,5378,5249,5250,5248,5377,5376,5377,5248,5249,5502,5631,5630,5631,5502,5503,5501,5630,5629,5630,5501,5502,5500,5629,5628,5629,5500,5501,5499,5628,5627,5628,5499,5500,5498,5627,5626,5627,5498,5499,5497,5626,5625,5626,5497,5498,5496,5625,5624,5625,5496,5497,5495,5624,5623,5624,5495,5496,5494,5623,5622,5623,5494,5495,5493,5622,5621,5622,5493,5494,5492,5621,5620,5621,5492,5493,5491,5620,5619,5620,5491,5492,5490,5619,5618,5619,5490,5491,5489,5618,5617,5618,5489,5490,5488,5617,5616,5617,5488,5489,5487,5616,5615,5616,5487,5488,5486,5615,5614,5615,5486,5487,5485,5614,5613,5614,5485,5486,5484,5613,5612,5613,5484,5485,5483,5612,5611,5612,5483,5484,5482,5611,5610,5611,5482,5483,5481,5610,5609,5610,5481,5482,5480,5609,5608,5609,5480,5481,5479,5608,5607,5608,5479,5480,5478,5607,5606,5607,5478,5479,5477,5606,5605,5606,5477,5478,5476,5605,5604,5605,5476,5477,5475,5604,5603,5604,5475,5476,5474,5603,5602,5603,5474,5475,5473,5602,5601,5602,5473,5474,5472,5601,5600,5601,5472,5473,5471,5600,5599,5600,5471,5472,5470,5599,5598,5599,5470,5471,5469,5598,5597,5598,5469,5470,5468,5597,5596,5597,5468,5469,5467,5596,5595,5596,5467,5468,5466,5595,5594,5595,5466,5467,5465,5594,5593,5594,5465,5466,5464,5593,5592,5593,5464,5465,5463,5592,5591,5592,5463,5464,5462,5591,5590,5591,5462,5463,5461,5590,5589,5590,5461,5462,5460,5589,5588,5589,5460,5461,5459,5588,5587,5588,5459,5460,5458,5587,5586,5587,5458,5459,5457,5586,5585,5586,5457,5458,5456,5585,5584,5585,5456,5457,5455,5584,5583,5584,5455,5456,5454,5583,5582,5583,5454,5455,5453,5582,5581,5582,5453,5454,5452,5581,5580,5581,5452,5453,5451,5580,5579,5580,5451,5452,5450,5579,5578,5579,5450,5451,5449,5578,5577,5578,5449,5450,5448,5577,5576,5577,5448,5449,5447,5576,5575,5576,5447,5448,5446,5575,5574,5575,5446,5447,5445,5574,5573,5574,5445,5446,5444,5573,5572,5573,5444,5445,5443,5572,5571,5572,5443,5444,5442,5571,5570,5571,5442,5443,5441,5570,5569,5570,5441,5442,5440,5569,5568,5569,5440,5441,5439,5568,5567,5568,5439,5440,5438,5567,5566,5567,5438,5439,5437,5566,5565,5566,5437,5438,5436,5565,5564,5565,5436,5437,5435,5564,5563,5564,5435,5436,5434,5563,5562,5563,5434,5435,5433,5562,5561,5562,5433,5434,5432,5561,5560,5561,5432,5433,5431,5560,5559,5560,5431,5432,5430,5559,5558,5559,5430,5431,5429,5558,5557,5558,5429,5430,5428,5557,5556,5557,5428,5429,5427,5556,5555,5556,5427,5428,5426,5555,5554,5555,5426,5427,5425,5554,5553,5554,5425,5426,5424,5553,5552,5553,5424,5425,5423,5552,5551,5552,5423,5424,5422,5551,5550,5551,5422,5423,5421,5550,5549,5550,5421,5422,5420,5549,5548,5549,5420,5421,5419,5548,5547,5548,5419,5420,5418,5547,5546,5547,5418,5419,5417,5546,5545,5546,5417,5418,5416,5545,5544,5545,5416,5417,5415,5544,5543,5544,5415,5416,5414,5543,5542,5543,5414,5415,5413,5542,5541,5542,5413,5414,5412,5541,5540,5541,5412,5413,5411,5540,5539,5540,5411,5412,5410,5539,5538,5539,5410,5411,5409,5538,5537,5538,5409,5410,5408,5537,5536,5537,5408,5409,5407,5536,5535,5536,5407,5408,5406,5535,5534,5535,5406,5407,5405,5534,5533,5534,5405,5406,5404,5533,5532,5533,5404,5405,5403,5532,5531,5532,5403,5404,5402,5531,5530,5531,5402,5403,5401,5530,5529,5530,5401,5402,5400,5529,5528,5529,5400,5401,5399,5528,5527,5528,5399,5400,5398,5527,5526,5527,5398,5399,5397,5526,5525,5526,5397,5398,5396,5525,5524,5525,5396,5397,5395,5524,5523,5524,5395,5396,5394,5523,5522,5523,5394,5395,5393,5522,5521,5522,5393,5394,5392,5521,5520,5521,5392,5393,5391,5520,5519,5520,5391,5392,5390,5519,5518,5519,5390,5391,5389,5518,5517,5518,5389,5390,5388,5517,5516,5517,5388,5389,5387,5516,5515,5516,5387,5388,5386,5515,5514,5515,5386,5387,5385,5514,5513,5514,5385,5386,5384,5513,5512,5513,5384,5385,5383,5512,5511,5512,5383,5384,5382,5511,5510,5511,5382,5383,5381,5510,5509,5510,5381,5382,5380,5509,5508,5509,5380,5381,5379,5508,5507,5508,5379,5380,5378,5507,5506,5507,5378,5379,5377,5506,5505,5506,5377,5378,5376,5505,5504,5505,5376,5377,5630,5759,5758,5759,5630,5631,5629,5758,5757,5758,5629,5630,5628,5757,5756,5757,5628,5629,5627,5756,5755,5756,5627,5628,5626,5755,5754,5755,5626,5627,5625,5754,5753,5754,5625,5626,5624,5753,5752,5753,5624,5625,5623,5752,5751,5752,5623,5624,5622,5751,5750,5751,5622,5623,5621,5750,5749,5750,5621,5622,5620,5749,5748,5749,5620,5621,5619,5748,5747,5748,5619,5620,5618,5747,5746,5747,5618,5619,5617,5746,5745,5746,5617,5618,5616,5745,5744,5745,5616,5617,5615,5744,5743,5744,5615,5616,5614,5743,5742,5743,5614,5615,5613,5742,5741,5742,5613,5614,5612,5741,5740,5741,5612,5613,5611,5740,5739,5740,5611,5612,5610,5739,5738,5739,5610,5611,5609,5738,5737,5738,5609,5610,5608,5737,5736,5737,5608,5609,5607,5736,5735,5736,5607,5608,5606,5735,5734,5735,5606,5607,5605,5734,5733,5734,5605,5606,5604,5733,5732,5733,5604,5605,5603,5732,5731,5732,5603,5604,5602,5731,5730,5731,5602,5603,5601,5730,5729,5730,5601,5602,5600,5729,5728,5729,5600,5601,5599,5728,5727,5728,5599,5600,5598,5727,5726,5727,5598,5599,5597,5726,5725,5726,5597,5598,5596,5725,5724,5725,5596,5597,5595,5724,5723,5724,5595,5596,5594,5723,5722,5723,5594,5595,5593,5722,5721,5722,5593,5594,5592,5721,5720,5721,5592,5593,5591,5720,5719,5720,5591,5592,5590,5719,5718,5719,5590,5591,5589,5718,5717,5718,5589,5590,5588,5717,5716,5717,5588,5589,5587,5716,5715,5716,5587,5588,5586,5715,5714,5715,5586,5587,5585,5714,5713,5714,5585,5586,5584,5713,5712,5713,5584,5585,5583,5712,5711,5712,5583,5584,5582,5711,5710,5711,5582,5583,5581,5710,5709,5710,5581,5582,5580,5709,5708,5709,5580,5581,5579,5708,5707,5708,5579,5580,5578,5707,5706,5707,5578,5579,5577,5706,5705,5706,5577,5578,5576,5705,5704,5705,5576,5577,5575,5704,5703,5704,5575,5576,5574,5703,5702,5703,5574,5575,5573,5702,5701,5702,5573,5574,5572,5701,5700,5701,5572,5573,5571,5700,5699,5700,5571,5572,5570,5699,5698,5699,5570,5571,5569,5698,5697,5698,5569,5570,5568,5697,5696,5697,5568,5569,5567,5696,5695,5696,5567,5568,5566,5695,5694,5695,5566,5567,5565,5694,5693,5694,5565,5566,5564,5693,5692,5693,5564,5565,5563,5692,5691,5692,5563,5564,5562,5691,5690,5691,5562,5563,5561,5690,5689,5690,5561,5562,5560,5689,5688,5689,5560,5561,5559,5688,5687,5688,5559,5560,5558,5687,5686,5687,5558,5559,5557,5686,5685,5686,5557,5558,5556,5685,5684,5685,5556,5557,5555,5684,5683,5684,5555,5556,5554,5683,5682,5683,5554,5555,5553,5682,5681,5682,5553,5554,5552,5681,5680,5681,5552,5553,5551,5680,5679,5680,5551,5552,5550,5679,5678,5679,5550,5551,5549,5678,5677,5678,5549,5550,5548,5677,5676,5677,5548,5549,5547,5676,5675,5676,5547,5548,5546,5675,5674,5675,5546,5547,5545,5674,5673,5674,5545,5546,5544,5673,5672,5673,5544,5545,5543,5672,5671,5672,5543,5544,5542,5671,5670,5671,5542,5543,5541,5670,5669,5670,5541,5542,5540,5669,5668,5669,5540,5541,5539,5668,5667,5668,5539,5540,5538,5667,5666,5667,5538,5539,5537,5666,5665,5666,5537,5538,5536,5665,5664,5665,5536,5537,5535,5664,5663,5664,5535,5536,5534,5663,5662,5663,5534,5535,5533,5662,5661,5662,5533,5534,5532,5661,5660,5661,5532,5533,5531,5660,5659,5660,5531,5532,5530,5659,5658,5659,5530,5531,5529,5658,5657,5658,5529,5530,5528,5657,5656,5657,5528,5529,5527,5656,5655,5656,5527,5528,5526,5655,5654,5655,5526,5527,5525,5654,5653,5654,5525,5526,5524,5653,5652,5653,5524,5525,5523,5652,5651,5652,5523,5524,5522,5651,5650,5651,5522,5523,5521,5650,5649,5650,5521,5522,5520,5649,5648,5649,5520,5521,5519,5648,5647,5648,5519,5520,5518,5647,5646,5647,5518,5519,5517,5646,5645,5646,5517,5518,5516,5645,5644,5645,5516,5517,5515,5644,5643,5644,5515,5516,5514,5643,5642,5643,5514,5515,5513,5642,5641,5642,5513,5514,5512,5641,5640,5641,5512,5513,5511,5640,5639,5640,5511,5512,5510,5639,5638,5639,5510,5511,5509,5638,5637,5638,5509,5510,5508,5637,5636,5637,5508,5509,5507,5636,5635,5636,5507,5508,5506,5635,5634,5635,5506,5507,5505,5634,5633,5634,5505,5506,5504,5633,5632,5633,5504,5505,5758,5887,5886,5887,5758,5759,5757,5886,5885,5886,5757,5758,5756,5885,5884,5885,5756,5757,5755,5884,5883,5884,5755,5756,5754,5883,5882,5883,5754,5755,5753,5882,5881,5882,5753,5754,5752,5881,5880,5881,5752,5753,5751,5880,5879,5880,5751,5752,5750,5879,5878,5879,5750,5751,5749,5878,5877,5878,5749,5750,5748,5877,5876,5877,5748,5749,5747,5876,5875,5876,5747,5748,5746,5875,5874,5875,5746,5747,5745,5874,5873,5874,5745,5746,5744,5873,5872,5873,5744,5745,5743,5872,5871,5872,5743,5744,5742,5871,5870,5871,5742,5743,5741,5870,5869,5870,5741,5742,5740,5869,5868,5869,5740,5741,5739,5868,5867,5868,5739,5740,5738,5867,5866,5867,5738,5739,5737,5866,5865,5866,5737,5738,5736,5865,5864,5865,5736,5737,5735,5864,5863,5864,5735,5736,5734,5863,5862,5863,5734,5735,5733,5862,5861,5862,5733,5734,5732,5861,5860,5861,5732,5733,5731,5860,5859,5860,5731,5732,5730,5859,5858,5859,5730,5731,5729,5858,5857,5858,5729,5730,5728,5857,5856,5857,5728,5729,5727,5856,5855,5856,5727,5728,5726,5855,5854,5855,5726,5727,5725,5854,5853,5854,5725,5726,5724,5853,5852,5853,5724,5725,5723,5852,5851,5852,5723,5724,5722,5851,5850,5851,5722,5723,5721,5850,5849,5850,5721,5722,5720,5849,5848,5849,5720,5721,5719,5848,5847,5848,5719,5720,5718,5847,5846,5847,5718,5719,5717,5846,5845,5846,5717,5718,5716,5845,5844,5845,5716,5717,5715,5844,5843,5844,5715,5716,5714,5843,5842,5843,5714,5715,5713,5842,5841,5842,5713,5714,5712,5841,5840,5841,5712,5713,5711,5840,5839,5840,5711,5712,5710,5839,5838,5839,5710,5711,5709,5838,5837,5838,5709,5710,5708,5837,5836,5837,5708,5709,5707,5836,5835,5836,5707,5708,5706,5835,5834,5835,5706,5707,5705,5834,5833,5834,5705,5706,5704,5833,5832,5833,5704,5705,5703,5832,5831,5832,5703,5704,5702,5831,5830,5831,5702,5703,5701,5830,5829,5830,5701,5702,5700,5829,5828,5829,5700,5701,5699,5828,5827,5828,5699,5700,5698,5827,5826,5827,5698,5699,5697,5826,5825,5826,5697,5698,5696,5825,5824,5825,5696,5697,5695,5824,5823,5824,5695,5696,5694,5823,5822,5823,5694,5695,5693,5822,5821,5822,5693,5694,5692,5821,5820,5821,5692,5693,5691,5820,5819,5820,5691,5692,5690,5819,5818,5819,5690,5691,5689,5818,5817,5818,5689,5690,5688,5817,5816,5817,5688,5689,5687,5816,5815,5816,5687,5688,5686,5815,5814,5815,5686,5687,5685,5814,5813,5814,5685,5686,5684,5813,5812,5813,5684,5685,5683,5812,5811,5812,5683,5684,5682,5811,5810,5811,5682,5683,5681,5810,5809,5810,5681,5682,5680,5809,5808,5809,5680,5681,5679,5808,5807,5808,5679,5680,5678,5807,5806,5807,5678,5679,5677,5806,5805,5806,5677,5678,5676,5805,5804,5805,5676,5677,5675,5804,5803,5804,5675,5676,5674,5803,5802,5803,5674,5675,5673,5802,5801,5802,5673,5674,5672,5801,5800,5801,5672,5673,5671,5800,5799,5800,5671,5672,5670,5799,5798,5799,5670,5671,5669,5798,5797,5798,5669,5670,5668,5797,5796,5797,5668,5669,5667,5796,5795,5796,5667,5668,5666,5795,5794,5795,5666,5667,5665,5794,5793,5794,5665,5666,5664,5793,5792,5793,5664,5665,5663,5792,5791,5792,5663,5664,5662,5791,5790,5791,5662,5663,5661,5790,5789,5790,5661,5662,5660,5789,5788,5789,5660,5661,5659,5788,5787,5788,5659,5660,5658,5787,5786,5787,5658,5659,5657,5786,5785,5786,5657,5658,5656,5785,5784,5785,5656,5657,5655,5784,5783,5784,5655,5656,5654,5783,5782,5783,5654,5655,5653,5782,5781,5782,5653,5654,5652,5781,5780,5781,5652,5653,5651,5780,5779,5780,5651,5652,5650,5779,5778,5779,5650,5651,5649,5778,5777,5778,5649,5650,5648,5777,5776,5777,5648,5649,5647,5776,5775,5776,5647,5648,5646,5775,5774,5775,5646,5647,5645,5774,5773,5774,5645,5646,5644,5773,5772,5773,5644,5645,5643,5772,5771,5772,5643,5644,5642,5771,5770,5771,5642,5643,5641,5770,5769,5770,5641,5642,5640,5769,5768,5769,5640,5641,5639,5768,5767,5768,5639,5640,5638,5767,5766,5767,5638,5639,5637,5766,5765,5766,5637,5638,5636,5765,5764,5765,5636,5637,5635,5764,5763,5764,5635,5636,5634,5763,5762,5763,5634,5635,5633,5762,5761,5762,5633,5634,5632,5761,5760,5761,5632,5633,5886,6015,6014,6015,5886,5887,5885,6014,6013,6014,5885,5886,5884,6013,6012,6013,5884,5885,5883,6012,6011,6012,5883,5884,5882,6011,6010,6011,5882,5883,5881,6010,6009,6010,5881,5882,5880,6009,6008,6009,5880,5881,5879,6008,6007,6008,5879,5880,5878,6007,6006,6007,5878,5879,5877,6006,6005,6006,5877,5878,5876,6005,6004,6005,5876,5877,5875,6004,6003,6004,5875,5876,5874,6003,6002,6003,5874,5875,5873,6002,6001,6002,5873,5874,5872,6001,6000,6001,5872,5873,5871,6000,5999,6000,5871,5872,5870,5999,5998,5999,5870,5871,5869,5998,5997,5998,5869,5870,5868,5997,5996,5997,5868,5869,5867,5996,5995,5996,5867,5868,5866,5995,5994,5995,5866,5867,5865,5994,5993,5994,5865,5866,5864,5993,5992,5993,5864,5865,5863,5992,5991,5992,5863,5864,5862,5991,5990,5991,5862,5863,5861,5990,5989,5990,5861,5862,5860,5989,5988,5989,5860,5861,5859,5988,5987,5988,5859,5860,5858,5987,5986,5987,5858,5859,5857,5986,5985,5986,5857,5858,5856,5985,5984,5985,5856,5857,5855,5984,5983,5984,5855,5856,5854,5983,5982,5983,5854,5855,5853,5982,5981,5982,5853,5854,5852,5981,5980,5981,5852,5853,5851,5980,5979,5980,5851,5852,5850,5979,5978,5979,5850,5851,5849,5978,5977,5978,5849,5850,5848,5977,5976,5977,5848,5849,5847,5976,5975,5976,5847,5848,5846,5975,5974,5975,5846,5847,5845,5974,5973,5974,5845,5846,5844,5973,5972,5973,5844,5845,5843,5972,5971,5972,5843,5844,5842,5971,5970,5971,5842,5843,5841,5970,5969,5970,5841,5842,5840,5969,5968,5969,5840,5841,5839,5968,5967,5968,5839,5840,5838,5967,5966,5967,5838,5839,5837,5966,5965,5966,5837,5838,5836,5965,5964,5965,5836,5837,5835,5964,5963,5964,5835,5836,5834,5963,5962,5963,5834,5835,5833,5962,5961,5962,5833,5834,5832,5961,5960,5961,5832,5833,5831,5960,5959,5960,5831,5832,5830,5959,5958,5959,5830,5831,5829,5958,5957,5958,5829,5830,5828,5957,5956,5957,5828,5829,5827,5956,5955,5956,5827,5828,5826,5955,5954,5955,5826,5827,5825,5954,5953,5954,5825,5826,5824,5953,5952,5953,5824,5825,5823,5952,5951,5952,5823,5824,5822,5951,5950,5951,5822,5823,5821,5950,5949,5950,5821,5822,5820,5949,5948,5949,5820,5821,5819,5948,5947,5948,5819,5820,5818,5947,5946,5947,5818,5819,5817,5946,5945,5946,5817,5818,5816,5945,5944,5945,5816,5817,5815,5944,5943,5944,5815,5816,5814,5943,5942,5943,5814,5815,5813,5942,5941,5942,5813,5814,5812,5941,5940,5941,5812,5813,5811,5940,5939,5940,5811,5812,5810,5939,5938,5939,5810,5811,5809,5938,5937,5938,5809,5810,5808,5937,5936,5937,5808,5809,5807,5936,5935,5936,5807,5808,5806,5935,5934,5935,5806,5807,5805,5934,5933,5934,5805,5806,5804,5933,5932,5933,5804,5805,5803,5932,5931,5932,5803,5804,5802,5931,5930,5931,5802,5803,5801,5930,5929,5930,5801,5802,5800,5929,5928,5929,5800,5801,5799,5928,5927,5928,5799,5800,5798,5927,5926,5927,5798,5799,5797,5926,5925,5926,5797,5798,5796,5925,5924,5925,5796,5797,5795,5924,5923,5924,5795,5796,5794,5923,5922,5923,5794,5795,5793,5922,5921,5922,5793,5794,5792,5921,5920,5921,5792,5793,5791,5920,5919,5920,5791,5792,5790,5919,5918,5919,5790,5791,5789,5918,5917,5918,5789,5790,5788,5917,5916,5917,5788,5789,5787,5916,5915,5916,5787,5788,5786,5915,5914,5915,5786,5787,5785,5914,5913,5914,5785,5786,5784,5913,5912,5913,5784,5785,5783,5912,5911,5912,5783,5784,5782,5911,5910,5911,5782,5783,5781,5910,5909,5910,5781,5782,5780,5909,5908,5909,5780,5781,5779,5908,5907,5908,5779,5780,5778,5907,5906,5907,5778,5779,5777,5906,5905,5906,5777,5778,5776,5905,5904,5905,5776,5777,5775,5904,5903,5904,5775,5776,5774,5903,5902,5903,5774,5775,5773,5902,5901,5902,5773,5774,5772,5901,5900,5901,5772,5773,5771,5900,5899,5900,5771,5772,5770,5899,5898,5899,5770,5771,5769,5898,5897,5898,5769,5770,5768,5897,5896,5897,5768,5769,5767,5896,5895,5896,5767,5768,5766,5895,5894,5895,5766,5767,5765,5894,5893,5894,5765,5766,5764,5893,5892,5893,5764,5765,5763,5892,5891,5892,5763,5764,5762,5891,5890,5891,5762,5763,5761,5890,5889,5890,5761,5762,5760,5889,5888,5889,5760,5761,6014,6143,6142,6143,6014,6015,6013,6142,6141,6142,6013,6014,6012,6141,6140,6141,6012,6013,6011,6140,6139,6140,6011,6012,6010,6139,6138,6139,6010,6011,6009,6138,6137,6138,6009,6010,6008,6137,6136,6137,6008,6009,6007,6136,6135,6136,6007,6008,6006,6135,6134,6135,6006,6007,6005,6134,6133,6134,6005,6006,6004,6133,6132,6133,6004,6005,6003,6132,6131,6132,6003,6004,6002,6131,6130,6131,6002,6003,6001,6130,6129,6130,6001,6002,6000,6129,6128,6129,6000,6001,5999,6128,6127,6128,5999,6000,5998,6127,6126,6127,5998,5999,5997,6126,6125,6126,5997,5998,5996,6125,6124,6125,5996,5997,5995,6124,6123,6124,5995,5996,5994,6123,6122,6123,5994,5995,5993,6122,6121,6122,5993,5994,5992,6121,6120,6121,5992,5993,5991,6120,6119,6120,5991,5992,5990,6119,6118,6119,5990,5991,5989,6118,6117,6118,5989,5990,5988,6117,6116,6117,5988,5989,5987,6116,6115,6116,5987,5988,5986,6115,6114,6115,5986,5987,5985,6114,6113,6114,5985,5986,5984,6113,6112,6113,5984,5985,5983,6112,6111,6112,5983,5984,5982,6111,6110,6111,5982,5983,5981,6110,6109,6110,5981,5982,5980,6109,6108,6109,5980,5981,5979,6108,6107,6108,5979,5980,5978,6107,6106,6107,5978,5979,5977,6106,6105,6106,5977,5978,5976,6105,6104,6105,5976,5977,5975,6104,6103,6104,5975,5976,5974,6103,6102,6103,5974,5975,5973,6102,6101,6102,5973,5974,5972,6101,6100,6101,5972,5973,5971,6100,6099,6100,5971,5972,5970,6099,6098,6099,5970,5971,5969,6098,6097,6098,5969,5970,5968,6097,6096,6097,5968,5969,5967,6096,6095,6096,5967,5968,5966,6095,6094,6095,5966,5967,5965,6094,6093,6094,5965,5966,5964,6093,6092,6093,5964,5965,5963,6092,6091,6092,5963,5964,5962,6091,6090,6091,5962,5963,5961,6090,6089,6090,5961,5962,5960,6089,6088,6089,5960,5961,5959,6088,6087,6088,5959,5960,5958,6087,6086,6087,5958,5959,5957,6086,6085,6086,5957,5958,5956,6085,6084,6085,5956,5957,5955,6084,6083,6084,5955,5956,5954,6083,6082,6083,5954,5955,5953,6082,6081,6082,5953,5954,5952,6081,6080,6081,5952,5953,5951,6080,6079,6080,5951,5952,5950,6079,6078,6079,5950,5951,5949,6078,6077,6078,5949,5950,5948,6077,6076,6077,5948,5949,5947,6076,6075,6076,5947,5948,5946,6075,6074,6075,5946,5947,5945,6074,6073,6074,5945,5946,5944,6073,6072,6073,5944,5945,5943,6072,6071,6072,5943,5944,5942,6071,6070,6071,5942,5943,5941,6070,6069,6070,5941,5942,5940,6069,6068,6069,5940,5941,5939,6068,6067,6068,5939,5940,5938,6067,6066,6067,5938,5939,5937,6066,6065,6066,5937,5938,5936,6065,6064,6065,5936,5937,5935,6064,6063,6064,5935,5936,5934,6063,6062,6063,5934,5935,5933,6062,6061,6062,5933,5934,5932,6061,6060,6061,5932,5933,5931,6060,6059,6060,5931,5932,5930,6059,6058,6059,5930,5931,5929,6058,6057,6058,5929,5930,5928,6057,6056,6057,5928,5929,5927,6056,6055,6056,5927,5928,5926,6055,6054,6055,5926,5927,5925,6054,6053,6054,5925,5926,5924,6053,6052,6053,5924,5925,5923,6052,6051,6052,5923,5924,5922,6051,6050,6051,5922,5923,5921,6050,6049,6050,5921,5922,5920,6049,6048,6049,5920,5921,5919,6048,6047,6048,5919,5920,5918,6047,6046,6047,5918,5919,5917,6046,6045,6046,5917,5918,5916,6045,6044,6045,5916,5917,5915,6044,6043,6044,5915,5916,5914,6043,6042,6043,5914,5915,5913,6042,6041,6042,5913,5914,5912,6041,6040,6041,5912,5913,5911,6040,6039,6040,5911,5912,5910,6039,6038,6039,5910,5911,5909,6038,6037,6038,5909,5910,5908,6037,6036,6037,5908,5909,5907,6036,6035,6036,5907,5908,5906,6035,6034,6035,5906,5907,5905,6034,6033,6034,5905,5906,5904,6033,6032,6033,5904,5905,5903,6032,6031,6032,5903,5904,5902,6031,6030,6031,5902,5903,5901,6030,6029,6030,5901,5902,5900,6029,6028,6029,5900,5901,5899,6028,6027,6028,5899,5900,5898,6027,6026,6027,5898,5899,5897,6026,6025,6026,5897,5898,5896,6025,6024,6025,5896,5897,5895,6024,6023,6024,5895,5896,5894,6023,6022,6023,5894,5895,5893,6022,6021,6022,5893,5894,5892,6021,6020,6021,5892,5893,5891,6020,6019,6020,5891,5892,5890,6019,6018,6019,5890,5891,5889,6018,6017,6018,5889,5890,5888,6017,6016,6017,5888,5889,6142,6271,6270,6271,6142,6143,6141,6270,6269,6270,6141,6142,6140,6269,6268,6269,6140,6141,6139,6268,6267,6268,6139,6140,6138,6267,6266,6267,6138,6139,6137,6266,6265,6266,6137,6138,6136,6265,6264,6265,6136,6137,6135,6264,6263,6264,6135,6136,6134,6263,6262,6263,6134,6135,6133,6262,6261,6262,6133,6134,6132,6261,6260,6261,6132,6133,6131,6260,6259,6260,6131,6132,6130,6259,6258,6259,6130,6131,6129,6258,6257,6258,6129,6130,6128,6257,6256,6257,6128,6129,6127,6256,6255,6256,6127,6128,6126,6255,6254,6255,6126,6127,6125,6254,6253,6254,6125,6126,6124,6253,6252,6253,6124,6125,6123,6252,6251,6252,6123,6124,6122,6251,6250,6251,6122,6123,6121,6250,6249,6250,6121,6122,6120,6249,6248,6249,6120,6121,6119,6248,6247,6248,6119,6120,6118,6247,6246,6247,6118,6119,6117,6246,6245,6246,6117,6118,6116,6245,6244,6245,6116,6117,6115,6244,6243,6244,6115,6116,6114,6243,6242,6243,6114,6115,6113,6242,6241,6242,6113,6114,6112,6241,6240,6241,6112,6113,6111,6240,6239,6240,6111,6112,6110,6239,6238,6239,6110,6111,6109,6238,6237,6238,6109,6110,6108,6237,6236,6237,6108,6109,6107,6236,6235,6236,6107,6108,6106,6235,6234,6235,6106,6107,6105,6234,6233,6234,6105,6106,6104,6233,6232,6233,6104,6105,6103,6232,6231,6232,6103,6104,6102,6231,6230,6231,6102,6103,6101,6230,6229,6230,6101,6102,6100,6229,6228,6229,6100,6101,6099,6228,6227,6228,6099,6100,6098,6227,6226,6227,6098,6099,6097,6226,6225,6226,6097,6098,6096,6225,6224,6225,6096,6097,6095,6224,6223,6224,6095,6096,6094,6223,6222,6223,6094,6095,6093,6222,6221,6222,6093,6094,6092,6221,6220,6221,6092,6093,6091,6220,6219,6220,6091,6092,6090,6219,6218,6219,6090,6091,6089,6218,6217,6218,6089,6090,6088,6217,6216,6217,6088,6089,6087,6216,6215,6216,6087,6088,6086,6215,6214,6215,6086,6087,6085,6214,6213,6214,6085,6086,6084,6213,6212,6213,6084,6085,6083,6212,6211,6212,6083,6084,6082,6211,6210,6211,6082,6083,6081,6210,6209,6210,6081,6082,6080,6209,6208,6209,6080,6081,6079,6208,6207,6208,6079,6080,6078,6207,6206,6207,6078,6079,6077,6206,6205,6206,6077,6078,6076,6205,6204,6205,6076,6077,6075,6204,6203,6204,6075,6076,6074,6203,6202,6203,6074,6075,6073,6202,6201,6202,6073,6074,6072,6201,6200,6201,6072,6073,6071,6200,6199,6200,6071,6072,6070,6199,6198,6199,6070,6071,6069,6198,6197,6198,6069,6070,6068,6197,6196,6197,6068,6069,6067,6196,6195,6196,6067,6068,6066,6195,6194,6195,6066,6067,6065,6194,6193,6194,6065,6066,6064,6193,6192,6193,6064,6065,6063,6192,6191,6192,6063,6064,6062,6191,6190,6191,6062,6063,6061,6190,6189,6190,6061,6062,6060,6189,6188,6189,6060,6061,6059,6188,6187,6188,6059,6060,6058,6187,6186,6187,6058,6059,6057,6186,6185,6186,6057,6058,6056,6185,6184,6185,6056,6057,6055,6184,6183,6184,6055,6056,6054,6183,6182,6183,6054,6055,6053,6182,6181,6182,6053,6054,6052,6181,6180,6181,6052,6053,6051,6180,6179,6180,6051,6052,6050,6179,6178,6179,6050,6051,6049,6178,6177,6178,6049,6050,6048,6177,6176,6177,6048,6049,6047,6176,6175,6176,6047,6048,6046,6175,6174,6175,6046,6047,6045,6174,6173,6174,6045,6046,6044,6173,6172,6173,6044,6045,6043,6172,6171,6172,6043,6044,6042,6171,6170,6171,6042,6043,6041,6170,6169,6170,6041,6042,6040,6169,6168,6169,6040,6041,6039,6168,6167,6168,6039,6040,6038,6167,6166,6167,6038,6039,6037,6166,6165,6166,6037,6038,6036,6165,6164,6165,6036,6037,6035,6164,6163,6164,6035,6036,6034,6163,6162,6163,6034,6035,6033,6162,6161,6162,6033,6034,6032,6161,6160,6161,6032,6033,6031,6160,6159,6160,6031,6032,6030,6159,6158,6159,6030,6031,6029,6158,6157,6158,6029,6030,6028,6157,6156,6157,6028,6029,6027,6156,6155,6156,6027,6028,6026,6155,6154,6155,6026,6027,6025,6154,6153,6154,6025,6026,6024,6153,6152,6153,6024,6025,6023,6152,6151,6152,6023,6024,6022,6151,6150,6151,6022,6023,6021,6150,6149,6150,6021,6022,6020,6149,6148,6149,6020,6021,6019,6148,6147,6148,6019,6020,6018,6147,6146,6147,6018,6019,6017,6146,6145,6146,6017,6018,6016,6145,6144,6145,6016,6017,6270,6399,6398,6399,6270,6271,6269,6398,6397,6398,6269,6270,6268,6397,6396,6397,6268,6269,6267,6396,6395,6396,6267,6268,6266,6395,6394,6395,6266,6267,6265,6394,6393,6394,6265,6266,6264,6393,6392,6393,6264,6265,6263,6392,6391,6392,6263,6264,6262,6391,6390,6391,6262,6263,6261,6390,6389,6390,6261,6262,6260,6389,6388,6389,6260,6261,6259,6388,6387,6388,6259,6260,6258,6387,6386,6387,6258,6259,6257,6386,6385,6386,6257,6258,6256,6385,6384,6385,6256,6257,6255,6384,6383,6384,6255,6256,6254,6383,6382,6383,6254,6255,6253,6382,6381,6382,6253,6254,6252,6381,6380,6381,6252,6253,6251,6380,6379,6380,6251,6252,6250,6379,6378,6379,6250,6251,6249,6378,6377,6378,6249,6250,6248,6377,6376,6377,6248,6249,6247,6376,6375,6376,6247,6248,6246,6375,6374,6375,6246,6247,6245,6374,6373,6374,6245,6246,6244,6373,6372,6373,6244,6245,6243,6372,6371,6372,6243,6244,6242,6371,6370,6371,6242,6243,6241,6370,6369,6370,6241,6242,6240,6369,6368,6369,6240,6241,6239,6368,6367,6368,6239,6240,6238,6367,6366,6367,6238,6239,6237,6366,6365,6366,6237,6238,6236,6365,6364,6365,6236,6237,6235,6364,6363,6364,6235,6236,6234,6363,6362,6363,6234,6235,6233,6362,6361,6362,6233,6234,6232,6361,6360,6361,6232,6233,6231,6360,6359,6360,6231,6232,6230,6359,6358,6359,6230,6231,6229,6358,6357,6358,6229,6230,6228,6357,6356,6357,6228,6229,6227,6356,6355,6356,6227,6228,6226,6355,6354,6355,6226,6227,6225,6354,6353,6354,6225,6226,6224,6353,6352,6353,6224,6225,6223,6352,6351,6352,6223,6224,6222,6351,6350,6351,6222,6223,6221,6350,6349,6350,6221,6222,6220,6349,6348,6349,6220,6221,6219,6348,6347,6348,6219,6220,6218,6347,6346,6347,6218,6219,6217,6346,6345,6346,6217,6218,6216,6345,6344,6345,6216,6217,6215,6344,6343,6344,6215,6216,6214,6343,6342,6343,6214,6215,6213,6342,6341,6342,6213,6214,6212,6341,6340,6341,6212,6213,6211,6340,6339,6340,6211,6212,6210,6339,6338,6339,6210,6211,6209,6338,6337,6338,6209,6210,6208,6337,6336,6337,6208,6209,6207,6336,6335,6336,6207,6208,6206,6335,6334,6335,6206,6207,6205,6334,6333,6334,6205,6206,6204,6333,6332,6333,6204,6205,6203,6332,6331,6332,6203,6204,6202,6331,6330,6331,6202,6203,6201,6330,6329,6330,6201,6202,6200,6329,6328,6329,6200,6201,6199,6328,6327,6328,6199,6200,6198,6327,6326,6327,6198,6199,6197,6326,6325,6326,6197,6198,6196,6325,6324,6325,6196,6197,6195,6324,6323,6324,6195,6196,6194,6323,6322,6323,6194,6195,6193,6322,6321,6322,6193,6194,6192,6321,6320,6321,6192,6193,6191,6320,6319,6320,6191,6192,6190,6319,6318,6319,6190,6191,6189,6318,6317,6318,6189,6190,6188,6317,6316,6317,6188,6189,6187,6316,6315,6316,6187,6188,6186,6315,6314,6315,6186,6187,6185,6314,6313,6314,6185,6186,6184,6313,6312,6313,6184,6185,6183,6312,6311,6312,6183,6184,6182,6311,6310,6311,6182,6183,6181,6310,6309,6310,6181,6182,6180,6309,6308,6309,6180,6181,6179,6308,6307,6308,6179,6180,6178,6307,6306,6307,6178,6179,6177,6306,6305,6306,6177,6178,6176,6305,6304,6305,6176,6177,6175,6304,6303,6304,6175,6176,6174,6303,6302,6303,6174,6175,6173,6302,6301,6302,6173,6174,6172,6301,6300,6301,6172,6173,6171,6300,6299,6300,6171,6172,6170,6299,6298,6299,6170,6171,6169,6298,6297,6298,6169,6170,6168,6297,6296,6297,6168,6169,6167,6296,6295,6296,6167,6168,6166,6295,6294,6295,6166,6167,6165,6294,6293,6294,6165,6166,6164,6293,6292,6293,6164,6165,6163,6292,6291,6292,6163,6164,6162,6291,6290,6291,6162,6163,6161,6290,6289,6290,6161,6162,6160,6289,6288,6289,6160,6161,6159,6288,6287,6288,6159,6160,6158,6287,6286,6287,6158,6159,6157,6286,6285,6286,6157,6158,6156,6285,6284,6285,6156,6157,6155,6284,6283,6284,6155,6156,6154,6283,6282,6283,6154,6155,6153,6282,6281,6282,6153,6154,6152,6281,6280,6281,6152,6153,6151,6280,6279,6280,6151,6152,6150,6279,6278,6279,6150,6151,6149,6278,6277,6278,6149,6150,6148,6277,6276,6277,6148,6149,6147,6276,6275,6276,6147,6148,6146,6275,6274,6275,6146,6147,6145,6274,6273,6274,6145,6146,6144,6273,6272,6273,6144,6145,6398,6527,6526,6527,6398,6399,6397,6526,6525,6526,6397,6398,6396,6525,6524,6525,6396,6397,6395,6524,6523,6524,6395,6396,6394,6523,6522,6523,6394,6395,6393,6522,6521,6522,6393,6394,6392,6521,6520,6521,6392,6393,6391,6520,6519,6520,6391,6392,6390,6519,6518,6519,6390,6391,6389,6518,6517,6518,6389,6390,6388,6517,6516,6517,6388,6389,6387,6516,6515,6516,6387,6388,6386,6515,6514,6515,6386,6387,6385,6514,6513,6514,6385,6386,6384,6513,6512,6513,6384,6385,6383,6512,6511,6512,6383,6384,6382,6511,6510,6511,6382,6383,6381,6510,6509,6510,6381,6382,6380,6509,6508,6509,6380,6381,6379,6508,6507,6508,6379,6380,6378,6507,6506,6507,6378,6379,6377,6506,6505,6506,6377,6378,6376,6505,6504,6505,6376,6377,6375,6504,6503,6504,6375,6376,6374,6503,6502,6503,6374,6375,6373,6502,6501,6502,6373,6374,6372,6501,6500,6501,6372,6373,6371,6500,6499,6500,6371,6372,6370,6499,6498,6499,6370,6371,6369,6498,6497,6498,6369,6370,6368,6497,6496,6497,6368,6369,6367,6496,6495,6496,6367,6368,6366,6495,6494,6495,6366,6367,6365,6494,6493,6494,6365,6366,6364,6493,6492,6493,6364,6365,6363,6492,6491,6492,6363,6364,6362,6491,6490,6491,6362,6363,6361,6490,6489,6490,6361,6362,6360,6489,6488,6489,6360,6361,6359,6488,6487,6488,6359,6360,6358,6487,6486,6487,6358,6359,6357,6486,6485,6486,6357,6358,6356,6485,6484,6485,6356,6357,6355,6484,6483,6484,6355,6356,6354,6483,6482,6483,6354,6355,6353,6482,6481,6482,6353,6354,6352,6481,6480,6481,6352,6353,6351,6480,6479,6480,6351,6352,6350,6479,6478,6479,6350,6351,6349,6478,6477,6478,6349,6350,6348,6477,6476,6477,6348,6349,6347,6476,6475,6476,6347,6348,6346,6475,6474,6475,6346,6347,6345,6474,6473,6474,6345,6346,6344,6473,6472,6473,6344,6345,6343,6472,6471,6472,6343,6344,6342,6471,6470,6471,6342,6343,6341,6470,6469,6470,6341,6342,6340,6469,6468,6469,6340,6341,6339,6468,6467,6468,6339,6340,6338,6467,6466,6467,6338,6339,6337,6466,6465,6466,6337,6338,6336,6465,6464,6465,6336,6337,6335,6464,6463,6464,6335,6336,6334,6463,6462,6463,6334,6335,6333,6462,6461,6462,6333,6334,6332,6461,6460,6461,6332,6333,6331,6460,6459,6460,6331,6332,6330,6459,6458,6459,6330,6331,6329,6458,6457,6458,6329,6330,6328,6457,6456,6457,6328,6329,6327,6456,6455,6456,6327,6328,6326,6455,6454,6455,6326,6327,6325,6454,6453,6454,6325,6326,6324,6453,6452,6453,6324,6325,6323,6452,6451,6452,6323,6324,6322,6451,6450,6451,6322,6323,6321,6450,6449,6450,6321,6322,6320,6449,6448,6449,6320,6321,6319,6448,6447,6448,6319,6320,6318,6447,6446,6447,6318,6319,6317,6446,6445,6446,6317,6318,6316,6445,6444,6445,6316,6317,6315,6444,6443,6444,6315,6316,6314,6443,6442,6443,6314,6315,6313,6442,6441,6442,6313,6314,6312,6441,6440,6441,6312,6313,6311,6440,6439,6440,6311,6312,6310,6439,6438,6439,6310,6311,6309,6438,6437,6438,6309,6310,6308,6437,6436,6437,6308,6309,6307,6436,6435,6436,6307,6308,6306,6435,6434,6435,6306,6307,6305,6434,6433,6434,6305,6306,6304,6433,6432,6433,6304,6305,6303,6432,6431,6432,6303,6304,6302,6431,6430,6431,6302,6303,6301,6430,6429,6430,6301,6302,6300,6429,6428,6429,6300,6301,6299,6428,6427,6428,6299,6300,6298,6427,6426,6427,6298,6299,6297,6426,6425,6426,6297,6298,6296,6425,6424,6425,6296,6297,6295,6424,6423,6424,6295,6296,6294,6423,6422,6423,6294,6295,6293,6422,6421,6422,6293,6294,6292,6421,6420,6421,6292,6293,6291,6420,6419,6420,6291,6292,6290,6419,6418,6419,6290,6291,6289,6418,6417,6418,6289,6290,6288,6417,6416,6417,6288,6289,6287,6416,6415,6416,6287,6288,6286,6415,6414,6415,6286,6287,6285,6414,6413,6414,6285,6286,6284,6413,6412,6413,6284,6285,6283,6412,6411,6412,6283,6284,6282,6411,6410,6411,6282,6283,6281,6410,6409,6410,6281,6282,6280,6409,6408,6409,6280,6281,6279,6408,6407,6408,6279,6280,6278,6407,6406,6407,6278,6279,6277,6406,6405,6406,6277,6278,6276,6405,6404,6405,6276,6277,6275,6404,6403,6404,6275,6276,6274,6403,6402,6403,6274,6275,6273,6402,6401,6402,6273,6274,6272,6401,6400,6401,6272,6273,6526,6655,6654,6655,6526,6527,6525,6654,6653,6654,6525,6526,6524,6653,6652,6653,6524,6525,6523,6652,6651,6652,6523,6524,6522,6651,6650,6651,6522,6523,6521,6650,6649,6650,6521,6522,6520,6649,6648,6649,6520,6521,6519,6648,6647,6648,6519,6520,6518,6647,6646,6647,6518,6519,6517,6646,6645,6646,6517,6518,6516,6645,6644,6645,6516,6517,6515,6644,6643,6644,6515,6516,6514,6643,6642,6643,6514,6515,6513,6642,6641,6642,6513,6514,6512,6641,6640,6641,6512,6513,6511,6640,6639,6640,6511,6512,6510,6639,6638,6639,6510,6511,6509,6638,6637,6638,6509,6510,6508,6637,6636,6637,6508,6509,6507,6636,6635,6636,6507,6508,6506,6635,6634,6635,6506,6507,6505,6634,6633,6634,6505,6506,6504,6633,6632,6633,6504,6505,6503,6632,6631,6632,6503,6504,6502,6631,6630,6631,6502,6503,6501,6630,6629,6630,6501,6502,6500,6629,6628,6629,6500,6501,6499,6628,6627,6628,6499,6500,6498,6627,6626,6627,6498,6499,6497,6626,6625,6626,6497,6498,6496,6625,6624,6625,6496,6497,6495,6624,6623,6624,6495,6496,6494,6623,6622,6623,6494,6495,6493,6622,6621,6622,6493,6494,6492,6621,6620,6621,6492,6493,6491,6620,6619,6620,6491,6492,6490,6619,6618,6619,6490,6491,6489,6618,6617,6618,6489,6490,6488,6617,6616,6617,6488,6489,6487,6616,6615,6616,6487,6488,6486,6615,6614,6615,6486,6487,6485,6614,6613,6614,6485,6486,6484,6613,6612,6613,6484,6485,6483,6612,6611,6612,6483,6484,6482,6611,6610,6611,6482,6483,6481,6610,6609,6610,6481,6482,6480,6609,6608,6609,6480,6481,6479,6608,6607,6608,6479,6480,6478,6607,6606,6607,6478,6479,6477,6606,6605,6606,6477,6478,6476,6605,6604,6605,6476,6477,6475,6604,6603,6604,6475,6476,6474,6603,6602,6603,6474,6475,6473,6602,6601,6602,6473,6474,6472,6601,6600,6601,6472,6473,6471,6600,6599,6600,6471,6472,6470,6599,6598,6599,6470,6471,6469,6598,6597,6598,6469,6470,6468,6597,6596,6597,6468,6469,6467,6596,6595,6596,6467,6468,6466,6595,6594,6595,6466,6467,6465,6594,6593,6594,6465,6466,6464,6593,6592,6593,6464,6465,6463,6592,6591,6592,6463,6464,6462,6591,6590,6591,6462,6463,6461,6590,6589,6590,6461,6462,6460,6589,6588,6589,6460,6461,6459,6588,6587,6588,6459,6460,6458,6587,6586,6587,6458,6459,6457,6586,6585,6586,6457,6458,6456,6585,6584,6585,6456,6457,6455,6584,6583,6584,6455,6456,6454,6583,6582,6583,6454,6455,6453,6582,6581,6582,6453,6454,6452,6581,6580,6581,6452,6453,6451,6580,6579,6580,6451,6452,6450,6579,6578,6579,6450,6451,6449,6578,6577,6578,6449,6450,6448,6577,6576,6577,6448,6449,6447,6576,6575,6576,6447,6448,6446,6575,6574,6575,6446,6447,6445,6574,6573,6574,6445,6446,6444,6573,6572,6573,6444,6445,6443,6572,6571,6572,6443,6444,6442,6571,6570,6571,6442,6443,6441,6570,6569,6570,6441,6442,6440,6569,6568,6569,6440,6441,6439,6568,6567,6568,6439,6440,6438,6567,6566,6567,6438,6439,6437,6566,6565,6566,6437,6438,6436,6565,6564,6565,6436,6437,6435,6564,6563,6564,6435,6436,6434,6563,6562,6563,6434,6435,6433,6562,6561,6562,6433,6434,6432,6561,6560,6561,6432,6433,6431,6560,6559,6560,6431,6432,6430,6559,6558,6559,6430,6431,6429,6558,6557,6558,6429,6430,6428,6557,6556,6557,6428,6429,6427,6556,6555,6556,6427,6428,6426,6555,6554,6555,6426,6427,6425,6554,6553,6554,6425,6426,6424,6553,6552,6553,6424,6425,6423,6552,6551,6552,6423,6424,6422,6551,6550,6551,6422,6423,6421,6550,6549,6550,6421,6422,6420,6549,6548,6549,6420,6421,6419,6548,6547,6548,6419,6420,6418,6547,6546,6547,6418,6419,6417,6546,6545,6546,6417,6418,6416,6545,6544,6545,6416,6417,6415,6544,6543,6544,6415,6416,6414,6543,6542,6543,6414,6415,6413,6542,6541,6542,6413,6414,6412,6541,6540,6541,6412,6413,6411,6540,6539,6540,6411,6412,6410,6539,6538,6539,6410,6411,6409,6538,6537,6538,6409,6410,6408,6537,6536,6537,6408,6409,6407,6536,6535,6536,6407,6408,6406,6535,6534,6535,6406,6407,6405,6534,6533,6534,6405,6406,6404,6533,6532,6533,6404,6405,6403,6532,6531,6532,6403,6404,6402,6531,6530,6531,6402,6403,6401,6530,6529,6530,6401,6402,6400,6529,6528,6529,6400,6401,6654,6783,6782,6783,6654,6655,6653,6782,6781,6782,6653,6654,6652,6781,6780,6781,6652,6653,6651,6780,6779,6780,6651,6652,6650,6779,6778,6779,6650,6651,6649,6778,6777,6778,6649,6650,6648,6777,6776,6777,6648,6649,6647,6776,6775,6776,6647,6648,6646,6775,6774,6775,6646,6647,6645,6774,6773,6774,6645,6646,6644,6773,6772,6773,6644,6645,6643,6772,6771,6772,6643,6644,6642,6771,6770,6771,6642,6643,6641,6770,6769,6770,6641,6642,6640,6769,6768,6769,6640,6641,6639,6768,6767,6768,6639,6640,6638,6767,6766,6767,6638,6639,6637,6766,6765,6766,6637,6638,6636,6765,6764,6765,6636,6637,6635,6764,6763,6764,6635,6636,6634,6763,6762,6763,6634,6635,6633,6762,6761,6762,6633,6634,6632,6761,6760,6761,6632,6633,6631,6760,6759,6760,6631,6632,6630,6759,6758,6759,6630,6631,6629,6758,6757,6758,6629,6630,6628,6757,6756,6757,6628,6629,6627,6756,6755,6756,6627,6628,6626,6755,6754,6755,6626,6627,6625,6754,6753,6754,6625,6626,6624,6753,6752,6753,6624,6625,6623,6752,6751,6752,6623,6624,6622,6751,6750,6751,6622,6623,6621,6750,6749,6750,6621,6622,6620,6749,6748,6749,6620,6621,6619,6748,6747,6748,6619,6620,6618,6747,6746,6747,6618,6619,6617,6746,6745,6746,6617,6618,6616,6745,6744,6745,6616,6617,6615,6744,6743,6744,6615,6616,6614,6743,6742,6743,6614,6615,6613,6742,6741,6742,6613,6614,6612,6741,6740,6741,6612,6613,6611,6740,6739,6740,6611,6612,6610,6739,6738,6739,6610,6611,6609,6738,6737,6738,6609,6610,6608,6737,6736,6737,6608,6609,6607,6736,6735,6736,6607,6608,6606,6735,6734,6735,6606,6607,6605,6734,6733,6734,6605,6606,6604,6733,6732,6733,6604,6605,6603,6732,6731,6732,6603,6604,6602,6731,6730,6731,6602,6603,6601,6730,6729,6730,6601,6602,6600,6729,6728,6729,6600,6601,6599,6728,6727,6728,6599,6600,6598,6727,6726,6727,6598,6599,6597,6726,6725,6726,6597,6598,6596,6725,6724,6725,6596,6597,6595,6724,6723,6724,6595,6596,6594,6723,6722,6723,6594,6595,6593,6722,6721,6722,6593,6594,6592,6721,6720,6721,6592,6593,6591,6720,6719,6720,6591,6592,6590,6719,6718,6719,6590,6591,6589,6718,6717,6718,6589,6590,6588,6717,6716,6717,6588,6589,6587,6716,6715,6716,6587,6588,6586,6715,6714,6715,6586,6587,6585,6714,6713,6714,6585,6586,6584,6713,6712,6713,6584,6585,6583,6712,6711,6712,6583,6584,6582,6711,6710,6711,6582,6583,6581,6710,6709,6710,6581,6582,6580,6709,6708,6709,6580,6581,6579,6708,6707,6708,6579,6580,6578,6707,6706,6707,6578,6579,6577,6706,6705,6706,6577,6578,6576,6705,6704,6705,6576,6577,6575,6704,6703,6704,6575,6576,6574,6703,6702,6703,6574,6575,6573,6702,6701,6702,6573,6574,6572,6701,6700,6701,6572,6573,6571,6700,6699,6700,6571,6572,6570,6699,6698,6699,6570,6571,6569,6698,6697,6698,6569,6570,6568,6697,6696,6697,6568,6569,6567,6696,6695,6696,6567,6568,6566,6695,6694,6695,6566,6567,6565,6694,6693,6694,6565,6566,6564,6693,6692,6693,6564,6565,6563,6692,6691,6692,6563,6564,6562,6691,6690,6691,6562,6563,6561,6690,6689,6690,6561,6562,6560,6689,6688,6689,6560,6561,6559,6688,6687,6688,6559,6560,6558,6687,6686,6687,6558,6559,6557,6686,6685,6686,6557,6558,6556,6685,6684,6685,6556,6557,6555,6684,6683,6684,6555,6556,6554,6683,6682,6683,6554,6555,6553,6682,6681,6682,6553,6554,6552,6681,6680,6681,6552,6553,6551,6680,6679,6680,6551,6552,6550,6679,6678,6679,6550,6551,6549,6678,6677,6678,6549,6550,6548,6677,6676,6677,6548,6549,6547,6676,6675,6676,6547,6548,6546,6675,6674,6675,6546,6547,6545,6674,6673,6674,6545,6546,6544,6673,6672,6673,6544,6545,6543,6672,6671,6672,6543,6544,6542,6671,6670,6671,6542,6543,6541,6670,6669,6670,6541,6542,6540,6669,6668,6669,6540,6541,6539,6668,6667,6668,6539,6540,6538,6667,6666,6667,6538,6539,6537,6666,6665,6666,6537,6538,6536,6665,6664,6665,6536,6537,6535,6664,6663,6664,6535,6536,6534,6663,6662,6663,6534,6535,6533,6662,6661,6662,6533,6534,6532,6661,6660,6661,6532,6533,6531,6660,6659,6660,6531,6532,6530,6659,6658,6659,6530,6531,6529,6658,6657,6658,6529,6530,6528,6657,6656,6657,6528,6529,6782,6911,6910,6911,6782,6783,6781,6910,6909,6910,6781,6782,6780,6909,6908,6909,6780,6781,6779,6908,6907,6908,6779,6780,6778,6907,6906,6907,6778,6779,6777,6906,6905,6906,6777,6778,6776,6905,6904,6905,6776,6777,6775,6904,6903,6904,6775,6776,6774,6903,6902,6903,6774,6775,6773,6902,6901,6902,6773,6774,6772,6901,6900,6901,6772,6773,6771,6900,6899,6900,6771,6772,6770,6899,6898,6899,6770,6771,6769,6898,6897,6898,6769,6770,6768,6897,6896,6897,6768,6769,6767,6896,6895,6896,6767,6768,6766,6895,6894,6895,6766,6767,6765,6894,6893,6894,6765,6766,6764,6893,6892,6893,6764,6765,6763,6892,6891,6892,6763,6764,6762,6891,6890,6891,6762,6763,6761,6890,6889,6890,6761,6762,6760,6889,6888,6889,6760,6761,6759,6888,6887,6888,6759,6760,6758,6887,6886,6887,6758,6759,6757,6886,6885,6886,6757,6758,6756,6885,6884,6885,6756,6757,6755,6884,6883,6884,6755,6756,6754,6883,6882,6883,6754,6755,6753,6882,6881,6882,6753,6754,6752,6881,6880,6881,6752,6753,6751,6880,6879,6880,6751,6752,6750,6879,6878,6879,6750,6751,6749,6878,6877,6878,6749,6750,6748,6877,6876,6877,6748,6749,6747,6876,6875,6876,6747,6748,6746,6875,6874,6875,6746,6747,6745,6874,6873,6874,6745,6746,6744,6873,6872,6873,6744,6745,6743,6872,6871,6872,6743,6744,6742,6871,6870,6871,6742,6743,6741,6870,6869,6870,6741,6742,6740,6869,6868,6869,6740,6741,6739,6868,6867,6868,6739,6740,6738,6867,6866,6867,6738,6739,6737,6866,6865,6866,6737,6738,6736,6865,6864,6865,6736,6737,6735,6864,6863,6864,6735,6736,6734,6863,6862,6863,6734,6735,6733,6862,6861,6862,6733,6734,6732,6861,6860,6861,6732,6733,6731,6860,6859,6860,6731,6732,6730,6859,6858,6859,6730,6731,6729,6858,6857,6858,6729,6730,6728,6857,6856,6857,6728,6729,6727,6856,6855,6856,6727,6728,6726,6855,6854,6855,6726,6727,6725,6854,6853,6854,6725,6726,6724,6853,6852,6853,6724,6725,6723,6852,6851,6852,6723,6724,6722,6851,6850,6851,6722,6723,6721,6850,6849,6850,6721,6722,6720,6849,6848,6849,6720,6721,6719,6848,6847,6848,6719,6720,6718,6847,6846,6847,6718,6719,6717,6846,6845,6846,6717,6718,6716,6845,6844,6845,6716,6717,6715,6844,6843,6844,6715,6716,6714,6843,6842,6843,6714,6715,6713,6842,6841,6842,6713,6714,6712,6841,6840,6841,6712,6713,6711,6840,6839,6840,6711,6712,6710,6839,6838,6839,6710,6711,6709,6838,6837,6838,6709,6710,6708,6837,6836,6837,6708,6709,6707,6836,6835,6836,6707,6708,6706,6835,6834,6835,6706,6707,6705,6834,6833,6834,6705,6706,6704,6833,6832,6833,6704,6705,6703,6832,6831,6832,6703,6704,6702,6831,6830,6831,6702,6703,6701,6830,6829,6830,6701,6702,6700,6829,6828,6829,6700,6701,6699,6828,6827,6828,6699,6700,6698,6827,6826,6827,6698,6699,6697,6826,6825,6826,6697,6698,6696,6825,6824,6825,6696,6697,6695,6824,6823,6824,6695,6696,6694,6823,6822,6823,6694,6695,6693,6822,6821,6822,6693,6694,6692,6821,6820,6821,6692,6693,6691,6820,6819,6820,6691,6692,6690,6819,6818,6819,6690,6691,6689,6818,6817,6818,6689,6690,6688,6817,6816,6817,6688,6689,6687,6816,6815,6816,6687,6688,6686,6815,6814,6815,6686,6687,6685,6814,6813,6814,6685,6686,6684,6813,6812,6813,6684,6685,6683,6812,6811,6812,6683,6684,6682,6811,6810,6811,6682,6683,6681,6810,6809,6810,6681,6682,6680,6809,6808,6809,6680,6681,6679,6808,6807,6808,6679,6680,6678,6807,6806,6807,6678,6679,6677,6806,6805,6806,6677,6678,6676,6805,6804,6805,6676,6677,6675,6804,6803,6804,6675,6676,6674,6803,6802,6803,6674,6675,6673,6802,6801,6802,6673,6674,6672,6801,6800,6801,6672,6673,6671,6800,6799,6800,6671,6672,6670,6799,6798,6799,6670,6671,6669,6798,6797,6798,6669,6670,6668,6797,6796,6797,6668,6669,6667,6796,6795,6796,6667,6668,6666,6795,6794,6795,6666,6667,6665,6794,6793,6794,6665,6666,6664,6793,6792,6793,6664,6665,6663,6792,6791,6792,6663,6664,6662,6791,6790,6791,6662,6663,6661,6790,6789,6790,6661,6662,6660,6789,6788,6789,6660,6661,6659,6788,6787,6788,6659,6660,6658,6787,6786,6787,6658,6659,6657,6786,6785,6786,6657,6658,6656,6785,6784,6785,6656,6657,6910,7039,7038,7039,6910,6911,6909,7038,7037,7038,6909,6910,6908,7037,7036,7037,6908,6909,6907,7036,7035,7036,6907,6908,6906,7035,7034,7035,6906,6907,6905,7034,7033,7034,6905,6906,6904,7033,7032,7033,6904,6905,6903,7032,7031,7032,6903,6904,6902,7031,7030,7031,6902,6903,6901,7030,7029,7030,6901,6902,6900,7029,7028,7029,6900,6901,6899,7028,7027,7028,6899,6900,6898,7027,7026,7027,6898,6899,6897,7026,7025,7026,6897,6898,6896,7025,7024,7025,6896,6897,6895,7024,7023,7024,6895,6896,6894,7023,7022,7023,6894,6895,6893,7022,7021,7022,6893,6894,6892,7021,7020,7021,6892,6893,6891,7020,7019,7020,6891,6892,6890,7019,7018,7019,6890,6891,6889,7018,7017,7018,6889,6890,6888,7017,7016,7017,6888,6889,6887,7016,7015,7016,6887,6888,6886,7015,7014,7015,6886,6887,6885,7014,7013,7014,6885,6886,6884,7013,7012,7013,6884,6885,6883,7012,7011,7012,6883,6884,6882,7011,7010,7011,6882,6883,6881,7010,7009,7010,6881,6882,6880,7009,7008,7009,6880,6881,6879,7008,7007,7008,6879,6880,6878,7007,7006,7007,6878,6879,6877,7006,7005,7006,6877,6878,6876,7005,7004,7005,6876,6877,6875,7004,7003,7004,6875,6876,6874,7003,7002,7003,6874,6875,6873,7002,7001,7002,6873,6874,6872,7001,7000,7001,6872,6873,6871,7000,6999,7000,6871,6872,6870,6999,6998,6999,6870,6871,6869,6998,6997,6998,6869,6870,6868,6997,6996,6997,6868,6869,6867,6996,6995,6996,6867,6868,6866,6995,6994,6995,6866,6867,6865,6994,6993,6994,6865,6866,6864,6993,6992,6993,6864,6865,6863,6992,6991,6992,6863,6864,6862,6991,6990,6991,6862,6863,6861,6990,6989,6990,6861,6862,6860,6989,6988,6989,6860,6861,6859,6988,6987,6988,6859,6860,6858,6987,6986,6987,6858,6859,6857,6986,6985,6986,6857,6858,6856,6985,6984,6985,6856,6857,6855,6984,6983,6984,6855,6856,6854,6983,6982,6983,6854,6855,6853,6982,6981,6982,6853,6854,6852,6981,6980,6981,6852,6853,6851,6980,6979,6980,6851,6852,6850,6979,6978,6979,6850,6851,6849,6978,6977,6978,6849,6850,6848,6977,6976,6977,6848,6849,6847,6976,6975,6976,6847,6848,6846,6975,6974,6975,6846,6847,6845,6974,6973,6974,6845,6846,6844,6973,6972,6973,6844,6845,6843,6972,6971,6972,6843,6844,6842,6971,6970,6971,6842,6843,6841,6970,6969,6970,6841,6842,6840,6969,6968,6969,6840,6841,6839,6968,6967,6968,6839,6840,6838,6967,6966,6967,6838,6839,6837,6966,6965,6966,6837,6838,6836,6965,6964,6965,6836,6837,6835,6964,6963,6964,6835,6836,6834,6963,6962,6963,6834,6835,6833,6962,6961,6962,6833,6834,6832,6961,6960,6961,6832,6833,6831,6960,6959,6960,6831,6832,6830,6959,6958,6959,6830,6831,6829,6958,6957,6958,6829,6830,6828,6957,6956,6957,6828,6829,6827,6956,6955,6956,6827,6828,6826,6955,6954,6955,6826,6827,6825,6954,6953,6954,6825,6826,6824,6953,6952,6953,6824,6825,6823,6952,6951,6952,6823,6824,6822,6951,6950,6951,6822,6823,6821,6950,6949,6950,6821,6822,6820,6949,6948,6949,6820,6821,6819,6948,6947,6948,6819,6820,6818,6947,6946,6947,6818,6819,6817,6946,6945,6946,6817,6818,6816,6945,6944,6945,6816,6817,6815,6944,6943,6944,6815,6816,6814,6943,6942,6943,6814,6815,6813,6942,6941,6942,6813,6814,6812,6941,6940,6941,6812,6813,6811,6940,6939,6940,6811,6812,6810,6939,6938,6939,6810,6811,6809,6938,6937,6938,6809,6810,6808,6937,6936,6937,6808,6809,6807,6936,6935,6936,6807,6808,6806,6935,6934,6935,6806,6807,6805,6934,6933,6934,6805,6806,6804,6933,6932,6933,6804,6805,6803,6932,6931,6932,6803,6804,6802,6931,6930,6931,6802,6803,6801,6930,6929,6930,6801,6802,6800,6929,6928,6929,6800,6801,6799,6928,6927,6928,6799,6800,6798,6927,6926,6927,6798,6799,6797,6926,6925,6926,6797,6798,6796,6925,6924,6925,6796,6797,6795,6924,6923,6924,6795,6796,6794,6923,6922,6923,6794,6795,6793,6922,6921,6922,6793,6794,6792,6921,6920,6921,6792,6793,6791,6920,6919,6920,6791,6792,6790,6919,6918,6919,6790,6791,6789,6918,6917,6918,6789,6790,6788,6917,6916,6917,6788,6789,6787,6916,6915,6916,6787,6788,6786,6915,6914,6915,6786,6787,6785,6914,6913,6914,6785,6786,6784,6913,6912,6913,6784,6785,7038,7167,7166,7167,7038,7039,7037,7166,7165,7166,7037,7038,7036,7165,7164,7165,7036,7037,7035,7164,7163,7164,7035,7036,7034,7163,7162,7163,7034,7035,7033,7162,7161,7162,7033,7034,7032,7161,7160,7161,7032,7033,7031,7160,7159,7160,7031,7032,7030,7159,7158,7159,7030,7031,7029,7158,7157,7158,7029,7030,7028,7157,7156,7157,7028,7029,7027,7156,7155,7156,7027,7028,7026,7155,7154,7155,7026,7027,7025,7154,7153,7154,7025,7026,7024,7153,7152,7153,7024,7025,7023,7152,7151,7152,7023,7024,7022,7151,7150,7151,7022,7023,7021,7150,7149,7150,7021,7022,7020,7149,7148,7149,7020,7021,7019,7148,7147,7148,7019,7020,7018,7147,7146,7147,7018,7019,7017,7146,7145,7146,7017,7018,7016,7145,7144,7145,7016,7017,7015,7144,7143,7144,7015,7016,7014,7143,7142,7143,7014,7015,7013,7142,7141,7142,7013,7014,7012,7141,7140,7141,7012,7013,7011,7140,7139,7140,7011,7012,7010,7139,7138,7139,7010,7011,7009,7138,7137,7138,7009,7010,7008,7137,7136,7137,7008,7009,7007,7136,7135,7136,7007,7008,7006,7135,7134,7135,7006,7007,7005,7134,7133,7134,7005,7006,7004,7133,7132,7133,7004,7005,7003,7132,7131,7132,7003,7004,7002,7131,7130,7131,7002,7003,7001,7130,7129,7130,7001,7002,7000,7129,7128,7129,7000,7001,6999,7128,7127,7128,6999,7000,6998,7127,7126,7127,6998,6999,6997,7126,7125,7126,6997,6998,6996,7125,7124,7125,6996,6997,6995,7124,7123,7124,6995,6996,6994,7123,7122,7123,6994,6995,6993,7122,7121,7122,6993,6994,6992,7121,7120,7121,6992,6993,6991,7120,7119,7120,6991,6992,6990,7119,7118,7119,6990,6991,6989,7118,7117,7118,6989,6990,6988,7117,7116,7117,6988,6989,6987,7116,7115,7116,6987,6988,6986,7115,7114,7115,6986,6987,6985,7114,7113,7114,6985,6986,6984,7113,7112,7113,6984,6985,6983,7112,7111,7112,6983,6984,6982,7111,7110,7111,6982,6983,6981,7110,7109,7110,6981,6982,6980,7109,7108,7109,6980,6981,6979,7108,7107,7108,6979,6980,6978,7107,7106,7107,6978,6979,6977,7106,7105,7106,6977,6978,6976,7105,7104,7105,6976,6977,6975,7104,7103,7104,6975,6976,6974,7103,7102,7103,6974,6975,6973,7102,7101,7102,6973,6974,6972,7101,7100,7101,6972,6973,6971,7100,7099,7100,6971,6972,6970,7099,7098,7099,6970,6971,6969,7098,7097,7098,6969,6970,6968,7097,7096,7097,6968,6969,6967,7096,7095,7096,6967,6968,6966,7095,7094,7095,6966,6967,6965,7094,7093,7094,6965,6966,6964,7093,7092,7093,6964,6965,6963,7092,7091,7092,6963,6964,6962,7091,7090,7091,6962,6963,6961,7090,7089,7090,6961,6962,6960,7089,7088,7089,6960,6961,6959,7088,7087,7088,6959,6960,6958,7087,7086,7087,6958,6959,6957,7086,7085,7086,6957,6958,6956,7085,7084,7085,6956,6957,6955,7084,7083,7084,6955,6956,6954,7083,7082,7083,6954,6955,6953,7082,7081,7082,6953,6954,6952,7081,7080,7081,6952,6953,6951,7080,7079,7080,6951,6952,6950,7079,7078,7079,6950,6951,6949,7078,7077,7078,6949,6950,6948,7077,7076,7077,6948,6949,6947,7076,7075,7076,6947,6948,6946,7075,7074,7075,6946,6947,6945,7074,7073,7074,6945,6946,6944,7073,7072,7073,6944,6945,6943,7072,7071,7072,6943,6944,6942,7071,7070,7071,6942,6943,6941,7070,7069,7070,6941,6942,6940,7069,7068,7069,6940,6941,6939,7068,7067,7068,6939,6940,6938,7067,7066,7067,6938,6939,6937,7066,7065,7066,6937,6938,6936,7065,7064,7065,6936,6937,6935,7064,7063,7064,6935,6936,6934,7063,7062,7063,6934,6935,6933,7062,7061,7062,6933,6934,6932,7061,7060,7061,6932,6933,6931,7060,7059,7060,6931,6932,6930,7059,7058,7059,6930,6931,6929,7058,7057,7058,6929,6930,6928,7057,7056,7057,6928,6929,6927,7056,7055,7056,6927,6928,6926,7055,7054,7055,6926,6927,6925,7054,7053,7054,6925,6926,6924,7053,7052,7053,6924,6925,6923,7052,7051,7052,6923,6924,6922,7051,7050,7051,6922,6923,6921,7050,7049,7050,6921,6922,6920,7049,7048,7049,6920,6921,6919,7048,7047,7048,6919,6920,6918,7047,7046,7047,6918,6919,6917,7046,7045,7046,6917,6918,6916,7045,7044,7045,6916,6917,6915,7044,7043,7044,6915,6916,6914,7043,7042,7043,6914,6915,6913,7042,7041,7042,6913,6914,6912,7041,7040,7041,6912,6913,7166,7295,7294,7295,7166,7167,7165,7294,7293,7294,7165,7166,7164,7293,7292,7293,7164,7165,7163,7292,7291,7292,7163,7164,7162,7291,7290,7291,7162,7163,7161,7290,7289,7290,7161,7162,7160,7289,7288,7289,7160,7161,7159,7288,7287,7288,7159,7160,7158,7287,7286,7287,7158,7159,7157,7286,7285,7286,7157,7158,7156,7285,7284,7285,7156,7157,7155,7284,7283,7284,7155,7156,7154,7283,7282,7283,7154,7155,7153,7282,7281,7282,7153,7154,7152,7281,7280,7281,7152,7153,7151,7280,7279,7280,7151,7152,7150,7279,7278,7279,7150,7151,7149,7278,7277,7278,7149,7150,7148,7277,7276,7277,7148,7149,7147,7276,7275,7276,7147,7148,7146,7275,7274,7275,7146,7147,7145,7274,7273,7274,7145,7146,7144,7273,7272,7273,7144,7145,7143,7272,7271,7272,7143,7144,7142,7271,7270,7271,7142,7143,7141,7270,7269,7270,7141,7142,7140,7269,7268,7269,7140,7141,7139,7268,7267,7268,7139,7140,7138,7267,7266,7267,7138,7139,7137,7266,7265,7266,7137,7138,7136,7265,7264,7265,7136,7137,7135,7264,7263,7264,7135,7136,7134,7263,7262,7263,7134,7135,7133,7262,7261,7262,7133,7134,7132,7261,7260,7261,7132,7133,7131,7260,7259,7260,7131,7132,7130,7259,7258,7259,7130,7131,7129,7258,7257,7258,7129,7130,7128,7257,7256,7257,7128,7129,7127,7256,7255,7256,7127,7128,7126,7255,7254,7255,7126,7127,7125,7254,7253,7254,7125,7126,7124,7253,7252,7253,7124,7125,7123,7252,7251,7252,7123,7124,7122,7251,7250,7251,7122,7123,7121,7250,7249,7250,7121,7122,7120,7249,7248,7249,7120,7121,7119,7248,7247,7248,7119,7120,7118,7247,7246,7247,7118,7119,7117,7246,7245,7246,7117,7118,7116,7245,7244,7245,7116,7117,7115,7244,7243,7244,7115,7116,7114,7243,7242,7243,7114,7115,7113,7242,7241,7242,7113,7114,7112,7241,7240,7241,7112,7113,7111,7240,7239,7240,7111,7112,7110,7239,7238,7239,7110,7111,7109,7238,7237,7238,7109,7110,7108,7237,7236,7237,7108,7109,7107,7236,7235,7236,7107,7108,7106,7235,7234,7235,7106,7107,7105,7234,7233,7234,7105,7106,7104,7233,7232,7233,7104,7105,7103,7232,7231,7232,7103,7104,7102,7231,7230,7231,7102,7103,7101,7230,7229,7230,7101,7102,7100,7229,7228,7229,7100,7101,7099,7228,7227,7228,7099,7100,7098,7227,7226,7227,7098,7099,7097,7226,7225,7226,7097,7098,7096,7225,7224,7225,7096,7097,7095,7224,7223,7224,7095,7096,7094,7223,7222,7223,7094,7095,7093,7222,7221,7222,7093,7094,7092,7221,7220,7221,7092,7093,7091,7220,7219,7220,7091,7092,7090,7219,7218,7219,7090,7091,7089,7218,7217,7218,7089,7090,7088,7217,7216,7217,7088,7089,7087,7216,7215,7216,7087,7088,7086,7215,7214,7215,7086,7087,7085,7214,7213,7214,7085,7086,7084,7213,7212,7213,7084,7085,7083,7212,7211,7212,7083,7084,7082,7211,7210,7211,7082,7083,7081,7210,7209,7210,7081,7082,7080,7209,7208,7209,7080,7081,7079,7208,7207,7208,7079,7080,7078,7207,7206,7207,7078,7079,7077,7206,7205,7206,7077,7078,7076,7205,7204,7205,7076,7077,7075,7204,7203,7204,7075,7076,7074,7203,7202,7203,7074,7075,7073,7202,7201,7202,7073,7074,7072,7201,7200,7201,7072,7073,7071,7200,7199,7200,7071,7072,7070,7199,7198,7199,7070,7071,7069,7198,7197,7198,7069,7070,7068,7197,7196,7197,7068,7069,7067,7196,7195,7196,7067,7068,7066,7195,7194,7195,7066,7067,7065,7194,7193,7194,7065,7066,7064,7193,7192,7193,7064,7065,7063,7192,7191,7192,7063,7064,7062,7191,7190,7191,7062,7063,7061,7190,7189,7190,7061,7062,7060,7189,7188,7189,7060,7061,7059,7188,7187,7188,7059,7060,7058,7187,7186,7187,7058,7059,7057,7186,7185,7186,7057,7058,7056,7185,7184,7185,7056,7057,7055,7184,7183,7184,7055,7056,7054,7183,7182,7183,7054,7055,7053,7182,7181,7182,7053,7054,7052,7181,7180,7181,7052,7053,7051,7180,7179,7180,7051,7052,7050,7179,7178,7179,7050,7051,7049,7178,7177,7178,7049,7050,7048,7177,7176,7177,7048,7049,7047,7176,7175,7176,7047,7048,7046,7175,7174,7175,7046,7047,7045,7174,7173,7174,7045,7046,7044,7173,7172,7173,7044,7045,7043,7172,7171,7172,7043,7044,7042,7171,7170,7171,7042,7043,7041,7170,7169,7170,7041,7042,7040,7169,7168,7169,7040,7041,7294,7423,7422,7423,7294,7295,7293,7422,7421,7422,7293,7294,7292,7421,7420,7421,7292,7293,7291,7420,7419,7420,7291,7292,7290,7419,7418,7419,7290,7291,7289,7418,7417,7418,7289,7290,7288,7417,7416,7417,7288,7289,7287,7416,7415,7416,7287,7288,7286,7415,7414,7415,7286,7287,7285,7414,7413,7414,7285,7286,7284,7413,7412,7413,7284,7285,7283,7412,7411,7412,7283,7284,7282,7411,7410,7411,7282,7283,7281,7410,7409,7410,7281,7282,7280,7409,7408,7409,7280,7281,7279,7408,7407,7408,7279,7280,7278,7407,7406,7407,7278,7279,7277,7406,7405,7406,7277,7278,7276,7405,7404,7405,7276,7277,7275,7404,7403,7404,7275,7276,7274,7403,7402,7403,7274,7275,7273,7402,7401,7402,7273,7274,7272,7401,7400,7401,7272,7273,7271,7400,7399,7400,7271,7272,7270,7399,7398,7399,7270,7271,7269,7398,7397,7398,7269,7270,7268,7397,7396,7397,7268,7269,7267,7396,7395,7396,7267,7268,7266,7395,7394,7395,7266,7267,7265,7394,7393,7394,7265,7266,7264,7393,7392,7393,7264,7265,7263,7392,7391,7392,7263,7264,7262,7391,7390,7391,7262,7263,7261,7390,7389,7390,7261,7262,7260,7389,7388,7389,7260,7261,7259,7388,7387,7388,7259,7260,7258,7387,7386,7387,7258,7259,7257,7386,7385,7386,7257,7258,7256,7385,7384,7385,7256,7257,7255,7384,7383,7384,7255,7256,7254,7383,7382,7383,7254,7255,7253,7382,7381,7382,7253,7254,7252,7381,7380,7381,7252,7253,7251,7380,7379,7380,7251,7252,7250,7379,7378,7379,7250,7251,7249,7378,7377,7378,7249,7250,7248,7377,7376,7377,7248,7249,7247,7376,7375,7376,7247,7248,7246,7375,7374,7375,7246,7247,7245,7374,7373,7374,7245,7246,7244,7373,7372,7373,7244,7245,7243,7372,7371,7372,7243,7244,7242,7371,7370,7371,7242,7243,7241,7370,7369,7370,7241,7242,7240,7369,7368,7369,7240,7241,7239,7368,7367,7368,7239,7240,7238,7367,7366,7367,7238,7239,7237,7366,7365,7366,7237,7238,7236,7365,7364,7365,7236,7237,7235,7364,7363,7364,7235,7236,7234,7363,7362,7363,7234,7235,7233,7362,7361,7362,7233,7234,7232,7361,7360,7361,7232,7233,7231,7360,7359,7360,7231,7232,7230,7359,7358,7359,7230,7231,7229,7358,7357,7358,7229,7230,7228,7357,7356,7357,7228,7229,7227,7356,7355,7356,7227,7228,7226,7355,7354,7355,7226,7227,7225,7354,7353,7354,7225,7226,7224,7353,7352,7353,7224,7225,7223,7352,7351,7352,7223,7224,7222,7351,7350,7351,7222,7223,7221,7350,7349,7350,7221,7222,7220,7349,7348,7349,7220,7221,7219,7348,7347,7348,7219,7220,7218,7347,7346,7347,7218,7219,7217,7346,7345,7346,7217,7218,7216,7345,7344,7345,7216,7217,7215,7344,7343,7344,7215,7216,7214,7343,7342,7343,7214,7215,7213,7342,7341,7342,7213,7214,7212,7341,7340,7341,7212,7213,7211,7340,7339,7340,7211,7212,7210,7339,7338,7339,7210,7211,7209,7338,7337,7338,7209,7210,7208,7337,7336,7337,7208,7209,7207,7336,7335,7336,7207,7208,7206,7335,7334,7335,7206,7207,7205,7334,7333,7334,7205,7206,7204,7333,7332,7333,7204,7205,7203,7332,7331,7332,7203,7204,7202,7331,7330,7331,7202,7203,7201,7330,7329,7330,7201,7202,7200,7329,7328,7329,7200,7201,7199,7328,7327,7328,7199,7200,7198,7327,7326,7327,7198,7199,7197,7326,7325,7326,7197,7198,7196,7325,7324,7325,7196,7197,7195,7324,7323,7324,7195,7196,7194,7323,7322,7323,7194,7195,7193,7322,7321,7322,7193,7194,7192,7321,7320,7321,7192,7193,7191,7320,7319,7320,7191,7192,7190,7319,7318,7319,7190,7191,7189,7318,7317,7318,7189,7190,7188,7317,7316,7317,7188,7189,7187,7316,7315,7316,7187,7188,7186,7315,7314,7315,7186,7187,7185,7314,7313,7314,7185,7186,7184,7313,7312,7313,7184,7185,7183,7312,7311,7312,7183,7184,7182,7311,7310,7311,7182,7183,7181,7310,7309,7310,7181,7182,7180,7309,7308,7309,7180,7181,7179,7308,7307,7308,7179,7180,7178,7307,7306,7307,7178,7179,7177,7306,7305,7306,7177,7178,7176,7305,7304,7305,7176,7177,7175,7304,7303,7304,7175,7176,7174,7303,7302,7303,7174,7175,7173,7302,7301,7302,7173,7174,7172,7301,7300,7301,7172,7173,7171,7300,7299,7300,7171,7172,7170,7299,7298,7299,7170,7171,7169,7298,7297,7298,7169,7170,7168,7297,7296,7297,7168,7169,7422,7551,7550,7551,7422,7423,7421,7550,7549,7550,7421,7422,7420,7549,7548,7549,7420,7421,7419,7548,7547,7548,7419,7420,7418,7547,7546,7547,7418,7419,7417,7546,7545,7546,7417,7418,7416,7545,7544,7545,7416,7417,7415,7544,7543,7544,7415,7416,7414,7543,7542,7543,7414,7415,7413,7542,7541,7542,7413,7414,7412,7541,7540,7541,7412,7413,7411,7540,7539,7540,7411,7412,7410,7539,7538,7539,7410,7411,7409,7538,7537,7538,7409,7410,7408,7537,7536,7537,7408,7409,7407,7536,7535,7536,7407,7408,7406,7535,7534,7535,7406,7407,7405,7534,7533,7534,7405,7406,7404,7533,7532,7533,7404,7405,7403,7532,7531,7532,7403,7404,7402,7531,7530,7531,7402,7403,7401,7530,7529,7530,7401,7402,7400,7529,7528,7529,7400,7401,7399,7528,7527,7528,7399,7400,7398,7527,7526,7527,7398,7399,7397,7526,7525,7526,7397,7398,7396,7525,7524,7525,7396,7397,7395,7524,7523,7524,7395,7396,7394,7523,7522,7523,7394,7395,7393,7522,7521,7522,7393,7394,7392,7521,7520,7521,7392,7393,7391,7520,7519,7520,7391,7392,7390,7519,7518,7519,7390,7391,7389,7518,7517,7518,7389,7390,7388,7517,7516,7517,7388,7389,7387,7516,7515,7516,7387,7388,7386,7515,7514,7515,7386,7387,7385,7514,7513,7514,7385,7386,7384,7513,7512,7513,7384,7385,7383,7512,7511,7512,7383,7384,7382,7511,7510,7511,7382,7383,7381,7510,7509,7510,7381,7382,7380,7509,7508,7509,7380,7381,7379,7508,7507,7508,7379,7380,7378,7507,7506,7507,7378,7379,7377,7506,7505,7506,7377,7378,7376,7505,7504,7505,7376,7377,7375,7504,7503,7504,7375,7376,7374,7503,7502,7503,7374,7375,7373,7502,7501,7502,7373,7374,7372,7501,7500,7501,7372,7373,7371,7500,7499,7500,7371,7372,7370,7499,7498,7499,7370,7371,7369,7498,7497,7498,7369,7370,7368,7497,7496,7497,7368,7369,7367,7496,7495,7496,7367,7368,7366,7495,7494,7495,7366,7367,7365,7494,7493,7494,7365,7366,7364,7493,7492,7493,7364,7365,7363,7492,7491,7492,7363,7364,7362,7491,7490,7491,7362,7363,7361,7490,7489,7490,7361,7362,7360,7489,7488,7489,7360,7361,7359,7488,7487,7488,7359,7360,7358,7487,7486,7487,7358,7359,7357,7486,7485,7486,7357,7358,7356,7485,7484,7485,7356,7357,7355,7484,7483,7484,7355,7356,7354,7483,7482,7483,7354,7355,7353,7482,7481,7482,7353,7354,7352,7481,7480,7481,7352,7353,7351,7480,7479,7480,7351,7352,7350,7479,7478,7479,7350,7351,7349,7478,7477,7478,7349,7350,7348,7477,7476,7477,7348,7349,7347,7476,7475,7476,7347,7348,7346,7475,7474,7475,7346,7347,7345,7474,7473,7474,7345,7346,7344,7473,7472,7473,7344,7345,7343,7472,7471,7472,7343,7344,7342,7471,7470,7471,7342,7343,7341,7470,7469,7470,7341,7342,7340,7469,7468,7469,7340,7341,7339,7468,7467,7468,7339,7340,7338,7467,7466,7467,7338,7339,7337,7466,7465,7466,7337,7338,7336,7465,7464,7465,7336,7337,7335,7464,7463,7464,7335,7336,7334,7463,7462,7463,7334,7335,7333,7462,7461,7462,7333,7334,7332,7461,7460,7461,7332,7333,7331,7460,7459,7460,7331,7332,7330,7459,7458,7459,7330,7331,7329,7458,7457,7458,7329,7330,7328,7457,7456,7457,7328,7329,7327,7456,7455,7456,7327,7328,7326,7455,7454,7455,7326,7327,7325,7454,7453,7454,7325,7326,7324,7453,7452,7453,7324,7325,7323,7452,7451,7452,7323,7324,7322,7451,7450,7451,7322,7323,7321,7450,7449,7450,7321,7322,7320,7449,7448,7449,7320,7321,7319,7448,7447,7448,7319,7320,7318,7447,7446,7447,7318,7319,7317,7446,7445,7446,7317,7318,7316,7445,7444,7445,7316,7317,7315,7444,7443,7444,7315,7316,7314,7443,7442,7443,7314,7315,7313,7442,7441,7442,7313,7314,7312,7441,7440,7441,7312,7313,7311,7440,7439,7440,7311,7312,7310,7439,7438,7439,7310,7311,7309,7438,7437,7438,7309,7310,7308,7437,7436,7437,7308,7309,7307,7436,7435,7436,7307,7308,7306,7435,7434,7435,7306,7307,7305,7434,7433,7434,7305,7306,7304,7433,7432,7433,7304,7305,7303,7432,7431,7432,7303,7304,7302,7431,7430,7431,7302,7303,7301,7430,7429,7430,7301,7302,7300,7429,7428,7429,7300,7301,7299,7428,7427,7428,7299,7300,7298,7427,7426,7427,7298,7299,7297,7426,7425,7426,7297,7298,7296,7425,7424,7425,7296,7297,7550,7679,7678,7679,7550,7551,7549,7678,7677,7678,7549,7550,7548,7677,7676,7677,7548,7549,7547,7676,7675,7676,7547,7548,7546,7675,7674,7675,7546,7547,7545,7674,7673,7674,7545,7546,7544,7673,7672,7673,7544,7545,7543,7672,7671,7672,7543,7544,7542,7671,7670,7671,7542,7543,7541,7670,7669,7670,7541,7542,7540,7669,7668,7669,7540,7541,7539,7668,7667,7668,7539,7540,7538,7667,7666,7667,7538,7539,7537,7666,7665,7666,7537,7538,7536,7665,7664,7665,7536,7537,7535,7664,7663,7664,7535,7536,7534,7663,7662,7663,7534,7535,7533,7662,7661,7662,7533,7534,7532,7661,7660,7661,7532,7533,7531,7660,7659,7660,7531,7532,7530,7659,7658,7659,7530,7531,7529,7658,7657,7658,7529,7530,7528,7657,7656,7657,7528,7529,7527,7656,7655,7656,7527,7528,7526,7655,7654,7655,7526,7527,7525,7654,7653,7654,7525,7526,7524,7653,7652,7653,7524,7525,7523,7652,7651,7652,7523,7524,7522,7651,7650,7651,7522,7523,7521,7650,7649,7650,7521,7522,7520,7649,7648,7649,7520,7521,7519,7648,7647,7648,7519,7520,7518,7647,7646,7647,7518,7519,7517,7646,7645,7646,7517,7518,7516,7645,7644,7645,7516,7517,7515,7644,7643,7644,7515,7516,7514,7643,7642,7643,7514,7515,7513,7642,7641,7642,7513,7514,7512,7641,7640,7641,7512,7513,7511,7640,7639,7640,7511,7512,7510,7639,7638,7639,7510,7511,7509,7638,7637,7638,7509,7510,7508,7637,7636,7637,7508,7509,7507,7636,7635,7636,7507,7508,7506,7635,7634,7635,7506,7507,7505,7634,7633,7634,7505,7506,7504,7633,7632,7633,7504,7505,7503,7632,7631,7632,7503,7504,7502,7631,7630,7631,7502,7503,7501,7630,7629,7630,7501,7502,7500,7629,7628,7629,7500,7501,7499,7628,7627,7628,7499,7500,7498,7627,7626,7627,7498,7499,7497,7626,7625,7626,7497,7498,7496,7625,7624,7625,7496,7497,7495,7624,7623,7624,7495,7496,7494,7623,7622,7623,7494,7495,7493,7622,7621,7622,7493,7494,7492,7621,7620,7621,7492,7493,7491,7620,7619,7620,7491,7492,7490,7619,7618,7619,7490,7491,7489,7618,7617,7618,7489,7490,7488,7617,7616,7617,7488,7489,7487,7616,7615,7616,7487,7488,7486,7615,7614,7615,7486,7487,7485,7614,7613,7614,7485,7486,7484,7613,7612,7613,7484,7485,7483,7612,7611,7612,7483,7484,7482,7611,7610,7611,7482,7483,7481,7610,7609,7610,7481,7482,7480,7609,7608,7609,7480,7481,7479,7608,7607,7608,7479,7480,7478,7607,7606,7607,7478,7479,7477,7606,7605,7606,7477,7478,7476,7605,7604,7605,7476,7477,7475,7604,7603,7604,7475,7476,7474,7603,7602,7603,7474,7475,7473,7602,7601,7602,7473,7474,7472,7601,7600,7601,7472,7473,7471,7600,7599,7600,7471,7472,7470,7599,7598,7599,7470,7471,7469,7598,7597,7598,7469,7470,7468,7597,7596,7597,7468,7469,7467,7596,7595,7596,7467,7468,7466,7595,7594,7595,7466,7467,7465,7594,7593,7594,7465,7466,7464,7593,7592,7593,7464,7465,7463,7592,7591,7592,7463,7464,7462,7591,7590,7591,7462,7463,7461,7590,7589,7590,7461,7462,7460,7589,7588,7589,7460,7461,7459,7588,7587,7588,7459,7460,7458,7587,7586,7587,7458,7459,7457,7586,7585,7586,7457,7458,7456,7585,7584,7585,7456,7457,7455,7584,7583,7584,7455,7456,7454,7583,7582,7583,7454,7455,7453,7582,7581,7582,7453,7454,7452,7581,7580,7581,7452,7453,7451,7580,7579,7580,7451,7452,7450,7579,7578,7579,7450,7451,7449,7578,7577,7578,7449,7450,7448,7577,7576,7577,7448,7449,7447,7576,7575,7576,7447,7448,7446,7575,7574,7575,7446,7447,7445,7574,7573,7574,7445,7446,7444,7573,7572,7573,7444,7445,7443,7572,7571,7572,7443,7444,7442,7571,7570,7571,7442,7443,7441,7570,7569,7570,7441,7442,7440,7569,7568,7569,7440,7441,7439,7568,7567,7568,7439,7440,7438,7567,7566,7567,7438,7439,7437,7566,7565,7566,7437,7438,7436,7565,7564,7565,7436,7437,7435,7564,7563,7564,7435,7436,7434,7563,7562,7563,7434,7435,7433,7562,7561,7562,7433,7434,7432,7561,7560,7561,7432,7433,7431,7560,7559,7560,7431,7432,7430,7559,7558,7559,7430,7431,7429,7558,7557,7558,7429,7430,7428,7557,7556,7557,7428,7429,7427,7556,7555,7556,7427,7428,7426,7555,7554,7555,7426,7427,7425,7554,7553,7554,7425,7426,7424,7553,7552,7553,7424,7425,7678,7807,7806,7807,7678,7679,7677,7806,7805,7806,7677,7678,7676,7805,7804,7805,7676,7677,7675,7804,7803,7804,7675,7676,7674,7803,7802,7803,7674,7675,7673,7802,7801,7802,7673,7674,7672,7801,7800,7801,7672,7673,7671,7800,7799,7800,7671,7672,7670,7799,7798,7799,7670,7671,7669,7798,7797,7798,7669,7670,7668,7797,7796,7797,7668,7669,7667,7796,7795,7796,7667,7668,7666,7795,7794,7795,7666,7667,7665,7794,7793,7794,7665,7666,7664,7793,7792,7793,7664,7665,7663,7792,7791,7792,7663,7664,7662,7791,7790,7791,7662,7663,7661,7790,7789,7790,7661,7662,7660,7789,7788,7789,7660,7661,7659,7788,7787,7788,7659,7660,7658,7787,7786,7787,7658,7659,7657,7786,7785,7786,7657,7658,7656,7785,7784,7785,7656,7657,7655,7784,7783,7784,7655,7656,7654,7783,7782,7783,7654,7655,7653,7782,7781,7782,7653,7654,7652,7781,7780,7781,7652,7653,7651,7780,7779,7780,7651,7652,7650,7779,7778,7779,7650,7651,7649,7778,7777,7778,7649,7650,7648,7777,7776,7777,7648,7649,7647,7776,7775,7776,7647,7648,7646,7775,7774,7775,7646,7647,7645,7774,7773,7774,7645,7646,7644,7773,7772,7773,7644,7645,7643,7772,7771,7772,7643,7644,7642,7771,7770,7771,7642,7643,7641,7770,7769,7770,7641,7642,7640,7769,7768,7769,7640,7641,7639,7768,7767,7768,7639,7640,7638,7767,7766,7767,7638,7639,7637,7766,7765,7766,7637,7638,7636,7765,7764,7765,7636,7637,7635,7764,7763,7764,7635,7636,7634,7763,7762,7763,7634,7635,7633,7762,7761,7762,7633,7634,7632,7761,7760,7761,7632,7633,7631,7760,7759,7760,7631,7632,7630,7759,7758,7759,7630,7631,7629,7758,7757,7758,7629,7630,7628,7757,7756,7757,7628,7629,7627,7756,7755,7756,7627,7628,7626,7755,7754,7755,7626,7627,7625,7754,7753,7754,7625,7626,7624,7753,7752,7753,7624,7625,7623,7752,7751,7752,7623,7624,7622,7751,7750,7751,7622,7623,7621,7750,7749,7750,7621,7622,7620,7749,7748,7749,7620,7621,7619,7748,7747,7748,7619,7620,7618,7747,7746,7747,7618,7619,7617,7746,7745,7746,7617,7618,7616,7745,7744,7745,7616,7617,7615,7744,7743,7744,7615,7616,7614,7743,7742,7743,7614,7615,7613,7742,7741,7742,7613,7614,7612,7741,7740,7741,7612,7613,7611,7740,7739,7740,7611,7612,7610,7739,7738,7739,7610,7611,7609,7738,7737,7738,7609,7610,7608,7737,7736,7737,7608,7609,7607,7736,7735,7736,7607,7608,7606,7735,7734,7735,7606,7607,7605,7734,7733,7734,7605,7606,7604,7733,7732,7733,7604,7605,7603,7732,7731,7732,7603,7604,7602,7731,7730,7731,7602,7603,7601,7730,7729,7730,7601,7602,7600,7729,7728,7729,7600,7601,7599,7728,7727,7728,7599,7600,7598,7727,7726,7727,7598,7599,7597,7726,7725,7726,7597,7598,7596,7725,7724,7725,7596,7597,7595,7724,7723,7724,7595,7596,7594,7723,7722,7723,7594,7595,7593,7722,7721,7722,7593,7594,7592,7721,7720,7721,7592,7593,7591,7720,7719,7720,7591,7592,7590,7719,7718,7719,7590,7591,7589,7718,7717,7718,7589,7590,7588,7717,7716,7717,7588,7589,7587,7716,7715,7716,7587,7588,7586,7715,7714,7715,7586,7587,7585,7714,7713,7714,7585,7586,7584,7713,7712,7713,7584,7585,7583,7712,7711,7712,7583,7584,7582,7711,7710,7711,7582,7583,7581,7710,7709,7710,7581,7582,7580,7709,7708,7709,7580,7581,7579,7708,7707,7708,7579,7580,7578,7707,7706,7707,7578,7579,7577,7706,7705,7706,7577,7578,7576,7705,7704,7705,7576,7577,7575,7704,7703,7704,7575,7576,7574,7703,7702,7703,7574,7575,7573,7702,7701,7702,7573,7574,7572,7701,7700,7701,7572,7573,7571,7700,7699,7700,7571,7572,7570,7699,7698,7699,7570,7571,7569,7698,7697,7698,7569,7570,7568,7697,7696,7697,7568,7569,7567,7696,7695,7696,7567,7568,7566,7695,7694,7695,7566,7567,7565,7694,7693,7694,7565,7566,7564,7693,7692,7693,7564,7565,7563,7692,7691,7692,7563,7564,7562,7691,7690,7691,7562,7563,7561,7690,7689,7690,7561,7562,7560,7689,7688,7689,7560,7561,7559,7688,7687,7688,7559,7560,7558,7687,7686,7687,7558,7559,7557,7686,7685,7686,7557,7558,7556,7685,7684,7685,7556,7557,7555,7684,7683,7684,7555,7556,7554,7683,7682,7683,7554,7555,7553,7682,7681,7682,7553,7554,7552,7681,7680,7681,7552,7553,7806,7935,7934,7935,7806,7807,7805,7934,7933,7934,7805,7806,7804,7933,7932,7933,7804,7805,7803,7932,7931,7932,7803,7804,7802,7931,7930,7931,7802,7803,7801,7930,7929,7930,7801,7802,7800,7929,7928,7929,7800,7801,7799,7928,7927,7928,7799,7800,7798,7927,7926,7927,7798,7799,7797,7926,7925,7926,7797,7798,7796,7925,7924,7925,7796,7797,7795,7924,7923,7924,7795,7796,7794,7923,7922,7923,7794,7795,7793,7922,7921,7922,7793,7794,7792,7921,7920,7921,7792,7793,7791,7920,7919,7920,7791,7792,7790,7919,7918,7919,7790,7791,7789,7918,7917,7918,7789,7790,7788,7917,7916,7917,7788,7789,7787,7916,7915,7916,7787,7788,7786,7915,7914,7915,7786,7787,7785,7914,7913,7914,7785,7786,7784,7913,7912,7913,7784,7785,7783,7912,7911,7912,7783,7784,7782,7911,7910,7911,7782,7783,7781,7910,7909,7910,7781,7782,7780,7909,7908,7909,7780,7781,7779,7908,7907,7908,7779,7780,7778,7907,7906,7907,7778,7779,7777,7906,7905,7906,7777,7778,7776,7905,7904,7905,7776,7777,7775,7904,7903,7904,7775,7776,7774,7903,7902,7903,7774,7775,7773,7902,7901,7902,7773,7774,7772,7901,7900,7901,7772,7773,7771,7900,7899,7900,7771,7772,7770,7899,7898,7899,7770,7771,7769,7898,7897,7898,7769,7770,7768,7897,7896,7897,7768,7769,7767,7896,7895,7896,7767,7768,7766,7895,7894,7895,7766,7767,7765,7894,7893,7894,7765,7766,7764,7893,7892,7893,7764,7765,7763,7892,7891,7892,7763,7764,7762,7891,7890,7891,7762,7763,7761,7890,7889,7890,7761,7762,7760,7889,7888,7889,7760,7761,7759,7888,7887,7888,7759,7760,7758,7887,7886,7887,7758,7759,7757,7886,7885,7886,7757,7758,7756,7885,7884,7885,7756,7757,7755,7884,7883,7884,7755,7756,7754,7883,7882,7883,7754,7755,7753,7882,7881,7882,7753,7754,7752,7881,7880,7881,7752,7753,7751,7880,7879,7880,7751,7752,7750,7879,7878,7879,7750,7751,7749,7878,7877,7878,7749,7750,7748,7877,7876,7877,7748,7749,7747,7876,7875,7876,7747,7748,7746,7875,7874,7875,7746,7747,7745,7874,7873,7874,7745,7746,7744,7873,7872,7873,7744,7745,7743,7872,7871,7872,7743,7744,7742,7871,7870,7871,7742,7743,7741,7870,7869,7870,7741,7742,7740,7869,7868,7869,7740,7741,7739,7868,7867,7868,7739,7740,7738,7867,7866,7867,7738,7739,7737,7866,7865,7866,7737,7738,7736,7865,7864,7865,7736,7737,7735,7864,7863,7864,7735,7736,7734,7863,7862,7863,7734,7735,7733,7862,7861,7862,7733,7734,7732,7861,7860,7861,7732,7733,7731,7860,7859,7860,7731,7732,7730,7859,7858,7859,7730,7731,7729,7858,7857,7858,7729,7730,7728,7857,7856,7857,7728,7729,7727,7856,7855,7856,7727,7728,7726,7855,7854,7855,7726,7727,7725,7854,7853,7854,7725,7726,7724,7853,7852,7853,7724,7725,7723,7852,7851,7852,7723,7724,7722,7851,7850,7851,7722,7723,7721,7850,7849,7850,7721,7722,7720,7849,7848,7849,7720,7721,7719,7848,7847,7848,7719,7720,7718,7847,7846,7847,7718,7719,7717,7846,7845,7846,7717,7718,7716,7845,7844,7845,7716,7717,7715,7844,7843,7844,7715,7716,7714,7843,7842,7843,7714,7715,7713,7842,7841,7842,7713,7714,7712,7841,7840,7841,7712,7713,7711,7840,7839,7840,7711,7712,7710,7839,7838,7839,7710,7711,7709,7838,7837,7838,7709,7710,7708,7837,7836,7837,7708,7709,7707,7836,7835,7836,7707,7708,7706,7835,7834,7835,7706,7707,7705,7834,7833,7834,7705,7706,7704,7833,7832,7833,7704,7705,7703,7832,7831,7832,7703,7704,7702,7831,7830,7831,7702,7703,7701,7830,7829,7830,7701,7702,7700,7829,7828,7829,7700,7701,7699,7828,7827,7828,7699,7700,7698,7827,7826,7827,7698,7699,7697,7826,7825,7826,7697,7698,7696,7825,7824,7825,7696,7697,7695,7824,7823,7824,7695,7696,7694,7823,7822,7823,7694,7695,7693,7822,7821,7822,7693,7694,7692,7821,7820,7821,7692,7693,7691,7820,7819,7820,7691,7692,7690,7819,7818,7819,7690,7691,7689,7818,7817,7818,7689,7690,7688,7817,7816,7817,7688,7689,7687,7816,7815,7816,7687,7688,7686,7815,7814,7815,7686,7687,7685,7814,7813,7814,7685,7686,7684,7813,7812,7813,7684,7685,7683,7812,7811,7812,7683,7684,7682,7811,7810,7811,7682,7683,7681,7810,7809,7810,7681,7682,7680,7809,7808,7809,7680,7681,7934,8063,8062,8063,7934,7935,7933,8062,8061,8062,7933,7934,7932,8061,8060,8061,7932,7933,7931,8060,8059,8060,7931,7932,7930,8059,8058,8059,7930,7931,7929,8058,8057,8058,7929,7930,7928,8057,8056,8057,7928,7929,7927,8056,8055,8056,7927,7928,7926,8055,8054,8055,7926,7927,7925,8054,8053,8054,7925,7926,7924,8053,8052,8053,7924,7925,7923,8052,8051,8052,7923,7924,7922,8051,8050,8051,7922,7923,7921,8050,8049,8050,7921,7922,7920,8049,8048,8049,7920,7921,7919,8048,8047,8048,7919,7920,7918,8047,8046,8047,7918,7919,7917,8046,8045,8046,7917,7918,7916,8045,8044,8045,7916,7917,7915,8044,8043,8044,7915,7916,7914,8043,8042,8043,7914,7915,7913,8042,8041,8042,7913,7914,7912,8041,8040,8041,7912,7913,7911,8040,8039,8040,7911,7912,7910,8039,8038,8039,7910,7911,7909,8038,8037,8038,7909,7910,7908,8037,8036,8037,7908,7909,7907,8036,8035,8036,7907,7908,7906,8035,8034,8035,7906,7907,7905,8034,8033,8034,7905,7906,7904,8033,8032,8033,7904,7905,7903,8032,8031,8032,7903,7904,7902,8031,8030,8031,7902,7903,7901,8030,8029,8030,7901,7902,7900,8029,8028,8029,7900,7901,7899,8028,8027,8028,7899,7900,7898,8027,8026,8027,7898,7899,7897,8026,8025,8026,7897,7898,7896,8025,8024,8025,7896,7897,7895,8024,8023,8024,7895,7896,7894,8023,8022,8023,7894,7895,7893,8022,8021,8022,7893,7894,7892,8021,8020,8021,7892,7893,7891,8020,8019,8020,7891,7892,7890,8019,8018,8019,7890,7891,7889,8018,8017,8018,7889,7890,7888,8017,8016,8017,7888,7889,7887,8016,8015,8016,7887,7888,7886,8015,8014,8015,7886,7887,7885,8014,8013,8014,7885,7886,7884,8013,8012,8013,7884,7885,7883,8012,8011,8012,7883,7884,7882,8011,8010,8011,7882,7883,7881,8010,8009,8010,7881,7882,7880,8009,8008,8009,7880,7881,7879,8008,8007,8008,7879,7880,7878,8007,8006,8007,7878,7879,7877,8006,8005,8006,7877,7878,7876,8005,8004,8005,7876,7877,7875,8004,8003,8004,7875,7876,7874,8003,8002,8003,7874,7875,7873,8002,8001,8002,7873,7874,7872,8001,8000,8001,7872,7873,7871,8000,7999,8000,7871,7872,7870,7999,7998,7999,7870,7871,7869,7998,7997,7998,7869,7870,7868,7997,7996,7997,7868,7869,7867,7996,7995,7996,7867,7868,7866,7995,7994,7995,7866,7867,7865,7994,7993,7994,7865,7866,7864,7993,7992,7993,7864,7865,7863,7992,7991,7992,7863,7864,7862,7991,7990,7991,7862,7863,7861,7990,7989,7990,7861,7862,7860,7989,7988,7989,7860,7861,7859,7988,7987,7988,7859,7860,7858,7987,7986,7987,7858,7859,7857,7986,7985,7986,7857,7858,7856,7985,7984,7985,7856,7857,7855,7984,7983,7984,7855,7856,7854,7983,7982,7983,7854,7855,7853,7982,7981,7982,7853,7854,7852,7981,7980,7981,7852,7853,7851,7980,7979,7980,7851,7852,7850,7979,7978,7979,7850,7851,7849,7978,7977,7978,7849,7850,7848,7977,7976,7977,7848,7849,7847,7976,7975,7976,7847,7848,7846,7975,7974,7975,7846,7847,7845,7974,7973,7974,7845,7846,7844,7973,7972,7973,7844,7845,7843,7972,7971,7972,7843,7844,7842,7971,7970,7971,7842,7843,7841,7970,7969,7970,7841,7842,7840,7969,7968,7969,7840,7841,7839,7968,7967,7968,7839,7840,7838,7967,7966,7967,7838,7839,7837,7966,7965,7966,7837,7838,7836,7965,7964,7965,7836,7837,7835,7964,7963,7964,7835,7836,7834,7963,7962,7963,7834,7835,7833,7962,7961,7962,7833,7834,7832,7961,7960,7961,7832,7833,7831,7960,7959,7960,7831,7832,7830,7959,7958,7959,7830,7831,7829,7958,7957,7958,7829,7830,7828,7957,7956,7957,7828,7829,7827,7956,7955,7956,7827,7828,7826,7955,7954,7955,7826,7827,7825,7954,7953,7954,7825,7826,7824,7953,7952,7953,7824,7825,7823,7952,7951,7952,7823,7824,7822,7951,7950,7951,7822,7823,7821,7950,7949,7950,7821,7822,7820,7949,7948,7949,7820,7821,7819,7948,7947,7948,7819,7820,7818,7947,7946,7947,7818,7819,7817,7946,7945,7946,7817,7818,7816,7945,7944,7945,7816,7817,7815,7944,7943,7944,7815,7816,7814,7943,7942,7943,7814,7815,7813,7942,7941,7942,7813,7814,7812,7941,7940,7941,7812,7813,7811,7940,7939,7940,7811,7812,7810,7939,7938,7939,7810,7811,7809,7938,7937,7938,7809,7810,7808,7937,7936,7937,7808,7809,8062,8191,8190,8191,8062,8063,8061,8190,8189,8190,8061,8062,8060,8189,8188,8189,8060,8061,8059,8188,8187,8188,8059,8060,8058,8187,8186,8187,8058,8059,8057,8186,8185,8186,8057,8058,8056,8185,8184,8185,8056,8057,8055,8184,8183,8184,8055,8056,8054,8183,8182,8183,8054,8055,8053,8182,8181,8182,8053,8054,8052,8181,8180,8181,8052,8053,8051,8180,8179,8180,8051,8052,8050,8179,8178,8179,8050,8051,8049,8178,8177,8178,8049,8050,8048,8177,8176,8177,8048,8049,8047,8176,8175,8176,8047,8048,8046,8175,8174,8175,8046,8047,8045,8174,8173,8174,8045,8046,8044,8173,8172,8173,8044,8045,8043,8172,8171,8172,8043,8044,8042,8171,8170,8171,8042,8043,8041,8170,8169,8170,8041,8042,8040,8169,8168,8169,8040,8041,8039,8168,8167,8168,8039,8040,8038,8167,8166,8167,8038,8039,8037,8166,8165,8166,8037,8038,8036,8165,8164,8165,8036,8037,8035,8164,8163,8164,8035,8036,8034,8163,8162,8163,8034,8035,8033,8162,8161,8162,8033,8034,8032,8161,8160,8161,8032,8033,8031,8160,8159,8160,8031,8032,8030,8159,8158,8159,8030,8031,8029,8158,8157,8158,8029,8030,8028,8157,8156,8157,8028,8029,8027,8156,8155,8156,8027,8028,8026,8155,8154,8155,8026,8027,8025,8154,8153,8154,8025,8026,8024,8153,8152,8153,8024,8025,8023,8152,8151,8152,8023,8024,8022,8151,8150,8151,8022,8023,8021,8150,8149,8150,8021,8022,8020,8149,8148,8149,8020,8021,8019,8148,8147,8148,8019,8020,8018,8147,8146,8147,8018,8019,8017,8146,8145,8146,8017,8018,8016,8145,8144,8145,8016,8017,8015,8144,8143,8144,8015,8016,8014,8143,8142,8143,8014,8015,8013,8142,8141,8142,8013,8014,8012,8141,8140,8141,8012,8013,8011,8140,8139,8140,8011,8012,8010,8139,8138,8139,8010,8011,8009,8138,8137,8138,8009,8010,8008,8137,8136,8137,8008,8009,8007,8136,8135,8136,8007,8008,8006,8135,8134,8135,8006,8007,8005,8134,8133,8134,8005,8006,8004,8133,8132,8133,8004,8005,8003,8132,8131,8132,8003,8004,8002,8131,8130,8131,8002,8003,8001,8130,8129,8130,8001,8002,8000,8129,8128,8129,8000,8001,7999,8128,8127,8128,7999,8000,7998,8127,8126,8127,7998,7999,7997,8126,8125,8126,7997,7998,7996,8125,8124,8125,7996,7997,7995,8124,8123,8124,7995,7996,7994,8123,8122,8123,7994,7995,7993,8122,8121,8122,7993,7994,7992,8121,8120,8121,7992,7993,7991,8120,8119,8120,7991,7992,7990,8119,8118,8119,7990,7991,7989,8118,8117,8118,7989,7990,7988,8117,8116,8117,7988,7989,7987,8116,8115,8116,7987,7988,7986,8115,8114,8115,7986,7987,7985,8114,8113,8114,7985,7986,7984,8113,8112,8113,7984,7985,7983,8112,8111,8112,7983,7984,7982,8111,8110,8111,7982,7983,7981,8110,8109,8110,7981,7982,7980,8109,8108,8109,7980,7981,7979,8108,8107,8108,7979,7980,7978,8107,8106,8107,7978,7979,7977,8106,8105,8106,7977,7978,7976,8105,8104,8105,7976,7977,7975,8104,8103,8104,7975,7976,7974,8103,8102,8103,7974,7975,7973,8102,8101,8102,7973,7974,7972,8101,8100,8101,7972,7973,7971,8100,8099,8100,7971,7972,7970,8099,8098,8099,7970,7971,7969,8098,8097,8098,7969,7970,7968,8097,8096,8097,7968,7969,7967,8096,8095,8096,7967,7968,7966,8095,8094,8095,7966,7967,7965,8094,8093,8094,7965,7966,7964,8093,8092,8093,7964,7965,7963,8092,8091,8092,7963,7964,7962,8091,8090,8091,7962,7963,7961,8090,8089,8090,7961,7962,7960,8089,8088,8089,7960,7961,7959,8088,8087,8088,7959,7960,7958,8087,8086,8087,7958,7959,7957,8086,8085,8086,7957,7958,7956,8085,8084,8085,7956,7957,7955,8084,8083,8084,7955,7956,7954,8083,8082,8083,7954,7955,7953,8082,8081,8082,7953,7954,7952,8081,8080,8081,7952,7953,7951,8080,8079,8080,7951,7952,7950,8079,8078,8079,7950,7951,7949,8078,8077,8078,7949,7950,7948,8077,8076,8077,7948,7949,7947,8076,8075,8076,7947,7948,7946,8075,8074,8075,7946,7947,7945,8074,8073,8074,7945,7946,7944,8073,8072,8073,7944,7945,7943,8072,8071,8072,7943,7944,7942,8071,8070,8071,7942,7943,7941,8070,8069,8070,7941,7942,7940,8069,8068,8069,7940,7941,7939,8068,8067,8068,7939,7940,7938,8067,8066,8067,7938,7939,7937,8066,8065,8066,7937,7938,7936,8065,8064,8065,7936,7937,8190,8319,8318,8319,8190,8191,8189,8318,8317,8318,8189,8190,8188,8317,8316,8317,8188,8189,8187,8316,8315,8316,8187,8188,8186,8315,8314,8315,8186,8187,8185,8314,8313,8314,8185,8186,8184,8313,8312,8313,8184,8185,8183,8312,8311,8312,8183,8184,8182,8311,8310,8311,8182,8183,8181,8310,8309,8310,8181,8182,8180,8309,8308,8309,8180,8181,8179,8308,8307,8308,8179,8180,8178,8307,8306,8307,8178,8179,8177,8306,8305,8306,8177,8178,8176,8305,8304,8305,8176,8177,8175,8304,8303,8304,8175,8176,8174,8303,8302,8303,8174,8175,8173,8302,8301,8302,8173,8174,8172,8301,8300,8301,8172,8173,8171,8300,8299,8300,8171,8172,8170,8299,8298,8299,8170,8171,8169,8298,8297,8298,8169,8170,8168,8297,8296,8297,8168,8169,8167,8296,8295,8296,8167,8168,8166,8295,8294,8295,8166,8167,8165,8294,8293,8294,8165,8166,8164,8293,8292,8293,8164,8165,8163,8292,8291,8292,8163,8164,8162,8291,8290,8291,8162,8163,8161,8290,8289,8290,8161,8162,8160,8289,8288,8289,8160,8161,8159,8288,8287,8288,8159,8160,8158,8287,8286,8287,8158,8159,8157,8286,8285,8286,8157,8158,8156,8285,8284,8285,8156,8157,8155,8284,8283,8284,8155,8156,8154,8283,8282,8283,8154,8155,8153,8282,8281,8282,8153,8154,8152,8281,8280,8281,8152,8153,8151,8280,8279,8280,8151,8152,8150,8279,8278,8279,8150,8151,8149,8278,8277,8278,8149,8150,8148,8277,8276,8277,8148,8149,8147,8276,8275,8276,8147,8148,8146,8275,8274,8275,8146,8147,8145,8274,8273,8274,8145,8146,8144,8273,8272,8273,8144,8145,8143,8272,8271,8272,8143,8144,8142,8271,8270,8271,8142,8143,8141,8270,8269,8270,8141,8142,8140,8269,8268,8269,8140,8141,8139,8268,8267,8268,8139,8140,8138,8267,8266,8267,8138,8139,8137,8266,8265,8266,8137,8138,8136,8265,8264,8265,8136,8137,8135,8264,8263,8264,8135,8136,8134,8263,8262,8263,8134,8135,8133,8262,8261,8262,8133,8134,8132,8261,8260,8261,8132,8133,8131,8260,8259,8260,8131,8132,8130,8259,8258,8259,8130,8131,8129,8258,8257,8258,8129,8130,8128,8257,8256,8257,8128,8129,8127,8256,8255,8256,8127,8128,8126,8255,8254,8255,8126,8127,8125,8254,8253,8254,8125,8126,8124,8253,8252,8253,8124,8125,8123,8252,8251,8252,8123,8124,8122,8251,8250,8251,8122,8123,8121,8250,8249,8250,8121,8122,8120,8249,8248,8249,8120,8121,8119,8248,8247,8248,8119,8120,8118,8247,8246,8247,8118,8119,8117,8246,8245,8246,8117,8118,8116,8245,8244,8245,8116,8117,8115,8244,8243,8244,8115,8116,8114,8243,8242,8243,8114,8115,8113,8242,8241,8242,8113,8114,8112,8241,8240,8241,8112,8113,8111,8240,8239,8240,8111,8112,8110,8239,8238,8239,8110,8111,8109,8238,8237,8238,8109,8110,8108,8237,8236,8237,8108,8109,8107,8236,8235,8236,8107,8108,8106,8235,8234,8235,8106,8107,8105,8234,8233,8234,8105,8106,8104,8233,8232,8233,8104,8105,8103,8232,8231,8232,8103,8104,8102,8231,8230,8231,8102,8103,8101,8230,8229,8230,8101,8102,8100,8229,8228,8229,8100,8101,8099,8228,8227,8228,8099,8100,8098,8227,8226,8227,8098,8099,8097,8226,8225,8226,8097,8098,8096,8225,8224,8225,8096,8097,8095,8224,8223,8224,8095,8096,8094,8223,8222,8223,8094,8095,8093,8222,8221,8222,8093,8094,8092,8221,8220,8221,8092,8093,8091,8220,8219,8220,8091,8092,8090,8219,8218,8219,8090,8091,8089,8218,8217,8218,8089,8090,8088,8217,8216,8217,8088,8089,8087,8216,8215,8216,8087,8088,8086,8215,8214,8215,8086,8087,8085,8214,8213,8214,8085,8086,8084,8213,8212,8213,8084,8085,8083,8212,8211,8212,8083,8084,8082,8211,8210,8211,8082,8083,8081,8210,8209,8210,8081,8082,8080,8209,8208,8209,8080,8081,8079,8208,8207,8208,8079,8080,8078,8207,8206,8207,8078,8079,8077,8206,8205,8206,8077,8078,8076,8205,8204,8205,8076,8077,8075,8204,8203,8204,8075,8076,8074,8203,8202,8203,8074,8075,8073,8202,8201,8202,8073,8074,8072,8201,8200,8201,8072,8073,8071,8200,8199,8200,8071,8072,8070,8199,8198,8199,8070,8071,8069,8198,8197,8198,8069,8070,8068,8197,8196,8197,8068,8069,8067,8196,8195,8196,8067,8068,8066,8195,8194,8195,8066,8067,8065,8194,8193,8194,8065,8066,8064,8193,8192,8193,8064,8065,8318,8447,8446,8447,8318,8319,8317,8446,8445,8446,8317,8318,8316,8445,8444,8445,8316,8317,8315,8444,8443,8444,8315,8316,8314,8443,8442,8443,8314,8315,8313,8442,8441,8442,8313,8314,8312,8441,8440,8441,8312,8313,8311,8440,8439,8440,8311,8312,8310,8439,8438,8439,8310,8311,8309,8438,8437,8438,8309,8310,8308,8437,8436,8437,8308,8309,8307,8436,8435,8436,8307,8308,8306,8435,8434,8435,8306,8307,8305,8434,8433,8434,8305,8306,8304,8433,8432,8433,8304,8305,8303,8432,8431,8432,8303,8304,8302,8431,8430,8431,8302,8303,8301,8430,8429,8430,8301,8302,8300,8429,8428,8429,8300,8301,8299,8428,8427,8428,8299,8300,8298,8427,8426,8427,8298,8299,8297,8426,8425,8426,8297,8298,8296,8425,8424,8425,8296,8297,8295,8424,8423,8424,8295,8296,8294,8423,8422,8423,8294,8295,8293,8422,8421,8422,8293,8294,8292,8421,8420,8421,8292,8293,8291,8420,8419,8420,8291,8292,8290,8419,8418,8419,8290,8291,8289,8418,8417,8418,8289,8290,8288,8417,8416,8417,8288,8289,8287,8416,8415,8416,8287,8288,8286,8415,8414,8415,8286,8287,8285,8414,8413,8414,8285,8286,8284,8413,8412,8413,8284,8285,8283,8412,8411,8412,8283,8284,8282,8411,8410,8411,8282,8283,8281,8410,8409,8410,8281,8282,8280,8409,8408,8409,8280,8281,8279,8408,8407,8408,8279,8280,8278,8407,8406,8407,8278,8279,8277,8406,8405,8406,8277,8278,8276,8405,8404,8405,8276,8277,8275,8404,8403,8404,8275,8276,8274,8403,8402,8403,8274,8275,8273,8402,8401,8402,8273,8274,8272,8401,8400,8401,8272,8273,8271,8400,8399,8400,8271,8272,8270,8399,8398,8399,8270,8271,8269,8398,8397,8398,8269,8270,8268,8397,8396,8397,8268,8269,8267,8396,8395,8396,8267,8268,8266,8395,8394,8395,8266,8267,8265,8394,8393,8394,8265,8266,8264,8393,8392,8393,8264,8265,8263,8392,8391,8392,8263,8264,8262,8391,8390,8391,8262,8263,8261,8390,8389,8390,8261,8262,8260,8389,8388,8389,8260,8261,8259,8388,8387,8388,8259,8260,8258,8387,8386,8387,8258,8259,8257,8386,8385,8386,8257,8258,8256,8385,8384,8385,8256,8257,8255,8384,8383,8384,8255,8256,8254,8383,8382,8383,8254,8255,8253,8382,8381,8382,8253,8254,8252,8381,8380,8381,8252,8253,8251,8380,8379,8380,8251,8252,8250,8379,8378,8379,8250,8251,8249,8378,8377,8378,8249,8250,8248,8377,8376,8377,8248,8249,8247,8376,8375,8376,8247,8248,8246,8375,8374,8375,8246,8247,8245,8374,8373,8374,8245,8246,8244,8373,8372,8373,8244,8245,8243,8372,8371,8372,8243,8244,8242,8371,8370,8371,8242,8243,8241,8370,8369,8370,8241,8242,8240,8369,8368,8369,8240,8241,8239,8368,8367,8368,8239,8240,8238,8367,8366,8367,8238,8239,8237,8366,8365,8366,8237,8238,8236,8365,8364,8365,8236,8237,8235,8364,8363,8364,8235,8236,8234,8363,8362,8363,8234,8235,8233,8362,8361,8362,8233,8234,8232,8361,8360,8361,8232,8233,8231,8360,8359,8360,8231,8232,8230,8359,8358,8359,8230,8231,8229,8358,8357,8358,8229,8230,8228,8357,8356,8357,8228,8229,8227,8356,8355,8356,8227,8228,8226,8355,8354,8355,8226,8227,8225,8354,8353,8354,8225,8226,8224,8353,8352,8353,8224,8225,8223,8352,8351,8352,8223,8224,8222,8351,8350,8351,8222,8223,8221,8350,8349,8350,8221,8222,8220,8349,8348,8349,8220,8221,8219,8348,8347,8348,8219,8220,8218,8347,8346,8347,8218,8219,8217,8346,8345,8346,8217,8218,8216,8345,8344,8345,8216,8217,8215,8344,8343,8344,8215,8216,8214,8343,8342,8343,8214,8215,8213,8342,8341,8342,8213,8214,8212,8341,8340,8341,8212,8213,8211,8340,8339,8340,8211,8212,8210,8339,8338,8339,8210,8211,8209,8338,8337,8338,8209,8210,8208,8337,8336,8337,8208,8209,8207,8336,8335,8336,8207,8208,8206,8335,8334,8335,8206,8207,8205,8334,8333,8334,8205,8206,8204,8333,8332,8333,8204,8205,8203,8332,8331,8332,8203,8204,8202,8331,8330,8331,8202,8203,8201,8330,8329,8330,8201,8202,8200,8329,8328,8329,8200,8201,8199,8328,8327,8328,8199,8200,8198,8327,8326,8327,8198,8199,8197,8326,8325,8326,8197,8198,8196,8325,8324,8325,8196,8197,8195,8324,8323,8324,8195,8196,8194,8323,8322,8323,8194,8195,8193,8322,8321,8322,8193,8194,8192,8321,8320,8321,8192,8193,8446,8575,8574,8575,8446,8447,8445,8574,8573,8574,8445,8446,8444,8573,8572,8573,8444,8445,8443,8572,8571,8572,8443,8444,8442,8571,8570,8571,8442,8443,8441,8570,8569,8570,8441,8442,8440,8569,8568,8569,8440,8441,8439,8568,8567,8568,8439,8440,8438,8567,8566,8567,8438,8439,8437,8566,8565,8566,8437,8438,8436,8565,8564,8565,8436,8437,8435,8564,8563,8564,8435,8436,8434,8563,8562,8563,8434,8435,8433,8562,8561,8562,8433,8434,8432,8561,8560,8561,8432,8433,8431,8560,8559,8560,8431,8432,8430,8559,8558,8559,8430,8431,8429,8558,8557,8558,8429,8430,8428,8557,8556,8557,8428,8429,8427,8556,8555,8556,8427,8428,8426,8555,8554,8555,8426,8427,8425,8554,8553,8554,8425,8426,8424,8553,8552,8553,8424,8425,8423,8552,8551,8552,8423,8424,8422,8551,8550,8551,8422,8423,8421,8550,8549,8550,8421,8422,8420,8549,8548,8549,8420,8421,8419,8548,8547,8548,8419,8420,8418,8547,8546,8547,8418,8419,8417,8546,8545,8546,8417,8418,8416,8545,8544,8545,8416,8417,8415,8544,8543,8544,8415,8416,8414,8543,8542,8543,8414,8415,8413,8542,8541,8542,8413,8414,8412,8541,8540,8541,8412,8413,8411,8540,8539,8540,8411,8412,8410,8539,8538,8539,8410,8411,8409,8538,8537,8538,8409,8410,8408,8537,8536,8537,8408,8409,8407,8536,8535,8536,8407,8408,8406,8535,8534,8535,8406,8407,8405,8534,8533,8534,8405,8406,8404,8533,8532,8533,8404,8405,8403,8532,8531,8532,8403,8404,8402,8531,8530,8531,8402,8403,8401,8530,8529,8530,8401,8402,8400,8529,8528,8529,8400,8401,8399,8528,8527,8528,8399,8400,8398,8527,8526,8527,8398,8399,8397,8526,8525,8526,8397,8398,8396,8525,8524,8525,8396,8397,8395,8524,8523,8524,8395,8396,8394,8523,8522,8523,8394,8395,8393,8522,8521,8522,8393,8394,8392,8521,8520,8521,8392,8393,8391,8520,8519,8520,8391,8392,8390,8519,8518,8519,8390,8391,8389,8518,8517,8518,8389,8390,8388,8517,8516,8517,8388,8389,8387,8516,8515,8516,8387,8388,8386,8515,8514,8515,8386,8387,8385,8514,8513,8514,8385,8386,8384,8513,8512,8513,8384,8385,8383,8512,8511,8512,8383,8384,8382,8511,8510,8511,8382,8383,8381,8510,8509,8510,8381,8382,8380,8509,8508,8509,8380,8381,8379,8508,8507,8508,8379,8380,8378,8507,8506,8507,8378,8379,8377,8506,8505,8506,8377,8378,8376,8505,8504,8505,8376,8377,8375,8504,8503,8504,8375,8376,8374,8503,8502,8503,8374,8375,8373,8502,8501,8502,8373,8374,8372,8501,8500,8501,8372,8373,8371,8500,8499,8500,8371,8372,8370,8499,8498,8499,8370,8371,8369,8498,8497,8498,8369,8370,8368,8497,8496,8497,8368,8369,8367,8496,8495,8496,8367,8368,8366,8495,8494,8495,8366,8367,8365,8494,8493,8494,8365,8366,8364,8493,8492,8493,8364,8365,8363,8492,8491,8492,8363,8364,8362,8491,8490,8491,8362,8363,8361,8490,8489,8490,8361,8362,8360,8489,8488,8489,8360,8361,8359,8488,8487,8488,8359,8360,8358,8487,8486,8487,8358,8359,8357,8486,8485,8486,8357,8358,8356,8485,8484,8485,8356,8357,8355,8484,8483,8484,8355,8356,8354,8483,8482,8483,8354,8355,8353,8482,8481,8482,8353,8354,8352,8481,8480,8481,8352,8353,8351,8480,8479,8480,8351,8352,8350,8479,8478,8479,8350,8351,8349,8478,8477,8478,8349,8350,8348,8477,8476,8477,8348,8349,8347,8476,8475,8476,8347,8348,8346,8475,8474,8475,8346,8347,8345,8474,8473,8474,8345,8346,8344,8473,8472,8473,8344,8345,8343,8472,8471,8472,8343,8344,8342,8471,8470,8471,8342,8343,8341,8470,8469,8470,8341,8342,8340,8469,8468,8469,8340,8341,8339,8468,8467,8468,8339,8340,8338,8467,8466,8467,8338,8339,8337,8466,8465,8466,8337,8338,8336,8465,8464,8465,8336,8337,8335,8464,8463,8464,8335,8336,8334,8463,8462,8463,8334,8335,8333,8462,8461,8462,8333,8334,8332,8461,8460,8461,8332,8333,8331,8460,8459,8460,8331,8332,8330,8459,8458,8459,8330,8331,8329,8458,8457,8458,8329,8330,8328,8457,8456,8457,8328,8329,8327,8456,8455,8456,8327,8328,8326,8455,8454,8455,8326,8327,8325,8454,8453,8454,8325,8326,8324,8453,8452,8453,8324,8325,8323,8452,8451,8452,8323,8324,8322,8451,8450,8451,8322,8323,8321,8450,8449,8450,8321,8322,8320,8449,8448,8449,8320,8321,8574,8703,8702,8703,8574,8575,8573,8702,8701,8702,8573,8574,8572,8701,8700,8701,8572,8573,8571,8700,8699,8700,8571,8572,8570,8699,8698,8699,8570,8571,8569,8698,8697,8698,8569,8570,8568,8697,8696,8697,8568,8569,8567,8696,8695,8696,8567,8568,8566,8695,8694,8695,8566,8567,8565,8694,8693,8694,8565,8566,8564,8693,8692,8693,8564,8565,8563,8692,8691,8692,8563,8564,8562,8691,8690,8691,8562,8563,8561,8690,8689,8690,8561,8562,8560,8689,8688,8689,8560,8561,8559,8688,8687,8688,8559,8560,8558,8687,8686,8687,8558,8559,8557,8686,8685,8686,8557,8558,8556,8685,8684,8685,8556,8557,8555,8684,8683,8684,8555,8556,8554,8683,8682,8683,8554,8555,8553,8682,8681,8682,8553,8554,8552,8681,8680,8681,8552,8553,8551,8680,8679,8680,8551,8552,8550,8679,8678,8679,8550,8551,8549,8678,8677,8678,8549,8550,8548,8677,8676,8677,8548,8549,8547,8676,8675,8676,8547,8548,8546,8675,8674,8675,8546,8547,8545,8674,8673,8674,8545,8546,8544,8673,8672,8673,8544,8545,8543,8672,8671,8672,8543,8544,8542,8671,8670,8671,8542,8543,8541,8670,8669,8670,8541,8542,8540,8669,8668,8669,8540,8541,8539,8668,8667,8668,8539,8540,8538,8667,8666,8667,8538,8539,8537,8666,8665,8666,8537,8538,8536,8665,8664,8665,8536,8537,8535,8664,8663,8664,8535,8536,8534,8663,8662,8663,8534,8535,8533,8662,8661,8662,8533,8534,8532,8661,8660,8661,8532,8533,8531,8660,8659,8660,8531,8532,8530,8659,8658,8659,8530,8531,8529,8658,8657,8658,8529,8530,8528,8657,8656,8657,8528,8529,8527,8656,8655,8656,8527,8528,8526,8655,8654,8655,8526,8527,8525,8654,8653,8654,8525,8526,8524,8653,8652,8653,8524,8525,8523,8652,8651,8652,8523,8524,8522,8651,8650,8651,8522,8523,8521,8650,8649,8650,8521,8522,8520,8649,8648,8649,8520,8521,8519,8648,8647,8648,8519,8520,8518,8647,8646,8647,8518,8519,8517,8646,8645,8646,8517,8518,8516,8645,8644,8645,8516,8517,8515,8644,8643,8644,8515,8516,8514,8643,8642,8643,8514,8515,8513,8642,8641,8642,8513,8514,8512,8641,8640,8641,8512,8513,8511,8640,8639,8640,8511,8512,8510,8639,8638,8639,8510,8511,8509,8638,8637,8638,8509,8510,8508,8637,8636,8637,8508,8509,8507,8636,8635,8636,8507,8508,8506,8635,8634,8635,8506,8507,8505,8634,8633,8634,8505,8506,8504,8633,8632,8633,8504,8505,8503,8632,8631,8632,8503,8504,8502,8631,8630,8631,8502,8503,8501,8630,8629,8630,8501,8502,8500,8629,8628,8629,8500,8501,8499,8628,8627,8628,8499,8500,8498,8627,8626,8627,8498,8499,8497,8626,8625,8626,8497,8498,8496,8625,8624,8625,8496,8497,8495,8624,8623,8624,8495,8496,8494,8623,8622,8623,8494,8495,8493,8622,8621,8622,8493,8494,8492,8621,8620,8621,8492,8493,8491,8620,8619,8620,8491,8492,8490,8619,8618,8619,8490,8491,8489,8618,8617,8618,8489,8490,8488,8617,8616,8617,8488,8489,8487,8616,8615,8616,8487,8488,8486,8615,8614,8615,8486,8487,8485,8614,8613,8614,8485,8486,8484,8613,8612,8613,8484,8485,8483,8612,8611,8612,8483,8484,8482,8611,8610,8611,8482,8483,8481,8610,8609,8610,8481,8482,8480,8609,8608,8609,8480,8481,8479,8608,8607,8608,8479,8480,8478,8607,8606,8607,8478,8479,8477,8606,8605,8606,8477,8478,8476,8605,8604,8605,8476,8477,8475,8604,8603,8604,8475,8476,8474,8603,8602,8603,8474,8475,8473,8602,8601,8602,8473,8474,8472,8601,8600,8601,8472,8473,8471,8600,8599,8600,8471,8472,8470,8599,8598,8599,8470,8471,8469,8598,8597,8598,8469,8470,8468,8597,8596,8597,8468,8469,8467,8596,8595,8596,8467,8468,8466,8595,8594,8595,8466,8467,8465,8594,8593,8594,8465,8466,8464,8593,8592,8593,8464,8465,8463,8592,8591,8592,8463,8464,8462,8591,8590,8591,8462,8463,8461,8590,8589,8590,8461,8462,8460,8589,8588,8589,8460,8461,8459,8588,8587,8588,8459,8460,8458,8587,8586,8587,8458,8459,8457,8586,8585,8586,8457,8458,8456,8585,8584,8585,8456,8457,8455,8584,8583,8584,8455,8456,8454,8583,8582,8583,8454,8455,8453,8582,8581,8582,8453,8454,8452,8581,8580,8581,8452,8453,8451,8580,8579,8580,8451,8452,8450,8579,8578,8579,8450,8451,8449,8578,8577,8578,8449,8450,8448,8577,8576,8577,8448,8449,8702,8831,8830,8831,8702,8703,8701,8830,8829,8830,8701,8702,8700,8829,8828,8829,8700,8701,8699,8828,8827,8828,8699,8700,8698,8827,8826,8827,8698,8699,8697,8826,8825,8826,8697,8698,8696,8825,8824,8825,8696,8697,8695,8824,8823,8824,8695,8696,8694,8823,8822,8823,8694,8695,8693,8822,8821,8822,8693,8694,8692,8821,8820,8821,8692,8693,8691,8820,8819,8820,8691,8692,8690,8819,8818,8819,8690,8691,8689,8818,8817,8818,8689,8690,8688,8817,8816,8817,8688,8689,8687,8816,8815,8816,8687,8688,8686,8815,8814,8815,8686,8687,8685,8814,8813,8814,8685,8686,8684,8813,8812,8813,8684,8685,8683,8812,8811,8812,8683,8684,8682,8811,8810,8811,8682,8683,8681,8810,8809,8810,8681,8682,8680,8809,8808,8809,8680,8681,8679,8808,8807,8808,8679,8680,8678,8807,8806,8807,8678,8679,8677,8806,8805,8806,8677,8678,8676,8805,8804,8805,8676,8677,8675,8804,8803,8804,8675,8676,8674,8803,8802,8803,8674,8675,8673,8802,8801,8802,8673,8674,8672,8801,8800,8801,8672,8673,8671,8800,8799,8800,8671,8672,8670,8799,8798,8799,8670,8671,8669,8798,8797,8798,8669,8670,8668,8797,8796,8797,8668,8669,8667,8796,8795,8796,8667,8668,8666,8795,8794,8795,8666,8667,8665,8794,8793,8794,8665,8666,8664,8793,8792,8793,8664,8665,8663,8792,8791,8792,8663,8664,8662,8791,8790,8791,8662,8663,8661,8790,8789,8790,8661,8662,8660,8789,8788,8789,8660,8661,8659,8788,8787,8788,8659,8660,8658,8787,8786,8787,8658,8659,8657,8786,8785,8786,8657,8658,8656,8785,8784,8785,8656,8657,8655,8784,8783,8784,8655,8656,8654,8783,8782,8783,8654,8655,8653,8782,8781,8782,8653,8654,8652,8781,8780,8781,8652,8653,8651,8780,8779,8780,8651,8652,8650,8779,8778,8779,8650,8651,8649,8778,8777,8778,8649,8650,8648,8777,8776,8777,8648,8649,8647,8776,8775,8776,8647,8648,8646,8775,8774,8775,8646,8647,8645,8774,8773,8774,8645,8646,8644,8773,8772,8773,8644,8645,8643,8772,8771,8772,8643,8644,8642,8771,8770,8771,8642,8643,8641,8770,8769,8770,8641,8642,8640,8769,8768,8769,8640,8641,8639,8768,8767,8768,8639,8640,8638,8767,8766,8767,8638,8639,8637,8766,8765,8766,8637,8638,8636,8765,8764,8765,8636,8637,8635,8764,8763,8764,8635,8636,8634,8763,8762,8763,8634,8635,8633,8762,8761,8762,8633,8634,8632,8761,8760,8761,8632,8633,8631,8760,8759,8760,8631,8632,8630,8759,8758,8759,8630,8631,8629,8758,8757,8758,8629,8630,8628,8757,8756,8757,8628,8629,8627,8756,8755,8756,8627,8628,8626,8755,8754,8755,8626,8627,8625,8754,8753,8754,8625,8626,8624,8753,8752,8753,8624,8625,8623,8752,8751,8752,8623,8624,8622,8751,8750,8751,8622,8623,8621,8750,8749,8750,8621,8622,8620,8749,8748,8749,8620,8621,8619,8748,8747,8748,8619,8620,8618,8747,8746,8747,8618,8619,8617,8746,8745,8746,8617,8618,8616,8745,8744,8745,8616,8617,8615,8744,8743,8744,8615,8616,8614,8743,8742,8743,8614,8615,8613,8742,8741,8742,8613,8614,8612,8741,8740,8741,8612,8613,8611,8740,8739,8740,8611,8612,8610,8739,8738,8739,8610,8611,8609,8738,8737,8738,8609,8610,8608,8737,8736,8737,8608,8609,8607,8736,8735,8736,8607,8608,8606,8735,8734,8735,8606,8607,8605,8734,8733,8734,8605,8606,8604,8733,8732,8733,8604,8605,8603,8732,8731,8732,8603,8604,8602,8731,8730,8731,8602,8603,8601,8730,8729,8730,8601,8602,8600,8729,8728,8729,8600,8601,8599,8728,8727,8728,8599,8600,8598,8727,8726,8727,8598,8599,8597,8726,8725,8726,8597,8598,8596,8725,8724,8725,8596,8597,8595,8724,8723,8724,8595,8596,8594,8723,8722,8723,8594,8595,8593,8722,8721,8722,8593,8594,8592,8721,8720,8721,8592,8593,8591,8720,8719,8720,8591,8592,8590,8719,8718,8719,8590,8591,8589,8718,8717,8718,8589,8590,8588,8717,8716,8717,8588,8589,8587,8716,8715,8716,8587,8588,8586,8715,8714,8715,8586,8587,8585,8714,8713,8714,8585,8586,8584,8713,8712,8713,8584,8585,8583,8712,8711,8712,8583,8584,8582,8711,8710,8711,8582,8583,8581,8710,8709,8710,8581,8582,8580,8709,8708,8709,8580,8581,8579,8708,8707,8708,8579,8580,8578,8707,8706,8707,8578,8579,8577,8706,8705,8706,8577,8578,8576,8705,8704,8705,8576,8577,8830,8959,8958,8959,8830,8831,8829,8958,8957,8958,8829,8830,8828,8957,8956,8957,8828,8829,8827,8956,8955,8956,8827,8828,8826,8955,8954,8955,8826,8827,8825,8954,8953,8954,8825,8826,8824,8953,8952,8953,8824,8825,8823,8952,8951,8952,8823,8824,8822,8951,8950,8951,8822,8823,8821,8950,8949,8950,8821,8822,8820,8949,8948,8949,8820,8821,8819,8948,8947,8948,8819,8820,8818,8947,8946,8947,8818,8819,8817,8946,8945,8946,8817,8818,8816,8945,8944,8945,8816,8817,8815,8944,8943,8944,8815,8816,8814,8943,8942,8943,8814,8815,8813,8942,8941,8942,8813,8814,8812,8941,8940,8941,8812,8813,8811,8940,8939,8940,8811,8812,8810,8939,8938,8939,8810,8811,8809,8938,8937,8938,8809,8810,8808,8937,8936,8937,8808,8809,8807,8936,8935,8936,8807,8808,8806,8935,8934,8935,8806,8807,8805,8934,8933,8934,8805,8806,8804,8933,8932,8933,8804,8805,8803,8932,8931,8932,8803,8804,8802,8931,8930,8931,8802,8803,8801,8930,8929,8930,8801,8802,8800,8929,8928,8929,8800,8801,8799,8928,8927,8928,8799,8800,8798,8927,8926,8927,8798,8799,8797,8926,8925,8926,8797,8798,8796,8925,8924,8925,8796,8797,8795,8924,8923,8924,8795,8796,8794,8923,8922,8923,8794,8795,8793,8922,8921,8922,8793,8794,8792,8921,8920,8921,8792,8793,8791,8920,8919,8920,8791,8792,8790,8919,8918,8919,8790,8791,8789,8918,8917,8918,8789,8790,8788,8917,8916,8917,8788,8789,8787,8916,8915,8916,8787,8788,8786,8915,8914,8915,8786,8787,8785,8914,8913,8914,8785,8786,8784,8913,8912,8913,8784,8785,8783,8912,8911,8912,8783,8784,8782,8911,8910,8911,8782,8783,8781,8910,8909,8910,8781,8782,8780,8909,8908,8909,8780,8781,8779,8908,8907,8908,8779,8780,8778,8907,8906,8907,8778,8779,8777,8906,8905,8906,8777,8778,8776,8905,8904,8905,8776,8777,8775,8904,8903,8904,8775,8776,8774,8903,8902,8903,8774,8775,8773,8902,8901,8902,8773,8774,8772,8901,8900,8901,8772,8773,8771,8900,8899,8900,8771,8772,8770,8899,8898,8899,8770,8771,8769,8898,8897,8898,8769,8770,8768,8897,8896,8897,8768,8769,8767,8896,8895,8896,8767,8768,8766,8895,8894,8895,8766,8767,8765,8894,8893,8894,8765,8766,8764,8893,8892,8893,8764,8765,8763,8892,8891,8892,8763,8764,8762,8891,8890,8891,8762,8763,8761,8890,8889,8890,8761,8762,8760,8889,8888,8889,8760,8761,8759,8888,8887,8888,8759,8760,8758,8887,8886,8887,8758,8759,8757,8886,8885,8886,8757,8758,8756,8885,8884,8885,8756,8757,8755,8884,8883,8884,8755,8756,8754,8883,8882,8883,8754,8755,8753,8882,8881,8882,8753,8754,8752,8881,8880,8881,8752,8753,8751,8880,8879,8880,8751,8752,8750,8879,8878,8879,8750,8751,8749,8878,8877,8878,8749,8750,8748,8877,8876,8877,8748,8749,8747,8876,8875,8876,8747,8748,8746,8875,8874,8875,8746,8747,8745,8874,8873,8874,8745,8746,8744,8873,8872,8873,8744,8745,8743,8872,8871,8872,8743,8744,8742,8871,8870,8871,8742,8743,8741,8870,8869,8870,8741,8742,8740,8869,8868,8869,8740,8741,8739,8868,8867,8868,8739,8740,8738,8867,8866,8867,8738,8739,8737,8866,8865,8866,8737,8738,8736,8865,8864,8865,8736,8737,8735,8864,8863,8864,8735,8736,8734,8863,8862,8863,8734,8735,8733,8862,8861,8862,8733,8734,8732,8861,8860,8861,8732,8733,8731,8860,8859,8860,8731,8732,8730,8859,8858,8859,8730,8731,8729,8858,8857,8858,8729,8730,8728,8857,8856,8857,8728,8729,8727,8856,8855,8856,8727,8728,8726,8855,8854,8855,8726,8727,8725,8854,8853,8854,8725,8726,8724,8853,8852,8853,8724,8725,8723,8852,8851,8852,8723,8724,8722,8851,8850,8851,8722,8723,8721,8850,8849,8850,8721,8722,8720,8849,8848,8849,8720,8721,8719,8848,8847,8848,8719,8720,8718,8847,8846,8847,8718,8719,8717,8846,8845,8846,8717,8718,8716,8845,8844,8845,8716,8717,8715,8844,8843,8844,8715,8716,8714,8843,8842,8843,8714,8715,8713,8842,8841,8842,8713,8714,8712,8841,8840,8841,8712,8713,8711,8840,8839,8840,8711,8712,8710,8839,8838,8839,8710,8711,8709,8838,8837,8838,8709,8710,8708,8837,8836,8837,8708,8709,8707,8836,8835,8836,8707,8708,8706,8835,8834,8835,8706,8707,8705,8834,8833,8834,8705,8706,8704,8833,8832,8833,8704,8705,8958,9087,9086,9087,8958,8959,8957,9086,9085,9086,8957,8958,8956,9085,9084,9085,8956,8957,8955,9084,9083,9084,8955,8956,8954,9083,9082,9083,8954,8955,8953,9082,9081,9082,8953,8954,8952,9081,9080,9081,8952,8953,8951,9080,9079,9080,8951,8952,8950,9079,9078,9079,8950,8951,8949,9078,9077,9078,8949,8950,8948,9077,9076,9077,8948,8949,8947,9076,9075,9076,8947,8948,8946,9075,9074,9075,8946,8947,8945,9074,9073,9074,8945,8946,8944,9073,9072,9073,8944,8945,8943,9072,9071,9072,8943,8944,8942,9071,9070,9071,8942,8943,8941,9070,9069,9070,8941,8942,8940,9069,9068,9069,8940,8941,8939,9068,9067,9068,8939,8940,8938,9067,9066,9067,8938,8939,8937,9066,9065,9066,8937,8938,8936,9065,9064,9065,8936,8937,8935,9064,9063,9064,8935,8936,8934,9063,9062,9063,8934,8935,8933,9062,9061,9062,8933,8934,8932,9061,9060,9061,8932,8933,8931,9060,9059,9060,8931,8932,8930,9059,9058,9059,8930,8931,8929,9058,9057,9058,8929,8930,8928,9057,9056,9057,8928,8929,8927,9056,9055,9056,8927,8928,8926,9055,9054,9055,8926,8927,8925,9054,9053,9054,8925,8926,8924,9053,9052,9053,8924,8925,8923,9052,9051,9052,8923,8924,8922,9051,9050,9051,8922,8923,8921,9050,9049,9050,8921,8922,8920,9049,9048,9049,8920,8921,8919,9048,9047,9048,8919,8920,8918,9047,9046,9047,8918,8919,8917,9046,9045,9046,8917,8918,8916,9045,9044,9045,8916,8917,8915,9044,9043,9044,8915,8916,8914,9043,9042,9043,8914,8915,8913,9042,9041,9042,8913,8914,8912,9041,9040,9041,8912,8913,8911,9040,9039,9040,8911,8912,8910,9039,9038,9039,8910,8911,8909,9038,9037,9038,8909,8910,8908,9037,9036,9037,8908,8909,8907,9036,9035,9036,8907,8908,8906,9035,9034,9035,8906,8907,8905,9034,9033,9034,8905,8906,8904,9033,9032,9033,8904,8905,8903,9032,9031,9032,8903,8904,8902,9031,9030,9031,8902,8903,8901,9030,9029,9030,8901,8902,8900,9029,9028,9029,8900,8901,8899,9028,9027,9028,8899,8900,8898,9027,9026,9027,8898,8899,8897,9026,9025,9026,8897,8898,8896,9025,9024,9025,8896,8897,8895,9024,9023,9024,8895,8896,8894,9023,9022,9023,8894,8895,8893,9022,9021,9022,8893,8894,8892,9021,9020,9021,8892,8893,8891,9020,9019,9020,8891,8892,8890,9019,9018,9019,8890,8891,8889,9018,9017,9018,8889,8890,8888,9017,9016,9017,8888,8889,8887,9016,9015,9016,8887,8888,8886,9015,9014,9015,8886,8887,8885,9014,9013,9014,8885,8886,8884,9013,9012,9013,8884,8885,8883,9012,9011,9012,8883,8884,8882,9011,9010,9011,8882,8883,8881,9010,9009,9010,8881,8882,8880,9009,9008,9009,8880,8881,8879,9008,9007,9008,8879,8880,8878,9007,9006,9007,8878,8879,8877,9006,9005,9006,8877,8878,8876,9005,9004,9005,8876,8877,8875,9004,9003,9004,8875,8876,8874,9003,9002,9003,8874,8875,8873,9002,9001,9002,8873,8874,8872,9001,9000,9001,8872,8873,8871,9000,8999,9000,8871,8872,8870,8999,8998,8999,8870,8871,8869,8998,8997,8998,8869,8870,8868,8997,8996,8997,8868,8869,8867,8996,8995,8996,8867,8868,8866,8995,8994,8995,8866,8867,8865,8994,8993,8994,8865,8866,8864,8993,8992,8993,8864,8865,8863,8992,8991,8992,8863,8864,8862,8991,8990,8991,8862,8863,8861,8990,8989,8990,8861,8862,8860,8989,8988,8989,8860,8861,8859,8988,8987,8988,8859,8860,8858,8987,8986,8987,8858,8859,8857,8986,8985,8986,8857,8858,8856,8985,8984,8985,8856,8857,8855,8984,8983,8984,8855,8856,8854,8983,8982,8983,8854,8855,8853,8982,8981,8982,8853,8854,8852,8981,8980,8981,8852,8853,8851,8980,8979,8980,8851,8852,8850,8979,8978,8979,8850,8851,8849,8978,8977,8978,8849,8850,8848,8977,8976,8977,8848,8849,8847,8976,8975,8976,8847,8848,8846,8975,8974,8975,8846,8847,8845,8974,8973,8974,8845,8846,8844,8973,8972,8973,8844,8845,8843,8972,8971,8972,8843,8844,8842,8971,8970,8971,8842,8843,8841,8970,8969,8970,8841,8842,8840,8969,8968,8969,8840,8841,8839,8968,8967,8968,8839,8840,8838,8967,8966,8967,8838,8839,8837,8966,8965,8966,8837,8838,8836,8965,8964,8965,8836,8837,8835,8964,8963,8964,8835,8836,8834,8963,8962,8963,8834,8835,8833,8962,8961,8962,8833,8834,8832,8961,8960,8961,8832,8833,9086,9215,9214,9215,9086,9087,9085,9214,9213,9214,9085,9086,9084,9213,9212,9213,9084,9085,9083,9212,9211,9212,9083,9084,9082,9211,9210,9211,9082,9083,9081,9210,9209,9210,9081,9082,9080,9209,9208,9209,9080,9081,9079,9208,9207,9208,9079,9080,9078,9207,9206,9207,9078,9079,9077,9206,9205,9206,9077,9078,9076,9205,9204,9205,9076,9077,9075,9204,9203,9204,9075,9076,9074,9203,9202,9203,9074,9075,9073,9202,9201,9202,9073,9074,9072,9201,9200,9201,9072,9073,9071,9200,9199,9200,9071,9072,9070,9199,9198,9199,9070,9071,9069,9198,9197,9198,9069,9070,9068,9197,9196,9197,9068,9069,9067,9196,9195,9196,9067,9068,9066,9195,9194,9195,9066,9067,9065,9194,9193,9194,9065,9066,9064,9193,9192,9193,9064,9065,9063,9192,9191,9192,9063,9064,9062,9191,9190,9191,9062,9063,9061,9190,9189,9190,9061,9062,9060,9189,9188,9189,9060,9061,9059,9188,9187,9188,9059,9060,9058,9187,9186,9187,9058,9059,9057,9186,9185,9186,9057,9058,9056,9185,9184,9185,9056,9057,9055,9184,9183,9184,9055,9056,9054,9183,9182,9183,9054,9055,9053,9182,9181,9182,9053,9054,9052,9181,9180,9181,9052,9053,9051,9180,9179,9180,9051,9052,9050,9179,9178,9179,9050,9051,9049,9178,9177,9178,9049,9050,9048,9177,9176,9177,9048,9049,9047,9176,9175,9176,9047,9048,9046,9175,9174,9175,9046,9047,9045,9174,9173,9174,9045,9046,9044,9173,9172,9173,9044,9045,9043,9172,9171,9172,9043,9044,9042,9171,9170,9171,9042,9043,9041,9170,9169,9170,9041,9042,9040,9169,9168,9169,9040,9041,9039,9168,9167,9168,9039,9040,9038,9167,9166,9167,9038,9039,9037,9166,9165,9166,9037,9038,9036,9165,9164,9165,9036,9037,9035,9164,9163,9164,9035,9036,9034,9163,9162,9163,9034,9035,9033,9162,9161,9162,9033,9034,9032,9161,9160,9161,9032,9033,9031,9160,9159,9160,9031,9032,9030,9159,9158,9159,9030,9031,9029,9158,9157,9158,9029,9030,9028,9157,9156,9157,9028,9029,9027,9156,9155,9156,9027,9028,9026,9155,9154,9155,9026,9027,9025,9154,9153,9154,9025,9026,9024,9153,9152,9153,9024,9025,9023,9152,9151,9152,9023,9024,9022,9151,9150,9151,9022,9023,9021,9150,9149,9150,9021,9022,9020,9149,9148,9149,9020,9021,9019,9148,9147,9148,9019,9020,9018,9147,9146,9147,9018,9019,9017,9146,9145,9146,9017,9018,9016,9145,9144,9145,9016,9017,9015,9144,9143,9144,9015,9016,9014,9143,9142,9143,9014,9015,9013,9142,9141,9142,9013,9014,9012,9141,9140,9141,9012,9013,9011,9140,9139,9140,9011,9012,9010,9139,9138,9139,9010,9011,9009,9138,9137,9138,9009,9010,9008,9137,9136,9137,9008,9009,9007,9136,9135,9136,9007,9008,9006,9135,9134,9135,9006,9007,9005,9134,9133,9134,9005,9006,9004,9133,9132,9133,9004,9005,9003,9132,9131,9132,9003,9004,9002,9131,9130,9131,9002,9003,9001,9130,9129,9130,9001,9002,9000,9129,9128,9129,9000,9001,8999,9128,9127,9128,8999,9000,8998,9127,9126,9127,8998,8999,8997,9126,9125,9126,8997,8998,8996,9125,9124,9125,8996,8997,8995,9124,9123,9124,8995,8996,8994,9123,9122,9123,8994,8995,8993,9122,9121,9122,8993,8994,8992,9121,9120,9121,8992,8993,8991,9120,9119,9120,8991,8992,8990,9119,9118,9119,8990,8991,8989,9118,9117,9118,8989,8990,8988,9117,9116,9117,8988,8989,8987,9116,9115,9116,8987,8988,8986,9115,9114,9115,8986,8987,8985,9114,9113,9114,8985,8986,8984,9113,9112,9113,8984,8985,8983,9112,9111,9112,8983,8984,8982,9111,9110,9111,8982,8983,8981,9110,9109,9110,8981,8982,8980,9109,9108,9109,8980,8981,8979,9108,9107,9108,8979,8980,8978,9107,9106,9107,8978,8979,8977,9106,9105,9106,8977,8978,8976,9105,9104,9105,8976,8977,8975,9104,9103,9104,8975,8976,8974,9103,9102,9103,8974,8975,8973,9102,9101,9102,8973,8974,8972,9101,9100,9101,8972,8973,8971,9100,9099,9100,8971,8972,8970,9099,9098,9099,8970,8971,8969,9098,9097,9098,8969,8970,8968,9097,9096,9097,8968,8969,8967,9096,9095,9096,8967,8968,8966,9095,9094,9095,8966,8967,8965,9094,9093,9094,8965,8966,8964,9093,9092,9093,8964,8965,8963,9092,9091,9092,8963,8964,8962,9091,9090,9091,8962,8963,8961,9090,9089,9090,8961,8962,8960,9089,9088,9089,8960,8961,9214,9343,9342,9343,9214,9215,9213,9342,9341,9342,9213,9214,9212,9341,9340,9341,9212,9213,9211,9340,9339,9340,9211,9212,9210,9339,9338,9339,9210,9211,9209,9338,9337,9338,9209,9210,9208,9337,9336,9337,9208,9209,9207,9336,9335,9336,9207,9208,9206,9335,9334,9335,9206,9207,9205,9334,9333,9334,9205,9206,9204,9333,9332,9333,9204,9205,9203,9332,9331,9332,9203,9204,9202,9331,9330,9331,9202,9203,9201,9330,9329,9330,9201,9202,9200,9329,9328,9329,9200,9201,9199,9328,9327,9328,9199,9200,9198,9327,9326,9327,9198,9199,9197,9326,9325,9326,9197,9198,9196,9325,9324,9325,9196,9197,9195,9324,9323,9324,9195,9196,9194,9323,9322,9323,9194,9195,9193,9322,9321,9322,9193,9194,9192,9321,9320,9321,9192,9193,9191,9320,9319,9320,9191,9192,9190,9319,9318,9319,9190,9191,9189,9318,9317,9318,9189,9190,9188,9317,9316,9317,9188,9189,9187,9316,9315,9316,9187,9188,9186,9315,9314,9315,9186,9187,9185,9314,9313,9314,9185,9186,9184,9313,9312,9313,9184,9185,9183,9312,9311,9312,9183,9184,9182,9311,9310,9311,9182,9183,9181,9310,9309,9310,9181,9182,9180,9309,9308,9309,9180,9181,9179,9308,9307,9308,9179,9180,9178,9307,9306,9307,9178,9179,9177,9306,9305,9306,9177,9178,9176,9305,9304,9305,9176,9177,9175,9304,9303,9304,9175,9176,9174,9303,9302,9303,9174,9175,9173,9302,9301,9302,9173,9174,9172,9301,9300,9301,9172,9173,9171,9300,9299,9300,9171,9172,9170,9299,9298,9299,9170,9171,9169,9298,9297,9298,9169,9170,9168,9297,9296,9297,9168,9169,9167,9296,9295,9296,9167,9168,9166,9295,9294,9295,9166,9167,9165,9294,9293,9294,9165,9166,9164,9293,9292,9293,9164,9165,9163,9292,9291,9292,9163,9164,9162,9291,9290,9291,9162,9163,9161,9290,9289,9290,9161,9162,9160,9289,9288,9289,9160,9161,9159,9288,9287,9288,9159,9160,9158,9287,9286,9287,9158,9159,9157,9286,9285,9286,9157,9158,9156,9285,9284,9285,9156,9157,9155,9284,9283,9284,9155,9156,9154,9283,9282,9283,9154,9155,9153,9282,9281,9282,9153,9154,9152,9281,9280,9281,9152,9153,9151,9280,9279,9280,9151,9152,9150,9279,9278,9279,9150,9151,9149,9278,9277,9278,9149,9150,9148,9277,9276,9277,9148,9149,9147,9276,9275,9276,9147,9148,9146,9275,9274,9275,9146,9147,9145,9274,9273,9274,9145,9146,9144,9273,9272,9273,9144,9145,9143,9272,9271,9272,9143,9144,9142,9271,9270,9271,9142,9143,9141,9270,9269,9270,9141,9142,9140,9269,9268,9269,9140,9141,9139,9268,9267,9268,9139,9140,9138,9267,9266,9267,9138,9139,9137,9266,9265,9266,9137,9138,9136,9265,9264,9265,9136,9137,9135,9264,9263,9264,9135,9136,9134,9263,9262,9263,9134,9135,9133,9262,9261,9262,9133,9134,9132,9261,9260,9261,9132,9133,9131,9260,9259,9260,9131,9132,9130,9259,9258,9259,9130,9131,9129,9258,9257,9258,9129,9130,9128,9257,9256,9257,9128,9129,9127,9256,9255,9256,9127,9128,9126,9255,9254,9255,9126,9127,9125,9254,9253,9254,9125,9126,9124,9253,9252,9253,9124,9125,9123,9252,9251,9252,9123,9124,9122,9251,9250,9251,9122,9123,9121,9250,9249,9250,9121,9122,9120,9249,9248,9249,9120,9121,9119,9248,9247,9248,9119,9120,9118,9247,9246,9247,9118,9119,9117,9246,9245,9246,9117,9118,9116,9245,9244,9245,9116,9117,9115,9244,9243,9244,9115,9116,9114,9243,9242,9243,9114,9115,9113,9242,9241,9242,9113,9114,9112,9241,9240,9241,9112,9113,9111,9240,9239,9240,9111,9112,9110,9239,9238,9239,9110,9111,9109,9238,9237,9238,9109,9110,9108,9237,9236,9237,9108,9109,9107,9236,9235,9236,9107,9108,9106,9235,9234,9235,9106,9107,9105,9234,9233,9234,9105,9106,9104,9233,9232,9233,9104,9105,9103,9232,9231,9232,9103,9104,9102,9231,9230,9231,9102,9103,9101,9230,9229,9230,9101,9102,9100,9229,9228,9229,9100,9101,9099,9228,9227,9228,9099,9100,9098,9227,9226,9227,9098,9099,9097,9226,9225,9226,9097,9098,9096,9225,9224,9225,9096,9097,9095,9224,9223,9224,9095,9096,9094,9223,9222,9223,9094,9095,9093,9222,9221,9222,9093,9094,9092,9221,9220,9221,9092,9093,9091,9220,9219,9220,9091,9092,9090,9219,9218,9219,9090,9091,9089,9218,9217,9218,9089,9090,9088,9217,9216,9217,9088,9089,9342,9471,9470,9471,9342,9343,9341,9470,9469,9470,9341,9342,9340,9469,9468,9469,9340,9341,9339,9468,9467,9468,9339,9340,9338,9467,9466,9467,9338,9339,9337,9466,9465,9466,9337,9338,9336,9465,9464,9465,9336,9337,9335,9464,9463,9464,9335,9336,9334,9463,9462,9463,9334,9335,9333,9462,9461,9462,9333,9334,9332,9461,9460,9461,9332,9333,9331,9460,9459,9460,9331,9332,9330,9459,9458,9459,9330,9331,9329,9458,9457,9458,9329,9330,9328,9457,9456,9457,9328,9329,9327,9456,9455,9456,9327,9328,9326,9455,9454,9455,9326,9327,9325,9454,9453,9454,9325,9326,9324,9453,9452,9453,9324,9325,9323,9452,9451,9452,9323,9324,9322,9451,9450,9451,9322,9323,9321,9450,9449,9450,9321,9322,9320,9449,9448,9449,9320,9321,9319,9448,9447,9448,9319,9320,9318,9447,9446,9447,9318,9319,9317,9446,9445,9446,9317,9318,9316,9445,9444,9445,9316,9317,9315,9444,9443,9444,9315,9316,9314,9443,9442,9443,9314,9315,9313,9442,9441,9442,9313,9314,9312,9441,9440,9441,9312,9313,9311,9440,9439,9440,9311,9312,9310,9439,9438,9439,9310,9311,9309,9438,9437,9438,9309,9310,9308,9437,9436,9437,9308,9309,9307,9436,9435,9436,9307,9308,9306,9435,9434,9435,9306,9307,9305,9434,9433,9434,9305,9306,9304,9433,9432,9433,9304,9305,9303,9432,9431,9432,9303,9304,9302,9431,9430,9431,9302,9303,9301,9430,9429,9430,9301,9302,9300,9429,9428,9429,9300,9301,9299,9428,9427,9428,9299,9300,9298,9427,9426,9427,9298,9299,9297,9426,9425,9426,9297,9298,9296,9425,9424,9425,9296,9297,9295,9424,9423,9424,9295,9296,9294,9423,9422,9423,9294,9295,9293,9422,9421,9422,9293,9294,9292,9421,9420,9421,9292,9293,9291,9420,9419,9420,9291,9292,9290,9419,9418,9419,9290,9291,9289,9418,9417,9418,9289,9290,9288,9417,9416,9417,9288,9289,9287,9416,9415,9416,9287,9288,9286,9415,9414,9415,9286,9287,9285,9414,9413,9414,9285,9286,9284,9413,9412,9413,9284,9285,9283,9412,9411,9412,9283,9284,9282,9411,9410,9411,9282,9283,9281,9410,9409,9410,9281,9282,9280,9409,9408,9409,9280,9281,9279,9408,9407,9408,9279,9280,9278,9407,9406,9407,9278,9279,9277,9406,9405,9406,9277,9278,9276,9405,9404,9405,9276,9277,9275,9404,9403,9404,9275,9276,9274,9403,9402,9403,9274,9275,9273,9402,9401,9402,9273,9274,9272,9401,9400,9401,9272,9273,9271,9400,9399,9400,9271,9272,9270,9399,9398,9399,9270,9271,9269,9398,9397,9398,9269,9270,9268,9397,9396,9397,9268,9269,9267,9396,9395,9396,9267,9268,9266,9395,9394,9395,9266,9267,9265,9394,9393,9394,9265,9266,9264,9393,9392,9393,9264,9265,9263,9392,9391,9392,9263,9264,9262,9391,9390,9391,9262,9263,9261,9390,9389,9390,9261,9262,9260,9389,9388,9389,9260,9261,9259,9388,9387,9388,9259,9260,9258,9387,9386,9387,9258,9259,9257,9386,9385,9386,9257,9258,9256,9385,9384,9385,9256,9257,9255,9384,9383,9384,9255,9256,9254,9383,9382,9383,9254,9255,9253,9382,9381,9382,9253,9254,9252,9381,9380,9381,9252,9253,9251,9380,9379,9380,9251,9252,9250,9379,9378,9379,9250,9251,9249,9378,9377,9378,9249,9250,9248,9377,9376,9377,9248,9249,9247,9376,9375,9376,9247,9248,9246,9375,9374,9375,9246,9247,9245,9374,9373,9374,9245,9246,9244,9373,9372,9373,9244,9245,9243,9372,9371,9372,9243,9244,9242,9371,9370,9371,9242,9243,9241,9370,9369,9370,9241,9242,9240,9369,9368,9369,9240,9241,9239,9368,9367,9368,9239,9240,9238,9367,9366,9367,9238,9239,9237,9366,9365,9366,9237,9238,9236,9365,9364,9365,9236,9237,9235,9364,9363,9364,9235,9236,9234,9363,9362,9363,9234,9235,9233,9362,9361,9362,9233,9234,9232,9361,9360,9361,9232,9233,9231,9360,9359,9360,9231,9232,9230,9359,9358,9359,9230,9231,9229,9358,9357,9358,9229,9230,9228,9357,9356,9357,9228,9229,9227,9356,9355,9356,9227,9228,9226,9355,9354,9355,9226,9227,9225,9354,9353,9354,9225,9226,9224,9353,9352,9353,9224,9225,9223,9352,9351,9352,9223,9224,9222,9351,9350,9351,9222,9223,9221,9350,9349,9350,9221,9222,9220,9349,9348,9349,9220,9221,9219,9348,9347,9348,9219,9220,9218,9347,9346,9347,9218,9219,9217,9346,9345,9346,9217,9218,9216,9345,9344,9345,9216,9217,9470,9599,9598,9599,9470,9471,9469,9598,9597,9598,9469,9470,9468,9597,9596,9597,9468,9469,9467,9596,9595,9596,9467,9468,9466,9595,9594,9595,9466,9467,9465,9594,9593,9594,9465,9466,9464,9593,9592,9593,9464,9465,9463,9592,9591,9592,9463,9464,9462,9591,9590,9591,9462,9463,9461,9590,9589,9590,9461,9462,9460,9589,9588,9589,9460,9461,9459,9588,9587,9588,9459,9460,9458,9587,9586,9587,9458,9459,9457,9586,9585,9586,9457,9458,9456,9585,9584,9585,9456,9457,9455,9584,9583,9584,9455,9456,9454,9583,9582,9583,9454,9455,9453,9582,9581,9582,9453,9454,9452,9581,9580,9581,9452,9453,9451,9580,9579,9580,9451,9452,9450,9579,9578,9579,9450,9451,9449,9578,9577,9578,9449,9450,9448,9577,9576,9577,9448,9449,9447,9576,9575,9576,9447,9448,9446,9575,9574,9575,9446,9447,9445,9574,9573,9574,9445,9446,9444,9573,9572,9573,9444,9445,9443,9572,9571,9572,9443,9444,9442,9571,9570,9571,9442,9443,9441,9570,9569,9570,9441,9442,9440,9569,9568,9569,9440,9441,9439,9568,9567,9568,9439,9440,9438,9567,9566,9567,9438,9439,9437,9566,9565,9566,9437,9438,9436,9565,9564,9565,9436,9437,9435,9564,9563,9564,9435,9436,9434,9563,9562,9563,9434,9435,9433,9562,9561,9562,9433,9434,9432,9561,9560,9561,9432,9433,9431,9560,9559,9560,9431,9432,9430,9559,9558,9559,9430,9431,9429,9558,9557,9558,9429,9430,9428,9557,9556,9557,9428,9429,9427,9556,9555,9556,9427,9428,9426,9555,9554,9555,9426,9427,9425,9554,9553,9554,9425,9426,9424,9553,9552,9553,9424,9425,9423,9552,9551,9552,9423,9424,9422,9551,9550,9551,9422,9423,9421,9550,9549,9550,9421,9422,9420,9549,9548,9549,9420,9421,9419,9548,9547,9548,9419,9420,9418,9547,9546,9547,9418,9419,9417,9546,9545,9546,9417,9418,9416,9545,9544,9545,9416,9417,9415,9544,9543,9544,9415,9416,9414,9543,9542,9543,9414,9415,9413,9542,9541,9542,9413,9414,9412,9541,9540,9541,9412,9413,9411,9540,9539,9540,9411,9412,9410,9539,9538,9539,9410,9411,9409,9538,9537,9538,9409,9410,9408,9537,9536,9537,9408,9409,9407,9536,9535,9536,9407,9408,9406,9535,9534,9535,9406,9407,9405,9534,9533,9534,9405,9406,9404,9533,9532,9533,9404,9405,9403,9532,9531,9532,9403,9404,9402,9531,9530,9531,9402,9403,9401,9530,9529,9530,9401,9402,9400,9529,9528,9529,9400,9401,9399,9528,9527,9528,9399,9400,9398,9527,9526,9527,9398,9399,9397,9526,9525,9526,9397,9398,9396,9525,9524,9525,9396,9397,9395,9524,9523,9524,9395,9396,9394,9523,9522,9523,9394,9395,9393,9522,9521,9522,9393,9394,9392,9521,9520,9521,9392,9393,9391,9520,9519,9520,9391,9392,9390,9519,9518,9519,9390,9391,9389,9518,9517,9518,9389,9390,9388,9517,9516,9517,9388,9389,9387,9516,9515,9516,9387,9388,9386,9515,9514,9515,9386,9387,9385,9514,9513,9514,9385,9386,9384,9513,9512,9513,9384,9385,9383,9512,9511,9512,9383,9384,9382,9511,9510,9511,9382,9383,9381,9510,9509,9510,9381,9382,9380,9509,9508,9509,9380,9381,9379,9508,9507,9508,9379,9380,9378,9507,9506,9507,9378,9379,9377,9506,9505,9506,9377,9378,9376,9505,9504,9505,9376,9377,9375,9504,9503,9504,9375,9376,9374,9503,9502,9503,9374,9375,9373,9502,9501,9502,9373,9374,9372,9501,9500,9501,9372,9373,9371,9500,9499,9500,9371,9372,9370,9499,9498,9499,9370,9371,9369,9498,9497,9498,9369,9370,9368,9497,9496,9497,9368,9369,9367,9496,9495,9496,9367,9368,9366,9495,9494,9495,9366,9367,9365,9494,9493,9494,9365,9366,9364,9493,9492,9493,9364,9365,9363,9492,9491,9492,9363,9364,9362,9491,9490,9491,9362,9363,9361,9490,9489,9490,9361,9362,9360,9489,9488,9489,9360,9361,9359,9488,9487,9488,9359,9360,9358,9487,9486,9487,9358,9359,9357,9486,9485,9486,9357,9358,9356,9485,9484,9485,9356,9357,9355,9484,9483,9484,9355,9356,9354,9483,9482,9483,9354,9355,9353,9482,9481,9482,9353,9354,9352,9481,9480,9481,9352,9353,9351,9480,9479,9480,9351,9352,9350,9479,9478,9479,9350,9351,9349,9478,9477,9478,9349,9350,9348,9477,9476,9477,9348,9349,9347,9476,9475,9476,9347,9348,9346,9475,9474,9475,9346,9347,9345,9474,9473,9474,9345,9346,9344,9473,9472,9473,9344,9345,9598,9727,9726,9727,9598,9599,9597,9726,9725,9726,9597,9598,9596,9725,9724,9725,9596,9597,9595,9724,9723,9724,9595,9596,9594,9723,9722,9723,9594,9595,9593,9722,9721,9722,9593,9594,9592,9721,9720,9721,9592,9593,9591,9720,9719,9720,9591,9592,9590,9719,9718,9719,9590,9591,9589,9718,9717,9718,9589,9590,9588,9717,9716,9717,9588,9589,9587,9716,9715,9716,9587,9588,9586,9715,9714,9715,9586,9587,9585,9714,9713,9714,9585,9586,9584,9713,9712,9713,9584,9585,9583,9712,9711,9712,9583,9584,9582,9711,9710,9711,9582,9583,9581,9710,9709,9710,9581,9582,9580,9709,9708,9709,9580,9581,9579,9708,9707,9708,9579,9580,9578,9707,9706,9707,9578,9579,9577,9706,9705,9706,9577,9578,9576,9705,9704,9705,9576,9577,9575,9704,9703,9704,9575,9576,9574,9703,9702,9703,9574,9575,9573,9702,9701,9702,9573,9574,9572,9701,9700,9701,9572,9573,9571,9700,9699,9700,9571,9572,9570,9699,9698,9699,9570,9571,9569,9698,9697,9698,9569,9570,9568,9697,9696,9697,9568,9569,9567,9696,9695,9696,9567,9568,9566,9695,9694,9695,9566,9567,9565,9694,9693,9694,9565,9566,9564,9693,9692,9693,9564,9565,9563,9692,9691,9692,9563,9564,9562,9691,9690,9691,9562,9563,9561,9690,9689,9690,9561,9562,9560,9689,9688,9689,9560,9561,9559,9688,9687,9688,9559,9560,9558,9687,9686,9687,9558,9559,9557,9686,9685,9686,9557,9558,9556,9685,9684,9685,9556,9557,9555,9684,9683,9684,9555,9556,9554,9683,9682,9683,9554,9555,9553,9682,9681,9682,9553,9554,9552,9681,9680,9681,9552,9553,9551,9680,9679,9680,9551,9552,9550,9679,9678,9679,9550,9551,9549,9678,9677,9678,9549,9550,9548,9677,9676,9677,9548,9549,9547,9676,9675,9676,9547,9548,9546,9675,9674,9675,9546,9547,9545,9674,9673,9674,9545,9546,9544,9673,9672,9673,9544,9545,9543,9672,9671,9672,9543,9544,9542,9671,9670,9671,9542,9543,9541,9670,9669,9670,9541,9542,9540,9669,9668,9669,9540,9541,9539,9668,9667,9668,9539,9540,9538,9667,9666,9667,9538,9539,9537,9666,9665,9666,9537,9538,9536,9665,9664,9665,9536,9537,9535,9664,9663,9664,9535,9536,9534,9663,9662,9663,9534,9535,9533,9662,9661,9662,9533,9534,9532,9661,9660,9661,9532,9533,9531,9660,9659,9660,9531,9532,9530,9659,9658,9659,9530,9531,9529,9658,9657,9658,9529,9530,9528,9657,9656,9657,9528,9529,9527,9656,9655,9656,9527,9528,9526,9655,9654,9655,9526,9527,9525,9654,9653,9654,9525,9526,9524,9653,9652,9653,9524,9525,9523,9652,9651,9652,9523,9524,9522,9651,9650,9651,9522,9523,9521,9650,9649,9650,9521,9522,9520,9649,9648,9649,9520,9521,9519,9648,9647,9648,9519,9520,9518,9647,9646,9647,9518,9519,9517,9646,9645,9646,9517,9518,9516,9645,9644,9645,9516,9517,9515,9644,9643,9644,9515,9516,9514,9643,9642,9643,9514,9515,9513,9642,9641,9642,9513,9514,9512,9641,9640,9641,9512,9513,9511,9640,9639,9640,9511,9512,9510,9639,9638,9639,9510,9511,9509,9638,9637,9638,9509,9510,9508,9637,9636,9637,9508,9509,9507,9636,9635,9636,9507,9508,9506,9635,9634,9635,9506,9507,9505,9634,9633,9634,9505,9506,9504,9633,9632,9633,9504,9505,9503,9632,9631,9632,9503,9504,9502,9631,9630,9631,9502,9503,9501,9630,9629,9630,9501,9502,9500,9629,9628,9629,9500,9501,9499,9628,9627,9628,9499,9500,9498,9627,9626,9627,9498,9499,9497,9626,9625,9626,9497,9498,9496,9625,9624,9625,9496,9497,9495,9624,9623,9624,9495,9496,9494,9623,9622,9623,9494,9495,9493,9622,9621,9622,9493,9494,9492,9621,9620,9621,9492,9493,9491,9620,9619,9620,9491,9492,9490,9619,9618,9619,9490,9491,9489,9618,9617,9618,9489,9490,9488,9617,9616,9617,9488,9489,9487,9616,9615,9616,9487,9488,9486,9615,9614,9615,9486,9487,9485,9614,9613,9614,9485,9486,9484,9613,9612,9613,9484,9485,9483,9612,9611,9612,9483,9484,9482,9611,9610,9611,9482,9483,9481,9610,9609,9610,9481,9482,9480,9609,9608,9609,9480,9481,9479,9608,9607,9608,9479,9480,9478,9607,9606,9607,9478,9479,9477,9606,9605,9606,9477,9478,9476,9605,9604,9605,9476,9477,9475,9604,9603,9604,9475,9476,9474,9603,9602,9603,9474,9475,9473,9602,9601,9602,9473,9474,9472,9601,9600,9601,9472,9473,9726,9855,9854,9855,9726,9727,9725,9854,9853,9854,9725,9726,9724,9853,9852,9853,9724,9725,9723,9852,9851,9852,9723,9724,9722,9851,9850,9851,9722,9723,9721,9850,9849,9850,9721,9722,9720,9849,9848,9849,9720,9721,9719,9848,9847,9848,9719,9720,9718,9847,9846,9847,9718,9719,9717,9846,9845,9846,9717,9718,9716,9845,9844,9845,9716,9717,9715,9844,9843,9844,9715,9716,9714,9843,9842,9843,9714,9715,9713,9842,9841,9842,9713,9714,9712,9841,9840,9841,9712,9713,9711,9840,9839,9840,9711,9712,9710,9839,9838,9839,9710,9711,9709,9838,9837,9838,9709,9710,9708,9837,9836,9837,9708,9709,9707,9836,9835,9836,9707,9708,9706,9835,9834,9835,9706,9707,9705,9834,9833,9834,9705,9706,9704,9833,9832,9833,9704,9705,9703,9832,9831,9832,9703,9704,9702,9831,9830,9831,9702,9703,9701,9830,9829,9830,9701,9702,9700,9829,9828,9829,9700,9701,9699,9828,9827,9828,9699,9700,9698,9827,9826,9827,9698,9699,9697,9826,9825,9826,9697,9698,9696,9825,9824,9825,9696,9697,9695,9824,9823,9824,9695,9696,9694,9823,9822,9823,9694,9695,9693,9822,9821,9822,9693,9694,9692,9821,9820,9821,9692,9693,9691,9820,9819,9820,9691,9692,9690,9819,9818,9819,9690,9691,9689,9818,9817,9818,9689,9690,9688,9817,9816,9817,9688,9689,9687,9816,9815,9816,9687,9688,9686,9815,9814,9815,9686,9687,9685,9814,9813,9814,9685,9686,9684,9813,9812,9813,9684,9685,9683,9812,9811,9812,9683,9684,9682,9811,9810,9811,9682,9683,9681,9810,9809,9810,9681,9682,9680,9809,9808,9809,9680,9681,9679,9808,9807,9808,9679,9680,9678,9807,9806,9807,9678,9679,9677,9806,9805,9806,9677,9678,9676,9805,9804,9805,9676,9677,9675,9804,9803,9804,9675,9676,9674,9803,9802,9803,9674,9675,9673,9802,9801,9802,9673,9674,9672,9801,9800,9801,9672,9673,9671,9800,9799,9800,9671,9672,9670,9799,9798,9799,9670,9671,9669,9798,9797,9798,9669,9670,9668,9797,9796,9797,9668,9669,9667,9796,9795,9796,9667,9668,9666,9795,9794,9795,9666,9667,9665,9794,9793,9794,9665,9666,9664,9793,9792,9793,9664,9665,9663,9792,9791,9792,9663,9664,9662,9791,9790,9791,9662,9663,9661,9790,9789,9790,9661,9662,9660,9789,9788,9789,9660,9661,9659,9788,9787,9788,9659,9660,9658,9787,9786,9787,9658,9659,9657,9786,9785,9786,9657,9658,9656,9785,9784,9785,9656,9657,9655,9784,9783,9784,9655,9656,9654,9783,9782,9783,9654,9655,9653,9782,9781,9782,9653,9654,9652,9781,9780,9781,9652,9653,9651,9780,9779,9780,9651,9652,9650,9779,9778,9779,9650,9651,9649,9778,9777,9778,9649,9650,9648,9777,9776,9777,9648,9649,9647,9776,9775,9776,9647,9648,9646,9775,9774,9775,9646,9647,9645,9774,9773,9774,9645,9646,9644,9773,9772,9773,9644,9645,9643,9772,9771,9772,9643,9644,9642,9771,9770,9771,9642,9643,9641,9770,9769,9770,9641,9642,9640,9769,9768,9769,9640,9641,9639,9768,9767,9768,9639,9640,9638,9767,9766,9767,9638,9639,9637,9766,9765,9766,9637,9638,9636,9765,9764,9765,9636,9637,9635,9764,9763,9764,9635,9636,9634,9763,9762,9763,9634,9635,9633,9762,9761,9762,9633,9634,9632,9761,9760,9761,9632,9633,9631,9760,9759,9760,9631,9632,9630,9759,9758,9759,9630,9631,9629,9758,9757,9758,9629,9630,9628,9757,9756,9757,9628,9629,9627,9756,9755,9756,9627,9628,9626,9755,9754,9755,9626,9627,9625,9754,9753,9754,9625,9626,9624,9753,9752,9753,9624,9625,9623,9752,9751,9752,9623,9624,9622,9751,9750,9751,9622,9623,9621,9750,9749,9750,9621,9622,9620,9749,9748,9749,9620,9621,9619,9748,9747,9748,9619,9620,9618,9747,9746,9747,9618,9619,9617,9746,9745,9746,9617,9618,9616,9745,9744,9745,9616,9617,9615,9744,9743,9744,9615,9616,9614,9743,9742,9743,9614,9615,9613,9742,9741,9742,9613,9614,9612,9741,9740,9741,9612,9613,9611,9740,9739,9740,9611,9612,9610,9739,9738,9739,9610,9611,9609,9738,9737,9738,9609,9610,9608,9737,9736,9737,9608,9609,9607,9736,9735,9736,9607,9608,9606,9735,9734,9735,9606,9607,9605,9734,9733,9734,9605,9606,9604,9733,9732,9733,9604,9605,9603,9732,9731,9732,9603,9604,9602,9731,9730,9731,9602,9603,9601,9730,9729,9730,9601,9602,9600,9729,9728,9729,9600,9601,9854,9983,9982,9983,9854,9855,9853,9982,9981,9982,9853,9854,9852,9981,9980,9981,9852,9853,9851,9980,9979,9980,9851,9852,9850,9979,9978,9979,9850,9851,9849,9978,9977,9978,9849,9850,9848,9977,9976,9977,9848,9849,9847,9976,9975,9976,9847,9848,9846,9975,9974,9975,9846,9847,9845,9974,9973,9974,9845,9846,9844,9973,9972,9973,9844,9845,9843,9972,9971,9972,9843,9844,9842,9971,9970,9971,9842,9843,9841,9970,9969,9970,9841,9842,9840,9969,9968,9969,9840,9841,9839,9968,9967,9968,9839,9840,9838,9967,9966,9967,9838,9839,9837,9966,9965,9966,9837,9838,9836,9965,9964,9965,9836,9837,9835,9964,9963,9964,9835,9836,9834,9963,9962,9963,9834,9835,9833,9962,9961,9962,9833,9834,9832,9961,9960,9961,9832,9833,9831,9960,9959,9960,9831,9832,9830,9959,9958,9959,9830,9831,9829,9958,9957,9958,9829,9830,9828,9957,9956,9957,9828,9829,9827,9956,9955,9956,9827,9828,9826,9955,9954,9955,9826,9827,9825,9954,9953,9954,9825,9826,9824,9953,9952,9953,9824,9825,9823,9952,9951,9952,9823,9824,9822,9951,9950,9951,9822,9823,9821,9950,9949,9950,9821,9822,9820,9949,9948,9949,9820,9821,9819,9948,9947,9948,9819,9820,9818,9947,9946,9947,9818,9819,9817,9946,9945,9946,9817,9818,9816,9945,9944,9945,9816,9817,9815,9944,9943,9944,9815,9816,9814,9943,9942,9943,9814,9815,9813,9942,9941,9942,9813,9814,9812,9941,9940,9941,9812,9813,9811,9940,9939,9940,9811,9812,9810,9939,9938,9939,9810,9811,9809,9938,9937,9938,9809,9810,9808,9937,9936,9937,9808,9809,9807,9936,9935,9936,9807,9808,9806,9935,9934,9935,9806,9807,9805,9934,9933,9934,9805,9806,9804,9933,9932,9933,9804,9805,9803,9932,9931,9932,9803,9804,9802,9931,9930,9931,9802,9803,9801,9930,9929,9930,9801,9802,9800,9929,9928,9929,9800,9801,9799,9928,9927,9928,9799,9800,9798,9927,9926,9927,9798,9799,9797,9926,9925,9926,9797,9798,9796,9925,9924,9925,9796,9797,9795,9924,9923,9924,9795,9796,9794,9923,9922,9923,9794,9795,9793,9922,9921,9922,9793,9794,9792,9921,9920,9921,9792,9793,9791,9920,9919,9920,9791,9792,9790,9919,9918,9919,9790,9791,9789,9918,9917,9918,9789,9790,9788,9917,9916,9917,9788,9789,9787,9916,9915,9916,9787,9788,9786,9915,9914,9915,9786,9787,9785,9914,9913,9914,9785,9786,9784,9913,9912,9913,9784,9785,9783,9912,9911,9912,9783,9784,9782,9911,9910,9911,9782,9783,9781,9910,9909,9910,9781,9782,9780,9909,9908,9909,9780,9781,9779,9908,9907,9908,9779,9780,9778,9907,9906,9907,9778,9779,9777,9906,9905,9906,9777,9778,9776,9905,9904,9905,9776,9777,9775,9904,9903,9904,9775,9776,9774,9903,9902,9903,9774,9775,9773,9902,9901,9902,9773,9774,9772,9901,9900,9901,9772,9773,9771,9900,9899,9900,9771,9772,9770,9899,9898,9899,9770,9771,9769,9898,9897,9898,9769,9770,9768,9897,9896,9897,9768,9769,9767,9896,9895,9896,9767,9768,9766,9895,9894,9895,9766,9767,9765,9894,9893,9894,9765,9766,9764,9893,9892,9893,9764,9765,9763,9892,9891,9892,9763,9764,9762,9891,9890,9891,9762,9763,9761,9890,9889,9890,9761,9762,9760,9889,9888,9889,9760,9761,9759,9888,9887,9888,9759,9760,9758,9887,9886,9887,9758,9759,9757,9886,9885,9886,9757,9758,9756,9885,9884,9885,9756,9757,9755,9884,9883,9884,9755,9756,9754,9883,9882,9883,9754,9755,9753,9882,9881,9882,9753,9754,9752,9881,9880,9881,9752,9753,9751,9880,9879,9880,9751,9752,9750,9879,9878,9879,9750,9751,9749,9878,9877,9878,9749,9750,9748,9877,9876,9877,9748,9749,9747,9876,9875,9876,9747,9748,9746,9875,9874,9875,9746,9747,9745,9874,9873,9874,9745,9746,9744,9873,9872,9873,9744,9745,9743,9872,9871,9872,9743,9744,9742,9871,9870,9871,9742,9743,9741,9870,9869,9870,9741,9742,9740,9869,9868,9869,9740,9741,9739,9868,9867,9868,9739,9740,9738,9867,9866,9867,9738,9739,9737,9866,9865,9866,9737,9738,9736,9865,9864,9865,9736,9737,9735,9864,9863,9864,9735,9736,9734,9863,9862,9863,9734,9735,9733,9862,9861,9862,9733,9734,9732,9861,9860,9861,9732,9733,9731,9860,9859,9860,9731,9732,9730,9859,9858,9859,9730,9731,9729,9858,9857,9858,9729,9730,9728,9857,9856,9857,9728,9729,9982,10111,10110,10111,9982,9983,9981,10110,10109,10110,9981,9982,9980,10109,10108,10109,9980,9981,9979,10108,10107,10108,9979,9980,9978,10107,10106,10107,9978,9979,9977,10106,10105,10106,9977,9978,9976,10105,10104,10105,9976,9977,9975,10104,10103,10104,9975,9976,9974,10103,10102,10103,9974,9975,9973,10102,10101,10102,9973,9974,9972,10101,10100,10101,9972,9973,9971,10100,10099,10100,9971,9972,9970,10099,10098,10099,9970,9971,9969,10098,10097,10098,9969,9970,9968,10097,10096,10097,9968,9969,9967,10096,10095,10096,9967,9968,9966,10095,10094,10095,9966,9967,9965,10094,10093,10094,9965,9966,9964,10093,10092,10093,9964,9965,9963,10092,10091,10092,9963,9964,9962,10091,10090,10091,9962,9963,9961,10090,10089,10090,9961,9962,9960,10089,10088,10089,9960,9961,9959,10088,10087,10088,9959,9960,9958,10087,10086,10087,9958,9959,9957,10086,10085,10086,9957,9958,9956,10085,10084,10085,9956,9957,9955,10084,10083,10084,9955,9956,9954,10083,10082,10083,9954,9955,9953,10082,10081,10082,9953,9954,9952,10081,10080,10081,9952,9953,9951,10080,10079,10080,9951,9952,9950,10079,10078,10079,9950,9951,9949,10078,10077,10078,9949,9950,9948,10077,10076,10077,9948,9949,9947,10076,10075,10076,9947,9948,9946,10075,10074,10075,9946,9947,9945,10074,10073,10074,9945,9946,9944,10073,10072,10073,9944,9945,9943,10072,10071,10072,9943,9944,9942,10071,10070,10071,9942,9943,9941,10070,10069,10070,9941,9942,9940,10069,10068,10069,9940,9941,9939,10068,10067,10068,9939,9940,9938,10067,10066,10067,9938,9939,9937,10066,10065,10066,9937,9938,9936,10065,10064,10065,9936,9937,9935,10064,10063,10064,9935,9936,9934,10063,10062,10063,9934,9935,9933,10062,10061,10062,9933,9934,9932,10061,10060,10061,9932,9933,9931,10060,10059,10060,9931,9932,9930,10059,10058,10059,9930,9931,9929,10058,10057,10058,9929,9930,9928,10057,10056,10057,9928,9929,9927,10056,10055,10056,9927,9928,9926,10055,10054,10055,9926,9927,9925,10054,10053,10054,9925,9926,9924,10053,10052,10053,9924,9925,9923,10052,10051,10052,9923,9924,9922,10051,10050,10051,9922,9923,9921,10050,10049,10050,9921,9922,9920,10049,10048,10049,9920,9921,9919,10048,10047,10048,9919,9920,9918,10047,10046,10047,9918,9919,9917,10046,10045,10046,9917,9918,9916,10045,10044,10045,9916,9917,9915,10044,10043,10044,9915,9916,9914,10043,10042,10043,9914,9915,9913,10042,10041,10042,9913,9914,9912,10041,10040,10041,9912,9913,9911,10040,10039,10040,9911,9912,9910,10039,10038,10039,9910,9911,9909,10038,10037,10038,9909,9910,9908,10037,10036,10037,9908,9909,9907,10036,10035,10036,9907,9908,9906,10035,10034,10035,9906,9907,9905,10034,10033,10034,9905,9906,9904,10033,10032,10033,9904,9905,9903,10032,10031,10032,9903,9904,9902,10031,10030,10031,9902,9903,9901,10030,10029,10030,9901,9902,9900,10029,10028,10029,9900,9901,9899,10028,10027,10028,9899,9900,9898,10027,10026,10027,9898,9899,9897,10026,10025,10026,9897,9898,9896,10025,10024,10025,9896,9897,9895,10024,10023,10024,9895,9896,9894,10023,10022,10023,9894,9895,9893,10022,10021,10022,9893,9894,9892,10021,10020,10021,9892,9893,9891,10020,10019,10020,9891,9892,9890,10019,10018,10019,9890,9891,9889,10018,10017,10018,9889,9890,9888,10017,10016,10017,9888,9889,9887,10016,10015,10016,9887,9888,9886,10015,10014,10015,9886,9887,9885,10014,10013,10014,9885,9886,9884,10013,10012,10013,9884,9885,9883,10012,10011,10012,9883,9884,9882,10011,10010,10011,9882,9883,9881,10010,10009,10010,9881,9882,9880,10009,10008,10009,9880,9881,9879,10008,10007,10008,9879,9880,9878,10007,10006,10007,9878,9879,9877,10006,10005,10006,9877,9878,9876,10005,10004,10005,9876,9877,9875,10004,10003,10004,9875,9876,9874,10003,10002,10003,9874,9875,9873,10002,10001,10002,9873,9874,9872,10001,10000,10001,9872,9873,9871,10000,9999,10000,9871,9872,9870,9999,9998,9999,9870,9871,9869,9998,9997,9998,9869,9870,9868,9997,9996,9997,9868,9869,9867,9996,9995,9996,9867,9868,9866,9995,9994,9995,9866,9867,9865,9994,9993,9994,9865,9866,9864,9993,9992,9993,9864,9865,9863,9992,9991,9992,9863,9864,9862,9991,9990,9991,9862,9863,9861,9990,9989,9990,9861,9862,9860,9989,9988,9989,9860,9861,9859,9988,9987,9988,9859,9860,9858,9987,9986,9987,9858,9859,9857,9986,9985,9986,9857,9858,9856,9985,9984,9985,9856,9857,10110,10239,10238,10239,10110,10111,10109,10238,10237,10238,10109,10110,10108,10237,10236,10237,10108,10109,10107,10236,10235,10236,10107,10108,10106,10235,10234,10235,10106,10107,10105,10234,10233,10234,10105,10106,10104,10233,10232,10233,10104,10105,10103,10232,10231,10232,10103,10104,10102,10231,10230,10231,10102,10103,10101,10230,10229,10230,10101,10102,10100,10229,10228,10229,10100,10101,10099,10228,10227,10228,10099,10100,10098,10227,10226,10227,10098,10099,10097,10226,10225,10226,10097,10098,10096,10225,10224,10225,10096,10097,10095,10224,10223,10224,10095,10096,10094,10223,10222,10223,10094,10095,10093,10222,10221,10222,10093,10094,10092,10221,10220,10221,10092,10093,10091,10220,10219,10220,10091,10092,10090,10219,10218,10219,10090,10091,10089,10218,10217,10218,10089,10090,10088,10217,10216,10217,10088,10089,10087,10216,10215,10216,10087,10088,10086,10215,10214,10215,10086,10087,10085,10214,10213,10214,10085,10086,10084,10213,10212,10213,10084,10085,10083,10212,10211,10212,10083,10084,10082,10211,10210,10211,10082,10083,10081,10210,10209,10210,10081,10082,10080,10209,10208,10209,10080,10081,10079,10208,10207,10208,10079,10080,10078,10207,10206,10207,10078,10079,10077,10206,10205,10206,10077,10078,10076,10205,10204,10205,10076,10077,10075,10204,10203,10204,10075,10076,10074,10203,10202,10203,10074,10075,10073,10202,10201,10202,10073,10074,10072,10201,10200,10201,10072,10073,10071,10200,10199,10200,10071,10072,10070,10199,10198,10199,10070,10071,10069,10198,10197,10198,10069,10070,10068,10197,10196,10197,10068,10069,10067,10196,10195,10196,10067,10068,10066,10195,10194,10195,10066,10067,10065,10194,10193,10194,10065,10066,10064,10193,10192,10193,10064,10065,10063,10192,10191,10192,10063,10064,10062,10191,10190,10191,10062,10063,10061,10190,10189,10190,10061,10062,10060,10189,10188,10189,10060,10061,10059,10188,10187,10188,10059,10060,10058,10187,10186,10187,10058,10059,10057,10186,10185,10186,10057,10058,10056,10185,10184,10185,10056,10057,10055,10184,10183,10184,10055,10056,10054,10183,10182,10183,10054,10055,10053,10182,10181,10182,10053,10054,10052,10181,10180,10181,10052,10053,10051,10180,10179,10180,10051,10052,10050,10179,10178,10179,10050,10051,10049,10178,10177,10178,10049,10050,10048,10177,10176,10177,10048,10049,10047,10176,10175,10176,10047,10048,10046,10175,10174,10175,10046,10047,10045,10174,10173,10174,10045,10046,10044,10173,10172,10173,10044,10045,10043,10172,10171,10172,10043,10044,10042,10171,10170,10171,10042,10043,10041,10170,10169,10170,10041,10042,10040,10169,10168,10169,10040,10041,10039,10168,10167,10168,10039,10040,10038,10167,10166,10167,10038,10039,10037,10166,10165,10166,10037,10038,10036,10165,10164,10165,10036,10037,10035,10164,10163,10164,10035,10036,10034,10163,10162,10163,10034,10035,10033,10162,10161,10162,10033,10034,10032,10161,10160,10161,10032,10033,10031,10160,10159,10160,10031,10032,10030,10159,10158,10159,10030,10031,10029,10158,10157,10158,10029,10030,10028,10157,10156,10157,10028,10029,10027,10156,10155,10156,10027,10028,10026,10155,10154,10155,10026,10027,10025,10154,10153,10154,10025,10026,10024,10153,10152,10153,10024,10025,10023,10152,10151,10152,10023,10024,10022,10151,10150,10151,10022,10023,10021,10150,10149,10150,10021,10022,10020,10149,10148,10149,10020,10021,10019,10148,10147,10148,10019,10020,10018,10147,10146,10147,10018,10019,10017,10146,10145,10146,10017,10018,10016,10145,10144,10145,10016,10017,10015,10144,10143,10144,10015,10016,10014,10143,10142,10143,10014,10015,10013,10142,10141,10142,10013,10014,10012,10141,10140,10141,10012,10013,10011,10140,10139,10140,10011,10012,10010,10139,10138,10139,10010,10011,10009,10138,10137,10138,10009,10010,10008,10137,10136,10137,10008,10009,10007,10136,10135,10136,10007,10008,10006,10135,10134,10135,10006,10007,10005,10134,10133,10134,10005,10006,10004,10133,10132,10133,10004,10005,10003,10132,10131,10132,10003,10004,10002,10131,10130,10131,10002,10003,10001,10130,10129,10130,10001,10002,10000,10129,10128,10129,10000,10001,9999,10128,10127,10128,9999,10000,9998,10127,10126,10127,9998,9999,9997,10126,10125,10126,9997,9998,9996,10125,10124,10125,9996,9997,9995,10124,10123,10124,9995,9996,9994,10123,10122,10123,9994,9995,9993,10122,10121,10122,9993,9994,9992,10121,10120,10121,9992,9993,9991,10120,10119,10120,9991,9992,9990,10119,10118,10119,9990,9991,9989,10118,10117,10118,9989,9990,9988,10117,10116,10117,9988,9989,9987,10116,10115,10116,9987,9988,9986,10115,10114,10115,9986,9987,9985,10114,10113,10114,9985,9986,9984,10113,10112,10113,9984,9985,10238,10367,10366,10367,10238,10239,10237,10366,10365,10366,10237,10238,10236,10365,10364,10365,10236,10237,10235,10364,10363,10364,10235,10236,10234,10363,10362,10363,10234,10235,10233,10362,10361,10362,10233,10234,10232,10361,10360,10361,10232,10233,10231,10360,10359,10360,10231,10232,10230,10359,10358,10359,10230,10231,10229,10358,10357,10358,10229,10230,10228,10357,10356,10357,10228,10229,10227,10356,10355,10356,10227,10228,10226,10355,10354,10355,10226,10227,10225,10354,10353,10354,10225,10226,10224,10353,10352,10353,10224,10225,10223,10352,10351,10352,10223,10224,10222,10351,10350,10351,10222,10223,10221,10350,10349,10350,10221,10222,10220,10349,10348,10349,10220,10221,10219,10348,10347,10348,10219,10220,10218,10347,10346,10347,10218,10219,10217,10346,10345,10346,10217,10218,10216,10345,10344,10345,10216,10217,10215,10344,10343,10344,10215,10216,10214,10343,10342,10343,10214,10215,10213,10342,10341,10342,10213,10214,10212,10341,10340,10341,10212,10213,10211,10340,10339,10340,10211,10212,10210,10339,10338,10339,10210,10211,10209,10338,10337,10338,10209,10210,10208,10337,10336,10337,10208,10209,10207,10336,10335,10336,10207,10208,10206,10335,10334,10335,10206,10207,10205,10334,10333,10334,10205,10206,10204,10333,10332,10333,10204,10205,10203,10332,10331,10332,10203,10204,10202,10331,10330,10331,10202,10203,10201,10330,10329,10330,10201,10202,10200,10329,10328,10329,10200,10201,10199,10328,10327,10328,10199,10200,10198,10327,10326,10327,10198,10199,10197,10326,10325,10326,10197,10198,10196,10325,10324,10325,10196,10197,10195,10324,10323,10324,10195,10196,10194,10323,10322,10323,10194,10195,10193,10322,10321,10322,10193,10194,10192,10321,10320,10321,10192,10193,10191,10320,10319,10320,10191,10192,10190,10319,10318,10319,10190,10191,10189,10318,10317,10318,10189,10190,10188,10317,10316,10317,10188,10189,10187,10316,10315,10316,10187,10188,10186,10315,10314,10315,10186,10187,10185,10314,10313,10314,10185,10186,10184,10313,10312,10313,10184,10185,10183,10312,10311,10312,10183,10184,10182,10311,10310,10311,10182,10183,10181,10310,10309,10310,10181,10182,10180,10309,10308,10309,10180,10181,10179,10308,10307,10308,10179,10180,10178,10307,10306,10307,10178,10179,10177,10306,10305,10306,10177,10178,10176,10305,10304,10305,10176,10177,10175,10304,10303,10304,10175,10176,10174,10303,10302,10303,10174,10175,10173,10302,10301,10302,10173,10174,10172,10301,10300,10301,10172,10173,10171,10300,10299,10300,10171,10172,10170,10299,10298,10299,10170,10171,10169,10298,10297,10298,10169,10170,10168,10297,10296,10297,10168,10169,10167,10296,10295,10296,10167,10168,10166,10295,10294,10295,10166,10167,10165,10294,10293,10294,10165,10166,10164,10293,10292,10293,10164,10165,10163,10292,10291,10292,10163,10164,10162,10291,10290,10291,10162,10163,10161,10290,10289,10290,10161,10162,10160,10289,10288,10289,10160,10161,10159,10288,10287,10288,10159,10160,10158,10287,10286,10287,10158,10159,10157,10286,10285,10286,10157,10158,10156,10285,10284,10285,10156,10157,10155,10284,10283,10284,10155,10156,10154,10283,10282,10283,10154,10155,10153,10282,10281,10282,10153,10154,10152,10281,10280,10281,10152,10153,10151,10280,10279,10280,10151,10152,10150,10279,10278,10279,10150,10151,10149,10278,10277,10278,10149,10150,10148,10277,10276,10277,10148,10149,10147,10276,10275,10276,10147,10148,10146,10275,10274,10275,10146,10147,10145,10274,10273,10274,10145,10146,10144,10273,10272,10273,10144,10145,10143,10272,10271,10272,10143,10144,10142,10271,10270,10271,10142,10143,10141,10270,10269,10270,10141,10142,10140,10269,10268,10269,10140,10141,10139,10268,10267,10268,10139,10140,10138,10267,10266,10267,10138,10139,10137,10266,10265,10266,10137,10138,10136,10265,10264,10265,10136,10137,10135,10264,10263,10264,10135,10136,10134,10263,10262,10263,10134,10135,10133,10262,10261,10262,10133,10134,10132,10261,10260,10261,10132,10133,10131,10260,10259,10260,10131,10132,10130,10259,10258,10259,10130,10131,10129,10258,10257,10258,10129,10130,10128,10257,10256,10257,10128,10129,10127,10256,10255,10256,10127,10128,10126,10255,10254,10255,10126,10127,10125,10254,10253,10254,10125,10126,10124,10253,10252,10253,10124,10125,10123,10252,10251,10252,10123,10124,10122,10251,10250,10251,10122,10123,10121,10250,10249,10250,10121,10122,10120,10249,10248,10249,10120,10121,10119,10248,10247,10248,10119,10120,10118,10247,10246,10247,10118,10119,10117,10246,10245,10246,10117,10118,10116,10245,10244,10245,10116,10117,10115,10244,10243,10244,10115,10116,10114,10243,10242,10243,10114,10115,10113,10242,10241,10242,10113,10114,10112,10241,10240,10241,10112,10113,10366,10495,10494,10495,10366,10367,10365,10494,10493,10494,10365,10366,10364,10493,10492,10493,10364,10365,10363,10492,10491,10492,10363,10364,10362,10491,10490,10491,10362,10363,10361,10490,10489,10490,10361,10362,10360,10489,10488,10489,10360,10361,10359,10488,10487,10488,10359,10360,10358,10487,10486,10487,10358,10359,10357,10486,10485,10486,10357,10358,10356,10485,10484,10485,10356,10357,10355,10484,10483,10484,10355,10356,10354,10483,10482,10483,10354,10355,10353,10482,10481,10482,10353,10354,10352,10481,10480,10481,10352,10353,10351,10480,10479,10480,10351,10352,10350,10479,10478,10479,10350,10351,10349,10478,10477,10478,10349,10350,10348,10477,10476,10477,10348,10349,10347,10476,10475,10476,10347,10348,10346,10475,10474,10475,10346,10347,10345,10474,10473,10474,10345,10346,10344,10473,10472,10473,10344,10345,10343,10472,10471,10472,10343,10344,10342,10471,10470,10471,10342,10343,10341,10470,10469,10470,10341,10342,10340,10469,10468,10469,10340,10341,10339,10468,10467,10468,10339,10340,10338,10467,10466,10467,10338,10339,10337,10466,10465,10466,10337,10338,10336,10465,10464,10465,10336,10337,10335,10464,10463,10464,10335,10336,10334,10463,10462,10463,10334,10335,10333,10462,10461,10462,10333,10334,10332,10461,10460,10461,10332,10333,10331,10460,10459,10460,10331,10332,10330,10459,10458,10459,10330,10331,10329,10458,10457,10458,10329,10330,10328,10457,10456,10457,10328,10329,10327,10456,10455,10456,10327,10328,10326,10455,10454,10455,10326,10327,10325,10454,10453,10454,10325,10326,10324,10453,10452,10453,10324,10325,10323,10452,10451,10452,10323,10324,10322,10451,10450,10451,10322,10323,10321,10450,10449,10450,10321,10322,10320,10449,10448,10449,10320,10321,10319,10448,10447,10448,10319,10320,10318,10447,10446,10447,10318,10319,10317,10446,10445,10446,10317,10318,10316,10445,10444,10445,10316,10317,10315,10444,10443,10444,10315,10316,10314,10443,10442,10443,10314,10315,10313,10442,10441,10442,10313,10314,10312,10441,10440,10441,10312,10313,10311,10440,10439,10440,10311,10312,10310,10439,10438,10439,10310,10311,10309,10438,10437,10438,10309,10310,10308,10437,10436,10437,10308,10309,10307,10436,10435,10436,10307,10308,10306,10435,10434,10435,10306,10307,10305,10434,10433,10434,10305,10306,10304,10433,10432,10433,10304,10305,10303,10432,10431,10432,10303,10304,10302,10431,10430,10431,10302,10303,10301,10430,10429,10430,10301,10302,10300,10429,10428,10429,10300,10301,10299,10428,10427,10428,10299,10300,10298,10427,10426,10427,10298,10299,10297,10426,10425,10426,10297,10298,10296,10425,10424,10425,10296,10297,10295,10424,10423,10424,10295,10296,10294,10423,10422,10423,10294,10295,10293,10422,10421,10422,10293,10294,10292,10421,10420,10421,10292,10293,10291,10420,10419,10420,10291,10292,10290,10419,10418,10419,10290,10291,10289,10418,10417,10418,10289,10290,10288,10417,10416,10417,10288,10289,10287,10416,10415,10416,10287,10288,10286,10415,10414,10415,10286,10287,10285,10414,10413,10414,10285,10286,10284,10413,10412,10413,10284,10285,10283,10412,10411,10412,10283,10284,10282,10411,10410,10411,10282,10283,10281,10410,10409,10410,10281,10282,10280,10409,10408,10409,10280,10281,10279,10408,10407,10408,10279,10280,10278,10407,10406,10407,10278,10279,10277,10406,10405,10406,10277,10278,10276,10405,10404,10405,10276,10277,10275,10404,10403,10404,10275,10276,10274,10403,10402,10403,10274,10275,10273,10402,10401,10402,10273,10274,10272,10401,10400,10401,10272,10273,10271,10400,10399,10400,10271,10272,10270,10399,10398,10399,10270,10271,10269,10398,10397,10398,10269,10270,10268,10397,10396,10397,10268,10269,10267,10396,10395,10396,10267,10268,10266,10395,10394,10395,10266,10267,10265,10394,10393,10394,10265,10266,10264,10393,10392,10393,10264,10265,10263,10392,10391,10392,10263,10264,10262,10391,10390,10391,10262,10263,10261,10390,10389,10390,10261,10262,10260,10389,10388,10389,10260,10261,10259,10388,10387,10388,10259,10260,10258,10387,10386,10387,10258,10259,10257,10386,10385,10386,10257,10258,10256,10385,10384,10385,10256,10257,10255,10384,10383,10384,10255,10256,10254,10383,10382,10383,10254,10255,10253,10382,10381,10382,10253,10254,10252,10381,10380,10381,10252,10253,10251,10380,10379,10380,10251,10252,10250,10379,10378,10379,10250,10251,10249,10378,10377,10378,10249,10250,10248,10377,10376,10377,10248,10249,10247,10376,10375,10376,10247,10248,10246,10375,10374,10375,10246,10247,10245,10374,10373,10374,10245,10246,10244,10373,10372,10373,10244,10245,10243,10372,10371,10372,10243,10244,10242,10371,10370,10371,10242,10243,10241,10370,10369,10370,10241,10242,10240,10369,10368,10369,10240,10241,10494,10623,10622,10623,10494,10495,10493,10622,10621,10622,10493,10494,10492,10621,10620,10621,10492,10493,10491,10620,10619,10620,10491,10492,10490,10619,10618,10619,10490,10491,10489,10618,10617,10618,10489,10490,10488,10617,10616,10617,10488,10489,10487,10616,10615,10616,10487,10488,10486,10615,10614,10615,10486,10487,10485,10614,10613,10614,10485,10486,10484,10613,10612,10613,10484,10485,10483,10612,10611,10612,10483,10484,10482,10611,10610,10611,10482,10483,10481,10610,10609,10610,10481,10482,10480,10609,10608,10609,10480,10481,10479,10608,10607,10608,10479,10480,10478,10607,10606,10607,10478,10479,10477,10606,10605,10606,10477,10478,10476,10605,10604,10605,10476,10477,10475,10604,10603,10604,10475,10476,10474,10603,10602,10603,10474,10475,10473,10602,10601,10602,10473,10474,10472,10601,10600,10601,10472,10473,10471,10600,10599,10600,10471,10472,10470,10599,10598,10599,10470,10471,10469,10598,10597,10598,10469,10470,10468,10597,10596,10597,10468,10469,10467,10596,10595,10596,10467,10468,10466,10595,10594,10595,10466,10467,10465,10594,10593,10594,10465,10466,10464,10593,10592,10593,10464,10465,10463,10592,10591,10592,10463,10464,10462,10591,10590,10591,10462,10463,10461,10590,10589,10590,10461,10462,10460,10589,10588,10589,10460,10461,10459,10588,10587,10588,10459,10460,10458,10587,10586,10587,10458,10459,10457,10586,10585,10586,10457,10458,10456,10585,10584,10585,10456,10457,10455,10584,10583,10584,10455,10456,10454,10583,10582,10583,10454,10455,10453,10582,10581,10582,10453,10454,10452,10581,10580,10581,10452,10453,10451,10580,10579,10580,10451,10452,10450,10579,10578,10579,10450,10451,10449,10578,10577,10578,10449,10450,10448,10577,10576,10577,10448,10449,10447,10576,10575,10576,10447,10448,10446,10575,10574,10575,10446,10447,10445,10574,10573,10574,10445,10446,10444,10573,10572,10573,10444,10445,10443,10572,10571,10572,10443,10444,10442,10571,10570,10571,10442,10443,10441,10570,10569,10570,10441,10442,10440,10569,10568,10569,10440,10441,10439,10568,10567,10568,10439,10440,10438,10567,10566,10567,10438,10439,10437,10566,10565,10566,10437,10438,10436,10565,10564,10565,10436,10437,10435,10564,10563,10564,10435,10436,10434,10563,10562,10563,10434,10435,10433,10562,10561,10562,10433,10434,10432,10561,10560,10561,10432,10433,10431,10560,10559,10560,10431,10432,10430,10559,10558,10559,10430,10431,10429,10558,10557,10558,10429,10430,10428,10557,10556,10557,10428,10429,10427,10556,10555,10556,10427,10428,10426,10555,10554,10555,10426,10427,10425,10554,10553,10554,10425,10426,10424,10553,10552,10553,10424,10425,10423,10552,10551,10552,10423,10424,10422,10551,10550,10551,10422,10423,10421,10550,10549,10550,10421,10422,10420,10549,10548,10549,10420,10421,10419,10548,10547,10548,10419,10420,10418,10547,10546,10547,10418,10419,10417,10546,10545,10546,10417,10418,10416,10545,10544,10545,10416,10417,10415,10544,10543,10544,10415,10416,10414,10543,10542,10543,10414,10415,10413,10542,10541,10542,10413,10414,10412,10541,10540,10541,10412,10413,10411,10540,10539,10540,10411,10412,10410,10539,10538,10539,10410,10411,10409,10538,10537,10538,10409,10410,10408,10537,10536,10537,10408,10409,10407,10536,10535,10536,10407,10408,10406,10535,10534,10535,10406,10407,10405,10534,10533,10534,10405,10406,10404,10533,10532,10533,10404,10405,10403,10532,10531,10532,10403,10404,10402,10531,10530,10531,10402,10403,10401,10530,10529,10530,10401,10402,10400,10529,10528,10529,10400,10401,10399,10528,10527,10528,10399,10400,10398,10527,10526,10527,10398,10399,10397,10526,10525,10526,10397,10398,10396,10525,10524,10525,10396,10397,10395,10524,10523,10524,10395,10396,10394,10523,10522,10523,10394,10395,10393,10522,10521,10522,10393,10394,10392,10521,10520,10521,10392,10393,10391,10520,10519,10520,10391,10392,10390,10519,10518,10519,10390,10391,10389,10518,10517,10518,10389,10390,10388,10517,10516,10517,10388,10389,10387,10516,10515,10516,10387,10388,10386,10515,10514,10515,10386,10387,10385,10514,10513,10514,10385,10386,10384,10513,10512,10513,10384,10385,10383,10512,10511,10512,10383,10384,10382,10511,10510,10511,10382,10383,10381,10510,10509,10510,10381,10382,10380,10509,10508,10509,10380,10381,10379,10508,10507,10508,10379,10380,10378,10507,10506,10507,10378,10379,10377,10506,10505,10506,10377,10378,10376,10505,10504,10505,10376,10377,10375,10504,10503,10504,10375,10376,10374,10503,10502,10503,10374,10375,10373,10502,10501,10502,10373,10374,10372,10501,10500,10501,10372,10373,10371,10500,10499,10500,10371,10372,10370,10499,10498,10499,10370,10371,10369,10498,10497,10498,10369,10370,10368,10497,10496,10497,10368,10369,10622,10751,10750,10751,10622,10623,10621,10750,10749,10750,10621,10622,10620,10749,10748,10749,10620,10621,10619,10748,10747,10748,10619,10620,10618,10747,10746,10747,10618,10619,10617,10746,10745,10746,10617,10618,10616,10745,10744,10745,10616,10617,10615,10744,10743,10744,10615,10616,10614,10743,10742,10743,10614,10615,10613,10742,10741,10742,10613,10614,10612,10741,10740,10741,10612,10613,10611,10740,10739,10740,10611,10612,10610,10739,10738,10739,10610,10611,10609,10738,10737,10738,10609,10610,10608,10737,10736,10737,10608,10609,10607,10736,10735,10736,10607,10608,10606,10735,10734,10735,10606,10607,10605,10734,10733,10734,10605,10606,10604,10733,10732,10733,10604,10605,10603,10732,10731,10732,10603,10604,10602,10731,10730,10731,10602,10603,10601,10730,10729,10730,10601,10602,10600,10729,10728,10729,10600,10601,10599,10728,10727,10728,10599,10600,10598,10727,10726,10727,10598,10599,10597,10726,10725,10726,10597,10598,10596,10725,10724,10725,10596,10597,10595,10724,10723,10724,10595,10596,10594,10723,10722,10723,10594,10595,10593,10722,10721,10722,10593,10594,10592,10721,10720,10721,10592,10593,10591,10720,10719,10720,10591,10592,10590,10719,10718,10719,10590,10591,10589,10718,10717,10718,10589,10590,10588,10717,10716,10717,10588,10589,10587,10716,10715,10716,10587,10588,10586,10715,10714,10715,10586,10587,10585,10714,10713,10714,10585,10586,10584,10713,10712,10713,10584,10585,10583,10712,10711,10712,10583,10584,10582,10711,10710,10711,10582,10583,10581,10710,10709,10710,10581,10582,10580,10709,10708,10709,10580,10581,10579,10708,10707,10708,10579,10580,10578,10707,10706,10707,10578,10579,10577,10706,10705,10706,10577,10578,10576,10705,10704,10705,10576,10577,10575,10704,10703,10704,10575,10576,10574,10703,10702,10703,10574,10575,10573,10702,10701,10702,10573,10574,10572,10701,10700,10701,10572,10573,10571,10700,10699,10700,10571,10572,10570,10699,10698,10699,10570,10571,10569,10698,10697,10698,10569,10570,10568,10697,10696,10697,10568,10569,10567,10696,10695,10696,10567,10568,10566,10695,10694,10695,10566,10567,10565,10694,10693,10694,10565,10566,10564,10693,10692,10693,10564,10565,10563,10692,10691,10692,10563,10564,10562,10691,10690,10691,10562,10563,10561,10690,10689,10690,10561,10562,10560,10689,10688,10689,10560,10561,10559,10688,10687,10688,10559,10560,10558,10687,10686,10687,10558,10559,10557,10686,10685,10686,10557,10558,10556,10685,10684,10685,10556,10557,10555,10684,10683,10684,10555,10556,10554,10683,10682,10683,10554,10555,10553,10682,10681,10682,10553,10554,10552,10681,10680,10681,10552,10553,10551,10680,10679,10680,10551,10552,10550,10679,10678,10679,10550,10551,10549,10678,10677,10678,10549,10550,10548,10677,10676,10677,10548,10549,10547,10676,10675,10676,10547,10548,10546,10675,10674,10675,10546,10547,10545,10674,10673,10674,10545,10546,10544,10673,10672,10673,10544,10545,10543,10672,10671,10672,10543,10544,10542,10671,10670,10671,10542,10543,10541,10670,10669,10670,10541,10542,10540,10669,10668,10669,10540,10541,10539,10668,10667,10668,10539,10540,10538,10667,10666,10667,10538,10539,10537,10666,10665,10666,10537,10538,10536,10665,10664,10665,10536,10537,10535,10664,10663,10664,10535,10536,10534,10663,10662,10663,10534,10535,10533,10662,10661,10662,10533,10534,10532,10661,10660,10661,10532,10533,10531,10660,10659,10660,10531,10532,10530,10659,10658,10659,10530,10531,10529,10658,10657,10658,10529,10530,10528,10657,10656,10657,10528,10529,10527,10656,10655,10656,10527,10528,10526,10655,10654,10655,10526,10527,10525,10654,10653,10654,10525,10526,10524,10653,10652,10653,10524,10525,10523,10652,10651,10652,10523,10524,10522,10651,10650,10651,10522,10523,10521,10650,10649,10650,10521,10522,10520,10649,10648,10649,10520,10521,10519,10648,10647,10648,10519,10520,10518,10647,10646,10647,10518,10519,10517,10646,10645,10646,10517,10518,10516,10645,10644,10645,10516,10517,10515,10644,10643,10644,10515,10516,10514,10643,10642,10643,10514,10515,10513,10642,10641,10642,10513,10514,10512,10641,10640,10641,10512,10513,10511,10640,10639,10640,10511,10512,10510,10639,10638,10639,10510,10511,10509,10638,10637,10638,10509,10510,10508,10637,10636,10637,10508,10509,10507,10636,10635,10636,10507,10508,10506,10635,10634,10635,10506,10507,10505,10634,10633,10634,10505,10506,10504,10633,10632,10633,10504,10505,10503,10632,10631,10632,10503,10504,10502,10631,10630,10631,10502,10503,10501,10630,10629,10630,10501,10502,10500,10629,10628,10629,10500,10501,10499,10628,10627,10628,10499,10500,10498,10627,10626,10627,10498,10499,10497,10626,10625,10626,10497,10498,10496,10625,10624,10625,10496,10497,10750,10879,10878,10879,10750,10751,10749,10878,10877,10878,10749,10750,10748,10877,10876,10877,10748,10749,10747,10876,10875,10876,10747,10748,10746,10875,10874,10875,10746,10747,10745,10874,10873,10874,10745,10746,10744,10873,10872,10873,10744,10745,10743,10872,10871,10872,10743,10744,10742,10871,10870,10871,10742,10743,10741,10870,10869,10870,10741,10742,10740,10869,10868,10869,10740,10741,10739,10868,10867,10868,10739,10740,10738,10867,10866,10867,10738,10739,10737,10866,10865,10866,10737,10738,10736,10865,10864,10865,10736,10737,10735,10864,10863,10864,10735,10736,10734,10863,10862,10863,10734,10735,10733,10862,10861,10862,10733,10734,10732,10861,10860,10861,10732,10733,10731,10860,10859,10860,10731,10732,10730,10859,10858,10859,10730,10731,10729,10858,10857,10858,10729,10730,10728,10857,10856,10857,10728,10729,10727,10856,10855,10856,10727,10728,10726,10855,10854,10855,10726,10727,10725,10854,10853,10854,10725,10726,10724,10853,10852,10853,10724,10725,10723,10852,10851,10852,10723,10724,10722,10851,10850,10851,10722,10723,10721,10850,10849,10850,10721,10722,10720,10849,10848,10849,10720,10721,10719,10848,10847,10848,10719,10720,10718,10847,10846,10847,10718,10719,10717,10846,10845,10846,10717,10718,10716,10845,10844,10845,10716,10717,10715,10844,10843,10844,10715,10716,10714,10843,10842,10843,10714,10715,10713,10842,10841,10842,10713,10714,10712,10841,10840,10841,10712,10713,10711,10840,10839,10840,10711,10712,10710,10839,10838,10839,10710,10711,10709,10838,10837,10838,10709,10710,10708,10837,10836,10837,10708,10709,10707,10836,10835,10836,10707,10708,10706,10835,10834,10835,10706,10707,10705,10834,10833,10834,10705,10706,10704,10833,10832,10833,10704,10705,10703,10832,10831,10832,10703,10704,10702,10831,10830,10831,10702,10703,10701,10830,10829,10830,10701,10702,10700,10829,10828,10829,10700,10701,10699,10828,10827,10828,10699,10700,10698,10827,10826,10827,10698,10699,10697,10826,10825,10826,10697,10698,10696,10825,10824,10825,10696,10697,10695,10824,10823,10824,10695,10696,10694,10823,10822,10823,10694,10695,10693,10822,10821,10822,10693,10694,10692,10821,10820,10821,10692,10693,10691,10820,10819,10820,10691,10692,10690,10819,10818,10819,10690,10691,10689,10818,10817,10818,10689,10690,10688,10817,10816,10817,10688,10689,10687,10816,10815,10816,10687,10688,10686,10815,10814,10815,10686,10687,10685,10814,10813,10814,10685,10686,10684,10813,10812,10813,10684,10685,10683,10812,10811,10812,10683,10684,10682,10811,10810,10811,10682,10683,10681,10810,10809,10810,10681,10682,10680,10809,10808,10809,10680,10681,10679,10808,10807,10808,10679,10680,10678,10807,10806,10807,10678,10679,10677,10806,10805,10806,10677,10678,10676,10805,10804,10805,10676,10677,10675,10804,10803,10804,10675,10676,10674,10803,10802,10803,10674,10675,10673,10802,10801,10802,10673,10674,10672,10801,10800,10801,10672,10673,10671,10800,10799,10800,10671,10672,10670,10799,10798,10799,10670,10671,10669,10798,10797,10798,10669,10670,10668,10797,10796,10797,10668,10669,10667,10796,10795,10796,10667,10668,10666,10795,10794,10795,10666,10667,10665,10794,10793,10794,10665,10666,10664,10793,10792,10793,10664,10665,10663,10792,10791,10792,10663,10664,10662,10791,10790,10791,10662,10663,10661,10790,10789,10790,10661,10662,10660,10789,10788,10789,10660,10661,10659,10788,10787,10788,10659,10660,10658,10787,10786,10787,10658,10659,10657,10786,10785,10786,10657,10658,10656,10785,10784,10785,10656,10657,10655,10784,10783,10784,10655,10656,10654,10783,10782,10783,10654,10655,10653,10782,10781,10782,10653,10654,10652,10781,10780,10781,10652,10653,10651,10780,10779,10780,10651,10652,10650,10779,10778,10779,10650,10651,10649,10778,10777,10778,10649,10650,10648,10777,10776,10777,10648,10649,10647,10776,10775,10776,10647,10648,10646,10775,10774,10775,10646,10647,10645,10774,10773,10774,10645,10646,10644,10773,10772,10773,10644,10645,10643,10772,10771,10772,10643,10644,10642,10771,10770,10771,10642,10643,10641,10770,10769,10770,10641,10642,10640,10769,10768,10769,10640,10641,10639,10768,10767,10768,10639,10640,10638,10767,10766,10767,10638,10639,10637,10766,10765,10766,10637,10638,10636,10765,10764,10765,10636,10637,10635,10764,10763,10764,10635,10636,10634,10763,10762,10763,10634,10635,10633,10762,10761,10762,10633,10634,10632,10761,10760,10761,10632,10633,10631,10760,10759,10760,10631,10632,10630,10759,10758,10759,10630,10631,10629,10758,10757,10758,10629,10630,10628,10757,10756,10757,10628,10629,10627,10756,10755,10756,10627,10628,10626,10755,10754,10755,10626,10627,10625,10754,10753,10754,10625,10626,10624,10753,10752,10753,10624,10625,10878,11007,11006,11007,10878,10879,10877,11006,11005,11006,10877,10878,10876,11005,11004,11005,10876,10877,10875,11004,11003,11004,10875,10876,10874,11003,11002,11003,10874,10875,10873,11002,11001,11002,10873,10874,10872,11001,11000,11001,10872,10873,10871,11000,10999,11000,10871,10872,10870,10999,10998,10999,10870,10871,10869,10998,10997,10998,10869,10870,10868,10997,10996,10997,10868,10869,10867,10996,10995,10996,10867,10868,10866,10995,10994,10995,10866,10867,10865,10994,10993,10994,10865,10866,10864,10993,10992,10993,10864,10865,10863,10992,10991,10992,10863,10864,10862,10991,10990,10991,10862,10863,10861,10990,10989,10990,10861,10862,10860,10989,10988,10989,10860,10861,10859,10988,10987,10988,10859,10860,10858,10987,10986,10987,10858,10859,10857,10986,10985,10986,10857,10858,10856,10985,10984,10985,10856,10857,10855,10984,10983,10984,10855,10856,10854,10983,10982,10983,10854,10855,10853,10982,10981,10982,10853,10854,10852,10981,10980,10981,10852,10853,10851,10980,10979,10980,10851,10852,10850,10979,10978,10979,10850,10851,10849,10978,10977,10978,10849,10850,10848,10977,10976,10977,10848,10849,10847,10976,10975,10976,10847,10848,10846,10975,10974,10975,10846,10847,10845,10974,10973,10974,10845,10846,10844,10973,10972,10973,10844,10845,10843,10972,10971,10972,10843,10844,10842,10971,10970,10971,10842,10843,10841,10970,10969,10970,10841,10842,10840,10969,10968,10969,10840,10841,10839,10968,10967,10968,10839,10840,10838,10967,10966,10967,10838,10839,10837,10966,10965,10966,10837,10838,10836,10965,10964,10965,10836,10837,10835,10964,10963,10964,10835,10836,10834,10963,10962,10963,10834,10835,10833,10962,10961,10962,10833,10834,10832,10961,10960,10961,10832,10833,10831,10960,10959,10960,10831,10832,10830,10959,10958,10959,10830,10831,10829,10958,10957,10958,10829,10830,10828,10957,10956,10957,10828,10829,10827,10956,10955,10956,10827,10828,10826,10955,10954,10955,10826,10827,10825,10954,10953,10954,10825,10826,10824,10953,10952,10953,10824,10825,10823,10952,10951,10952,10823,10824,10822,10951,10950,10951,10822,10823,10821,10950,10949,10950,10821,10822,10820,10949,10948,10949,10820,10821,10819,10948,10947,10948,10819,10820,10818,10947,10946,10947,10818,10819,10817,10946,10945,10946,10817,10818,10816,10945,10944,10945,10816,10817,10815,10944,10943,10944,10815,10816,10814,10943,10942,10943,10814,10815,10813,10942,10941,10942,10813,10814,10812,10941,10940,10941,10812,10813,10811,10940,10939,10940,10811,10812,10810,10939,10938,10939,10810,10811,10809,10938,10937,10938,10809,10810,10808,10937,10936,10937,10808,10809,10807,10936,10935,10936,10807,10808,10806,10935,10934,10935,10806,10807,10805,10934,10933,10934,10805,10806,10804,10933,10932,10933,10804,10805,10803,10932,10931,10932,10803,10804,10802,10931,10930,10931,10802,10803,10801,10930,10929,10930,10801,10802,10800,10929,10928,10929,10800,10801,10799,10928,10927,10928,10799,10800,10798,10927,10926,10927,10798,10799,10797,10926,10925,10926,10797,10798,10796,10925,10924,10925,10796,10797,10795,10924,10923,10924,10795,10796,10794,10923,10922,10923,10794,10795,10793,10922,10921,10922,10793,10794,10792,10921,10920,10921,10792,10793,10791,10920,10919,10920,10791,10792,10790,10919,10918,10919,10790,10791,10789,10918,10917,10918,10789,10790,10788,10917,10916,10917,10788,10789,10787,10916,10915,10916,10787,10788,10786,10915,10914,10915,10786,10787,10785,10914,10913,10914,10785,10786,10784,10913,10912,10913,10784,10785,10783,10912,10911,10912,10783,10784,10782,10911,10910,10911,10782,10783,10781,10910,10909,10910,10781,10782,10780,10909,10908,10909,10780,10781,10779,10908,10907,10908,10779,10780,10778,10907,10906,10907,10778,10779,10777,10906,10905,10906,10777,10778,10776,10905,10904,10905,10776,10777,10775,10904,10903,10904,10775,10776,10774,10903,10902,10903,10774,10775,10773,10902,10901,10902,10773,10774,10772,10901,10900,10901,10772,10773,10771,10900,10899,10900,10771,10772,10770,10899,10898,10899,10770,10771,10769,10898,10897,10898,10769,10770,10768,10897,10896,10897,10768,10769,10767,10896,10895,10896,10767,10768,10766,10895,10894,10895,10766,10767,10765,10894,10893,10894,10765,10766,10764,10893,10892,10893,10764,10765,10763,10892,10891,10892,10763,10764,10762,10891,10890,10891,10762,10763,10761,10890,10889,10890,10761,10762,10760,10889,10888,10889,10760,10761,10759,10888,10887,10888,10759,10760,10758,10887,10886,10887,10758,10759,10757,10886,10885,10886,10757,10758,10756,10885,10884,10885,10756,10757,10755,10884,10883,10884,10755,10756,10754,10883,10882,10883,10754,10755,10753,10882,10881,10882,10753,10754,10752,10881,10880,10881,10752,10753,11006,11135,11134,11135,11006,11007,11005,11134,11133,11134,11005,11006,11004,11133,11132,11133,11004,11005,11003,11132,11131,11132,11003,11004,11002,11131,11130,11131,11002,11003,11001,11130,11129,11130,11001,11002,11000,11129,11128,11129,11000,11001,10999,11128,11127,11128,10999,11000,10998,11127,11126,11127,10998,10999,10997,11126,11125,11126,10997,10998,10996,11125,11124,11125,10996,10997,10995,11124,11123,11124,10995,10996,10994,11123,11122,11123,10994,10995,10993,11122,11121,11122,10993,10994,10992,11121,11120,11121,10992,10993,10991,11120,11119,11120,10991,10992,10990,11119,11118,11119,10990,10991,10989,11118,11117,11118,10989,10990,10988,11117,11116,11117,10988,10989,10987,11116,11115,11116,10987,10988,10986,11115,11114,11115,10986,10987,10985,11114,11113,11114,10985,10986,10984,11113,11112,11113,10984,10985,10983,11112,11111,11112,10983,10984,10982,11111,11110,11111,10982,10983,10981,11110,11109,11110,10981,10982,10980,11109,11108,11109,10980,10981,10979,11108,11107,11108,10979,10980,10978,11107,11106,11107,10978,10979,10977,11106,11105,11106,10977,10978,10976,11105,11104,11105,10976,10977,10975,11104,11103,11104,10975,10976,10974,11103,11102,11103,10974,10975,10973,11102,11101,11102,10973,10974,10972,11101,11100,11101,10972,10973,10971,11100,11099,11100,10971,10972,10970,11099,11098,11099,10970,10971,10969,11098,11097,11098,10969,10970,10968,11097,11096,11097,10968,10969,10967,11096,11095,11096,10967,10968,10966,11095,11094,11095,10966,10967,10965,11094,11093,11094,10965,10966,10964,11093,11092,11093,10964,10965,10963,11092,11091,11092,10963,10964,10962,11091,11090,11091,10962,10963,10961,11090,11089,11090,10961,10962,10960,11089,11088,11089,10960,10961,10959,11088,11087,11088,10959,10960,10958,11087,11086,11087,10958,10959,10957,11086,11085,11086,10957,10958,10956,11085,11084,11085,10956,10957,10955,11084,11083,11084,10955,10956,10954,11083,11082,11083,10954,10955,10953,11082,11081,11082,10953,10954,10952,11081,11080,11081,10952,10953,10951,11080,11079,11080,10951,10952,10950,11079,11078,11079,10950,10951,10949,11078,11077,11078,10949,10950,10948,11077,11076,11077,10948,10949,10947,11076,11075,11076,10947,10948,10946,11075,11074,11075,10946,10947,10945,11074,11073,11074,10945,10946,10944,11073,11072,11073,10944,10945,10943,11072,11071,11072,10943,10944,10942,11071,11070,11071,10942,10943,10941,11070,11069,11070,10941,10942,10940,11069,11068,11069,10940,10941,10939,11068,11067,11068,10939,10940,10938,11067,11066,11067,10938,10939,10937,11066,11065,11066,10937,10938,10936,11065,11064,11065,10936,10937,10935,11064,11063,11064,10935,10936,10934,11063,11062,11063,10934,10935,10933,11062,11061,11062,10933,10934,10932,11061,11060,11061,10932,10933,10931,11060,11059,11060,10931,10932,10930,11059,11058,11059,10930,10931,10929,11058,11057,11058,10929,10930,10928,11057,11056,11057,10928,10929,10927,11056,11055,11056,10927,10928,10926,11055,11054,11055,10926,10927,10925,11054,11053,11054,10925,10926,10924,11053,11052,11053,10924,10925,10923,11052,11051,11052,10923,10924,10922,11051,11050,11051,10922,10923,10921,11050,11049,11050,10921,10922,10920,11049,11048,11049,10920,10921,10919,11048,11047,11048,10919,10920,10918,11047,11046,11047,10918,10919,10917,11046,11045,11046,10917,10918,10916,11045,11044,11045,10916,10917,10915,11044,11043,11044,10915,10916,10914,11043,11042,11043,10914,10915,10913,11042,11041,11042,10913,10914,10912,11041,11040,11041,10912,10913,10911,11040,11039,11040,10911,10912,10910,11039,11038,11039,10910,10911,10909,11038,11037,11038,10909,10910,10908,11037,11036,11037,10908,10909,10907,11036,11035,11036,10907,10908,10906,11035,11034,11035,10906,10907,10905,11034,11033,11034,10905,10906,10904,11033,11032,11033,10904,10905,10903,11032,11031,11032,10903,10904,10902,11031,11030,11031,10902,10903,10901,11030,11029,11030,10901,10902,10900,11029,11028,11029,10900,10901,10899,11028,11027,11028,10899,10900,10898,11027,11026,11027,10898,10899,10897,11026,11025,11026,10897,10898,10896,11025,11024,11025,10896,10897,10895,11024,11023,11024,10895,10896,10894,11023,11022,11023,10894,10895,10893,11022,11021,11022,10893,10894,10892,11021,11020,11021,10892,10893,10891,11020,11019,11020,10891,10892,10890,11019,11018,11019,10890,10891,10889,11018,11017,11018,10889,10890,10888,11017,11016,11017,10888,10889,10887,11016,11015,11016,10887,10888,10886,11015,11014,11015,10886,10887,10885,11014,11013,11014,10885,10886,10884,11013,11012,11013,10884,10885,10883,11012,11011,11012,10883,10884,10882,11011,11010,11011,10882,10883,10881,11010,11009,11010,10881,10882,10880,11009,11008,11009,10880,10881,11134,11263,11262,11263,11134,11135,11133,11262,11261,11262,11133,11134,11132,11261,11260,11261,11132,11133,11131,11260,11259,11260,11131,11132,11130,11259,11258,11259,11130,11131,11129,11258,11257,11258,11129,11130,11128,11257,11256,11257,11128,11129,11127,11256,11255,11256,11127,11128,11126,11255,11254,11255,11126,11127,11125,11254,11253,11254,11125,11126,11124,11253,11252,11253,11124,11125,11123,11252,11251,11252,11123,11124,11122,11251,11250,11251,11122,11123,11121,11250,11249,11250,11121,11122,11120,11249,11248,11249,11120,11121,11119,11248,11247,11248,11119,11120,11118,11247,11246,11247,11118,11119,11117,11246,11245,11246,11117,11118,11116,11245,11244,11245,11116,11117,11115,11244,11243,11244,11115,11116,11114,11243,11242,11243,11114,11115,11113,11242,11241,11242,11113,11114,11112,11241,11240,11241,11112,11113,11111,11240,11239,11240,11111,11112,11110,11239,11238,11239,11110,11111,11109,11238,11237,11238,11109,11110,11108,11237,11236,11237,11108,11109,11107,11236,11235,11236,11107,11108,11106,11235,11234,11235,11106,11107,11105,11234,11233,11234,11105,11106,11104,11233,11232,11233,11104,11105,11103,11232,11231,11232,11103,11104,11102,11231,11230,11231,11102,11103,11101,11230,11229,11230,11101,11102,11100,11229,11228,11229,11100,11101,11099,11228,11227,11228,11099,11100,11098,11227,11226,11227,11098,11099,11097,11226,11225,11226,11097,11098,11096,11225,11224,11225,11096,11097,11095,11224,11223,11224,11095,11096,11094,11223,11222,11223,11094,11095,11093,11222,11221,11222,11093,11094,11092,11221,11220,11221,11092,11093,11091,11220,11219,11220,11091,11092,11090,11219,11218,11219,11090,11091,11089,11218,11217,11218,11089,11090,11088,11217,11216,11217,11088,11089,11087,11216,11215,11216,11087,11088,11086,11215,11214,11215,11086,11087,11085,11214,11213,11214,11085,11086,11084,11213,11212,11213,11084,11085,11083,11212,11211,11212,11083,11084,11082,11211,11210,11211,11082,11083,11081,11210,11209,11210,11081,11082,11080,11209,11208,11209,11080,11081,11079,11208,11207,11208,11079,11080,11078,11207,11206,11207,11078,11079,11077,11206,11205,11206,11077,11078,11076,11205,11204,11205,11076,11077,11075,11204,11203,11204,11075,11076,11074,11203,11202,11203,11074,11075,11073,11202,11201,11202,11073,11074,11072,11201,11200,11201,11072,11073,11071,11200,11199,11200,11071,11072,11070,11199,11198,11199,11070,11071,11069,11198,11197,11198,11069,11070,11068,11197,11196,11197,11068,11069,11067,11196,11195,11196,11067,11068,11066,11195,11194,11195,11066,11067,11065,11194,11193,11194,11065,11066,11064,11193,11192,11193,11064,11065,11063,11192,11191,11192,11063,11064,11062,11191,11190,11191,11062,11063,11061,11190,11189,11190,11061,11062,11060,11189,11188,11189,11060,11061,11059,11188,11187,11188,11059,11060,11058,11187,11186,11187,11058,11059,11057,11186,11185,11186,11057,11058,11056,11185,11184,11185,11056,11057,11055,11184,11183,11184,11055,11056,11054,11183,11182,11183,11054,11055,11053,11182,11181,11182,11053,11054,11052,11181,11180,11181,11052,11053,11051,11180,11179,11180,11051,11052,11050,11179,11178,11179,11050,11051,11049,11178,11177,11178,11049,11050,11048,11177,11176,11177,11048,11049,11047,11176,11175,11176,11047,11048,11046,11175,11174,11175,11046,11047,11045,11174,11173,11174,11045,11046,11044,11173,11172,11173,11044,11045,11043,11172,11171,11172,11043,11044,11042,11171,11170,11171,11042,11043,11041,11170,11169,11170,11041,11042,11040,11169,11168,11169,11040,11041,11039,11168,11167,11168,11039,11040,11038,11167,11166,11167,11038,11039,11037,11166,11165,11166,11037,11038,11036,11165,11164,11165,11036,11037,11035,11164,11163,11164,11035,11036,11034,11163,11162,11163,11034,11035,11033,11162,11161,11162,11033,11034,11032,11161,11160,11161,11032,11033,11031,11160,11159,11160,11031,11032,11030,11159,11158,11159,11030,11031,11029,11158,11157,11158,11029,11030,11028,11157,11156,11157,11028,11029,11027,11156,11155,11156,11027,11028,11026,11155,11154,11155,11026,11027,11025,11154,11153,11154,11025,11026,11024,11153,11152,11153,11024,11025,11023,11152,11151,11152,11023,11024,11022,11151,11150,11151,11022,11023,11021,11150,11149,11150,11021,11022,11020,11149,11148,11149,11020,11021,11019,11148,11147,11148,11019,11020,11018,11147,11146,11147,11018,11019,11017,11146,11145,11146,11017,11018,11016,11145,11144,11145,11016,11017,11015,11144,11143,11144,11015,11016,11014,11143,11142,11143,11014,11015,11013,11142,11141,11142,11013,11014,11012,11141,11140,11141,11012,11013,11011,11140,11139,11140,11011,11012,11010,11139,11138,11139,11010,11011,11009,11138,11137,11138,11009,11010,11008,11137,11136,11137,11008,11009,11262,11391,11390,11391,11262,11263,11261,11390,11389,11390,11261,11262,11260,11389,11388,11389,11260,11261,11259,11388,11387,11388,11259,11260,11258,11387,11386,11387,11258,11259,11257,11386,11385,11386,11257,11258,11256,11385,11384,11385,11256,11257,11255,11384,11383,11384,11255,11256,11254,11383,11382,11383,11254,11255,11253,11382,11381,11382,11253,11254,11252,11381,11380,11381,11252,11253,11251,11380,11379,11380,11251,11252,11250,11379,11378,11379,11250,11251,11249,11378,11377,11378,11249,11250,11248,11377,11376,11377,11248,11249,11247,11376,11375,11376,11247,11248,11246,11375,11374,11375,11246,11247,11245,11374,11373,11374,11245,11246,11244,11373,11372,11373,11244,11245,11243,11372,11371,11372,11243,11244,11242,11371,11370,11371,11242,11243,11241,11370,11369,11370,11241,11242,11240,11369,11368,11369,11240,11241,11239,11368,11367,11368,11239,11240,11238,11367,11366,11367,11238,11239,11237,11366,11365,11366,11237,11238,11236,11365,11364,11365,11236,11237,11235,11364,11363,11364,11235,11236,11234,11363,11362,11363,11234,11235,11233,11362,11361,11362,11233,11234,11232,11361,11360,11361,11232,11233,11231,11360,11359,11360,11231,11232,11230,11359,11358,11359,11230,11231,11229,11358,11357,11358,11229,11230,11228,11357,11356,11357,11228,11229,11227,11356,11355,11356,11227,11228,11226,11355,11354,11355,11226,11227,11225,11354,11353,11354,11225,11226,11224,11353,11352,11353,11224,11225,11223,11352,11351,11352,11223,11224,11222,11351,11350,11351,11222,11223,11221,11350,11349,11350,11221,11222,11220,11349,11348,11349,11220,11221,11219,11348,11347,11348,11219,11220,11218,11347,11346,11347,11218,11219,11217,11346,11345,11346,11217,11218,11216,11345,11344,11345,11216,11217,11215,11344,11343,11344,11215,11216,11214,11343,11342,11343,11214,11215,11213,11342,11341,11342,11213,11214,11212,11341,11340,11341,11212,11213,11211,11340,11339,11340,11211,11212,11210,11339,11338,11339,11210,11211,11209,11338,11337,11338,11209,11210,11208,11337,11336,11337,11208,11209,11207,11336,11335,11336,11207,11208,11206,11335,11334,11335,11206,11207,11205,11334,11333,11334,11205,11206,11204,11333,11332,11333,11204,11205,11203,11332,11331,11332,11203,11204,11202,11331,11330,11331,11202,11203,11201,11330,11329,11330,11201,11202,11200,11329,11328,11329,11200,11201,11199,11328,11327,11328,11199,11200,11198,11327,11326,11327,11198,11199,11197,11326,11325,11326,11197,11198,11196,11325,11324,11325,11196,11197,11195,11324,11323,11324,11195,11196,11194,11323,11322,11323,11194,11195,11193,11322,11321,11322,11193,11194,11192,11321,11320,11321,11192,11193,11191,11320,11319,11320,11191,11192,11190,11319,11318,11319,11190,11191,11189,11318,11317,11318,11189,11190,11188,11317,11316,11317,11188,11189,11187,11316,11315,11316,11187,11188,11186,11315,11314,11315,11186,11187,11185,11314,11313,11314,11185,11186,11184,11313,11312,11313,11184,11185,11183,11312,11311,11312,11183,11184,11182,11311,11310,11311,11182,11183,11181,11310,11309,11310,11181,11182,11180,11309,11308,11309,11180,11181,11179,11308,11307,11308,11179,11180,11178,11307,11306,11307,11178,11179,11177,11306,11305,11306,11177,11178,11176,11305,11304,11305,11176,11177,11175,11304,11303,11304,11175,11176,11174,11303,11302,11303,11174,11175,11173,11302,11301,11302,11173,11174,11172,11301,11300,11301,11172,11173,11171,11300,11299,11300,11171,11172,11170,11299,11298,11299,11170,11171,11169,11298,11297,11298,11169,11170,11168,11297,11296,11297,11168,11169,11167,11296,11295,11296,11167,11168,11166,11295,11294,11295,11166,11167,11165,11294,11293,11294,11165,11166,11164,11293,11292,11293,11164,11165,11163,11292,11291,11292,11163,11164,11162,11291,11290,11291,11162,11163,11161,11290,11289,11290,11161,11162,11160,11289,11288,11289,11160,11161,11159,11288,11287,11288,11159,11160,11158,11287,11286,11287,11158,11159,11157,11286,11285,11286,11157,11158,11156,11285,11284,11285,11156,11157,11155,11284,11283,11284,11155,11156,11154,11283,11282,11283,11154,11155,11153,11282,11281,11282,11153,11154,11152,11281,11280,11281,11152,11153,11151,11280,11279,11280,11151,11152,11150,11279,11278,11279,11150,11151,11149,11278,11277,11278,11149,11150,11148,11277,11276,11277,11148,11149,11147,11276,11275,11276,11147,11148,11146,11275,11274,11275,11146,11147,11145,11274,11273,11274,11145,11146,11144,11273,11272,11273,11144,11145,11143,11272,11271,11272,11143,11144,11142,11271,11270,11271,11142,11143,11141,11270,11269,11270,11141,11142,11140,11269,11268,11269,11140,11141,11139,11268,11267,11268,11139,11140,11138,11267,11266,11267,11138,11139,11137,11266,11265,11266,11137,11138,11136,11265,11264,11265,11136,11137,11390,11519,11518,11519,11390,11391,11389,11518,11517,11518,11389,11390,11388,11517,11516,11517,11388,11389,11387,11516,11515,11516,11387,11388,11386,11515,11514,11515,11386,11387,11385,11514,11513,11514,11385,11386,11384,11513,11512,11513,11384,11385,11383,11512,11511,11512,11383,11384,11382,11511,11510,11511,11382,11383,11381,11510,11509,11510,11381,11382,11380,11509,11508,11509,11380,11381,11379,11508,11507,11508,11379,11380,11378,11507,11506,11507,11378,11379,11377,11506,11505,11506,11377,11378,11376,11505,11504,11505,11376,11377,11375,11504,11503,11504,11375,11376,11374,11503,11502,11503,11374,11375,11373,11502,11501,11502,11373,11374,11372,11501,11500,11501,11372,11373,11371,11500,11499,11500,11371,11372,11370,11499,11498,11499,11370,11371,11369,11498,11497,11498,11369,11370,11368,11497,11496,11497,11368,11369,11367,11496,11495,11496,11367,11368,11366,11495,11494,11495,11366,11367,11365,11494,11493,11494,11365,11366,11364,11493,11492,11493,11364,11365,11363,11492,11491,11492,11363,11364,11362,11491,11490,11491,11362,11363,11361,11490,11489,11490,11361,11362,11360,11489,11488,11489,11360,11361,11359,11488,11487,11488,11359,11360,11358,11487,11486,11487,11358,11359,11357,11486,11485,11486,11357,11358,11356,11485,11484,11485,11356,11357,11355,11484,11483,11484,11355,11356,11354,11483,11482,11483,11354,11355,11353,11482,11481,11482,11353,11354,11352,11481,11480,11481,11352,11353,11351,11480,11479,11480,11351,11352,11350,11479,11478,11479,11350,11351,11349,11478,11477,11478,11349,11350,11348,11477,11476,11477,11348,11349,11347,11476,11475,11476,11347,11348,11346,11475,11474,11475,11346,11347,11345,11474,11473,11474,11345,11346,11344,11473,11472,11473,11344,11345,11343,11472,11471,11472,11343,11344,11342,11471,11470,11471,11342,11343,11341,11470,11469,11470,11341,11342,11340,11469,11468,11469,11340,11341,11339,11468,11467,11468,11339,11340,11338,11467,11466,11467,11338,11339,11337,11466,11465,11466,11337,11338,11336,11465,11464,11465,11336,11337,11335,11464,11463,11464,11335,11336,11334,11463,11462,11463,11334,11335,11333,11462,11461,11462,11333,11334,11332,11461,11460,11461,11332,11333,11331,11460,11459,11460,11331,11332,11330,11459,11458,11459,11330,11331,11329,11458,11457,11458,11329,11330,11328,11457,11456,11457,11328,11329,11327,11456,11455,11456,11327,11328,11326,11455,11454,11455,11326,11327,11325,11454,11453,11454,11325,11326,11324,11453,11452,11453,11324,11325,11323,11452,11451,11452,11323,11324,11322,11451,11450,11451,11322,11323,11321,11450,11449,11450,11321,11322,11320,11449,11448,11449,11320,11321,11319,11448,11447,11448,11319,11320,11318,11447,11446,11447,11318,11319,11317,11446,11445,11446,11317,11318,11316,11445,11444,11445,11316,11317,11315,11444,11443,11444,11315,11316,11314,11443,11442,11443,11314,11315,11313,11442,11441,11442,11313,11314,11312,11441,11440,11441,11312,11313,11311,11440,11439,11440,11311,11312,11310,11439,11438,11439,11310,11311,11309,11438,11437,11438,11309,11310,11308,11437,11436,11437,11308,11309,11307,11436,11435,11436,11307,11308,11306,11435,11434,11435,11306,11307,11305,11434,11433,11434,11305,11306,11304,11433,11432,11433,11304,11305,11303,11432,11431,11432,11303,11304,11302,11431,11430,11431,11302,11303,11301,11430,11429,11430,11301,11302,11300,11429,11428,11429,11300,11301,11299,11428,11427,11428,11299,11300,11298,11427,11426,11427,11298,11299,11297,11426,11425,11426,11297,11298,11296,11425,11424,11425,11296,11297,11295,11424,11423,11424,11295,11296,11294,11423,11422,11423,11294,11295,11293,11422,11421,11422,11293,11294,11292,11421,11420,11421,11292,11293,11291,11420,11419,11420,11291,11292,11290,11419,11418,11419,11290,11291,11289,11418,11417,11418,11289,11290,11288,11417,11416,11417,11288,11289,11287,11416,11415,11416,11287,11288,11286,11415,11414,11415,11286,11287,11285,11414,11413,11414,11285,11286,11284,11413,11412,11413,11284,11285,11283,11412,11411,11412,11283,11284,11282,11411,11410,11411,11282,11283,11281,11410,11409,11410,11281,11282,11280,11409,11408,11409,11280,11281,11279,11408,11407,11408,11279,11280,11278,11407,11406,11407,11278,11279,11277,11406,11405,11406,11277,11278,11276,11405,11404,11405,11276,11277,11275,11404,11403,11404,11275,11276,11274,11403,11402,11403,11274,11275,11273,11402,11401,11402,11273,11274,11272,11401,11400,11401,11272,11273,11271,11400,11399,11400,11271,11272,11270,11399,11398,11399,11270,11271,11269,11398,11397,11398,11269,11270,11268,11397,11396,11397,11268,11269,11267,11396,11395,11396,11267,11268,11266,11395,11394,11395,11266,11267,11265,11394,11393,11394,11265,11266,11264,11393,11392,11393,11264,11265,11518,11647,11646,11647,11518,11519,11517,11646,11645,11646,11517,11518,11516,11645,11644,11645,11516,11517,11515,11644,11643,11644,11515,11516,11514,11643,11642,11643,11514,11515,11513,11642,11641,11642,11513,11514,11512,11641,11640,11641,11512,11513,11511,11640,11639,11640,11511,11512,11510,11639,11638,11639,11510,11511,11509,11638,11637,11638,11509,11510,11508,11637,11636,11637,11508,11509,11507,11636,11635,11636,11507,11508,11506,11635,11634,11635,11506,11507,11505,11634,11633,11634,11505,11506,11504,11633,11632,11633,11504,11505,11503,11632,11631,11632,11503,11504,11502,11631,11630,11631,11502,11503,11501,11630,11629,11630,11501,11502,11500,11629,11628,11629,11500,11501,11499,11628,11627,11628,11499,11500,11498,11627,11626,11627,11498,11499,11497,11626,11625,11626,11497,11498,11496,11625,11624,11625,11496,11497,11495,11624,11623,11624,11495,11496,11494,11623,11622,11623,11494,11495,11493,11622,11621,11622,11493,11494,11492,11621,11620,11621,11492,11493,11491,11620,11619,11620,11491,11492,11490,11619,11618,11619,11490,11491,11489,11618,11617,11618,11489,11490,11488,11617,11616,11617,11488,11489,11487,11616,11615,11616,11487,11488,11486,11615,11614,11615,11486,11487,11485,11614,11613,11614,11485,11486,11484,11613,11612,11613,11484,11485,11483,11612,11611,11612,11483,11484,11482,11611,11610,11611,11482,11483,11481,11610,11609,11610,11481,11482,11480,11609,11608,11609,11480,11481,11479,11608,11607,11608,11479,11480,11478,11607,11606,11607,11478,11479,11477,11606,11605,11606,11477,11478,11476,11605,11604,11605,11476,11477,11475,11604,11603,11604,11475,11476,11474,11603,11602,11603,11474,11475,11473,11602,11601,11602,11473,11474,11472,11601,11600,11601,11472,11473,11471,11600,11599,11600,11471,11472,11470,11599,11598,11599,11470,11471,11469,11598,11597,11598,11469,11470,11468,11597,11596,11597,11468,11469,11467,11596,11595,11596,11467,11468,11466,11595,11594,11595,11466,11467,11465,11594,11593,11594,11465,11466,11464,11593,11592,11593,11464,11465,11463,11592,11591,11592,11463,11464,11462,11591,11590,11591,11462,11463,11461,11590,11589,11590,11461,11462,11460,11589,11588,11589,11460,11461,11459,11588,11587,11588,11459,11460,11458,11587,11586,11587,11458,11459,11457,11586,11585,11586,11457,11458,11456,11585,11584,11585,11456,11457,11455,11584,11583,11584,11455,11456,11454,11583,11582,11583,11454,11455,11453,11582,11581,11582,11453,11454,11452,11581,11580,11581,11452,11453,11451,11580,11579,11580,11451,11452,11450,11579,11578,11579,11450,11451,11449,11578,11577,11578,11449,11450,11448,11577,11576,11577,11448,11449,11447,11576,11575,11576,11447,11448,11446,11575,11574,11575,11446,11447,11445,11574,11573,11574,11445,11446,11444,11573,11572,11573,11444,11445,11443,11572,11571,11572,11443,11444,11442,11571,11570,11571,11442,11443,11441,11570,11569,11570,11441,11442,11440,11569,11568,11569,11440,11441,11439,11568,11567,11568,11439,11440,11438,11567,11566,11567,11438,11439,11437,11566,11565,11566,11437,11438,11436,11565,11564,11565,11436,11437,11435,11564,11563,11564,11435,11436,11434,11563,11562,11563,11434,11435,11433,11562,11561,11562,11433,11434,11432,11561,11560,11561,11432,11433,11431,11560,11559,11560,11431,11432,11430,11559,11558,11559,11430,11431,11429,11558,11557,11558,11429,11430,11428,11557,11556,11557,11428,11429,11427,11556,11555,11556,11427,11428,11426,11555,11554,11555,11426,11427,11425,11554,11553,11554,11425,11426,11424,11553,11552,11553,11424,11425,11423,11552,11551,11552,11423,11424,11422,11551,11550,11551,11422,11423,11421,11550,11549,11550,11421,11422,11420,11549,11548,11549,11420,11421,11419,11548,11547,11548,11419,11420,11418,11547,11546,11547,11418,11419,11417,11546,11545,11546,11417,11418,11416,11545,11544,11545,11416,11417,11415,11544,11543,11544,11415,11416,11414,11543,11542,11543,11414,11415,11413,11542,11541,11542,11413,11414,11412,11541,11540,11541,11412,11413,11411,11540,11539,11540,11411,11412,11410,11539,11538,11539,11410,11411,11409,11538,11537,11538,11409,11410,11408,11537,11536,11537,11408,11409,11407,11536,11535,11536,11407,11408,11406,11535,11534,11535,11406,11407,11405,11534,11533,11534,11405,11406,11404,11533,11532,11533,11404,11405,11403,11532,11531,11532,11403,11404,11402,11531,11530,11531,11402,11403,11401,11530,11529,11530,11401,11402,11400,11529,11528,11529,11400,11401,11399,11528,11527,11528,11399,11400,11398,11527,11526,11527,11398,11399,11397,11526,11525,11526,11397,11398,11396,11525,11524,11525,11396,11397,11395,11524,11523,11524,11395,11396,11394,11523,11522,11523,11394,11395,11393,11522,11521,11522,11393,11394,11392,11521,11520,11521,11392,11393,11646,11775,11774,11775,11646,11647,11645,11774,11773,11774,11645,11646,11644,11773,11772,11773,11644,11645,11643,11772,11771,11772,11643,11644,11642,11771,11770,11771,11642,11643,11641,11770,11769,11770,11641,11642,11640,11769,11768,11769,11640,11641,11639,11768,11767,11768,11639,11640,11638,11767,11766,11767,11638,11639,11637,11766,11765,11766,11637,11638,11636,11765,11764,11765,11636,11637,11635,11764,11763,11764,11635,11636,11634,11763,11762,11763,11634,11635,11633,11762,11761,11762,11633,11634,11632,11761,11760,11761,11632,11633,11631,11760,11759,11760,11631,11632,11630,11759,11758,11759,11630,11631,11629,11758,11757,11758,11629,11630,11628,11757,11756,11757,11628,11629,11627,11756,11755,11756,11627,11628,11626,11755,11754,11755,11626,11627,11625,11754,11753,11754,11625,11626,11624,11753,11752,11753,11624,11625,11623,11752,11751,11752,11623,11624,11622,11751,11750,11751,11622,11623,11621,11750,11749,11750,11621,11622,11620,11749,11748,11749,11620,11621,11619,11748,11747,11748,11619,11620,11618,11747,11746,11747,11618,11619,11617,11746,11745,11746,11617,11618,11616,11745,11744,11745,11616,11617,11615,11744,11743,11744,11615,11616,11614,11743,11742,11743,11614,11615,11613,11742,11741,11742,11613,11614,11612,11741,11740,11741,11612,11613,11611,11740,11739,11740,11611,11612,11610,11739,11738,11739,11610,11611,11609,11738,11737,11738,11609,11610,11608,11737,11736,11737,11608,11609,11607,11736,11735,11736,11607,11608,11606,11735,11734,11735,11606,11607,11605,11734,11733,11734,11605,11606,11604,11733,11732,11733,11604,11605,11603,11732,11731,11732,11603,11604,11602,11731,11730,11731,11602,11603,11601,11730,11729,11730,11601,11602,11600,11729,11728,11729,11600,11601,11599,11728,11727,11728,11599,11600,11598,11727,11726,11727,11598,11599,11597,11726,11725,11726,11597,11598,11596,11725,11724,11725,11596,11597,11595,11724,11723,11724,11595,11596,11594,11723,11722,11723,11594,11595,11593,11722,11721,11722,11593,11594,11592,11721,11720,11721,11592,11593,11591,11720,11719,11720,11591,11592,11590,11719,11718,11719,11590,11591,11589,11718,11717,11718,11589,11590,11588,11717,11716,11717,11588,11589,11587,11716,11715,11716,11587,11588,11586,11715,11714,11715,11586,11587,11585,11714,11713,11714,11585,11586,11584,11713,11712,11713,11584,11585,11583,11712,11711,11712,11583,11584,11582,11711,11710,11711,11582,11583,11581,11710,11709,11710,11581,11582,11580,11709,11708,11709,11580,11581,11579,11708,11707,11708,11579,11580,11578,11707,11706,11707,11578,11579,11577,11706,11705,11706,11577,11578,11576,11705,11704,11705,11576,11577,11575,11704,11703,11704,11575,11576,11574,11703,11702,11703,11574,11575,11573,11702,11701,11702,11573,11574,11572,11701,11700,11701,11572,11573,11571,11700,11699,11700,11571,11572,11570,11699,11698,11699,11570,11571,11569,11698,11697,11698,11569,11570,11568,11697,11696,11697,11568,11569,11567,11696,11695,11696,11567,11568,11566,11695,11694,11695,11566,11567,11565,11694,11693,11694,11565,11566,11564,11693,11692,11693,11564,11565,11563,11692,11691,11692,11563,11564,11562,11691,11690,11691,11562,11563,11561,11690,11689,11690,11561,11562,11560,11689,11688,11689,11560,11561,11559,11688,11687,11688,11559,11560,11558,11687,11686,11687,11558,11559,11557,11686,11685,11686,11557,11558,11556,11685,11684,11685,11556,11557,11555,11684,11683,11684,11555,11556,11554,11683,11682,11683,11554,11555,11553,11682,11681,11682,11553,11554,11552,11681,11680,11681,11552,11553,11551,11680,11679,11680,11551,11552,11550,11679,11678,11679,11550,11551,11549,11678,11677,11678,11549,11550,11548,11677,11676,11677,11548,11549,11547,11676,11675,11676,11547,11548,11546,11675,11674,11675,11546,11547,11545,11674,11673,11674,11545,11546,11544,11673,11672,11673,11544,11545,11543,11672,11671,11672,11543,11544,11542,11671,11670,11671,11542,11543,11541,11670,11669,11670,11541,11542,11540,11669,11668,11669,11540,11541,11539,11668,11667,11668,11539,11540,11538,11667,11666,11667,11538,11539,11537,11666,11665,11666,11537,11538,11536,11665,11664,11665,11536,11537,11535,11664,11663,11664,11535,11536,11534,11663,11662,11663,11534,11535,11533,11662,11661,11662,11533,11534,11532,11661,11660,11661,11532,11533,11531,11660,11659,11660,11531,11532,11530,11659,11658,11659,11530,11531,11529,11658,11657,11658,11529,11530,11528,11657,11656,11657,11528,11529,11527,11656,11655,11656,11527,11528,11526,11655,11654,11655,11526,11527,11525,11654,11653,11654,11525,11526,11524,11653,11652,11653,11524,11525,11523,11652,11651,11652,11523,11524,11522,11651,11650,11651,11522,11523,11521,11650,11649,11650,11521,11522,11520,11649,11648,11649,11520,11521,11774,11903,11902,11903,11774,11775,11773,11902,11901,11902,11773,11774,11772,11901,11900,11901,11772,11773,11771,11900,11899,11900,11771,11772,11770,11899,11898,11899,11770,11771,11769,11898,11897,11898,11769,11770,11768,11897,11896,11897,11768,11769,11767,11896,11895,11896,11767,11768,11766,11895,11894,11895,11766,11767,11765,11894,11893,11894,11765,11766,11764,11893,11892,11893,11764,11765,11763,11892,11891,11892,11763,11764,11762,11891,11890,11891,11762,11763,11761,11890,11889,11890,11761,11762,11760,11889,11888,11889,11760,11761,11759,11888,11887,11888,11759,11760,11758,11887,11886,11887,11758,11759,11757,11886,11885,11886,11757,11758,11756,11885,11884,11885,11756,11757,11755,11884,11883,11884,11755,11756,11754,11883,11882,11883,11754,11755,11753,11882,11881,11882,11753,11754,11752,11881,11880,11881,11752,11753,11751,11880,11879,11880,11751,11752,11750,11879,11878,11879,11750,11751,11749,11878,11877,11878,11749,11750,11748,11877,11876,11877,11748,11749,11747,11876,11875,11876,11747,11748,11746,11875,11874,11875,11746,11747,11745,11874,11873,11874,11745,11746,11744,11873,11872,11873,11744,11745,11743,11872,11871,11872,11743,11744,11742,11871,11870,11871,11742,11743,11741,11870,11869,11870,11741,11742,11740,11869,11868,11869,11740,11741,11739,11868,11867,11868,11739,11740,11738,11867,11866,11867,11738,11739,11737,11866,11865,11866,11737,11738,11736,11865,11864,11865,11736,11737,11735,11864,11863,11864,11735,11736,11734,11863,11862,11863,11734,11735,11733,11862,11861,11862,11733,11734,11732,11861,11860,11861,11732,11733,11731,11860,11859,11860,11731,11732,11730,11859,11858,11859,11730,11731,11729,11858,11857,11858,11729,11730,11728,11857,11856,11857,11728,11729,11727,11856,11855,11856,11727,11728,11726,11855,11854,11855,11726,11727,11725,11854,11853,11854,11725,11726,11724,11853,11852,11853,11724,11725,11723,11852,11851,11852,11723,11724,11722,11851,11850,11851,11722,11723,11721,11850,11849,11850,11721,11722,11720,11849,11848,11849,11720,11721,11719,11848,11847,11848,11719,11720,11718,11847,11846,11847,11718,11719,11717,11846,11845,11846,11717,11718,11716,11845,11844,11845,11716,11717,11715,11844,11843,11844,11715,11716,11714,11843,11842,11843,11714,11715,11713,11842,11841,11842,11713,11714,11712,11841,11840,11841,11712,11713,11711,11840,11839,11840,11711,11712,11710,11839,11838,11839,11710,11711,11709,11838,11837,11838,11709,11710,11708,11837,11836,11837,11708,11709,11707,11836,11835,11836,11707,11708,11706,11835,11834,11835,11706,11707,11705,11834,11833,11834,11705,11706,11704,11833,11832,11833,11704,11705,11703,11832,11831,11832,11703,11704,11702,11831,11830,11831,11702,11703,11701,11830,11829,11830,11701,11702,11700,11829,11828,11829,11700,11701,11699,11828,11827,11828,11699,11700,11698,11827,11826,11827,11698,11699,11697,11826,11825,11826,11697,11698,11696,11825,11824,11825,11696,11697,11695,11824,11823,11824,11695,11696,11694,11823,11822,11823,11694,11695,11693,11822,11821,11822,11693,11694,11692,11821,11820,11821,11692,11693,11691,11820,11819,11820,11691,11692,11690,11819,11818,11819,11690,11691,11689,11818,11817,11818,11689,11690,11688,11817,11816,11817,11688,11689,11687,11816,11815,11816,11687,11688,11686,11815,11814,11815,11686,11687,11685,11814,11813,11814,11685,11686,11684,11813,11812,11813,11684,11685,11683,11812,11811,11812,11683,11684,11682,11811,11810,11811,11682,11683,11681,11810,11809,11810,11681,11682,11680,11809,11808,11809,11680,11681,11679,11808,11807,11808,11679,11680,11678,11807,11806,11807,11678,11679,11677,11806,11805,11806,11677,11678,11676,11805,11804,11805,11676,11677,11675,11804,11803,11804,11675,11676,11674,11803,11802,11803,11674,11675,11673,11802,11801,11802,11673,11674,11672,11801,11800,11801,11672,11673,11671,11800,11799,11800,11671,11672,11670,11799,11798,11799,11670,11671,11669,11798,11797,11798,11669,11670,11668,11797,11796,11797,11668,11669,11667,11796,11795,11796,11667,11668,11666,11795,11794,11795,11666,11667,11665,11794,11793,11794,11665,11666,11664,11793,11792,11793,11664,11665,11663,11792,11791,11792,11663,11664,11662,11791,11790,11791,11662,11663,11661,11790,11789,11790,11661,11662,11660,11789,11788,11789,11660,11661,11659,11788,11787,11788,11659,11660,11658,11787,11786,11787,11658,11659,11657,11786,11785,11786,11657,11658,11656,11785,11784,11785,11656,11657,11655,11784,11783,11784,11655,11656,11654,11783,11782,11783,11654,11655,11653,11782,11781,11782,11653,11654,11652,11781,11780,11781,11652,11653,11651,11780,11779,11780,11651,11652,11650,11779,11778,11779,11650,11651,11649,11778,11777,11778,11649,11650,11648,11777,11776,11777,11648,11649,11902,12031,12030,12031,11902,11903,11901,12030,12029,12030,11901,11902,11900,12029,12028,12029,11900,11901,11899,12028,12027,12028,11899,11900,11898,12027,12026,12027,11898,11899,11897,12026,12025,12026,11897,11898,11896,12025,12024,12025,11896,11897,11895,12024,12023,12024,11895,11896,11894,12023,12022,12023,11894,11895,11893,12022,12021,12022,11893,11894,11892,12021,12020,12021,11892,11893,11891,12020,12019,12020,11891,11892,11890,12019,12018,12019,11890,11891,11889,12018,12017,12018,11889,11890,11888,12017,12016,12017,11888,11889,11887,12016,12015,12016,11887,11888,11886,12015,12014,12015,11886,11887,11885,12014,12013,12014,11885,11886,11884,12013,12012,12013,11884,11885,11883,12012,12011,12012,11883,11884,11882,12011,12010,12011,11882,11883,11881,12010,12009,12010,11881,11882,11880,12009,12008,12009,11880,11881,11879,12008,12007,12008,11879,11880,11878,12007,12006,12007,11878,11879,11877,12006,12005,12006,11877,11878,11876,12005,12004,12005,11876,11877,11875,12004,12003,12004,11875,11876,11874,12003,12002,12003,11874,11875,11873,12002,12001,12002,11873,11874,11872,12001,12000,12001,11872,11873,11871,12000,11999,12000,11871,11872,11870,11999,11998,11999,11870,11871,11869,11998,11997,11998,11869,11870,11868,11997,11996,11997,11868,11869,11867,11996,11995,11996,11867,11868,11866,11995,11994,11995,11866,11867,11865,11994,11993,11994,11865,11866,11864,11993,11992,11993,11864,11865,11863,11992,11991,11992,11863,11864,11862,11991,11990,11991,11862,11863,11861,11990,11989,11990,11861,11862,11860,11989,11988,11989,11860,11861,11859,11988,11987,11988,11859,11860,11858,11987,11986,11987,11858,11859,11857,11986,11985,11986,11857,11858,11856,11985,11984,11985,11856,11857,11855,11984,11983,11984,11855,11856,11854,11983,11982,11983,11854,11855,11853,11982,11981,11982,11853,11854,11852,11981,11980,11981,11852,11853,11851,11980,11979,11980,11851,11852,11850,11979,11978,11979,11850,11851,11849,11978,11977,11978,11849,11850,11848,11977,11976,11977,11848,11849,11847,11976,11975,11976,11847,11848,11846,11975,11974,11975,11846,11847,11845,11974,11973,11974,11845,11846,11844,11973,11972,11973,11844,11845,11843,11972,11971,11972,11843,11844,11842,11971,11970,11971,11842,11843,11841,11970,11969,11970,11841,11842,11840,11969,11968,11969,11840,11841,11839,11968,11967,11968,11839,11840,11838,11967,11966,11967,11838,11839,11837,11966,11965,11966,11837,11838,11836,11965,11964,11965,11836,11837,11835,11964,11963,11964,11835,11836,11834,11963,11962,11963,11834,11835,11833,11962,11961,11962,11833,11834,11832,11961,11960,11961,11832,11833,11831,11960,11959,11960,11831,11832,11830,11959,11958,11959,11830,11831,11829,11958,11957,11958,11829,11830,11828,11957,11956,11957,11828,11829,11827,11956,11955,11956,11827,11828,11826,11955,11954,11955,11826,11827,11825,11954,11953,11954,11825,11826,11824,11953,11952,11953,11824,11825,11823,11952,11951,11952,11823,11824,11822,11951,11950,11951,11822,11823,11821,11950,11949,11950,11821,11822,11820,11949,11948,11949,11820,11821,11819,11948,11947,11948,11819,11820,11818,11947,11946,11947,11818,11819,11817,11946,11945,11946,11817,11818,11816,11945,11944,11945,11816,11817,11815,11944,11943,11944,11815,11816,11814,11943,11942,11943,11814,11815,11813,11942,11941,11942,11813,11814,11812,11941,11940,11941,11812,11813,11811,11940,11939,11940,11811,11812,11810,11939,11938,11939,11810,11811,11809,11938,11937,11938,11809,11810,11808,11937,11936,11937,11808,11809,11807,11936,11935,11936,11807,11808,11806,11935,11934,11935,11806,11807,11805,11934,11933,11934,11805,11806,11804,11933,11932,11933,11804,11805,11803,11932,11931,11932,11803,11804,11802,11931,11930,11931,11802,11803,11801,11930,11929,11930,11801,11802,11800,11929,11928,11929,11800,11801,11799,11928,11927,11928,11799,11800,11798,11927,11926,11927,11798,11799,11797,11926,11925,11926,11797,11798,11796,11925,11924,11925,11796,11797,11795,11924,11923,11924,11795,11796,11794,11923,11922,11923,11794,11795,11793,11922,11921,11922,11793,11794,11792,11921,11920,11921,11792,11793,11791,11920,11919,11920,11791,11792,11790,11919,11918,11919,11790,11791,11789,11918,11917,11918,11789,11790,11788,11917,11916,11917,11788,11789,11787,11916,11915,11916,11787,11788,11786,11915,11914,11915,11786,11787,11785,11914,11913,11914,11785,11786,11784,11913,11912,11913,11784,11785,11783,11912,11911,11912,11783,11784,11782,11911,11910,11911,11782,11783,11781,11910,11909,11910,11781,11782,11780,11909,11908,11909,11780,11781,11779,11908,11907,11908,11779,11780,11778,11907,11906,11907,11778,11779,11777,11906,11905,11906,11777,11778,11776,11905,11904,11905,11776,11777,12030,12159,12158,12159,12030,12031,12029,12158,12157,12158,12029,12030,12028,12157,12156,12157,12028,12029,12027,12156,12155,12156,12027,12028,12026,12155,12154,12155,12026,12027,12025,12154,12153,12154,12025,12026,12024,12153,12152,12153,12024,12025,12023,12152,12151,12152,12023,12024,12022,12151,12150,12151,12022,12023,12021,12150,12149,12150,12021,12022,12020,12149,12148,12149,12020,12021,12019,12148,12147,12148,12019,12020,12018,12147,12146,12147,12018,12019,12017,12146,12145,12146,12017,12018,12016,12145,12144,12145,12016,12017,12015,12144,12143,12144,12015,12016,12014,12143,12142,12143,12014,12015,12013,12142,12141,12142,12013,12014,12012,12141,12140,12141,12012,12013,12011,12140,12139,12140,12011,12012,12010,12139,12138,12139,12010,12011,12009,12138,12137,12138,12009,12010,12008,12137,12136,12137,12008,12009,12007,12136,12135,12136,12007,12008,12006,12135,12134,12135,12006,12007,12005,12134,12133,12134,12005,12006,12004,12133,12132,12133,12004,12005,12003,12132,12131,12132,12003,12004,12002,12131,12130,12131,12002,12003,12001,12130,12129,12130,12001,12002,12000,12129,12128,12129,12000,12001,11999,12128,12127,12128,11999,12000,11998,12127,12126,12127,11998,11999,11997,12126,12125,12126,11997,11998,11996,12125,12124,12125,11996,11997,11995,12124,12123,12124,11995,11996,11994,12123,12122,12123,11994,11995,11993,12122,12121,12122,11993,11994,11992,12121,12120,12121,11992,11993,11991,12120,12119,12120,11991,11992,11990,12119,12118,12119,11990,11991,11989,12118,12117,12118,11989,11990,11988,12117,12116,12117,11988,11989,11987,12116,12115,12116,11987,11988,11986,12115,12114,12115,11986,11987,11985,12114,12113,12114,11985,11986,11984,12113,12112,12113,11984,11985,11983,12112,12111,12112,11983,11984,11982,12111,12110,12111,11982,11983,11981,12110,12109,12110,11981,11982,11980,12109,12108,12109,11980,11981,11979,12108,12107,12108,11979,11980,11978,12107,12106,12107,11978,11979,11977,12106,12105,12106,11977,11978,11976,12105,12104,12105,11976,11977,11975,12104,12103,12104,11975,11976,11974,12103,12102,12103,11974,11975,11973,12102,12101,12102,11973,11974,11972,12101,12100,12101,11972,11973,11971,12100,12099,12100,11971,11972,11970,12099,12098,12099,11970,11971,11969,12098,12097,12098,11969,11970,11968,12097,12096,12097,11968,11969,11967,12096,12095,12096,11967,11968,11966,12095,12094,12095,11966,11967,11965,12094,12093,12094,11965,11966,11964,12093,12092,12093,11964,11965,11963,12092,12091,12092,11963,11964,11962,12091,12090,12091,11962,11963,11961,12090,12089,12090,11961,11962,11960,12089,12088,12089,11960,11961,11959,12088,12087,12088,11959,11960,11958,12087,12086,12087,11958,11959,11957,12086,12085,12086,11957,11958,11956,12085,12084,12085,11956,11957,11955,12084,12083,12084,11955,11956,11954,12083,12082,12083,11954,11955,11953,12082,12081,12082,11953,11954,11952,12081,12080,12081,11952,11953,11951,12080,12079,12080,11951,11952,11950,12079,12078,12079,11950,11951,11949,12078,12077,12078,11949,11950,11948,12077,12076,12077,11948,11949,11947,12076,12075,12076,11947,11948,11946,12075,12074,12075,11946,11947,11945,12074,12073,12074,11945,11946,11944,12073,12072,12073,11944,11945,11943,12072,12071,12072,11943,11944,11942,12071,12070,12071,11942,11943,11941,12070,12069,12070,11941,11942,11940,12069,12068,12069,11940,11941,11939,12068,12067,12068,11939,11940,11938,12067,12066,12067,11938,11939,11937,12066,12065,12066,11937,11938,11936,12065,12064,12065,11936,11937,11935,12064,12063,12064,11935,11936,11934,12063,12062,12063,11934,11935,11933,12062,12061,12062,11933,11934,11932,12061,12060,12061,11932,11933,11931,12060,12059,12060,11931,11932,11930,12059,12058,12059,11930,11931,11929,12058,12057,12058,11929,11930,11928,12057,12056,12057,11928,11929,11927,12056,12055,12056,11927,11928,11926,12055,12054,12055,11926,11927,11925,12054,12053,12054,11925,11926,11924,12053,12052,12053,11924,11925,11923,12052,12051,12052,11923,11924,11922,12051,12050,12051,11922,11923,11921,12050,12049,12050,11921,11922,11920,12049,12048,12049,11920,11921,11919,12048,12047,12048,11919,11920,11918,12047,12046,12047,11918,11919,11917,12046,12045,12046,11917,11918,11916,12045,12044,12045,11916,11917,11915,12044,12043,12044,11915,11916,11914,12043,12042,12043,11914,11915,11913,12042,12041,12042,11913,11914,11912,12041,12040,12041,11912,11913,11911,12040,12039,12040,11911,11912,11910,12039,12038,12039,11910,11911,11909,12038,12037,12038,11909,11910,11908,12037,12036,12037,11908,11909,11907,12036,12035,12036,11907,11908,11906,12035,12034,12035,11906,11907,11905,12034,12033,12034,11905,11906,11904,12033,12032,12033,11904,11905,12158,12287,12286,12287,12158,12159,12157,12286,12285,12286,12157,12158,12156,12285,12284,12285,12156,12157,12155,12284,12283,12284,12155,12156,12154,12283,12282,12283,12154,12155,12153,12282,12281,12282,12153,12154,12152,12281,12280,12281,12152,12153,12151,12280,12279,12280,12151,12152,12150,12279,12278,12279,12150,12151,12149,12278,12277,12278,12149,12150,12148,12277,12276,12277,12148,12149,12147,12276,12275,12276,12147,12148,12146,12275,12274,12275,12146,12147,12145,12274,12273,12274,12145,12146,12144,12273,12272,12273,12144,12145,12143,12272,12271,12272,12143,12144,12142,12271,12270,12271,12142,12143,12141,12270,12269,12270,12141,12142,12140,12269,12268,12269,12140,12141,12139,12268,12267,12268,12139,12140,12138,12267,12266,12267,12138,12139,12137,12266,12265,12266,12137,12138,12136,12265,12264,12265,12136,12137,12135,12264,12263,12264,12135,12136,12134,12263,12262,12263,12134,12135,12133,12262,12261,12262,12133,12134,12132,12261,12260,12261,12132,12133,12131,12260,12259,12260,12131,12132,12130,12259,12258,12259,12130,12131,12129,12258,12257,12258,12129,12130,12128,12257,12256,12257,12128,12129,12127,12256,12255,12256,12127,12128,12126,12255,12254,12255,12126,12127,12125,12254,12253,12254,12125,12126,12124,12253,12252,12253,12124,12125,12123,12252,12251,12252,12123,12124,12122,12251,12250,12251,12122,12123,12121,12250,12249,12250,12121,12122,12120,12249,12248,12249,12120,12121,12119,12248,12247,12248,12119,12120,12118,12247,12246,12247,12118,12119,12117,12246,12245,12246,12117,12118,12116,12245,12244,12245,12116,12117,12115,12244,12243,12244,12115,12116,12114,12243,12242,12243,12114,12115,12113,12242,12241,12242,12113,12114,12112,12241,12240,12241,12112,12113,12111,12240,12239,12240,12111,12112,12110,12239,12238,12239,12110,12111,12109,12238,12237,12238,12109,12110,12108,12237,12236,12237,12108,12109,12107,12236,12235,12236,12107,12108,12106,12235,12234,12235,12106,12107,12105,12234,12233,12234,12105,12106,12104,12233,12232,12233,12104,12105,12103,12232,12231,12232,12103,12104,12102,12231,12230,12231,12102,12103,12101,12230,12229,12230,12101,12102,12100,12229,12228,12229,12100,12101,12099,12228,12227,12228,12099,12100,12098,12227,12226,12227,12098,12099,12097,12226,12225,12226,12097,12098,12096,12225,12224,12225,12096,12097,12095,12224,12223,12224,12095,12096,12094,12223,12222,12223,12094,12095,12093,12222,12221,12222,12093,12094,12092,12221,12220,12221,12092,12093,12091,12220,12219,12220,12091,12092,12090,12219,12218,12219,12090,12091,12089,12218,12217,12218,12089,12090,12088,12217,12216,12217,12088,12089,12087,12216,12215,12216,12087,12088,12086,12215,12214,12215,12086,12087,12085,12214,12213,12214,12085,12086,12084,12213,12212,12213,12084,12085,12083,12212,12211,12212,12083,12084,12082,12211,12210,12211,12082,12083,12081,12210,12209,12210,12081,12082,12080,12209,12208,12209,12080,12081,12079,12208,12207,12208,12079,12080,12078,12207,12206,12207,12078,12079,12077,12206,12205,12206,12077,12078,12076,12205,12204,12205,12076,12077,12075,12204,12203,12204,12075,12076,12074,12203,12202,12203,12074,12075,12073,12202,12201,12202,12073,12074,12072,12201,12200,12201,12072,12073,12071,12200,12199,12200,12071,12072,12070,12199,12198,12199,12070,12071,12069,12198,12197,12198,12069,12070,12068,12197,12196,12197,12068,12069,12067,12196,12195,12196,12067,12068,12066,12195,12194,12195,12066,12067,12065,12194,12193,12194,12065,12066,12064,12193,12192,12193,12064,12065,12063,12192,12191,12192,12063,12064,12062,12191,12190,12191,12062,12063,12061,12190,12189,12190,12061,12062,12060,12189,12188,12189,12060,12061,12059,12188,12187,12188,12059,12060,12058,12187,12186,12187,12058,12059,12057,12186,12185,12186,12057,12058,12056,12185,12184,12185,12056,12057,12055,12184,12183,12184,12055,12056,12054,12183,12182,12183,12054,12055,12053,12182,12181,12182,12053,12054,12052,12181,12180,12181,12052,12053,12051,12180,12179,12180,12051,12052,12050,12179,12178,12179,12050,12051,12049,12178,12177,12178,12049,12050,12048,12177,12176,12177,12048,12049,12047,12176,12175,12176,12047,12048,12046,12175,12174,12175,12046,12047,12045,12174,12173,12174,12045,12046,12044,12173,12172,12173,12044,12045,12043,12172,12171,12172,12043,12044,12042,12171,12170,12171,12042,12043,12041,12170,12169,12170,12041,12042,12040,12169,12168,12169,12040,12041,12039,12168,12167,12168,12039,12040,12038,12167,12166,12167,12038,12039,12037,12166,12165,12166,12037,12038,12036,12165,12164,12165,12036,12037,12035,12164,12163,12164,12035,12036,12034,12163,12162,12163,12034,12035,12033,12162,12161,12162,12033,12034,12032,12161,12160,12161,12032,12033,12286,12415,12414,12415,12286,12287,12285,12414,12413,12414,12285,12286,12284,12413,12412,12413,12284,12285,12283,12412,12411,12412,12283,12284,12282,12411,12410,12411,12282,12283,12281,12410,12409,12410,12281,12282,12280,12409,12408,12409,12280,12281,12279,12408,12407,12408,12279,12280,12278,12407,12406,12407,12278,12279,12277,12406,12405,12406,12277,12278,12276,12405,12404,12405,12276,12277,12275,12404,12403,12404,12275,12276,12274,12403,12402,12403,12274,12275,12273,12402,12401,12402,12273,12274,12272,12401,12400,12401,12272,12273,12271,12400,12399,12400,12271,12272,12270,12399,12398,12399,12270,12271,12269,12398,12397,12398,12269,12270,12268,12397,12396,12397,12268,12269,12267,12396,12395,12396,12267,12268,12266,12395,12394,12395,12266,12267,12265,12394,12393,12394,12265,12266,12264,12393,12392,12393,12264,12265,12263,12392,12391,12392,12263,12264,12262,12391,12390,12391,12262,12263,12261,12390,12389,12390,12261,12262,12260,12389,12388,12389,12260,12261,12259,12388,12387,12388,12259,12260,12258,12387,12386,12387,12258,12259,12257,12386,12385,12386,12257,12258,12256,12385,12384,12385,12256,12257,12255,12384,12383,12384,12255,12256,12254,12383,12382,12383,12254,12255,12253,12382,12381,12382,12253,12254,12252,12381,12380,12381,12252,12253,12251,12380,12379,12380,12251,12252,12250,12379,12378,12379,12250,12251,12249,12378,12377,12378,12249,12250,12248,12377,12376,12377,12248,12249,12247,12376,12375,12376,12247,12248,12246,12375,12374,12375,12246,12247,12245,12374,12373,12374,12245,12246,12244,12373,12372,12373,12244,12245,12243,12372,12371,12372,12243,12244,12242,12371,12370,12371,12242,12243,12241,12370,12369,12370,12241,12242,12240,12369,12368,12369,12240,12241,12239,12368,12367,12368,12239,12240,12238,12367,12366,12367,12238,12239,12237,12366,12365,12366,12237,12238,12236,12365,12364,12365,12236,12237,12235,12364,12363,12364,12235,12236,12234,12363,12362,12363,12234,12235,12233,12362,12361,12362,12233,12234,12232,12361,12360,12361,12232,12233,12231,12360,12359,12360,12231,12232,12230,12359,12358,12359,12230,12231,12229,12358,12357,12358,12229,12230,12228,12357,12356,12357,12228,12229,12227,12356,12355,12356,12227,12228,12226,12355,12354,12355,12226,12227,12225,12354,12353,12354,12225,12226,12224,12353,12352,12353,12224,12225,12223,12352,12351,12352,12223,12224,12222,12351,12350,12351,12222,12223,12221,12350,12349,12350,12221,12222,12220,12349,12348,12349,12220,12221,12219,12348,12347,12348,12219,12220,12218,12347,12346,12347,12218,12219,12217,12346,12345,12346,12217,12218,12216,12345,12344,12345,12216,12217,12215,12344,12343,12344,12215,12216,12214,12343,12342,12343,12214,12215,12213,12342,12341,12342,12213,12214,12212,12341,12340,12341,12212,12213,12211,12340,12339,12340,12211,12212,12210,12339,12338,12339,12210,12211,12209,12338,12337,12338,12209,12210,12208,12337,12336,12337,12208,12209,12207,12336,12335,12336,12207,12208,12206,12335,12334,12335,12206,12207,12205,12334,12333,12334,12205,12206,12204,12333,12332,12333,12204,12205,12203,12332,12331,12332,12203,12204,12202,12331,12330,12331,12202,12203,12201,12330,12329,12330,12201,12202,12200,12329,12328,12329,12200,12201,12199,12328,12327,12328,12199,12200,12198,12327,12326,12327,12198,12199,12197,12326,12325,12326,12197,12198,12196,12325,12324,12325,12196,12197,12195,12324,12323,12324,12195,12196,12194,12323,12322,12323,12194,12195,12193,12322,12321,12322,12193,12194,12192,12321,12320,12321,12192,12193,12191,12320,12319,12320,12191,12192,12190,12319,12318,12319,12190,12191,12189,12318,12317,12318,12189,12190,12188,12317,12316,12317,12188,12189,12187,12316,12315,12316,12187,12188,12186,12315,12314,12315,12186,12187,12185,12314,12313,12314,12185,12186,12184,12313,12312,12313,12184,12185,12183,12312,12311,12312,12183,12184,12182,12311,12310,12311,12182,12183,12181,12310,12309,12310,12181,12182,12180,12309,12308,12309,12180,12181,12179,12308,12307,12308,12179,12180,12178,12307,12306,12307,12178,12179,12177,12306,12305,12306,12177,12178,12176,12305,12304,12305,12176,12177,12175,12304,12303,12304,12175,12176,12174,12303,12302,12303,12174,12175,12173,12302,12301,12302,12173,12174,12172,12301,12300,12301,12172,12173,12171,12300,12299,12300,12171,12172,12170,12299,12298,12299,12170,12171,12169,12298,12297,12298,12169,12170,12168,12297,12296,12297,12168,12169,12167,12296,12295,12296,12167,12168,12166,12295,12294,12295,12166,12167,12165,12294,12293,12294,12165,12166,12164,12293,12292,12293,12164,12165,12163,12292,12291,12292,12163,12164,12162,12291,12290,12291,12162,12163,12161,12290,12289,12290,12161,12162,12160,12289,12288,12289,12160,12161,12414,12543,12542,12543,12414,12415,12413,12542,12541,12542,12413,12414,12412,12541,12540,12541,12412,12413,12411,12540,12539,12540,12411,12412,12410,12539,12538,12539,12410,12411,12409,12538,12537,12538,12409,12410,12408,12537,12536,12537,12408,12409,12407,12536,12535,12536,12407,12408,12406,12535,12534,12535,12406,12407,12405,12534,12533,12534,12405,12406,12404,12533,12532,12533,12404,12405,12403,12532,12531,12532,12403,12404,12402,12531,12530,12531,12402,12403,12401,12530,12529,12530,12401,12402,12400,12529,12528,12529,12400,12401,12399,12528,12527,12528,12399,12400,12398,12527,12526,12527,12398,12399,12397,12526,12525,12526,12397,12398,12396,12525,12524,12525,12396,12397,12395,12524,12523,12524,12395,12396,12394,12523,12522,12523,12394,12395,12393,12522,12521,12522,12393,12394,12392,12521,12520,12521,12392,12393,12391,12520,12519,12520,12391,12392,12390,12519,12518,12519,12390,12391,12389,12518,12517,12518,12389,12390,12388,12517,12516,12517,12388,12389,12387,12516,12515,12516,12387,12388,12386,12515,12514,12515,12386,12387,12385,12514,12513,12514,12385,12386,12384,12513,12512,12513,12384,12385,12383,12512,12511,12512,12383,12384,12382,12511,12510,12511,12382,12383,12381,12510,12509,12510,12381,12382,12380,12509,12508,12509,12380,12381,12379,12508,12507,12508,12379,12380,12378,12507,12506,12507,12378,12379,12377,12506,12505,12506,12377,12378,12376,12505,12504,12505,12376,12377,12375,12504,12503,12504,12375,12376,12374,12503,12502,12503,12374,12375,12373,12502,12501,12502,12373,12374,12372,12501,12500,12501,12372,12373,12371,12500,12499,12500,12371,12372,12370,12499,12498,12499,12370,12371,12369,12498,12497,12498,12369,12370,12368,12497,12496,12497,12368,12369,12367,12496,12495,12496,12367,12368,12366,12495,12494,12495,12366,12367,12365,12494,12493,12494,12365,12366,12364,12493,12492,12493,12364,12365,12363,12492,12491,12492,12363,12364,12362,12491,12490,12491,12362,12363,12361,12490,12489,12490,12361,12362,12360,12489,12488,12489,12360,12361,12359,12488,12487,12488,12359,12360,12358,12487,12486,12487,12358,12359,12357,12486,12485,12486,12357,12358,12356,12485,12484,12485,12356,12357,12355,12484,12483,12484,12355,12356,12354,12483,12482,12483,12354,12355,12353,12482,12481,12482,12353,12354,12352,12481,12480,12481,12352,12353,12351,12480,12479,12480,12351,12352,12350,12479,12478,12479,12350,12351,12349,12478,12477,12478,12349,12350,12348,12477,12476,12477,12348,12349,12347,12476,12475,12476,12347,12348,12346,12475,12474,12475,12346,12347,12345,12474,12473,12474,12345,12346,12344,12473,12472,12473,12344,12345,12343,12472,12471,12472,12343,12344,12342,12471,12470,12471,12342,12343,12341,12470,12469,12470,12341,12342,12340,12469,12468,12469,12340,12341,12339,12468,12467,12468,12339,12340,12338,12467,12466,12467,12338,12339,12337,12466,12465,12466,12337,12338,12336,12465,12464,12465,12336,12337,12335,12464,12463,12464,12335,12336,12334,12463,12462,12463,12334,12335,12333,12462,12461,12462,12333,12334,12332,12461,12460,12461,12332,12333,12331,12460,12459,12460,12331,12332,12330,12459,12458,12459,12330,12331,12329,12458,12457,12458,12329,12330,12328,12457,12456,12457,12328,12329,12327,12456,12455,12456,12327,12328,12326,12455,12454,12455,12326,12327,12325,12454,12453,12454,12325,12326,12324,12453,12452,12453,12324,12325,12323,12452,12451,12452,12323,12324,12322,12451,12450,12451,12322,12323,12321,12450,12449,12450,12321,12322,12320,12449,12448,12449,12320,12321,12319,12448,12447,12448,12319,12320,12318,12447,12446,12447,12318,12319,12317,12446,12445,12446,12317,12318,12316,12445,12444,12445,12316,12317,12315,12444,12443,12444,12315,12316,12314,12443,12442,12443,12314,12315,12313,12442,12441,12442,12313,12314,12312,12441,12440,12441,12312,12313,12311,12440,12439,12440,12311,12312,12310,12439,12438,12439,12310,12311,12309,12438,12437,12438,12309,12310,12308,12437,12436,12437,12308,12309,12307,12436,12435,12436,12307,12308,12306,12435,12434,12435,12306,12307,12305,12434,12433,12434,12305,12306,12304,12433,12432,12433,12304,12305,12303,12432,12431,12432,12303,12304,12302,12431,12430,12431,12302,12303,12301,12430,12429,12430,12301,12302,12300,12429,12428,12429,12300,12301,12299,12428,12427,12428,12299,12300,12298,12427,12426,12427,12298,12299,12297,12426,12425,12426,12297,12298,12296,12425,12424,12425,12296,12297,12295,12424,12423,12424,12295,12296,12294,12423,12422,12423,12294,12295,12293,12422,12421,12422,12293,12294,12292,12421,12420,12421,12292,12293,12291,12420,12419,12420,12291,12292,12290,12419,12418,12419,12290,12291,12289,12418,12417,12418,12289,12290,12288,12417,12416,12417,12288,12289,12542,12671,12670,12671,12542,12543,12541,12670,12669,12670,12541,12542,12540,12669,12668,12669,12540,12541,12539,12668,12667,12668,12539,12540,12538,12667,12666,12667,12538,12539,12537,12666,12665,12666,12537,12538,12536,12665,12664,12665,12536,12537,12535,12664,12663,12664,12535,12536,12534,12663,12662,12663,12534,12535,12533,12662,12661,12662,12533,12534,12532,12661,12660,12661,12532,12533,12531,12660,12659,12660,12531,12532,12530,12659,12658,12659,12530,12531,12529,12658,12657,12658,12529,12530,12528,12657,12656,12657,12528,12529,12527,12656,12655,12656,12527,12528,12526,12655,12654,12655,12526,12527,12525,12654,12653,12654,12525,12526,12524,12653,12652,12653,12524,12525,12523,12652,12651,12652,12523,12524,12522,12651,12650,12651,12522,12523,12521,12650,12649,12650,12521,12522,12520,12649,12648,12649,12520,12521,12519,12648,12647,12648,12519,12520,12518,12647,12646,12647,12518,12519,12517,12646,12645,12646,12517,12518,12516,12645,12644,12645,12516,12517,12515,12644,12643,12644,12515,12516,12514,12643,12642,12643,12514,12515,12513,12642,12641,12642,12513,12514,12512,12641,12640,12641,12512,12513,12511,12640,12639,12640,12511,12512,12510,12639,12638,12639,12510,12511,12509,12638,12637,12638,12509,12510,12508,12637,12636,12637,12508,12509,12507,12636,12635,12636,12507,12508,12506,12635,12634,12635,12506,12507,12505,12634,12633,12634,12505,12506,12504,12633,12632,12633,12504,12505,12503,12632,12631,12632,12503,12504,12502,12631,12630,12631,12502,12503,12501,12630,12629,12630,12501,12502,12500,12629,12628,12629,12500,12501,12499,12628,12627,12628,12499,12500,12498,12627,12626,12627,12498,12499,12497,12626,12625,12626,12497,12498,12496,12625,12624,12625,12496,12497,12495,12624,12623,12624,12495,12496,12494,12623,12622,12623,12494,12495,12493,12622,12621,12622,12493,12494,12492,12621,12620,12621,12492,12493,12491,12620,12619,12620,12491,12492,12490,12619,12618,12619,12490,12491,12489,12618,12617,12618,12489,12490,12488,12617,12616,12617,12488,12489,12487,12616,12615,12616,12487,12488,12486,12615,12614,12615,12486,12487,12485,12614,12613,12614,12485,12486,12484,12613,12612,12613,12484,12485,12483,12612,12611,12612,12483,12484,12482,12611,12610,12611,12482,12483,12481,12610,12609,12610,12481,12482,12480,12609,12608,12609,12480,12481,12479,12608,12607,12608,12479,12480,12478,12607,12606,12607,12478,12479,12477,12606,12605,12606,12477,12478,12476,12605,12604,12605,12476,12477,12475,12604,12603,12604,12475,12476,12474,12603,12602,12603,12474,12475,12473,12602,12601,12602,12473,12474,12472,12601,12600,12601,12472,12473,12471,12600,12599,12600,12471,12472,12470,12599,12598,12599,12470,12471,12469,12598,12597,12598,12469,12470,12468,12597,12596,12597,12468,12469,12467,12596,12595,12596,12467,12468,12466,12595,12594,12595,12466,12467,12465,12594,12593,12594,12465,12466,12464,12593,12592,12593,12464,12465,12463,12592,12591,12592,12463,12464,12462,12591,12590,12591,12462,12463,12461,12590,12589,12590,12461,12462,12460,12589,12588,12589,12460,12461,12459,12588,12587,12588,12459,12460,12458,12587,12586,12587,12458,12459,12457,12586,12585,12586,12457,12458,12456,12585,12584,12585,12456,12457,12455,12584,12583,12584,12455,12456,12454,12583,12582,12583,12454,12455,12453,12582,12581,12582,12453,12454,12452,12581,12580,12581,12452,12453,12451,12580,12579,12580,12451,12452,12450,12579,12578,12579,12450,12451,12449,12578,12577,12578,12449,12450,12448,12577,12576,12577,12448,12449,12447,12576,12575,12576,12447,12448,12446,12575,12574,12575,12446,12447,12445,12574,12573,12574,12445,12446,12444,12573,12572,12573,12444,12445,12443,12572,12571,12572,12443,12444,12442,12571,12570,12571,12442,12443,12441,12570,12569,12570,12441,12442,12440,12569,12568,12569,12440,12441,12439,12568,12567,12568,12439,12440,12438,12567,12566,12567,12438,12439,12437,12566,12565,12566,12437,12438,12436,12565,12564,12565,12436,12437,12435,12564,12563,12564,12435,12436,12434,12563,12562,12563,12434,12435,12433,12562,12561,12562,12433,12434,12432,12561,12560,12561,12432,12433,12431,12560,12559,12560,12431,12432,12430,12559,12558,12559,12430,12431,12429,12558,12557,12558,12429,12430,12428,12557,12556,12557,12428,12429,12427,12556,12555,12556,12427,12428,12426,12555,12554,12555,12426,12427,12425,12554,12553,12554,12425,12426,12424,12553,12552,12553,12424,12425,12423,12552,12551,12552,12423,12424,12422,12551,12550,12551,12422,12423,12421,12550,12549,12550,12421,12422,12420,12549,12548,12549,12420,12421,12419,12548,12547,12548,12419,12420,12418,12547,12546,12547,12418,12419,12417,12546,12545,12546,12417,12418,12416,12545,12544,12545,12416,12417,12670,12799,12798,12799,12670,12671,12669,12798,12797,12798,12669,12670,12668,12797,12796,12797,12668,12669,12667,12796,12795,12796,12667,12668,12666,12795,12794,12795,12666,12667,12665,12794,12793,12794,12665,12666,12664,12793,12792,12793,12664,12665,12663,12792,12791,12792,12663,12664,12662,12791,12790,12791,12662,12663,12661,12790,12789,12790,12661,12662,12660,12789,12788,12789,12660,12661,12659,12788,12787,12788,12659,12660,12658,12787,12786,12787,12658,12659,12657,12786,12785,12786,12657,12658,12656,12785,12784,12785,12656,12657,12655,12784,12783,12784,12655,12656,12654,12783,12782,12783,12654,12655,12653,12782,12781,12782,12653,12654,12652,12781,12780,12781,12652,12653,12651,12780,12779,12780,12651,12652,12650,12779,12778,12779,12650,12651,12649,12778,12777,12778,12649,12650,12648,12777,12776,12777,12648,12649,12647,12776,12775,12776,12647,12648,12646,12775,12774,12775,12646,12647,12645,12774,12773,12774,12645,12646,12644,12773,12772,12773,12644,12645,12643,12772,12771,12772,12643,12644,12642,12771,12770,12771,12642,12643,12641,12770,12769,12770,12641,12642,12640,12769,12768,12769,12640,12641,12639,12768,12767,12768,12639,12640,12638,12767,12766,12767,12638,12639,12637,12766,12765,12766,12637,12638,12636,12765,12764,12765,12636,12637,12635,12764,12763,12764,12635,12636,12634,12763,12762,12763,12634,12635,12633,12762,12761,12762,12633,12634,12632,12761,12760,12761,12632,12633,12631,12760,12759,12760,12631,12632,12630,12759,12758,12759,12630,12631,12629,12758,12757,12758,12629,12630,12628,12757,12756,12757,12628,12629,12627,12756,12755,12756,12627,12628,12626,12755,12754,12755,12626,12627,12625,12754,12753,12754,12625,12626,12624,12753,12752,12753,12624,12625,12623,12752,12751,12752,12623,12624,12622,12751,12750,12751,12622,12623,12621,12750,12749,12750,12621,12622,12620,12749,12748,12749,12620,12621,12619,12748,12747,12748,12619,12620,12618,12747,12746,12747,12618,12619,12617,12746,12745,12746,12617,12618,12616,12745,12744,12745,12616,12617,12615,12744,12743,12744,12615,12616,12614,12743,12742,12743,12614,12615,12613,12742,12741,12742,12613,12614,12612,12741,12740,12741,12612,12613,12611,12740,12739,12740,12611,12612,12610,12739,12738,12739,12610,12611,12609,12738,12737,12738,12609,12610,12608,12737,12736,12737,12608,12609,12607,12736,12735,12736,12607,12608,12606,12735,12734,12735,12606,12607,12605,12734,12733,12734,12605,12606,12604,12733,12732,12733,12604,12605,12603,12732,12731,12732,12603,12604,12602,12731,12730,12731,12602,12603,12601,12730,12729,12730,12601,12602,12600,12729,12728,12729,12600,12601,12599,12728,12727,12728,12599,12600,12598,12727,12726,12727,12598,12599,12597,12726,12725,12726,12597,12598,12596,12725,12724,12725,12596,12597,12595,12724,12723,12724,12595,12596,12594,12723,12722,12723,12594,12595,12593,12722,12721,12722,12593,12594,12592,12721,12720,12721,12592,12593,12591,12720,12719,12720,12591,12592,12590,12719,12718,12719,12590,12591,12589,12718,12717,12718,12589,12590,12588,12717,12716,12717,12588,12589,12587,12716,12715,12716,12587,12588,12586,12715,12714,12715,12586,12587,12585,12714,12713,12714,12585,12586,12584,12713,12712,12713,12584,12585,12583,12712,12711,12712,12583,12584,12582,12711,12710,12711,12582,12583,12581,12710,12709,12710,12581,12582,12580,12709,12708,12709,12580,12581,12579,12708,12707,12708,12579,12580,12578,12707,12706,12707,12578,12579,12577,12706,12705,12706,12577,12578,12576,12705,12704,12705,12576,12577,12575,12704,12703,12704,12575,12576,12574,12703,12702,12703,12574,12575,12573,12702,12701,12702,12573,12574,12572,12701,12700,12701,12572,12573,12571,12700,12699,12700,12571,12572,12570,12699,12698,12699,12570,12571,12569,12698,12697,12698,12569,12570,12568,12697,12696,12697,12568,12569,12567,12696,12695,12696,12567,12568,12566,12695,12694,12695,12566,12567,12565,12694,12693,12694,12565,12566,12564,12693,12692,12693,12564,12565,12563,12692,12691,12692,12563,12564,12562,12691,12690,12691,12562,12563,12561,12690,12689,12690,12561,12562,12560,12689,12688,12689,12560,12561,12559,12688,12687,12688,12559,12560,12558,12687,12686,12687,12558,12559,12557,12686,12685,12686,12557,12558,12556,12685,12684,12685,12556,12557,12555,12684,12683,12684,12555,12556,12554,12683,12682,12683,12554,12555,12553,12682,12681,12682,12553,12554,12552,12681,12680,12681,12552,12553,12551,12680,12679,12680,12551,12552,12550,12679,12678,12679,12550,12551,12549,12678,12677,12678,12549,12550,12548,12677,12676,12677,12548,12549,12547,12676,12675,12676,12547,12548,12546,12675,12674,12675,12546,12547,12545,12674,12673,12674,12545,12546,12544,12673,12672,12673,12544,12545,12798,12927,12926,12927,12798,12799,12797,12926,12925,12926,12797,12798,12796,12925,12924,12925,12796,12797,12795,12924,12923,12924,12795,12796,12794,12923,12922,12923,12794,12795,12793,12922,12921,12922,12793,12794,12792,12921,12920,12921,12792,12793,12791,12920,12919,12920,12791,12792,12790,12919,12918,12919,12790,12791,12789,12918,12917,12918,12789,12790,12788,12917,12916,12917,12788,12789,12787,12916,12915,12916,12787,12788,12786,12915,12914,12915,12786,12787,12785,12914,12913,12914,12785,12786,12784,12913,12912,12913,12784,12785,12783,12912,12911,12912,12783,12784,12782,12911,12910,12911,12782,12783,12781,12910,12909,12910,12781,12782,12780,12909,12908,12909,12780,12781,12779,12908,12907,12908,12779,12780,12778,12907,12906,12907,12778,12779,12777,12906,12905,12906,12777,12778,12776,12905,12904,12905,12776,12777,12775,12904,12903,12904,12775,12776,12774,12903,12902,12903,12774,12775,12773,12902,12901,12902,12773,12774,12772,12901,12900,12901,12772,12773,12771,12900,12899,12900,12771,12772,12770,12899,12898,12899,12770,12771,12769,12898,12897,12898,12769,12770,12768,12897,12896,12897,12768,12769,12767,12896,12895,12896,12767,12768,12766,12895,12894,12895,12766,12767,12765,12894,12893,12894,12765,12766,12764,12893,12892,12893,12764,12765,12763,12892,12891,12892,12763,12764,12762,12891,12890,12891,12762,12763,12761,12890,12889,12890,12761,12762,12760,12889,12888,12889,12760,12761,12759,12888,12887,12888,12759,12760,12758,12887,12886,12887,12758,12759,12757,12886,12885,12886,12757,12758,12756,12885,12884,12885,12756,12757,12755,12884,12883,12884,12755,12756,12754,12883,12882,12883,12754,12755,12753,12882,12881,12882,12753,12754,12752,12881,12880,12881,12752,12753,12751,12880,12879,12880,12751,12752,12750,12879,12878,12879,12750,12751,12749,12878,12877,12878,12749,12750,12748,12877,12876,12877,12748,12749,12747,12876,12875,12876,12747,12748,12746,12875,12874,12875,12746,12747,12745,12874,12873,12874,12745,12746,12744,12873,12872,12873,12744,12745,12743,12872,12871,12872,12743,12744,12742,12871,12870,12871,12742,12743,12741,12870,12869,12870,12741,12742,12740,12869,12868,12869,12740,12741,12739,12868,12867,12868,12739,12740,12738,12867,12866,12867,12738,12739,12737,12866,12865,12866,12737,12738,12736,12865,12864,12865,12736,12737,12735,12864,12863,12864,12735,12736,12734,12863,12862,12863,12734,12735,12733,12862,12861,12862,12733,12734,12732,12861,12860,12861,12732,12733,12731,12860,12859,12860,12731,12732,12730,12859,12858,12859,12730,12731,12729,12858,12857,12858,12729,12730,12728,12857,12856,12857,12728,12729,12727,12856,12855,12856,12727,12728,12726,12855,12854,12855,12726,12727,12725,12854,12853,12854,12725,12726,12724,12853,12852,12853,12724,12725,12723,12852,12851,12852,12723,12724,12722,12851,12850,12851,12722,12723,12721,12850,12849,12850,12721,12722,12720,12849,12848,12849,12720,12721,12719,12848,12847,12848,12719,12720,12718,12847,12846,12847,12718,12719,12717,12846,12845,12846,12717,12718,12716,12845,12844,12845,12716,12717,12715,12844,12843,12844,12715,12716,12714,12843,12842,12843,12714,12715,12713,12842,12841,12842,12713,12714,12712,12841,12840,12841,12712,12713,12711,12840,12839,12840,12711,12712,12710,12839,12838,12839,12710,12711,12709,12838,12837,12838,12709,12710,12708,12837,12836,12837,12708,12709,12707,12836,12835,12836,12707,12708,12706,12835,12834,12835,12706,12707,12705,12834,12833,12834,12705,12706,12704,12833,12832,12833,12704,12705,12703,12832,12831,12832,12703,12704,12702,12831,12830,12831,12702,12703,12701,12830,12829,12830,12701,12702,12700,12829,12828,12829,12700,12701,12699,12828,12827,12828,12699,12700,12698,12827,12826,12827,12698,12699,12697,12826,12825,12826,12697,12698,12696,12825,12824,12825,12696,12697,12695,12824,12823,12824,12695,12696,12694,12823,12822,12823,12694,12695,12693,12822,12821,12822,12693,12694,12692,12821,12820,12821,12692,12693,12691,12820,12819,12820,12691,12692,12690,12819,12818,12819,12690,12691,12689,12818,12817,12818,12689,12690,12688,12817,12816,12817,12688,12689,12687,12816,12815,12816,12687,12688,12686,12815,12814,12815,12686,12687,12685,12814,12813,12814,12685,12686,12684,12813,12812,12813,12684,12685,12683,12812,12811,12812,12683,12684,12682,12811,12810,12811,12682,12683,12681,12810,12809,12810,12681,12682,12680,12809,12808,12809,12680,12681,12679,12808,12807,12808,12679,12680,12678,12807,12806,12807,12678,12679,12677,12806,12805,12806,12677,12678,12676,12805,12804,12805,12676,12677,12675,12804,12803,12804,12675,12676,12674,12803,12802,12803,12674,12675,12673,12802,12801,12802,12673,12674,12672,12801,12800,12801,12672,12673,12926,13055,13054,13055,12926,12927,12925,13054,13053,13054,12925,12926,12924,13053,13052,13053,12924,12925,12923,13052,13051,13052,12923,12924,12922,13051,13050,13051,12922,12923,12921,13050,13049,13050,12921,12922,12920,13049,13048,13049,12920,12921,12919,13048,13047,13048,12919,12920,12918,13047,13046,13047,12918,12919,12917,13046,13045,13046,12917,12918,12916,13045,13044,13045,12916,12917,12915,13044,13043,13044,12915,12916,12914,13043,13042,13043,12914,12915,12913,13042,13041,13042,12913,12914,12912,13041,13040,13041,12912,12913,12911,13040,13039,13040,12911,12912,12910,13039,13038,13039,12910,12911,12909,13038,13037,13038,12909,12910,12908,13037,13036,13037,12908,12909,12907,13036,13035,13036,12907,12908,12906,13035,13034,13035,12906,12907,12905,13034,13033,13034,12905,12906,12904,13033,13032,13033,12904,12905,12903,13032,13031,13032,12903,12904,12902,13031,13030,13031,12902,12903,12901,13030,13029,13030,12901,12902,12900,13029,13028,13029,12900,12901,12899,13028,13027,13028,12899,12900,12898,13027,13026,13027,12898,12899,12897,13026,13025,13026,12897,12898,12896,13025,13024,13025,12896,12897,12895,13024,13023,13024,12895,12896,12894,13023,13022,13023,12894,12895,12893,13022,13021,13022,12893,12894,12892,13021,13020,13021,12892,12893,12891,13020,13019,13020,12891,12892,12890,13019,13018,13019,12890,12891,12889,13018,13017,13018,12889,12890,12888,13017,13016,13017,12888,12889,12887,13016,13015,13016,12887,12888,12886,13015,13014,13015,12886,12887,12885,13014,13013,13014,12885,12886,12884,13013,13012,13013,12884,12885,12883,13012,13011,13012,12883,12884,12882,13011,13010,13011,12882,12883,12881,13010,13009,13010,12881,12882,12880,13009,13008,13009,12880,12881,12879,13008,13007,13008,12879,12880,12878,13007,13006,13007,12878,12879,12877,13006,13005,13006,12877,12878,12876,13005,13004,13005,12876,12877,12875,13004,13003,13004,12875,12876,12874,13003,13002,13003,12874,12875,12873,13002,13001,13002,12873,12874,12872,13001,13000,13001,12872,12873,12871,13000,12999,13000,12871,12872,12870,12999,12998,12999,12870,12871,12869,12998,12997,12998,12869,12870,12868,12997,12996,12997,12868,12869,12867,12996,12995,12996,12867,12868,12866,12995,12994,12995,12866,12867,12865,12994,12993,12994,12865,12866,12864,12993,12992,12993,12864,12865,12863,12992,12991,12992,12863,12864,12862,12991,12990,12991,12862,12863,12861,12990,12989,12990,12861,12862,12860,12989,12988,12989,12860,12861,12859,12988,12987,12988,12859,12860,12858,12987,12986,12987,12858,12859,12857,12986,12985,12986,12857,12858,12856,12985,12984,12985,12856,12857,12855,12984,12983,12984,12855,12856,12854,12983,12982,12983,12854,12855,12853,12982,12981,12982,12853,12854,12852,12981,12980,12981,12852,12853,12851,12980,12979,12980,12851,12852,12850,12979,12978,12979,12850,12851,12849,12978,12977,12978,12849,12850,12848,12977,12976,12977,12848,12849,12847,12976,12975,12976,12847,12848,12846,12975,12974,12975,12846,12847,12845,12974,12973,12974,12845,12846,12844,12973,12972,12973,12844,12845,12843,12972,12971,12972,12843,12844,12842,12971,12970,12971,12842,12843,12841,12970,12969,12970,12841,12842,12840,12969,12968,12969,12840,12841,12839,12968,12967,12968,12839,12840,12838,12967,12966,12967,12838,12839,12837,12966,12965,12966,12837,12838,12836,12965,12964,12965,12836,12837,12835,12964,12963,12964,12835,12836,12834,12963,12962,12963,12834,12835,12833,12962,12961,12962,12833,12834,12832,12961,12960,12961,12832,12833,12831,12960,12959,12960,12831,12832,12830,12959,12958,12959,12830,12831,12829,12958,12957,12958,12829,12830,12828,12957,12956,12957,12828,12829,12827,12956,12955,12956,12827,12828,12826,12955,12954,12955,12826,12827,12825,12954,12953,12954,12825,12826,12824,12953,12952,12953,12824,12825,12823,12952,12951,12952,12823,12824,12822,12951,12950,12951,12822,12823,12821,12950,12949,12950,12821,12822,12820,12949,12948,12949,12820,12821,12819,12948,12947,12948,12819,12820,12818,12947,12946,12947,12818,12819,12817,12946,12945,12946,12817,12818,12816,12945,12944,12945,12816,12817,12815,12944,12943,12944,12815,12816,12814,12943,12942,12943,12814,12815,12813,12942,12941,12942,12813,12814,12812,12941,12940,12941,12812,12813,12811,12940,12939,12940,12811,12812,12810,12939,12938,12939,12810,12811,12809,12938,12937,12938,12809,12810,12808,12937,12936,12937,12808,12809,12807,12936,12935,12936,12807,12808,12806,12935,12934,12935,12806,12807,12805,12934,12933,12934,12805,12806,12804,12933,12932,12933,12804,12805,12803,12932,12931,12932,12803,12804,12802,12931,12930,12931,12802,12803,12801,12930,12929,12930,12801,12802,12800,12929,12928,12929,12800,12801,13054,13183,13182,13183,13054,13055,13053,13182,13181,13182,13053,13054,13052,13181,13180,13181,13052,13053,13051,13180,13179,13180,13051,13052,13050,13179,13178,13179,13050,13051,13049,13178,13177,13178,13049,13050,13048,13177,13176,13177,13048,13049,13047,13176,13175,13176,13047,13048,13046,13175,13174,13175,13046,13047,13045,13174,13173,13174,13045,13046,13044,13173,13172,13173,13044,13045,13043,13172,13171,13172,13043,13044,13042,13171,13170,13171,13042,13043,13041,13170,13169,13170,13041,13042,13040,13169,13168,13169,13040,13041,13039,13168,13167,13168,13039,13040,13038,13167,13166,13167,13038,13039,13037,13166,13165,13166,13037,13038,13036,13165,13164,13165,13036,13037,13035,13164,13163,13164,13035,13036,13034,13163,13162,13163,13034,13035,13033,13162,13161,13162,13033,13034,13032,13161,13160,13161,13032,13033,13031,13160,13159,13160,13031,13032,13030,13159,13158,13159,13030,13031,13029,13158,13157,13158,13029,13030,13028,13157,13156,13157,13028,13029,13027,13156,13155,13156,13027,13028,13026,13155,13154,13155,13026,13027,13025,13154,13153,13154,13025,13026,13024,13153,13152,13153,13024,13025,13023,13152,13151,13152,13023,13024,13022,13151,13150,13151,13022,13023,13021,13150,13149,13150,13021,13022,13020,13149,13148,13149,13020,13021,13019,13148,13147,13148,13019,13020,13018,13147,13146,13147,13018,13019,13017,13146,13145,13146,13017,13018,13016,13145,13144,13145,13016,13017,13015,13144,13143,13144,13015,13016,13014,13143,13142,13143,13014,13015,13013,13142,13141,13142,13013,13014,13012,13141,13140,13141,13012,13013,13011,13140,13139,13140,13011,13012,13010,13139,13138,13139,13010,13011,13009,13138,13137,13138,13009,13010,13008,13137,13136,13137,13008,13009,13007,13136,13135,13136,13007,13008,13006,13135,13134,13135,13006,13007,13005,13134,13133,13134,13005,13006,13004,13133,13132,13133,13004,13005,13003,13132,13131,13132,13003,13004,13002,13131,13130,13131,13002,13003,13001,13130,13129,13130,13001,13002,13000,13129,13128,13129,13000,13001,12999,13128,13127,13128,12999,13000,12998,13127,13126,13127,12998,12999,12997,13126,13125,13126,12997,12998,12996,13125,13124,13125,12996,12997,12995,13124,13123,13124,12995,12996,12994,13123,13122,13123,12994,12995,12993,13122,13121,13122,12993,12994,12992,13121,13120,13121,12992,12993,12991,13120,13119,13120,12991,12992,12990,13119,13118,13119,12990,12991,12989,13118,13117,13118,12989,12990,12988,13117,13116,13117,12988,12989,12987,13116,13115,13116,12987,12988,12986,13115,13114,13115,12986,12987,12985,13114,13113,13114,12985,12986,12984,13113,13112,13113,12984,12985,12983,13112,13111,13112,12983,12984,12982,13111,13110,13111,12982,12983,12981,13110,13109,13110,12981,12982,12980,13109,13108,13109,12980,12981,12979,13108,13107,13108,12979,12980,12978,13107,13106,13107,12978,12979,12977,13106,13105,13106,12977,12978,12976,13105,13104,13105,12976,12977,12975,13104,13103,13104,12975,12976,12974,13103,13102,13103,12974,12975,12973,13102,13101,13102,12973,12974,12972,13101,13100,13101,12972,12973,12971,13100,13099,13100,12971,12972,12970,13099,13098,13099,12970,12971,12969,13098,13097,13098,12969,12970,12968,13097,13096,13097,12968,12969,12967,13096,13095,13096,12967,12968,12966,13095,13094,13095,12966,12967,12965,13094,13093,13094,12965,12966,12964,13093,13092,13093,12964,12965,12963,13092,13091,13092,12963,12964,12962,13091,13090,13091,12962,12963,12961,13090,13089,13090,12961,12962,12960,13089,13088,13089,12960,12961,12959,13088,13087,13088,12959,12960,12958,13087,13086,13087,12958,12959,12957,13086,13085,13086,12957,12958,12956,13085,13084,13085,12956,12957,12955,13084,13083,13084,12955,12956,12954,13083,13082,13083,12954,12955,12953,13082,13081,13082,12953,12954,12952,13081,13080,13081,12952,12953,12951,13080,13079,13080,12951,12952,12950,13079,13078,13079,12950,12951,12949,13078,13077,13078,12949,12950,12948,13077,13076,13077,12948,12949,12947,13076,13075,13076,12947,12948,12946,13075,13074,13075,12946,12947,12945,13074,13073,13074,12945,12946,12944,13073,13072,13073,12944,12945,12943,13072,13071,13072,12943,12944,12942,13071,13070,13071,12942,12943,12941,13070,13069,13070,12941,12942,12940,13069,13068,13069,12940,12941,12939,13068,13067,13068,12939,12940,12938,13067,13066,13067,12938,12939,12937,13066,13065,13066,12937,12938,12936,13065,13064,13065,12936,12937,12935,13064,13063,13064,12935,12936,12934,13063,13062,13063,12934,12935,12933,13062,13061,13062,12933,12934,12932,13061,13060,13061,12932,12933,12931,13060,13059,13060,12931,12932,12930,13059,13058,13059,12930,12931,12929,13058,13057,13058,12929,12930,12928,13057,13056,13057,12928,12929,13182,13311,13310,13311,13182,13183,13181,13310,13309,13310,13181,13182,13180,13309,13308,13309,13180,13181,13179,13308,13307,13308,13179,13180,13178,13307,13306,13307,13178,13179,13177,13306,13305,13306,13177,13178,13176,13305,13304,13305,13176,13177,13175,13304,13303,13304,13175,13176,13174,13303,13302,13303,13174,13175,13173,13302,13301,13302,13173,13174,13172,13301,13300,13301,13172,13173,13171,13300,13299,13300,13171,13172,13170,13299,13298,13299,13170,13171,13169,13298,13297,13298,13169,13170,13168,13297,13296,13297,13168,13169,13167,13296,13295,13296,13167,13168,13166,13295,13294,13295,13166,13167,13165,13294,13293,13294,13165,13166,13164,13293,13292,13293,13164,13165,13163,13292,13291,13292,13163,13164,13162,13291,13290,13291,13162,13163,13161,13290,13289,13290,13161,13162,13160,13289,13288,13289,13160,13161,13159,13288,13287,13288,13159,13160,13158,13287,13286,13287,13158,13159,13157,13286,13285,13286,13157,13158,13156,13285,13284,13285,13156,13157,13155,13284,13283,13284,13155,13156,13154,13283,13282,13283,13154,13155,13153,13282,13281,13282,13153,13154,13152,13281,13280,13281,13152,13153,13151,13280,13279,13280,13151,13152,13150,13279,13278,13279,13150,13151,13149,13278,13277,13278,13149,13150,13148,13277,13276,13277,13148,13149,13147,13276,13275,13276,13147,13148,13146,13275,13274,13275,13146,13147,13145,13274,13273,13274,13145,13146,13144,13273,13272,13273,13144,13145,13143,13272,13271,13272,13143,13144,13142,13271,13270,13271,13142,13143,13141,13270,13269,13270,13141,13142,13140,13269,13268,13269,13140,13141,13139,13268,13267,13268,13139,13140,13138,13267,13266,13267,13138,13139,13137,13266,13265,13266,13137,13138,13136,13265,13264,13265,13136,13137,13135,13264,13263,13264,13135,13136,13134,13263,13262,13263,13134,13135,13133,13262,13261,13262,13133,13134,13132,13261,13260,13261,13132,13133,13131,13260,13259,13260,13131,13132,13130,13259,13258,13259,13130,13131,13129,13258,13257,13258,13129,13130,13128,13257,13256,13257,13128,13129,13127,13256,13255,13256,13127,13128,13126,13255,13254,13255,13126,13127,13125,13254,13253,13254,13125,13126,13124,13253,13252,13253,13124,13125,13123,13252,13251,13252,13123,13124,13122,13251,13250,13251,13122,13123,13121,13250,13249,13250,13121,13122,13120,13249,13248,13249,13120,13121,13119,13248,13247,13248,13119,13120,13118,13247,13246,13247,13118,13119,13117,13246,13245,13246,13117,13118,13116,13245,13244,13245,13116,13117,13115,13244,13243,13244,13115,13116,13114,13243,13242,13243,13114,13115,13113,13242,13241,13242,13113,13114,13112,13241,13240,13241,13112,13113,13111,13240,13239,13240,13111,13112,13110,13239,13238,13239,13110,13111,13109,13238,13237,13238,13109,13110,13108,13237,13236,13237,13108,13109,13107,13236,13235,13236,13107,13108,13106,13235,13234,13235,13106,13107,13105,13234,13233,13234,13105,13106,13104,13233,13232,13233,13104,13105,13103,13232,13231,13232,13103,13104,13102,13231,13230,13231,13102,13103,13101,13230,13229,13230,13101,13102,13100,13229,13228,13229,13100,13101,13099,13228,13227,13228,13099,13100,13098,13227,13226,13227,13098,13099,13097,13226,13225,13226,13097,13098,13096,13225,13224,13225,13096,13097,13095,13224,13223,13224,13095,13096,13094,13223,13222,13223,13094,13095,13093,13222,13221,13222,13093,13094,13092,13221,13220,13221,13092,13093,13091,13220,13219,13220,13091,13092,13090,13219,13218,13219,13090,13091,13089,13218,13217,13218,13089,13090,13088,13217,13216,13217,13088,13089,13087,13216,13215,13216,13087,13088,13086,13215,13214,13215,13086,13087,13085,13214,13213,13214,13085,13086,13084,13213,13212,13213,13084,13085,13083,13212,13211,13212,13083,13084,13082,13211,13210,13211,13082,13083,13081,13210,13209,13210,13081,13082,13080,13209,13208,13209,13080,13081,13079,13208,13207,13208,13079,13080,13078,13207,13206,13207,13078,13079,13077,13206,13205,13206,13077,13078,13076,13205,13204,13205,13076,13077,13075,13204,13203,13204,13075,13076,13074,13203,13202,13203,13074,13075,13073,13202,13201,13202,13073,13074,13072,13201,13200,13201,13072,13073,13071,13200,13199,13200,13071,13072,13070,13199,13198,13199,13070,13071,13069,13198,13197,13198,13069,13070,13068,13197,13196,13197,13068,13069,13067,13196,13195,13196,13067,13068,13066,13195,13194,13195,13066,13067,13065,13194,13193,13194,13065,13066,13064,13193,13192,13193,13064,13065,13063,13192,13191,13192,13063,13064,13062,13191,13190,13191,13062,13063,13061,13190,13189,13190,13061,13062,13060,13189,13188,13189,13060,13061,13059,13188,13187,13188,13059,13060,13058,13187,13186,13187,13058,13059,13057,13186,13185,13186,13057,13058,13056,13185,13184,13185,13056,13057,13310,13439,13438,13439,13310,13311,13309,13438,13437,13438,13309,13310,13308,13437,13436,13437,13308,13309,13307,13436,13435,13436,13307,13308,13306,13435,13434,13435,13306,13307,13305,13434,13433,13434,13305,13306,13304,13433,13432,13433,13304,13305,13303,13432,13431,13432,13303,13304,13302,13431,13430,13431,13302,13303,13301,13430,13429,13430,13301,13302,13300,13429,13428,13429,13300,13301,13299,13428,13427,13428,13299,13300,13298,13427,13426,13427,13298,13299,13297,13426,13425,13426,13297,13298,13296,13425,13424,13425,13296,13297,13295,13424,13423,13424,13295,13296,13294,13423,13422,13423,13294,13295,13293,13422,13421,13422,13293,13294,13292,13421,13420,13421,13292,13293,13291,13420,13419,13420,13291,13292,13290,13419,13418,13419,13290,13291,13289,13418,13417,13418,13289,13290,13288,13417,13416,13417,13288,13289,13287,13416,13415,13416,13287,13288,13286,13415,13414,13415,13286,13287,13285,13414,13413,13414,13285,13286,13284,13413,13412,13413,13284,13285,13283,13412,13411,13412,13283,13284,13282,13411,13410,13411,13282,13283,13281,13410,13409,13410,13281,13282,13280,13409,13408,13409,13280,13281,13279,13408,13407,13408,13279,13280,13278,13407,13406,13407,13278,13279,13277,13406,13405,13406,13277,13278,13276,13405,13404,13405,13276,13277,13275,13404,13403,13404,13275,13276,13274,13403,13402,13403,13274,13275,13273,13402,13401,13402,13273,13274,13272,13401,13400,13401,13272,13273,13271,13400,13399,13400,13271,13272,13270,13399,13398,13399,13270,13271,13269,13398,13397,13398,13269,13270,13268,13397,13396,13397,13268,13269,13267,13396,13395,13396,13267,13268,13266,13395,13394,13395,13266,13267,13265,13394,13393,13394,13265,13266,13264,13393,13392,13393,13264,13265,13263,13392,13391,13392,13263,13264,13262,13391,13390,13391,13262,13263,13261,13390,13389,13390,13261,13262,13260,13389,13388,13389,13260,13261,13259,13388,13387,13388,13259,13260,13258,13387,13386,13387,13258,13259,13257,13386,13385,13386,13257,13258,13256,13385,13384,13385,13256,13257,13255,13384,13383,13384,13255,13256,13254,13383,13382,13383,13254,13255,13253,13382,13381,13382,13253,13254,13252,13381,13380,13381,13252,13253,13251,13380,13379,13380,13251,13252,13250,13379,13378,13379,13250,13251,13249,13378,13377,13378,13249,13250,13248,13377,13376,13377,13248,13249,13247,13376,13375,13376,13247,13248,13246,13375,13374,13375,13246,13247,13245,13374,13373,13374,13245,13246,13244,13373,13372,13373,13244,13245,13243,13372,13371,13372,13243,13244,13242,13371,13370,13371,13242,13243,13241,13370,13369,13370,13241,13242,13240,13369,13368,13369,13240,13241,13239,13368,13367,13368,13239,13240,13238,13367,13366,13367,13238,13239,13237,13366,13365,13366,13237,13238,13236,13365,13364,13365,13236,13237,13235,13364,13363,13364,13235,13236,13234,13363,13362,13363,13234,13235,13233,13362,13361,13362,13233,13234,13232,13361,13360,13361,13232,13233,13231,13360,13359,13360,13231,13232,13230,13359,13358,13359,13230,13231,13229,13358,13357,13358,13229,13230,13228,13357,13356,13357,13228,13229,13227,13356,13355,13356,13227,13228,13226,13355,13354,13355,13226,13227,13225,13354,13353,13354,13225,13226,13224,13353,13352,13353,13224,13225,13223,13352,13351,13352,13223,13224,13222,13351,13350,13351,13222,13223,13221,13350,13349,13350,13221,13222,13220,13349,13348,13349,13220,13221,13219,13348,13347,13348,13219,13220,13218,13347,13346,13347,13218,13219,13217,13346,13345,13346,13217,13218,13216,13345,13344,13345,13216,13217,13215,13344,13343,13344,13215,13216,13214,13343,13342,13343,13214,13215,13213,13342,13341,13342,13213,13214,13212,13341,13340,13341,13212,13213,13211,13340,13339,13340,13211,13212,13210,13339,13338,13339,13210,13211,13209,13338,13337,13338,13209,13210,13208,13337,13336,13337,13208,13209,13207,13336,13335,13336,13207,13208,13206,13335,13334,13335,13206,13207,13205,13334,13333,13334,13205,13206,13204,13333,13332,13333,13204,13205,13203,13332,13331,13332,13203,13204,13202,13331,13330,13331,13202,13203,13201,13330,13329,13330,13201,13202,13200,13329,13328,13329,13200,13201,13199,13328,13327,13328,13199,13200,13198,13327,13326,13327,13198,13199,13197,13326,13325,13326,13197,13198,13196,13325,13324,13325,13196,13197,13195,13324,13323,13324,13195,13196,13194,13323,13322,13323,13194,13195,13193,13322,13321,13322,13193,13194,13192,13321,13320,13321,13192,13193,13191,13320,13319,13320,13191,13192,13190,13319,13318,13319,13190,13191,13189,13318,13317,13318,13189,13190,13188,13317,13316,13317,13188,13189,13187,13316,13315,13316,13187,13188,13186,13315,13314,13315,13186,13187,13185,13314,13313,13314,13185,13186,13184,13313,13312,13313,13184,13185,13438,13567,13566,13567,13438,13439,13437,13566,13565,13566,13437,13438,13436,13565,13564,13565,13436,13437,13435,13564,13563,13564,13435,13436,13434,13563,13562,13563,13434,13435,13433,13562,13561,13562,13433,13434,13432,13561,13560,13561,13432,13433,13431,13560,13559,13560,13431,13432,13430,13559,13558,13559,13430,13431,13429,13558,13557,13558,13429,13430,13428,13557,13556,13557,13428,13429,13427,13556,13555,13556,13427,13428,13426,13555,13554,13555,13426,13427,13425,13554,13553,13554,13425,13426,13424,13553,13552,13553,13424,13425,13423,13552,13551,13552,13423,13424,13422,13551,13550,13551,13422,13423,13421,13550,13549,13550,13421,13422,13420,13549,13548,13549,13420,13421,13419,13548,13547,13548,13419,13420,13418,13547,13546,13547,13418,13419,13417,13546,13545,13546,13417,13418,13416,13545,13544,13545,13416,13417,13415,13544,13543,13544,13415,13416,13414,13543,13542,13543,13414,13415,13413,13542,13541,13542,13413,13414,13412,13541,13540,13541,13412,13413,13411,13540,13539,13540,13411,13412,13410,13539,13538,13539,13410,13411,13409,13538,13537,13538,13409,13410,13408,13537,13536,13537,13408,13409,13407,13536,13535,13536,13407,13408,13406,13535,13534,13535,13406,13407,13405,13534,13533,13534,13405,13406,13404,13533,13532,13533,13404,13405,13403,13532,13531,13532,13403,13404,13402,13531,13530,13531,13402,13403,13401,13530,13529,13530,13401,13402,13400,13529,13528,13529,13400,13401,13399,13528,13527,13528,13399,13400,13398,13527,13526,13527,13398,13399,13397,13526,13525,13526,13397,13398,13396,13525,13524,13525,13396,13397,13395,13524,13523,13524,13395,13396,13394,13523,13522,13523,13394,13395,13393,13522,13521,13522,13393,13394,13392,13521,13520,13521,13392,13393,13391,13520,13519,13520,13391,13392,13390,13519,13518,13519,13390,13391,13389,13518,13517,13518,13389,13390,13388,13517,13516,13517,13388,13389,13387,13516,13515,13516,13387,13388,13386,13515,13514,13515,13386,13387,13385,13514,13513,13514,13385,13386,13384,13513,13512,13513,13384,13385,13383,13512,13511,13512,13383,13384,13382,13511,13510,13511,13382,13383,13381,13510,13509,13510,13381,13382,13380,13509,13508,13509,13380,13381,13379,13508,13507,13508,13379,13380,13378,13507,13506,13507,13378,13379,13377,13506,13505,13506,13377,13378,13376,13505,13504,13505,13376,13377,13375,13504,13503,13504,13375,13376,13374,13503,13502,13503,13374,13375,13373,13502,13501,13502,13373,13374,13372,13501,13500,13501,13372,13373,13371,13500,13499,13500,13371,13372,13370,13499,13498,13499,13370,13371,13369,13498,13497,13498,13369,13370,13368,13497,13496,13497,13368,13369,13367,13496,13495,13496,13367,13368,13366,13495,13494,13495,13366,13367,13365,13494,13493,13494,13365,13366,13364,13493,13492,13493,13364,13365,13363,13492,13491,13492,13363,13364,13362,13491,13490,13491,13362,13363,13361,13490,13489,13490,13361,13362,13360,13489,13488,13489,13360,13361,13359,13488,13487,13488,13359,13360,13358,13487,13486,13487,13358,13359,13357,13486,13485,13486,13357,13358,13356,13485,13484,13485,13356,13357,13355,13484,13483,13484,13355,13356,13354,13483,13482,13483,13354,13355,13353,13482,13481,13482,13353,13354,13352,13481,13480,13481,13352,13353,13351,13480,13479,13480,13351,13352,13350,13479,13478,13479,13350,13351,13349,13478,13477,13478,13349,13350,13348,13477,13476,13477,13348,13349,13347,13476,13475,13476,13347,13348,13346,13475,13474,13475,13346,13347,13345,13474,13473,13474,13345,13346,13344,13473,13472,13473,13344,13345,13343,13472,13471,13472,13343,13344,13342,13471,13470,13471,13342,13343,13341,13470,13469,13470,13341,13342,13340,13469,13468,13469,13340,13341,13339,13468,13467,13468,13339,13340,13338,13467,13466,13467,13338,13339,13337,13466,13465,13466,13337,13338,13336,13465,13464,13465,13336,13337,13335,13464,13463,13464,13335,13336,13334,13463,13462,13463,13334,13335,13333,13462,13461,13462,13333,13334,13332,13461,13460,13461,13332,13333,13331,13460,13459,13460,13331,13332,13330,13459,13458,13459,13330,13331,13329,13458,13457,13458,13329,13330,13328,13457,13456,13457,13328,13329,13327,13456,13455,13456,13327,13328,13326,13455,13454,13455,13326,13327,13325,13454,13453,13454,13325,13326,13324,13453,13452,13453,13324,13325,13323,13452,13451,13452,13323,13324,13322,13451,13450,13451,13322,13323,13321,13450,13449,13450,13321,13322,13320,13449,13448,13449,13320,13321,13319,13448,13447,13448,13319,13320,13318,13447,13446,13447,13318,13319,13317,13446,13445,13446,13317,13318,13316,13445,13444,13445,13316,13317,13315,13444,13443,13444,13315,13316,13314,13443,13442,13443,13314,13315,13313,13442,13441,13442,13313,13314,13312,13441,13440,13441,13312,13313,13566,13695,13694,13695,13566,13567,13565,13694,13693,13694,13565,13566,13564,13693,13692,13693,13564,13565,13563,13692,13691,13692,13563,13564,13562,13691,13690,13691,13562,13563,13561,13690,13689,13690,13561,13562,13560,13689,13688,13689,13560,13561,13559,13688,13687,13688,13559,13560,13558,13687,13686,13687,13558,13559,13557,13686,13685,13686,13557,13558,13556,13685,13684,13685,13556,13557,13555,13684,13683,13684,13555,13556,13554,13683,13682,13683,13554,13555,13553,13682,13681,13682,13553,13554,13552,13681,13680,13681,13552,13553,13551,13680,13679,13680,13551,13552,13550,13679,13678,13679,13550,13551,13549,13678,13677,13678,13549,13550,13548,13677,13676,13677,13548,13549,13547,13676,13675,13676,13547,13548,13546,13675,13674,13675,13546,13547,13545,13674,13673,13674,13545,13546,13544,13673,13672,13673,13544,13545,13543,13672,13671,13672,13543,13544,13542,13671,13670,13671,13542,13543,13541,13670,13669,13670,13541,13542,13540,13669,13668,13669,13540,13541,13539,13668,13667,13668,13539,13540,13538,13667,13666,13667,13538,13539,13537,13666,13665,13666,13537,13538,13536,13665,13664,13665,13536,13537,13535,13664,13663,13664,13535,13536,13534,13663,13662,13663,13534,13535,13533,13662,13661,13662,13533,13534,13532,13661,13660,13661,13532,13533,13531,13660,13659,13660,13531,13532,13530,13659,13658,13659,13530,13531,13529,13658,13657,13658,13529,13530,13528,13657,13656,13657,13528,13529,13527,13656,13655,13656,13527,13528,13526,13655,13654,13655,13526,13527,13525,13654,13653,13654,13525,13526,13524,13653,13652,13653,13524,13525,13523,13652,13651,13652,13523,13524,13522,13651,13650,13651,13522,13523,13521,13650,13649,13650,13521,13522,13520,13649,13648,13649,13520,13521,13519,13648,13647,13648,13519,13520,13518,13647,13646,13647,13518,13519,13517,13646,13645,13646,13517,13518,13516,13645,13644,13645,13516,13517,13515,13644,13643,13644,13515,13516,13514,13643,13642,13643,13514,13515,13513,13642,13641,13642,13513,13514,13512,13641,13640,13641,13512,13513,13511,13640,13639,13640,13511,13512,13510,13639,13638,13639,13510,13511,13509,13638,13637,13638,13509,13510,13508,13637,13636,13637,13508,13509,13507,13636,13635,13636,13507,13508,13506,13635,13634,13635,13506,13507,13505,13634,13633,13634,13505,13506,13504,13633,13632,13633,13504,13505,13503,13632,13631,13632,13503,13504,13502,13631,13630,13631,13502,13503,13501,13630,13629,13630,13501,13502,13500,13629,13628,13629,13500,13501,13499,13628,13627,13628,13499,13500,13498,13627,13626,13627,13498,13499,13497,13626,13625,13626,13497,13498,13496,13625,13624,13625,13496,13497,13495,13624,13623,13624,13495,13496,13494,13623,13622,13623,13494,13495,13493,13622,13621,13622,13493,13494,13492,13621,13620,13621,13492,13493,13491,13620,13619,13620,13491,13492,13490,13619,13618,13619,13490,13491,13489,13618,13617,13618,13489,13490,13488,13617,13616,13617,13488,13489,13487,13616,13615,13616,13487,13488,13486,13615,13614,13615,13486,13487,13485,13614,13613,13614,13485,13486,13484,13613,13612,13613,13484,13485,13483,13612,13611,13612,13483,13484,13482,13611,13610,13611,13482,13483,13481,13610,13609,13610,13481,13482,13480,13609,13608,13609,13480,13481,13479,13608,13607,13608,13479,13480,13478,13607,13606,13607,13478,13479,13477,13606,13605,13606,13477,13478,13476,13605,13604,13605,13476,13477,13475,13604,13603,13604,13475,13476,13474,13603,13602,13603,13474,13475,13473,13602,13601,13602,13473,13474,13472,13601,13600,13601,13472,13473,13471,13600,13599,13600,13471,13472,13470,13599,13598,13599,13470,13471,13469,13598,13597,13598,13469,13470,13468,13597,13596,13597,13468,13469,13467,13596,13595,13596,13467,13468,13466,13595,13594,13595,13466,13467,13465,13594,13593,13594,13465,13466,13464,13593,13592,13593,13464,13465,13463,13592,13591,13592,13463,13464,13462,13591,13590,13591,13462,13463,13461,13590,13589,13590,13461,13462,13460,13589,13588,13589,13460,13461,13459,13588,13587,13588,13459,13460,13458,13587,13586,13587,13458,13459,13457,13586,13585,13586,13457,13458,13456,13585,13584,13585,13456,13457,13455,13584,13583,13584,13455,13456,13454,13583,13582,13583,13454,13455,13453,13582,13581,13582,13453,13454,13452,13581,13580,13581,13452,13453,13451,13580,13579,13580,13451,13452,13450,13579,13578,13579,13450,13451,13449,13578,13577,13578,13449,13450,13448,13577,13576,13577,13448,13449,13447,13576,13575,13576,13447,13448,13446,13575,13574,13575,13446,13447,13445,13574,13573,13574,13445,13446,13444,13573,13572,13573,13444,13445,13443,13572,13571,13572,13443,13444,13442,13571,13570,13571,13442,13443,13441,13570,13569,13570,13441,13442,13440,13569,13568,13569,13440,13441,13694,13823,13822,13823,13694,13695,13693,13822,13821,13822,13693,13694,13692,13821,13820,13821,13692,13693,13691,13820,13819,13820,13691,13692,13690,13819,13818,13819,13690,13691,13689,13818,13817,13818,13689,13690,13688,13817,13816,13817,13688,13689,13687,13816,13815,13816,13687,13688,13686,13815,13814,13815,13686,13687,13685,13814,13813,13814,13685,13686,13684,13813,13812,13813,13684,13685,13683,13812,13811,13812,13683,13684,13682,13811,13810,13811,13682,13683,13681,13810,13809,13810,13681,13682,13680,13809,13808,13809,13680,13681,13679,13808,13807,13808,13679,13680,13678,13807,13806,13807,13678,13679,13677,13806,13805,13806,13677,13678,13676,13805,13804,13805,13676,13677,13675,13804,13803,13804,13675,13676,13674,13803,13802,13803,13674,13675,13673,13802,13801,13802,13673,13674,13672,13801,13800,13801,13672,13673,13671,13800,13799,13800,13671,13672,13670,13799,13798,13799,13670,13671,13669,13798,13797,13798,13669,13670,13668,13797,13796,13797,13668,13669,13667,13796,13795,13796,13667,13668,13666,13795,13794,13795,13666,13667,13665,13794,13793,13794,13665,13666,13664,13793,13792,13793,13664,13665,13663,13792,13791,13792,13663,13664,13662,13791,13790,13791,13662,13663,13661,13790,13789,13790,13661,13662,13660,13789,13788,13789,13660,13661,13659,13788,13787,13788,13659,13660,13658,13787,13786,13787,13658,13659,13657,13786,13785,13786,13657,13658,13656,13785,13784,13785,13656,13657,13655,13784,13783,13784,13655,13656,13654,13783,13782,13783,13654,13655,13653,13782,13781,13782,13653,13654,13652,13781,13780,13781,13652,13653,13651,13780,13779,13780,13651,13652,13650,13779,13778,13779,13650,13651,13649,13778,13777,13778,13649,13650,13648,13777,13776,13777,13648,13649,13647,13776,13775,13776,13647,13648,13646,13775,13774,13775,13646,13647,13645,13774,13773,13774,13645,13646,13644,13773,13772,13773,13644,13645,13643,13772,13771,13772,13643,13644,13642,13771,13770,13771,13642,13643,13641,13770,13769,13770,13641,13642,13640,13769,13768,13769,13640,13641,13639,13768,13767,13768,13639,13640,13638,13767,13766,13767,13638,13639,13637,13766,13765,13766,13637,13638,13636,13765,13764,13765,13636,13637,13635,13764,13763,13764,13635,13636,13634,13763,13762,13763,13634,13635,13633,13762,13761,13762,13633,13634,13632,13761,13760,13761,13632,13633,13631,13760,13759,13760,13631,13632,13630,13759,13758,13759,13630,13631,13629,13758,13757,13758,13629,13630,13628,13757,13756,13757,13628,13629,13627,13756,13755,13756,13627,13628,13626,13755,13754,13755,13626,13627,13625,13754,13753,13754,13625,13626,13624,13753,13752,13753,13624,13625,13623,13752,13751,13752,13623,13624,13622,13751,13750,13751,13622,13623,13621,13750,13749,13750,13621,13622,13620,13749,13748,13749,13620,13621,13619,13748,13747,13748,13619,13620,13618,13747,13746,13747,13618,13619,13617,13746,13745,13746,13617,13618,13616,13745,13744,13745,13616,13617,13615,13744,13743,13744,13615,13616,13614,13743,13742,13743,13614,13615,13613,13742,13741,13742,13613,13614,13612,13741,13740,13741,13612,13613,13611,13740,13739,13740,13611,13612,13610,13739,13738,13739,13610,13611,13609,13738,13737,13738,13609,13610,13608,13737,13736,13737,13608,13609,13607,13736,13735,13736,13607,13608,13606,13735,13734,13735,13606,13607,13605,13734,13733,13734,13605,13606,13604,13733,13732,13733,13604,13605,13603,13732,13731,13732,13603,13604,13602,13731,13730,13731,13602,13603,13601,13730,13729,13730,13601,13602,13600,13729,13728,13729,13600,13601,13599,13728,13727,13728,13599,13600,13598,13727,13726,13727,13598,13599,13597,13726,13725,13726,13597,13598,13596,13725,13724,13725,13596,13597,13595,13724,13723,13724,13595,13596,13594,13723,13722,13723,13594,13595,13593,13722,13721,13722,13593,13594,13592,13721,13720,13721,13592,13593,13591,13720,13719,13720,13591,13592,13590,13719,13718,13719,13590,13591,13589,13718,13717,13718,13589,13590,13588,13717,13716,13717,13588,13589,13587,13716,13715,13716,13587,13588,13586,13715,13714,13715,13586,13587,13585,13714,13713,13714,13585,13586,13584,13713,13712,13713,13584,13585,13583,13712,13711,13712,13583,13584,13582,13711,13710,13711,13582,13583,13581,13710,13709,13710,13581,13582,13580,13709,13708,13709,13580,13581,13579,13708,13707,13708,13579,13580,13578,13707,13706,13707,13578,13579,13577,13706,13705,13706,13577,13578,13576,13705,13704,13705,13576,13577,13575,13704,13703,13704,13575,13576,13574,13703,13702,13703,13574,13575,13573,13702,13701,13702,13573,13574,13572,13701,13700,13701,13572,13573,13571,13700,13699,13700,13571,13572,13570,13699,13698,13699,13570,13571,13569,13698,13697,13698,13569,13570,13568,13697,13696,13697,13568,13569,13822,13951,13950,13951,13822,13823,13821,13950,13949,13950,13821,13822,13820,13949,13948,13949,13820,13821,13819,13948,13947,13948,13819,13820,13818,13947,13946,13947,13818,13819,13817,13946,13945,13946,13817,13818,13816,13945,13944,13945,13816,13817,13815,13944,13943,13944,13815,13816,13814,13943,13942,13943,13814,13815,13813,13942,13941,13942,13813,13814,13812,13941,13940,13941,13812,13813,13811,13940,13939,13940,13811,13812,13810,13939,13938,13939,13810,13811,13809,13938,13937,13938,13809,13810,13808,13937,13936,13937,13808,13809,13807,13936,13935,13936,13807,13808,13806,13935,13934,13935,13806,13807,13805,13934,13933,13934,13805,13806,13804,13933,13932,13933,13804,13805,13803,13932,13931,13932,13803,13804,13802,13931,13930,13931,13802,13803,13801,13930,13929,13930,13801,13802,13800,13929,13928,13929,13800,13801,13799,13928,13927,13928,13799,13800,13798,13927,13926,13927,13798,13799,13797,13926,13925,13926,13797,13798,13796,13925,13924,13925,13796,13797,13795,13924,13923,13924,13795,13796,13794,13923,13922,13923,13794,13795,13793,13922,13921,13922,13793,13794,13792,13921,13920,13921,13792,13793,13791,13920,13919,13920,13791,13792,13790,13919,13918,13919,13790,13791,13789,13918,13917,13918,13789,13790,13788,13917,13916,13917,13788,13789,13787,13916,13915,13916,13787,13788,13786,13915,13914,13915,13786,13787,13785,13914,13913,13914,13785,13786,13784,13913,13912,13913,13784,13785,13783,13912,13911,13912,13783,13784,13782,13911,13910,13911,13782,13783,13781,13910,13909,13910,13781,13782,13780,13909,13908,13909,13780,13781,13779,13908,13907,13908,13779,13780,13778,13907,13906,13907,13778,13779,13777,13906,13905,13906,13777,13778,13776,13905,13904,13905,13776,13777,13775,13904,13903,13904,13775,13776,13774,13903,13902,13903,13774,13775,13773,13902,13901,13902,13773,13774,13772,13901,13900,13901,13772,13773,13771,13900,13899,13900,13771,13772,13770,13899,13898,13899,13770,13771,13769,13898,13897,13898,13769,13770,13768,13897,13896,13897,13768,13769,13767,13896,13895,13896,13767,13768,13766,13895,13894,13895,13766,13767,13765,13894,13893,13894,13765,13766,13764,13893,13892,13893,13764,13765,13763,13892,13891,13892,13763,13764,13762,13891,13890,13891,13762,13763,13761,13890,13889,13890,13761,13762,13760,13889,13888,13889,13760,13761,13759,13888,13887,13888,13759,13760,13758,13887,13886,13887,13758,13759,13757,13886,13885,13886,13757,13758,13756,13885,13884,13885,13756,13757,13755,13884,13883,13884,13755,13756,13754,13883,13882,13883,13754,13755,13753,13882,13881,13882,13753,13754,13752,13881,13880,13881,13752,13753,13751,13880,13879,13880,13751,13752,13750,13879,13878,13879,13750,13751,13749,13878,13877,13878,13749,13750,13748,13877,13876,13877,13748,13749,13747,13876,13875,13876,13747,13748,13746,13875,13874,13875,13746,13747,13745,13874,13873,13874,13745,13746,13744,13873,13872,13873,13744,13745,13743,13872,13871,13872,13743,13744,13742,13871,13870,13871,13742,13743,13741,13870,13869,13870,13741,13742,13740,13869,13868,13869,13740,13741,13739,13868,13867,13868,13739,13740,13738,13867,13866,13867,13738,13739,13737,13866,13865,13866,13737,13738,13736,13865,13864,13865,13736,13737,13735,13864,13863,13864,13735,13736,13734,13863,13862,13863,13734,13735,13733,13862,13861,13862,13733,13734,13732,13861,13860,13861,13732,13733,13731,13860,13859,13860,13731,13732,13730,13859,13858,13859,13730,13731,13729,13858,13857,13858,13729,13730,13728,13857,13856,13857,13728,13729,13727,13856,13855,13856,13727,13728,13726,13855,13854,13855,13726,13727,13725,13854,13853,13854,13725,13726,13724,13853,13852,13853,13724,13725,13723,13852,13851,13852,13723,13724,13722,13851,13850,13851,13722,13723,13721,13850,13849,13850,13721,13722,13720,13849,13848,13849,13720,13721,13719,13848,13847,13848,13719,13720,13718,13847,13846,13847,13718,13719,13717,13846,13845,13846,13717,13718,13716,13845,13844,13845,13716,13717,13715,13844,13843,13844,13715,13716,13714,13843,13842,13843,13714,13715,13713,13842,13841,13842,13713,13714,13712,13841,13840,13841,13712,13713,13711,13840,13839,13840,13711,13712,13710,13839,13838,13839,13710,13711,13709,13838,13837,13838,13709,13710,13708,13837,13836,13837,13708,13709,13707,13836,13835,13836,13707,13708,13706,13835,13834,13835,13706,13707,13705,13834,13833,13834,13705,13706,13704,13833,13832,13833,13704,13705,13703,13832,13831,13832,13703,13704,13702,13831,13830,13831,13702,13703,13701,13830,13829,13830,13701,13702,13700,13829,13828,13829,13700,13701,13699,13828,13827,13828,13699,13700,13698,13827,13826,13827,13698,13699,13697,13826,13825,13826,13697,13698,13696,13825,13824,13825,13696,13697,13950,14079,14078,14079,13950,13951,13949,14078,14077,14078,13949,13950,13948,14077,14076,14077,13948,13949,13947,14076,14075,14076,13947,13948,13946,14075,14074,14075,13946,13947,13945,14074,14073,14074,13945,13946,13944,14073,14072,14073,13944,13945,13943,14072,14071,14072,13943,13944,13942,14071,14070,14071,13942,13943,13941,14070,14069,14070,13941,13942,13940,14069,14068,14069,13940,13941,13939,14068,14067,14068,13939,13940,13938,14067,14066,14067,13938,13939,13937,14066,14065,14066,13937,13938,13936,14065,14064,14065,13936,13937,13935,14064,14063,14064,13935,13936,13934,14063,14062,14063,13934,13935,13933,14062,14061,14062,13933,13934,13932,14061,14060,14061,13932,13933,13931,14060,14059,14060,13931,13932,13930,14059,14058,14059,13930,13931,13929,14058,14057,14058,13929,13930,13928,14057,14056,14057,13928,13929,13927,14056,14055,14056,13927,13928,13926,14055,14054,14055,13926,13927,13925,14054,14053,14054,13925,13926,13924,14053,14052,14053,13924,13925,13923,14052,14051,14052,13923,13924,13922,14051,14050,14051,13922,13923,13921,14050,14049,14050,13921,13922,13920,14049,14048,14049,13920,13921,13919,14048,14047,14048,13919,13920,13918,14047,14046,14047,13918,13919,13917,14046,14045,14046,13917,13918,13916,14045,14044,14045,13916,13917,13915,14044,14043,14044,13915,13916,13914,14043,14042,14043,13914,13915,13913,14042,14041,14042,13913,13914,13912,14041,14040,14041,13912,13913,13911,14040,14039,14040,13911,13912,13910,14039,14038,14039,13910,13911,13909,14038,14037,14038,13909,13910,13908,14037,14036,14037,13908,13909,13907,14036,14035,14036,13907,13908,13906,14035,14034,14035,13906,13907,13905,14034,14033,14034,13905,13906,13904,14033,14032,14033,13904,13905,13903,14032,14031,14032,13903,13904,13902,14031,14030,14031,13902,13903,13901,14030,14029,14030,13901,13902,13900,14029,14028,14029,13900,13901,13899,14028,14027,14028,13899,13900,13898,14027,14026,14027,13898,13899,13897,14026,14025,14026,13897,13898,13896,14025,14024,14025,13896,13897,13895,14024,14023,14024,13895,13896,13894,14023,14022,14023,13894,13895,13893,14022,14021,14022,13893,13894,13892,14021,14020,14021,13892,13893,13891,14020,14019,14020,13891,13892,13890,14019,14018,14019,13890,13891,13889,14018,14017,14018,13889,13890,13888,14017,14016,14017,13888,13889,13887,14016,14015,14016,13887,13888,13886,14015,14014,14015,13886,13887,13885,14014,14013,14014,13885,13886,13884,14013,14012,14013,13884,13885,13883,14012,14011,14012,13883,13884,13882,14011,14010,14011,13882,13883,13881,14010,14009,14010,13881,13882,13880,14009,14008,14009,13880,13881,13879,14008,14007,14008,13879,13880,13878,14007,14006,14007,13878,13879,13877,14006,14005,14006,13877,13878,13876,14005,14004,14005,13876,13877,13875,14004,14003,14004,13875,13876,13874,14003,14002,14003,13874,13875,13873,14002,14001,14002,13873,13874,13872,14001,14000,14001,13872,13873,13871,14000,13999,14000,13871,13872,13870,13999,13998,13999,13870,13871,13869,13998,13997,13998,13869,13870,13868,13997,13996,13997,13868,13869,13867,13996,13995,13996,13867,13868,13866,13995,13994,13995,13866,13867,13865,13994,13993,13994,13865,13866,13864,13993,13992,13993,13864,13865,13863,13992,13991,13992,13863,13864,13862,13991,13990,13991,13862,13863,13861,13990,13989,13990,13861,13862,13860,13989,13988,13989,13860,13861,13859,13988,13987,13988,13859,13860,13858,13987,13986,13987,13858,13859,13857,13986,13985,13986,13857,13858,13856,13985,13984,13985,13856,13857,13855,13984,13983,13984,13855,13856,13854,13983,13982,13983,13854,13855,13853,13982,13981,13982,13853,13854,13852,13981,13980,13981,13852,13853,13851,13980,13979,13980,13851,13852,13850,13979,13978,13979,13850,13851,13849,13978,13977,13978,13849,13850,13848,13977,13976,13977,13848,13849,13847,13976,13975,13976,13847,13848,13846,13975,13974,13975,13846,13847,13845,13974,13973,13974,13845,13846,13844,13973,13972,13973,13844,13845,13843,13972,13971,13972,13843,13844,13842,13971,13970,13971,13842,13843,13841,13970,13969,13970,13841,13842,13840,13969,13968,13969,13840,13841,13839,13968,13967,13968,13839,13840,13838,13967,13966,13967,13838,13839,13837,13966,13965,13966,13837,13838,13836,13965,13964,13965,13836,13837,13835,13964,13963,13964,13835,13836,13834,13963,13962,13963,13834,13835,13833,13962,13961,13962,13833,13834,13832,13961,13960,13961,13832,13833,13831,13960,13959,13960,13831,13832,13830,13959,13958,13959,13830,13831,13829,13958,13957,13958,13829,13830,13828,13957,13956,13957,13828,13829,13827,13956,13955,13956,13827,13828,13826,13955,13954,13955,13826,13827,13825,13954,13953,13954,13825,13826,13824,13953,13952,13953,13824,13825,14078,14207,14206,14207,14078,14079,14077,14206,14205,14206,14077,14078,14076,14205,14204,14205,14076,14077,14075,14204,14203,14204,14075,14076,14074,14203,14202,14203,14074,14075,14073,14202,14201,14202,14073,14074,14072,14201,14200,14201,14072,14073,14071,14200,14199,14200,14071,14072,14070,14199,14198,14199,14070,14071,14069,14198,14197,14198,14069,14070,14068,14197,14196,14197,14068,14069,14067,14196,14195,14196,14067,14068,14066,14195,14194,14195,14066,14067,14065,14194,14193,14194,14065,14066,14064,14193,14192,14193,14064,14065,14063,14192,14191,14192,14063,14064,14062,14191,14190,14191,14062,14063,14061,14190,14189,14190,14061,14062,14060,14189,14188,14189,14060,14061,14059,14188,14187,14188,14059,14060,14058,14187,14186,14187,14058,14059,14057,14186,14185,14186,14057,14058,14056,14185,14184,14185,14056,14057,14055,14184,14183,14184,14055,14056,14054,14183,14182,14183,14054,14055,14053,14182,14181,14182,14053,14054,14052,14181,14180,14181,14052,14053,14051,14180,14179,14180,14051,14052,14050,14179,14178,14179,14050,14051,14049,14178,14177,14178,14049,14050,14048,14177,14176,14177,14048,14049,14047,14176,14175,14176,14047,14048,14046,14175,14174,14175,14046,14047,14045,14174,14173,14174,14045,14046,14044,14173,14172,14173,14044,14045,14043,14172,14171,14172,14043,14044,14042,14171,14170,14171,14042,14043,14041,14170,14169,14170,14041,14042,14040,14169,14168,14169,14040,14041,14039,14168,14167,14168,14039,14040,14038,14167,14166,14167,14038,14039,14037,14166,14165,14166,14037,14038,14036,14165,14164,14165,14036,14037,14035,14164,14163,14164,14035,14036,14034,14163,14162,14163,14034,14035,14033,14162,14161,14162,14033,14034,14032,14161,14160,14161,14032,14033,14031,14160,14159,14160,14031,14032,14030,14159,14158,14159,14030,14031,14029,14158,14157,14158,14029,14030,14028,14157,14156,14157,14028,14029,14027,14156,14155,14156,14027,14028,14026,14155,14154,14155,14026,14027,14025,14154,14153,14154,14025,14026,14024,14153,14152,14153,14024,14025,14023,14152,14151,14152,14023,14024,14022,14151,14150,14151,14022,14023,14021,14150,14149,14150,14021,14022,14020,14149,14148,14149,14020,14021,14019,14148,14147,14148,14019,14020,14018,14147,14146,14147,14018,14019,14017,14146,14145,14146,14017,14018,14016,14145,14144,14145,14016,14017,14015,14144,14143,14144,14015,14016,14014,14143,14142,14143,14014,14015,14013,14142,14141,14142,14013,14014,14012,14141,14140,14141,14012,14013,14011,14140,14139,14140,14011,14012,14010,14139,14138,14139,14010,14011,14009,14138,14137,14138,14009,14010,14008,14137,14136,14137,14008,14009,14007,14136,14135,14136,14007,14008,14006,14135,14134,14135,14006,14007,14005,14134,14133,14134,14005,14006,14004,14133,14132,14133,14004,14005,14003,14132,14131,14132,14003,14004,14002,14131,14130,14131,14002,14003,14001,14130,14129,14130,14001,14002,14000,14129,14128,14129,14000,14001,13999,14128,14127,14128,13999,14000,13998,14127,14126,14127,13998,13999,13997,14126,14125,14126,13997,13998,13996,14125,14124,14125,13996,13997,13995,14124,14123,14124,13995,13996,13994,14123,14122,14123,13994,13995,13993,14122,14121,14122,13993,13994,13992,14121,14120,14121,13992,13993,13991,14120,14119,14120,13991,13992,13990,14119,14118,14119,13990,13991,13989,14118,14117,14118,13989,13990,13988,14117,14116,14117,13988,13989,13987,14116,14115,14116,13987,13988,13986,14115,14114,14115,13986,13987,13985,14114,14113,14114,13985,13986,13984,14113,14112,14113,13984,13985,13983,14112,14111,14112,13983,13984,13982,14111,14110,14111,13982,13983,13981,14110,14109,14110,13981,13982,13980,14109,14108,14109,13980,13981,13979,14108,14107,14108,13979,13980,13978,14107,14106,14107,13978,13979,13977,14106,14105,14106,13977,13978,13976,14105,14104,14105,13976,13977,13975,14104,14103,14104,13975,13976,13974,14103,14102,14103,13974,13975,13973,14102,14101,14102,13973,13974,13972,14101,14100,14101,13972,13973,13971,14100,14099,14100,13971,13972,13970,14099,14098,14099,13970,13971,13969,14098,14097,14098,13969,13970,13968,14097,14096,14097,13968,13969,13967,14096,14095,14096,13967,13968,13966,14095,14094,14095,13966,13967,13965,14094,14093,14094,13965,13966,13964,14093,14092,14093,13964,13965,13963,14092,14091,14092,13963,13964,13962,14091,14090,14091,13962,13963,13961,14090,14089,14090,13961,13962,13960,14089,14088,14089,13960,13961,13959,14088,14087,14088,13959,13960,13958,14087,14086,14087,13958,13959,13957,14086,14085,14086,13957,13958,13956,14085,14084,14085,13956,13957,13955,14084,14083,14084,13955,13956,13954,14083,14082,14083,13954,13955,13953,14082,14081,14082,13953,13954,13952,14081,14080,14081,13952,13953,14206,14335,14334,14335,14206,14207,14205,14334,14333,14334,14205,14206,14204,14333,14332,14333,14204,14205,14203,14332,14331,14332,14203,14204,14202,14331,14330,14331,14202,14203,14201,14330,14329,14330,14201,14202,14200,14329,14328,14329,14200,14201,14199,14328,14327,14328,14199,14200,14198,14327,14326,14327,14198,14199,14197,14326,14325,14326,14197,14198,14196,14325,14324,14325,14196,14197,14195,14324,14323,14324,14195,14196,14194,14323,14322,14323,14194,14195,14193,14322,14321,14322,14193,14194,14192,14321,14320,14321,14192,14193,14191,14320,14319,14320,14191,14192,14190,14319,14318,14319,14190,14191,14189,14318,14317,14318,14189,14190,14188,14317,14316,14317,14188,14189,14187,14316,14315,14316,14187,14188,14186,14315,14314,14315,14186,14187,14185,14314,14313,14314,14185,14186,14184,14313,14312,14313,14184,14185,14183,14312,14311,14312,14183,14184,14182,14311,14310,14311,14182,14183,14181,14310,14309,14310,14181,14182,14180,14309,14308,14309,14180,14181,14179,14308,14307,14308,14179,14180,14178,14307,14306,14307,14178,14179,14177,14306,14305,14306,14177,14178,14176,14305,14304,14305,14176,14177,14175,14304,14303,14304,14175,14176,14174,14303,14302,14303,14174,14175,14173,14302,14301,14302,14173,14174,14172,14301,14300,14301,14172,14173,14171,14300,14299,14300,14171,14172,14170,14299,14298,14299,14170,14171,14169,14298,14297,14298,14169,14170,14168,14297,14296,14297,14168,14169,14167,14296,14295,14296,14167,14168,14166,14295,14294,14295,14166,14167,14165,14294,14293,14294,14165,14166,14164,14293,14292,14293,14164,14165,14163,14292,14291,14292,14163,14164,14162,14291,14290,14291,14162,14163,14161,14290,14289,14290,14161,14162,14160,14289,14288,14289,14160,14161,14159,14288,14287,14288,14159,14160,14158,14287,14286,14287,14158,14159,14157,14286,14285,14286,14157,14158,14156,14285,14284,14285,14156,14157,14155,14284,14283,14284,14155,14156,14154,14283,14282,14283,14154,14155,14153,14282,14281,14282,14153,14154,14152,14281,14280,14281,14152,14153,14151,14280,14279,14280,14151,14152,14150,14279,14278,14279,14150,14151,14149,14278,14277,14278,14149,14150,14148,14277,14276,14277,14148,14149,14147,14276,14275,14276,14147,14148,14146,14275,14274,14275,14146,14147,14145,14274,14273,14274,14145,14146,14144,14273,14272,14273,14144,14145,14143,14272,14271,14272,14143,14144,14142,14271,14270,14271,14142,14143,14141,14270,14269,14270,14141,14142,14140,14269,14268,14269,14140,14141,14139,14268,14267,14268,14139,14140,14138,14267,14266,14267,14138,14139,14137,14266,14265,14266,14137,14138,14136,14265,14264,14265,14136,14137,14135,14264,14263,14264,14135,14136,14134,14263,14262,14263,14134,14135,14133,14262,14261,14262,14133,14134,14132,14261,14260,14261,14132,14133,14131,14260,14259,14260,14131,14132,14130,14259,14258,14259,14130,14131,14129,14258,14257,14258,14129,14130,14128,14257,14256,14257,14128,14129,14127,14256,14255,14256,14127,14128,14126,14255,14254,14255,14126,14127,14125,14254,14253,14254,14125,14126,14124,14253,14252,14253,14124,14125,14123,14252,14251,14252,14123,14124,14122,14251,14250,14251,14122,14123,14121,14250,14249,14250,14121,14122,14120,14249,14248,14249,14120,14121,14119,14248,14247,14248,14119,14120,14118,14247,14246,14247,14118,14119,14117,14246,14245,14246,14117,14118,14116,14245,14244,14245,14116,14117,14115,14244,14243,14244,14115,14116,14114,14243,14242,14243,14114,14115,14113,14242,14241,14242,14113,14114,14112,14241,14240,14241,14112,14113,14111,14240,14239,14240,14111,14112,14110,14239,14238,14239,14110,14111,14109,14238,14237,14238,14109,14110,14108,14237,14236,14237,14108,14109,14107,14236,14235,14236,14107,14108,14106,14235,14234,14235,14106,14107,14105,14234,14233,14234,14105,14106,14104,14233,14232,14233,14104,14105,14103,14232,14231,14232,14103,14104,14102,14231,14230,14231,14102,14103,14101,14230,14229,14230,14101,14102,14100,14229,14228,14229,14100,14101,14099,14228,14227,14228,14099,14100,14098,14227,14226,14227,14098,14099,14097,14226,14225,14226,14097,14098,14096,14225,14224,14225,14096,14097,14095,14224,14223,14224,14095,14096,14094,14223,14222,14223,14094,14095,14093,14222,14221,14222,14093,14094,14092,14221,14220,14221,14092,14093,14091,14220,14219,14220,14091,14092,14090,14219,14218,14219,14090,14091,14089,14218,14217,14218,14089,14090,14088,14217,14216,14217,14088,14089,14087,14216,14215,14216,14087,14088,14086,14215,14214,14215,14086,14087,14085,14214,14213,14214,14085,14086,14084,14213,14212,14213,14084,14085,14083,14212,14211,14212,14083,14084,14082,14211,14210,14211,14082,14083,14081,14210,14209,14210,14081,14082,14080,14209,14208,14209,14080,14081,14334,14463,14462,14463,14334,14335,14333,14462,14461,14462,14333,14334,14332,14461,14460,14461,14332,14333,14331,14460,14459,14460,14331,14332,14330,14459,14458,14459,14330,14331,14329,14458,14457,14458,14329,14330,14328,14457,14456,14457,14328,14329,14327,14456,14455,14456,14327,14328,14326,14455,14454,14455,14326,14327,14325,14454,14453,14454,14325,14326,14324,14453,14452,14453,14324,14325,14323,14452,14451,14452,14323,14324,14322,14451,14450,14451,14322,14323,14321,14450,14449,14450,14321,14322,14320,14449,14448,14449,14320,14321,14319,14448,14447,14448,14319,14320,14318,14447,14446,14447,14318,14319,14317,14446,14445,14446,14317,14318,14316,14445,14444,14445,14316,14317,14315,14444,14443,14444,14315,14316,14314,14443,14442,14443,14314,14315,14313,14442,14441,14442,14313,14314,14312,14441,14440,14441,14312,14313,14311,14440,14439,14440,14311,14312,14310,14439,14438,14439,14310,14311,14309,14438,14437,14438,14309,14310,14308,14437,14436,14437,14308,14309,14307,14436,14435,14436,14307,14308,14306,14435,14434,14435,14306,14307,14305,14434,14433,14434,14305,14306,14304,14433,14432,14433,14304,14305,14303,14432,14431,14432,14303,14304,14302,14431,14430,14431,14302,14303,14301,14430,14429,14430,14301,14302,14300,14429,14428,14429,14300,14301,14299,14428,14427,14428,14299,14300,14298,14427,14426,14427,14298,14299,14297,14426,14425,14426,14297,14298,14296,14425,14424,14425,14296,14297,14295,14424,14423,14424,14295,14296,14294,14423,14422,14423,14294,14295,14293,14422,14421,14422,14293,14294,14292,14421,14420,14421,14292,14293,14291,14420,14419,14420,14291,14292,14290,14419,14418,14419,14290,14291,14289,14418,14417,14418,14289,14290,14288,14417,14416,14417,14288,14289,14287,14416,14415,14416,14287,14288,14286,14415,14414,14415,14286,14287,14285,14414,14413,14414,14285,14286,14284,14413,14412,14413,14284,14285,14283,14412,14411,14412,14283,14284,14282,14411,14410,14411,14282,14283,14281,14410,14409,14410,14281,14282,14280,14409,14408,14409,14280,14281,14279,14408,14407,14408,14279,14280,14278,14407,14406,14407,14278,14279,14277,14406,14405,14406,14277,14278,14276,14405,14404,14405,14276,14277,14275,14404,14403,14404,14275,14276,14274,14403,14402,14403,14274,14275,14273,14402,14401,14402,14273,14274,14272,14401,14400,14401,14272,14273,14271,14400,14399,14400,14271,14272,14270,14399,14398,14399,14270,14271,14269,14398,14397,14398,14269,14270,14268,14397,14396,14397,14268,14269,14267,14396,14395,14396,14267,14268,14266,14395,14394,14395,14266,14267,14265,14394,14393,14394,14265,14266,14264,14393,14392,14393,14264,14265,14263,14392,14391,14392,14263,14264,14262,14391,14390,14391,14262,14263,14261,14390,14389,14390,14261,14262,14260,14389,14388,14389,14260,14261,14259,14388,14387,14388,14259,14260,14258,14387,14386,14387,14258,14259,14257,14386,14385,14386,14257,14258,14256,14385,14384,14385,14256,14257,14255,14384,14383,14384,14255,14256,14254,14383,14382,14383,14254,14255,14253,14382,14381,14382,14253,14254,14252,14381,14380,14381,14252,14253,14251,14380,14379,14380,14251,14252,14250,14379,14378,14379,14250,14251,14249,14378,14377,14378,14249,14250,14248,14377,14376,14377,14248,14249,14247,14376,14375,14376,14247,14248,14246,14375,14374,14375,14246,14247,14245,14374,14373,14374,14245,14246,14244,14373,14372,14373,14244,14245,14243,14372,14371,14372,14243,14244,14242,14371,14370,14371,14242,14243,14241,14370,14369,14370,14241,14242,14240,14369,14368,14369,14240,14241,14239,14368,14367,14368,14239,14240,14238,14367,14366,14367,14238,14239,14237,14366,14365,14366,14237,14238,14236,14365,14364,14365,14236,14237,14235,14364,14363,14364,14235,14236,14234,14363,14362,14363,14234,14235,14233,14362,14361,14362,14233,14234,14232,14361,14360,14361,14232,14233,14231,14360,14359,14360,14231,14232,14230,14359,14358,14359,14230,14231,14229,14358,14357,14358,14229,14230,14228,14357,14356,14357,14228,14229,14227,14356,14355,14356,14227,14228,14226,14355,14354,14355,14226,14227,14225,14354,14353,14354,14225,14226,14224,14353,14352,14353,14224,14225,14223,14352,14351,14352,14223,14224,14222,14351,14350,14351,14222,14223,14221,14350,14349,14350,14221,14222,14220,14349,14348,14349,14220,14221,14219,14348,14347,14348,14219,14220,14218,14347,14346,14347,14218,14219,14217,14346,14345,14346,14217,14218,14216,14345,14344,14345,14216,14217,14215,14344,14343,14344,14215,14216,14214,14343,14342,14343,14214,14215,14213,14342,14341,14342,14213,14214,14212,14341,14340,14341,14212,14213,14211,14340,14339,14340,14211,14212,14210,14339,14338,14339,14210,14211,14209,14338,14337,14338,14209,14210,14208,14337,14336,14337,14208,14209,14462,14591,14590,14591,14462,14463,14461,14590,14589,14590,14461,14462,14460,14589,14588,14589,14460,14461,14459,14588,14587,14588,14459,14460,14458,14587,14586,14587,14458,14459,14457,14586,14585,14586,14457,14458,14456,14585,14584,14585,14456,14457,14455,14584,14583,14584,14455,14456,14454,14583,14582,14583,14454,14455,14453,14582,14581,14582,14453,14454,14452,14581,14580,14581,14452,14453,14451,14580,14579,14580,14451,14452,14450,14579,14578,14579,14450,14451,14449,14578,14577,14578,14449,14450,14448,14577,14576,14577,14448,14449,14447,14576,14575,14576,14447,14448,14446,14575,14574,14575,14446,14447,14445,14574,14573,14574,14445,14446,14444,14573,14572,14573,14444,14445,14443,14572,14571,14572,14443,14444,14442,14571,14570,14571,14442,14443,14441,14570,14569,14570,14441,14442,14440,14569,14568,14569,14440,14441,14439,14568,14567,14568,14439,14440,14438,14567,14566,14567,14438,14439,14437,14566,14565,14566,14437,14438,14436,14565,14564,14565,14436,14437,14435,14564,14563,14564,14435,14436,14434,14563,14562,14563,14434,14435,14433,14562,14561,14562,14433,14434,14432,14561,14560,14561,14432,14433,14431,14560,14559,14560,14431,14432,14430,14559,14558,14559,14430,14431,14429,14558,14557,14558,14429,14430,14428,14557,14556,14557,14428,14429,14427,14556,14555,14556,14427,14428,14426,14555,14554,14555,14426,14427,14425,14554,14553,14554,14425,14426,14424,14553,14552,14553,14424,14425,14423,14552,14551,14552,14423,14424,14422,14551,14550,14551,14422,14423,14421,14550,14549,14550,14421,14422,14420,14549,14548,14549,14420,14421,14419,14548,14547,14548,14419,14420,14418,14547,14546,14547,14418,14419,14417,14546,14545,14546,14417,14418,14416,14545,14544,14545,14416,14417,14415,14544,14543,14544,14415,14416,14414,14543,14542,14543,14414,14415,14413,14542,14541,14542,14413,14414,14412,14541,14540,14541,14412,14413,14411,14540,14539,14540,14411,14412,14410,14539,14538,14539,14410,14411,14409,14538,14537,14538,14409,14410,14408,14537,14536,14537,14408,14409,14407,14536,14535,14536,14407,14408,14406,14535,14534,14535,14406,14407,14405,14534,14533,14534,14405,14406,14404,14533,14532,14533,14404,14405,14403,14532,14531,14532,14403,14404,14402,14531,14530,14531,14402,14403,14401,14530,14529,14530,14401,14402,14400,14529,14528,14529,14400,14401,14399,14528,14527,14528,14399,14400,14398,14527,14526,14527,14398,14399,14397,14526,14525,14526,14397,14398,14396,14525,14524,14525,14396,14397,14395,14524,14523,14524,14395,14396,14394,14523,14522,14523,14394,14395,14393,14522,14521,14522,14393,14394,14392,14521,14520,14521,14392,14393,14391,14520,14519,14520,14391,14392,14390,14519,14518,14519,14390,14391,14389,14518,14517,14518,14389,14390,14388,14517,14516,14517,14388,14389,14387,14516,14515,14516,14387,14388,14386,14515,14514,14515,14386,14387,14385,14514,14513,14514,14385,14386,14384,14513,14512,14513,14384,14385,14383,14512,14511,14512,14383,14384,14382,14511,14510,14511,14382,14383,14381,14510,14509,14510,14381,14382,14380,14509,14508,14509,14380,14381,14379,14508,14507,14508,14379,14380,14378,14507,14506,14507,14378,14379,14377,14506,14505,14506,14377,14378,14376,14505,14504,14505,14376,14377,14375,14504,14503,14504,14375,14376,14374,14503,14502,14503,14374,14375,14373,14502,14501,14502,14373,14374,14372,14501,14500,14501,14372,14373,14371,14500,14499,14500,14371,14372,14370,14499,14498,14499,14370,14371,14369,14498,14497,14498,14369,14370,14368,14497,14496,14497,14368,14369,14367,14496,14495,14496,14367,14368,14366,14495,14494,14495,14366,14367,14365,14494,14493,14494,14365,14366,14364,14493,14492,14493,14364,14365,14363,14492,14491,14492,14363,14364,14362,14491,14490,14491,14362,14363,14361,14490,14489,14490,14361,14362,14360,14489,14488,14489,14360,14361,14359,14488,14487,14488,14359,14360,14358,14487,14486,14487,14358,14359,14357,14486,14485,14486,14357,14358,14356,14485,14484,14485,14356,14357,14355,14484,14483,14484,14355,14356,14354,14483,14482,14483,14354,14355,14353,14482,14481,14482,14353,14354,14352,14481,14480,14481,14352,14353,14351,14480,14479,14480,14351,14352,14350,14479,14478,14479,14350,14351,14349,14478,14477,14478,14349,14350,14348,14477,14476,14477,14348,14349,14347,14476,14475,14476,14347,14348,14346,14475,14474,14475,14346,14347,14345,14474,14473,14474,14345,14346,14344,14473,14472,14473,14344,14345,14343,14472,14471,14472,14343,14344,14342,14471,14470,14471,14342,14343,14341,14470,14469,14470,14341,14342,14340,14469,14468,14469,14340,14341,14339,14468,14467,14468,14339,14340,14338,14467,14466,14467,14338,14339,14337,14466,14465,14466,14337,14338,14336,14465,14464,14465,14336,14337,14590,14719,14718,14719,14590,14591,14589,14718,14717,14718,14589,14590,14588,14717,14716,14717,14588,14589,14587,14716,14715,14716,14587,14588,14586,14715,14714,14715,14586,14587,14585,14714,14713,14714,14585,14586,14584,14713,14712,14713,14584,14585,14583,14712,14711,14712,14583,14584,14582,14711,14710,14711,14582,14583,14581,14710,14709,14710,14581,14582,14580,14709,14708,14709,14580,14581,14579,14708,14707,14708,14579,14580,14578,14707,14706,14707,14578,14579,14577,14706,14705,14706,14577,14578,14576,14705,14704,14705,14576,14577,14575,14704,14703,14704,14575,14576,14574,14703,14702,14703,14574,14575,14573,14702,14701,14702,14573,14574,14572,14701,14700,14701,14572,14573,14571,14700,14699,14700,14571,14572,14570,14699,14698,14699,14570,14571,14569,14698,14697,14698,14569,14570,14568,14697,14696,14697,14568,14569,14567,14696,14695,14696,14567,14568,14566,14695,14694,14695,14566,14567,14565,14694,14693,14694,14565,14566,14564,14693,14692,14693,14564,14565,14563,14692,14691,14692,14563,14564,14562,14691,14690,14691,14562,14563,14561,14690,14689,14690,14561,14562,14560,14689,14688,14689,14560,14561,14559,14688,14687,14688,14559,14560,14558,14687,14686,14687,14558,14559,14557,14686,14685,14686,14557,14558,14556,14685,14684,14685,14556,14557,14555,14684,14683,14684,14555,14556,14554,14683,14682,14683,14554,14555,14553,14682,14681,14682,14553,14554,14552,14681,14680,14681,14552,14553,14551,14680,14679,14680,14551,14552,14550,14679,14678,14679,14550,14551,14549,14678,14677,14678,14549,14550,14548,14677,14676,14677,14548,14549,14547,14676,14675,14676,14547,14548,14546,14675,14674,14675,14546,14547,14545,14674,14673,14674,14545,14546,14544,14673,14672,14673,14544,14545,14543,14672,14671,14672,14543,14544,14542,14671,14670,14671,14542,14543,14541,14670,14669,14670,14541,14542,14540,14669,14668,14669,14540,14541,14539,14668,14667,14668,14539,14540,14538,14667,14666,14667,14538,14539,14537,14666,14665,14666,14537,14538,14536,14665,14664,14665,14536,14537,14535,14664,14663,14664,14535,14536,14534,14663,14662,14663,14534,14535,14533,14662,14661,14662,14533,14534,14532,14661,14660,14661,14532,14533,14531,14660,14659,14660,14531,14532,14530,14659,14658,14659,14530,14531,14529,14658,14657,14658,14529,14530,14528,14657,14656,14657,14528,14529,14527,14656,14655,14656,14527,14528,14526,14655,14654,14655,14526,14527,14525,14654,14653,14654,14525,14526,14524,14653,14652,14653,14524,14525,14523,14652,14651,14652,14523,14524,14522,14651,14650,14651,14522,14523,14521,14650,14649,14650,14521,14522,14520,14649,14648,14649,14520,14521,14519,14648,14647,14648,14519,14520,14518,14647,14646,14647,14518,14519,14517,14646,14645,14646,14517,14518,14516,14645,14644,14645,14516,14517,14515,14644,14643,14644,14515,14516,14514,14643,14642,14643,14514,14515,14513,14642,14641,14642,14513,14514,14512,14641,14640,14641,14512,14513,14511,14640,14639,14640,14511,14512,14510,14639,14638,14639,14510,14511,14509,14638,14637,14638,14509,14510,14508,14637,14636,14637,14508,14509,14507,14636,14635,14636,14507,14508,14506,14635,14634,14635,14506,14507,14505,14634,14633,14634,14505,14506,14504,14633,14632,14633,14504,14505,14503,14632,14631,14632,14503,14504,14502,14631,14630,14631,14502,14503,14501,14630,14629,14630,14501,14502,14500,14629,14628,14629,14500,14501,14499,14628,14627,14628,14499,14500,14498,14627,14626,14627,14498,14499,14497,14626,14625,14626,14497,14498,14496,14625,14624,14625,14496,14497,14495,14624,14623,14624,14495,14496,14494,14623,14622,14623,14494,14495,14493,14622,14621,14622,14493,14494,14492,14621,14620,14621,14492,14493,14491,14620,14619,14620,14491,14492,14490,14619,14618,14619,14490,14491,14489,14618,14617,14618,14489,14490,14488,14617,14616,14617,14488,14489,14487,14616,14615,14616,14487,14488,14486,14615,14614,14615,14486,14487,14485,14614,14613,14614,14485,14486,14484,14613,14612,14613,14484,14485,14483,14612,14611,14612,14483,14484,14482,14611,14610,14611,14482,14483,14481,14610,14609,14610,14481,14482,14480,14609,14608,14609,14480,14481,14479,14608,14607,14608,14479,14480,14478,14607,14606,14607,14478,14479,14477,14606,14605,14606,14477,14478,14476,14605,14604,14605,14476,14477,14475,14604,14603,14604,14475,14476,14474,14603,14602,14603,14474,14475,14473,14602,14601,14602,14473,14474,14472,14601,14600,14601,14472,14473,14471,14600,14599,14600,14471,14472,14470,14599,14598,14599,14470,14471,14469,14598,14597,14598,14469,14470,14468,14597,14596,14597,14468,14469,14467,14596,14595,14596,14467,14468,14466,14595,14594,14595,14466,14467,14465,14594,14593,14594,14465,14466,14464,14593,14592,14593,14464,14465,14718,14847,14846,14847,14718,14719,14717,14846,14845,14846,14717,14718,14716,14845,14844,14845,14716,14717,14715,14844,14843,14844,14715,14716,14714,14843,14842,14843,14714,14715,14713,14842,14841,14842,14713,14714,14712,14841,14840,14841,14712,14713,14711,14840,14839,14840,14711,14712,14710,14839,14838,14839,14710,14711,14709,14838,14837,14838,14709,14710,14708,14837,14836,14837,14708,14709,14707,14836,14835,14836,14707,14708,14706,14835,14834,14835,14706,14707,14705,14834,14833,14834,14705,14706,14704,14833,14832,14833,14704,14705,14703,14832,14831,14832,14703,14704,14702,14831,14830,14831,14702,14703,14701,14830,14829,14830,14701,14702,14700,14829,14828,14829,14700,14701,14699,14828,14827,14828,14699,14700,14698,14827,14826,14827,14698,14699,14697,14826,14825,14826,14697,14698,14696,14825,14824,14825,14696,14697,14695,14824,14823,14824,14695,14696,14694,14823,14822,14823,14694,14695,14693,14822,14821,14822,14693,14694,14692,14821,14820,14821,14692,14693,14691,14820,14819,14820,14691,14692,14690,14819,14818,14819,14690,14691,14689,14818,14817,14818,14689,14690,14688,14817,14816,14817,14688,14689,14687,14816,14815,14816,14687,14688,14686,14815,14814,14815,14686,14687,14685,14814,14813,14814,14685,14686,14684,14813,14812,14813,14684,14685,14683,14812,14811,14812,14683,14684,14682,14811,14810,14811,14682,14683,14681,14810,14809,14810,14681,14682,14680,14809,14808,14809,14680,14681,14679,14808,14807,14808,14679,14680,14678,14807,14806,14807,14678,14679,14677,14806,14805,14806,14677,14678,14676,14805,14804,14805,14676,14677,14675,14804,14803,14804,14675,14676,14674,14803,14802,14803,14674,14675,14673,14802,14801,14802,14673,14674,14672,14801,14800,14801,14672,14673,14671,14800,14799,14800,14671,14672,14670,14799,14798,14799,14670,14671,14669,14798,14797,14798,14669,14670,14668,14797,14796,14797,14668,14669,14667,14796,14795,14796,14667,14668,14666,14795,14794,14795,14666,14667,14665,14794,14793,14794,14665,14666,14664,14793,14792,14793,14664,14665,14663,14792,14791,14792,14663,14664,14662,14791,14790,14791,14662,14663,14661,14790,14789,14790,14661,14662,14660,14789,14788,14789,14660,14661,14659,14788,14787,14788,14659,14660,14658,14787,14786,14787,14658,14659,14657,14786,14785,14786,14657,14658,14656,14785,14784,14785,14656,14657,14655,14784,14783,14784,14655,14656,14654,14783,14782,14783,14654,14655,14653,14782,14781,14782,14653,14654,14652,14781,14780,14781,14652,14653,14651,14780,14779,14780,14651,14652,14650,14779,14778,14779,14650,14651,14649,14778,14777,14778,14649,14650,14648,14777,14776,14777,14648,14649,14647,14776,14775,14776,14647,14648,14646,14775,14774,14775,14646,14647,14645,14774,14773,14774,14645,14646,14644,14773,14772,14773,14644,14645,14643,14772,14771,14772,14643,14644,14642,14771,14770,14771,14642,14643,14641,14770,14769,14770,14641,14642,14640,14769,14768,14769,14640,14641,14639,14768,14767,14768,14639,14640,14638,14767,14766,14767,14638,14639,14637,14766,14765,14766,14637,14638,14636,14765,14764,14765,14636,14637,14635,14764,14763,14764,14635,14636,14634,14763,14762,14763,14634,14635,14633,14762,14761,14762,14633,14634,14632,14761,14760,14761,14632,14633,14631,14760,14759,14760,14631,14632,14630,14759,14758,14759,14630,14631,14629,14758,14757,14758,14629,14630,14628,14757,14756,14757,14628,14629,14627,14756,14755,14756,14627,14628,14626,14755,14754,14755,14626,14627,14625,14754,14753,14754,14625,14626,14624,14753,14752,14753,14624,14625,14623,14752,14751,14752,14623,14624,14622,14751,14750,14751,14622,14623,14621,14750,14749,14750,14621,14622,14620,14749,14748,14749,14620,14621,14619,14748,14747,14748,14619,14620,14618,14747,14746,14747,14618,14619,14617,14746,14745,14746,14617,14618,14616,14745,14744,14745,14616,14617,14615,14744,14743,14744,14615,14616,14614,14743,14742,14743,14614,14615,14613,14742,14741,14742,14613,14614,14612,14741,14740,14741,14612,14613,14611,14740,14739,14740,14611,14612,14610,14739,14738,14739,14610,14611,14609,14738,14737,14738,14609,14610,14608,14737,14736,14737,14608,14609,14607,14736,14735,14736,14607,14608,14606,14735,14734,14735,14606,14607,14605,14734,14733,14734,14605,14606,14604,14733,14732,14733,14604,14605,14603,14732,14731,14732,14603,14604,14602,14731,14730,14731,14602,14603,14601,14730,14729,14730,14601,14602,14600,14729,14728,14729,14600,14601,14599,14728,14727,14728,14599,14600,14598,14727,14726,14727,14598,14599,14597,14726,14725,14726,14597,14598,14596,14725,14724,14725,14596,14597,14595,14724,14723,14724,14595,14596,14594,14723,14722,14723,14594,14595,14593,14722,14721,14722,14593,14594,14592,14721,14720,14721,14592,14593,14846,14975,14974,14975,14846,14847,14845,14974,14973,14974,14845,14846,14844,14973,14972,14973,14844,14845,14843,14972,14971,14972,14843,14844,14842,14971,14970,14971,14842,14843,14841,14970,14969,14970,14841,14842,14840,14969,14968,14969,14840,14841,14839,14968,14967,14968,14839,14840,14838,14967,14966,14967,14838,14839,14837,14966,14965,14966,14837,14838,14836,14965,14964,14965,14836,14837,14835,14964,14963,14964,14835,14836,14834,14963,14962,14963,14834,14835,14833,14962,14961,14962,14833,14834,14832,14961,14960,14961,14832,14833,14831,14960,14959,14960,14831,14832,14830,14959,14958,14959,14830,14831,14829,14958,14957,14958,14829,14830,14828,14957,14956,14957,14828,14829,14827,14956,14955,14956,14827,14828,14826,14955,14954,14955,14826,14827,14825,14954,14953,14954,14825,14826,14824,14953,14952,14953,14824,14825,14823,14952,14951,14952,14823,14824,14822,14951,14950,14951,14822,14823,14821,14950,14949,14950,14821,14822,14820,14949,14948,14949,14820,14821,14819,14948,14947,14948,14819,14820,14818,14947,14946,14947,14818,14819,14817,14946,14945,14946,14817,14818,14816,14945,14944,14945,14816,14817,14815,14944,14943,14944,14815,14816,14814,14943,14942,14943,14814,14815,14813,14942,14941,14942,14813,14814,14812,14941,14940,14941,14812,14813,14811,14940,14939,14940,14811,14812,14810,14939,14938,14939,14810,14811,14809,14938,14937,14938,14809,14810,14808,14937,14936,14937,14808,14809,14807,14936,14935,14936,14807,14808,14806,14935,14934,14935,14806,14807,14805,14934,14933,14934,14805,14806,14804,14933,14932,14933,14804,14805,14803,14932,14931,14932,14803,14804,14802,14931,14930,14931,14802,14803,14801,14930,14929,14930,14801,14802,14800,14929,14928,14929,14800,14801,14799,14928,14927,14928,14799,14800,14798,14927,14926,14927,14798,14799,14797,14926,14925,14926,14797,14798,14796,14925,14924,14925,14796,14797,14795,14924,14923,14924,14795,14796,14794,14923,14922,14923,14794,14795,14793,14922,14921,14922,14793,14794,14792,14921,14920,14921,14792,14793,14791,14920,14919,14920,14791,14792,14790,14919,14918,14919,14790,14791,14789,14918,14917,14918,14789,14790,14788,14917,14916,14917,14788,14789,14787,14916,14915,14916,14787,14788,14786,14915,14914,14915,14786,14787,14785,14914,14913,14914,14785,14786,14784,14913,14912,14913,14784,14785,14783,14912,14911,14912,14783,14784,14782,14911,14910,14911,14782,14783,14781,14910,14909,14910,14781,14782,14780,14909,14908,14909,14780,14781,14779,14908,14907,14908,14779,14780,14778,14907,14906,14907,14778,14779,14777,14906,14905,14906,14777,14778,14776,14905,14904,14905,14776,14777,14775,14904,14903,14904,14775,14776,14774,14903,14902,14903,14774,14775,14773,14902,14901,14902,14773,14774,14772,14901,14900,14901,14772,14773,14771,14900,14899,14900,14771,14772,14770,14899,14898,14899,14770,14771,14769,14898,14897,14898,14769,14770,14768,14897,14896,14897,14768,14769,14767,14896,14895,14896,14767,14768,14766,14895,14894,14895,14766,14767,14765,14894,14893,14894,14765,14766,14764,14893,14892,14893,14764,14765,14763,14892,14891,14892,14763,14764,14762,14891,14890,14891,14762,14763,14761,14890,14889,14890,14761,14762,14760,14889,14888,14889,14760,14761,14759,14888,14887,14888,14759,14760,14758,14887,14886,14887,14758,14759,14757,14886,14885,14886,14757,14758,14756,14885,14884,14885,14756,14757,14755,14884,14883,14884,14755,14756,14754,14883,14882,14883,14754,14755,14753,14882,14881,14882,14753,14754,14752,14881,14880,14881,14752,14753,14751,14880,14879,14880,14751,14752,14750,14879,14878,14879,14750,14751,14749,14878,14877,14878,14749,14750,14748,14877,14876,14877,14748,14749,14747,14876,14875,14876,14747,14748,14746,14875,14874,14875,14746,14747,14745,14874,14873,14874,14745,14746,14744,14873,14872,14873,14744,14745,14743,14872,14871,14872,14743,14744,14742,14871,14870,14871,14742,14743,14741,14870,14869,14870,14741,14742,14740,14869,14868,14869,14740,14741,14739,14868,14867,14868,14739,14740,14738,14867,14866,14867,14738,14739,14737,14866,14865,14866,14737,14738,14736,14865,14864,14865,14736,14737,14735,14864,14863,14864,14735,14736,14734,14863,14862,14863,14734,14735,14733,14862,14861,14862,14733,14734,14732,14861,14860,14861,14732,14733,14731,14860,14859,14860,14731,14732,14730,14859,14858,14859,14730,14731,14729,14858,14857,14858,14729,14730,14728,14857,14856,14857,14728,14729,14727,14856,14855,14856,14727,14728,14726,14855,14854,14855,14726,14727,14725,14854,14853,14854,14725,14726,14724,14853,14852,14853,14724,14725,14723,14852,14851,14852,14723,14724,14722,14851,14850,14851,14722,14723,14721,14850,14849,14850,14721,14722,14720,14849,14848,14849,14720,14721,14974,15103,15102,15103,14974,14975,14973,15102,15101,15102,14973,14974,14972,15101,15100,15101,14972,14973,14971,15100,15099,15100,14971,14972,14970,15099,15098,15099,14970,14971,14969,15098,15097,15098,14969,14970,14968,15097,15096,15097,14968,14969,14967,15096,15095,15096,14967,14968,14966,15095,15094,15095,14966,14967,14965,15094,15093,15094,14965,14966,14964,15093,15092,15093,14964,14965,14963,15092,15091,15092,14963,14964,14962,15091,15090,15091,14962,14963,14961,15090,15089,15090,14961,14962,14960,15089,15088,15089,14960,14961,14959,15088,15087,15088,14959,14960,14958,15087,15086,15087,14958,14959,14957,15086,15085,15086,14957,14958,14956,15085,15084,15085,14956,14957,14955,15084,15083,15084,14955,14956,14954,15083,15082,15083,14954,14955,14953,15082,15081,15082,14953,14954,14952,15081,15080,15081,14952,14953,14951,15080,15079,15080,14951,14952,14950,15079,15078,15079,14950,14951,14949,15078,15077,15078,14949,14950,14948,15077,15076,15077,14948,14949,14947,15076,15075,15076,14947,14948,14946,15075,15074,15075,14946,14947,14945,15074,15073,15074,14945,14946,14944,15073,15072,15073,14944,14945,14943,15072,15071,15072,14943,14944,14942,15071,15070,15071,14942,14943,14941,15070,15069,15070,14941,14942,14940,15069,15068,15069,14940,14941,14939,15068,15067,15068,14939,14940,14938,15067,15066,15067,14938,14939,14937,15066,15065,15066,14937,14938,14936,15065,15064,15065,14936,14937,14935,15064,15063,15064,14935,14936,14934,15063,15062,15063,14934,14935,14933,15062,15061,15062,14933,14934,14932,15061,15060,15061,14932,14933,14931,15060,15059,15060,14931,14932,14930,15059,15058,15059,14930,14931,14929,15058,15057,15058,14929,14930,14928,15057,15056,15057,14928,14929,14927,15056,15055,15056,14927,14928,14926,15055,15054,15055,14926,14927,14925,15054,15053,15054,14925,14926,14924,15053,15052,15053,14924,14925,14923,15052,15051,15052,14923,14924,14922,15051,15050,15051,14922,14923,14921,15050,15049,15050,14921,14922,14920,15049,15048,15049,14920,14921,14919,15048,15047,15048,14919,14920,14918,15047,15046,15047,14918,14919,14917,15046,15045,15046,14917,14918,14916,15045,15044,15045,14916,14917,14915,15044,15043,15044,14915,14916,14914,15043,15042,15043,14914,14915,14913,15042,15041,15042,14913,14914,14912,15041,15040,15041,14912,14913,14911,15040,15039,15040,14911,14912,14910,15039,15038,15039,14910,14911,14909,15038,15037,15038,14909,14910,14908,15037,15036,15037,14908,14909,14907,15036,15035,15036,14907,14908,14906,15035,15034,15035,14906,14907,14905,15034,15033,15034,14905,14906,14904,15033,15032,15033,14904,14905,14903,15032,15031,15032,14903,14904,14902,15031,15030,15031,14902,14903,14901,15030,15029,15030,14901,14902,14900,15029,15028,15029,14900,14901,14899,15028,15027,15028,14899,14900,14898,15027,15026,15027,14898,14899,14897,15026,15025,15026,14897,14898,14896,15025,15024,15025,14896,14897,14895,15024,15023,15024,14895,14896,14894,15023,15022,15023,14894,14895,14893,15022,15021,15022,14893,14894,14892,15021,15020,15021,14892,14893,14891,15020,15019,15020,14891,14892,14890,15019,15018,15019,14890,14891,14889,15018,15017,15018,14889,14890,14888,15017,15016,15017,14888,14889,14887,15016,15015,15016,14887,14888,14886,15015,15014,15015,14886,14887,14885,15014,15013,15014,14885,14886,14884,15013,15012,15013,14884,14885,14883,15012,15011,15012,14883,14884,14882,15011,15010,15011,14882,14883,14881,15010,15009,15010,14881,14882,14880,15009,15008,15009,14880,14881,14879,15008,15007,15008,14879,14880,14878,15007,15006,15007,14878,14879,14877,15006,15005,15006,14877,14878,14876,15005,15004,15005,14876,14877,14875,15004,15003,15004,14875,14876,14874,15003,15002,15003,14874,14875,14873,15002,15001,15002,14873,14874,14872,15001,15000,15001,14872,14873,14871,15000,14999,15000,14871,14872,14870,14999,14998,14999,14870,14871,14869,14998,14997,14998,14869,14870,14868,14997,14996,14997,14868,14869,14867,14996,14995,14996,14867,14868,14866,14995,14994,14995,14866,14867,14865,14994,14993,14994,14865,14866,14864,14993,14992,14993,14864,14865,14863,14992,14991,14992,14863,14864,14862,14991,14990,14991,14862,14863,14861,14990,14989,14990,14861,14862,14860,14989,14988,14989,14860,14861,14859,14988,14987,14988,14859,14860,14858,14987,14986,14987,14858,14859,14857,14986,14985,14986,14857,14858,14856,14985,14984,14985,14856,14857,14855,14984,14983,14984,14855,14856,14854,14983,14982,14983,14854,14855,14853,14982,14981,14982,14853,14854,14852,14981,14980,14981,14852,14853,14851,14980,14979,14980,14851,14852,14850,14979,14978,14979,14850,14851,14849,14978,14977,14978,14849,14850,14848,14977,14976,14977,14848,14849,15102,15231,15230,15231,15102,15103,15101,15230,15229,15230,15101,15102,15100,15229,15228,15229,15100,15101,15099,15228,15227,15228,15099,15100,15098,15227,15226,15227,15098,15099,15097,15226,15225,15226,15097,15098,15096,15225,15224,15225,15096,15097,15095,15224,15223,15224,15095,15096,15094,15223,15222,15223,15094,15095,15093,15222,15221,15222,15093,15094,15092,15221,15220,15221,15092,15093,15091,15220,15219,15220,15091,15092,15090,15219,15218,15219,15090,15091,15089,15218,15217,15218,15089,15090,15088,15217,15216,15217,15088,15089,15087,15216,15215,15216,15087,15088,15086,15215,15214,15215,15086,15087,15085,15214,15213,15214,15085,15086,15084,15213,15212,15213,15084,15085,15083,15212,15211,15212,15083,15084,15082,15211,15210,15211,15082,15083,15081,15210,15209,15210,15081,15082,15080,15209,15208,15209,15080,15081,15079,15208,15207,15208,15079,15080,15078,15207,15206,15207,15078,15079,15077,15206,15205,15206,15077,15078,15076,15205,15204,15205,15076,15077,15075,15204,15203,15204,15075,15076,15074,15203,15202,15203,15074,15075,15073,15202,15201,15202,15073,15074,15072,15201,15200,15201,15072,15073,15071,15200,15199,15200,15071,15072,15070,15199,15198,15199,15070,15071,15069,15198,15197,15198,15069,15070,15068,15197,15196,15197,15068,15069,15067,15196,15195,15196,15067,15068,15066,15195,15194,15195,15066,15067,15065,15194,15193,15194,15065,15066,15064,15193,15192,15193,15064,15065,15063,15192,15191,15192,15063,15064,15062,15191,15190,15191,15062,15063,15061,15190,15189,15190,15061,15062,15060,15189,15188,15189,15060,15061,15059,15188,15187,15188,15059,15060,15058,15187,15186,15187,15058,15059,15057,15186,15185,15186,15057,15058,15056,15185,15184,15185,15056,15057,15055,15184,15183,15184,15055,15056,15054,15183,15182,15183,15054,15055,15053,15182,15181,15182,15053,15054,15052,15181,15180,15181,15052,15053,15051,15180,15179,15180,15051,15052,15050,15179,15178,15179,15050,15051,15049,15178,15177,15178,15049,15050,15048,15177,15176,15177,15048,15049,15047,15176,15175,15176,15047,15048,15046,15175,15174,15175,15046,15047,15045,15174,15173,15174,15045,15046,15044,15173,15172,15173,15044,15045,15043,15172,15171,15172,15043,15044,15042,15171,15170,15171,15042,15043,15041,15170,15169,15170,15041,15042,15040,15169,15168,15169,15040,15041,15039,15168,15167,15168,15039,15040,15038,15167,15166,15167,15038,15039,15037,15166,15165,15166,15037,15038,15036,15165,15164,15165,15036,15037,15035,15164,15163,15164,15035,15036,15034,15163,15162,15163,15034,15035,15033,15162,15161,15162,15033,15034,15032,15161,15160,15161,15032,15033,15031,15160,15159,15160,15031,15032,15030,15159,15158,15159,15030,15031,15029,15158,15157,15158,15029,15030,15028,15157,15156,15157,15028,15029,15027,15156,15155,15156,15027,15028,15026,15155,15154,15155,15026,15027,15025,15154,15153,15154,15025,15026,15024,15153,15152,15153,15024,15025,15023,15152,15151,15152,15023,15024,15022,15151,15150,15151,15022,15023,15021,15150,15149,15150,15021,15022,15020,15149,15148,15149,15020,15021,15019,15148,15147,15148,15019,15020,15018,15147,15146,15147,15018,15019,15017,15146,15145,15146,15017,15018,15016,15145,15144,15145,15016,15017,15015,15144,15143,15144,15015,15016,15014,15143,15142,15143,15014,15015,15013,15142,15141,15142,15013,15014,15012,15141,15140,15141,15012,15013,15011,15140,15139,15140,15011,15012,15010,15139,15138,15139,15010,15011,15009,15138,15137,15138,15009,15010,15008,15137,15136,15137,15008,15009,15007,15136,15135,15136,15007,15008,15006,15135,15134,15135,15006,15007,15005,15134,15133,15134,15005,15006,15004,15133,15132,15133,15004,15005,15003,15132,15131,15132,15003,15004,15002,15131,15130,15131,15002,15003,15001,15130,15129,15130,15001,15002,15000,15129,15128,15129,15000,15001,14999,15128,15127,15128,14999,15000,14998,15127,15126,15127,14998,14999,14997,15126,15125,15126,14997,14998,14996,15125,15124,15125,14996,14997,14995,15124,15123,15124,14995,14996,14994,15123,15122,15123,14994,14995,14993,15122,15121,15122,14993,14994,14992,15121,15120,15121,14992,14993,14991,15120,15119,15120,14991,14992,14990,15119,15118,15119,14990,14991,14989,15118,15117,15118,14989,14990,14988,15117,15116,15117,14988,14989,14987,15116,15115,15116,14987,14988,14986,15115,15114,15115,14986,14987,14985,15114,15113,15114,14985,14986,14984,15113,15112,15113,14984,14985,14983,15112,15111,15112,14983,14984,14982,15111,15110,15111,14982,14983,14981,15110,15109,15110,14981,14982,14980,15109,15108,15109,14980,14981,14979,15108,15107,15108,14979,14980,14978,15107,15106,15107,14978,14979,14977,15106,15105,15106,14977,14978,14976,15105,15104,15105,14976,14977,15230,15359,15358,15359,15230,15231,15229,15358,15357,15358,15229,15230,15228,15357,15356,15357,15228,15229,15227,15356,15355,15356,15227,15228,15226,15355,15354,15355,15226,15227,15225,15354,15353,15354,15225,15226,15224,15353,15352,15353,15224,15225,15223,15352,15351,15352,15223,15224,15222,15351,15350,15351,15222,15223,15221,15350,15349,15350,15221,15222,15220,15349,15348,15349,15220,15221,15219,15348,15347,15348,15219,15220,15218,15347,15346,15347,15218,15219,15217,15346,15345,15346,15217,15218,15216,15345,15344,15345,15216,15217,15215,15344,15343,15344,15215,15216,15214,15343,15342,15343,15214,15215,15213,15342,15341,15342,15213,15214,15212,15341,15340,15341,15212,15213,15211,15340,15339,15340,15211,15212,15210,15339,15338,15339,15210,15211,15209,15338,15337,15338,15209,15210,15208,15337,15336,15337,15208,15209,15207,15336,15335,15336,15207,15208,15206,15335,15334,15335,15206,15207,15205,15334,15333,15334,15205,15206,15204,15333,15332,15333,15204,15205,15203,15332,15331,15332,15203,15204,15202,15331,15330,15331,15202,15203,15201,15330,15329,15330,15201,15202,15200,15329,15328,15329,15200,15201,15199,15328,15327,15328,15199,15200,15198,15327,15326,15327,15198,15199,15197,15326,15325,15326,15197,15198,15196,15325,15324,15325,15196,15197,15195,15324,15323,15324,15195,15196,15194,15323,15322,15323,15194,15195,15193,15322,15321,15322,15193,15194,15192,15321,15320,15321,15192,15193,15191,15320,15319,15320,15191,15192,15190,15319,15318,15319,15190,15191,15189,15318,15317,15318,15189,15190,15188,15317,15316,15317,15188,15189,15187,15316,15315,15316,15187,15188,15186,15315,15314,15315,15186,15187,15185,15314,15313,15314,15185,15186,15184,15313,15312,15313,15184,15185,15183,15312,15311,15312,15183,15184,15182,15311,15310,15311,15182,15183,15181,15310,15309,15310,15181,15182,15180,15309,15308,15309,15180,15181,15179,15308,15307,15308,15179,15180,15178,15307,15306,15307,15178,15179,15177,15306,15305,15306,15177,15178,15176,15305,15304,15305,15176,15177,15175,15304,15303,15304,15175,15176,15174,15303,15302,15303,15174,15175,15173,15302,15301,15302,15173,15174,15172,15301,15300,15301,15172,15173,15171,15300,15299,15300,15171,15172,15170,15299,15298,15299,15170,15171,15169,15298,15297,15298,15169,15170,15168,15297,15296,15297,15168,15169,15167,15296,15295,15296,15167,15168,15166,15295,15294,15295,15166,15167,15165,15294,15293,15294,15165,15166,15164,15293,15292,15293,15164,15165,15163,15292,15291,15292,15163,15164,15162,15291,15290,15291,15162,15163,15161,15290,15289,15290,15161,15162,15160,15289,15288,15289,15160,15161,15159,15288,15287,15288,15159,15160,15158,15287,15286,15287,15158,15159,15157,15286,15285,15286,15157,15158,15156,15285,15284,15285,15156,15157,15155,15284,15283,15284,15155,15156,15154,15283,15282,15283,15154,15155,15153,15282,15281,15282,15153,15154,15152,15281,15280,15281,15152,15153,15151,15280,15279,15280,15151,15152,15150,15279,15278,15279,15150,15151,15149,15278,15277,15278,15149,15150,15148,15277,15276,15277,15148,15149,15147,15276,15275,15276,15147,15148,15146,15275,15274,15275,15146,15147,15145,15274,15273,15274,15145,15146,15144,15273,15272,15273,15144,15145,15143,15272,15271,15272,15143,15144,15142,15271,15270,15271,15142,15143,15141,15270,15269,15270,15141,15142,15140,15269,15268,15269,15140,15141,15139,15268,15267,15268,15139,15140,15138,15267,15266,15267,15138,15139,15137,15266,15265,15266,15137,15138,15136,15265,15264,15265,15136,15137,15135,15264,15263,15264,15135,15136,15134,15263,15262,15263,15134,15135,15133,15262,15261,15262,15133,15134,15132,15261,15260,15261,15132,15133,15131,15260,15259,15260,15131,15132,15130,15259,15258,15259,15130,15131,15129,15258,15257,15258,15129,15130,15128,15257,15256,15257,15128,15129,15127,15256,15255,15256,15127,15128,15126,15255,15254,15255,15126,15127,15125,15254,15253,15254,15125,15126,15124,15253,15252,15253,15124,15125,15123,15252,15251,15252,15123,15124,15122,15251,15250,15251,15122,15123,15121,15250,15249,15250,15121,15122,15120,15249,15248,15249,15120,15121,15119,15248,15247,15248,15119,15120,15118,15247,15246,15247,15118,15119,15117,15246,15245,15246,15117,15118,15116,15245,15244,15245,15116,15117,15115,15244,15243,15244,15115,15116,15114,15243,15242,15243,15114,15115,15113,15242,15241,15242,15113,15114,15112,15241,15240,15241,15112,15113,15111,15240,15239,15240,15111,15112,15110,15239,15238,15239,15110,15111,15109,15238,15237,15238,15109,15110,15108,15237,15236,15237,15108,15109,15107,15236,15235,15236,15107,15108,15106,15235,15234,15235,15106,15107,15105,15234,15233,15234,15105,15106,15104,15233,15232,15233,15104,15105,15358,15487,15486,15487,15358,15359,15357,15486,15485,15486,15357,15358,15356,15485,15484,15485,15356,15357,15355,15484,15483,15484,15355,15356,15354,15483,15482,15483,15354,15355,15353,15482,15481,15482,15353,15354,15352,15481,15480,15481,15352,15353,15351,15480,15479,15480,15351,15352,15350,15479,15478,15479,15350,15351,15349,15478,15477,15478,15349,15350,15348,15477,15476,15477,15348,15349,15347,15476,15475,15476,15347,15348,15346,15475,15474,15475,15346,15347,15345,15474,15473,15474,15345,15346,15344,15473,15472,15473,15344,15345,15343,15472,15471,15472,15343,15344,15342,15471,15470,15471,15342,15343,15341,15470,15469,15470,15341,15342,15340,15469,15468,15469,15340,15341,15339,15468,15467,15468,15339,15340,15338,15467,15466,15467,15338,15339,15337,15466,15465,15466,15337,15338,15336,15465,15464,15465,15336,15337,15335,15464,15463,15464,15335,15336,15334,15463,15462,15463,15334,15335,15333,15462,15461,15462,15333,15334,15332,15461,15460,15461,15332,15333,15331,15460,15459,15460,15331,15332,15330,15459,15458,15459,15330,15331,15329,15458,15457,15458,15329,15330,15328,15457,15456,15457,15328,15329,15327,15456,15455,15456,15327,15328,15326,15455,15454,15455,15326,15327,15325,15454,15453,15454,15325,15326,15324,15453,15452,15453,15324,15325,15323,15452,15451,15452,15323,15324,15322,15451,15450,15451,15322,15323,15321,15450,15449,15450,15321,15322,15320,15449,15448,15449,15320,15321,15319,15448,15447,15448,15319,15320,15318,15447,15446,15447,15318,15319,15317,15446,15445,15446,15317,15318,15316,15445,15444,15445,15316,15317,15315,15444,15443,15444,15315,15316,15314,15443,15442,15443,15314,15315,15313,15442,15441,15442,15313,15314,15312,15441,15440,15441,15312,15313,15311,15440,15439,15440,15311,15312,15310,15439,15438,15439,15310,15311,15309,15438,15437,15438,15309,15310,15308,15437,15436,15437,15308,15309,15307,15436,15435,15436,15307,15308,15306,15435,15434,15435,15306,15307,15305,15434,15433,15434,15305,15306,15304,15433,15432,15433,15304,15305,15303,15432,15431,15432,15303,15304,15302,15431,15430,15431,15302,15303,15301,15430,15429,15430,15301,15302,15300,15429,15428,15429,15300,15301,15299,15428,15427,15428,15299,15300,15298,15427,15426,15427,15298,15299,15297,15426,15425,15426,15297,15298,15296,15425,15424,15425,15296,15297,15295,15424,15423,15424,15295,15296,15294,15423,15422,15423,15294,15295,15293,15422,15421,15422,15293,15294,15292,15421,15420,15421,15292,15293,15291,15420,15419,15420,15291,15292,15290,15419,15418,15419,15290,15291,15289,15418,15417,15418,15289,15290,15288,15417,15416,15417,15288,15289,15287,15416,15415,15416,15287,15288,15286,15415,15414,15415,15286,15287,15285,15414,15413,15414,15285,15286,15284,15413,15412,15413,15284,15285,15283,15412,15411,15412,15283,15284,15282,15411,15410,15411,15282,15283,15281,15410,15409,15410,15281,15282,15280,15409,15408,15409,15280,15281,15279,15408,15407,15408,15279,15280,15278,15407,15406,15407,15278,15279,15277,15406,15405,15406,15277,15278,15276,15405,15404,15405,15276,15277,15275,15404,15403,15404,15275,15276,15274,15403,15402,15403,15274,15275,15273,15402,15401,15402,15273,15274,15272,15401,15400,15401,15272,15273,15271,15400,15399,15400,15271,15272,15270,15399,15398,15399,15270,15271,15269,15398,15397,15398,15269,15270,15268,15397,15396,15397,15268,15269,15267,15396,15395,15396,15267,15268,15266,15395,15394,15395,15266,15267,15265,15394,15393,15394,15265,15266,15264,15393,15392,15393,15264,15265,15263,15392,15391,15392,15263,15264,15262,15391,15390,15391,15262,15263,15261,15390,15389,15390,15261,15262,15260,15389,15388,15389,15260,15261,15259,15388,15387,15388,15259,15260,15258,15387,15386,15387,15258,15259,15257,15386,15385,15386,15257,15258,15256,15385,15384,15385,15256,15257,15255,15384,15383,15384,15255,15256,15254,15383,15382,15383,15254,15255,15253,15382,15381,15382,15253,15254,15252,15381,15380,15381,15252,15253,15251,15380,15379,15380,15251,15252,15250,15379,15378,15379,15250,15251,15249,15378,15377,15378,15249,15250,15248,15377,15376,15377,15248,15249,15247,15376,15375,15376,15247,15248,15246,15375,15374,15375,15246,15247,15245,15374,15373,15374,15245,15246,15244,15373,15372,15373,15244,15245,15243,15372,15371,15372,15243,15244,15242,15371,15370,15371,15242,15243,15241,15370,15369,15370,15241,15242,15240,15369,15368,15369,15240,15241,15239,15368,15367,15368,15239,15240,15238,15367,15366,15367,15238,15239,15237,15366,15365,15366,15237,15238,15236,15365,15364,15365,15236,15237,15235,15364,15363,15364,15235,15236,15234,15363,15362,15363,15234,15235,15233,15362,15361,15362,15233,15234,15232,15361,15360,15361,15232,15233,15486,15615,15614,15615,15486,15487,15485,15614,15613,15614,15485,15486,15484,15613,15612,15613,15484,15485,15483,15612,15611,15612,15483,15484,15482,15611,15610,15611,15482,15483,15481,15610,15609,15610,15481,15482,15480,15609,15608,15609,15480,15481,15479,15608,15607,15608,15479,15480,15478,15607,15606,15607,15478,15479,15477,15606,15605,15606,15477,15478,15476,15605,15604,15605,15476,15477,15475,15604,15603,15604,15475,15476,15474,15603,15602,15603,15474,15475,15473,15602,15601,15602,15473,15474,15472,15601,15600,15601,15472,15473,15471,15600,15599,15600,15471,15472,15470,15599,15598,15599,15470,15471,15469,15598,15597,15598,15469,15470,15468,15597,15596,15597,15468,15469,15467,15596,15595,15596,15467,15468,15466,15595,15594,15595,15466,15467,15465,15594,15593,15594,15465,15466,15464,15593,15592,15593,15464,15465,15463,15592,15591,15592,15463,15464,15462,15591,15590,15591,15462,15463,15461,15590,15589,15590,15461,15462,15460,15589,15588,15589,15460,15461,15459,15588,15587,15588,15459,15460,15458,15587,15586,15587,15458,15459,15457,15586,15585,15586,15457,15458,15456,15585,15584,15585,15456,15457,15455,15584,15583,15584,15455,15456,15454,15583,15582,15583,15454,15455,15453,15582,15581,15582,15453,15454,15452,15581,15580,15581,15452,15453,15451,15580,15579,15580,15451,15452,15450,15579,15578,15579,15450,15451,15449,15578,15577,15578,15449,15450,15448,15577,15576,15577,15448,15449,15447,15576,15575,15576,15447,15448,15446,15575,15574,15575,15446,15447,15445,15574,15573,15574,15445,15446,15444,15573,15572,15573,15444,15445,15443,15572,15571,15572,15443,15444,15442,15571,15570,15571,15442,15443,15441,15570,15569,15570,15441,15442,15440,15569,15568,15569,15440,15441,15439,15568,15567,15568,15439,15440,15438,15567,15566,15567,15438,15439,15437,15566,15565,15566,15437,15438,15436,15565,15564,15565,15436,15437,15435,15564,15563,15564,15435,15436,15434,15563,15562,15563,15434,15435,15433,15562,15561,15562,15433,15434,15432,15561,15560,15561,15432,15433,15431,15560,15559,15560,15431,15432,15430,15559,15558,15559,15430,15431,15429,15558,15557,15558,15429,15430,15428,15557,15556,15557,15428,15429,15427,15556,15555,15556,15427,15428,15426,15555,15554,15555,15426,15427,15425,15554,15553,15554,15425,15426,15424,15553,15552,15553,15424,15425,15423,15552,15551,15552,15423,15424,15422,15551,15550,15551,15422,15423,15421,15550,15549,15550,15421,15422,15420,15549,15548,15549,15420,15421,15419,15548,15547,15548,15419,15420,15418,15547,15546,15547,15418,15419,15417,15546,15545,15546,15417,15418,15416,15545,15544,15545,15416,15417,15415,15544,15543,15544,15415,15416,15414,15543,15542,15543,15414,15415,15413,15542,15541,15542,15413,15414,15412,15541,15540,15541,15412,15413,15411,15540,15539,15540,15411,15412,15410,15539,15538,15539,15410,15411,15409,15538,15537,15538,15409,15410,15408,15537,15536,15537,15408,15409,15407,15536,15535,15536,15407,15408,15406,15535,15534,15535,15406,15407,15405,15534,15533,15534,15405,15406,15404,15533,15532,15533,15404,15405,15403,15532,15531,15532,15403,15404,15402,15531,15530,15531,15402,15403,15401,15530,15529,15530,15401,15402,15400,15529,15528,15529,15400,15401,15399,15528,15527,15528,15399,15400,15398,15527,15526,15527,15398,15399,15397,15526,15525,15526,15397,15398,15396,15525,15524,15525,15396,15397,15395,15524,15523,15524,15395,15396,15394,15523,15522,15523,15394,15395,15393,15522,15521,15522,15393,15394,15392,15521,15520,15521,15392,15393,15391,15520,15519,15520,15391,15392,15390,15519,15518,15519,15390,15391,15389,15518,15517,15518,15389,15390,15388,15517,15516,15517,15388,15389,15387,15516,15515,15516,15387,15388,15386,15515,15514,15515,15386,15387,15385,15514,15513,15514,15385,15386,15384,15513,15512,15513,15384,15385,15383,15512,15511,15512,15383,15384,15382,15511,15510,15511,15382,15383,15381,15510,15509,15510,15381,15382,15380,15509,15508,15509,15380,15381,15379,15508,15507,15508,15379,15380,15378,15507,15506,15507,15378,15379,15377,15506,15505,15506,15377,15378,15376,15505,15504,15505,15376,15377,15375,15504,15503,15504,15375,15376,15374,15503,15502,15503,15374,15375,15373,15502,15501,15502,15373,15374,15372,15501,15500,15501,15372,15373,15371,15500,15499,15500,15371,15372,15370,15499,15498,15499,15370,15371,15369,15498,15497,15498,15369,15370,15368,15497,15496,15497,15368,15369,15367,15496,15495,15496,15367,15368,15366,15495,15494,15495,15366,15367,15365,15494,15493,15494,15365,15366,15364,15493,15492,15493,15364,15365,15363,15492,15491,15492,15363,15364,15362,15491,15490,15491,15362,15363,15361,15490,15489,15490,15361,15362,15360,15489,15488,15489,15360,15361,15614,15743,15742,15743,15614,15615,15613,15742,15741,15742,15613,15614,15612,15741,15740,15741,15612,15613,15611,15740,15739,15740,15611,15612,15610,15739,15738,15739,15610,15611,15609,15738,15737,15738,15609,15610,15608,15737,15736,15737,15608,15609,15607,15736,15735,15736,15607,15608,15606,15735,15734,15735,15606,15607,15605,15734,15733,15734,15605,15606,15604,15733,15732,15733,15604,15605,15603,15732,15731,15732,15603,15604,15602,15731,15730,15731,15602,15603,15601,15730,15729,15730,15601,15602,15600,15729,15728,15729,15600,15601,15599,15728,15727,15728,15599,15600,15598,15727,15726,15727,15598,15599,15597,15726,15725,15726,15597,15598,15596,15725,15724,15725,15596,15597,15595,15724,15723,15724,15595,15596,15594,15723,15722,15723,15594,15595,15593,15722,15721,15722,15593,15594,15592,15721,15720,15721,15592,15593,15591,15720,15719,15720,15591,15592,15590,15719,15718,15719,15590,15591,15589,15718,15717,15718,15589,15590,15588,15717,15716,15717,15588,15589,15587,15716,15715,15716,15587,15588,15586,15715,15714,15715,15586,15587,15585,15714,15713,15714,15585,15586,15584,15713,15712,15713,15584,15585,15583,15712,15711,15712,15583,15584,15582,15711,15710,15711,15582,15583,15581,15710,15709,15710,15581,15582,15580,15709,15708,15709,15580,15581,15579,15708,15707,15708,15579,15580,15578,15707,15706,15707,15578,15579,15577,15706,15705,15706,15577,15578,15576,15705,15704,15705,15576,15577,15575,15704,15703,15704,15575,15576,15574,15703,15702,15703,15574,15575,15573,15702,15701,15702,15573,15574,15572,15701,15700,15701,15572,15573,15571,15700,15699,15700,15571,15572,15570,15699,15698,15699,15570,15571,15569,15698,15697,15698,15569,15570,15568,15697,15696,15697,15568,15569,15567,15696,15695,15696,15567,15568,15566,15695,15694,15695,15566,15567,15565,15694,15693,15694,15565,15566,15564,15693,15692,15693,15564,15565,15563,15692,15691,15692,15563,15564,15562,15691,15690,15691,15562,15563,15561,15690,15689,15690,15561,15562,15560,15689,15688,15689,15560,15561,15559,15688,15687,15688,15559,15560,15558,15687,15686,15687,15558,15559,15557,15686,15685,15686,15557,15558,15556,15685,15684,15685,15556,15557,15555,15684,15683,15684,15555,15556,15554,15683,15682,15683,15554,15555,15553,15682,15681,15682,15553,15554,15552,15681,15680,15681,15552,15553,15551,15680,15679,15680,15551,15552,15550,15679,15678,15679,15550,15551,15549,15678,15677,15678,15549,15550,15548,15677,15676,15677,15548,15549,15547,15676,15675,15676,15547,15548,15546,15675,15674,15675,15546,15547,15545,15674,15673,15674,15545,15546,15544,15673,15672,15673,15544,15545,15543,15672,15671,15672,15543,15544,15542,15671,15670,15671,15542,15543,15541,15670,15669,15670,15541,15542,15540,15669,15668,15669,15540,15541,15539,15668,15667,15668,15539,15540,15538,15667,15666,15667,15538,15539,15537,15666,15665,15666,15537,15538,15536,15665,15664,15665,15536,15537,15535,15664,15663,15664,15535,15536,15534,15663,15662,15663,15534,15535,15533,15662,15661,15662,15533,15534,15532,15661,15660,15661,15532,15533,15531,15660,15659,15660,15531,15532,15530,15659,15658,15659,15530,15531,15529,15658,15657,15658,15529,15530,15528,15657,15656,15657,15528,15529,15527,15656,15655,15656,15527,15528,15526,15655,15654,15655,15526,15527,15525,15654,15653,15654,15525,15526,15524,15653,15652,15653,15524,15525,15523,15652,15651,15652,15523,15524,15522,15651,15650,15651,15522,15523,15521,15650,15649,15650,15521,15522,15520,15649,15648,15649,15520,15521,15519,15648,15647,15648,15519,15520,15518,15647,15646,15647,15518,15519,15517,15646,15645,15646,15517,15518,15516,15645,15644,15645,15516,15517,15515,15644,15643,15644,15515,15516,15514,15643,15642,15643,15514,15515,15513,15642,15641,15642,15513,15514,15512,15641,15640,15641,15512,15513,15511,15640,15639,15640,15511,15512,15510,15639,15638,15639,15510,15511,15509,15638,15637,15638,15509,15510,15508,15637,15636,15637,15508,15509,15507,15636,15635,15636,15507,15508,15506,15635,15634,15635,15506,15507,15505,15634,15633,15634,15505,15506,15504,15633,15632,15633,15504,15505,15503,15632,15631,15632,15503,15504,15502,15631,15630,15631,15502,15503,15501,15630,15629,15630,15501,15502,15500,15629,15628,15629,15500,15501,15499,15628,15627,15628,15499,15500,15498,15627,15626,15627,15498,15499,15497,15626,15625,15626,15497,15498,15496,15625,15624,15625,15496,15497,15495,15624,15623,15624,15495,15496,15494,15623,15622,15623,15494,15495,15493,15622,15621,15622,15493,15494,15492,15621,15620,15621,15492,15493,15491,15620,15619,15620,15491,15492,15490,15619,15618,15619,15490,15491,15489,15618,15617,15618,15489,15490,15488,15617,15616,15617,15488,15489,15742,15871,15870,15871,15742,15743,15741,15870,15869,15870,15741,15742,15740,15869,15868,15869,15740,15741,15739,15868,15867,15868,15739,15740,15738,15867,15866,15867,15738,15739,15737,15866,15865,15866,15737,15738,15736,15865,15864,15865,15736,15737,15735,15864,15863,15864,15735,15736,15734,15863,15862,15863,15734,15735,15733,15862,15861,15862,15733,15734,15732,15861,15860,15861,15732,15733,15731,15860,15859,15860,15731,15732,15730,15859,15858,15859,15730,15731,15729,15858,15857,15858,15729,15730,15728,15857,15856,15857,15728,15729,15727,15856,15855,15856,15727,15728,15726,15855,15854,15855,15726,15727,15725,15854,15853,15854,15725,15726,15724,15853,15852,15853,15724,15725,15723,15852,15851,15852,15723,15724,15722,15851,15850,15851,15722,15723,15721,15850,15849,15850,15721,15722,15720,15849,15848,15849,15720,15721,15719,15848,15847,15848,15719,15720,15718,15847,15846,15847,15718,15719,15717,15846,15845,15846,15717,15718,15716,15845,15844,15845,15716,15717,15715,15844,15843,15844,15715,15716,15714,15843,15842,15843,15714,15715,15713,15842,15841,15842,15713,15714,15712,15841,15840,15841,15712,15713,15711,15840,15839,15840,15711,15712,15710,15839,15838,15839,15710,15711,15709,15838,15837,15838,15709,15710,15708,15837,15836,15837,15708,15709,15707,15836,15835,15836,15707,15708,15706,15835,15834,15835,15706,15707,15705,15834,15833,15834,15705,15706,15704,15833,15832,15833,15704,15705,15703,15832,15831,15832,15703,15704,15702,15831,15830,15831,15702,15703,15701,15830,15829,15830,15701,15702,15700,15829,15828,15829,15700,15701,15699,15828,15827,15828,15699,15700,15698,15827,15826,15827,15698,15699,15697,15826,15825,15826,15697,15698,15696,15825,15824,15825,15696,15697,15695,15824,15823,15824,15695,15696,15694,15823,15822,15823,15694,15695,15693,15822,15821,15822,15693,15694,15692,15821,15820,15821,15692,15693,15691,15820,15819,15820,15691,15692,15690,15819,15818,15819,15690,15691,15689,15818,15817,15818,15689,15690,15688,15817,15816,15817,15688,15689,15687,15816,15815,15816,15687,15688,15686,15815,15814,15815,15686,15687,15685,15814,15813,15814,15685,15686,15684,15813,15812,15813,15684,15685,15683,15812,15811,15812,15683,15684,15682,15811,15810,15811,15682,15683,15681,15810,15809,15810,15681,15682,15680,15809,15808,15809,15680,15681,15679,15808,15807,15808,15679,15680,15678,15807,15806,15807,15678,15679,15677,15806,15805,15806,15677,15678,15676,15805,15804,15805,15676,15677,15675,15804,15803,15804,15675,15676,15674,15803,15802,15803,15674,15675,15673,15802,15801,15802,15673,15674,15672,15801,15800,15801,15672,15673,15671,15800,15799,15800,15671,15672,15670,15799,15798,15799,15670,15671,15669,15798,15797,15798,15669,15670,15668,15797,15796,15797,15668,15669,15667,15796,15795,15796,15667,15668,15666,15795,15794,15795,15666,15667,15665,15794,15793,15794,15665,15666,15664,15793,15792,15793,15664,15665,15663,15792,15791,15792,15663,15664,15662,15791,15790,15791,15662,15663,15661,15790,15789,15790,15661,15662,15660,15789,15788,15789,15660,15661,15659,15788,15787,15788,15659,15660,15658,15787,15786,15787,15658,15659,15657,15786,15785,15786,15657,15658,15656,15785,15784,15785,15656,15657,15655,15784,15783,15784,15655,15656,15654,15783,15782,15783,15654,15655,15653,15782,15781,15782,15653,15654,15652,15781,15780,15781,15652,15653,15651,15780,15779,15780,15651,15652,15650,15779,15778,15779,15650,15651,15649,15778,15777,15778,15649,15650,15648,15777,15776,15777,15648,15649,15647,15776,15775,15776,15647,15648,15646,15775,15774,15775,15646,15647,15645,15774,15773,15774,15645,15646,15644,15773,15772,15773,15644,15645,15643,15772,15771,15772,15643,15644,15642,15771,15770,15771,15642,15643,15641,15770,15769,15770,15641,15642,15640,15769,15768,15769,15640,15641,15639,15768,15767,15768,15639,15640,15638,15767,15766,15767,15638,15639,15637,15766,15765,15766,15637,15638,15636,15765,15764,15765,15636,15637,15635,15764,15763,15764,15635,15636,15634,15763,15762,15763,15634,15635,15633,15762,15761,15762,15633,15634,15632,15761,15760,15761,15632,15633,15631,15760,15759,15760,15631,15632,15630,15759,15758,15759,15630,15631,15629,15758,15757,15758,15629,15630,15628,15757,15756,15757,15628,15629,15627,15756,15755,15756,15627,15628,15626,15755,15754,15755,15626,15627,15625,15754,15753,15754,15625,15626,15624,15753,15752,15753,15624,15625,15623,15752,15751,15752,15623,15624,15622,15751,15750,15751,15622,15623,15621,15750,15749,15750,15621,15622,15620,15749,15748,15749,15620,15621,15619,15748,15747,15748,15619,15620,15618,15747,15746,15747,15618,15619,15617,15746,15745,15746,15617,15618,15616,15745,15744,15745,15616,15617,15870,15999,15998,15999,15870,15871,15869,15998,15997,15998,15869,15870,15868,15997,15996,15997,15868,15869,15867,15996,15995,15996,15867,15868,15866,15995,15994,15995,15866,15867,15865,15994,15993,15994,15865,15866,15864,15993,15992,15993,15864,15865,15863,15992,15991,15992,15863,15864,15862,15991,15990,15991,15862,15863,15861,15990,15989,15990,15861,15862,15860,15989,15988,15989,15860,15861,15859,15988,15987,15988,15859,15860,15858,15987,15986,15987,15858,15859,15857,15986,15985,15986,15857,15858,15856,15985,15984,15985,15856,15857,15855,15984,15983,15984,15855,15856,15854,15983,15982,15983,15854,15855,15853,15982,15981,15982,15853,15854,15852,15981,15980,15981,15852,15853,15851,15980,15979,15980,15851,15852,15850,15979,15978,15979,15850,15851,15849,15978,15977,15978,15849,15850,15848,15977,15976,15977,15848,15849,15847,15976,15975,15976,15847,15848,15846,15975,15974,15975,15846,15847,15845,15974,15973,15974,15845,15846,15844,15973,15972,15973,15844,15845,15843,15972,15971,15972,15843,15844,15842,15971,15970,15971,15842,15843,15841,15970,15969,15970,15841,15842,15840,15969,15968,15969,15840,15841,15839,15968,15967,15968,15839,15840,15838,15967,15966,15967,15838,15839,15837,15966,15965,15966,15837,15838,15836,15965,15964,15965,15836,15837,15835,15964,15963,15964,15835,15836,15834,15963,15962,15963,15834,15835,15833,15962,15961,15962,15833,15834,15832,15961,15960,15961,15832,15833,15831,15960,15959,15960,15831,15832,15830,15959,15958,15959,15830,15831,15829,15958,15957,15958,15829,15830,15828,15957,15956,15957,15828,15829,15827,15956,15955,15956,15827,15828,15826,15955,15954,15955,15826,15827,15825,15954,15953,15954,15825,15826,15824,15953,15952,15953,15824,15825,15823,15952,15951,15952,15823,15824,15822,15951,15950,15951,15822,15823,15821,15950,15949,15950,15821,15822,15820,15949,15948,15949,15820,15821,15819,15948,15947,15948,15819,15820,15818,15947,15946,15947,15818,15819,15817,15946,15945,15946,15817,15818,15816,15945,15944,15945,15816,15817,15815,15944,15943,15944,15815,15816,15814,15943,15942,15943,15814,15815,15813,15942,15941,15942,15813,15814,15812,15941,15940,15941,15812,15813,15811,15940,15939,15940,15811,15812,15810,15939,15938,15939,15810,15811,15809,15938,15937,15938,15809,15810,15808,15937,15936,15937,15808,15809,15807,15936,15935,15936,15807,15808,15806,15935,15934,15935,15806,15807,15805,15934,15933,15934,15805,15806,15804,15933,15932,15933,15804,15805,15803,15932,15931,15932,15803,15804,15802,15931,15930,15931,15802,15803,15801,15930,15929,15930,15801,15802,15800,15929,15928,15929,15800,15801,15799,15928,15927,15928,15799,15800,15798,15927,15926,15927,15798,15799,15797,15926,15925,15926,15797,15798,15796,15925,15924,15925,15796,15797,15795,15924,15923,15924,15795,15796,15794,15923,15922,15923,15794,15795,15793,15922,15921,15922,15793,15794,15792,15921,15920,15921,15792,15793,15791,15920,15919,15920,15791,15792,15790,15919,15918,15919,15790,15791,15789,15918,15917,15918,15789,15790,15788,15917,15916,15917,15788,15789,15787,15916,15915,15916,15787,15788,15786,15915,15914,15915,15786,15787,15785,15914,15913,15914,15785,15786,15784,15913,15912,15913,15784,15785,15783,15912,15911,15912,15783,15784,15782,15911,15910,15911,15782,15783,15781,15910,15909,15910,15781,15782,15780,15909,15908,15909,15780,15781,15779,15908,15907,15908,15779,15780,15778,15907,15906,15907,15778,15779,15777,15906,15905,15906,15777,15778,15776,15905,15904,15905,15776,15777,15775,15904,15903,15904,15775,15776,15774,15903,15902,15903,15774,15775,15773,15902,15901,15902,15773,15774,15772,15901,15900,15901,15772,15773,15771,15900,15899,15900,15771,15772,15770,15899,15898,15899,15770,15771,15769,15898,15897,15898,15769,15770,15768,15897,15896,15897,15768,15769,15767,15896,15895,15896,15767,15768,15766,15895,15894,15895,15766,15767,15765,15894,15893,15894,15765,15766,15764,15893,15892,15893,15764,15765,15763,15892,15891,15892,15763,15764,15762,15891,15890,15891,15762,15763,15761,15890,15889,15890,15761,15762,15760,15889,15888,15889,15760,15761,15759,15888,15887,15888,15759,15760,15758,15887,15886,15887,15758,15759,15757,15886,15885,15886,15757,15758,15756,15885,15884,15885,15756,15757,15755,15884,15883,15884,15755,15756,15754,15883,15882,15883,15754,15755,15753,15882,15881,15882,15753,15754,15752,15881,15880,15881,15752,15753,15751,15880,15879,15880,15751,15752,15750,15879,15878,15879,15750,15751,15749,15878,15877,15878,15749,15750,15748,15877,15876,15877,15748,15749,15747,15876,15875,15876,15747,15748,15746,15875,15874,15875,15746,15747,15745,15874,15873,15874,15745,15746,15744,15873,15872,15873,15744,15745,15998,16127,16126,16127,15998,15999,15997,16126,16125,16126,15997,15998,15996,16125,16124,16125,15996,15997,15995,16124,16123,16124,15995,15996,15994,16123,16122,16123,15994,15995,15993,16122,16121,16122,15993,15994,15992,16121,16120,16121,15992,15993,15991,16120,16119,16120,15991,15992,15990,16119,16118,16119,15990,15991,15989,16118,16117,16118,15989,15990,15988,16117,16116,16117,15988,15989,15987,16116,16115,16116,15987,15988,15986,16115,16114,16115,15986,15987,15985,16114,16113,16114,15985,15986,15984,16113,16112,16113,15984,15985,15983,16112,16111,16112,15983,15984,15982,16111,16110,16111,15982,15983,15981,16110,16109,16110,15981,15982,15980,16109,16108,16109,15980,15981,15979,16108,16107,16108,15979,15980,15978,16107,16106,16107,15978,15979,15977,16106,16105,16106,15977,15978,15976,16105,16104,16105,15976,15977,15975,16104,16103,16104,15975,15976,15974,16103,16102,16103,15974,15975,15973,16102,16101,16102,15973,15974,15972,16101,16100,16101,15972,15973,15971,16100,16099,16100,15971,15972,15970,16099,16098,16099,15970,15971,15969,16098,16097,16098,15969,15970,15968,16097,16096,16097,15968,15969,15967,16096,16095,16096,15967,15968,15966,16095,16094,16095,15966,15967,15965,16094,16093,16094,15965,15966,15964,16093,16092,16093,15964,15965,15963,16092,16091,16092,15963,15964,15962,16091,16090,16091,15962,15963,15961,16090,16089,16090,15961,15962,15960,16089,16088,16089,15960,15961,15959,16088,16087,16088,15959,15960,15958,16087,16086,16087,15958,15959,15957,16086,16085,16086,15957,15958,15956,16085,16084,16085,15956,15957,15955,16084,16083,16084,15955,15956,15954,16083,16082,16083,15954,15955,15953,16082,16081,16082,15953,15954,15952,16081,16080,16081,15952,15953,15951,16080,16079,16080,15951,15952,15950,16079,16078,16079,15950,15951,15949,16078,16077,16078,15949,15950,15948,16077,16076,16077,15948,15949,15947,16076,16075,16076,15947,15948,15946,16075,16074,16075,15946,15947,15945,16074,16073,16074,15945,15946,15944,16073,16072,16073,15944,15945,15943,16072,16071,16072,15943,15944,15942,16071,16070,16071,15942,15943,15941,16070,16069,16070,15941,15942,15940,16069,16068,16069,15940,15941,15939,16068,16067,16068,15939,15940,15938,16067,16066,16067,15938,15939,15937,16066,16065,16066,15937,15938,15936,16065,16064,16065,15936,15937,15935,16064,16063,16064,15935,15936,15934,16063,16062,16063,15934,15935,15933,16062,16061,16062,15933,15934,15932,16061,16060,16061,15932,15933,15931,16060,16059,16060,15931,15932,15930,16059,16058,16059,15930,15931,15929,16058,16057,16058,15929,15930,15928,16057,16056,16057,15928,15929,15927,16056,16055,16056,15927,15928,15926,16055,16054,16055,15926,15927,15925,16054,16053,16054,15925,15926,15924,16053,16052,16053,15924,15925,15923,16052,16051,16052,15923,15924,15922,16051,16050,16051,15922,15923,15921,16050,16049,16050,15921,15922,15920,16049,16048,16049,15920,15921,15919,16048,16047,16048,15919,15920,15918,16047,16046,16047,15918,15919,15917,16046,16045,16046,15917,15918,15916,16045,16044,16045,15916,15917,15915,16044,16043,16044,15915,15916,15914,16043,16042,16043,15914,15915,15913,16042,16041,16042,15913,15914,15912,16041,16040,16041,15912,15913,15911,16040,16039,16040,15911,15912,15910,16039,16038,16039,15910,15911,15909,16038,16037,16038,15909,15910,15908,16037,16036,16037,15908,15909,15907,16036,16035,16036,15907,15908,15906,16035,16034,16035,15906,15907,15905,16034,16033,16034,15905,15906,15904,16033,16032,16033,15904,15905,15903,16032,16031,16032,15903,15904,15902,16031,16030,16031,15902,15903,15901,16030,16029,16030,15901,15902,15900,16029,16028,16029,15900,15901,15899,16028,16027,16028,15899,15900,15898,16027,16026,16027,15898,15899,15897,16026,16025,16026,15897,15898,15896,16025,16024,16025,15896,15897,15895,16024,16023,16024,15895,15896,15894,16023,16022,16023,15894,15895,15893,16022,16021,16022,15893,15894,15892,16021,16020,16021,15892,15893,15891,16020,16019,16020,15891,15892,15890,16019,16018,16019,15890,15891,15889,16018,16017,16018,15889,15890,15888,16017,16016,16017,15888,15889,15887,16016,16015,16016,15887,15888,15886,16015,16014,16015,15886,15887,15885,16014,16013,16014,15885,15886,15884,16013,16012,16013,15884,15885,15883,16012,16011,16012,15883,15884,15882,16011,16010,16011,15882,15883,15881,16010,16009,16010,15881,15882,15880,16009,16008,16009,15880,15881,15879,16008,16007,16008,15879,15880,15878,16007,16006,16007,15878,15879,15877,16006,16005,16006,15877,15878,15876,16005,16004,16005,15876,15877,15875,16004,16003,16004,15875,15876,15874,16003,16002,16003,15874,15875,15873,16002,16001,16002,15873,15874,15872,16001,16000,16001,15872,15873,16126,16255,16254,16255,16126,16127,16125,16254,16253,16254,16125,16126,16124,16253,16252,16253,16124,16125,16123,16252,16251,16252,16123,16124,16122,16251,16250,16251,16122,16123,16121,16250,16249,16250,16121,16122,16120,16249,16248,16249,16120,16121,16119,16248,16247,16248,16119,16120,16118,16247,16246,16247,16118,16119,16117,16246,16245,16246,16117,16118,16116,16245,16244,16245,16116,16117,16115,16244,16243,16244,16115,16116,16114,16243,16242,16243,16114,16115,16113,16242,16241,16242,16113,16114,16112,16241,16240,16241,16112,16113,16111,16240,16239,16240,16111,16112,16110,16239,16238,16239,16110,16111,16109,16238,16237,16238,16109,16110,16108,16237,16236,16237,16108,16109,16107,16236,16235,16236,16107,16108,16106,16235,16234,16235,16106,16107,16105,16234,16233,16234,16105,16106,16104,16233,16232,16233,16104,16105,16103,16232,16231,16232,16103,16104,16102,16231,16230,16231,16102,16103,16101,16230,16229,16230,16101,16102,16100,16229,16228,16229,16100,16101,16099,16228,16227,16228,16099,16100,16098,16227,16226,16227,16098,16099,16097,16226,16225,16226,16097,16098,16096,16225,16224,16225,16096,16097,16095,16224,16223,16224,16095,16096,16094,16223,16222,16223,16094,16095,16093,16222,16221,16222,16093,16094,16092,16221,16220,16221,16092,16093,16091,16220,16219,16220,16091,16092,16090,16219,16218,16219,16090,16091,16089,16218,16217,16218,16089,16090,16088,16217,16216,16217,16088,16089,16087,16216,16215,16216,16087,16088,16086,16215,16214,16215,16086,16087,16085,16214,16213,16214,16085,16086,16084,16213,16212,16213,16084,16085,16083,16212,16211,16212,16083,16084,16082,16211,16210,16211,16082,16083,16081,16210,16209,16210,16081,16082,16080,16209,16208,16209,16080,16081,16079,16208,16207,16208,16079,16080,16078,16207,16206,16207,16078,16079,16077,16206,16205,16206,16077,16078,16076,16205,16204,16205,16076,16077,16075,16204,16203,16204,16075,16076,16074,16203,16202,16203,16074,16075,16073,16202,16201,16202,16073,16074,16072,16201,16200,16201,16072,16073,16071,16200,16199,16200,16071,16072,16070,16199,16198,16199,16070,16071,16069,16198,16197,16198,16069,16070,16068,16197,16196,16197,16068,16069,16067,16196,16195,16196,16067,16068,16066,16195,16194,16195,16066,16067,16065,16194,16193,16194,16065,16066,16064,16193,16192,16193,16064,16065,16063,16192,16191,16192,16063,16064,16062,16191,16190,16191,16062,16063,16061,16190,16189,16190,16061,16062,16060,16189,16188,16189,16060,16061,16059,16188,16187,16188,16059,16060,16058,16187,16186,16187,16058,16059,16057,16186,16185,16186,16057,16058,16056,16185,16184,16185,16056,16057,16055,16184,16183,16184,16055,16056,16054,16183,16182,16183,16054,16055,16053,16182,16181,16182,16053,16054,16052,16181,16180,16181,16052,16053,16051,16180,16179,16180,16051,16052,16050,16179,16178,16179,16050,16051,16049,16178,16177,16178,16049,16050,16048,16177,16176,16177,16048,16049,16047,16176,16175,16176,16047,16048,16046,16175,16174,16175,16046,16047,16045,16174,16173,16174,16045,16046,16044,16173,16172,16173,16044,16045,16043,16172,16171,16172,16043,16044,16042,16171,16170,16171,16042,16043,16041,16170,16169,16170,16041,16042,16040,16169,16168,16169,16040,16041,16039,16168,16167,16168,16039,16040,16038,16167,16166,16167,16038,16039,16037,16166,16165,16166,16037,16038,16036,16165,16164,16165,16036,16037,16035,16164,16163,16164,16035,16036,16034,16163,16162,16163,16034,16035,16033,16162,16161,16162,16033,16034,16032,16161,16160,16161,16032,16033,16031,16160,16159,16160,16031,16032,16030,16159,16158,16159,16030,16031,16029,16158,16157,16158,16029,16030,16028,16157,16156,16157,16028,16029,16027,16156,16155,16156,16027,16028,16026,16155,16154,16155,16026,16027,16025,16154,16153,16154,16025,16026,16024,16153,16152,16153,16024,16025,16023,16152,16151,16152,16023,16024,16022,16151,16150,16151,16022,16023,16021,16150,16149,16150,16021,16022,16020,16149,16148,16149,16020,16021,16019,16148,16147,16148,16019,16020,16018,16147,16146,16147,16018,16019,16017,16146,16145,16146,16017,16018,16016,16145,16144,16145,16016,16017,16015,16144,16143,16144,16015,16016,16014,16143,16142,16143,16014,16015,16013,16142,16141,16142,16013,16014,16012,16141,16140,16141,16012,16013,16011,16140,16139,16140,16011,16012,16010,16139,16138,16139,16010,16011,16009,16138,16137,16138,16009,16010,16008,16137,16136,16137,16008,16009,16007,16136,16135,16136,16007,16008,16006,16135,16134,16135,16006,16007,16005,16134,16133,16134,16005,16006,16004,16133,16132,16133,16004,16005,16003,16132,16131,16132,16003,16004,16002,16131,16130,16131,16002,16003,16001,16130,16129,16130,16001,16002,16000,16129,16128,16129,16000,16001,16254,16383,16382,16383,16254,16255,16253,16382,16381,16382,16253,16254,16252,16381,16380,16381,16252,16253,16251,16380,16379,16380,16251,16252,16250,16379,16378,16379,16250,16251,16249,16378,16377,16378,16249,16250,16248,16377,16376,16377,16248,16249,16247,16376,16375,16376,16247,16248,16246,16375,16374,16375,16246,16247,16245,16374,16373,16374,16245,16246,16244,16373,16372,16373,16244,16245,16243,16372,16371,16372,16243,16244,16242,16371,16370,16371,16242,16243,16241,16370,16369,16370,16241,16242,16240,16369,16368,16369,16240,16241,16239,16368,16367,16368,16239,16240,16238,16367,16366,16367,16238,16239,16237,16366,16365,16366,16237,16238,16236,16365,16364,16365,16236,16237,16235,16364,16363,16364,16235,16236,16234,16363,16362,16363,16234,16235,16233,16362,16361,16362,16233,16234,16232,16361,16360,16361,16232,16233,16231,16360,16359,16360,16231,16232,16230,16359,16358,16359,16230,16231,16229,16358,16357,16358,16229,16230,16228,16357,16356,16357,16228,16229,16227,16356,16355,16356,16227,16228,16226,16355,16354,16355,16226,16227,16225,16354,16353,16354,16225,16226,16224,16353,16352,16353,16224,16225,16223,16352,16351,16352,16223,16224,16222,16351,16350,16351,16222,16223,16221,16350,16349,16350,16221,16222,16220,16349,16348,16349,16220,16221,16219,16348,16347,16348,16219,16220,16218,16347,16346,16347,16218,16219,16217,16346,16345,16346,16217,16218,16216,16345,16344,16345,16216,16217,16215,16344,16343,16344,16215,16216,16214,16343,16342,16343,16214,16215,16213,16342,16341,16342,16213,16214,16212,16341,16340,16341,16212,16213,16211,16340,16339,16340,16211,16212,16210,16339,16338,16339,16210,16211,16209,16338,16337,16338,16209,16210,16208,16337,16336,16337,16208,16209,16207,16336,16335,16336,16207,16208,16206,16335,16334,16335,16206,16207,16205,16334,16333,16334,16205,16206,16204,16333,16332,16333,16204,16205,16203,16332,16331,16332,16203,16204,16202,16331,16330,16331,16202,16203,16201,16330,16329,16330,16201,16202,16200,16329,16328,16329,16200,16201,16199,16328,16327,16328,16199,16200,16198,16327,16326,16327,16198,16199,16197,16326,16325,16326,16197,16198,16196,16325,16324,16325,16196,16197,16195,16324,16323,16324,16195,16196,16194,16323,16322,16323,16194,16195,16193,16322,16321,16322,16193,16194,16192,16321,16320,16321,16192,16193,16191,16320,16319,16320,16191,16192,16190,16319,16318,16319,16190,16191,16189,16318,16317,16318,16189,16190,16188,16317,16316,16317,16188,16189,16187,16316,16315,16316,16187,16188,16186,16315,16314,16315,16186,16187,16185,16314,16313,16314,16185,16186,16184,16313,16312,16313,16184,16185,16183,16312,16311,16312,16183,16184,16182,16311,16310,16311,16182,16183,16181,16310,16309,16310,16181,16182,16180,16309,16308,16309,16180,16181,16179,16308,16307,16308,16179,16180,16178,16307,16306,16307,16178,16179,16177,16306,16305,16306,16177,16178,16176,16305,16304,16305,16176,16177,16175,16304,16303,16304,16175,16176,16174,16303,16302,16303,16174,16175,16173,16302,16301,16302,16173,16174,16172,16301,16300,16301,16172,16173,16171,16300,16299,16300,16171,16172,16170,16299,16298,16299,16170,16171,16169,16298,16297,16298,16169,16170,16168,16297,16296,16297,16168,16169,16167,16296,16295,16296,16167,16168,16166,16295,16294,16295,16166,16167,16165,16294,16293,16294,16165,16166,16164,16293,16292,16293,16164,16165,16163,16292,16291,16292,16163,16164,16162,16291,16290,16291,16162,16163,16161,16290,16289,16290,16161,16162,16160,16289,16288,16289,16160,16161,16159,16288,16287,16288,16159,16160,16158,16287,16286,16287,16158,16159,16157,16286,16285,16286,16157,16158,16156,16285,16284,16285,16156,16157,16155,16284,16283,16284,16155,16156,16154,16283,16282,16283,16154,16155,16153,16282,16281,16282,16153,16154,16152,16281,16280,16281,16152,16153,16151,16280,16279,16280,16151,16152,16150,16279,16278,16279,16150,16151,16149,16278,16277,16278,16149,16150,16148,16277,16276,16277,16148,16149,16147,16276,16275,16276,16147,16148,16146,16275,16274,16275,16146,16147,16145,16274,16273,16274,16145,16146,16144,16273,16272,16273,16144,16145,16143,16272,16271,16272,16143,16144,16142,16271,16270,16271,16142,16143,16141,16270,16269,16270,16141,16142,16140,16269,16268,16269,16140,16141,16139,16268,16267,16268,16139,16140,16138,16267,16266,16267,16138,16139,16137,16266,16265,16266,16137,16138,16136,16265,16264,16265,16136,16137,16135,16264,16263,16264,16135,16136,16134,16263,16262,16263,16134,16135,16133,16262,16261,16262,16133,16134,16132,16261,16260,16261,16132,16133,16131,16260,16259,16260,16131,16132,16130,16259,16258,16259,16130,16131,16129,16258,16257,16258,16129,16130,16128,16257,16256,16257,16128,16129]

    		)
    	});
    });

    var terrainFrag = "\nuniform vec3 color;\nuniform vec3 emissive;\nuniform float alpha;\nuniform float specularity;\nuniform sampler2D bumpmap;\nuniform sampler2D colormap;\nuniform sampler2D emissivemap;\nuniform sampler2D specularitymap;\nuniform vec3 FOG_COLOR;\nuniform float FOG_DENSITY;\n#define NAME terrain-frag\n#define C_ZERO 0.0\n#define C_QUARTER 0.25\n#define C_HALF 0.5\n#define C_ONE 1.0\nin vec3 v_directional_light_shading;\nin vec3 v_normal;\nin vec2 v_textureCoords;\nout mediump vec4 fragColor;\nvoid main () {\n    fragColor = vec4(v_directional_light_shading * color, C_ONE);\n    #if defined(has_colormap)\n    fragColor = vec4(v_directional_light_shading * texture(colormap, v_textureCoords).rgb, C_ONE);\n    #endif\n    if (alpha == C_ZERO || (C_ZERO <= alpha && alpha <= C_ONE)) {\n        fragColor.a *= alpha;\n    }\n}\n";

    var terrainVert = "\n#define NAME terrain-vert\n#define C_ZERO 0.0\n#define C_QUARTER 0.25\n#define C_HALF 0.5\n#define C_ONE 1.0\n#define DISPLACE_MULTIPLY 0.5\nuniform sampler2D normalmap;\nuniform float height_adjustment;\nin vec3 position;\nin vec3 normal;\nin vec2 uv;\nout vec3 v_normal;\nout vec2 v_textureCoords;\nuniform vec3 light_direction;uniform vec3 light_ambient_color;\nuniform vec3 light_diffuse_color;\nuniform vec3 light_specular_color;\nuniform float material_specular_exponent;\nout vec3 v_directional_light_shading;\nvec3 directional_light_shading (vec3 normal) {\n\tvec3 computed_shade = vec3(C_ZERO, C_ZERO, C_ZERO);\n\tvec3 halfplane_vector = vec3(C_ZERO, C_ONE, C_ZERO);\n\tvec3 nlight_direction = normalize(light_direction);\tvec3 nlight_halfplane = normalize(nlight_direction + halfplane_vector);\tfloat ndotL;\tfloat ndotH;\n\tndotL = max(C_ZERO, dot(normal, nlight_direction));\n\tcomputed_shade += vec3(\n\t\t(light_ambient_color.x * (C_ONE - C_QUARTER)), (light_ambient_color.y * (C_ONE - C_QUARTER)), (light_ambient_color.z * (C_ONE - C_QUARTER))\n\t) + vec3(C_QUARTER, C_QUARTER, C_QUARTER);\n\tcomputed_shade += ndotL * light_diffuse_color * vec3(C_ONE, C_ONE, C_ONE);\n\tndotH = max(C_ZERO, dot(normal, nlight_halfplane));\n\tif (ndotH > C_ZERO) {\n\t\tcomputed_shade += pow(ndotH, material_specular_exponent) * vec3(C_ONE, C_ONE, C_ONE) * light_specular_color;\n\t}\n\treturn computed_shade;\n}\nvoid main() {\n\tvec3 displacement = texture(normalmap, uv).rgb;\n\tvec3 displace_along_verticle = normal * displacement * (DISPLACE_MULTIPLY * height_adjustment);\n\tvec3 displaced_position = position + displace_along_verticle;\n\tvec3 displace_along_normal = vec3(normal * displacement);\n\tv_normal = DISPLACE_MULTIPLY * normal;\n\t#if defined(has_normalmap)\n\tv_normal = DISPLACE_MULTIPLY * displace_along_normal;\n\t#endif\n\tv_textureCoords = uv;\n\tv_directional_light_shading = directional_light_shading((MODEL_INVERSE_TRANSPOSE * vec4(v_normal, C_ZERO)).xyz);\n\tgl_Position = PROJECTION * VIEW * MODEL * vec4(displaced_position, C_ONE);\n}\n";

    /* src/apps/SimulationApp.svelte generated by Svelte v3.24.0 */

    const { console: console_1$2 } = globals;

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[57] = list[i];
    	child_ctx[61] = i;
    	return child_ctx;
    }

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[57] = list[i];
    	child_ctx[59] = i;
    	return child_ctx;
    }

    // (511:4) <GL.OrbitControls maxPolarAngle={Math.PI / 2} {location} {target}>
    function create_default_slot_3(ctx) {
    	let t0_value = /*captureViewDirection*/ ctx[23](/*location*/ ctx[14], /*target*/ ctx[15]) + "";
    	let t0;
    	let t1;
    	let gl_perspectivecamera;
    	let current;

    	gl_perspectivecamera = new PerspectiveCamera({
    			props: {
    				location: /*location*/ ctx[14],
    				lookAt: "center",
    				near: 0.01,
    				far: 1000
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			t0 = text(t0_value);
    			t1 = space();
    			create_component(gl_perspectivecamera.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(gl_perspectivecamera, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty[0] & /*location, target*/ 49152) && t0_value !== (t0_value = /*captureViewDirection*/ ctx[23](/*location*/ ctx[14], /*target*/ ctx[15]) + "")) set_data_dev(t0, t0_value);
    			const gl_perspectivecamera_changes = {};
    			if (dirty[0] & /*location*/ 16384) gl_perspectivecamera_changes.location = /*location*/ ctx[14];
    			gl_perspectivecamera.$set(gl_perspectivecamera_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_perspectivecamera.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_perspectivecamera.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			destroy_component(gl_perspectivecamera, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3.name,
    		type: "slot",
    		source: "(511:4) <GL.OrbitControls maxPolarAngle={Math.PI / 2} {location} {target}>",
    		ctx
    	});

    	return block;
    }

    // (519:4) {#if options['values'][0]}
    function create_if_block_1$1(ctx) {
    	let gl_mesh;
    	let current;

    	gl_mesh = new Mesh({
    			props: {
    				geometry: box(/*cursorDimensions*/ ctx[20]),
    				location: [0, -/*worldPosition*/ ctx[11].y + markerHeight, 0],
    				rotation: [-90, 0, 0],
    				scale: [
    					0.99 / /*worldPosition*/ ctx[11].r,
    					0.99 / /*worldPosition*/ ctx[11].r,
    					0.05
    				],
    				vert: quadVert,
    				frag: quadFrag,
    				uniforms: {
    					color: adjustColor$1(/*color*/ ctx[0]),
    					alpha: 1
    				},
    				transparent: true
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(gl_mesh.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(gl_mesh, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const gl_mesh_changes = {};
    			if (dirty[0] & /*worldPosition*/ 2048) gl_mesh_changes.location = [0, -/*worldPosition*/ ctx[11].y + markerHeight, 0];

    			if (dirty[0] & /*worldPosition*/ 2048) gl_mesh_changes.scale = [
    				0.99 / /*worldPosition*/ ctx[11].r,
    				0.99 / /*worldPosition*/ ctx[11].r,
    				0.05
    			];

    			if (dirty[0] & /*color*/ 1) gl_mesh_changes.uniforms = {
    				color: adjustColor$1(/*color*/ ctx[0]),
    				alpha: 1
    			};

    			gl_mesh.$set(gl_mesh_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_mesh.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_mesh.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gl_mesh, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(519:4) {#if options['values'][0]}",
    		ctx
    	});

    	return block;
    }

    // (558:8) {#if (a > 0.01)}
    function create_if_block$2(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = Array(/*heightmap*/ ctx[3].length);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*heightmap, gridSizeX, gridSizeZ, w, h, d, color, a*/ 7077945) {
    				each_value = Array(/*heightmap*/ ctx[3].length);
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(558:8) {#if (a > 0.01)}",
    		ctx
    	});

    	return block;
    }

    // (560:16) {#each Array(heightmap[k].length) as _, i}
    function create_each_block_1$1(ctx) {
    	let gl_mesh;
    	let current;

    	gl_mesh = new Mesh({
    			props: {
    				geometry: box({
    					x: 0,
    					y: 0,
    					z: 0,
    					w: /*gridSizeX*/ ctx[18] / /*heightmap*/ ctx[3][/*i*/ ctx[61]].length,
    					h: 1 * /*heightmap*/ ctx[3][/*k*/ ctx[59]][/*i*/ ctx[61]],
    					d: /*gridSizeZ*/ ctx[19] / /*heightmap*/ ctx[3].length
    				}),
    				location: [
    					-(/*gridSizeX*/ ctx[18] / 2) + /*i*/ ctx[61] * (/*gridSizeX*/ ctx[18] / /*heightmap*/ ctx[3][0].length),
    					0,
    					-(/*gridSizeZ*/ ctx[19] / 2) + /*k*/ ctx[59] * (/*gridSizeZ*/ ctx[19] / /*heightmap*/ ctx[3].length)
    				],
    				rotation: [0, 0, 0],
    				scale: [/*w*/ ctx[21], 3 * /*h*/ ctx[5] / 8, /*d*/ ctx[22]],
    				uniforms: {
    					color: adjustColor$1(/*color*/ ctx[0], /*heightmap*/ ctx[3][/*k*/ ctx[59]][/*i*/ ctx[61]]),
    					alpha: /*a*/ ctx[4]
    				}
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(gl_mesh.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(gl_mesh, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const gl_mesh_changes = {};

    			if (dirty[0] & /*heightmap*/ 8) gl_mesh_changes.geometry = box({
    				x: 0,
    				y: 0,
    				z: 0,
    				w: /*gridSizeX*/ ctx[18] / /*heightmap*/ ctx[3][/*i*/ ctx[61]].length,
    				h: 1 * /*heightmap*/ ctx[3][/*k*/ ctx[59]][/*i*/ ctx[61]],
    				d: /*gridSizeZ*/ ctx[19] / /*heightmap*/ ctx[3].length
    			});

    			if (dirty[0] & /*heightmap*/ 8) gl_mesh_changes.location = [
    				-(/*gridSizeX*/ ctx[18] / 2) + /*i*/ ctx[61] * (/*gridSizeX*/ ctx[18] / /*heightmap*/ ctx[3][0].length),
    				0,
    				-(/*gridSizeZ*/ ctx[19] / 2) + /*k*/ ctx[59] * (/*gridSizeZ*/ ctx[19] / /*heightmap*/ ctx[3].length)
    			];

    			if (dirty[0] & /*h*/ 32) gl_mesh_changes.scale = [/*w*/ ctx[21], 3 * /*h*/ ctx[5] / 8, /*d*/ ctx[22]];

    			if (dirty[0] & /*color, heightmap, a*/ 25) gl_mesh_changes.uniforms = {
    				color: adjustColor$1(/*color*/ ctx[0], /*heightmap*/ ctx[3][/*k*/ ctx[59]][/*i*/ ctx[61]]),
    				alpha: /*a*/ ctx[4]
    			};

    			gl_mesh.$set(gl_mesh_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_mesh.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_mesh.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gl_mesh, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(560:16) {#each Array(heightmap[k].length) as _, i}",
    		ctx
    	});

    	return block;
    }

    // (559:12) {#each Array(heightmap.length) as _, k}
    function create_each_block$1(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value_1 = Array(/*heightmap*/ ctx[3][/*k*/ ctx[59]].length);
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*gridSizeX, heightmap, gridSizeZ, w, h, d, color, a*/ 7077945) {
    				each_value_1 = Array(/*heightmap*/ ctx[3][/*k*/ ctx[59]].length);
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_1$1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(559:12) {#each Array(heightmap.length) as _, k}",
    		ctx
    	});

    	return block;
    }

    // (573:8) <GL.Group location={[ light.x, light.y, light.z ]}>
    function create_default_slot_2$1(ctx) {
    	let gl_pointlight;
    	let current;

    	gl_pointlight = new PointLight({
    			props: {
    				location: [0, 0, 0],
    				color: adjustColor$1(/*color*/ ctx[0], 1),
    				intensity: 0.6
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(gl_pointlight.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(gl_pointlight, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const gl_pointlight_changes = {};
    			if (dirty[0] & /*color*/ 1) gl_pointlight_changes.color = adjustColor$1(/*color*/ ctx[0], 1);
    			gl_pointlight.$set(gl_pointlight_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_pointlight.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_pointlight.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gl_pointlight, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$1.name,
    		type: "slot",
    		source: "(573:8) <GL.Group location={[ light.x, light.y, light.z ]}>",
    		ctx
    	});

    	return block;
    }

    // (534:4) <GL.Group location={[-worldPosition.x, -worldPosition.y, -worldPosition.z]}>
    function create_default_slot_1$1(ctx) {
    	let gl_mesh0;
    	let t0;
    	let gl_mesh1;
    	let t1;
    	let t2;
    	let gl_group;
    	let current;

    	gl_mesh0 = new Mesh({
    			props: {
    				geometry: /*use_heightmap*/ ctx[10] ? terrain() : terrain$1(),
    				location: [0, -/*h*/ ctx[5] / 8, 0],
    				rotation: [-/*rot*/ ctx[6], 0, 0],
    				scale: [
    					/*initQuadWidth*/ ctx[17],
    					/*initQuadWidth*/ ctx[17],
    					31 * /*h*/ ctx[5] / 8
    				],
    				frag: terrainFrag,
    				vert: terrainVert,
    				uniforms: {
    					alpha: 1,
    					color: adjustColor$1(/*color*/ ctx[0], /*h*/ ctx[5]),
    					colormap: /*colormap*/ ctx[8],
    					normalmap: /*normalmap*/ ctx[9]
    				}
    			},
    			$$inline: true
    		});

    	gl_mesh1 = new Mesh({
    			props: {
    				geometry: plane(),
    				location: [0, -/*h*/ ctx[5] * 96 / 1024, 0],
    				rotation: [-90, 0, 0],
    				scale: /*initQuadWidth*/ ctx[17],
    				uniforms: { color: 26367, alpha: 0.45 },
    				transparent: true
    			},
    			$$inline: true
    		});

    	let if_block = /*a*/ ctx[4] > 0.01 && create_if_block$2(ctx);

    	gl_group = new Group({
    			props: {
    				location: [/*light*/ ctx[7].x, /*light*/ ctx[7].y, /*light*/ ctx[7].z],
    				$$slots: { default: [create_default_slot_2$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(gl_mesh0.$$.fragment);
    			t0 = space();
    			create_component(gl_mesh1.$$.fragment);
    			t1 = space();
    			if (if_block) if_block.c();
    			t2 = space();
    			create_component(gl_group.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(gl_mesh0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(gl_mesh1, target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(gl_group, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const gl_mesh0_changes = {};
    			if (dirty[0] & /*use_heightmap*/ 1024) gl_mesh0_changes.geometry = /*use_heightmap*/ ctx[10] ? terrain() : terrain$1();
    			if (dirty[0] & /*h*/ 32) gl_mesh0_changes.location = [0, -/*h*/ ctx[5] / 8, 0];
    			if (dirty[0] & /*rot*/ 64) gl_mesh0_changes.rotation = [-/*rot*/ ctx[6], 0, 0];

    			if (dirty[0] & /*h*/ 32) gl_mesh0_changes.scale = [
    				/*initQuadWidth*/ ctx[17],
    				/*initQuadWidth*/ ctx[17],
    				31 * /*h*/ ctx[5] / 8
    			];

    			if (dirty[0] & /*color, h, colormap, normalmap*/ 801) gl_mesh0_changes.uniforms = {
    				alpha: 1,
    				color: adjustColor$1(/*color*/ ctx[0], /*h*/ ctx[5]),
    				colormap: /*colormap*/ ctx[8],
    				normalmap: /*normalmap*/ ctx[9]
    			};

    			gl_mesh0.$set(gl_mesh0_changes);
    			const gl_mesh1_changes = {};
    			if (dirty[0] & /*h*/ 32) gl_mesh1_changes.location = [0, -/*h*/ ctx[5] * 96 / 1024, 0];
    			gl_mesh1.$set(gl_mesh1_changes);

    			if (/*a*/ ctx[4] > 0.01) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*a*/ 16) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$2(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(t2.parentNode, t2);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			const gl_group_changes = {};
    			if (dirty[0] & /*light*/ 128) gl_group_changes.location = [/*light*/ ctx[7].x, /*light*/ ctx[7].y, /*light*/ ctx[7].z];

    			if (dirty[0] & /*color*/ 1 | dirty[2] & /*$$scope*/ 1) {
    				gl_group_changes.$$scope = { dirty, ctx };
    			}

    			gl_group.$set(gl_group_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_mesh0.$$.fragment, local);
    			transition_in(gl_mesh1.$$.fragment, local);
    			transition_in(if_block);
    			transition_in(gl_group.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_mesh0.$$.fragment, local);
    			transition_out(gl_mesh1.$$.fragment, local);
    			transition_out(if_block);
    			transition_out(gl_group.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gl_mesh0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(gl_mesh1, detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(gl_group, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$1.name,
    		type: "slot",
    		source: "(534:4) <GL.Group location={[-worldPosition.x, -worldPosition.y, -worldPosition.z]}>",
    		ctx
    	});

    	return block;
    }

    // (508:0) <GL.Scene bind:gl={webgl} backgroundOpacity=1.0 process_extra_shader_components={process_extra_shader_components}>
    function create_default_slot$2(ctx) {
    	let gl_target;
    	let t0;
    	let gl_orbitcontrols;
    	let t1;
    	let gl_ambientlight;
    	let t2;
    	let gl_directionallight;
    	let t3;
    	let t4;
    	let gl_group;
    	let current;

    	gl_target = new Target({
    			props: { id: "center", location: [0, 0.5, 0] },
    			$$inline: true
    		});

    	gl_orbitcontrols = new OrbitControls({
    			props: {
    				maxPolarAngle: Math.PI / 2,
    				location: /*location*/ ctx[14],
    				target: /*target*/ ctx[15],
    				$$slots: { default: [create_default_slot_3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	gl_ambientlight = new AmbientLight({
    			props: { intensity: 0.5 },
    			$$inline: true
    		});

    	gl_directionallight = new DirectionalLight({
    			props: { direction: [-1, -1, -1], intensity: 0.5 },
    			$$inline: true
    		});

    	let if_block = /*options*/ ctx[1]["values"][0] && create_if_block_1$1(ctx);

    	gl_group = new Group({
    			props: {
    				location: [
    					-/*worldPosition*/ ctx[11].x,
    					-/*worldPosition*/ ctx[11].y,
    					-/*worldPosition*/ ctx[11].z
    				],
    				$$slots: { default: [create_default_slot_1$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(gl_target.$$.fragment);
    			t0 = space();
    			create_component(gl_orbitcontrols.$$.fragment);
    			t1 = space();
    			create_component(gl_ambientlight.$$.fragment);
    			t2 = space();
    			create_component(gl_directionallight.$$.fragment);
    			t3 = space();
    			if (if_block) if_block.c();
    			t4 = space();
    			create_component(gl_group.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(gl_target, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(gl_orbitcontrols, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(gl_ambientlight, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(gl_directionallight, target, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(gl_group, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const gl_orbitcontrols_changes = {};
    			if (dirty[0] & /*location*/ 16384) gl_orbitcontrols_changes.location = /*location*/ ctx[14];
    			if (dirty[0] & /*target*/ 32768) gl_orbitcontrols_changes.target = /*target*/ ctx[15];

    			if (dirty[0] & /*location, target*/ 49152 | dirty[2] & /*$$scope*/ 1) {
    				gl_orbitcontrols_changes.$$scope = { dirty, ctx };
    			}

    			gl_orbitcontrols.$set(gl_orbitcontrols_changes);

    			if (/*options*/ ctx[1]["values"][0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*options*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$1(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(t4.parentNode, t4);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			const gl_group_changes = {};

    			if (dirty[0] & /*worldPosition*/ 2048) gl_group_changes.location = [
    				-/*worldPosition*/ ctx[11].x,
    				-/*worldPosition*/ ctx[11].y,
    				-/*worldPosition*/ ctx[11].z
    			];

    			if (dirty[0] & /*light, color, heightmap, h, a, use_heightmap, rot, colormap, normalmap*/ 2041 | dirty[2] & /*$$scope*/ 1) {
    				gl_group_changes.$$scope = { dirty, ctx };
    			}

    			gl_group.$set(gl_group_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_target.$$.fragment, local);
    			transition_in(gl_orbitcontrols.$$.fragment, local);
    			transition_in(gl_ambientlight.$$.fragment, local);
    			transition_in(gl_directionallight.$$.fragment, local);
    			transition_in(if_block);
    			transition_in(gl_group.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_target.$$.fragment, local);
    			transition_out(gl_orbitcontrols.$$.fragment, local);
    			transition_out(gl_ambientlight.$$.fragment, local);
    			transition_out(gl_directionallight.$$.fragment, local);
    			transition_out(if_block);
    			transition_out(gl_group.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gl_target, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(gl_orbitcontrols, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(gl_ambientlight, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(gl_directionallight, detaching);
    			if (detaching) detach_dev(t3);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t4);
    			destroy_component(gl_group, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(508:0) <GL.Scene bind:gl={webgl} backgroundOpacity=1.0 process_extra_shader_components={process_extra_shader_components}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$g(ctx) {
    	let gl_scene;
    	let updating_gl;
    	let t;
    	let navigationcontrols;
    	let updating_init;
    	let updating_color;
    	let updating_options;
    	let updating_rangeOptions;
    	let updating_rangeValues;
    	let updating_viewLocation;
    	let updating_viewTarget;
    	let updating_worldPosition;
    	let current;

    	function gl_scene_gl_binding(value) {
    		/*gl_scene_gl_binding*/ ctx[27].call(null, value);
    	}

    	let gl_scene_props = {
    		backgroundOpacity: "1.0",
    		process_extra_shader_components: /*process_extra_shader_components*/ ctx[24],
    		$$slots: { default: [create_default_slot$2] },
    		$$scope: { ctx }
    	};

    	if (/*webgl*/ ctx[12] !== void 0) {
    		gl_scene_props.gl = /*webgl*/ ctx[12];
    	}

    	gl_scene = new Scene({ props: gl_scene_props, $$inline: true });
    	binding_callbacks.push(() => bind(gl_scene, "gl", gl_scene_gl_binding));

    	function navigationcontrols_init_binding(value) {
    		/*navigationcontrols_init_binding*/ ctx[28].call(null, value);
    	}

    	function navigationcontrols_color_binding(value) {
    		/*navigationcontrols_color_binding*/ ctx[29].call(null, value);
    	}

    	function navigationcontrols_options_binding(value) {
    		/*navigationcontrols_options_binding*/ ctx[30].call(null, value);
    	}

    	function navigationcontrols_rangeOptions_binding(value) {
    		/*navigationcontrols_rangeOptions_binding*/ ctx[31].call(null, value);
    	}

    	function navigationcontrols_rangeValues_binding(value) {
    		/*navigationcontrols_rangeValues_binding*/ ctx[32].call(null, value);
    	}

    	function navigationcontrols_viewLocation_binding(value) {
    		/*navigationcontrols_viewLocation_binding*/ ctx[33].call(null, value);
    	}

    	function navigationcontrols_viewTarget_binding(value) {
    		/*navigationcontrols_viewTarget_binding*/ ctx[34].call(null, value);
    	}

    	function navigationcontrols_worldPosition_binding(value) {
    		/*navigationcontrols_worldPosition_binding*/ ctx[35].call(null, value);
    	}

    	let navigationcontrols_props = { extent: /*eventQuad*/ ctx[16].extent };

    	if (/*controlInit*/ ctx[13] !== void 0) {
    		navigationcontrols_props.init = /*controlInit*/ ctx[13];
    	}

    	if (/*color*/ ctx[0] !== void 0) {
    		navigationcontrols_props.color = /*color*/ ctx[0];
    	}

    	if (/*options*/ ctx[1] !== void 0) {
    		navigationcontrols_props.options = /*options*/ ctx[1];
    	}

    	if (/*ranges*/ ctx[2] !== void 0) {
    		navigationcontrols_props.rangeOptions = /*ranges*/ ctx[2];
    	}

    	if (/*ranges*/ ctx[2].values !== void 0) {
    		navigationcontrols_props.rangeValues = /*ranges*/ ctx[2].values;
    	}

    	if (/*location*/ ctx[14] !== void 0) {
    		navigationcontrols_props.viewLocation = /*location*/ ctx[14];
    	}

    	if (/*target*/ ctx[15] !== void 0) {
    		navigationcontrols_props.viewTarget = /*target*/ ctx[15];
    	}

    	if (/*worldPosition*/ ctx[11] !== void 0) {
    		navigationcontrols_props.worldPosition = /*worldPosition*/ ctx[11];
    	}

    	navigationcontrols = new NavigationControls({
    			props: navigationcontrols_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(navigationcontrols, "init", navigationcontrols_init_binding));
    	binding_callbacks.push(() => bind(navigationcontrols, "color", navigationcontrols_color_binding));
    	binding_callbacks.push(() => bind(navigationcontrols, "options", navigationcontrols_options_binding));
    	binding_callbacks.push(() => bind(navigationcontrols, "rangeOptions", navigationcontrols_rangeOptions_binding));
    	binding_callbacks.push(() => bind(navigationcontrols, "rangeValues", navigationcontrols_rangeValues_binding));
    	binding_callbacks.push(() => bind(navigationcontrols, "viewLocation", navigationcontrols_viewLocation_binding));
    	binding_callbacks.push(() => bind(navigationcontrols, "viewTarget", navigationcontrols_viewTarget_binding));
    	binding_callbacks.push(() => bind(navigationcontrols, "worldPosition", navigationcontrols_worldPosition_binding));
    	navigationcontrols.$on("move", /*move_handler*/ ctx[36]);

    	const block = {
    		c: function create() {
    			create_component(gl_scene.$$.fragment);
    			t = space();
    			create_component(navigationcontrols.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(gl_scene, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(navigationcontrols, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const gl_scene_changes = {};

    			if (dirty[0] & /*worldPosition, light, color, heightmap, h, a, use_heightmap, rot, colormap, normalmap, options, location, target*/ 53243 | dirty[2] & /*$$scope*/ 1) {
    				gl_scene_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_gl && dirty[0] & /*webgl*/ 4096) {
    				updating_gl = true;
    				gl_scene_changes.gl = /*webgl*/ ctx[12];
    				add_flush_callback(() => updating_gl = false);
    			}

    			gl_scene.$set(gl_scene_changes);
    			const navigationcontrols_changes = {};

    			if (!updating_init && dirty[0] & /*controlInit*/ 8192) {
    				updating_init = true;
    				navigationcontrols_changes.init = /*controlInit*/ ctx[13];
    				add_flush_callback(() => updating_init = false);
    			}

    			if (!updating_color && dirty[0] & /*color*/ 1) {
    				updating_color = true;
    				navigationcontrols_changes.color = /*color*/ ctx[0];
    				add_flush_callback(() => updating_color = false);
    			}

    			if (!updating_options && dirty[0] & /*options*/ 2) {
    				updating_options = true;
    				navigationcontrols_changes.options = /*options*/ ctx[1];
    				add_flush_callback(() => updating_options = false);
    			}

    			if (!updating_rangeOptions && dirty[0] & /*ranges*/ 4) {
    				updating_rangeOptions = true;
    				navigationcontrols_changes.rangeOptions = /*ranges*/ ctx[2];
    				add_flush_callback(() => updating_rangeOptions = false);
    			}

    			if (!updating_rangeValues && dirty[0] & /*ranges*/ 4) {
    				updating_rangeValues = true;
    				navigationcontrols_changes.rangeValues = /*ranges*/ ctx[2].values;
    				add_flush_callback(() => updating_rangeValues = false);
    			}

    			if (!updating_viewLocation && dirty[0] & /*location*/ 16384) {
    				updating_viewLocation = true;
    				navigationcontrols_changes.viewLocation = /*location*/ ctx[14];
    				add_flush_callback(() => updating_viewLocation = false);
    			}

    			if (!updating_viewTarget && dirty[0] & /*target*/ 32768) {
    				updating_viewTarget = true;
    				navigationcontrols_changes.viewTarget = /*target*/ ctx[15];
    				add_flush_callback(() => updating_viewTarget = false);
    			}

    			if (!updating_worldPosition && dirty[0] & /*worldPosition*/ 2048) {
    				updating_worldPosition = true;
    				navigationcontrols_changes.worldPosition = /*worldPosition*/ ctx[11];
    				add_flush_callback(() => updating_worldPosition = false);
    			}

    			navigationcontrols.$set(navigationcontrols_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_scene.$$.fragment, local);
    			transition_in(navigationcontrols.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_scene.$$.fragment, local);
    			transition_out(navigationcontrols.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gl_scene, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(navigationcontrols, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const initialTerrainHeight = 0;
    const markerHeight = 0.05;

    function adjustColor$1(clr, height = 1) {
    	const r = parseInt("0x" + clr.substr(1, 2), 16),
    		g = parseInt("0x" + clr.substr(3, 2), 16),
    		b = parseInt("0x" + clr.substr(5, 2), 16);

    	const hr = Math.floor(r * (height / 0.25)), hb = Math.floor(b * (height / 0.25));
    	return Math.abs(((hr < 255 ? hr : r) << 16) + (g << 8) + (hb < 255 ? hb : b));
    }

    function normalizeColor(clr) {
    	const r = parseInt("0x" + clr.substr(1, 2), 16),
    		g = parseInt("0x" + clr.substr(3, 2), 16),
    		b = parseInt("0x" + clr.substr(5, 2), 16);

    	return [r / 255, g / 255, b / 255];
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let { title } = $$props;
    	let { color = "#F7C77B" } = $$props;
    	let eventTotal = 0;
    	const eventQuad = new QuadStore(6, [[-16, -16], [16, 16]]);
    	const eventsLoading = [false];
    	const eventsLoaded = [false];

    	const initQuadWidth = (eventQuad.extent[1][0] - eventQuad.extent[0][0]) / 2,
    		initQuadDepth = (eventQuad.extent[1][1] - eventQuad.extent[0][1]) / 2;

    	const heightmap = [];
    	const gridSizeX = initQuadWidth * 2;
    	const gridSizeZ = initQuadDepth * 2;
    	const timeExtent = [];

    	const cursorDimensions = {
    		x: -4,
    		y: -4,
    		z: initialTerrainHeight,
    		w: 8,
    		h: 8,
    		d: 1
    	};

    	let eventList = [];
    	let eventState = {};
    	let eventTime = 1577810698673;

    	const foundGroups = {
    		"1": null,
    		"2": null,
    		"3": null,
    		"4": null,
    		"5": null,
    		"6": null
    	};

    	let quadList = [];

    	const quadState = {
    		1: {
    			1: {
    				x: -initQuadWidth,
    				y: 0,
    				z: -initQuadDepth,
    				w: initQuadWidth,
    				h: 1,
    				d: initQuadDepth
    			},
    			2: {
    				x: -initQuadWidth,
    				y: 0,
    				z: 0,
    				w: initQuadWidth,
    				h: 1,
    				d: initQuadDepth
    			}
    		},
    		2: {
    			1: {
    				x: 0,
    				y: 0,
    				z: -initQuadDepth,
    				w: initQuadWidth,
    				h: 1,
    				d: initQuadDepth
    			},
    			2: {
    				x: 0,
    				y: 0,
    				z: 0,
    				w: initQuadWidth,
    				h: 1,
    				d: initQuadDepth
    			}
    		}
    	};

    	let showCursor = false;

    	let { options = {
    		"labels": ["Show Terrain Cursor"], //, "Show Quad Extents", "Filter Events By Time", " Play Time Loop" ],
    		"values": [showCursor], //, showQuads, showByTime, playTimeLoop ]

    	} } = $$props;

    	let { ranges = {
    		labels: ["alpha-blocks", "terrain-height", "terrain-rotation", "light-distance"],
    		min: [0, 1, 0, 1],
    		max: [1, 2, 180, 100],
    		step: [0.05, 0.25, 15, 10],
    		values: []
    	} } = $$props;

    	let a = 0;
    	let w = 1;
    	let h = 1;
    	let d = 1;
    	let rot = 90;
    	const light = { color: "#FFFFFF" };
    	const markerImage = new Image();
    	markerImage.crossOrigin = "";
    	let colormap;
    	let normalmap;
    	let use_heightmap = false;
    	const terrainMap = new Image();
    	terrainMap.alt = "Terrain Texture";
    	terrainMap.crossOrigin = "";
    	terrainMap.width = 1024;
    	terrainMap.height = 1024;
    	let quad_textures = [];
    	let terrainTexture = null;
    	let markerTexture = null;
    	let texture = null;
    	let worldPosition = { x: 0, y: 0, z: 0, r: 1 };
    	let webgl;
    	let controlInit;

    	// initial view
    	let location = new Float32Array([0, 5, 10]);

    	let target = new Float32Array([0, 1, 0]);

    	const captureViewDirection = (loc, tgt) => {
    		// console.log("location: ", loc, "\n", "target: ", tgt);
    		return "";
    	};

    	const checkCursorIntersection = (cursorExtent, quadExtent) => {
    		return !(cursorExtent[1][0] < quadExtent[0][0] || cursorExtent[1][1] < quadExtent[0][1] || cursorExtent[0][0] > quadExtent[1][0] || cursorExtent[0][1] > quadExtent[1][1]);
    	};

    	let process_extra_shader_components = (gl, material, model) => {
    		// console.log("Process Extra Shader Components");
    		const program = material.program;

    		if (material.vertName == "texture-vertex-shader" && material.fragName == "texture-fragment-shader" || material.vertName == "normal-selected-txt-vertex-shader" && material.fragName == "normal-selected-txt-fragment-shader") {
    			// console.log(material.vertName, material.fragName);
    			const vertexTextureCoords = gl.getAttribLocation(program, "uv");

    			// gl.disable(gl.CULL_FACE); // for double-sided poly
    			gl.enableVertexAttribArray(vertexTextureCoords);

    			const textureBuffer = gl.createBuffer();

    			const textureCoords = [
    				// front: 0 1 2 3
    				1,
    				1,
    				0,
    				1,
    				1,
    				0,
    				0,
    				0,
    				// left: 1 4 3 6
    				1,
    				1,
    				0,
    				1,
    				1,
    				0,
    				0,
    				0,
    				// back: 4 5 6 7
    				1,
    				1,
    				0,
    				1,
    				1,
    				0,
    				0,
    				0,
    				// right: 5 0 7 2
    				1,
    				1,
    				0,
    				1,
    				1,
    				0,
    				0,
    				0,
    				// top: 4 1 5 0
    				0,
    				1,
    				0,
    				0,
    				1,
    				1,
    				1,
    				0,
    				// bottom: 3 6 2 7
    				0,
    				1,
    				0,
    				0,
    				1,
    				1,
    				1,
    				0
    			];

    			gl.bindBuffer(gl.ARRAY_BUFFER, textureBuffer);
    			gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoords), gl.STATIC_DRAW);
    			gl.vertexAttribPointer(vertexTextureCoords, 2, gl.FLOAT, false, 0, 0);

    			// Un-bind buffers
    			gl.bindBuffer(gl.ARRAY_BUFFER, null);

    			gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);

    			if (material.fragName === "normal-selected-txt-fragment-shader" && material.vertName === "normal-selected-txt-vertex-shader") {
    				for (let t = 0; t < 6; ++t) {
    					if (!!quad_textures[t]) {
    						const fragmentTextureLocation = gl.getUniformLocation(program, "uTexture" + t);

    						switch (t) {
    							case 1:
    								gl.activeTexture(gl.TEXTURE1);
    								break;
    							case 2:
    								gl.activeTexture(gl.TEXTURE2);
    								break;
    							case 3:
    								gl.activeTexture(gl.TEXTURE3);
    								break;
    							case 4:
    								gl.activeTexture(gl.TEXTURE4);
    								break;
    							case 5:
    								gl.activeTexture(gl.TEXTURE5);
    								break;
    							default:
    								gl.activeTexture(gl.TEXTURE0);
    						}

    						gl.bindTexture(gl.TEXTURE_2D, quad_textures[t]);
    						gl.uniform1i(fragmentTextureLocation, t);
    					}
    				}
    			}
    		} else if (material.fragName === "terrain-frag" && material.vertName === "terrain-vert") {
    			// console.log(material.vertName);
    			const heigthAdjMultLocation = gl.getUniformLocation(program, "height_adjustment");

    			gl.uniform1f(heigthAdjMultLocation, use_heightmap ? 0.5 : 0.000125); // if using GL.terrain() (which is flat) use larger adjustment => 0.125

    			// uniform vec3 light_direction; // normalized direction in eye
    			const lightDirectionLocation = gl.getUniformLocation(program, "light_direction");

    			gl.uniform3fv(lightDirectionLocation, new Float32Array([light.x, light.y, light.z]));

    			// uniform vec3 light_ambient_color;
    			const ambientLightLocation = gl.getUniformLocation(program, "light_ambient_color");

    			gl.uniform3fv(ambientLightLocation, new Float32Array([...normalizeColor(light.color)]));

    			// uniform vec3 light_diffuse_color;
    			const diffuseLightLocation = gl.getUniformLocation(program, "light_diffuse_color");

    			gl.uniform3fv(diffuseLightLocation, new Float32Array([...normalizeColor(light.color)]));

    			// uniform vec3 light_specular_color;
    			const specularLightLocation = gl.getUniformLocation(program, "light_specular_color");

    			gl.uniform3fv(specularLightLocation, new Float32Array([...normalizeColor(light.color)]));

    			// uniform float material_specular_exponent;
    			const specularExpLocation = gl.getUniformLocation(program, "material_specular_exponent");

    			gl.uniform1f(specularExpLocation, 0.99);

    			if (!!terrainTexture) {
    				const fragmentTextureLocation = gl.getUniformLocation(program, "colormap");
    				gl.activeTexture(gl.TEXTURE0);
    				gl.bindTexture(gl.TEXTURE_2D, terrainTexture);
    				gl.uniform1i(fragmentTextureLocation, 0);
    			}
    		}
    	};

    	let refreshState = () => {
    		const cursorExtent = [
    			[
    				worldPosition.x + cursorDimensions.x / worldPosition.r,
    				worldPosition.z + cursorDimensions.y / worldPosition.r
    			],
    			[
    				worldPosition.x + (cursorDimensions.x + cursorDimensions.w) / worldPosition.r,
    				worldPosition.z + (cursorDimensions.y + cursorDimensions.h) / worldPosition.r
    			]
    		];

    		if (!!eventsLoaded[0] !== true) return;
    	};

    	let updateWorld = event => {
    		// console.log(event);
    		refreshState();
    	};

    	// Use a Web Worker to load position events...
    	// as if they are coming in from async remote service
    	if (window.Worker) {
    		window.eventQuad = eventQuad; // debug
    		const eventProcessor = new Worker("worker.js");

    		eventProcessor.postMessage({
    			"action": "Load event data",
    			"payload": {
    				"event-source": "post/data/position_events.json",
    				"heightmap-source": "post/data/planar-terrain-heights.json",
    				"planar-extent": eventQuad.extent
    			}
    		});

    		console.log("Quads initialized: ", quadList);
    	}

    	onMount(() => {
    		if (typeof controlInit === "function") {
    			controlInit();
    		}

    		// Get A 2D context for dynamic textures
    		/** @type {Canvas2DRenderingContext} */
    		const ctx = document.createElement("canvas").getContext("2d");

    		ctx.canvas.width = 256;
    		ctx.canvas.height = 256;
    		const data = JSON.parse(document.getElementById("data_in_html").children[0].innerHTML);
    		let frame;

    		for (let z = 0; z < data.length; z++) {
    			const xx = [];

    			for (let x = 0; x < data[z].length; x++) {
    				xx.push(data[z][x]);
    			}

    			$$invalidate(3, heightmap[z] = xx, heightmap);
    		}

    		console.log(heightmap);

    		if (!!markerTexture == false) {
    			// Create a texture and create initial bind
    			markerTexture = webgl.createTexture();

    			webgl.bindTexture(webgl.TEXTURE_2D, markerTexture);
    			webgl.bindTexture(webgl.TEXTURE_2D, null);
    		}

    		for (let t = 0; t < 6; ++t) {
    			if (!!quad_textures[t] == false) {
    				// Create a texture and create initial bind
    				quad_textures[t] = webgl.createTexture();

    				webgl.bindTexture(webgl.TEXTURE_2D, quad_textures[t]);
    				webgl.bindTexture(webgl.TEXTURE_2D, null);
    			}
    		}

    		if (!!terrainTexture == false) {
    			// Create a texture and create initial bind
    			terrainTexture = webgl.createTexture();

    			webgl.bindTexture(webgl.TEXTURE_2D, terrainTexture);
    			webgl.bindTexture(webgl.TEXTURE_2D, null);
    		}

    		// Texture constants
    		const level = 0;

    		const internalFormat = webgl.RGBA;
    		const format = webgl.RGBA;
    		const type = webgl.UNSIGNED_BYTE;
    		const heightmap_src = document.getElementById("heightmap").src;
    		if (heightmap_src.match(/height/) !== null) $$invalidate(10, use_heightmap = true);
    		$$invalidate(9, normalmap = new Texture(document.getElementById("heightmap").src, { width: 512, height: 512 }));

    		terrainMap.addEventListener("load", function () {
    			// Now that the image has loaded make copy it to the texture.
    			console.log("Bind to texture");

    			webgl.bindTexture(webgl.TEXTURE_2D, terrainTexture);
    			webgl.texImage2D(webgl.TEXTURE_2D, level, internalFormat, format, type, terrainMap);
    			webgl.generateMipmap(webgl.TEXTURE_2D);
    			webgl.texParameteri(webgl.TEXTURE_2D, webgl.TEXTURE_MAG_FILTER, webgl.NEAREST_MIPMAP_LINEAR);
    			webgl.texParameteri(webgl.TEXTURE_2D, webgl.TEXTURE_MIN_FILTER, webgl.NEAREST_MIPMAP_LINEAR);

    			// Pass this colormap texture to the terrain object, just
    			// to get @svelte/gl to bind the texture coordinates in the
    			// mesh to the 'uv' uniform in the vertex/fragment shaders.
    			// The actual map (and texture filter) that is applied to
    			// fragColor comes from the terrainMap initialized above
    			$$invalidate(8, colormap = new Texture(terrainMap.src, { width: 512, height: 512 }));
    		});

    		terrainMap.src = document.getElementById("shademap").src; //"images/colormap.jpg";

    		markerImage.addEventListener("load", function () {
    			// Now that the image has loaded make copy it to the texture.
    			console.log("Bind to texture");

    			webgl.bindTexture(webgl.TEXTURE_2D, markerTexture);
    			webgl.pixelStorei(webgl.UNPACK_FLIP_Y_WEBGL, false); // sometimes the marker appears upside down
    			webgl.texImage2D(webgl.TEXTURE_2D, level, internalFormat, format, type, markerImage);
    			webgl.generateMipmap(webgl.TEXTURE_2D);
    			webgl.texParameteri(webgl.TEXTURE_2D, webgl.TEXTURE_MAG_FILTER, webgl.NEAREST_MIPMAP_LINEAR);
    			webgl.texParameteri(webgl.TEXTURE_2D, webgl.TEXTURE_MIN_FILTER, webgl.NEAREST_MIPMAP_LINEAR);
    		}); // webgl.pixelStorei(webgl.UNPACK_FLIP_Y_WEBGL, true);

    		markerImage.src = "images/pin.png";

    		const faceInfos = [
    			// {target: webgl.TEXTURE_CUBE_MAP_POSITIVE_X, faceColor: '#F00', textColor: '#0FF', text: '+X'},
    			// {target: webgl.TEXTURE_CUBE_MAP_NEGATIVE_X, faceColor: '#FF0', textColor: '#00F', text: '-X'},
    			// {target: webgl.TEXTURE_CUBE_MAP_POSITIVE_Y, faceColor: '#0F0', textColor: '#F0F', text: '+Y'},
    			// {target: webgl.TEXTURE_CUBE_MAP_NEGATIVE_Y, faceColor: '#0FF', textColor: '#F00', text: '-Y'},
    			// {target: webgl.TEXTURE_CUBE_MAP_POSITIVE_Z, faceColor: '#00F', textColor: '#FF0', text: '+Z'},
    			// {target: webgl.TEXTURE_CUBE_MAP_NEGATIVE_Z, faceColor: '#F0F', textColor: '#0F0', text: '-Z'}
    			{
    				target: webgl.TEXTURE_2D,
    				faceColor: "#F00",
    				textColor: "#0FF",
    				text: "+X"
    			},
    			{
    				target: webgl.TEXTURE_2D,
    				faceColor: "#FF0",
    				textColor: "#00F",
    				text: "-X"
    			},
    			{
    				target: webgl.TEXTURE_2D,
    				faceColor: "#0F0",
    				textColor: "#F0F",
    				text: "+Y"
    			},
    			{
    				target: webgl.TEXTURE_2D,
    				faceColor: "#0FF",
    				textColor: "#F00",
    				text: "-Y"
    			},
    			{
    				target: webgl.TEXTURE_2D,
    				faceColor: "#00F",
    				textColor: "#FF0",
    				text: "+Z"
    			},
    			{
    				target: webgl.TEXTURE_2D,
    				faceColor: "#F0F",
    				textColor: "#0F0",
    				text: "-Z"
    			}
    		];

    		faceInfos.forEach((faceInfo, i, a) => {
    			const { target, faceColor, textColor, text } = faceInfo;

    			// Asynchronously load an image
    			const img = new Image();

    			img.crossOrigin = "";
    			img.id = "" + (i + 1);

    			// Use 2d face generator to generate 6 images
    			// generateFace(ctx, faceColor, textColor, text);
    			generateFace$1(ctx, faceColor, 16);

    			// Upload the canvas to the cubemap face.
    			const width = ctx.canvas.width;

    			const height = ctx.canvas.height;
    			const previewWidth = ctx.canvas.width / 4;
    			img.style.margin = "auto";
    			img.style.position = "fixed";
    			img.style.top = "0px";
    			img.style.left = i * previewWidth + "px";
    			img.style.width = previewWidth + "px";

    			img.addEventListener("load", function () {
    				// Now that the image has loaded make copy it to the texture.
    				console.log("Bind to texture");

    				webgl.bindTexture(webgl.TEXTURE_2D, quad_textures[i]);

    				// webgl.bindTexture(webgl.TEXTURE_CUBE_MAP, texture);
    				// webgl.pixelStorei(webgl.UNPACK_FLIP_Y_WEBGL, true);
    				webgl.texImage2D(target, level, internalFormat, format, type, img);

    				webgl.generateMipmap(webgl.TEXTURE_2D);

    				// if (i >= 5) webgl.generateMipmap(webgl.TEXTURE_CUBE_MAP);
    				webgl.texParameteri(webgl.TEXTURE_2D, webgl.TEXTURE_MAG_FILTER, webgl.NEAREST_MIPMAP_LINEAR); // webgl.LINEAR_MIPMAP_LINEAR);

    				webgl.texParameteri(webgl.TEXTURE_2D, webgl.TEXTURE_MIN_FILTER, webgl.NEAREST_MIPMAP_LINEAR); // webgl.LINEAR_MIPMAP_LINEAR);
    			}); // webgl.texParameteri(webgl.TEXTURE_CUBE_MAP, webgl.TEXTURE_MIN_FILTER, webgl.NEAREST_MIPMAP_LINEAR); // webgl.LINEAR_MIPMAP_LINEAR);
    			// document.body.appendChild(img);

    			ctx.canvas.toBlob(blob => {
    				img.src = URL.createObjectURL(blob);
    			});

    			// Setup each face so it's immediately renderable
    			if (!!quad_textures[i]) webgl.texImage2D(target, level, internalFormat, width, height, 0, format, type, null);
    		});

    		$$invalidate(7, light.z = 0.1 * Math.cos(Date.now() * 0.0002), light);

    		const loop = () => {
    			frame = requestAnimationFrame(loop);
    			$$invalidate(7, light.x = 1.5 * Math.sin(Date.now() * 0.0001), light);
    			$$invalidate(7, light.y = 25 * h * Math.sin(Math.pow((h - light.x) / 2, 2)), light);

    			if (ranges["values"].length > 0) {
    				$$invalidate(4, a = ranges["values"][0]);
    				$$invalidate(5, h = ranges["values"][1]);
    				$$invalidate(6, rot = ranges["values"][2]);
    				$$invalidate(7, light.y = light.y + ranges["values"][3], light);
    			} else {
    				$$invalidate(2, ranges["values"] = [a, h, rot, 100], ranges);
    			}
    		};

    		loop();
    		return () => cancelAnimationFrame(frame);
    	});

    	const writable_props = ["title", "color", "options", "ranges"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$2.warn(`<SimulationApp> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("SimulationApp", $$slots, []);

    	function gl_scene_gl_binding(value) {
    		webgl = value;
    		$$invalidate(12, webgl);
    	}

    	function navigationcontrols_init_binding(value) {
    		controlInit = value;
    		$$invalidate(13, controlInit);
    	}

    	function navigationcontrols_color_binding(value) {
    		color = value;
    		$$invalidate(0, color);
    	}

    	function navigationcontrols_options_binding(value) {
    		options = value;
    		$$invalidate(1, options);
    	}

    	function navigationcontrols_rangeOptions_binding(value) {
    		ranges = value;
    		$$invalidate(2, ranges);
    	}

    	function navigationcontrols_rangeValues_binding(value) {
    		ranges.values = value;
    		$$invalidate(2, ranges);
    	}

    	function navigationcontrols_viewLocation_binding(value) {
    		location = value;
    		$$invalidate(14, location);
    	}

    	function navigationcontrols_viewTarget_binding(value) {
    		target = value;
    		$$invalidate(15, target);
    	}

    	function navigationcontrols_worldPosition_binding(value) {
    		worldPosition = value;
    		$$invalidate(11, worldPosition);
    	}

    	const move_handler = event => updateWorld(event);

    	$$self.$set = $$props => {
    		if ("title" in $$props) $$invalidate(26, title = $$props.title);
    		if ("color" in $$props) $$invalidate(0, color = $$props.color);
    		if ("options" in $$props) $$invalidate(1, options = $$props.options);
    		if ("ranges" in $$props) $$invalidate(2, ranges = $$props.ranges);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		GL,
    		NavigationControls,
    		generateFace: generateFace$1,
    		QuadStore,
    		terrain: terrain$1,
    		quadFrag,
    		quadVert,
    		terrainFrag,
    		terrainVert,
    		title,
    		color,
    		eventTotal,
    		eventQuad,
    		eventsLoading,
    		eventsLoaded,
    		initQuadWidth,
    		initQuadDepth,
    		heightmap,
    		gridSizeX,
    		gridSizeZ,
    		timeExtent,
    		initialTerrainHeight,
    		cursorDimensions,
    		eventList,
    		eventState,
    		eventTime,
    		foundGroups,
    		quadList,
    		quadState,
    		showCursor,
    		options,
    		ranges,
    		a,
    		w,
    		h,
    		d,
    		rot,
    		light,
    		markerImage,
    		markerHeight,
    		colormap,
    		normalmap,
    		use_heightmap,
    		terrainMap,
    		quad_textures,
    		terrainTexture,
    		markerTexture,
    		texture,
    		worldPosition,
    		webgl,
    		adjustColor: adjustColor$1,
    		normalizeColor,
    		controlInit,
    		location,
    		target,
    		captureViewDirection,
    		checkCursorIntersection,
    		process_extra_shader_components,
    		refreshState,
    		updateWorld
    	});

    	$$self.$inject_state = $$props => {
    		if ("title" in $$props) $$invalidate(26, title = $$props.title);
    		if ("color" in $$props) $$invalidate(0, color = $$props.color);
    		if ("eventTotal" in $$props) eventTotal = $$props.eventTotal;
    		if ("eventList" in $$props) eventList = $$props.eventList;
    		if ("eventState" in $$props) eventState = $$props.eventState;
    		if ("eventTime" in $$props) eventTime = $$props.eventTime;
    		if ("quadList" in $$props) quadList = $$props.quadList;
    		if ("showCursor" in $$props) showCursor = $$props.showCursor;
    		if ("options" in $$props) $$invalidate(1, options = $$props.options);
    		if ("ranges" in $$props) $$invalidate(2, ranges = $$props.ranges);
    		if ("a" in $$props) $$invalidate(4, a = $$props.a);
    		if ("w" in $$props) $$invalidate(21, w = $$props.w);
    		if ("h" in $$props) $$invalidate(5, h = $$props.h);
    		if ("d" in $$props) $$invalidate(22, d = $$props.d);
    		if ("rot" in $$props) $$invalidate(6, rot = $$props.rot);
    		if ("colormap" in $$props) $$invalidate(8, colormap = $$props.colormap);
    		if ("normalmap" in $$props) $$invalidate(9, normalmap = $$props.normalmap);
    		if ("use_heightmap" in $$props) $$invalidate(10, use_heightmap = $$props.use_heightmap);
    		if ("quad_textures" in $$props) quad_textures = $$props.quad_textures;
    		if ("terrainTexture" in $$props) terrainTexture = $$props.terrainTexture;
    		if ("markerTexture" in $$props) markerTexture = $$props.markerTexture;
    		if ("texture" in $$props) texture = $$props.texture;
    		if ("worldPosition" in $$props) $$invalidate(11, worldPosition = $$props.worldPosition);
    		if ("webgl" in $$props) $$invalidate(12, webgl = $$props.webgl);
    		if ("controlInit" in $$props) $$invalidate(13, controlInit = $$props.controlInit);
    		if ("location" in $$props) $$invalidate(14, location = $$props.location);
    		if ("target" in $$props) $$invalidate(15, target = $$props.target);
    		if ("process_extra_shader_components" in $$props) $$invalidate(24, process_extra_shader_components = $$props.process_extra_shader_components);
    		if ("refreshState" in $$props) refreshState = $$props.refreshState;
    		if ("updateWorld" in $$props) $$invalidate(25, updateWorld = $$props.updateWorld);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		color,
    		options,
    		ranges,
    		heightmap,
    		a,
    		h,
    		rot,
    		light,
    		colormap,
    		normalmap,
    		use_heightmap,
    		worldPosition,
    		webgl,
    		controlInit,
    		location,
    		target,
    		eventQuad,
    		initQuadWidth,
    		gridSizeX,
    		gridSizeZ,
    		cursorDimensions,
    		w,
    		d,
    		captureViewDirection,
    		process_extra_shader_components,
    		updateWorld,
    		title,
    		gl_scene_gl_binding,
    		navigationcontrols_init_binding,
    		navigationcontrols_color_binding,
    		navigationcontrols_options_binding,
    		navigationcontrols_rangeOptions_binding,
    		navigationcontrols_rangeValues_binding,
    		navigationcontrols_viewLocation_binding,
    		navigationcontrols_viewTarget_binding,
    		navigationcontrols_worldPosition_binding,
    		move_handler
    	];
    }

    class SimulationApp extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$g,
    			create_fragment$g,
    			safe_not_equal,
    			{
    				title: 26,
    				color: 0,
    				options: 1,
    				ranges: 2
    			},
    			[-1, -1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SimulationApp",
    			options,
    			id: create_fragment$g.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*title*/ ctx[26] === undefined && !("title" in props)) {
    			console_1$2.warn("<SimulationApp> was created without expected prop 'title'");
    		}
    	}

    	get title() {
    		throw new Error("<SimulationApp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<SimulationApp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<SimulationApp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<SimulationApp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get options() {
    		throw new Error("<SimulationApp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set options(value) {
    		throw new Error("<SimulationApp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ranges() {
    		throw new Error("<SimulationApp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ranges(value) {
    		throw new Error("<SimulationApp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var markerFrag = "\n#define NAME sprite-fragment-shader\nuniform vec3 color;\n#ifdef has_alpha\nuniform float alpha;\n#endif\nuniform sampler2D uTexture;\nout mediump vec4 fragColor;\nvoid main () {\n\tvec3 N;\n\tN.xy = gl_PointCoord * 2.0 - vec2(1.0);\n\tfloat mag = dot(N.xy, N.xy);\n\tif(mag > 1.0) discard;\n\tfragColor = texture(uTexture, gl_PointCoord);\n\tfragColor.rgb = fragColor.rgb * color;\n\t#ifdef has_alpha\n\tfragColor.a *= alpha;\n\t#endif\n}\n";

    var markerVert = "\n#define NAME sprite-vertex-shader\nin vec3 position;\nin vec3 normal;\nvoid main() {\n\tvec4 pos = vec4(position, 1.0);\n\tvec4 model_view_pos = VIEW * MODEL * pos;\n\tgl_Position = PROJECTION * model_view_pos;\n\tgl_PointSize = 32.0;\n}\n";

    /* src/apps/SimulationApp2.svelte generated by Svelte v3.24.0 */

    const { Object: Object_1$1, console: console_1$3 } = globals;

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[64] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[67] = list[i];
    	return child_ctx;
    }

    function get_each_context_3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[70] = list[i];
    	child_ctx[74] = i;
    	return child_ctx;
    }

    function get_each_context_2$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[70] = list[i];
    	child_ctx[72] = i;
    	return child_ctx;
    }

    // (900:4) <GL.OrbitControls maxPolarAngle={Math.PI / 2} {location} {target}>
    function create_default_slot_2$2(ctx) {
    	let t0_value = /*captureViewDirection*/ ctx[27](/*location*/ ctx[15], /*target*/ ctx[16]) + "";
    	let t0;
    	let t1;
    	let gl_perspectivecamera;
    	let current;

    	gl_perspectivecamera = new PerspectiveCamera({
    			props: {
    				location: /*location*/ ctx[15],
    				lookAt: "center",
    				near: 0.01,
    				far: 1000
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			t0 = text(t0_value);
    			t1 = space();
    			create_component(gl_perspectivecamera.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(gl_perspectivecamera, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty[0] & /*location, target*/ 98304) && t0_value !== (t0_value = /*captureViewDirection*/ ctx[27](/*location*/ ctx[15], /*target*/ ctx[16]) + "")) set_data_dev(t0, t0_value);
    			const gl_perspectivecamera_changes = {};
    			if (dirty[0] & /*location*/ 32768) gl_perspectivecamera_changes.location = /*location*/ ctx[15];
    			gl_perspectivecamera.$set(gl_perspectivecamera_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_perspectivecamera.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_perspectivecamera.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			destroy_component(gl_perspectivecamera, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$2.name,
    		type: "slot",
    		source: "(900:4) <GL.OrbitControls maxPolarAngle={Math.PI / 2} {location} {target}>",
    		ctx
    	});

    	return block;
    }

    // (908:4) {#if options['values'][0]}
    function create_if_block_3(ctx) {
    	let gl_mesh;
    	let current;

    	gl_mesh = new Mesh({
    			props: {
    				geometry: box(/*cursorDimensions*/ ctx[19]),
    				location: [0, -/*worldPosition*/ ctx[12].y + markerHeight$1, 0],
    				rotation: [-90, 0, 0],
    				scale: [
    					0.99 / /*worldPosition*/ ctx[12].r,
    					0.99 / /*worldPosition*/ ctx[12].r,
    					0.05
    				],
    				vert: quadVert,
    				frag: quadFrag,
    				uniforms: {
    					color: adjustColor$2(/*color*/ ctx[0]),
    					alpha: 1
    				},
    				transparent: true
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(gl_mesh.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(gl_mesh, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const gl_mesh_changes = {};
    			if (dirty[0] & /*worldPosition*/ 4096) gl_mesh_changes.location = [0, -/*worldPosition*/ ctx[12].y + markerHeight$1, 0];

    			if (dirty[0] & /*worldPosition*/ 4096) gl_mesh_changes.scale = [
    				0.99 / /*worldPosition*/ ctx[12].r,
    				0.99 / /*worldPosition*/ ctx[12].r,
    				0.05
    			];

    			if (dirty[0] & /*color*/ 1) gl_mesh_changes.uniforms = {
    				color: adjustColor$2(/*color*/ ctx[0]),
    				alpha: 1
    			};

    			gl_mesh.$set(gl_mesh_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_mesh.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_mesh.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gl_mesh, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(908:4) {#if options['values'][0]}",
    		ctx
    	});

    	return block;
    }

    // (947:8) {#if (a > 0.01)}
    function create_if_block_2$1(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value_2 = Array(/*heightmap*/ ctx[1].length);
    	validate_each_argument(each_value_2);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2$1(get_each_context_2$1(ctx, each_value_2, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*heightmap, gridSizeX, gridSizeZ, w, h, d, color, a*/ 66060291) {
    				each_value_2 = Array(/*heightmap*/ ctx[1].length);
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$1(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_2$1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value_2.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_2.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(947:8) {#if (a > 0.01)}",
    		ctx
    	});

    	return block;
    }

    // (949:16) {#each Array(heightmap[k].length) as _, i}
    function create_each_block_3(ctx) {
    	let gl_mesh;
    	let current;

    	gl_mesh = new Mesh({
    			props: {
    				geometry: box({
    					x: 0,
    					y: 0,
    					z: 0,
    					w: /*gridSizeX*/ ctx[20] / /*heightmap*/ ctx[1][/*i*/ ctx[74]].length,
    					h: 1 * /*heightmap*/ ctx[1][/*k*/ ctx[72]][/*i*/ ctx[74]],
    					d: /*gridSizeZ*/ ctx[21] / /*heightmap*/ ctx[1].length
    				}),
    				location: [
    					-(/*gridSizeX*/ ctx[20] / 2) + /*i*/ ctx[74] * (/*gridSizeX*/ ctx[20] / /*heightmap*/ ctx[1][0].length),
    					0,
    					-(/*gridSizeZ*/ ctx[21] / 2) + /*k*/ ctx[72] * (/*gridSizeZ*/ ctx[21] / /*heightmap*/ ctx[1].length)
    				],
    				rotation: [0, 0, 0],
    				scale: [/*w*/ ctx[23], 3 * /*h*/ ctx[24] / 8, /*d*/ ctx[25]],
    				uniforms: {
    					color: adjustColor$2(/*color*/ ctx[0], /*heightmap*/ ctx[1][/*k*/ ctx[72]][/*i*/ ctx[74]]),
    					alpha: /*a*/ ctx[22]
    				}
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(gl_mesh.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(gl_mesh, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const gl_mesh_changes = {};

    			if (dirty[0] & /*heightmap*/ 2) gl_mesh_changes.geometry = box({
    				x: 0,
    				y: 0,
    				z: 0,
    				w: /*gridSizeX*/ ctx[20] / /*heightmap*/ ctx[1][/*i*/ ctx[74]].length,
    				h: 1 * /*heightmap*/ ctx[1][/*k*/ ctx[72]][/*i*/ ctx[74]],
    				d: /*gridSizeZ*/ ctx[21] / /*heightmap*/ ctx[1].length
    			});

    			if (dirty[0] & /*heightmap*/ 2) gl_mesh_changes.location = [
    				-(/*gridSizeX*/ ctx[20] / 2) + /*i*/ ctx[74] * (/*gridSizeX*/ ctx[20] / /*heightmap*/ ctx[1][0].length),
    				0,
    				-(/*gridSizeZ*/ ctx[21] / 2) + /*k*/ ctx[72] * (/*gridSizeZ*/ ctx[21] / /*heightmap*/ ctx[1].length)
    			];

    			if (dirty[0] & /*color, heightmap*/ 3) gl_mesh_changes.uniforms = {
    				color: adjustColor$2(/*color*/ ctx[0], /*heightmap*/ ctx[1][/*k*/ ctx[72]][/*i*/ ctx[74]]),
    				alpha: /*a*/ ctx[22]
    			};

    			gl_mesh.$set(gl_mesh_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_mesh.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_mesh.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gl_mesh, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3.name,
    		type: "each",
    		source: "(949:16) {#each Array(heightmap[k].length) as _, i}",
    		ctx
    	});

    	return block;
    }

    // (948:12) {#each Array(heightmap.length) as _, k}
    function create_each_block_2$1(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value_3 = Array(/*heightmap*/ ctx[1][/*k*/ ctx[72]].length);
    	validate_each_argument(each_value_3);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*gridSizeX, heightmap, gridSizeZ, w, h, d, color, a*/ 66060291) {
    				each_value_3 = Array(/*heightmap*/ ctx[1][/*k*/ ctx[72]].length);
    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3(ctx, each_value_3, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_3(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value_3.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_3.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$1.name,
    		type: "each",
    		source: "(948:12) {#each Array(heightmap.length) as _, k}",
    		ctx
    	});

    	return block;
    }

    // (961:8) {#if options['values'][1]}
    function create_if_block_1$2(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value_1 = /*quadList*/ ctx[4];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*quadList, color*/ 17) {
    				each_value_1 = /*quadList*/ ctx[4];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$2(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_1$2(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(961:8) {#if options['values'][1]}",
    		ctx
    	});

    	return block;
    }

    // (962:12) {#each quadList as quad}
    function create_each_block_1$2(ctx) {
    	let gl_mesh;
    	let current;

    	gl_mesh = new Mesh({
    			props: {
    				geometry: box(/*quad*/ ctx[67]),
    				location: [0, 0, 0],
    				rotation: [0, 0, 0],
    				vert: quadVert,
    				frag: quadFrag,
    				uniforms: {
    					color: adjustColor$2(/*color*/ ctx[0]),
    					alpha: 1
    				},
    				transparent: true
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(gl_mesh.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(gl_mesh, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const gl_mesh_changes = {};
    			if (dirty[0] & /*quadList*/ 16) gl_mesh_changes.geometry = box(/*quad*/ ctx[67]);

    			if (dirty[0] & /*color*/ 1) gl_mesh_changes.uniforms = {
    				color: adjustColor$2(/*color*/ ctx[0]),
    				alpha: 1
    			};

    			gl_mesh.$set(gl_mesh_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_mesh.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_mesh.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gl_mesh, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$2.name,
    		type: "each",
    		source: "(962:12) {#each quadList as quad}",
    		ctx
    	});

    	return block;
    }

    // (977:12) {#if event['group'] === 0 || (                 (showGroups[0] === true && 1 === Math.abs(event['group'])) ||                 (showGroups[1] === true && 2 === Math.abs(event['group'])) ||                 (showGroups[2] === true && 3 === Math.abs(event['group'])) ||                 (showGroups[3] === true && 4 === Math.abs(event['group'])) ||                 (showGroups[4] === true && 5 === Math.abs(event['group'])) ||                 (showGroups[5] === true && 6 === Math.abs(event['group']))             ) && (                     (!options['values'][2]) ||                     (!!options['values'][2] && (event['t'] - 333 < eventTime && eventTime < event['t'] + 333))             )}
    function create_if_block$3(ctx) {
    	let gl_mesh;
    	let current;

    	gl_mesh = new Mesh({
    			props: {
    				geometry: sprite(),
    				location: [
    					/*event*/ ctx[64]["x"],
    					/*h*/ ctx[24] * markerHeight$1,
    					/*event*/ ctx[64]["y"]
    				],
    				vert: markerVert,
    				frag: markerFrag,
    				uniforms: {
    					color: markerColor(/*color*/ ctx[0], /*event*/ ctx[64]["group"]),
    					alpha: /*event*/ ctx[64]["group"] > 0 && (!/*options*/ ctx[6]["values"][2] || !!/*options*/ ctx[6]["values"][2] && (/*event*/ ctx[64]["t"] - 33 < /*eventTime*/ ctx[3] && /*eventTime*/ ctx[3] < /*event*/ ctx[64]["t"] + 33))
    					? 1
    					: 0.5
    				},
    				transparent: true
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(gl_mesh.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(gl_mesh, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const gl_mesh_changes = {};

    			if (dirty[0] & /*eventList*/ 4) gl_mesh_changes.location = [
    				/*event*/ ctx[64]["x"],
    				/*h*/ ctx[24] * markerHeight$1,
    				/*event*/ ctx[64]["y"]
    			];

    			if (dirty[0] & /*color, eventList, options, eventTime*/ 77) gl_mesh_changes.uniforms = {
    				color: markerColor(/*color*/ ctx[0], /*event*/ ctx[64]["group"]),
    				alpha: /*event*/ ctx[64]["group"] > 0 && (!/*options*/ ctx[6]["values"][2] || !!/*options*/ ctx[6]["values"][2] && (/*event*/ ctx[64]["t"] - 33 < /*eventTime*/ ctx[3] && /*eventTime*/ ctx[3] < /*event*/ ctx[64]["t"] + 33))
    				? 1
    				: 0.5
    			};

    			gl_mesh.$set(gl_mesh_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_mesh.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_mesh.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gl_mesh, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(977:12) {#if event['group'] === 0 || (                 (showGroups[0] === true && 1 === Math.abs(event['group'])) ||                 (showGroups[1] === true && 2 === Math.abs(event['group'])) ||                 (showGroups[2] === true && 3 === Math.abs(event['group'])) ||                 (showGroups[3] === true && 4 === Math.abs(event['group'])) ||                 (showGroups[4] === true && 5 === Math.abs(event['group'])) ||                 (showGroups[5] === true && 6 === Math.abs(event['group']))             ) && (                     (!options['values'][2]) ||                     (!!options['values'][2] && (event['t'] - 333 < eventTime && eventTime < event['t'] + 333))             )}",
    		ctx
    	});

    	return block;
    }

    // (976:8) {#each eventList as event}
    function create_each_block$2(ctx) {
    	let show_if = /*event*/ ctx[64]["group"] === 0 || (/*showGroups*/ ctx[5][0] === true && 1 === Math.abs(/*event*/ ctx[64]["group"]) || /*showGroups*/ ctx[5][1] === true && 2 === Math.abs(/*event*/ ctx[64]["group"]) || /*showGroups*/ ctx[5][2] === true && 3 === Math.abs(/*event*/ ctx[64]["group"]) || /*showGroups*/ ctx[5][3] === true && 4 === Math.abs(/*event*/ ctx[64]["group"]) || /*showGroups*/ ctx[5][4] === true && 5 === Math.abs(/*event*/ ctx[64]["group"]) || /*showGroups*/ ctx[5][5] === true && 6 === Math.abs(/*event*/ ctx[64]["group"])) && (!/*options*/ ctx[6]["values"][2] || !!/*options*/ ctx[6]["values"][2] && (/*event*/ ctx[64]["t"] - 333 < /*eventTime*/ ctx[3] && /*eventTime*/ ctx[3] < /*event*/ ctx[64]["t"] + 333));
    	let if_block_anchor;
    	let current;
    	let if_block = show_if && create_if_block$3(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*eventList, showGroups, options, eventTime*/ 108) show_if = /*event*/ ctx[64]["group"] === 0 || (/*showGroups*/ ctx[5][0] === true && 1 === Math.abs(/*event*/ ctx[64]["group"]) || /*showGroups*/ ctx[5][1] === true && 2 === Math.abs(/*event*/ ctx[64]["group"]) || /*showGroups*/ ctx[5][2] === true && 3 === Math.abs(/*event*/ ctx[64]["group"]) || /*showGroups*/ ctx[5][3] === true && 4 === Math.abs(/*event*/ ctx[64]["group"]) || /*showGroups*/ ctx[5][4] === true && 5 === Math.abs(/*event*/ ctx[64]["group"]) || /*showGroups*/ ctx[5][5] === true && 6 === Math.abs(/*event*/ ctx[64]["group"])) && (!/*options*/ ctx[6]["values"][2] || !!/*options*/ ctx[6]["values"][2] && (/*event*/ ctx[64]["t"] - 333 < /*eventTime*/ ctx[3] && /*eventTime*/ ctx[3] < /*event*/ ctx[64]["t"] + 333));

    			if (show_if) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*eventList, showGroups, options, eventTime*/ 108) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$3(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(976:8) {#each eventList as event}",
    		ctx
    	});

    	return block;
    }

    // (923:4) <GL.Group location={[-worldPosition.x, -worldPosition.y, -worldPosition.z]}>
    function create_default_slot_1$2(ctx) {
    	let gl_mesh0;
    	let t0;
    	let gl_mesh1;
    	let t1;
    	let t2;
    	let t3;
    	let each_1_anchor;
    	let current;

    	gl_mesh0 = new Mesh({
    			props: {
    				geometry: /*use_heightmap*/ ctx[11] ? terrain() : terrain$1(),
    				location: [0, -/*h*/ ctx[24] / 8, 0],
    				rotation: [-/*rot*/ ctx[26], 0, 0],
    				scale: [
    					/*initQuadWidth*/ ctx[18],
    					/*initQuadWidth*/ ctx[18],
    					31 * /*h*/ ctx[24] / 8
    				],
    				frag: terrainFrag,
    				vert: terrainVert,
    				uniforms: {
    					alpha: 1,
    					color: adjustColor$2(/*color*/ ctx[0], /*h*/ ctx[24]),
    					colormap: /*colormap*/ ctx[9],
    					normalmap: /*normalmap*/ ctx[10]
    				}
    			},
    			$$inline: true
    		});

    	gl_mesh1 = new Mesh({
    			props: {
    				geometry: plane(),
    				location: [0, -/*h*/ ctx[24] * 96 / 1024, 0],
    				rotation: [-90, 0, 0],
    				scale: /*initQuadWidth*/ ctx[18],
    				uniforms: { color: 26367, alpha: 0.45 },
    				transparent: true
    			},
    			$$inline: true
    		});

    	let if_block0 = /*a*/ ctx[22] > 0.01 && create_if_block_2$1(ctx);
    	let if_block1 = /*options*/ ctx[6]["values"][1] && create_if_block_1$2(ctx);
    	let each_value = /*eventList*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			create_component(gl_mesh0.$$.fragment);
    			t0 = space();
    			create_component(gl_mesh1.$$.fragment);
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			mount_component(gl_mesh0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(gl_mesh1, target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t3, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const gl_mesh0_changes = {};
    			if (dirty[0] & /*use_heightmap*/ 2048) gl_mesh0_changes.geometry = /*use_heightmap*/ ctx[11] ? terrain() : terrain$1();

    			if (dirty[0] & /*color, colormap, normalmap*/ 1537) gl_mesh0_changes.uniforms = {
    				alpha: 1,
    				color: adjustColor$2(/*color*/ ctx[0], /*h*/ ctx[24]),
    				colormap: /*colormap*/ ctx[9],
    				normalmap: /*normalmap*/ ctx[10]
    			};

    			gl_mesh0.$set(gl_mesh0_changes);
    			if (/*a*/ ctx[22] > 0.01) if_block0.p(ctx, dirty);

    			if (/*options*/ ctx[6]["values"][1]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*options*/ 64) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_1$2(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(t3.parentNode, t3);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (dirty[0] & /*eventList, h, color, options, eventTime, showGroups*/ 16777325) {
    				each_value = /*eventList*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_mesh0.$$.fragment, local);
    			transition_in(gl_mesh1.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(if_block1);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_mesh0.$$.fragment, local);
    			transition_out(gl_mesh1.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(if_block1);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gl_mesh0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(gl_mesh1, detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t3);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$2.name,
    		type: "slot",
    		source: "(923:4) <GL.Group location={[-worldPosition.x, -worldPosition.y, -worldPosition.z]}>",
    		ctx
    	});

    	return block;
    }

    // (897:0) <GL.Scene bind:gl={webgl} backgroundOpacity=1.0 process_extra_shader_components={process_extra_shader_components}>
    function create_default_slot$3(ctx) {
    	let gl_target;
    	let t0;
    	let gl_orbitcontrols;
    	let t1;
    	let gl_ambientlight;
    	let t2;
    	let gl_directionallight;
    	let t3;
    	let t4;
    	let gl_group;
    	let current;

    	gl_target = new Target({
    			props: { id: "center", location: [0, 0.5, 0] },
    			$$inline: true
    		});

    	gl_orbitcontrols = new OrbitControls({
    			props: {
    				maxPolarAngle: Math.PI / 2,
    				location: /*location*/ ctx[15],
    				target: /*target*/ ctx[16],
    				$$slots: { default: [create_default_slot_2$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	gl_ambientlight = new AmbientLight({
    			props: { intensity: 0.5 },
    			$$inline: true
    		});

    	gl_directionallight = new DirectionalLight({
    			props: { direction: [-1, -1, -1], intensity: 0.5 },
    			$$inline: true
    		});

    	let if_block = /*options*/ ctx[6]["values"][0] && create_if_block_3(ctx);

    	gl_group = new Group({
    			props: {
    				location: [
    					-/*worldPosition*/ ctx[12].x,
    					-/*worldPosition*/ ctx[12].y,
    					-/*worldPosition*/ ctx[12].z
    				],
    				$$slots: { default: [create_default_slot_1$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(gl_target.$$.fragment);
    			t0 = space();
    			create_component(gl_orbitcontrols.$$.fragment);
    			t1 = space();
    			create_component(gl_ambientlight.$$.fragment);
    			t2 = space();
    			create_component(gl_directionallight.$$.fragment);
    			t3 = space();
    			if (if_block) if_block.c();
    			t4 = space();
    			create_component(gl_group.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(gl_target, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(gl_orbitcontrols, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(gl_ambientlight, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(gl_directionallight, target, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(gl_group, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const gl_orbitcontrols_changes = {};
    			if (dirty[0] & /*location*/ 32768) gl_orbitcontrols_changes.location = /*location*/ ctx[15];
    			if (dirty[0] & /*target*/ 65536) gl_orbitcontrols_changes.target = /*target*/ ctx[16];

    			if (dirty[0] & /*location, target*/ 98304 | dirty[2] & /*$$scope*/ 8192) {
    				gl_orbitcontrols_changes.$$scope = { dirty, ctx };
    			}

    			gl_orbitcontrols.$set(gl_orbitcontrols_changes);

    			if (/*options*/ ctx[6]["values"][0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*options*/ 64) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_3(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(t4.parentNode, t4);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			const gl_group_changes = {};

    			if (dirty[0] & /*worldPosition*/ 4096) gl_group_changes.location = [
    				-/*worldPosition*/ ctx[12].x,
    				-/*worldPosition*/ ctx[12].y,
    				-/*worldPosition*/ ctx[12].z
    			];

    			if (dirty[0] & /*eventList, color, options, eventTime, showGroups, quadList, heightmap, use_heightmap, colormap, normalmap*/ 3711 | dirty[2] & /*$$scope*/ 8192) {
    				gl_group_changes.$$scope = { dirty, ctx };
    			}

    			gl_group.$set(gl_group_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_target.$$.fragment, local);
    			transition_in(gl_orbitcontrols.$$.fragment, local);
    			transition_in(gl_ambientlight.$$.fragment, local);
    			transition_in(gl_directionallight.$$.fragment, local);
    			transition_in(if_block);
    			transition_in(gl_group.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_target.$$.fragment, local);
    			transition_out(gl_orbitcontrols.$$.fragment, local);
    			transition_out(gl_ambientlight.$$.fragment, local);
    			transition_out(gl_directionallight.$$.fragment, local);
    			transition_out(if_block);
    			transition_out(gl_group.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gl_target, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(gl_orbitcontrols, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(gl_ambientlight, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(gl_directionallight, detaching);
    			if (detaching) detach_dev(t3);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t4);
    			destroy_component(gl_group, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$3.name,
    		type: "slot",
    		source: "(897:0) <GL.Scene bind:gl={webgl} backgroundOpacity=1.0 process_extra_shader_components={process_extra_shader_components}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$h(ctx) {
    	let gl_scene;
    	let updating_gl;
    	let t;
    	let navigationcontrols;
    	let updating_init;
    	let updating_options;
    	let updating_rangeOptions;
    	let updating_rangeValues;
    	let updating_groups;
    	let updating_timeExtent;
    	let updating_viewLocation;
    	let updating_viewTarget;
    	let updating_worldPosition;
    	let current;

    	function gl_scene_gl_binding(value) {
    		/*gl_scene_gl_binding*/ ctx[32].call(null, value);
    	}

    	let gl_scene_props = {
    		backgroundOpacity: "1.0",
    		process_extra_shader_components: /*process_extra_shader_components*/ ctx[28],
    		$$slots: { default: [create_default_slot$3] },
    		$$scope: { ctx }
    	};

    	if (/*webgl*/ ctx[13] !== void 0) {
    		gl_scene_props.gl = /*webgl*/ ctx[13];
    	}

    	gl_scene = new Scene({ props: gl_scene_props, $$inline: true });
    	binding_callbacks.push(() => bind(gl_scene, "gl", gl_scene_gl_binding));

    	function navigationcontrols_init_binding(value) {
    		/*navigationcontrols_init_binding*/ ctx[33].call(null, value);
    	}

    	function navigationcontrols_options_binding(value) {
    		/*navigationcontrols_options_binding*/ ctx[34].call(null, value);
    	}

    	function navigationcontrols_rangeOptions_binding(value) {
    		/*navigationcontrols_rangeOptions_binding*/ ctx[35].call(null, value);
    	}

    	function navigationcontrols_rangeValues_binding(value) {
    		/*navigationcontrols_rangeValues_binding*/ ctx[36].call(null, value);
    	}

    	function navigationcontrols_groups_binding(value) {
    		/*navigationcontrols_groups_binding*/ ctx[37].call(null, value);
    	}

    	function navigationcontrols_timeExtent_binding(value) {
    		/*navigationcontrols_timeExtent_binding*/ ctx[38].call(null, value);
    	}

    	function navigationcontrols_viewLocation_binding(value) {
    		/*navigationcontrols_viewLocation_binding*/ ctx[39].call(null, value);
    	}

    	function navigationcontrols_viewTarget_binding(value) {
    		/*navigationcontrols_viewTarget_binding*/ ctx[40].call(null, value);
    	}

    	function navigationcontrols_worldPosition_binding(value) {
    		/*navigationcontrols_worldPosition_binding*/ ctx[41].call(null, value);
    	}

    	let navigationcontrols_props = { extent: /*eventQuad*/ ctx[17].extent };

    	if (/*controlInit*/ ctx[14] !== void 0) {
    		navigationcontrols_props.init = /*controlInit*/ ctx[14];
    	}

    	if (/*options*/ ctx[6] !== void 0) {
    		navigationcontrols_props.options = /*options*/ ctx[6];
    	}

    	if (/*ranges*/ ctx[7] !== void 0) {
    		navigationcontrols_props.rangeOptions = /*ranges*/ ctx[7];
    	}

    	if (/*ranges*/ ctx[7].values !== void 0) {
    		navigationcontrols_props.rangeValues = /*ranges*/ ctx[7].values;
    	}

    	if (/*showGroups*/ ctx[5] !== void 0) {
    		navigationcontrols_props.groups = /*showGroups*/ ctx[5];
    	}

    	if (/*timeExtent*/ ctx[8] !== void 0) {
    		navigationcontrols_props.timeExtent = /*timeExtent*/ ctx[8];
    	}

    	if (/*location*/ ctx[15] !== void 0) {
    		navigationcontrols_props.viewLocation = /*location*/ ctx[15];
    	}

    	if (/*target*/ ctx[16] !== void 0) {
    		navigationcontrols_props.viewTarget = /*target*/ ctx[16];
    	}

    	if (/*worldPosition*/ ctx[12] !== void 0) {
    		navigationcontrols_props.worldPosition = /*worldPosition*/ ctx[12];
    	}

    	navigationcontrols = new NavigationControls({
    			props: navigationcontrols_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(navigationcontrols, "init", navigationcontrols_init_binding));
    	binding_callbacks.push(() => bind(navigationcontrols, "options", navigationcontrols_options_binding));
    	binding_callbacks.push(() => bind(navigationcontrols, "rangeOptions", navigationcontrols_rangeOptions_binding));
    	binding_callbacks.push(() => bind(navigationcontrols, "rangeValues", navigationcontrols_rangeValues_binding));
    	binding_callbacks.push(() => bind(navigationcontrols, "groups", navigationcontrols_groups_binding));
    	binding_callbacks.push(() => bind(navigationcontrols, "timeExtent", navigationcontrols_timeExtent_binding));
    	binding_callbacks.push(() => bind(navigationcontrols, "viewLocation", navigationcontrols_viewLocation_binding));
    	binding_callbacks.push(() => bind(navigationcontrols, "viewTarget", navigationcontrols_viewTarget_binding));
    	binding_callbacks.push(() => bind(navigationcontrols, "worldPosition", navigationcontrols_worldPosition_binding));
    	navigationcontrols.$on("clickCheckbox", /*clickCheckbox*/ ctx[30]);
    	navigationcontrols.$on("move", /*updateWorld*/ ctx[29]);

    	const block = {
    		c: function create() {
    			create_component(gl_scene.$$.fragment);
    			t = space();
    			create_component(navigationcontrols.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(gl_scene, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(navigationcontrols, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const gl_scene_changes = {};

    			if (dirty[0] & /*worldPosition, eventList, color, options, eventTime, showGroups, quadList, heightmap, use_heightmap, colormap, normalmap, location, target*/ 106111 | dirty[2] & /*$$scope*/ 8192) {
    				gl_scene_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_gl && dirty[0] & /*webgl*/ 8192) {
    				updating_gl = true;
    				gl_scene_changes.gl = /*webgl*/ ctx[13];
    				add_flush_callback(() => updating_gl = false);
    			}

    			gl_scene.$set(gl_scene_changes);
    			const navigationcontrols_changes = {};

    			if (!updating_init && dirty[0] & /*controlInit*/ 16384) {
    				updating_init = true;
    				navigationcontrols_changes.init = /*controlInit*/ ctx[14];
    				add_flush_callback(() => updating_init = false);
    			}

    			if (!updating_options && dirty[0] & /*options*/ 64) {
    				updating_options = true;
    				navigationcontrols_changes.options = /*options*/ ctx[6];
    				add_flush_callback(() => updating_options = false);
    			}

    			if (!updating_rangeOptions && dirty[0] & /*ranges*/ 128) {
    				updating_rangeOptions = true;
    				navigationcontrols_changes.rangeOptions = /*ranges*/ ctx[7];
    				add_flush_callback(() => updating_rangeOptions = false);
    			}

    			if (!updating_rangeValues && dirty[0] & /*ranges*/ 128) {
    				updating_rangeValues = true;
    				navigationcontrols_changes.rangeValues = /*ranges*/ ctx[7].values;
    				add_flush_callback(() => updating_rangeValues = false);
    			}

    			if (!updating_groups && dirty[0] & /*showGroups*/ 32) {
    				updating_groups = true;
    				navigationcontrols_changes.groups = /*showGroups*/ ctx[5];
    				add_flush_callback(() => updating_groups = false);
    			}

    			if (!updating_timeExtent && dirty[0] & /*timeExtent*/ 256) {
    				updating_timeExtent = true;
    				navigationcontrols_changes.timeExtent = /*timeExtent*/ ctx[8];
    				add_flush_callback(() => updating_timeExtent = false);
    			}

    			if (!updating_viewLocation && dirty[0] & /*location*/ 32768) {
    				updating_viewLocation = true;
    				navigationcontrols_changes.viewLocation = /*location*/ ctx[15];
    				add_flush_callback(() => updating_viewLocation = false);
    			}

    			if (!updating_viewTarget && dirty[0] & /*target*/ 65536) {
    				updating_viewTarget = true;
    				navigationcontrols_changes.viewTarget = /*target*/ ctx[16];
    				add_flush_callback(() => updating_viewTarget = false);
    			}

    			if (!updating_worldPosition && dirty[0] & /*worldPosition*/ 4096) {
    				updating_worldPosition = true;
    				navigationcontrols_changes.worldPosition = /*worldPosition*/ ctx[12];
    				add_flush_callback(() => updating_worldPosition = false);
    			}

    			navigationcontrols.$set(navigationcontrols_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_scene.$$.fragment, local);
    			transition_in(navigationcontrols.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_scene.$$.fragment, local);
    			transition_out(navigationcontrols.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gl_scene, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(navigationcontrols, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const markerHeight$1 = 0.05;

    function adjustColor$2(clr, height = 1) {
    	const r = parseInt("0x" + clr.substr(1, 2), 16),
    		g = parseInt("0x" + clr.substr(3, 2), 16),
    		b = parseInt("0x" + clr.substr(5, 2), 16);

    	const hr = Math.floor(r * (height / 0.25)), hb = Math.floor(b * (height / 0.25));
    	return Math.abs(((hr < 255 ? hr : r) << 16) + (g << 8) + (hb < 255 ? hb : b));
    }

    function normalizeColor$1(clr) {
    	const r = parseInt("0x" + clr.substr(1, 2), 16),
    		g = parseInt("0x" + clr.substr(3, 2), 16),
    		b = parseInt("0x" + clr.substr(5, 2), 16);

    	return [r / 255, g / 255, b / 255];
    }

    function markerColor(clr, selector) {
    	const r = selector !== selector
    		? parseInt("0x" + clr.substr(1, 2), 16)
    		: // default to clr
    			selector < 1
    			? 127
    			: selector % 5 < 1 ? 64 : selector === 4 ? 127 : 255,
    		g = selector !== selector
    		? parseInt("0x" + clr.substr(3, 2), 16)
    		: // default to clr
    			selector < 1
    			? 127
    			: selector % 3 < 1 ? 64 : selector === 1 ? 127 : 255,
    		b = selector !== selector
    		? parseInt("0x" + clr.substr(5, 2), 16)
    		: // default to clr
    			selector < 1 ? 127 : selector % 2 < 1 ? 64 : 255;

    	// return Math.abs((((hr < 255) ? hr : r) << 16) + (g << 8) + ((hb < 255) ? hb : b));
    	return Math.abs((r << 16) + (g << 8) + b);
    }

    function mapQuadState(qs, quads, level, depth, x = 1, y = 1) {
    	--depth;
    	const firstLevelReset = { 1: false, 2: false };

    	if (!Array.isArray(quads)) {
    		// the store is a QuadStore, not an Array
    		// so map the store to qs
    		++level;

    		for (let s = 1; s <= 2; ++s) {
    			if (typeof qs[s] !== "object") qs[s] = {};

    			for (let t = 1; t <= 2; ++t) {
    				if (Array.isArray(quads[s][t].store) || depth === 1) {
    					// Map this quad directly to qs
    					const quadWidth = quads[s][t].extent[1][0] - quads[s][t].extent[0][0];

    					const quadDepth = quads[s][t].extent[1][1] - quads[s][t].extent[0][1];

    					const quadBox = {
    						x: quads[s][t].extent[0][0],
    						y: 0,
    						z: quads[s][t].extent[0][1],
    						w: quadWidth,
    						h: 1,
    						d: quadDepth
    					};

    					const size = Array.isArray(quads[s][t].store)
    					? quads[s][t].store.length
    					: quads[s][t].peek()[1][1] + quads[s][t].peek()[1][2] + quads[s][t].peek()[2][1] + quads[s][t].peek()[2][2];

    					qs[s][t] = quadBox;
    				} else //         " QuadState " + (2 * (x - 1) + s) + "," + (2 * (y - 1) + t) +
    				//         ": ", qs[s][t]);
    				if (depth > 1) {
    					// Map next level quads to qs
    					if (level === 1 && !firstLevelReset[s]) {
    						qs[s] = {}; // console.log("Level " + level +
    						firstLevelReset[s] = true;
    					}

    					if (typeof qs[s][t] !== "object") qs[s][t] = {};
    					const size = quads[s][t].peek()[1][1] + quads[s][t].peek()[1][2] + quads[s][t].peek()[2][1] + quads[s][t].peek()[2][2];

    					// console.log("From level "+ level +" recurse into quad " + (2 * (x - 1) + s) + "," + (2 * (y - 1) + t) +
    					//         " (size " + size + ")");
    					mapQuadState(qs[s][t], quads[s][t].store, level, depth, s, t);
    				}
    			}
    		}

    		--level;
    	}
    }

    function mapStateToList(state, depth) {
    	const list = [];
    	--depth;

    	if (Array.isArray(state)) {
    		state.forEach(d => {
    			if (typeof d === "object" && "x" in d && "y" in d) {
    				list.push(Object.assign({}, d));
    			}
    		});
    	}

    	for (const x in state) {
    		if (parseInt(x) === 1 || parseInt(x) === 2) {
    			for (const y in state[x]) {
    				if (parseInt(y) === 1 || parseInt(y) === 2) {
    					if ("1" in state[x][y] || "2" in state[x][y]) {
    						if (depth > 0) {
    							mapStateToList(state[x][y], depth).forEach(d => {
    								if (typeof d === "object" && "x" in d && "y" in d) {
    									list.push(Object.assign({}, d));
    								}
    							});
    						}
    					} else {
    						list.push(Object.assign({}, state[x][y]));
    					}
    				}
    			}
    		}
    	}

    	// console.log(ql);
    	return list.slice();
    }

    function instance$h($$self, $$props, $$invalidate) {
    	let { title } = $$props;
    	let { color = "#F7C77B" } = $$props;
    	let eventTotal = 0;
    	const eventQuad = new QuadStore(6, [[-16, -16], [16, 16]]);
    	const eventsLoading = [false];
    	const eventsLoaded = [false];

    	const initQuadWidth = (eventQuad.extent[1][0] - eventQuad.extent[0][0]) / 2,
    		initQuadDepth = (eventQuad.extent[1][1] - eventQuad.extent[0][1]) / 2;

    	const cursorDimensions = { x: -6, y: -6, z: 0, w: 12, h: 12, d: 1 };
    	const heightmap = [];
    	const gridSizeX = initQuadWidth * 2;
    	const gridSizeZ = initQuadDepth * 2;
    	let a = 0;
    	let w = 1;
    	let h = 1.5;
    	let d = 1;
    	let rot = 90;
    	let eventList = [];
    	let eventState = {};
    	let eventTime = 1577810677942;

    	const foundGroups = {
    		"1": null,
    		"2": null,
    		"3": null,
    		"4": null,
    		"5": null,
    		"6": null
    	};

    	let quadList = [];

    	const quadState = {
    		1: {
    			1: {
    				x: -initQuadWidth,
    				y: 0,
    				z: -initQuadDepth,
    				w: initQuadWidth,
    				h: 1,
    				d: initQuadDepth
    			},
    			2: {
    				x: -initQuadWidth,
    				y: 0,
    				z: 0,
    				w: initQuadWidth,
    				h: 1,
    				d: initQuadDepth
    			}
    		},
    		2: {
    			1: {
    				x: 0,
    				y: 0,
    				z: -initQuadDepth,
    				w: initQuadWidth,
    				h: 1,
    				d: initQuadDepth
    			},
    			2: {
    				x: 0,
    				y: 0,
    				z: 0,
    				w: initQuadWidth,
    				h: 1,
    				d: initQuadDepth
    			}
    		}
    	};

    	let showCursor = false;

    	let showGroups = [
    		foundGroups[1],
    		foundGroups[2],
    		foundGroups[3],
    		foundGroups[4],
    		foundGroups[5],
    		foundGroups[6]
    	];

    	let showQuads = false;
    	let showByTime = false;
    	let playTimeLoop = false;

    	let options = {
    		"labels": ["Show Terrain Cursor", "Show Quad Extents", "Filter Events By Time"],
    		"values": [showCursor, showQuads, showByTime]
    	};

    	let ranges = {
    		labels: ["time-event"], //, "alpha-blocks", "terrain-height", "terrain-rotation", "light-distance" ],
    		min: [eventTime - 10000], //, 0.0 , 1.0, 0.0, 1.0 ],
    		max: [eventTime + 10000], //, 1.0 , 2.0, 180.0, 100.0 ],
    		step: [100], //, 0.05, 0.25, 15.0, 10.0 ],
    		values: [eventTime], //, a, h, rot, 100 ]

    	};

    	let timeExtent = [eventTime - 10000, eventTime + 10000];
    	const light = { color: "#FFFFFF" };
    	const markerImage = new Image();
    	markerImage.crossOrigin = "";
    	let colormap;
    	let normalmap;
    	let use_heightmap = false;
    	const terrainMap = new Image();
    	terrainMap.alt = "Terrain Texture";
    	terrainMap.crossOrigin = "";
    	terrainMap.width = 1024;
    	terrainMap.height = 1024;
    	let quad_textures = [];
    	let terrainTexture = null;
    	let markerTexture = null;
    	let texture = null;
    	let worldPosition = { x: 0, y: 0, z: 0, r: 1 };
    	let webgl;

    	function heightMapper(x, y) {
    		// Do something with initTerrainHeight and lookup h in heightmap
    		const offsetH = eventTotal > 0 ? quadList[x][y] / eventTotal : 0;

    		console.log(quadList, eventTotal, offsetH);
    		return offsetH;
    	}


    	let controlInit;

    	// initial view
    	let location = new Float32Array([0, 5, 10]);

    	let target = new Float32Array([0, 1, 0]);

    	const captureViewDirection = (loc, tgt) => {
    		// console.log("location: ", loc, "\n", "target: ", tgt);
    		return "";
    	};

    	const checkCursorIntersection = (cursorExtent, quadExtent) => {
    		return !(cursorExtent[1][0] < quadExtent[0][0] || cursorExtent[1][1] < quadExtent[0][1] || cursorExtent[0][0] > quadExtent[1][0] || cursorExtent[0][1] > quadExtent[1][1]);
    	};

    	function mapEventState(es, quads, level, cursorExtent, depth, x = 1, y = 1) {
    		--depth;
    		const firstLevelReset = { 1: false, 2: false };

    		if (!Array.isArray(quads)) {
    			// the store is a QuadStore, not an Array
    			// so map the store to qs
    			++level;

    			let groupsAreVisible = 0;

    			for (let s = 1; s <= 2; ++s) {
    				if (typeof es[s] !== "object") es[s] = {};

    				for (let t = 1; t <= 2; ++t) {
    					if (Array.isArray(quads[s][t].store) || depth < 1) {
    						// Map this quad directly to qs
    						const quadWidth = quads[s][t].extent[1][0] - quads[s][t].extent[0][0];

    						const quadDepth = quads[s][t].extent[1][1] - quads[s][t].extent[0][1];

    						const quadMarker = {
    							x: quads[s][t].extent[0][0] + quadWidth / 2,
    							y: quads[s][t].extent[0][1] + quadDepth / 2,
    							group: 0,
    							t: new Date().getTime()
    						};

    						const size = Array.isArray(quads[s][t].store)
    						? quads[s][t].store.length
    						: quads[s][t].peek()[1][1] + quads[s][t].peek()[1][2] + quads[s][t].peek()[2][1] + quads[s][t].peek()[2][2];

    						if (Array.isArray(quads[s][t].store) && quads[s][t].store.length > 0) {
    							es[s][t] = quads[s][t].store.map(d => {
    								var event = Object.assign({}, d);
    								let p;

    								for (p in event) {
    									if (p === "group") {
    										// map groups
    										const group = "" + event["group"];

    										if (group in foundGroups && foundGroups[group] === null) {
    											foundGroups[group] = true;
    										}
    									} else if (p === "t") {
    										// map times
    										const minTime = timeExtent[0];

    										const maxTime = timeExtent[1];

    										if (!!minTime !== true || event["t"] < minTime) {
    											$$invalidate(8, timeExtent[0] = event["t"], timeExtent);
    										}

    										if (!!maxTime !== true || event["t"] > maxTime) {
    											$$invalidate(8, timeExtent[1] = event["t"], timeExtent);
    										}
    									}
    								}

    								if (!checkCursorIntersection(cursorExtent, [
    									[event["x"] - 0.05, event["y"] - 0.05],
    									[event["x"] + 0.05, event["y"] + 0.05]
    								])) {
    									// flip sign to dim cursors that are outside the group
    									event["group"] = -event["group"];
    								} else if (showGroups[Math.abs(event["group"]) - 1] === true) {
    									++groupsAreVisible;
    								}

    								return event;
    							}).slice();
    						} else //     "Found events (" + es[s][t].length + ")\n" +
    						//     "Depth "+ depth +", Level " + level + "\n" +
    						//     "  EventState " + (2 * (x - 1) + s) + "," + (2 * (y - 1) + t) + "\n" +
    						//     "  cursor extents intersect: ", cursorExtent, quads[s][t].extent);
    						if (level > 3 && size > 0) {
    							// if (level > 4) console.log(
    							//     "Level " + level +
    							//     "  EventState " + (2 * (x - 1) + s) + "," + (2 * (y - 1) + t) +
    							//     "  check cursor extents intersect: ", cursorExtent, quads[s][t].extent);
    							if (checkCursorIntersection(cursorExtent, quads[s][t].extent)) {
    								if (typeof es[s][t] !== "object") es[s][t] = {}; // if (level > 5) console.log(

    								// console.log(
    								//     "Depth "+ depth +", Level " + level +
    								//     "  EventState " + (2 * (x - 1) + s) + "," + (2 * (y - 1) + t) +
    								//     "  cursor extents intersect: ", cursorExtent, quads[s][t].extent);
    								// // if marker extent intersects this quad, go deeper
    								if (mapEventState(es[s][t], quads[s][t].store, level, cursorExtent, 1, s, t)) {
    									++groupsAreVisible;
    								} else {
    									es[s][t] = quadMarker;
    								}
    							} else {
    								es[s][t] = quadMarker;
    							}
    						}
    					} else if (depth > 0) {
    						// Map next level quads to qs
    						if (level === 1 && !firstLevelReset[s]) {
    							es[s] = {};
    							firstLevelReset[s] = true;
    						}

    						if (typeof es[s][t] !== "object") es[s][t] = {};
    						const size = quads[s][t].peek()[1][1] + quads[s][t].peek()[1][2] + quads[s][t].peek()[2][1] + quads[s][t].peek()[2][2];

    						// console.log("From level "+ level +" recurse into quad " + (2 * (x - 1) + s) + "," + (2 * (y - 1) + t) +
    						//         " (size " + size + ")");
    						mapEventState(es[s][t], quads[s][t].store, level, cursorExtent, depth, s, t);
    					}
    				}
    			}

    			--level;
    			return groupsAreVisible > 0;
    		}
    	}

    	let process_extra_shader_components = (gl, material, model) => {
    		// console.log("Process Extra Shader Components");
    		const program = material.program;

    		if (material.vertName == "texture-vertex-shader" && material.fragName == "texture-fragment-shader" || material.vertName == "normal-selected-txt-vertex-shader" && material.fragName == "normal-selected-txt-fragment-shader") {
    			// console.log(material.vertName, material.fragName);
    			const vertexTextureCoords = gl.getAttribLocation(program, "uv");

    			// gl.disable(gl.CULL_FACE); // for double-sided poly
    			gl.enableVertexAttribArray(vertexTextureCoords);

    			const textureBuffer = gl.createBuffer();

    			const textureCoords = [
    				// front: 0 1 2 3
    				1,
    				1,
    				0,
    				1,
    				1,
    				0,
    				0,
    				0,
    				// left: 1 4 3 6
    				1,
    				1,
    				0,
    				1,
    				1,
    				0,
    				0,
    				0,
    				// back: 4 5 6 7
    				1,
    				1,
    				0,
    				1,
    				1,
    				0,
    				0,
    				0,
    				// right: 5 0 7 2
    				1,
    				1,
    				0,
    				1,
    				1,
    				0,
    				0,
    				0,
    				// top: 4 1 5 0
    				0,
    				1,
    				0,
    				0,
    				1,
    				1,
    				1,
    				0,
    				// bottom: 3 6 2 7
    				0,
    				1,
    				0,
    				0,
    				1,
    				1,
    				1,
    				0
    			];

    			gl.bindBuffer(gl.ARRAY_BUFFER, textureBuffer);
    			gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoords), gl.STATIC_DRAW);
    			gl.vertexAttribPointer(vertexTextureCoords, 2, gl.FLOAT, false, 0, 0);

    			// Un-bind buffers
    			gl.bindBuffer(gl.ARRAY_BUFFER, null);

    			gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);

    			if (material.fragName === "normal-selected-txt-fragment-shader" && material.vertName === "normal-selected-txt-vertex-shader") {
    				for (let t = 0; t < 6; ++t) {
    					if (!!quad_textures[t]) {
    						const fragmentTextureLocation = gl.getUniformLocation(program, "uTexture" + t);

    						switch (t) {
    							case 1:
    								gl.activeTexture(gl.TEXTURE1);
    								break;
    							case 2:
    								gl.activeTexture(gl.TEXTURE2);
    								break;
    							case 3:
    								gl.activeTexture(gl.TEXTURE3);
    								break;
    							case 4:
    								gl.activeTexture(gl.TEXTURE4);
    								break;
    							case 5:
    								gl.activeTexture(gl.TEXTURE5);
    								break;
    							default:
    								gl.activeTexture(gl.TEXTURE0);
    						}

    						gl.bindTexture(gl.TEXTURE_2D, quad_textures[t]);
    						gl.uniform1i(fragmentTextureLocation, t);
    					}
    				}
    			}
    		} else if (material.fragName === "terrain-frag" && material.vertName === "terrain-vert") {
    			// console.log(material.vertName);
    			const heigthAdjMultLocation = gl.getUniformLocation(program, "height_adjustment");

    			gl.uniform1f(heigthAdjMultLocation, use_heightmap ? 0.5 : 0.000125); // if using GL.terrain() (which is flat) use larger adjustment => 0.125

    			// uniform vec3 light_direction; // normalized direction in eye
    			const lightDirectionLocation = gl.getUniformLocation(program, "light_direction");

    			gl.uniform3fv(lightDirectionLocation, new Float32Array([light.x, light.y, light.z]));

    			// uniform vec3 light_ambient_color;
    			const ambientLightLocation = gl.getUniformLocation(program, "light_ambient_color");

    			gl.uniform3fv(ambientLightLocation, new Float32Array([...normalizeColor$1(light.color)]));

    			// uniform vec3 light_diffuse_color;
    			const diffuseLightLocation = gl.getUniformLocation(program, "light_diffuse_color");

    			gl.uniform3fv(diffuseLightLocation, new Float32Array([...normalizeColor$1(light.color)]));

    			// uniform vec3 light_specular_color;
    			const specularLightLocation = gl.getUniformLocation(program, "light_specular_color");

    			gl.uniform3fv(specularLightLocation, new Float32Array([...normalizeColor$1(light.color)]));

    			// uniform float material_specular_exponent;
    			const specularExpLocation = gl.getUniformLocation(program, "material_specular_exponent");

    			gl.uniform1f(specularExpLocation, 0.99);

    			if (!!terrainTexture) {
    				const fragmentTextureLocation = gl.getUniformLocation(program, "colormap");
    				gl.activeTexture(gl.TEXTURE0);
    				gl.bindTexture(gl.TEXTURE_2D, terrainTexture);
    				gl.uniform1i(fragmentTextureLocation, 0);
    			}
    		} else if (material.vertName == "sprite-vertex-shader" && material.fragName == "sprite-fragment-shader") {
    			if (!!markerTexture) {
    				const fragmentTextureLocation = gl.getUniformLocation(program, "uTexture");
    				gl.activeTexture(gl.TEXTURE0);
    				gl.bindTexture(gl.TEXTURE_2D, markerTexture);
    				gl.uniform1i(fragmentTextureLocation, 0);
    			}
    		}
    	};

    	let refreshState = async () => {
    		const cursorExtent = [
    			[
    				worldPosition.x + cursorDimensions.x / worldPosition.r,
    				worldPosition.z + cursorDimensions.y / worldPosition.r
    			],
    			[
    				worldPosition.x + (cursorDimensions.x + cursorDimensions.w) / worldPosition.r,
    				worldPosition.z + (cursorDimensions.y + cursorDimensions.h) / worldPosition.r
    			]
    		];

    		// console.log(worldPosition.r, cursorExtent);
    		const depth = 5;

    		// console.log(quadState);
    		mapEventState(eventState, eventQuad.get(), 0, cursorExtent, depth);

    		// console.log(eventState);
    		$$invalidate(5, showGroups = showGroups.map((g, i) => {
    			if (g === null) return foundGroups[i + 1]; else return g;
    		}));

    		// ranges.labels.unshift("time-event");
    		// ranges.min.unshift(timeExtent[0]);
    		// ranges.max.unshift(timeExtent[1]);
    		// ranges.step.unshift(60000);
    		// console.log(foundGroups);
    		// now map eventState to a flat list for rendering
    		$$invalidate(2, eventList = mapStateToList(eventState, depth * depth));

    		if (!!eventsLoaded[0] !== true) return;
    	};

    	let updateWorld = event => {
    		// console.log(event);
    		setTimeout(
    			async () => {
    				await refreshState();
    			},
    			3
    		);
    	};

    	let clickCheckbox = event => {
    		// console.log("REFRESH: ", event);
    		setTimeout(
    			async () => {
    				await refreshState();
    			},
    			33
    		);

    		return true;
    	};

    	onMount(() => {
    		if (typeof controlInit === "function") {
    			controlInit();
    		}

    		// Get A 2D context for dynamic textures
    		/** @type {Canvas2DRenderingContext} */
    		const ctx = document.createElement("canvas").getContext("2d");

    		ctx.canvas.width = 256;
    		ctx.canvas.height = 256;
    		const data = JSON.parse(document.getElementById("data_in_html").children[0].innerHTML);
    		let frame;

    		for (let z = 0; z < data.length; z++) {
    			const xx = [];

    			for (let x = 0; x < data[z].length; x++) {
    				xx.push(data[z][x]);
    			}

    			$$invalidate(1, heightmap[z] = xx, heightmap);
    		}

    		if (!!markerTexture === false) {
    			// Create a texture and create initial bind
    			markerTexture = webgl.createTexture();

    			webgl.bindTexture(webgl.TEXTURE_2D, markerTexture);
    			webgl.bindTexture(webgl.TEXTURE_2D, null);
    		}

    		for (let t = 0; t < 6; ++t) {
    			if (!!quad_textures[t] === false) {
    				// Create a texture and create initial bind
    				quad_textures[t] = webgl.createTexture();

    				webgl.bindTexture(webgl.TEXTURE_2D, quad_textures[t]);
    				webgl.bindTexture(webgl.TEXTURE_2D, null);
    			}
    		}

    		if (!!terrainTexture === false) {
    			// Create a texture and create initial bind
    			terrainTexture = webgl.createTexture();

    			webgl.bindTexture(webgl.TEXTURE_2D, terrainTexture);
    			webgl.bindTexture(webgl.TEXTURE_2D, null);
    		}

    		// Texture constants
    		const level = 0;

    		const internalFormat = webgl.RGBA;
    		const format = webgl.RGBA;
    		const type = webgl.UNSIGNED_BYTE;
    		const heightmap_src = document.getElementById("heightmap").src;
    		if (heightmap_src.match(/height/) !== null) $$invalidate(11, use_heightmap = true);
    		$$invalidate(10, normalmap = new Texture(document.getElementById("heightmap").src, { width: 512, height: 512 }));

    		terrainMap.addEventListener("load", function () {
    			// Now that the image has loaded make copy it to the texture.
    			console.log("Bind to texture");

    			webgl.bindTexture(webgl.TEXTURE_2D, terrainTexture);
    			webgl.texImage2D(webgl.TEXTURE_2D, level, internalFormat, format, type, terrainMap);
    			webgl.generateMipmap(webgl.TEXTURE_2D);
    			webgl.texParameteri(webgl.TEXTURE_2D, webgl.TEXTURE_MAG_FILTER, webgl.NEAREST_MIPMAP_LINEAR);
    			webgl.texParameteri(webgl.TEXTURE_2D, webgl.TEXTURE_MIN_FILTER, webgl.NEAREST_MIPMAP_LINEAR);

    			// Pass this colormap texture to the terrain object, just
    			// to get @svelte/gl to bind the texture coordinates in the
    			// mesh to the 'uv' uniform in the vertex/fragment shaders.
    			// The actual map (and texture filter) that is applied to
    			// fragColor comes from the terrainMap initialized above
    			$$invalidate(9, colormap = new Texture(terrainMap.src, { width: 512, height: 512 }));
    		});

    		terrainMap.src = document.getElementById("shademap").src; //"images/colormap.jpg";

    		markerImage.addEventListener("load", function () {
    			// Now that the image has loaded make copy it to the texture.
    			console.log("Bind to texture");

    			webgl.bindTexture(webgl.TEXTURE_2D, markerTexture);
    			webgl.pixelStorei(webgl.UNPACK_FLIP_Y_WEBGL, false); // sometimes the marker appears upside down
    			webgl.texImage2D(webgl.TEXTURE_2D, level, internalFormat, format, type, markerImage);
    			webgl.generateMipmap(webgl.TEXTURE_2D);
    			webgl.texParameteri(webgl.TEXTURE_2D, webgl.TEXTURE_MAG_FILTER, webgl.NEAREST_MIPMAP_LINEAR);
    			webgl.texParameteri(webgl.TEXTURE_2D, webgl.TEXTURE_MIN_FILTER, webgl.NEAREST_MIPMAP_LINEAR);
    		}); // webgl.pixelStorei(webgl.UNPACK_FLIP_Y_WEBGL, true);

    		markerImage.src = "images/pin.png";

    		const faceInfos = [
    			{
    				target: webgl.TEXTURE_2D,
    				faceColor: "#F00",
    				textColor: "#0FF",
    				text: "+X"
    			},
    			{
    				target: webgl.TEXTURE_2D,
    				faceColor: "#FF0",
    				textColor: "#00F",
    				text: "-X"
    			},
    			{
    				target: webgl.TEXTURE_2D,
    				faceColor: "#0F0",
    				textColor: "#F0F",
    				text: "+Y"
    			},
    			{
    				target: webgl.TEXTURE_2D,
    				faceColor: "#0FF",
    				textColor: "#F00",
    				text: "-Y"
    			},
    			{
    				target: webgl.TEXTURE_2D,
    				faceColor: "#00F",
    				textColor: "#FF0",
    				text: "+Z"
    			},
    			{
    				target: webgl.TEXTURE_2D,
    				faceColor: "#F0F",
    				textColor: "#0F0",
    				text: "-Z"
    			}
    		];

    		faceInfos.forEach((faceInfo, i, a) => {
    			const { target, faceColor, textColor, text } = faceInfo;

    			// Asynchronously load an image
    			const img = new Image();

    			img.crossOrigin = "";
    			img.id = "" + (i + 1);

    			// Use 2d face generator to generate 6 images
    			// generateFace(ctx, faceColor, textColor, text);
    			generateFace$1(ctx, faceColor, 16);

    			// Upload the canvas to the cubemap face.
    			const width = ctx.canvas.width;

    			const height = ctx.canvas.height;
    			const previewWidth = ctx.canvas.width / 4;
    			img.style.margin = "auto";
    			img.style.position = "fixed";
    			img.style.top = "0px";
    			img.style.left = i * previewWidth + "px";
    			img.style.width = previewWidth + "px";

    			img.addEventListener("load", function () {
    				// Now that the image has loaded make copy it to the texture.
    				console.log("Bind to texture");

    				webgl.bindTexture(webgl.TEXTURE_2D, quad_textures[i]);
    				webgl.texImage2D(target, level, internalFormat, format, type, img);
    				webgl.generateMipmap(webgl.TEXTURE_2D);
    				webgl.texParameteri(webgl.TEXTURE_2D, webgl.TEXTURE_MAG_FILTER, webgl.NEAREST_MIPMAP_LINEAR); // webgl.LINEAR_MIPMAP_LINEAR);
    				webgl.texParameteri(webgl.TEXTURE_2D, webgl.TEXTURE_MIN_FILTER, webgl.NEAREST_MIPMAP_LINEAR); // webgl.LINEAR_MIPMAP_LINEAR);
    			});

    			ctx.canvas.toBlob(blob => {
    				img.src = URL.createObjectURL(blob);
    			});

    			// Setup each face so it's immediately renderable
    			if (!!quad_textures[i]) webgl.texImage2D(target, level, internalFormat, width, height, 0, format, type, null);
    		});

    		light.z = 0.1 * Math.cos(Date.now() * 0.0002);

    		const loop = () => {
    			frame = requestAnimationFrame(loop);

    			// light.x = 1.5 * Math.sin(Date.now() * 0.0001);
    			// light.y = 25 * h * Math.sin(Math.pow((h - light.x)/2, 2));
    			if (ranges.labels.filter(l => l.match("time")).length > 0) {
    				$$invalidate(3, eventTime = ranges.values[0]);
    				$$invalidate(7, ranges.min[0] = timeExtent[0], ranges);
    				$$invalidate(7, ranges.max[0] = timeExtent[1], ranges);
    			} // a = ranges['values'][1];
    			// a = ranges['values'][0];
    			// h = ranges['values'][1];
    		}; // rot = ranges['values'][2];
    		// light.y = light.y + ranges['values'][3];

    		loop();

    		// Use a Web Worker to load position events...
    		// as if they are coming in from async remote service
    		if (window.Worker) {
    			window.eventQuad = eventQuad; // debug
    			window.problem_events = [];
    			const eventProcessor = new Worker("worker.js");

    			eventProcessor.postMessage({
    				"action": "Load event data",
    				"payload": {
    					"event-source": "post/data/position_events.json",
    					"heightmap-source": "post/data/planar-terrain-heights.json",
    					"planar-extent": eventQuad.extent
    				}
    			});

    			console.log("Processing event and height data...");
    			console.log("Quads initialized: ", quadList);
    			const delay = { time: 1 };
    			const depth = 6;
    			const planarExtent = eventQuad.extent;

    			const planarWidth = (planarExtent[1][0] - planarExtent[0][0]) / 2,
    				planarDepth = (planarExtent[1][1] - planarExtent[0][1]) / 2;

    			const terrainDepth = Array.isArray(heightmap) && heightmap.length > 0
    			? heightmap.length
    			: 0;

    			const terrainWidth = terrainDepth > 0 && heightmap[0].length > 0
    			? heightmap[0].length
    			: 0;

    			// console.log(heightmap);
    			// console.log("terrainDepth: ", terrainDepth);
    			// console.log("terrainWidth: ", terrainWidth);
    			eventProcessor.onmessage = function (event) {
    				eventsLoading[0] = true;
    				delay.time += 66;

    				if (typeof event.data === "object") {
    					// console.log(event.data);
    					const d = {};

    					if ("x" in event.data && "y" in event.data) try {
    						const x = event.data["x"], y = event.data["y"];

    						// Reverse sign for y
    						d["x"] = x;

    						d["y"] = -y;
    						d["group"] = event.data["group"];
    						d["height"] = 0;

    						// (-(gridSizeX / 2) + (i * (gridSizeX / heightmap[0].length)))
    						const i = parseInt(d["x"] * heightmap[0].length / gridSizeX) + parseInt(heightmap[0].length / 2);

    						const k = parseInt(d["y"] * heightmap.length / gridSizeZ) + parseInt(heightmap.length / 2);

    						try {
    							// console.log(i, k, heightmap[i][k]);
    							d["height"] = heightmap[i][k];
    						} catch(e) {

    						} // console.log(i, k);

    						d["t"] = event.data["t"];
    						eventQuad.push(Object.assign({ height: 1 }, d));
    						eventTotal++;
    					} catch(load_error) {
    						window.problem_events.push(Object.assign({ load_error }, event.data));
    					}

    					setTimeout(
    						async () => {
    							if (!!eventsLoading[0] && !eventsLoaded[0]) {
    								eventsLoading[0] = false;

    								// console.log("REFRESH EVENT STATE");
    								mapQuadState(quadState, eventQuad.get(), 0, depth);

    								// now map quadState to a flat list for rendering
    								$$invalidate(4, quadList = mapStateToList(quadState, depth));

    								// console.log("QuadList has ", quadList.length);
    								// console.log("Total events loaded: ", eventTotal);
    								await refreshState();

    								eventsLoaded[0] = true;
    							} else {
    								// if (timeExtent.length > 1) { // && ranges.labels.filter(l => l.match("time")).length < 1) {
    								//     const mid_time = timeExtent[0] + (timeExtent[1] - timeExtent[0]) / 2;
    								//     ranges.values[0] = mid_time;
    								//     // console.log("Mid Timestamp: ", mid_time);
    								// }
    								eventsLoaded[0] = false;
    							}
    						},
    						delay.time
    					);
    				}
    			};
    		} else {
    			console.log("Your browser doesn't support web workers.");
    			window.alert("Your browser doesn't support web workers, so no event data can be loaded.");
    		}

    		return () => cancelAnimationFrame(frame);
    	});

    	const writable_props = ["title", "color"];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$3.warn(`<SimulationApp2> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("SimulationApp2", $$slots, []);

    	function gl_scene_gl_binding(value) {
    		webgl = value;
    		$$invalidate(13, webgl);
    	}

    	function navigationcontrols_init_binding(value) {
    		controlInit = value;
    		$$invalidate(14, controlInit);
    	}

    	function navigationcontrols_options_binding(value) {
    		options = value;
    		$$invalidate(6, options);
    	}

    	function navigationcontrols_rangeOptions_binding(value) {
    		ranges = value;
    		$$invalidate(7, ranges);
    	}

    	function navigationcontrols_rangeValues_binding(value) {
    		ranges.values = value;
    		$$invalidate(7, ranges);
    	}

    	function navigationcontrols_groups_binding(value) {
    		showGroups = value;
    		$$invalidate(5, showGroups);
    	}

    	function navigationcontrols_timeExtent_binding(value) {
    		timeExtent = value;
    		$$invalidate(8, timeExtent);
    	}

    	function navigationcontrols_viewLocation_binding(value) {
    		location = value;
    		$$invalidate(15, location);
    	}

    	function navigationcontrols_viewTarget_binding(value) {
    		target = value;
    		$$invalidate(16, target);
    	}

    	function navigationcontrols_worldPosition_binding(value) {
    		worldPosition = value;
    		$$invalidate(12, worldPosition);
    	}

    	$$self.$set = $$props => {
    		if ("title" in $$props) $$invalidate(31, title = $$props.title);
    		if ("color" in $$props) $$invalidate(0, color = $$props.color);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		GL,
    		NavigationControls,
    		generateFace: generateFace$1,
    		QuadStore,
    		terrain: terrain$1,
    		markerFrag,
    		markerVert,
    		quadFrag,
    		quadVert,
    		terrainFrag,
    		terrainVert,
    		title,
    		color,
    		eventTotal,
    		eventQuad,
    		eventsLoading,
    		eventsLoaded,
    		initQuadWidth,
    		initQuadDepth,
    		cursorDimensions,
    		heightmap,
    		gridSizeX,
    		gridSizeZ,
    		a,
    		w,
    		h,
    		d,
    		rot,
    		eventList,
    		eventState,
    		eventTime,
    		foundGroups,
    		quadList,
    		quadState,
    		showCursor,
    		showGroups,
    		showQuads,
    		showByTime,
    		playTimeLoop,
    		options,
    		ranges,
    		timeExtent,
    		light,
    		markerImage,
    		markerHeight: markerHeight$1,
    		colormap,
    		normalmap,
    		use_heightmap,
    		terrainMap,
    		quad_textures,
    		terrainTexture,
    		markerTexture,
    		texture,
    		worldPosition,
    		webgl,
    		adjustColor: adjustColor$2,
    		normalizeColor: normalizeColor$1,
    		markerColor,
    		heightMapper,
    		controlInit,
    		location,
    		target,
    		captureViewDirection,
    		checkCursorIntersection,
    		mapEventState,
    		mapQuadState,
    		mapStateToList,
    		process_extra_shader_components,
    		refreshState,
    		updateWorld,
    		clickCheckbox
    	});

    	$$self.$inject_state = $$props => {
    		if ("title" in $$props) $$invalidate(31, title = $$props.title);
    		if ("color" in $$props) $$invalidate(0, color = $$props.color);
    		if ("eventTotal" in $$props) eventTotal = $$props.eventTotal;
    		if ("a" in $$props) $$invalidate(22, a = $$props.a);
    		if ("w" in $$props) $$invalidate(23, w = $$props.w);
    		if ("h" in $$props) $$invalidate(24, h = $$props.h);
    		if ("d" in $$props) $$invalidate(25, d = $$props.d);
    		if ("rot" in $$props) $$invalidate(26, rot = $$props.rot);
    		if ("eventList" in $$props) $$invalidate(2, eventList = $$props.eventList);
    		if ("eventState" in $$props) eventState = $$props.eventState;
    		if ("eventTime" in $$props) $$invalidate(3, eventTime = $$props.eventTime);
    		if ("quadList" in $$props) $$invalidate(4, quadList = $$props.quadList);
    		if ("showCursor" in $$props) showCursor = $$props.showCursor;
    		if ("showGroups" in $$props) $$invalidate(5, showGroups = $$props.showGroups);
    		if ("showQuads" in $$props) showQuads = $$props.showQuads;
    		if ("showByTime" in $$props) showByTime = $$props.showByTime;
    		if ("playTimeLoop" in $$props) playTimeLoop = $$props.playTimeLoop;
    		if ("options" in $$props) $$invalidate(6, options = $$props.options);
    		if ("ranges" in $$props) $$invalidate(7, ranges = $$props.ranges);
    		if ("timeExtent" in $$props) $$invalidate(8, timeExtent = $$props.timeExtent);
    		if ("colormap" in $$props) $$invalidate(9, colormap = $$props.colormap);
    		if ("normalmap" in $$props) $$invalidate(10, normalmap = $$props.normalmap);
    		if ("use_heightmap" in $$props) $$invalidate(11, use_heightmap = $$props.use_heightmap);
    		if ("quad_textures" in $$props) quad_textures = $$props.quad_textures;
    		if ("terrainTexture" in $$props) terrainTexture = $$props.terrainTexture;
    		if ("markerTexture" in $$props) markerTexture = $$props.markerTexture;
    		if ("texture" in $$props) texture = $$props.texture;
    		if ("worldPosition" in $$props) $$invalidate(12, worldPosition = $$props.worldPosition);
    		if ("webgl" in $$props) $$invalidate(13, webgl = $$props.webgl);
    		if ("controlInit" in $$props) $$invalidate(14, controlInit = $$props.controlInit);
    		if ("location" in $$props) $$invalidate(15, location = $$props.location);
    		if ("target" in $$props) $$invalidate(16, target = $$props.target);
    		if ("process_extra_shader_components" in $$props) $$invalidate(28, process_extra_shader_components = $$props.process_extra_shader_components);
    		if ("refreshState" in $$props) refreshState = $$props.refreshState;
    		if ("updateWorld" in $$props) $$invalidate(29, updateWorld = $$props.updateWorld);
    		if ("clickCheckbox" in $$props) $$invalidate(30, clickCheckbox = $$props.clickCheckbox);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		color,
    		heightmap,
    		eventList,
    		eventTime,
    		quadList,
    		showGroups,
    		options,
    		ranges,
    		timeExtent,
    		colormap,
    		normalmap,
    		use_heightmap,
    		worldPosition,
    		webgl,
    		controlInit,
    		location,
    		target,
    		eventQuad,
    		initQuadWidth,
    		cursorDimensions,
    		gridSizeX,
    		gridSizeZ,
    		a,
    		w,
    		h,
    		d,
    		rot,
    		captureViewDirection,
    		process_extra_shader_components,
    		updateWorld,
    		clickCheckbox,
    		title,
    		gl_scene_gl_binding,
    		navigationcontrols_init_binding,
    		navigationcontrols_options_binding,
    		navigationcontrols_rangeOptions_binding,
    		navigationcontrols_rangeValues_binding,
    		navigationcontrols_groups_binding,
    		navigationcontrols_timeExtent_binding,
    		navigationcontrols_viewLocation_binding,
    		navigationcontrols_viewTarget_binding,
    		navigationcontrols_worldPosition_binding
    	];
    }

    class SimulationApp2 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$h, create_fragment$h, safe_not_equal, { title: 31, color: 0 }, [-1, -1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SimulationApp2",
    			options,
    			id: create_fragment$h.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*title*/ ctx[31] === undefined && !("title" in props)) {
    			console_1$3.warn("<SimulationApp2> was created without expected prop 'title'");
    		}
    	}

    	get title() {
    		throw new Error("<SimulationApp2>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<SimulationApp2>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<SimulationApp2>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<SimulationApp2>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/apps/TerrainApp.svelte generated by Svelte v3.24.0 */

    const { console: console_1$4 } = globals;
    const file$6 = "src/apps/TerrainApp.svelte";

    // (108:4) <GL.OrbitControls maxPolarAngle={Math.PI / 2} let:location>
    function create_default_slot_2$3(ctx) {
    	let gl_perspectivecamera;
    	let current;

    	gl_perspectivecamera = new PerspectiveCamera({
    			props: {
    				location: /*location*/ ctx[15],
    				lookAt: "center",
    				near: 0.01,
    				far: 1000
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(gl_perspectivecamera.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(gl_perspectivecamera, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const gl_perspectivecamera_changes = {};
    			if (dirty & /*location*/ 32768) gl_perspectivecamera_changes.location = /*location*/ ctx[15];
    			gl_perspectivecamera.$set(gl_perspectivecamera_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_perspectivecamera.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_perspectivecamera.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gl_perspectivecamera, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$3.name,
    		type: "slot",
    		source: "(108:4) <GL.OrbitControls maxPolarAngle={Math.PI / 2} let:location>",
    		ctx
    	});

    	return block;
    }

    // (137:4) <GL.Group location={[light.x,light.y,light.z]}>
    function create_default_slot_1$3(ctx) {
    	let gl_pointlight;
    	let current;

    	gl_pointlight = new PointLight({
    			props: {
    				location: [0, 0, 0],
    				color: adjustColor$3(/*color*/ ctx[0], 1),
    				intensity: 0.6
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(gl_pointlight.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(gl_pointlight, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const gl_pointlight_changes = {};
    			if (dirty & /*color*/ 1) gl_pointlight_changes.color = adjustColor$3(/*color*/ ctx[0], 1);
    			gl_pointlight.$set(gl_pointlight_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_pointlight.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_pointlight.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gl_pointlight, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$3.name,
    		type: "slot",
    		source: "(137:4) <GL.Group location={[light.x,light.y,light.z]}>",
    		ctx
    	});

    	return block;
    }

    // (105:0) <GL.Scene bind:gl={webgl} backgroundOpacity=1.0 process_extra_shader_components={process_extra_shader_components}>
    function create_default_slot$4(ctx) {
    	let gl_target;
    	let t0;
    	let gl_orbitcontrols;
    	let t1;
    	let gl_ambientlight;
    	let t2;
    	let gl_directionallight;
    	let t3;
    	let gl_mesh0;
    	let t4;
    	let gl_mesh1;
    	let t5;
    	let gl_group;
    	let current;

    	gl_target = new Target({
    			props: {
    				id: "center",
    				location: [0, /*h*/ ctx[2] / 2 - /*h*/ ctx[2], 0]
    			},
    			$$inline: true
    		});

    	gl_orbitcontrols = new OrbitControls({
    			props: {
    				maxPolarAngle: Math.PI / 2,
    				$$slots: {
    					default: [
    						create_default_slot_2$3,
    						({ location }) => ({ 15: location }),
    						({ location }) => location ? 32768 : 0
    					]
    				},
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	gl_ambientlight = new AmbientLight({
    			props: { intensity: 0.3 },
    			$$inline: true
    		});

    	gl_directionallight = new DirectionalLight({
    			props: { direction: [-1, -1, -1], intensity: 0.5 },
    			$$inline: true
    		});

    	gl_mesh0 = new Mesh({
    			props: {
    				geometry: /*use_heightmap*/ ctx[1] ? terrain() : terrain$1(),
    				location: [0, -/*h*/ ctx[2] / 2, 0],
    				rotation: [-/*rot*/ ctx[3], 0, 0],
    				scale: /*h*/ ctx[2],
    				frag: terrainFrag,
    				vert: terrainVert,
    				uniforms: {
    					color: adjustColor$3(/*color*/ ctx[0], /*h*/ ctx[2]),
    					alpha: 1,
    					normalmap: /*normalmap*/ ctx[6]
    				}
    			},
    			$$inline: true
    		});

    	gl_mesh1 = new Mesh({
    			props: {
    				geometry: plane(),
    				location: [0, -/*h*/ ctx[2] * 63 / 128, 0],
    				rotation: [-90, 0, 0],
    				scale: /*h*/ ctx[2],
    				uniforms: { color: 26367, alpha: 0.45 },
    				transparent: true
    			},
    			$$inline: true
    		});

    	gl_group = new Group({
    			props: {
    				location: [/*light*/ ctx[4].x, /*light*/ ctx[4].y, /*light*/ ctx[4].z],
    				$$slots: { default: [create_default_slot_1$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(gl_target.$$.fragment);
    			t0 = space();
    			create_component(gl_orbitcontrols.$$.fragment);
    			t1 = space();
    			create_component(gl_ambientlight.$$.fragment);
    			t2 = space();
    			create_component(gl_directionallight.$$.fragment);
    			t3 = space();
    			create_component(gl_mesh0.$$.fragment);
    			t4 = space();
    			create_component(gl_mesh1.$$.fragment);
    			t5 = space();
    			create_component(gl_group.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(gl_target, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(gl_orbitcontrols, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(gl_ambientlight, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(gl_directionallight, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(gl_mesh0, target, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(gl_mesh1, target, anchor);
    			insert_dev(target, t5, anchor);
    			mount_component(gl_group, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const gl_target_changes = {};
    			if (dirty & /*h*/ 4) gl_target_changes.location = [0, /*h*/ ctx[2] / 2 - /*h*/ ctx[2], 0];
    			gl_target.$set(gl_target_changes);
    			const gl_orbitcontrols_changes = {};

    			if (dirty & /*$$scope, location*/ 98304) {
    				gl_orbitcontrols_changes.$$scope = { dirty, ctx };
    			}

    			gl_orbitcontrols.$set(gl_orbitcontrols_changes);
    			const gl_mesh0_changes = {};
    			if (dirty & /*use_heightmap*/ 2) gl_mesh0_changes.geometry = /*use_heightmap*/ ctx[1] ? terrain() : terrain$1();
    			if (dirty & /*h*/ 4) gl_mesh0_changes.location = [0, -/*h*/ ctx[2] / 2, 0];
    			if (dirty & /*rot*/ 8) gl_mesh0_changes.rotation = [-/*rot*/ ctx[3], 0, 0];
    			if (dirty & /*h*/ 4) gl_mesh0_changes.scale = /*h*/ ctx[2];

    			if (dirty & /*color, h, normalmap*/ 69) gl_mesh0_changes.uniforms = {
    				color: adjustColor$3(/*color*/ ctx[0], /*h*/ ctx[2]),
    				alpha: 1,
    				normalmap: /*normalmap*/ ctx[6]
    			};

    			gl_mesh0.$set(gl_mesh0_changes);
    			const gl_mesh1_changes = {};
    			if (dirty & /*h*/ 4) gl_mesh1_changes.location = [0, -/*h*/ ctx[2] * 63 / 128, 0];
    			if (dirty & /*h*/ 4) gl_mesh1_changes.scale = /*h*/ ctx[2];
    			gl_mesh1.$set(gl_mesh1_changes);
    			const gl_group_changes = {};
    			if (dirty & /*light*/ 16) gl_group_changes.location = [/*light*/ ctx[4].x, /*light*/ ctx[4].y, /*light*/ ctx[4].z];

    			if (dirty & /*$$scope, color*/ 65537) {
    				gl_group_changes.$$scope = { dirty, ctx };
    			}

    			gl_group.$set(gl_group_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_target.$$.fragment, local);
    			transition_in(gl_orbitcontrols.$$.fragment, local);
    			transition_in(gl_ambientlight.$$.fragment, local);
    			transition_in(gl_directionallight.$$.fragment, local);
    			transition_in(gl_mesh0.$$.fragment, local);
    			transition_in(gl_mesh1.$$.fragment, local);
    			transition_in(gl_group.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_target.$$.fragment, local);
    			transition_out(gl_orbitcontrols.$$.fragment, local);
    			transition_out(gl_ambientlight.$$.fragment, local);
    			transition_out(gl_directionallight.$$.fragment, local);
    			transition_out(gl_mesh0.$$.fragment, local);
    			transition_out(gl_mesh1.$$.fragment, local);
    			transition_out(gl_group.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gl_target, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(gl_orbitcontrols, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(gl_ambientlight, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(gl_directionallight, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(gl_mesh0, detaching);
    			if (detaching) detach_dev(t4);
    			destroy_component(gl_mesh1, detaching);
    			if (detaching) detach_dev(t5);
    			destroy_component(gl_group, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$4.name,
    		type: "slot",
    		source: "(105:0) <GL.Scene bind:gl={webgl} backgroundOpacity=1.0 process_extra_shader_components={process_extra_shader_components}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$i(ctx) {
    	let gl_scene;
    	let updating_gl;
    	let t0;
    	let div;
    	let label0;
    	let input0;
    	let t1;
    	let label1;
    	let input1;
    	let input1_min_value;
    	let input1_max_value;
    	let input1_step_value;
    	let br0;
    	let t2;
    	let t3;
    	let t4;
    	let t5;
    	let label2;
    	let input2;
    	let input2_min_value;
    	let input2_max_value;
    	let input2_step_value;
    	let br1;
    	let t6;
    	let t7;
    	let t8;
    	let current;
    	let mounted;
    	let dispose;

    	function gl_scene_gl_binding(value) {
    		/*gl_scene_gl_binding*/ ctx[9].call(null, value);
    	}

    	let gl_scene_props = {
    		backgroundOpacity: "1.0",
    		process_extra_shader_components: /*process_extra_shader_components*/ ctx[7],
    		$$slots: { default: [create_default_slot$4] },
    		$$scope: { ctx }
    	};

    	if (/*webgl*/ ctx[5] !== void 0) {
    		gl_scene_props.gl = /*webgl*/ ctx[5];
    	}

    	gl_scene = new Scene({ props: gl_scene_props, $$inline: true });
    	binding_callbacks.push(() => bind(gl_scene, "gl", gl_scene_gl_binding));

    	const block = {
    		c: function create() {
    			create_component(gl_scene.$$.fragment);
    			t0 = space();
    			div = element("div");
    			label0 = element("label");
    			input0 = element("input");
    			t1 = space();
    			label1 = element("label");
    			input1 = element("input");
    			br0 = element("br");
    			t2 = text("\n        size (");
    			t3 = text(/*h*/ ctx[2]);
    			t4 = text(")");
    			t5 = space();
    			label2 = element("label");
    			input2 = element("input");
    			br1 = element("br");
    			t6 = text("\n        rotation (");
    			t7 = text(/*rot*/ ctx[3]);
    			t8 = text(")");
    			attr_dev(input0, "type", "color");
    			set_style(input0, "height", "64px");
    			add_location(input0, file$6, 147, 8, 5160);
    			add_location(label0, file$6, 146, 4, 5144);
    			attr_dev(input1, "type", "range");
    			attr_dev(input1, "min", input1_min_value = 0.75);
    			attr_dev(input1, "max", input1_max_value = 2);
    			attr_dev(input1, "step", input1_step_value = 0.05);
    			add_location(input1, file$6, 151, 8, 5255);
    			add_location(br0, file$6, 151, 74, 5321);
    			add_location(label1, file$6, 150, 4, 5239);
    			attr_dev(input2, "type", "range");
    			attr_dev(input2, "min", input2_min_value = 0);
    			attr_dev(input2, "max", input2_max_value = 180);
    			attr_dev(input2, "step", input2_step_value = 15);
    			add_location(input2, file$6, 156, 8, 5381);
    			add_location(br1, file$6, 156, 75, 5448);
    			add_location(label2, file$6, 155, 4, 5365);
    			attr_dev(div, "class", "controls right svelte-12v0mf9");
    			add_location(div, file$6, 145, 0, 5111);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(gl_scene, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, label0);
    			append_dev(label0, input0);
    			set_input_value(input0, /*color*/ ctx[0]);
    			append_dev(div, t1);
    			append_dev(div, label1);
    			append_dev(label1, input1);
    			set_input_value(input1, /*h*/ ctx[2]);
    			append_dev(label1, br0);
    			append_dev(label1, t2);
    			append_dev(label1, t3);
    			append_dev(label1, t4);
    			append_dev(div, t5);
    			append_dev(div, label2);
    			append_dev(label2, input2);
    			set_input_value(input2, /*rot*/ ctx[3]);
    			append_dev(label2, br1);
    			append_dev(label2, t6);
    			append_dev(label2, t7);
    			append_dev(label2, t8);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[10]),
    					listen_dev(input1, "change", /*input1_change_input_handler*/ ctx[11]),
    					listen_dev(input1, "input", /*input1_change_input_handler*/ ctx[11]),
    					listen_dev(input2, "change", /*input2_change_input_handler*/ ctx[12]),
    					listen_dev(input2, "input", /*input2_change_input_handler*/ ctx[12])
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const gl_scene_changes = {};

    			if (dirty & /*$$scope, light, color, h, use_heightmap, rot, normalmap*/ 65631) {
    				gl_scene_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_gl && dirty & /*webgl*/ 32) {
    				updating_gl = true;
    				gl_scene_changes.gl = /*webgl*/ ctx[5];
    				add_flush_callback(() => updating_gl = false);
    			}

    			gl_scene.$set(gl_scene_changes);

    			if (dirty & /*color*/ 1) {
    				set_input_value(input0, /*color*/ ctx[0]);
    			}

    			if (dirty & /*h*/ 4) {
    				set_input_value(input1, /*h*/ ctx[2]);
    			}

    			if (!current || dirty & /*h*/ 4) set_data_dev(t3, /*h*/ ctx[2]);

    			if (dirty & /*rot*/ 8) {
    				set_input_value(input2, /*rot*/ ctx[3]);
    			}

    			if (!current || dirty & /*rot*/ 8) set_data_dev(t7, /*rot*/ ctx[3]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_scene.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_scene.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gl_scene, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function adjustColor$3(clr, height = 1) {
    	const r = parseInt("0x" + clr.substr(1, 2), 16),
    		g = parseInt("0x" + clr.substr(3, 2), 16),
    		b = parseInt("0x" + clr.substr(5, 2), 16);

    	const hr = Math.floor(r * (height / 0.25)), hb = Math.floor(b * (height / 0.25));
    	return Math.abs(((hr < 255 ? hr : r) << 16) + (g << 8) + (hb < 255 ? hb : b));
    }

    function normalizeColor$2(clr) {
    	const r = parseInt("0x" + clr.substr(1, 2), 16),
    		g = parseInt("0x" + clr.substr(3, 2), 16),
    		b = parseInt("0x" + clr.substr(5, 2), 16);

    	return [r / 255, g / 255, b / 255];
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let { title } = $$props;
    	let { color = "#F7C77B" } = $$props;
    	let use_heightmap = false;
    	let w = 1;
    	let h = 1;
    	let d = 1;
    	let rot = 90;
    	const light = { color: "#FFFFFF" };
    	let webgl;
    	let normalmap;

    	let process_extra_shader_components = (gl, material, model) => {
    		console.log("Process Extra Shader Components");
    		const program = material.program;

    		if (material.vertName === "terrain-vert") {
    			// console.log(material.vertName);
    			const heigthAdjMultLocation = gl.getUniformLocation(program, "height_adjustment");

    			gl.uniform1f(heigthAdjMultLocation, use_heightmap ? 0.5 : 0.000125); // if using GL.terrain() (which is flat) use larger adjustment => 0.125

    			// uniform vec3 light_direction; // normalized direction in eye
    			const lightDirectionLocation = gl.getUniformLocation(program, "light_direction");

    			gl.uniform3fv(lightDirectionLocation, new Float32Array([light.x, light.y, light.z]));

    			// uniform vec3 light_ambient_color;
    			const ambientLightLocation = gl.getUniformLocation(program, "light_ambient_color");

    			gl.uniform3fv(ambientLightLocation, new Float32Array([...normalizeColor$2(light.color)]));

    			// uniform vec3 light_diffuse_color;
    			const diffuseLightLocation = gl.getUniformLocation(program, "light_diffuse_color");

    			gl.uniform3fv(diffuseLightLocation, new Float32Array([...normalizeColor$2(light.color)]));

    			// uniform vec3 light_specular_color;
    			const specularLightLocation = gl.getUniformLocation(program, "light_specular_color");

    			gl.uniform3fv(specularLightLocation, new Float32Array([...normalizeColor$2(light.color)]));

    			// uniform float material_specular_exponent;
    			const specularExpLocation = gl.getUniformLocation(program, "material_specular_exponent");

    			gl.uniform1f(specularExpLocation, 0.99);
    		}
    	};

    	onMount(() => {
    		let frame;
    		const map_src = document.getElementById("heightmap").src;
    		if (map_src.match(/height/) !== null) $$invalidate(1, use_heightmap = true);
    		$$invalidate(6, normalmap = new Texture(document.getElementById("heightmap").src, { width: 512, height: 512 }));
    		$$invalidate(4, light.z = 0.1 * Math.cos(Date.now() * 0.0002), light);

    		const loop = () => {
    			frame = requestAnimationFrame(loop);
    			$$invalidate(4, light.x = 1.5 * Math.sin(Date.now() * 0.0001), light);
    			$$invalidate(4, light.y = h + h / 2 * Math.sin(Math.pow((h - light.x) / 2, 2)), light);
    		};

    		loop();
    		return () => cancelAnimationFrame(frame);
    	});

    	const writable_props = ["title", "color"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$4.warn(`<TerrainApp> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("TerrainApp", $$slots, []);

    	function gl_scene_gl_binding(value) {
    		webgl = value;
    		$$invalidate(5, webgl);
    	}

    	function input0_input_handler() {
    		color = this.value;
    		$$invalidate(0, color);
    	}

    	function input1_change_input_handler() {
    		h = to_number(this.value);
    		$$invalidate(2, h);
    	}

    	function input2_change_input_handler() {
    		rot = to_number(this.value);
    		$$invalidate(3, rot);
    	}

    	$$self.$set = $$props => {
    		if ("title" in $$props) $$invalidate(8, title = $$props.title);
    		if ("color" in $$props) $$invalidate(0, color = $$props.color);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		GL,
    		terrain: terrain$1,
    		terrainFrag,
    		terrainVert,
    		title,
    		color,
    		use_heightmap,
    		w,
    		h,
    		d,
    		rot,
    		light,
    		adjustColor: adjustColor$3,
    		normalizeColor: normalizeColor$2,
    		webgl,
    		normalmap,
    		process_extra_shader_components
    	});

    	$$self.$inject_state = $$props => {
    		if ("title" in $$props) $$invalidate(8, title = $$props.title);
    		if ("color" in $$props) $$invalidate(0, color = $$props.color);
    		if ("use_heightmap" in $$props) $$invalidate(1, use_heightmap = $$props.use_heightmap);
    		if ("w" in $$props) w = $$props.w;
    		if ("h" in $$props) $$invalidate(2, h = $$props.h);
    		if ("d" in $$props) d = $$props.d;
    		if ("rot" in $$props) $$invalidate(3, rot = $$props.rot);
    		if ("webgl" in $$props) $$invalidate(5, webgl = $$props.webgl);
    		if ("normalmap" in $$props) $$invalidate(6, normalmap = $$props.normalmap);
    		if ("process_extra_shader_components" in $$props) $$invalidate(7, process_extra_shader_components = $$props.process_extra_shader_components);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		color,
    		use_heightmap,
    		h,
    		rot,
    		light,
    		webgl,
    		normalmap,
    		process_extra_shader_components,
    		title,
    		gl_scene_gl_binding,
    		input0_input_handler,
    		input1_change_input_handler,
    		input2_change_input_handler
    	];
    }

    class TerrainApp extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$i, create_fragment$i, safe_not_equal, { title: 8, color: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TerrainApp",
    			options,
    			id: create_fragment$i.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*title*/ ctx[8] === undefined && !("title" in props)) {
    			console_1$4.warn("<TerrainApp> was created without expected prop 'title'");
    		}
    	}

    	get title() {
    		throw new Error("<TerrainApp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<TerrainApp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<TerrainApp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<TerrainApp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var version = "6.2.0";

    function ascending(a, b) {
      return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }

    function bisector(f) {
      let delta = f;
      let compare = f;

      if (f.length === 1) {
        delta = (d, x) => f(d) - x;
        compare = ascendingComparator(f);
      }

      function left(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;
        while (lo < hi) {
          const mid = (lo + hi) >>> 1;
          if (compare(a[mid], x) < 0) lo = mid + 1;
          else hi = mid;
        }
        return lo;
      }

      function right(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;
        while (lo < hi) {
          const mid = (lo + hi) >>> 1;
          if (compare(a[mid], x) > 0) hi = mid;
          else lo = mid + 1;
        }
        return lo;
      }

      function center(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;
        const i = left(a, x, lo, hi - 1);
        return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
      }

      return {left, center, right};
    }

    function ascendingComparator(f) {
      return (d, x) => ascending(f(d), x);
    }

    function number(x) {
      return x === null ? NaN : +x;
    }

    function* numbers(values, valueof) {
      if (valueof === undefined) {
        for (let value of values) {
          if (value != null && (value = +value) >= value) {
            yield value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
            yield value;
          }
        }
      }
    }

    const ascendingBisect = bisector(ascending);
    const bisectRight = ascendingBisect.right;
    const bisectLeft = ascendingBisect.left;
    const bisectCenter = bisector(number).center;

    function count(values, valueof) {
      let count = 0;
      if (valueof === undefined) {
        for (let value of values) {
          if (value != null && (value = +value) >= value) {
            ++count;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
            ++count;
          }
        }
      }
      return count;
    }

    function length$3(array) {
      return array.length | 0;
    }

    function empty$1(length) {
      return !(length > 0);
    }

    function arrayify(values) {
      return typeof values !== "object" || "length" in values ? values : Array.from(values);
    }

    function reducer(reduce) {
      return values => reduce(...values);
    }

    function cross$1(...values) {
      const reduce = typeof values[values.length - 1] === "function" && reducer(values.pop());
      values = values.map(arrayify);
      const lengths = values.map(length$3);
      const j = values.length - 1;
      const index = new Array(j + 1).fill(0);
      const product = [];
      if (j < 0 || lengths.some(empty$1)) return product;
      while (true) {
        product.push(index.map((j, i) => values[i][j]));
        let i = j;
        while (++index[i] === lengths[i]) {
          if (i === 0) return reduce ? product.map(reduce) : product;
          index[i--] = 0;
        }
      }
    }

    function cumsum(values, valueof) {
      var sum = 0, index = 0;
      return Float64Array.from(values, valueof === undefined
        ? v => (sum += +v || 0)
        : v => (sum += +valueof(v, index++, values) || 0));
    }

    function descending(a, b) {
      return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
    }

    function variance(values, valueof) {
      let count = 0;
      let delta;
      let mean = 0;
      let sum = 0;
      if (valueof === undefined) {
        for (let value of values) {
          if (value != null && (value = +value) >= value) {
            delta = value - mean;
            mean += delta / ++count;
            sum += delta * (value - mean);
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
            delta = value - mean;
            mean += delta / ++count;
            sum += delta * (value - mean);
          }
        }
      }
      if (count > 1) return sum / (count - 1);
    }

    function deviation(values, valueof) {
      const v = variance(values, valueof);
      return v ? Math.sqrt(v) : v;
    }

    function extent(values, valueof) {
      let min;
      let max;
      if (valueof === undefined) {
        for (const value of values) {
          if (value != null) {
            if (min === undefined) {
              if (value >= value) min = max = value;
            } else {
              if (min > value) min = value;
              if (max < value) max = value;
            }
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null) {
            if (min === undefined) {
              if (value >= value) min = max = value;
            } else {
              if (min > value) min = value;
              if (max < value) max = value;
            }
          }
        }
      }
      return [min, max];
    }

    // https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423
    class Adder {
      constructor() {
        this._partials = new Float64Array(32);
        this._n = 0;
      }
      add(x) {
        const p = this._partials;
        let i = 0;
        for (let j = 0; j < this._n && j < 32; j++) {
          const y = p[j],
            hi = x + y,
            lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);
          if (lo) p[i++] = lo;
          x = hi;
        }
        p[i] = x;
        this._n = i + 1;
        return this;
      }
      valueOf() {
        const p = this._partials;
        let n = this._n, x, y, lo, hi = 0;
        if (n > 0) {
          hi = p[--n];
          while (n > 0) {
            x = hi;
            y = p[--n];
            hi = x + y;
            lo = y - (hi - x);
            if (lo) break;
          }
          if (n > 0 && ((lo < 0 && p[n - 1] < 0) || (lo > 0 && p[n - 1] > 0))) {
            y = lo * 2;
            x = hi + y;
            if (y == x - hi) hi = x;
          }
        }
        return hi;
      }
    }

    function fsum(values, valueof) {
      const adder = new Adder();
      if (valueof === undefined) {
        for (let value of values) {
          if (value = +value) {
            adder.add(value);
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if (value = +valueof(value, ++index, values)) {
            adder.add(value);
          }
        }
      }
      return +adder;
    }

    function identity$2(x) {
      return x;
    }

    function group(values, ...keys) {
      return nest(values, identity$2, identity$2, keys);
    }

    function groups(values, ...keys) {
      return nest(values, Array.from, identity$2, keys);
    }

    function rollup(values, reduce, ...keys) {
      return nest(values, identity$2, reduce, keys);
    }

    function rollups(values, reduce, ...keys) {
      return nest(values, Array.from, reduce, keys);
    }

    function index$1(values, ...keys) {
      return nest(values, identity$2, unique, keys);
    }

    function indexes(values, ...keys) {
      return nest(values, Array.from, unique, keys);
    }

    function unique(values) {
      if (values.length !== 1) throw new Error("duplicate key");
      return values[0];
    }

    function nest(values, map, reduce, keys) {
      return (function regroup(values, i) {
        if (i >= keys.length) return reduce(values);
        const groups = new Map();
        const keyof = keys[i++];
        let index = -1;
        for (const value of values) {
          const key = keyof(value, ++index, values);
          const group = groups.get(key);
          if (group) group.push(value);
          else groups.set(key, [value]);
        }
        for (const [key, values] of groups) {
          groups.set(key, regroup(values, i));
        }
        return map(groups);
      })(values, 0);
    }

    var array = Array.prototype;

    var slice = array.slice;

    function constant(x) {
      return function() {
        return x;
      };
    }

    var e10 = Math.sqrt(50),
        e5 = Math.sqrt(10),
        e2 = Math.sqrt(2);

    function ticks(start, stop, count) {
      var reverse,
          i = -1,
          n,
          ticks,
          step;

      stop = +stop, start = +start, count = +count;
      if (start === stop && count > 0) return [start];
      if (reverse = stop < start) n = start, start = stop, stop = n;
      if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

      if (step > 0) {
        start = Math.ceil(start / step);
        stop = Math.floor(stop / step);
        ticks = new Array(n = Math.ceil(stop - start + 1));
        while (++i < n) ticks[i] = (start + i) * step;
      } else {
        step = -step;
        start = Math.ceil(start * step);
        stop = Math.floor(stop * step);
        ticks = new Array(n = Math.ceil(stop - start + 1));
        while (++i < n) ticks[i] = (start + i) / step;
      }

      if (reverse) ticks.reverse();

      return ticks;
    }

    function tickIncrement(start, stop, count) {
      var step = (stop - start) / Math.max(0, count),
          power = Math.floor(Math.log(step) / Math.LN10),
          error = step / Math.pow(10, power);
      return power >= 0
          ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
          : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
    }

    function tickStep(start, stop, count) {
      var step0 = Math.abs(stop - start) / Math.max(0, count),
          step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
          error = step0 / step1;
      if (error >= e10) step1 *= 10;
      else if (error >= e5) step1 *= 5;
      else if (error >= e2) step1 *= 2;
      return stop < start ? -step1 : step1;
    }

    function nice(start, stop, count) {
      let prestep;
      while (true) {
        const step = tickIncrement(start, stop, count);
        if (step === prestep || step === 0 || !isFinite(step)) {
          return [start, stop];
        } else if (step > 0) {
          start = Math.floor(start / step) * step;
          stop = Math.ceil(stop / step) * step;
        } else if (step < 0) {
          start = Math.ceil(start * step) / step;
          stop = Math.floor(stop * step) / step;
        }
        prestep = step;
      }
    }

    function thresholdSturges(values) {
      return Math.ceil(Math.log(count(values)) / Math.LN2) + 1;
    }

    function bin() {
      var value = identity$2,
          domain = extent,
          threshold = thresholdSturges;

      function histogram(data) {
        if (!Array.isArray(data)) data = Array.from(data);

        var i,
            n = data.length,
            x,
            values = new Array(n);

        for (i = 0; i < n; ++i) {
          values[i] = value(data[i], i, data);
        }

        var xz = domain(values),
            x0 = xz[0],
            x1 = xz[1],
            tz = threshold(values, x0, x1);

        // Convert number of thresholds into uniform thresholds,
        // and nice the default domain accordingly.
        if (!Array.isArray(tz)) {
          tz = +tz;
          if (domain === extent) [x0, x1] = nice(x0, x1, tz);
          tz = ticks(x0, x1, tz);
          if (tz[tz.length - 1] === x1) tz.pop(); // exclusive
        }

        // Remove any thresholds outside the domain.
        var m = tz.length;
        while (tz[0] <= x0) tz.shift(), --m;
        while (tz[m - 1] > x1) tz.pop(), --m;

        var bins = new Array(m + 1),
            bin;

        // Initialize bins.
        for (i = 0; i <= m; ++i) {
          bin = bins[i] = [];
          bin.x0 = i > 0 ? tz[i - 1] : x0;
          bin.x1 = i < m ? tz[i] : x1;
        }

        // Assign data to bins by value, ignoring any outside the domain.
        for (i = 0; i < n; ++i) {
          x = values[i];
          if (x0 <= x && x <= x1) {
            bins[bisectRight(tz, x, 0, m)].push(data[i]);
          }
        }

        return bins;
      }

      histogram.value = function(_) {
        return arguments.length ? (value = typeof _ === "function" ? _ : constant(_), histogram) : value;
      };

      histogram.domain = function(_) {
        return arguments.length ? (domain = typeof _ === "function" ? _ : constant([_[0], _[1]]), histogram) : domain;
      };

      histogram.thresholds = function(_) {
        return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;
      };

      return histogram;
    }

    function max$1(values, valueof) {
      let max;
      if (valueof === undefined) {
        for (const value of values) {
          if (value != null
              && (max < value || (max === undefined && value >= value))) {
            max = value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null
              && (max < value || (max === undefined && value >= value))) {
            max = value;
          }
        }
      }
      return max;
    }

    function min$1(values, valueof) {
      let min;
      if (valueof === undefined) {
        for (const value of values) {
          if (value != null
              && (min > value || (min === undefined && value >= value))) {
            min = value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null
              && (min > value || (min === undefined && value >= value))) {
            min = value;
          }
        }
      }
      return min;
    }

    // Based on https://github.com/mourner/quickselect
    // ISC license, Copyright 2018 Vladimir Agafonkin.
    function quickselect(array, k, left = 0, right = array.length - 1, compare = ascending) {
      while (right > left) {
        if (right - left > 600) {
          const n = right - left + 1;
          const m = k - left + 1;
          const z = Math.log(n);
          const s = 0.5 * Math.exp(2 * z / 3);
          const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
          const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
          const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
          quickselect(array, k, newLeft, newRight, compare);
        }

        const t = array[k];
        let i = left;
        let j = right;

        swap(array, left, k);
        if (compare(array[right], t) > 0) swap(array, left, right);

        while (i < j) {
          swap(array, i, j), ++i, --j;
          while (compare(array[i], t) < 0) ++i;
          while (compare(array[j], t) > 0) --j;
        }

        if (compare(array[left], t) === 0) swap(array, left, j);
        else ++j, swap(array, j, right);

        if (j <= k) left = j + 1;
        if (k <= j) right = j - 1;
      }
      return array;
    }

    function swap(array, i, j) {
      const t = array[i];
      array[i] = array[j];
      array[j] = t;
    }

    function quantile(values, p, valueof) {
      values = Float64Array.from(numbers(values, valueof));
      if (!(n = values.length)) return;
      if ((p = +p) <= 0 || n < 2) return min$1(values);
      if (p >= 1) return max$1(values);
      var n,
          i = (n - 1) * p,
          i0 = Math.floor(i),
          value0 = max$1(quickselect(values, i0).subarray(0, i0 + 1)),
          value1 = min$1(values.subarray(i0 + 1));
      return value0 + (value1 - value0) * (i - i0);
    }

    function quantileSorted(values, p, valueof = number) {
      if (!(n = values.length)) return;
      if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
      if (p >= 1) return +valueof(values[n - 1], n - 1, values);
      var n,
          i = (n - 1) * p,
          i0 = Math.floor(i),
          value0 = +valueof(values[i0], i0, values),
          value1 = +valueof(values[i0 + 1], i0 + 1, values);
      return value0 + (value1 - value0) * (i - i0);
    }

    function freedmanDiaconis(values, min, max) {
      return Math.ceil((max - min) / (2 * (quantile(values, 0.75) - quantile(values, 0.25)) * Math.pow(count(values), -1 / 3)));
    }

    function scott(values, min, max) {
      return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(count(values), -1 / 3)));
    }

    function maxIndex(values, valueof) {
      let max;
      let maxIndex = -1;
      let index = -1;
      if (valueof === undefined) {
        for (const value of values) {
          ++index;
          if (value != null
              && (max < value || (max === undefined && value >= value))) {
            max = value, maxIndex = index;
          }
        }
      } else {
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null
              && (max < value || (max === undefined && value >= value))) {
            max = value, maxIndex = index;
          }
        }
      }
      return maxIndex;
    }

    function mean(values, valueof) {
      let count = 0;
      let sum = 0;
      if (valueof === undefined) {
        for (let value of values) {
          if (value != null && (value = +value) >= value) {
            ++count, sum += value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
            ++count, sum += value;
          }
        }
      }
      if (count) return sum / count;
    }

    function median(values, valueof) {
      return quantile(values, 0.5, valueof);
    }

    function* flatten(arrays) {
      for (const array of arrays) {
        yield* array;
      }
    }

    function merge(arrays) {
      return Array.from(flatten(arrays));
    }

    function minIndex(values, valueof) {
      let min;
      let minIndex = -1;
      let index = -1;
      if (valueof === undefined) {
        for (const value of values) {
          ++index;
          if (value != null
              && (min > value || (min === undefined && value >= value))) {
            min = value, minIndex = index;
          }
        }
      } else {
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null
              && (min > value || (min === undefined && value >= value))) {
            min = value, minIndex = index;
          }
        }
      }
      return minIndex;
    }

    function pairs(values, pairof = pair) {
      const pairs = [];
      let previous;
      let first = false;
      for (const value of values) {
        if (first) pairs.push(pairof(previous, value));
        previous = value;
        first = true;
      }
      return pairs;
    }

    function pair(a, b) {
      return [a, b];
    }

    function permute(source, keys) {
      return Array.from(keys, key => source[key]);
    }

    function sequence(start, stop, step) {
      start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

      var i = -1,
          n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
          range = new Array(n);

      while (++i < n) {
        range[i] = start + i * step;
      }

      return range;
    }

    function least(values, compare = ascending) {
      let min;
      let defined = false;
      if (compare.length === 1) {
        let minValue;
        for (const element of values) {
          const value = compare(element);
          if (defined
              ? ascending(value, minValue) < 0
              : ascending(value, value) === 0) {
            min = element;
            minValue = value;
            defined = true;
          }
        }
      } else {
        for (const value of values) {
          if (defined
              ? compare(value, min) < 0
              : compare(value, value) === 0) {
            min = value;
            defined = true;
          }
        }
      }
      return min;
    }

    function leastIndex(values, compare = ascending) {
      if (compare.length === 1) return minIndex(values, compare);
      let minValue;
      let min = -1;
      let index = -1;
      for (const value of values) {
        ++index;
        if (min < 0
            ? compare(value, value) === 0
            : compare(value, minValue) < 0) {
          minValue = value;
          min = index;
        }
      }
      return min;
    }

    function greatest(values, compare = ascending) {
      let max;
      let defined = false;
      if (compare.length === 1) {
        let maxValue;
        for (const element of values) {
          const value = compare(element);
          if (defined
              ? ascending(value, maxValue) > 0
              : ascending(value, value) === 0) {
            max = element;
            maxValue = value;
            defined = true;
          }
        }
      } else {
        for (const value of values) {
          if (defined
              ? compare(value, max) > 0
              : compare(value, value) === 0) {
            max = value;
            defined = true;
          }
        }
      }
      return max;
    }

    function greatestIndex(values, compare = ascending) {
      if (compare.length === 1) return maxIndex(values, compare);
      let maxValue;
      let max = -1;
      let index = -1;
      for (const value of values) {
        ++index;
        if (max < 0
            ? compare(value, value) === 0
            : compare(value, maxValue) > 0) {
          maxValue = value;
          max = index;
        }
      }
      return max;
    }

    function scan(values, compare) {
      const index = leastIndex(values, compare);
      return index < 0 ? undefined : index;
    }

    var shuffle$1 = shuffler(Math.random);

    function shuffler(random) {
      return function shuffle(array, i0 = 0, i1 = array.length) {
        let m = i1 - (i0 = +i0);
        while (m) {
          const i = random() * m-- | 0, t = array[m + i0];
          array[m + i0] = array[i + i0];
          array[i + i0] = t;
        }
        return array;
      };
    }

    function sum(values, valueof) {
      let sum = 0;
      if (valueof === undefined) {
        for (let value of values) {
          if (value = +value) {
            sum += value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if (value = +valueof(value, ++index, values)) {
            sum += value;
          }
        }
      }
      return sum;
    }

    function transpose$1(matrix) {
      if (!(n = matrix.length)) return [];
      for (var i = -1, m = min$1(matrix, length$4), transpose = new Array(m); ++i < m;) {
        for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
          row[j] = matrix[j][i];
        }
      }
      return transpose;
    }

    function length$4(d) {
      return d.length;
    }

    function zip() {
      return transpose$1(arguments);
    }

    function every(values, test) {
      if (typeof test !== "function") throw new TypeError("test is not a function");
      let index = -1;
      for (const value of values) {
        if (!test(value, ++index, values)) {
          return false;
        }
      }
      return true;
    }

    function some(values, test) {
      if (typeof test !== "function") throw new TypeError("test is not a function");
      let index = -1;
      for (const value of values) {
        if (test(value, ++index, values)) {
          return true;
        }
      }
      return false;
    }

    function filter(values, test) {
      if (typeof test !== "function") throw new TypeError("test is not a function");
      const array = [];
      let index = -1;
      for (const value of values) {
        if (test(value, ++index, values)) {
          array.push(value);
        }
      }
      return array;
    }

    function map(values, mapper) {
      if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
      if (typeof mapper !== "function") throw new TypeError("mapper is not a function");
      return Array.from(values, (value, index) => mapper(value, index, values));
    }

    function reduce(values, reducer, value) {
      if (typeof reducer !== "function") throw new TypeError("reducer is not a function");
      const iterator = values[Symbol.iterator]();
      let done, next, index = -1;
      if (arguments.length < 3) {
        ({done, value} = iterator.next());
        if (done) return;
        ++index;
      }
      while (({done, value: next} = iterator.next()), !done) {
        value = reducer(value, next, ++index, values);
      }
      return value;
    }

    function reverse(values) {
      if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
      return Array.from(values).reverse();
    }

    function sort(values, comparator = ascending) {
      if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
      return Array.from(values).sort(comparator);
    }

    function difference(values, ...others) {
      values = new Set(values);
      for (const other of others) {
        for (const value of other) {
          values.delete(value);
        }
      }
      return values;
    }

    function disjoint(values, other) {
      const iterator = other[Symbol.iterator](), set = new Set();
      for (const v of values) {
        if (set.has(v)) return false;
        let value, done;
        while (({value, done} = iterator.next())) {
          if (done) break;
          if (Object.is(v, value)) return false;
          set.add(value);
        }
      }
      return true;
    }

    function set$4(values) {
      return values instanceof Set ? values : new Set(values);
    }

    function intersection(values, ...others) {
      values = new Set(values);
      others = others.map(set$4);
      out: for (const value of values) {
        for (const other of others) {
          if (!other.has(value)) {
            values.delete(value);
            continue out;
          }
        }
      }
      return values;
    }

    function superset(values, other) {
      const iterator = values[Symbol.iterator](), set = new Set();
      for (const o of other) {
        if (set.has(o)) continue;
        let value, done;
        while (({value, done} = iterator.next())) {
          if (done) return false;
          set.add(value);
          if (Object.is(o, value)) break;
        }
      }
      return true;
    }

    function subset(values, other) {
      return superset(other, values);
    }

    function union(...others) {
      const set = new Set();
      for (const other of others) {
        for (const o of other) {
          set.add(o);
        }
      }
      return set;
    }

    var slice$1 = Array.prototype.slice;

    function identity$3(x) {
      return x;
    }

    var top = 1,
        right = 2,
        bottom = 3,
        left = 4,
        epsilon = 1e-6;

    function translateX(x) {
      return "translate(" + (x + 0.5) + ",0)";
    }

    function translateY(y) {
      return "translate(0," + (y + 0.5) + ")";
    }

    function number$1(scale) {
      return d => +scale(d);
    }

    function center(scale) {
      var offset = Math.max(0, scale.bandwidth() - 1) / 2; // Adjust for 0.5px offset.
      if (scale.round()) offset = Math.round(offset);
      return function(d) {
        return +scale(d) + offset;
      };
    }

    function entering() {
      return !this.__axis;
    }

    function axis(orient, scale) {
      var tickArguments = [],
          tickValues = null,
          tickFormat = null,
          tickSizeInner = 6,
          tickSizeOuter = 6,
          tickPadding = 3,
          k = orient === top || orient === left ? -1 : 1,
          x = orient === left || orient === right ? "x" : "y",
          transform = orient === top || orient === bottom ? translateX : translateY;

      function axis(context) {
        var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,
            format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$3) : tickFormat,
            spacing = Math.max(tickSizeInner, 0) + tickPadding,
            range = scale.range(),
            range0 = +range[0] + 0.5,
            range1 = +range[range.length - 1] + 0.5,
            position = (scale.bandwidth ? center : number$1)(scale.copy()),
            selection = context.selection ? context.selection() : context,
            path = selection.selectAll(".domain").data([null]),
            tick = selection.selectAll(".tick").data(values, scale).order(),
            tickExit = tick.exit(),
            tickEnter = tick.enter().append("g").attr("class", "tick"),
            line = tick.select("line"),
            text = tick.select("text");

        path = path.merge(path.enter().insert("path", ".tick")
            .attr("class", "domain")
            .attr("stroke", "currentColor"));

        tick = tick.merge(tickEnter);

        line = line.merge(tickEnter.append("line")
            .attr("stroke", "currentColor")
            .attr(x + "2", k * tickSizeInner));

        text = text.merge(tickEnter.append("text")
            .attr("fill", "currentColor")
            .attr(x, k * spacing)
            .attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));

        if (context !== selection) {
          path = path.transition(context);
          tick = tick.transition(context);
          line = line.transition(context);
          text = text.transition(context);

          tickExit = tickExit.transition(context)
              .attr("opacity", epsilon)
              .attr("transform", function(d) { return isFinite(d = position(d)) ? transform(d) : this.getAttribute("transform"); });

          tickEnter
              .attr("opacity", epsilon)
              .attr("transform", function(d) { var p = this.parentNode.__axis; return transform(p && isFinite(p = p(d)) ? p : position(d)); });
        }

        tickExit.remove();

        path
            .attr("d", orient === left || orient == right
                ? (tickSizeOuter ? "M" + k * tickSizeOuter + "," + range0 + "H0.5V" + range1 + "H" + k * tickSizeOuter : "M0.5," + range0 + "V" + range1)
                : (tickSizeOuter ? "M" + range0 + "," + k * tickSizeOuter + "V0.5H" + range1 + "V" + k * tickSizeOuter : "M" + range0 + ",0.5H" + range1));

        tick
            .attr("opacity", 1)
            .attr("transform", function(d) { return transform(position(d)); });

        line
            .attr(x + "2", k * tickSizeInner);

        text
            .attr(x, k * spacing)
            .text(format);

        selection.filter(entering)
            .attr("fill", "none")
            .attr("font-size", 10)
            .attr("font-family", "sans-serif")
            .attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");

        selection
            .each(function() { this.__axis = position; });
      }

      axis.scale = function(_) {
        return arguments.length ? (scale = _, axis) : scale;
      };

      axis.ticks = function() {
        return tickArguments = slice$1.call(arguments), axis;
      };

      axis.tickArguments = function(_) {
        return arguments.length ? (tickArguments = _ == null ? [] : slice$1.call(_), axis) : tickArguments.slice();
      };

      axis.tickValues = function(_) {
        return arguments.length ? (tickValues = _ == null ? null : slice$1.call(_), axis) : tickValues && tickValues.slice();
      };

      axis.tickFormat = function(_) {
        return arguments.length ? (tickFormat = _, axis) : tickFormat;
      };

      axis.tickSize = function(_) {
        return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
      };

      axis.tickSizeInner = function(_) {
        return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
      };

      axis.tickSizeOuter = function(_) {
        return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
      };

      axis.tickPadding = function(_) {
        return arguments.length ? (tickPadding = +_, axis) : tickPadding;
      };

      return axis;
    }

    function axisTop(scale) {
      return axis(top, scale);
    }

    function axisRight(scale) {
      return axis(right, scale);
    }

    function axisBottom(scale) {
      return axis(bottom, scale);
    }

    function axisLeft(scale) {
      return axis(left, scale);
    }

    var noop$1 = {value: () => {}};

    function dispatch() {
      for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
        if (!(t = arguments[i] + "") || (t in _) || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
        _[t] = [];
      }
      return new Dispatch(_);
    }

    function Dispatch(_) {
      this._ = _;
    }

    function parseTypenames(typenames, types) {
      return typenames.trim().split(/^|\s+/).map(function(t) {
        var name = "", i = t.indexOf(".");
        if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
        if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
        return {type: t, name: name};
      });
    }

    Dispatch.prototype = dispatch.prototype = {
      constructor: Dispatch,
      on: function(typename, callback) {
        var _ = this._,
            T = parseTypenames(typename + "", _),
            t,
            i = -1,
            n = T.length;

        // If no callback was specified, return the callback of the given type and name.
        if (arguments.length < 2) {
          while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
          return;
        }

        // If a type was specified, set the callback for the given type and name.
        // Otherwise, if a null callback was specified, remove callbacks of the given name.
        if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
        while (++i < n) {
          if (t = (typename = T[i]).type) _[t] = set$5(_[t], typename.name, callback);
          else if (callback == null) for (t in _) _[t] = set$5(_[t], typename.name, null);
        }

        return this;
      },
      copy: function() {
        var copy = {}, _ = this._;
        for (var t in _) copy[t] = _[t].slice();
        return new Dispatch(copy);
      },
      call: function(type, that) {
        if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
        if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
        for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
      },
      apply: function(type, that, args) {
        if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
        for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
      }
    };

    function get(type, name) {
      for (var i = 0, n = type.length, c; i < n; ++i) {
        if ((c = type[i]).name === name) {
          return c.value;
        }
      }
    }

    function set$5(type, name, callback) {
      for (var i = 0, n = type.length; i < n; ++i) {
        if (type[i].name === name) {
          type[i] = noop$1, type = type.slice(0, i).concat(type.slice(i + 1));
          break;
        }
      }
      if (callback != null) type.push({name: name, value: callback});
      return type;
    }

    var xhtml = "http://www.w3.org/1999/xhtml";

    var namespaces = {
      svg: "http://www.w3.org/2000/svg",
      xhtml: xhtml,
      xlink: "http://www.w3.org/1999/xlink",
      xml: "http://www.w3.org/XML/1998/namespace",
      xmlns: "http://www.w3.org/2000/xmlns/"
    };

    function namespace(name) {
      var prefix = name += "", i = prefix.indexOf(":");
      if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
      return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name; // eslint-disable-line no-prototype-builtins
    }

    function creatorInherit(name) {
      return function() {
        var document = this.ownerDocument,
            uri = this.namespaceURI;
        return uri === xhtml && document.documentElement.namespaceURI === xhtml
            ? document.createElement(name)
            : document.createElementNS(uri, name);
      };
    }

    function creatorFixed(fullname) {
      return function() {
        return this.ownerDocument.createElementNS(fullname.space, fullname.local);
      };
    }

    function creator(name) {
      var fullname = namespace(name);
      return (fullname.local
          ? creatorFixed
          : creatorInherit)(fullname);
    }

    function none() {}

    function selector(selector) {
      return selector == null ? none : function() {
        return this.querySelector(selector);
      };
    }

    function selection_select(select) {
      if (typeof select !== "function") select = selector(select);

      for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
          if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
            if ("__data__" in node) subnode.__data__ = node.__data__;
            subgroup[i] = subnode;
          }
        }
      }

      return new Selection(subgroups, this._parents);
    }

    function array$1(x) {
      return typeof x === "object" && "length" in x
        ? x // Array, TypedArray, NodeList, array-like
        : Array.from(x); // Map, Set, iterable, string, or anything else
    }

    function empty$2() {
      return [];
    }

    function selectorAll(selector) {
      return selector == null ? empty$2 : function() {
        return this.querySelectorAll(selector);
      };
    }

    function arrayAll(select) {
      return function() {
        var group = select.apply(this, arguments);
        return group == null ? [] : array$1(group);
      };
    }

    function selection_selectAll(select) {
      if (typeof select === "function") select = arrayAll(select);
      else select = selectorAll(select);

      for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            subgroups.push(select.call(node, node.__data__, i, group));
            parents.push(node);
          }
        }
      }

      return new Selection(subgroups, parents);
    }

    function matcher(selector) {
      return function() {
        return this.matches(selector);
      };
    }

    function childMatcher(selector) {
      return function(node) {
        return node.matches(selector);
      };
    }

    var find = Array.prototype.find;

    function childFind(match) {
      return function() {
        return find.call(this.children, match);
      };
    }

    function childFirst() {
      return this.firstElementChild;
    }

    function selection_selectChild(match) {
      return this.select(match == null ? childFirst
          : childFind(typeof match === "function" ? match : childMatcher(match)));
    }

    var filter$1 = Array.prototype.filter;

    function children$1() {
      return this.children;
    }

    function childrenFilter(match) {
      return function() {
        return filter$1.call(this.children, match);
      };
    }

    function selection_selectChildren(match) {
      return this.selectAll(match == null ? children$1
          : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
    }

    function selection_filter(match) {
      if (typeof match !== "function") match = matcher(match);

      for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
          if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
            subgroup.push(node);
          }
        }
      }

      return new Selection(subgroups, this._parents);
    }

    function sparse(update) {
      return new Array(update.length);
    }

    function selection_enter() {
      return new Selection(this._enter || this._groups.map(sparse), this._parents);
    }

    function EnterNode(parent, datum) {
      this.ownerDocument = parent.ownerDocument;
      this.namespaceURI = parent.namespaceURI;
      this._next = null;
      this._parent = parent;
      this.__data__ = datum;
    }

    EnterNode.prototype = {
      constructor: EnterNode,
      appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
      insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
      querySelector: function(selector) { return this._parent.querySelector(selector); },
      querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
    };

    function constant$1(x) {
      return function() {
        return x;
      };
    }

    function bindIndex(parent, group, enter, update, exit, data) {
      var i = 0,
          node,
          groupLength = group.length,
          dataLength = data.length;

      // Put any non-null nodes that fit into update.
      // Put any null nodes into enter.
      // Put any remaining data into enter.
      for (; i < dataLength; ++i) {
        if (node = group[i]) {
          node.__data__ = data[i];
          update[i] = node;
        } else {
          enter[i] = new EnterNode(parent, data[i]);
        }
      }

      // Put any non-null nodes that don’t fit into exit.
      for (; i < groupLength; ++i) {
        if (node = group[i]) {
          exit[i] = node;
        }
      }
    }

    function bindKey(parent, group, enter, update, exit, data, key) {
      var i,
          node,
          nodeByKeyValue = new Map,
          groupLength = group.length,
          dataLength = data.length,
          keyValues = new Array(groupLength),
          keyValue;

      // Compute the key for each node.
      // If multiple nodes have the same key, the duplicates are added to exit.
      for (i = 0; i < groupLength; ++i) {
        if (node = group[i]) {
          keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";
          if (nodeByKeyValue.has(keyValue)) {
            exit[i] = node;
          } else {
            nodeByKeyValue.set(keyValue, node);
          }
        }
      }

      // Compute the key for each datum.
      // If there a node associated with this key, join and add it to update.
      // If there is not (or the key is a duplicate), add it to enter.
      for (i = 0; i < dataLength; ++i) {
        keyValue = key.call(parent, data[i], i, data) + "";
        if (node = nodeByKeyValue.get(keyValue)) {
          update[i] = node;
          node.__data__ = data[i];
          nodeByKeyValue.delete(keyValue);
        } else {
          enter[i] = new EnterNode(parent, data[i]);
        }
      }

      // Add any remaining nodes that were not bound to data to exit.
      for (i = 0; i < groupLength; ++i) {
        if ((node = group[i]) && (nodeByKeyValue.get(keyValues[i]) === node)) {
          exit[i] = node;
        }
      }
    }

    function datum(node) {
      return node.__data__;
    }

    function selection_data(value, key) {
      if (!arguments.length) return Array.from(this, datum);

      var bind = key ? bindKey : bindIndex,
          parents = this._parents,
          groups = this._groups;

      if (typeof value !== "function") value = constant$1(value);

      for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
        var parent = parents[j],
            group = groups[j],
            groupLength = group.length,
            data = array$1(value.call(parent, parent && parent.__data__, j, parents)),
            dataLength = data.length,
            enterGroup = enter[j] = new Array(dataLength),
            updateGroup = update[j] = new Array(dataLength),
            exitGroup = exit[j] = new Array(groupLength);

        bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

        // Now connect the enter nodes to their following update node, such that
        // appendChild can insert the materialized enter node before this node,
        // rather than at the end of the parent node.
        for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
          if (previous = enterGroup[i0]) {
            if (i0 >= i1) i1 = i0 + 1;
            while (!(next = updateGroup[i1]) && ++i1 < dataLength);
            previous._next = next || null;
          }
        }
      }

      update = new Selection(update, parents);
      update._enter = enter;
      update._exit = exit;
      return update;
    }

    function selection_exit() {
      return new Selection(this._exit || this._groups.map(sparse), this._parents);
    }

    function selection_join(onenter, onupdate, onexit) {
      var enter = this.enter(), update = this, exit = this.exit();
      enter = typeof onenter === "function" ? onenter(enter) : enter.append(onenter + "");
      if (onupdate != null) update = onupdate(update);
      if (onexit == null) exit.remove(); else onexit(exit);
      return enter && update ? enter.merge(update).order() : update;
    }

    function selection_merge(selection) {
      if (!(selection instanceof Selection)) throw new Error("invalid merge");

      for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
        for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
          if (node = group0[i] || group1[i]) {
            merge[i] = node;
          }
        }
      }

      for (; j < m0; ++j) {
        merges[j] = groups0[j];
      }

      return new Selection(merges, this._parents);
    }

    function selection_order() {

      for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
        for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
          if (node = group[i]) {
            if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
            next = node;
          }
        }
      }

      return this;
    }

    function selection_sort(compare) {
      if (!compare) compare = ascending$1;

      function compareNode(a, b) {
        return a && b ? compare(a.__data__, b.__data__) : !a - !b;
      }

      for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            sortgroup[i] = node;
          }
        }
        sortgroup.sort(compareNode);
      }

      return new Selection(sortgroups, this._parents).order();
    }

    function ascending$1(a, b) {
      return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }

    function selection_call() {
      var callback = arguments[0];
      arguments[0] = this;
      callback.apply(null, arguments);
      return this;
    }

    function selection_nodes() {
      return Array.from(this);
    }

    function selection_node() {

      for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
        for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
          var node = group[i];
          if (node) return node;
        }
      }

      return null;
    }

    function selection_size() {
      let size = 0;
      for (const node of this) ++size; // eslint-disable-line no-unused-vars
      return size;
    }

    function selection_empty() {
      return !this.node();
    }

    function selection_each(callback) {

      for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
        for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
          if (node = group[i]) callback.call(node, node.__data__, i, group);
        }
      }

      return this;
    }

    function attrRemove(name) {
      return function() {
        this.removeAttribute(name);
      };
    }

    function attrRemoveNS(fullname) {
      return function() {
        this.removeAttributeNS(fullname.space, fullname.local);
      };
    }

    function attrConstant(name, value) {
      return function() {
        this.setAttribute(name, value);
      };
    }

    function attrConstantNS(fullname, value) {
      return function() {
        this.setAttributeNS(fullname.space, fullname.local, value);
      };
    }

    function attrFunction(name, value) {
      return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.removeAttribute(name);
        else this.setAttribute(name, v);
      };
    }

    function attrFunctionNS(fullname, value) {
      return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
        else this.setAttributeNS(fullname.space, fullname.local, v);
      };
    }

    function selection_attr(name, value) {
      var fullname = namespace(name);

      if (arguments.length < 2) {
        var node = this.node();
        return fullname.local
            ? node.getAttributeNS(fullname.space, fullname.local)
            : node.getAttribute(fullname);
      }

      return this.each((value == null
          ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === "function"
          ? (fullname.local ? attrFunctionNS : attrFunction)
          : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));
    }

    function defaultView(node) {
      return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
          || (node.document && node) // node is a Window
          || node.defaultView; // node is a Document
    }

    function styleRemove(name) {
      return function() {
        this.style.removeProperty(name);
      };
    }

    function styleConstant(name, value, priority) {
      return function() {
        this.style.setProperty(name, value, priority);
      };
    }

    function styleFunction(name, value, priority) {
      return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.style.removeProperty(name);
        else this.style.setProperty(name, v, priority);
      };
    }

    function selection_style(name, value, priority) {
      return arguments.length > 1
          ? this.each((value == null
                ? styleRemove : typeof value === "function"
                ? styleFunction
                : styleConstant)(name, value, priority == null ? "" : priority))
          : styleValue(this.node(), name);
    }

    function styleValue(node, name) {
      return node.style.getPropertyValue(name)
          || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);
    }

    function propertyRemove(name) {
      return function() {
        delete this[name];
      };
    }

    function propertyConstant(name, value) {
      return function() {
        this[name] = value;
      };
    }

    function propertyFunction(name, value) {
      return function() {
        var v = value.apply(this, arguments);
        if (v == null) delete this[name];
        else this[name] = v;
      };
    }

    function selection_property(name, value) {
      return arguments.length > 1
          ? this.each((value == null
              ? propertyRemove : typeof value === "function"
              ? propertyFunction
              : propertyConstant)(name, value))
          : this.node()[name];
    }

    function classArray(string) {
      return string.trim().split(/^|\s+/);
    }

    function classList(node) {
      return node.classList || new ClassList(node);
    }

    function ClassList(node) {
      this._node = node;
      this._names = classArray(node.getAttribute("class") || "");
    }

    ClassList.prototype = {
      add: function(name) {
        var i = this._names.indexOf(name);
        if (i < 0) {
          this._names.push(name);
          this._node.setAttribute("class", this._names.join(" "));
        }
      },
      remove: function(name) {
        var i = this._names.indexOf(name);
        if (i >= 0) {
          this._names.splice(i, 1);
          this._node.setAttribute("class", this._names.join(" "));
        }
      },
      contains: function(name) {
        return this._names.indexOf(name) >= 0;
      }
    };

    function classedAdd(node, names) {
      var list = classList(node), i = -1, n = names.length;
      while (++i < n) list.add(names[i]);
    }

    function classedRemove(node, names) {
      var list = classList(node), i = -1, n = names.length;
      while (++i < n) list.remove(names[i]);
    }

    function classedTrue(names) {
      return function() {
        classedAdd(this, names);
      };
    }

    function classedFalse(names) {
      return function() {
        classedRemove(this, names);
      };
    }

    function classedFunction(names, value) {
      return function() {
        (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
      };
    }

    function selection_classed(name, value) {
      var names = classArray(name + "");

      if (arguments.length < 2) {
        var list = classList(this.node()), i = -1, n = names.length;
        while (++i < n) if (!list.contains(names[i])) return false;
        return true;
      }

      return this.each((typeof value === "function"
          ? classedFunction : value
          ? classedTrue
          : classedFalse)(names, value));
    }

    function textRemove() {
      this.textContent = "";
    }

    function textConstant(value) {
      return function() {
        this.textContent = value;
      };
    }

    function textFunction(value) {
      return function() {
        var v = value.apply(this, arguments);
        this.textContent = v == null ? "" : v;
      };
    }

    function selection_text(value) {
      return arguments.length
          ? this.each(value == null
              ? textRemove : (typeof value === "function"
              ? textFunction
              : textConstant)(value))
          : this.node().textContent;
    }

    function htmlRemove() {
      this.innerHTML = "";
    }

    function htmlConstant(value) {
      return function() {
        this.innerHTML = value;
      };
    }

    function htmlFunction(value) {
      return function() {
        var v = value.apply(this, arguments);
        this.innerHTML = v == null ? "" : v;
      };
    }

    function selection_html(value) {
      return arguments.length
          ? this.each(value == null
              ? htmlRemove : (typeof value === "function"
              ? htmlFunction
              : htmlConstant)(value))
          : this.node().innerHTML;
    }

    function raise() {
      if (this.nextSibling) this.parentNode.appendChild(this);
    }

    function selection_raise() {
      return this.each(raise);
    }

    function lower() {
      if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
    }

    function selection_lower() {
      return this.each(lower);
    }

    function selection_append(name) {
      var create = typeof name === "function" ? name : creator(name);
      return this.select(function() {
        return this.appendChild(create.apply(this, arguments));
      });
    }

    function constantNull() {
      return null;
    }

    function selection_insert(name, before) {
      var create = typeof name === "function" ? name : creator(name),
          select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
      return this.select(function() {
        return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
      });
    }

    function remove() {
      var parent = this.parentNode;
      if (parent) parent.removeChild(this);
    }

    function selection_remove() {
      return this.each(remove);
    }

    function selection_cloneShallow() {
      var clone = this.cloneNode(false), parent = this.parentNode;
      return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
    }

    function selection_cloneDeep() {
      var clone = this.cloneNode(true), parent = this.parentNode;
      return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
    }

    function selection_clone(deep) {
      return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
    }

    function selection_datum(value) {
      return arguments.length
          ? this.property("__data__", value)
          : this.node().__data__;
    }

    function contextListener(listener) {
      return function(event) {
        listener.call(this, event, this.__data__);
      };
    }

    function parseTypenames$1(typenames) {
      return typenames.trim().split(/^|\s+/).map(function(t) {
        var name = "", i = t.indexOf(".");
        if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
        return {type: t, name: name};
      });
    }

    function onRemove(typename) {
      return function() {
        var on = this.__on;
        if (!on) return;
        for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
          if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
            this.removeEventListener(o.type, o.listener, o.options);
          } else {
            on[++i] = o;
          }
        }
        if (++i) on.length = i;
        else delete this.__on;
      };
    }

    function onAdd(typename, value, options) {
      return function() {
        var on = this.__on, o, listener = contextListener(value);
        if (on) for (var j = 0, m = on.length; j < m; ++j) {
          if ((o = on[j]).type === typename.type && o.name === typename.name) {
            this.removeEventListener(o.type, o.listener, o.options);
            this.addEventListener(o.type, o.listener = listener, o.options = options);
            o.value = value;
            return;
          }
        }
        this.addEventListener(typename.type, listener, options);
        o = {type: typename.type, name: typename.name, value: value, listener: listener, options: options};
        if (!on) this.__on = [o];
        else on.push(o);
      };
    }

    function selection_on(typename, value, options) {
      var typenames = parseTypenames$1(typename + ""), i, n = typenames.length, t;

      if (arguments.length < 2) {
        var on = this.node().__on;
        if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
          for (i = 0, o = on[j]; i < n; ++i) {
            if ((t = typenames[i]).type === o.type && t.name === o.name) {
              return o.value;
            }
          }
        }
        return;
      }

      on = value ? onAdd : onRemove;
      for (i = 0; i < n; ++i) this.each(on(typenames[i], value, options));
      return this;
    }

    function dispatchEvent(node, type, params) {
      var window = defaultView(node),
          event = window.CustomEvent;

      if (typeof event === "function") {
        event = new event(type, params);
      } else {
        event = window.document.createEvent("Event");
        if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
        else event.initEvent(type, false, false);
      }

      node.dispatchEvent(event);
    }

    function dispatchConstant(type, params) {
      return function() {
        return dispatchEvent(this, type, params);
      };
    }

    function dispatchFunction(type, params) {
      return function() {
        return dispatchEvent(this, type, params.apply(this, arguments));
      };
    }

    function selection_dispatch(type, params) {
      return this.each((typeof params === "function"
          ? dispatchFunction
          : dispatchConstant)(type, params));
    }

    function* selection_iterator() {
      for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
        for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
          if (node = group[i]) yield node;
        }
      }
    }

    var root = [null];

    function Selection(groups, parents) {
      this._groups = groups;
      this._parents = parents;
    }

    function selection() {
      return new Selection([[document.documentElement]], root);
    }

    function selection_selection() {
      return this;
    }

    Selection.prototype = selection.prototype = {
      constructor: Selection,
      select: selection_select,
      selectAll: selection_selectAll,
      selectChild: selection_selectChild,
      selectChildren: selection_selectChildren,
      filter: selection_filter,
      data: selection_data,
      enter: selection_enter,
      exit: selection_exit,
      join: selection_join,
      merge: selection_merge,
      selection: selection_selection,
      order: selection_order,
      sort: selection_sort,
      call: selection_call,
      nodes: selection_nodes,
      node: selection_node,
      size: selection_size,
      empty: selection_empty,
      each: selection_each,
      attr: selection_attr,
      style: selection_style,
      property: selection_property,
      classed: selection_classed,
      text: selection_text,
      html: selection_html,
      raise: selection_raise,
      lower: selection_lower,
      append: selection_append,
      insert: selection_insert,
      remove: selection_remove,
      clone: selection_clone,
      datum: selection_datum,
      on: selection_on,
      dispatch: selection_dispatch,
      [Symbol.iterator]: selection_iterator
    };

    function select(selector) {
      return typeof selector === "string"
          ? new Selection([[document.querySelector(selector)]], [document.documentElement])
          : new Selection([[selector]], root);
    }

    function create$5(name) {
      return select(creator(name).call(document.documentElement));
    }

    var nextId = 0;

    function local() {
      return new Local;
    }

    function Local() {
      this._ = "@" + (++nextId).toString(36);
    }

    Local.prototype = local.prototype = {
      constructor: Local,
      get: function(node) {
        var id = this._;
        while (!(id in node)) if (!(node = node.parentNode)) return;
        return node[id];
      },
      set: function(node, value) {
        return node[this._] = value;
      },
      remove: function(node) {
        return this._ in node && delete node[this._];
      },
      toString: function() {
        return this._;
      }
    };

    function sourceEvent(event) {
      let sourceEvent;
      while (sourceEvent = event.sourceEvent) event = sourceEvent;
      return event;
    }

    function pointer(event, node) {
      event = sourceEvent(event);
      if (node === undefined) node = event.currentTarget;
      if (node) {
        var svg = node.ownerSVGElement || node;
        if (svg.createSVGPoint) {
          var point = svg.createSVGPoint();
          point.x = event.clientX, point.y = event.clientY;
          point = point.matrixTransform(node.getScreenCTM().inverse());
          return [point.x, point.y];
        }
        if (node.getBoundingClientRect) {
          var rect = node.getBoundingClientRect();
          return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
        }
      }
      return [event.pageX, event.pageY];
    }

    function pointers(events, node) {
      if (events.target) { // i.e., instanceof Event, not TouchList or iterable
        events = sourceEvent(events);
        if (node === undefined) node = events.currentTarget;
        events = events.touches || [events];
      }
      return Array.from(events, event => pointer(event, node));
    }

    function selectAll(selector) {
      return typeof selector === "string"
          ? new Selection([document.querySelectorAll(selector)], [document.documentElement])
          : new Selection([selector == null ? [] : array$1(selector)], root);
    }

    function nopropagation(event) {
      event.stopImmediatePropagation();
    }

    function noevent(event) {
      event.preventDefault();
      event.stopImmediatePropagation();
    }

    function dragDisable(view) {
      var root = view.document.documentElement,
          selection = select(view).on("dragstart.drag", noevent, true);
      if ("onselectstart" in root) {
        selection.on("selectstart.drag", noevent, true);
      } else {
        root.__noselect = root.style.MozUserSelect;
        root.style.MozUserSelect = "none";
      }
    }

    function yesdrag(view, noclick) {
      var root = view.document.documentElement,
          selection = select(view).on("dragstart.drag", null);
      if (noclick) {
        selection.on("click.drag", noevent, true);
        setTimeout(function() { selection.on("click.drag", null); }, 0);
      }
      if ("onselectstart" in root) {
        selection.on("selectstart.drag", null);
      } else {
        root.style.MozUserSelect = root.__noselect;
        delete root.__noselect;
      }
    }

    var constant$2 = x => () => x;

    function DragEvent(type, {
      sourceEvent,
      subject,
      target,
      identifier,
      active,
      x, y, dx, dy,
      dispatch
    }) {
      Object.defineProperties(this, {
        type: {value: type, enumerable: true, configurable: true},
        sourceEvent: {value: sourceEvent, enumerable: true, configurable: true},
        subject: {value: subject, enumerable: true, configurable: true},
        target: {value: target, enumerable: true, configurable: true},
        identifier: {value: identifier, enumerable: true, configurable: true},
        active: {value: active, enumerable: true, configurable: true},
        x: {value: x, enumerable: true, configurable: true},
        y: {value: y, enumerable: true, configurable: true},
        dx: {value: dx, enumerable: true, configurable: true},
        dy: {value: dy, enumerable: true, configurable: true},
        _: {value: dispatch}
      });
    }

    DragEvent.prototype.on = function() {
      var value = this._.on.apply(this._, arguments);
      return value === this._ ? this : value;
    };

    // Ignore right-click, since that should open the context menu.
    function defaultFilter(event) {
      return !event.ctrlKey && !event.button;
    }

    function defaultContainer() {
      return this.parentNode;
    }

    function defaultSubject(event, d) {
      return d == null ? {x: event.x, y: event.y} : d;
    }

    function defaultTouchable() {
      return navigator.maxTouchPoints || ("ontouchstart" in this);
    }

    function drag() {
      var filter = defaultFilter,
          container = defaultContainer,
          subject = defaultSubject,
          touchable = defaultTouchable,
          gestures = {},
          listeners = dispatch("start", "drag", "end"),
          active = 0,
          mousedownx,
          mousedowny,
          mousemoving,
          touchending,
          clickDistance2 = 0;

      function drag(selection) {
        selection
            .on("mousedown.drag", mousedowned)
          .filter(touchable)
            .on("touchstart.drag", touchstarted)
            .on("touchmove.drag", touchmoved)
            .on("touchend.drag touchcancel.drag", touchended)
            .style("touch-action", "none")
            .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
      }

      function mousedowned(event, d) {
        if (touchending || !filter.call(this, event, d)) return;
        var gesture = beforestart(this, container.call(this, event, d), event, d, "mouse");
        if (!gesture) return;
        select(event.view).on("mousemove.drag", mousemoved, true).on("mouseup.drag", mouseupped, true);
        dragDisable(event.view);
        nopropagation(event);
        mousemoving = false;
        mousedownx = event.clientX;
        mousedowny = event.clientY;
        gesture("start", event);
      }

      function mousemoved(event) {
        noevent(event);
        if (!mousemoving) {
          var dx = event.clientX - mousedownx, dy = event.clientY - mousedowny;
          mousemoving = dx * dx + dy * dy > clickDistance2;
        }
        gestures.mouse("drag", event);
      }

      function mouseupped(event) {
        select(event.view).on("mousemove.drag mouseup.drag", null);
        yesdrag(event.view, mousemoving);
        noevent(event);
        gestures.mouse("end", event);
      }

      function touchstarted(event, d) {
        if (!filter.call(this, event, d)) return;
        var touches = event.changedTouches,
            c = container.call(this, event, d),
            n = touches.length, i, gesture;

        for (i = 0; i < n; ++i) {
          if (gesture = beforestart(this, c, event, d, touches[i].identifier, touches[i])) {
            nopropagation(event);
            gesture("start", event, touches[i]);
          }
        }
      }

      function touchmoved(event) {
        var touches = event.changedTouches,
            n = touches.length, i, gesture;

        for (i = 0; i < n; ++i) {
          if (gesture = gestures[touches[i].identifier]) {
            noevent(event);
            gesture("drag", event, touches[i]);
          }
        }
      }

      function touchended(event) {
        var touches = event.changedTouches,
            n = touches.length, i, gesture;

        if (touchending) clearTimeout(touchending);
        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
        for (i = 0; i < n; ++i) {
          if (gesture = gestures[touches[i].identifier]) {
            nopropagation(event);
            gesture("end", event, touches[i]);
          }
        }
      }

      function beforestart(that, container, event, d, identifier, touch) {
        var dispatch = listeners.copy(),
            p = pointer(touch || event, container), dx, dy,
            s;

        if ((s = subject.call(that, new DragEvent("beforestart", {
            sourceEvent: event,
            target: drag,
            identifier,
            active,
            x: p[0],
            y: p[1],
            dx: 0,
            dy: 0,
            dispatch
          }), d)) == null) return;

        dx = s.x - p[0] || 0;
        dy = s.y - p[1] || 0;

        return function gesture(type, event, touch) {
          var p0 = p, n;
          switch (type) {
            case "start": gestures[identifier] = gesture, n = active++; break;
            case "end": delete gestures[identifier], --active; // nobreak
            case "drag": p = pointer(touch || event, container), n = active; break;
          }
          dispatch.call(
            type,
            that,
            new DragEvent(type, {
              sourceEvent: event,
              subject: s,
              target: drag,
              identifier,
              active: n,
              x: p[0] + dx,
              y: p[1] + dy,
              dx: p[0] - p0[0],
              dy: p[1] - p0[1],
              dispatch
            }),
            d
          );
        };
      }

      drag.filter = function(_) {
        return arguments.length ? (filter = typeof _ === "function" ? _ : constant$2(!!_), drag) : filter;
      };

      drag.container = function(_) {
        return arguments.length ? (container = typeof _ === "function" ? _ : constant$2(_), drag) : container;
      };

      drag.subject = function(_) {
        return arguments.length ? (subject = typeof _ === "function" ? _ : constant$2(_), drag) : subject;
      };

      drag.touchable = function(_) {
        return arguments.length ? (touchable = typeof _ === "function" ? _ : constant$2(!!_), drag) : touchable;
      };

      drag.on = function() {
        var value = listeners.on.apply(listeners, arguments);
        return value === listeners ? drag : value;
      };

      drag.clickDistance = function(_) {
        return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
      };

      return drag;
    }

    function define(constructor, factory, prototype) {
      constructor.prototype = factory.prototype = prototype;
      prototype.constructor = constructor;
    }

    function extend(parent, definition) {
      var prototype = Object.create(parent.prototype);
      for (var key in definition) prototype[key] = definition[key];
      return prototype;
    }

    function Color() {}

    var darker = 0.7;
    var brighter = 1 / darker;

    var reI = "\\s*([+-]?\\d+)\\s*",
        reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
        reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
        reHex = /^#([0-9a-f]{3,8})$/,
        reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
        reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
        reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
        reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
        reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
        reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

    var named = {
      aliceblue: 0xf0f8ff,
      antiquewhite: 0xfaebd7,
      aqua: 0x00ffff,
      aquamarine: 0x7fffd4,
      azure: 0xf0ffff,
      beige: 0xf5f5dc,
      bisque: 0xffe4c4,
      black: 0x000000,
      blanchedalmond: 0xffebcd,
      blue: 0x0000ff,
      blueviolet: 0x8a2be2,
      brown: 0xa52a2a,
      burlywood: 0xdeb887,
      cadetblue: 0x5f9ea0,
      chartreuse: 0x7fff00,
      chocolate: 0xd2691e,
      coral: 0xff7f50,
      cornflowerblue: 0x6495ed,
      cornsilk: 0xfff8dc,
      crimson: 0xdc143c,
      cyan: 0x00ffff,
      darkblue: 0x00008b,
      darkcyan: 0x008b8b,
      darkgoldenrod: 0xb8860b,
      darkgray: 0xa9a9a9,
      darkgreen: 0x006400,
      darkgrey: 0xa9a9a9,
      darkkhaki: 0xbdb76b,
      darkmagenta: 0x8b008b,
      darkolivegreen: 0x556b2f,
      darkorange: 0xff8c00,
      darkorchid: 0x9932cc,
      darkred: 0x8b0000,
      darksalmon: 0xe9967a,
      darkseagreen: 0x8fbc8f,
      darkslateblue: 0x483d8b,
      darkslategray: 0x2f4f4f,
      darkslategrey: 0x2f4f4f,
      darkturquoise: 0x00ced1,
      darkviolet: 0x9400d3,
      deeppink: 0xff1493,
      deepskyblue: 0x00bfff,
      dimgray: 0x696969,
      dimgrey: 0x696969,
      dodgerblue: 0x1e90ff,
      firebrick: 0xb22222,
      floralwhite: 0xfffaf0,
      forestgreen: 0x228b22,
      fuchsia: 0xff00ff,
      gainsboro: 0xdcdcdc,
      ghostwhite: 0xf8f8ff,
      gold: 0xffd700,
      goldenrod: 0xdaa520,
      gray: 0x808080,
      green: 0x008000,
      greenyellow: 0xadff2f,
      grey: 0x808080,
      honeydew: 0xf0fff0,
      hotpink: 0xff69b4,
      indianred: 0xcd5c5c,
      indigo: 0x4b0082,
      ivory: 0xfffff0,
      khaki: 0xf0e68c,
      lavender: 0xe6e6fa,
      lavenderblush: 0xfff0f5,
      lawngreen: 0x7cfc00,
      lemonchiffon: 0xfffacd,
      lightblue: 0xadd8e6,
      lightcoral: 0xf08080,
      lightcyan: 0xe0ffff,
      lightgoldenrodyellow: 0xfafad2,
      lightgray: 0xd3d3d3,
      lightgreen: 0x90ee90,
      lightgrey: 0xd3d3d3,
      lightpink: 0xffb6c1,
      lightsalmon: 0xffa07a,
      lightseagreen: 0x20b2aa,
      lightskyblue: 0x87cefa,
      lightslategray: 0x778899,
      lightslategrey: 0x778899,
      lightsteelblue: 0xb0c4de,
      lightyellow: 0xffffe0,
      lime: 0x00ff00,
      limegreen: 0x32cd32,
      linen: 0xfaf0e6,
      magenta: 0xff00ff,
      maroon: 0x800000,
      mediumaquamarine: 0x66cdaa,
      mediumblue: 0x0000cd,
      mediumorchid: 0xba55d3,
      mediumpurple: 0x9370db,
      mediumseagreen: 0x3cb371,
      mediumslateblue: 0x7b68ee,
      mediumspringgreen: 0x00fa9a,
      mediumturquoise: 0x48d1cc,
      mediumvioletred: 0xc71585,
      midnightblue: 0x191970,
      mintcream: 0xf5fffa,
      mistyrose: 0xffe4e1,
      moccasin: 0xffe4b5,
      navajowhite: 0xffdead,
      navy: 0x000080,
      oldlace: 0xfdf5e6,
      olive: 0x808000,
      olivedrab: 0x6b8e23,
      orange: 0xffa500,
      orangered: 0xff4500,
      orchid: 0xda70d6,
      palegoldenrod: 0xeee8aa,
      palegreen: 0x98fb98,
      paleturquoise: 0xafeeee,
      palevioletred: 0xdb7093,
      papayawhip: 0xffefd5,
      peachpuff: 0xffdab9,
      peru: 0xcd853f,
      pink: 0xffc0cb,
      plum: 0xdda0dd,
      powderblue: 0xb0e0e6,
      purple: 0x800080,
      rebeccapurple: 0x663399,
      red: 0xff0000,
      rosybrown: 0xbc8f8f,
      royalblue: 0x4169e1,
      saddlebrown: 0x8b4513,
      salmon: 0xfa8072,
      sandybrown: 0xf4a460,
      seagreen: 0x2e8b57,
      seashell: 0xfff5ee,
      sienna: 0xa0522d,
      silver: 0xc0c0c0,
      skyblue: 0x87ceeb,
      slateblue: 0x6a5acd,
      slategray: 0x708090,
      slategrey: 0x708090,
      snow: 0xfffafa,
      springgreen: 0x00ff7f,
      steelblue: 0x4682b4,
      tan: 0xd2b48c,
      teal: 0x008080,
      thistle: 0xd8bfd8,
      tomato: 0xff6347,
      turquoise: 0x40e0d0,
      violet: 0xee82ee,
      wheat: 0xf5deb3,
      white: 0xffffff,
      whitesmoke: 0xf5f5f5,
      yellow: 0xffff00,
      yellowgreen: 0x9acd32
    };

    define(Color, color, {
      copy: function(channels) {
        return Object.assign(new this.constructor, this, channels);
      },
      displayable: function() {
        return this.rgb().displayable();
      },
      hex: color_formatHex, // Deprecated! Use color.formatHex.
      formatHex: color_formatHex,
      formatHsl: color_formatHsl,
      formatRgb: color_formatRgb,
      toString: color_formatRgb
    });

    function color_formatHex() {
      return this.rgb().formatHex();
    }

    function color_formatHsl() {
      return hslConvert(this).formatHsl();
    }

    function color_formatRgb() {
      return this.rgb().formatRgb();
    }

    function color(format) {
      var m, l;
      format = (format + "").trim().toLowerCase();
      return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
          : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00
          : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
          : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000
          : null) // invalid hex
          : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
          : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
          : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
          : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
          : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
          : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
          : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
          : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
          : null;
    }

    function rgbn(n) {
      return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
    }

    function rgba(r, g, b, a) {
      if (a <= 0) r = g = b = NaN;
      return new Rgb(r, g, b, a);
    }

    function rgbConvert(o) {
      if (!(o instanceof Color)) o = color(o);
      if (!o) return new Rgb;
      o = o.rgb();
      return new Rgb(o.r, o.g, o.b, o.opacity);
    }

    function rgb(r, g, b, opacity) {
      return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
    }

    function Rgb(r, g, b, opacity) {
      this.r = +r;
      this.g = +g;
      this.b = +b;
      this.opacity = +opacity;
    }

    define(Rgb, rgb, extend(Color, {
      brighter: function(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
      },
      darker: function(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
      },
      rgb: function() {
        return this;
      },
      displayable: function() {
        return (-0.5 <= this.r && this.r < 255.5)
            && (-0.5 <= this.g && this.g < 255.5)
            && (-0.5 <= this.b && this.b < 255.5)
            && (0 <= this.opacity && this.opacity <= 1);
      },
      hex: rgb_formatHex, // Deprecated! Use color.formatHex.
      formatHex: rgb_formatHex,
      formatRgb: rgb_formatRgb,
      toString: rgb_formatRgb
    }));

    function rgb_formatHex() {
      return "#" + hex(this.r) + hex(this.g) + hex(this.b);
    }

    function rgb_formatRgb() {
      var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
      return (a === 1 ? "rgb(" : "rgba(")
          + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
          + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
          + Math.max(0, Math.min(255, Math.round(this.b) || 0))
          + (a === 1 ? ")" : ", " + a + ")");
    }

    function hex(value) {
      value = Math.max(0, Math.min(255, Math.round(value) || 0));
      return (value < 16 ? "0" : "") + value.toString(16);
    }

    function hsla(h, s, l, a) {
      if (a <= 0) h = s = l = NaN;
      else if (l <= 0 || l >= 1) h = s = NaN;
      else if (s <= 0) h = NaN;
      return new Hsl(h, s, l, a);
    }

    function hslConvert(o) {
      if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
      if (!(o instanceof Color)) o = color(o);
      if (!o) return new Hsl;
      if (o instanceof Hsl) return o;
      o = o.rgb();
      var r = o.r / 255,
          g = o.g / 255,
          b = o.b / 255,
          min = Math.min(r, g, b),
          max = Math.max(r, g, b),
          h = NaN,
          s = max - min,
          l = (max + min) / 2;
      if (s) {
        if (r === max) h = (g - b) / s + (g < b) * 6;
        else if (g === max) h = (b - r) / s + 2;
        else h = (r - g) / s + 4;
        s /= l < 0.5 ? max + min : 2 - max - min;
        h *= 60;
      } else {
        s = l > 0 && l < 1 ? 0 : h;
      }
      return new Hsl(h, s, l, o.opacity);
    }

    function hsl(h, s, l, opacity) {
      return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
    }

    function Hsl(h, s, l, opacity) {
      this.h = +h;
      this.s = +s;
      this.l = +l;
      this.opacity = +opacity;
    }

    define(Hsl, hsl, extend(Color, {
      brighter: function(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
      },
      darker: function(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
      },
      rgb: function() {
        var h = this.h % 360 + (this.h < 0) * 360,
            s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
            l = this.l,
            m2 = l + (l < 0.5 ? l : 1 - l) * s,
            m1 = 2 * l - m2;
        return new Rgb(
          hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
          hsl2rgb(h, m1, m2),
          hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
          this.opacity
        );
      },
      displayable: function() {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s))
            && (0 <= this.l && this.l <= 1)
            && (0 <= this.opacity && this.opacity <= 1);
      },
      formatHsl: function() {
        var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
        return (a === 1 ? "hsl(" : "hsla(")
            + (this.h || 0) + ", "
            + (this.s || 0) * 100 + "%, "
            + (this.l || 0) * 100 + "%"
            + (a === 1 ? ")" : ", " + a + ")");
      }
    }));

    /* From FvD 13.37, CSS Color Module Level 3 */
    function hsl2rgb(h, m1, m2) {
      return (h < 60 ? m1 + (m2 - m1) * h / 60
          : h < 180 ? m2
          : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
          : m1) * 255;
    }

    const radians = Math.PI / 180;
    const degrees = 180 / Math.PI;

    // https://observablehq.com/@mbostock/lab-and-rgb
    const K = 18,
        Xn = 0.96422,
        Yn = 1,
        Zn = 0.82521,
        t0 = 4 / 29,
        t1 = 6 / 29,
        t2 = 3 * t1 * t1,
        t3 = t1 * t1 * t1;

    function labConvert(o) {
      if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
      if (o instanceof Hcl) return hcl2lab(o);
      if (!(o instanceof Rgb)) o = rgbConvert(o);
      var r = rgb2lrgb(o.r),
          g = rgb2lrgb(o.g),
          b = rgb2lrgb(o.b),
          y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;
      if (r === g && g === b) x = z = y; else {
        x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
        z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
      }
      return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
    }

    function gray(l, opacity) {
      return new Lab(l, 0, 0, opacity == null ? 1 : opacity);
    }

    function lab(l, a, b, opacity) {
      return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
    }

    function Lab(l, a, b, opacity) {
      this.l = +l;
      this.a = +a;
      this.b = +b;
      this.opacity = +opacity;
    }

    define(Lab, lab, extend(Color, {
      brighter: function(k) {
        return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
      },
      darker: function(k) {
        return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
      },
      rgb: function() {
        var y = (this.l + 16) / 116,
            x = isNaN(this.a) ? y : y + this.a / 500,
            z = isNaN(this.b) ? y : y - this.b / 200;
        x = Xn * lab2xyz(x);
        y = Yn * lab2xyz(y);
        z = Zn * lab2xyz(z);
        return new Rgb(
          lrgb2rgb( 3.1338561 * x - 1.6168667 * y - 0.4906146 * z),
          lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z),
          lrgb2rgb( 0.0719453 * x - 0.2289914 * y + 1.4052427 * z),
          this.opacity
        );
      }
    }));

    function xyz2lab(t) {
      return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
    }

    function lab2xyz(t) {
      return t > t1 ? t * t * t : t2 * (t - t0);
    }

    function lrgb2rgb(x) {
      return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
    }

    function rgb2lrgb(x) {
      return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
    }

    function hclConvert(o) {
      if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
      if (!(o instanceof Lab)) o = labConvert(o);
      if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
      var h = Math.atan2(o.b, o.a) * degrees;
      return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
    }

    function lch(l, c, h, opacity) {
      return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
    }

    function hcl(h, c, l, opacity) {
      return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
    }

    function Hcl(h, c, l, opacity) {
      this.h = +h;
      this.c = +c;
      this.l = +l;
      this.opacity = +opacity;
    }

    function hcl2lab(o) {
      if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
      var h = o.h * radians;
      return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
    }

    define(Hcl, hcl, extend(Color, {
      brighter: function(k) {
        return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
      },
      darker: function(k) {
        return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
      },
      rgb: function() {
        return hcl2lab(this).rgb();
      }
    }));

    var A = -0.14861,
        B = +1.78277,
        C = -0.29227,
        D = -0.90649,
        E = +1.97294,
        ED = E * D,
        EB = E * B,
        BC_DA = B * C - D * A;

    function cubehelixConvert(o) {
      if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
      if (!(o instanceof Rgb)) o = rgbConvert(o);
      var r = o.r / 255,
          g = o.g / 255,
          b = o.b / 255,
          l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
          bl = b - l,
          k = (E * (g - l) - C * bl) / D,
          s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
          h = s ? Math.atan2(k, bl) * degrees - 120 : NaN;
      return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
    }

    function cubehelix(h, s, l, opacity) {
      return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
    }

    function Cubehelix(h, s, l, opacity) {
      this.h = +h;
      this.s = +s;
      this.l = +l;
      this.opacity = +opacity;
    }

    define(Cubehelix, cubehelix, extend(Color, {
      brighter: function(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
      },
      darker: function(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
      },
      rgb: function() {
        var h = isNaN(this.h) ? 0 : (this.h + 120) * radians,
            l = +this.l,
            a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
            cosh = Math.cos(h),
            sinh = Math.sin(h);
        return new Rgb(
          255 * (l + a * (A * cosh + B * sinh)),
          255 * (l + a * (C * cosh + D * sinh)),
          255 * (l + a * (E * cosh)),
          this.opacity
        );
      }
    }));

    function basis(t1, v0, v1, v2, v3) {
      var t2 = t1 * t1, t3 = t2 * t1;
      return ((1 - 3 * t1 + 3 * t2 - t3) * v0
          + (4 - 6 * t2 + 3 * t3) * v1
          + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
          + t3 * v3) / 6;
    }

    function basis$1(values) {
      var n = values.length - 1;
      return function(t) {
        var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
            v1 = values[i],
            v2 = values[i + 1],
            v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
            v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
        return basis((t - i / n) * n, v0, v1, v2, v3);
      };
    }

    function basisClosed(values) {
      var n = values.length;
      return function(t) {
        var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
            v0 = values[(i + n - 1) % n],
            v1 = values[i % n],
            v2 = values[(i + 1) % n],
            v3 = values[(i + 2) % n];
        return basis((t - i / n) * n, v0, v1, v2, v3);
      };
    }

    var constant$3 = x => () => x;

    function linear$1(a, d) {
      return function(t) {
        return a + t * d;
      };
    }

    function exponential(a, b, y) {
      return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
        return Math.pow(a + t * b, y);
      };
    }

    function hue(a, b) {
      var d = b - a;
      return d ? linear$1(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$3(isNaN(a) ? b : a);
    }

    function gamma(y) {
      return (y = +y) === 1 ? nogamma : function(a, b) {
        return b - a ? exponential(a, b, y) : constant$3(isNaN(a) ? b : a);
      };
    }

    function nogamma(a, b) {
      var d = b - a;
      return d ? linear$1(a, d) : constant$3(isNaN(a) ? b : a);
    }

    var interpolateRgb = (function rgbGamma(y) {
      var color = gamma(y);

      function rgb$1(start, end) {
        var r = color((start = rgb(start)).r, (end = rgb(end)).r),
            g = color(start.g, end.g),
            b = color(start.b, end.b),
            opacity = nogamma(start.opacity, end.opacity);
        return function(t) {
          start.r = r(t);
          start.g = g(t);
          start.b = b(t);
          start.opacity = opacity(t);
          return start + "";
        };
      }

      rgb$1.gamma = rgbGamma;

      return rgb$1;
    })(1);

    function rgbSpline(spline) {
      return function(colors) {
        var n = colors.length,
            r = new Array(n),
            g = new Array(n),
            b = new Array(n),
            i, color;
        for (i = 0; i < n; ++i) {
          color = rgb(colors[i]);
          r[i] = color.r || 0;
          g[i] = color.g || 0;
          b[i] = color.b || 0;
        }
        r = spline(r);
        g = spline(g);
        b = spline(b);
        color.opacity = 1;
        return function(t) {
          color.r = r(t);
          color.g = g(t);
          color.b = b(t);
          return color + "";
        };
      };
    }

    var rgbBasis = rgbSpline(basis$1);
    var rgbBasisClosed = rgbSpline(basisClosed);

    function numberArray(a, b) {
      if (!b) b = [];
      var n = a ? Math.min(b.length, a.length) : 0,
          c = b.slice(),
          i;
      return function(t) {
        for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;
        return c;
      };
    }

    function isNumberArray(x) {
      return ArrayBuffer.isView(x) && !(x instanceof DataView);
    }

    function array$2(a, b) {
      return (isNumberArray(b) ? numberArray : genericArray)(a, b);
    }

    function genericArray(a, b) {
      var nb = b ? b.length : 0,
          na = a ? Math.min(nb, a.length) : 0,
          x = new Array(na),
          c = new Array(nb),
          i;

      for (i = 0; i < na; ++i) x[i] = interpolate(a[i], b[i]);
      for (; i < nb; ++i) c[i] = b[i];

      return function(t) {
        for (i = 0; i < na; ++i) c[i] = x[i](t);
        return c;
      };
    }

    function date(a, b) {
      var d = new Date;
      return a = +a, b = +b, function(t) {
        return d.setTime(a * (1 - t) + b * t), d;
      };
    }

    function interpolateNumber(a, b) {
      return a = +a, b = +b, function(t) {
        return a * (1 - t) + b * t;
      };
    }

    function object(a, b) {
      var i = {},
          c = {},
          k;

      if (a === null || typeof a !== "object") a = {};
      if (b === null || typeof b !== "object") b = {};

      for (k in b) {
        if (k in a) {
          i[k] = interpolate(a[k], b[k]);
        } else {
          c[k] = b[k];
        }
      }

      return function(t) {
        for (k in i) c[k] = i[k](t);
        return c;
      };
    }

    var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
        reB = new RegExp(reA.source, "g");

    function zero$1(b) {
      return function() {
        return b;
      };
    }

    function one(b) {
      return function(t) {
        return b(t) + "";
      };
    }

    function interpolateString(a, b) {
      var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
          am, // current match in a
          bm, // current match in b
          bs, // string preceding current number in b, if any
          i = -1, // index in s
          s = [], // string constants and placeholders
          q = []; // number interpolators

      // Coerce inputs to strings.
      a = a + "", b = b + "";

      // Interpolate pairs of numbers in a & b.
      while ((am = reA.exec(a))
          && (bm = reB.exec(b))) {
        if ((bs = bm.index) > bi) { // a string precedes the next number in b
          bs = b.slice(bi, bs);
          if (s[i]) s[i] += bs; // coalesce with previous string
          else s[++i] = bs;
        }
        if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
          if (s[i]) s[i] += bm; // coalesce with previous string
          else s[++i] = bm;
        } else { // interpolate non-matching numbers
          s[++i] = null;
          q.push({i: i, x: interpolateNumber(am, bm)});
        }
        bi = reB.lastIndex;
      }

      // Add remains of b.
      if (bi < b.length) {
        bs = b.slice(bi);
        if (s[i]) s[i] += bs; // coalesce with previous string
        else s[++i] = bs;
      }

      // Special optimization for only a single match.
      // Otherwise, interpolate each of the numbers and rejoin the string.
      return s.length < 2 ? (q[0]
          ? one(q[0].x)
          : zero$1(b))
          : (b = q.length, function(t) {
              for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
              return s.join("");
            });
    }

    function interpolate(a, b) {
      var t = typeof b, c;
      return b == null || t === "boolean" ? constant$3(b)
          : (t === "number" ? interpolateNumber
          : t === "string" ? ((c = color(b)) ? (b = c, interpolateRgb) : interpolateString)
          : b instanceof color ? interpolateRgb
          : b instanceof Date ? date
          : isNumberArray(b) ? numberArray
          : Array.isArray(b) ? genericArray
          : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object
          : interpolateNumber)(a, b);
    }

    function discrete(range) {
      var n = range.length;
      return function(t) {
        return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
      };
    }

    function hue$1(a, b) {
      var i = hue(+a, +b);
      return function(t) {
        var x = i(t);
        return x - 360 * Math.floor(x / 360);
      };
    }

    function interpolateRound(a, b) {
      return a = +a, b = +b, function(t) {
        return Math.round(a * (1 - t) + b * t);
      };
    }

    var degrees$1 = 180 / Math.PI;

    var identity$4 = {
      translateX: 0,
      translateY: 0,
      rotate: 0,
      skewX: 0,
      scaleX: 1,
      scaleY: 1
    };

    function decompose(a, b, c, d, e, f) {
      var scaleX, scaleY, skewX;
      if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
      if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
      if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
      if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
      return {
        translateX: e,
        translateY: f,
        rotate: Math.atan2(b, a) * degrees$1,
        skewX: Math.atan(skewX) * degrees$1,
        scaleX: scaleX,
        scaleY: scaleY
      };
    }

    var svgNode;

    /* eslint-disable no-undef */
    function parseCss(value) {
      const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
      return m.isIdentity ? identity$4 : decompose(m.a, m.b, m.c, m.d, m.e, m.f);
    }

    function parseSvg(value) {
      if (value == null) return identity$4;
      if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
      svgNode.setAttribute("transform", value);
      if (!(value = svgNode.transform.baseVal.consolidate())) return identity$4;
      value = value.matrix;
      return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
    }

    function interpolateTransform(parse, pxComma, pxParen, degParen) {

      function pop(s) {
        return s.length ? s.pop() + " " : "";
      }

      function translate(xa, ya, xb, yb, s, q) {
        if (xa !== xb || ya !== yb) {
          var i = s.push("translate(", null, pxComma, null, pxParen);
          q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});
        } else if (xb || yb) {
          s.push("translate(" + xb + pxComma + yb + pxParen);
        }
      }

      function rotate(a, b, s, q) {
        if (a !== b) {
          if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
          q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: interpolateNumber(a, b)});
        } else if (b) {
          s.push(pop(s) + "rotate(" + b + degParen);
        }
      }

      function skewX(a, b, s, q) {
        if (a !== b) {
          q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: interpolateNumber(a, b)});
        } else if (b) {
          s.push(pop(s) + "skewX(" + b + degParen);
        }
      }

      function scale(xa, ya, xb, yb, s, q) {
        if (xa !== xb || ya !== yb) {
          var i = s.push(pop(s) + "scale(", null, ",", null, ")");
          q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});
        } else if (xb !== 1 || yb !== 1) {
          s.push(pop(s) + "scale(" + xb + "," + yb + ")");
        }
      }

      return function(a, b) {
        var s = [], // string constants and placeholders
            q = []; // number interpolators
        a = parse(a), b = parse(b);
        translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
        rotate(a.rotate, b.rotate, s, q);
        skewX(a.skewX, b.skewX, s, q);
        scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
        a = b = null; // gc
        return function(t) {
          var i = -1, n = q.length, o;
          while (++i < n) s[(o = q[i]).i] = o.x(t);
          return s.join("");
        };
      };
    }

    var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
    var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

    var epsilon2 = 1e-12;

    function cosh(x) {
      return ((x = Math.exp(x)) + 1 / x) / 2;
    }

    function sinh(x) {
      return ((x = Math.exp(x)) - 1 / x) / 2;
    }

    function tanh(x) {
      return ((x = Math.exp(2 * x)) - 1) / (x + 1);
    }

    var interpolateZoom = (function zoomRho(rho, rho2, rho4) {

      // p0 = [ux0, uy0, w0]
      // p1 = [ux1, uy1, w1]
      function zoom(p0, p1) {
        var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],
            ux1 = p1[0], uy1 = p1[1], w1 = p1[2],
            dx = ux1 - ux0,
            dy = uy1 - uy0,
            d2 = dx * dx + dy * dy,
            i,
            S;

        // Special case for u0 ≅ u1.
        if (d2 < epsilon2) {
          S = Math.log(w1 / w0) / rho;
          i = function(t) {
            return [
              ux0 + t * dx,
              uy0 + t * dy,
              w0 * Math.exp(rho * t * S)
            ];
          };
        }

        // General case.
        else {
          var d1 = Math.sqrt(d2),
              b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
              b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
              r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
              r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
          S = (r1 - r0) / rho;
          i = function(t) {
            var s = t * S,
                coshr0 = cosh(r0),
                u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
            return [
              ux0 + u * dx,
              uy0 + u * dy,
              w0 * coshr0 / cosh(rho * s + r0)
            ];
          };
        }

        i.duration = S * 1000 * rho / Math.SQRT2;

        return i;
      }

      zoom.rho = function(_) {
        var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
        return zoomRho(_1, _2, _4);
      };

      return zoom;
    })(Math.SQRT2, 2, 4);

    function hsl$1(hue) {
      return function(start, end) {
        var h = hue((start = hsl(start)).h, (end = hsl(end)).h),
            s = nogamma(start.s, end.s),
            l = nogamma(start.l, end.l),
            opacity = nogamma(start.opacity, end.opacity);
        return function(t) {
          start.h = h(t);
          start.s = s(t);
          start.l = l(t);
          start.opacity = opacity(t);
          return start + "";
        };
      }
    }

    var hsl$2 = hsl$1(hue);
    var hslLong = hsl$1(nogamma);

    function lab$1(start, end) {
      var l = nogamma((start = lab(start)).l, (end = lab(end)).l),
          a = nogamma(start.a, end.a),
          b = nogamma(start.b, end.b),
          opacity = nogamma(start.opacity, end.opacity);
      return function(t) {
        start.l = l(t);
        start.a = a(t);
        start.b = b(t);
        start.opacity = opacity(t);
        return start + "";
      };
    }

    function hcl$1(hue) {
      return function(start, end) {
        var h = hue((start = hcl(start)).h, (end = hcl(end)).h),
            c = nogamma(start.c, end.c),
            l = nogamma(start.l, end.l),
            opacity = nogamma(start.opacity, end.opacity);
        return function(t) {
          start.h = h(t);
          start.c = c(t);
          start.l = l(t);
          start.opacity = opacity(t);
          return start + "";
        };
      }
    }

    var hcl$2 = hcl$1(hue);
    var hclLong = hcl$1(nogamma);

    function cubehelix$1(hue) {
      return (function cubehelixGamma(y) {
        y = +y;

        function cubehelix$1(start, end) {
          var h = hue((start = cubehelix(start)).h, (end = cubehelix(end)).h),
              s = nogamma(start.s, end.s),
              l = nogamma(start.l, end.l),
              opacity = nogamma(start.opacity, end.opacity);
          return function(t) {
            start.h = h(t);
            start.s = s(t);
            start.l = l(Math.pow(t, y));
            start.opacity = opacity(t);
            return start + "";
          };
        }

        cubehelix$1.gamma = cubehelixGamma;

        return cubehelix$1;
      })(1);
    }

    var cubehelix$2 = cubehelix$1(hue);
    var cubehelixLong = cubehelix$1(nogamma);

    function piecewise(interpolate$1, values) {
      if (values === undefined) values = interpolate$1, interpolate$1 = interpolate;
      var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);
      while (i < n) I[i] = interpolate$1(v, v = values[++i]);
      return function(t) {
        var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
        return I[i](t - i);
      };
    }

    function quantize(interpolator, n) {
      var samples = new Array(n);
      for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));
      return samples;
    }

    var frame = 0, // is an animation frame pending?
        timeout = 0, // is a timeout pending?
        interval = 0, // are any timers active?
        pokeDelay = 1000, // how frequently we check for clock skew
        taskHead,
        taskTail,
        clockLast = 0,
        clockNow = 0,
        clockSkew = 0,
        clock = typeof performance === "object" && performance.now ? performance : Date,
        setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };

    function now() {
      return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
    }

    function clearNow() {
      clockNow = 0;
    }

    function Timer() {
      this._call =
      this._time =
      this._next = null;
    }

    Timer.prototype = timer.prototype = {
      constructor: Timer,
      restart: function(callback, delay, time) {
        if (typeof callback !== "function") throw new TypeError("callback is not a function");
        time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
        if (!this._next && taskTail !== this) {
          if (taskTail) taskTail._next = this;
          else taskHead = this;
          taskTail = this;
        }
        this._call = callback;
        this._time = time;
        sleep();
      },
      stop: function() {
        if (this._call) {
          this._call = null;
          this._time = Infinity;
          sleep();
        }
      }
    };

    function timer(callback, delay, time) {
      var t = new Timer;
      t.restart(callback, delay, time);
      return t;
    }

    function timerFlush() {
      now(); // Get the current time, if not already set.
      ++frame; // Pretend we’ve set an alarm, if we haven’t already.
      var t = taskHead, e;
      while (t) {
        if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
        t = t._next;
      }
      --frame;
    }

    function wake() {
      clockNow = (clockLast = clock.now()) + clockSkew;
      frame = timeout = 0;
      try {
        timerFlush();
      } finally {
        frame = 0;
        nap();
        clockNow = 0;
      }
    }

    function poke() {
      var now = clock.now(), delay = now - clockLast;
      if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
    }

    function nap() {
      var t0, t1 = taskHead, t2, time = Infinity;
      while (t1) {
        if (t1._call) {
          if (time > t1._time) time = t1._time;
          t0 = t1, t1 = t1._next;
        } else {
          t2 = t1._next, t1._next = null;
          t1 = t0 ? t0._next = t2 : taskHead = t2;
        }
      }
      taskTail = t0;
      sleep(time);
    }

    function sleep(time) {
      if (frame) return; // Soonest alarm already set, or will be.
      if (timeout) timeout = clearTimeout(timeout);
      var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
      if (delay > 24) {
        if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
        if (interval) interval = clearInterval(interval);
      } else {
        if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
        frame = 1, setFrame(wake);
      }
    }

    function timeout$1(callback, delay, time) {
      var t = new Timer;
      delay = delay == null ? 0 : +delay;
      t.restart(elapsed => {
        t.stop();
        callback(elapsed + delay);
      }, delay, time);
      return t;
    }

    function interval$1(callback, delay, time) {
      var t = new Timer, total = delay;
      if (delay == null) return t.restart(callback, delay, time), t;
      t._restart = t.restart;
      t.restart = function(callback, delay, time) {
        delay = +delay, time = time == null ? now() : +time;
        t._restart(function tick(elapsed) {
          elapsed += total;
          t._restart(tick, total += delay, time);
          callback(elapsed);
        }, delay, time);
      };
      t.restart(callback, delay, time);
      return t;
    }

    var emptyOn = dispatch("start", "end", "cancel", "interrupt");
    var emptyTween = [];

    var CREATED = 0;
    var SCHEDULED = 1;
    var STARTING = 2;
    var STARTED = 3;
    var RUNNING = 4;
    var ENDING = 5;
    var ENDED = 6;

    function schedule(node, name, id, index, group, timing) {
      var schedules = node.__transition;
      if (!schedules) node.__transition = {};
      else if (id in schedules) return;
      create$6(node, id, {
        name: name,
        index: index, // For context during callback.
        group: group, // For context during callback.
        on: emptyOn,
        tween: emptyTween,
        time: timing.time,
        delay: timing.delay,
        duration: timing.duration,
        ease: timing.ease,
        timer: null,
        state: CREATED
      });
    }

    function init$1(node, id) {
      var schedule = get$1(node, id);
      if (schedule.state > CREATED) throw new Error("too late; already scheduled");
      return schedule;
    }

    function set$6(node, id) {
      var schedule = get$1(node, id);
      if (schedule.state > STARTED) throw new Error("too late; already running");
      return schedule;
    }

    function get$1(node, id) {
      var schedule = node.__transition;
      if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
      return schedule;
    }

    function create$6(node, id, self) {
      var schedules = node.__transition,
          tween;

      // Initialize the self timer when the transition is created.
      // Note the actual delay is not known until the first callback!
      schedules[id] = self;
      self.timer = timer(schedule, 0, self.time);

      function schedule(elapsed) {
        self.state = SCHEDULED;
        self.timer.restart(start, self.delay, self.time);

        // If the elapsed delay is less than our first sleep, start immediately.
        if (self.delay <= elapsed) start(elapsed - self.delay);
      }

      function start(elapsed) {
        var i, j, n, o;

        // If the state is not SCHEDULED, then we previously errored on start.
        if (self.state !== SCHEDULED) return stop();

        for (i in schedules) {
          o = schedules[i];
          if (o.name !== self.name) continue;

          // While this element already has a starting transition during this frame,
          // defer starting an interrupting transition until that transition has a
          // chance to tick (and possibly end); see d3/d3-transition#54!
          if (o.state === STARTED) return timeout$1(start);

          // Interrupt the active transition, if any.
          if (o.state === RUNNING) {
            o.state = ENDED;
            o.timer.stop();
            o.on.call("interrupt", node, node.__data__, o.index, o.group);
            delete schedules[i];
          }

          // Cancel any pre-empted transitions.
          else if (+i < id) {
            o.state = ENDED;
            o.timer.stop();
            o.on.call("cancel", node, node.__data__, o.index, o.group);
            delete schedules[i];
          }
        }

        // Defer the first tick to end of the current frame; see d3/d3#1576.
        // Note the transition may be canceled after start and before the first tick!
        // Note this must be scheduled before the start event; see d3/d3-transition#16!
        // Assuming this is successful, subsequent callbacks go straight to tick.
        timeout$1(function() {
          if (self.state === STARTED) {
            self.state = RUNNING;
            self.timer.restart(tick, self.delay, self.time);
            tick(elapsed);
          }
        });

        // Dispatch the start event.
        // Note this must be done before the tween are initialized.
        self.state = STARTING;
        self.on.call("start", node, node.__data__, self.index, self.group);
        if (self.state !== STARTING) return; // interrupted
        self.state = STARTED;

        // Initialize the tween, deleting null tween.
        tween = new Array(n = self.tween.length);
        for (i = 0, j = -1; i < n; ++i) {
          if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
            tween[++j] = o;
          }
        }
        tween.length = j + 1;
      }

      function tick(elapsed) {
        var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
            i = -1,
            n = tween.length;

        while (++i < n) {
          tween[i].call(node, t);
        }

        // Dispatch the end event.
        if (self.state === ENDING) {
          self.on.call("end", node, node.__data__, self.index, self.group);
          stop();
        }
      }

      function stop() {
        self.state = ENDED;
        self.timer.stop();
        delete schedules[id];
        for (var i in schedules) return; // eslint-disable-line no-unused-vars
        delete node.__transition;
      }
    }

    function interrupt(node, name) {
      var schedules = node.__transition,
          schedule,
          active,
          empty = true,
          i;

      if (!schedules) return;

      name = name == null ? null : name + "";

      for (i in schedules) {
        if ((schedule = schedules[i]).name !== name) { empty = false; continue; }
        active = schedule.state > STARTING && schedule.state < ENDING;
        schedule.state = ENDED;
        schedule.timer.stop();
        schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
        delete schedules[i];
      }

      if (empty) delete node.__transition;
    }

    function selection_interrupt(name) {
      return this.each(function() {
        interrupt(this, name);
      });
    }

    function tweenRemove(id, name) {
      var tween0, tween1;
      return function() {
        var schedule = set$6(this, id),
            tween = schedule.tween;

        // If this node shared tween with the previous node,
        // just assign the updated shared tween and we’re done!
        // Otherwise, copy-on-write.
        if (tween !== tween0) {
          tween1 = tween0 = tween;
          for (var i = 0, n = tween1.length; i < n; ++i) {
            if (tween1[i].name === name) {
              tween1 = tween1.slice();
              tween1.splice(i, 1);
              break;
            }
          }
        }

        schedule.tween = tween1;
      };
    }

    function tweenFunction(id, name, value) {
      var tween0, tween1;
      if (typeof value !== "function") throw new Error;
      return function() {
        var schedule = set$6(this, id),
            tween = schedule.tween;

        // If this node shared tween with the previous node,
        // just assign the updated shared tween and we’re done!
        // Otherwise, copy-on-write.
        if (tween !== tween0) {
          tween1 = (tween0 = tween).slice();
          for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {
            if (tween1[i].name === name) {
              tween1[i] = t;
              break;
            }
          }
          if (i === n) tween1.push(t);
        }

        schedule.tween = tween1;
      };
    }

    function transition_tween(name, value) {
      var id = this._id;

      name += "";

      if (arguments.length < 2) {
        var tween = get$1(this.node(), id).tween;
        for (var i = 0, n = tween.length, t; i < n; ++i) {
          if ((t = tween[i]).name === name) {
            return t.value;
          }
        }
        return null;
      }

      return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
    }

    function tweenValue(transition, name, value) {
      var id = transition._id;

      transition.each(function() {
        var schedule = set$6(this, id);
        (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
      });

      return function(node) {
        return get$1(node, id).value[name];
      };
    }

    function interpolate$1(a, b) {
      var c;
      return (typeof b === "number" ? interpolateNumber
          : b instanceof color ? interpolateRgb
          : (c = color(b)) ? (b = c, interpolateRgb)
          : interpolateString)(a, b);
    }

    function attrRemove$1(name) {
      return function() {
        this.removeAttribute(name);
      };
    }

    function attrRemoveNS$1(fullname) {
      return function() {
        this.removeAttributeNS(fullname.space, fullname.local);
      };
    }

    function attrConstant$1(name, interpolate, value1) {
      var string00,
          string1 = value1 + "",
          interpolate0;
      return function() {
        var string0 = this.getAttribute(name);
        return string0 === string1 ? null
            : string0 === string00 ? interpolate0
            : interpolate0 = interpolate(string00 = string0, value1);
      };
    }

    function attrConstantNS$1(fullname, interpolate, value1) {
      var string00,
          string1 = value1 + "",
          interpolate0;
      return function() {
        var string0 = this.getAttributeNS(fullname.space, fullname.local);
        return string0 === string1 ? null
            : string0 === string00 ? interpolate0
            : interpolate0 = interpolate(string00 = string0, value1);
      };
    }

    function attrFunction$1(name, interpolate, value) {
      var string00,
          string10,
          interpolate0;
      return function() {
        var string0, value1 = value(this), string1;
        if (value1 == null) return void this.removeAttribute(name);
        string0 = this.getAttribute(name);
        string1 = value1 + "";
        return string0 === string1 ? null
            : string0 === string00 && string1 === string10 ? interpolate0
            : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
      };
    }

    function attrFunctionNS$1(fullname, interpolate, value) {
      var string00,
          string10,
          interpolate0;
      return function() {
        var string0, value1 = value(this), string1;
        if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
        string0 = this.getAttributeNS(fullname.space, fullname.local);
        string1 = value1 + "";
        return string0 === string1 ? null
            : string0 === string00 && string1 === string10 ? interpolate0
            : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
      };
    }

    function transition_attr(name, value) {
      var fullname = namespace(name), i = fullname === "transform" ? interpolateTransformSvg : interpolate$1;
      return this.attrTween(name, typeof value === "function"
          ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, "attr." + name, value))
          : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname)
          : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value));
    }

    function attrInterpolate(name, i) {
      return function(t) {
        this.setAttribute(name, i.call(this, t));
      };
    }

    function attrInterpolateNS(fullname, i) {
      return function(t) {
        this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
      };
    }

    function attrTweenNS(fullname, value) {
      var t0, i0;
      function tween() {
        var i = value.apply(this, arguments);
        if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);
        return t0;
      }
      tween._value = value;
      return tween;
    }

    function attrTween(name, value) {
      var t0, i0;
      function tween() {
        var i = value.apply(this, arguments);
        if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);
        return t0;
      }
      tween._value = value;
      return tween;
    }

    function transition_attrTween(name, value) {
      var key = "attr." + name;
      if (arguments.length < 2) return (key = this.tween(key)) && key._value;
      if (value == null) return this.tween(key, null);
      if (typeof value !== "function") throw new Error;
      var fullname = namespace(name);
      return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
    }

    function delayFunction(id, value) {
      return function() {
        init$1(this, id).delay = +value.apply(this, arguments);
      };
    }

    function delayConstant(id, value) {
      return value = +value, function() {
        init$1(this, id).delay = value;
      };
    }

    function transition_delay(value) {
      var id = this._id;

      return arguments.length
          ? this.each((typeof value === "function"
              ? delayFunction
              : delayConstant)(id, value))
          : get$1(this.node(), id).delay;
    }

    function durationFunction(id, value) {
      return function() {
        set$6(this, id).duration = +value.apply(this, arguments);
      };
    }

    function durationConstant(id, value) {
      return value = +value, function() {
        set$6(this, id).duration = value;
      };
    }

    function transition_duration(value) {
      var id = this._id;

      return arguments.length
          ? this.each((typeof value === "function"
              ? durationFunction
              : durationConstant)(id, value))
          : get$1(this.node(), id).duration;
    }

    function easeConstant(id, value) {
      if (typeof value !== "function") throw new Error;
      return function() {
        set$6(this, id).ease = value;
      };
    }

    function transition_ease(value) {
      var id = this._id;

      return arguments.length
          ? this.each(easeConstant(id, value))
          : get$1(this.node(), id).ease;
    }

    function easeVarying(id, value) {
      return function() {
        var v = value.apply(this, arguments);
        if (typeof v !== "function") throw new Error;
        set$6(this, id).ease = v;
      };
    }

    function transition_easeVarying(value) {
      if (typeof value !== "function") throw new Error;
      return this.each(easeVarying(this._id, value));
    }

    function transition_filter(match) {
      if (typeof match !== "function") match = matcher(match);

      for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
          if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
            subgroup.push(node);
          }
        }
      }

      return new Transition(subgroups, this._parents, this._name, this._id);
    }

    function transition_merge(transition) {
      if (transition._id !== this._id) throw new Error;

      for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
        for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
          if (node = group0[i] || group1[i]) {
            merge[i] = node;
          }
        }
      }

      for (; j < m0; ++j) {
        merges[j] = groups0[j];
      }

      return new Transition(merges, this._parents, this._name, this._id);
    }

    function start(name) {
      return (name + "").trim().split(/^|\s+/).every(function(t) {
        var i = t.indexOf(".");
        if (i >= 0) t = t.slice(0, i);
        return !t || t === "start";
      });
    }

    function onFunction(id, name, listener) {
      var on0, on1, sit = start(name) ? init$1 : set$6;
      return function() {
        var schedule = sit(this, id),
            on = schedule.on;

        // If this node shared a dispatch with the previous node,
        // just assign the updated shared dispatch and we’re done!
        // Otherwise, copy-on-write.
        if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);

        schedule.on = on1;
      };
    }

    function transition_on(name, listener) {
      var id = this._id;

      return arguments.length < 2
          ? get$1(this.node(), id).on.on(name)
          : this.each(onFunction(id, name, listener));
    }

    function removeFunction(id) {
      return function() {
        var parent = this.parentNode;
        for (var i in this.__transition) if (+i !== id) return;
        if (parent) parent.removeChild(this);
      };
    }

    function transition_remove() {
      return this.on("end.remove", removeFunction(this._id));
    }

    function transition_select(select) {
      var name = this._name,
          id = this._id;

      if (typeof select !== "function") select = selector(select);

      for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
          if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
            if ("__data__" in node) subnode.__data__ = node.__data__;
            subgroup[i] = subnode;
            schedule(subgroup[i], name, id, i, subgroup, get$1(node, id));
          }
        }
      }

      return new Transition(subgroups, this._parents, name, id);
    }

    function transition_selectAll(select) {
      var name = this._name,
          id = this._id;

      if (typeof select !== "function") select = selectorAll(select);

      for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            for (var children = select.call(node, node.__data__, i, group), child, inherit = get$1(node, id), k = 0, l = children.length; k < l; ++k) {
              if (child = children[k]) {
                schedule(child, name, id, k, children, inherit);
              }
            }
            subgroups.push(children);
            parents.push(node);
          }
        }
      }

      return new Transition(subgroups, parents, name, id);
    }

    var Selection$1 = selection.prototype.constructor;

    function transition_selection() {
      return new Selection$1(this._groups, this._parents);
    }

    function styleNull(name, interpolate) {
      var string00,
          string10,
          interpolate0;
      return function() {
        var string0 = styleValue(this, name),
            string1 = (this.style.removeProperty(name), styleValue(this, name));
        return string0 === string1 ? null
            : string0 === string00 && string1 === string10 ? interpolate0
            : interpolate0 = interpolate(string00 = string0, string10 = string1);
      };
    }

    function styleRemove$1(name) {
      return function() {
        this.style.removeProperty(name);
      };
    }

    function styleConstant$1(name, interpolate, value1) {
      var string00,
          string1 = value1 + "",
          interpolate0;
      return function() {
        var string0 = styleValue(this, name);
        return string0 === string1 ? null
            : string0 === string00 ? interpolate0
            : interpolate0 = interpolate(string00 = string0, value1);
      };
    }

    function styleFunction$1(name, interpolate, value) {
      var string00,
          string10,
          interpolate0;
      return function() {
        var string0 = styleValue(this, name),
            value1 = value(this),
            string1 = value1 + "";
        if (value1 == null) string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
        return string0 === string1 ? null
            : string0 === string00 && string1 === string10 ? interpolate0
            : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
      };
    }

    function styleMaybeRemove(id, name) {
      var on0, on1, listener0, key = "style." + name, event = "end." + key, remove;
      return function() {
        var schedule = set$6(this, id),
            on = schedule.on,
            listener = schedule.value[key] == null ? remove || (remove = styleRemove$1(name)) : undefined;

        // If this node shared a dispatch with the previous node,
        // just assign the updated shared dispatch and we’re done!
        // Otherwise, copy-on-write.
        if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);

        schedule.on = on1;
      };
    }

    function transition_style(name, value, priority) {
      var i = (name += "") === "transform" ? interpolateTransformCss : interpolate$1;
      return value == null ? this
          .styleTween(name, styleNull(name, i))
          .on("end.style." + name, styleRemove$1(name))
        : typeof value === "function" ? this
          .styleTween(name, styleFunction$1(name, i, tweenValue(this, "style." + name, value)))
          .each(styleMaybeRemove(this._id, name))
        : this
          .styleTween(name, styleConstant$1(name, i, value), priority)
          .on("end.style." + name, null);
    }

    function styleInterpolate(name, i, priority) {
      return function(t) {
        this.style.setProperty(name, i.call(this, t), priority);
      };
    }

    function styleTween(name, value, priority) {
      var t, i0;
      function tween() {
        var i = value.apply(this, arguments);
        if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);
        return t;
      }
      tween._value = value;
      return tween;
    }

    function transition_styleTween(name, value, priority) {
      var key = "style." + (name += "");
      if (arguments.length < 2) return (key = this.tween(key)) && key._value;
      if (value == null) return this.tween(key, null);
      if (typeof value !== "function") throw new Error;
      return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
    }

    function textConstant$1(value) {
      return function() {
        this.textContent = value;
      };
    }

    function textFunction$1(value) {
      return function() {
        var value1 = value(this);
        this.textContent = value1 == null ? "" : value1;
      };
    }

    function transition_text(value) {
      return this.tween("text", typeof value === "function"
          ? textFunction$1(tweenValue(this, "text", value))
          : textConstant$1(value == null ? "" : value + ""));
    }

    function textInterpolate(i) {
      return function(t) {
        this.textContent = i.call(this, t);
      };
    }

    function textTween(value) {
      var t0, i0;
      function tween() {
        var i = value.apply(this, arguments);
        if (i !== i0) t0 = (i0 = i) && textInterpolate(i);
        return t0;
      }
      tween._value = value;
      return tween;
    }

    function transition_textTween(value) {
      var key = "text";
      if (arguments.length < 1) return (key = this.tween(key)) && key._value;
      if (value == null) return this.tween(key, null);
      if (typeof value !== "function") throw new Error;
      return this.tween(key, textTween(value));
    }

    function transition_transition() {
      var name = this._name,
          id0 = this._id,
          id1 = newId();

      for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            var inherit = get$1(node, id0);
            schedule(node, name, id1, i, group, {
              time: inherit.time + inherit.delay + inherit.duration,
              delay: 0,
              duration: inherit.duration,
              ease: inherit.ease
            });
          }
        }
      }

      return new Transition(groups, this._parents, name, id1);
    }

    function transition_end() {
      var on0, on1, that = this, id = that._id, size = that.size();
      return new Promise(function(resolve, reject) {
        var cancel = {value: reject},
            end = {value: function() { if (--size === 0) resolve(); }};

        that.each(function() {
          var schedule = set$6(this, id),
              on = schedule.on;

          // If this node shared a dispatch with the previous node,
          // just assign the updated shared dispatch and we’re done!
          // Otherwise, copy-on-write.
          if (on !== on0) {
            on1 = (on0 = on).copy();
            on1._.cancel.push(cancel);
            on1._.interrupt.push(cancel);
            on1._.end.push(end);
          }

          schedule.on = on1;
        });

        // The selection was empty, resolve end immediately
        if (size === 0) resolve();
      });
    }

    var id = 0;

    function Transition(groups, parents, name, id) {
      this._groups = groups;
      this._parents = parents;
      this._name = name;
      this._id = id;
    }

    function transition(name) {
      return selection().transition(name);
    }

    function newId() {
      return ++id;
    }

    var selection_prototype = selection.prototype;

    Transition.prototype = transition.prototype = {
      constructor: Transition,
      select: transition_select,
      selectAll: transition_selectAll,
      filter: transition_filter,
      merge: transition_merge,
      selection: transition_selection,
      transition: transition_transition,
      call: selection_prototype.call,
      nodes: selection_prototype.nodes,
      node: selection_prototype.node,
      size: selection_prototype.size,
      empty: selection_prototype.empty,
      each: selection_prototype.each,
      on: transition_on,
      attr: transition_attr,
      attrTween: transition_attrTween,
      style: transition_style,
      styleTween: transition_styleTween,
      text: transition_text,
      textTween: transition_textTween,
      remove: transition_remove,
      tween: transition_tween,
      delay: transition_delay,
      duration: transition_duration,
      ease: transition_ease,
      easeVarying: transition_easeVarying,
      end: transition_end,
      [Symbol.iterator]: selection_prototype[Symbol.iterator]
    };

    const linear$2 = t => +t;

    function quadIn(t) {
      return t * t;
    }

    function quadOut(t) {
      return t * (2 - t);
    }

    function quadInOut(t) {
      return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
    }

    function cubicIn(t) {
      return t * t * t;
    }

    function cubicOut(t) {
      return --t * t * t + 1;
    }

    function cubicInOut(t) {
      return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
    }

    var exponent = 3;

    var polyIn = (function custom(e) {
      e = +e;

      function polyIn(t) {
        return Math.pow(t, e);
      }

      polyIn.exponent = custom;

      return polyIn;
    })(exponent);

    var polyOut = (function custom(e) {
      e = +e;

      function polyOut(t) {
        return 1 - Math.pow(1 - t, e);
      }

      polyOut.exponent = custom;

      return polyOut;
    })(exponent);

    var polyInOut = (function custom(e) {
      e = +e;

      function polyInOut(t) {
        return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
      }

      polyInOut.exponent = custom;

      return polyInOut;
    })(exponent);

    var pi = Math.PI,
        halfPi = pi / 2;

    function sinIn(t) {
      return (+t === 1) ? 1 : 1 - Math.cos(t * halfPi);
    }

    function sinOut(t) {
      return Math.sin(t * halfPi);
    }

    function sinInOut(t) {
      return (1 - Math.cos(pi * t)) / 2;
    }

    // tpmt is two power minus ten times t scaled to [0,1]
    function tpmt(x) {
      return (Math.pow(2, -10 * x) - 0.0009765625) * 1.0009775171065494;
    }

    function expIn(t) {
      return tpmt(1 - +t);
    }

    function expOut(t) {
      return 1 - tpmt(t);
    }

    function expInOut(t) {
      return ((t *= 2) <= 1 ? tpmt(1 - t) : 2 - tpmt(t - 1)) / 2;
    }

    function circleIn(t) {
      return 1 - Math.sqrt(1 - t * t);
    }

    function circleOut(t) {
      return Math.sqrt(1 - --t * t);
    }

    function circleInOut(t) {
      return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
    }

    var b1 = 4 / 11,
        b2 = 6 / 11,
        b3 = 8 / 11,
        b4 = 3 / 4,
        b5 = 9 / 11,
        b6 = 10 / 11,
        b7 = 15 / 16,
        b8 = 21 / 22,
        b9 = 63 / 64,
        b0 = 1 / b1 / b1;

    function bounceIn(t) {
      return 1 - bounceOut(1 - t);
    }

    function bounceOut(t) {
      return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
    }

    function bounceInOut(t) {
      return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
    }

    var overshoot = 1.70158;

    var backIn = (function custom(s) {
      s = +s;

      function backIn(t) {
        return (t = +t) * t * (s * (t - 1) + t);
      }

      backIn.overshoot = custom;

      return backIn;
    })(overshoot);

    var backOut = (function custom(s) {
      s = +s;

      function backOut(t) {
        return --t * t * ((t + 1) * s + t) + 1;
      }

      backOut.overshoot = custom;

      return backOut;
    })(overshoot);

    var backInOut = (function custom(s) {
      s = +s;

      function backInOut(t) {
        return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
      }

      backInOut.overshoot = custom;

      return backInOut;
    })(overshoot);

    var tau = 2 * Math.PI,
        amplitude = 1,
        period = 0.3;

    var elasticIn = (function custom(a, p) {
      var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

      function elasticIn(t) {
        return a * tpmt(-(--t)) * Math.sin((s - t) / p);
      }

      elasticIn.amplitude = function(a) { return custom(a, p * tau); };
      elasticIn.period = function(p) { return custom(a, p); };

      return elasticIn;
    })(amplitude, period);

    var elasticOut = (function custom(a, p) {
      var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

      function elasticOut(t) {
        return 1 - a * tpmt(t = +t) * Math.sin((t + s) / p);
      }

      elasticOut.amplitude = function(a) { return custom(a, p * tau); };
      elasticOut.period = function(p) { return custom(a, p); };

      return elasticOut;
    })(amplitude, period);

    var elasticInOut = (function custom(a, p) {
      var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

      function elasticInOut(t) {
        return ((t = t * 2 - 1) < 0
            ? a * tpmt(-t) * Math.sin((s - t) / p)
            : 2 - a * tpmt(t) * Math.sin((s + t) / p)) / 2;
      }

      elasticInOut.amplitude = function(a) { return custom(a, p * tau); };
      elasticInOut.period = function(p) { return custom(a, p); };

      return elasticInOut;
    })(amplitude, period);

    var defaultTiming = {
      time: null, // Set on use.
      delay: 0,
      duration: 250,
      ease: cubicInOut
    };

    function inherit(node, id) {
      var timing;
      while (!(timing = node.__transition) || !(timing = timing[id])) {
        if (!(node = node.parentNode)) {
          throw new Error(`transition ${id} not found`);
        }
      }
      return timing;
    }

    function selection_transition(name) {
      var id,
          timing;

      if (name instanceof Transition) {
        id = name._id, name = name._name;
      } else {
        id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
      }

      for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
          if (node = group[i]) {
            schedule(node, name, id, i, group, timing || inherit(node, id));
          }
        }
      }

      return new Transition(groups, this._parents, name, id);
    }

    selection.prototype.interrupt = selection_interrupt;
    selection.prototype.transition = selection_transition;

    var root$1 = [null];

    function active(node, name) {
      var schedules = node.__transition,
          schedule,
          i;

      if (schedules) {
        name = name == null ? null : name + "";
        for (i in schedules) {
          if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {
            return new Transition([[node]], root$1, name, +i);
          }
        }
      }

      return null;
    }

    var constant$4 = x => () => x;

    function BrushEvent(type, {
      sourceEvent,
      target,
      selection,
      mode,
      dispatch
    }) {
      Object.defineProperties(this, {
        type: {value: type, enumerable: true, configurable: true},
        sourceEvent: {value: sourceEvent, enumerable: true, configurable: true},
        target: {value: target, enumerable: true, configurable: true},
        selection: {value: selection, enumerable: true, configurable: true},
        mode: {value: mode, enumerable: true, configurable: true},
        _: {value: dispatch}
      });
    }

    function nopropagation$1(event) {
      event.stopImmediatePropagation();
    }

    function noevent$1(event) {
      event.preventDefault();
      event.stopImmediatePropagation();
    }

    var MODE_DRAG = {name: "drag"},
        MODE_SPACE = {name: "space"},
        MODE_HANDLE = {name: "handle"},
        MODE_CENTER = {name: "center"};

    const {abs, max: max$2, min: min$2} = Math;

    function number1(e) {
      return [+e[0], +e[1]];
    }

    function number2(e) {
      return [number1(e[0]), number1(e[1])];
    }

    var X = {
      name: "x",
      handles: ["w", "e"].map(type),
      input: function(x, e) { return x == null ? null : [[+x[0], e[0][1]], [+x[1], e[1][1]]]; },
      output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }
    };

    var Y = {
      name: "y",
      handles: ["n", "s"].map(type),
      input: function(y, e) { return y == null ? null : [[e[0][0], +y[0]], [e[1][0], +y[1]]]; },
      output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }
    };

    var XY = {
      name: "xy",
      handles: ["n", "w", "e", "s", "nw", "ne", "sw", "se"].map(type),
      input: function(xy) { return xy == null ? null : number2(xy); },
      output: function(xy) { return xy; }
    };

    var cursors = {
      overlay: "crosshair",
      selection: "move",
      n: "ns-resize",
      e: "ew-resize",
      s: "ns-resize",
      w: "ew-resize",
      nw: "nwse-resize",
      ne: "nesw-resize",
      se: "nwse-resize",
      sw: "nesw-resize"
    };

    var flipX = {
      e: "w",
      w: "e",
      nw: "ne",
      ne: "nw",
      se: "sw",
      sw: "se"
    };

    var flipY = {
      n: "s",
      s: "n",
      nw: "sw",
      ne: "se",
      se: "ne",
      sw: "nw"
    };

    var signsX = {
      overlay: +1,
      selection: +1,
      n: null,
      e: +1,
      s: null,
      w: -1,
      nw: -1,
      ne: +1,
      se: +1,
      sw: -1
    };

    var signsY = {
      overlay: +1,
      selection: +1,
      n: -1,
      e: null,
      s: +1,
      w: null,
      nw: -1,
      ne: -1,
      se: +1,
      sw: +1
    };

    function type(t) {
      return {type: t};
    }

    // Ignore right-click, since that should open the context menu.
    function defaultFilter$1(event) {
      return !event.ctrlKey && !event.button;
    }

    function defaultExtent() {
      var svg = this.ownerSVGElement || this;
      if (svg.hasAttribute("viewBox")) {
        svg = svg.viewBox.baseVal;
        return [[svg.x, svg.y], [svg.x + svg.width, svg.y + svg.height]];
      }
      return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];
    }

    function defaultTouchable$1() {
      return navigator.maxTouchPoints || ("ontouchstart" in this);
    }

    // Like d3.local, but with the name “__brush” rather than auto-generated.
    function local$1(node) {
      while (!node.__brush) if (!(node = node.parentNode)) return;
      return node.__brush;
    }

    function empty$3(extent) {
      return extent[0][0] === extent[1][0]
          || extent[0][1] === extent[1][1];
    }

    function brushSelection(node) {
      var state = node.__brush;
      return state ? state.dim.output(state.selection) : null;
    }

    function brushX() {
      return brush$1(X);
    }

    function brushY() {
      return brush$1(Y);
    }

    function brush() {
      return brush$1(XY);
    }

    function brush$1(dim) {
      var extent = defaultExtent,
          filter = defaultFilter$1,
          touchable = defaultTouchable$1,
          keys = true,
          listeners = dispatch("start", "brush", "end"),
          handleSize = 6,
          touchending;

      function brush(group) {
        var overlay = group
            .property("__brush", initialize)
          .selectAll(".overlay")
          .data([type("overlay")]);

        overlay.enter().append("rect")
            .attr("class", "overlay")
            .attr("pointer-events", "all")
            .attr("cursor", cursors.overlay)
          .merge(overlay)
            .each(function() {
              var extent = local$1(this).extent;
              select(this)
                  .attr("x", extent[0][0])
                  .attr("y", extent[0][1])
                  .attr("width", extent[1][0] - extent[0][0])
                  .attr("height", extent[1][1] - extent[0][1]);
            });

        group.selectAll(".selection")
          .data([type("selection")])
          .enter().append("rect")
            .attr("class", "selection")
            .attr("cursor", cursors.selection)
            .attr("fill", "#777")
            .attr("fill-opacity", 0.3)
            .attr("stroke", "#fff")
            .attr("shape-rendering", "crispEdges");

        var handle = group.selectAll(".handle")
          .data(dim.handles, function(d) { return d.type; });

        handle.exit().remove();

        handle.enter().append("rect")
            .attr("class", function(d) { return "handle handle--" + d.type; })
            .attr("cursor", function(d) { return cursors[d.type]; });

        group
            .each(redraw)
            .attr("fill", "none")
            .attr("pointer-events", "all")
            .on("mousedown.brush", started)
          .filter(touchable)
            .on("touchstart.brush", started)
            .on("touchmove.brush", touchmoved)
            .on("touchend.brush touchcancel.brush", touchended)
            .style("touch-action", "none")
            .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
      }

      brush.move = function(group, selection) {
        if (group.tween) {
          group
              .on("start.brush", function(event) { emitter(this, arguments).beforestart().start(event); })
              .on("interrupt.brush end.brush", function(event) { emitter(this, arguments).end(event); })
              .tween("brush", function() {
                var that = this,
                    state = that.__brush,
                    emit = emitter(that, arguments),
                    selection0 = state.selection,
                    selection1 = dim.input(typeof selection === "function" ? selection.apply(this, arguments) : selection, state.extent),
                    i = interpolate(selection0, selection1);

                function tween(t) {
                  state.selection = t === 1 && selection1 === null ? null : i(t);
                  redraw.call(that);
                  emit.brush();
                }

                return selection0 !== null && selection1 !== null ? tween : tween(1);
              });
        } else {
          group
              .each(function() {
                var that = this,
                    args = arguments,
                    state = that.__brush,
                    selection1 = dim.input(typeof selection === "function" ? selection.apply(that, args) : selection, state.extent),
                    emit = emitter(that, args).beforestart();

                interrupt(that);
                state.selection = selection1 === null ? null : selection1;
                redraw.call(that);
                emit.start().brush().end();
              });
        }
      };

      brush.clear = function(group) {
        brush.move(group, null);
      };

      function redraw() {
        var group = select(this),
            selection = local$1(this).selection;

        if (selection) {
          group.selectAll(".selection")
              .style("display", null)
              .attr("x", selection[0][0])
              .attr("y", selection[0][1])
              .attr("width", selection[1][0] - selection[0][0])
              .attr("height", selection[1][1] - selection[0][1]);

          group.selectAll(".handle")
              .style("display", null)
              .attr("x", function(d) { return d.type[d.type.length - 1] === "e" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })
              .attr("y", function(d) { return d.type[0] === "s" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })
              .attr("width", function(d) { return d.type === "n" || d.type === "s" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })
              .attr("height", function(d) { return d.type === "e" || d.type === "w" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });
        }

        else {
          group.selectAll(".selection,.handle")
              .style("display", "none")
              .attr("x", null)
              .attr("y", null)
              .attr("width", null)
              .attr("height", null);
        }
      }

      function emitter(that, args, clean) {
        var emit = that.__brush.emitter;
        return emit && (!clean || !emit.clean) ? emit : new Emitter(that, args, clean);
      }

      function Emitter(that, args, clean) {
        this.that = that;
        this.args = args;
        this.state = that.__brush;
        this.active = 0;
        this.clean = clean;
      }

      Emitter.prototype = {
        beforestart: function() {
          if (++this.active === 1) this.state.emitter = this, this.starting = true;
          return this;
        },
        start: function(event, mode) {
          if (this.starting) this.starting = false, this.emit("start", event, mode);
          else this.emit("brush", event);
          return this;
        },
        brush: function(event, mode) {
          this.emit("brush", event, mode);
          return this;
        },
        end: function(event, mode) {
          if (--this.active === 0) delete this.state.emitter, this.emit("end", event, mode);
          return this;
        },
        emit: function(type, event, mode) {
          var d = select(this.that).datum();
          listeners.call(
            type,
            this.that,
            new BrushEvent(type, {
              sourceEvent: event,
              target: brush,
              selection: dim.output(this.state.selection),
              mode,
              dispatch: listeners
            }),
            d
          );
        }
      };

      function started(event) {
        if (touchending && !event.touches) return;
        if (!filter.apply(this, arguments)) return;

        var that = this,
            type = event.target.__data__.type,
            mode = (keys && event.metaKey ? type = "overlay" : type) === "selection" ? MODE_DRAG : (keys && event.altKey ? MODE_CENTER : MODE_HANDLE),
            signX = dim === Y ? null : signsX[type],
            signY = dim === X ? null : signsY[type],
            state = local$1(that),
            extent = state.extent,
            selection = state.selection,
            W = extent[0][0], w0, w1,
            N = extent[0][1], n0, n1,
            E = extent[1][0], e0, e1,
            S = extent[1][1], s0, s1,
            dx = 0,
            dy = 0,
            moving,
            shifting = signX && signY && keys && event.shiftKey,
            lockX,
            lockY,
            points = Array.from(event.touches || [event], t => {
              const i = t.identifier;
              t = pointer(t, that);
              t.point0 = t.slice();
              t.identifier = i;
              return t;
            });

        if (type === "overlay") {
          if (selection) moving = true;
          const pts = [points[0], points[1] || points[0]];
          state.selection = selection = [[
              w0 = dim === Y ? W : min$2(pts[0][0], pts[1][0]),
              n0 = dim === X ? N : min$2(pts[0][1], pts[1][1])
            ], [
              e0 = dim === Y ? E : max$2(pts[0][0], pts[1][0]),
              s0 = dim === X ? S : max$2(pts[0][1], pts[1][1])
            ]];
          if (points.length > 1) move();
        } else {
          w0 = selection[0][0];
          n0 = selection[0][1];
          e0 = selection[1][0];
          s0 = selection[1][1];
        }

        w1 = w0;
        n1 = n0;
        e1 = e0;
        s1 = s0;

        var group = select(that)
            .attr("pointer-events", "none");

        var overlay = group.selectAll(".overlay")
            .attr("cursor", cursors[type]);

        interrupt(that);
        var emit = emitter(that, arguments, true).beforestart();

        if (event.touches) {
          emit.moved = moved;
          emit.ended = ended;
        } else {
          var view = select(event.view)
              .on("mousemove.brush", moved, true)
              .on("mouseup.brush", ended, true);
          if (keys) view
              .on("keydown.brush", keydowned, true)
              .on("keyup.brush", keyupped, true);

          dragDisable(event.view);
        }

        redraw.call(that);
        emit.start(event, mode.name);

        function moved(event) {
          for (const p of event.changedTouches || [event]) {
            for (const d of points)
              if (d.identifier === p.identifier) d.cur = pointer(p, that);
          }
          if (shifting && !lockX && !lockY && points.length === 1) {
            const point = points[0];
            if (abs(point.cur[0] - point[0]) > abs(point.cur[1] - point[1]))
              lockY = true;
            else
              lockX = true;
          }
          for (const point of points)
            if (point.cur) point[0] = point.cur[0], point[1] = point.cur[1];
          moving = true;
          noevent$1(event);
          move(event);
        }

        function move(event) {
          const point = points[0], point0 = point.point0;
          var t;

          dx = point[0] - point0[0];
          dy = point[1] - point0[1];

          switch (mode) {
            case MODE_SPACE:
            case MODE_DRAG: {
              if (signX) dx = max$2(W - w0, min$2(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
              if (signY) dy = max$2(N - n0, min$2(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
              break;
            }
            case MODE_HANDLE: {
              if (points[1]) {
                if (signX) w1 = max$2(W, min$2(E, points[0][0])), e1 = max$2(W, min$2(E, points[1][0])), signX = 1;
                if (signY) n1 = max$2(N, min$2(S, points[0][1])), s1 = max$2(N, min$2(S, points[1][1])), signY = 1;
              } else {
                if (signX < 0) dx = max$2(W - w0, min$2(E - w0, dx)), w1 = w0 + dx, e1 = e0;
                else if (signX > 0) dx = max$2(W - e0, min$2(E - e0, dx)), w1 = w0, e1 = e0 + dx;
                if (signY < 0) dy = max$2(N - n0, min$2(S - n0, dy)), n1 = n0 + dy, s1 = s0;
                else if (signY > 0) dy = max$2(N - s0, min$2(S - s0, dy)), n1 = n0, s1 = s0 + dy;
              }
              break;
            }
            case MODE_CENTER: {
              if (signX) w1 = max$2(W, min$2(E, w0 - dx * signX)), e1 = max$2(W, min$2(E, e0 + dx * signX));
              if (signY) n1 = max$2(N, min$2(S, n0 - dy * signY)), s1 = max$2(N, min$2(S, s0 + dy * signY));
              break;
            }
          }

          if (e1 < w1) {
            signX *= -1;
            t = w0, w0 = e0, e0 = t;
            t = w1, w1 = e1, e1 = t;
            if (type in flipX) overlay.attr("cursor", cursors[type = flipX[type]]);
          }

          if (s1 < n1) {
            signY *= -1;
            t = n0, n0 = s0, s0 = t;
            t = n1, n1 = s1, s1 = t;
            if (type in flipY) overlay.attr("cursor", cursors[type = flipY[type]]);
          }

          if (state.selection) selection = state.selection; // May be set by brush.move!
          if (lockX) w1 = selection[0][0], e1 = selection[1][0];
          if (lockY) n1 = selection[0][1], s1 = selection[1][1];

          if (selection[0][0] !== w1
              || selection[0][1] !== n1
              || selection[1][0] !== e1
              || selection[1][1] !== s1) {
            state.selection = [[w1, n1], [e1, s1]];
            redraw.call(that);
            emit.brush(event, mode.name);
          }
        }

        function ended(event) {
          nopropagation$1(event);
          if (event.touches) {
            if (event.touches.length) return;
            if (touchending) clearTimeout(touchending);
            touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
          } else {
            yesdrag(event.view, moving);
            view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
          }
          group.attr("pointer-events", "all");
          overlay.attr("cursor", cursors.overlay);
          if (state.selection) selection = state.selection; // May be set by brush.move (on start)!
          if (empty$3(selection)) state.selection = null, redraw.call(that);
          emit.end(event, mode.name);
        }

        function keydowned(event) {
          switch (event.keyCode) {
            case 16: { // SHIFT
              shifting = signX && signY;
              break;
            }
            case 18: { // ALT
              if (mode === MODE_HANDLE) {
                if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
                if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
                mode = MODE_CENTER;
                move();
              }
              break;
            }
            case 32: { // SPACE; takes priority over ALT
              if (mode === MODE_HANDLE || mode === MODE_CENTER) {
                if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;
                if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;
                mode = MODE_SPACE;
                overlay.attr("cursor", cursors.selection);
                move();
              }
              break;
            }
            default: return;
          }
          noevent$1(event);
        }

        function keyupped(event) {
          switch (event.keyCode) {
            case 16: { // SHIFT
              if (shifting) {
                lockX = lockY = shifting = false;
                move();
              }
              break;
            }
            case 18: { // ALT
              if (mode === MODE_CENTER) {
                if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
                if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
                mode = MODE_HANDLE;
                move();
              }
              break;
            }
            case 32: { // SPACE
              if (mode === MODE_SPACE) {
                if (event.altKey) {
                  if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
                  if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
                  mode = MODE_CENTER;
                } else {
                  if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
                  if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
                  mode = MODE_HANDLE;
                }
                overlay.attr("cursor", cursors[type]);
                move();
              }
              break;
            }
            default: return;
          }
          noevent$1(event);
        }
      }

      function touchmoved(event) {
        emitter(this, arguments).moved(event);
      }

      function touchended(event) {
        emitter(this, arguments).ended(event);
      }

      function initialize() {
        var state = this.__brush || {selection: null};
        state.extent = number2(extent.apply(this, arguments));
        state.dim = dim;
        return state;
      }

      brush.extent = function(_) {
        return arguments.length ? (extent = typeof _ === "function" ? _ : constant$4(number2(_)), brush) : extent;
      };

      brush.filter = function(_) {
        return arguments.length ? (filter = typeof _ === "function" ? _ : constant$4(!!_), brush) : filter;
      };

      brush.touchable = function(_) {
        return arguments.length ? (touchable = typeof _ === "function" ? _ : constant$4(!!_), brush) : touchable;
      };

      brush.handleSize = function(_) {
        return arguments.length ? (handleSize = +_, brush) : handleSize;
      };

      brush.keyModifiers = function(_) {
        return arguments.length ? (keys = !!_, brush) : keys;
      };

      brush.on = function() {
        var value = listeners.on.apply(listeners, arguments);
        return value === listeners ? brush : value;
      };

      return brush;
    }

    var abs$1 = Math.abs;
    var cos = Math.cos;
    var sin = Math.sin;
    var pi$1 = Math.PI;
    var halfPi$1 = pi$1 / 2;
    var tau$1 = pi$1 * 2;
    var max$3 = Math.max;
    var epsilon$1 = 1e-12;

    function range(i, j) {
      return Array.from({length: j - i}, (_, k) => i + k);
    }

    function compareValue(compare) {
      return function(a, b) {
        return compare(
          a.source.value + a.target.value,
          b.source.value + b.target.value
        );
      };
    }

    function chord() {
      return chord$1(false, false);
    }

    function chordTranspose() {
      return chord$1(false, true);
    }

    function chordDirected() {
      return chord$1(true, false);
    }

    function chord$1(directed, transpose) {
      var padAngle = 0,
          sortGroups = null,
          sortSubgroups = null,
          sortChords = null;

      function chord(matrix) {
        var n = matrix.length,
            groupSums = new Array(n),
            groupIndex = range(0, n),
            chords = new Array(n * n),
            groups = new Array(n),
            k = 0, dx;

        matrix = Float64Array.from({length: n * n}, transpose
            ? (_, i) => matrix[i % n][i / n | 0]
            : (_, i) => matrix[i / n | 0][i % n]);

        // Compute the scaling factor from value to angle in [0, 2pi].
        for (let i = 0; i < n; ++i) {
          let x = 0;
          for (let j = 0; j < n; ++j) x += matrix[i * n + j] + directed * matrix[j * n + i];
          k += groupSums[i] = x;
        }
        k = max$3(0, tau$1 - padAngle * n) / k;
        dx = k ? padAngle : tau$1 / n;

        // Compute the angles for each group and constituent chord.
        {
          let x = 0;
          if (sortGroups) groupIndex.sort((a, b) => sortGroups(groupSums[a], groupSums[b]));
          for (const i of groupIndex) {
            const x0 = x;
            if (directed) {
              const subgroupIndex = range(~n + 1, n).filter(j => j < 0 ? matrix[~j * n + i] : matrix[i * n + j]);
              if (sortSubgroups) subgroupIndex.sort((a, b) => sortSubgroups(a < 0 ? -matrix[~a * n + i] : matrix[i * n + a], b < 0 ? -matrix[~b * n + i] : matrix[i * n + b]));
              for (const j of subgroupIndex) {
                if (j < 0) {
                  const chord = chords[~j * n + i] || (chords[~j * n + i] = {source: null, target: null});
                  chord.target = {index: i, startAngle: x, endAngle: x += matrix[~j * n + i] * k, value: matrix[~j * n + i]};
                } else {
                  const chord = chords[i * n + j] || (chords[i * n + j] = {source: null, target: null});
                  chord.source = {index: i, startAngle: x, endAngle: x += matrix[i * n + j] * k, value: matrix[i * n + j]};
                }
              }
              groups[i] = {index: i, startAngle: x0, endAngle: x, value: groupSums[i]};
            } else {
              const subgroupIndex = range(0, n).filter(j => matrix[i * n + j] || matrix[j * n + i]);
              if (sortSubgroups) subgroupIndex.sort((a, b) => sortSubgroups(matrix[i * n + a], matrix[i * n + b]));
              for (const j of subgroupIndex) {
                let chord;
                if (i < j) {
                  chord = chords[i * n + j] || (chords[i * n + j] = {source: null, target: null});
                  chord.source = {index: i, startAngle: x, endAngle: x += matrix[i * n + j] * k, value: matrix[i * n + j]};
                } else {
                  chord = chords[j * n + i] || (chords[j * n + i] = {source: null, target: null});
                  chord.target = {index: i, startAngle: x, endAngle: x += matrix[i * n + j] * k, value: matrix[i * n + j]};
                  if (i === j) chord.source = chord.target;
                }
                if (chord.source && chord.target && chord.source.value < chord.target.value) {
                  const source = chord.source;
                  chord.source = chord.target;
                  chord.target = source;
                }
              }
              groups[i] = {index: i, startAngle: x0, endAngle: x, value: groupSums[i]};
            }
            x += dx;
          }
        }

        // Remove empty chords.
        chords = Object.values(chords);
        chords.groups = groups;
        return sortChords ? chords.sort(sortChords) : chords;
      }

      chord.padAngle = function(_) {
        return arguments.length ? (padAngle = max$3(0, _), chord) : padAngle;
      };

      chord.sortGroups = function(_) {
        return arguments.length ? (sortGroups = _, chord) : sortGroups;
      };

      chord.sortSubgroups = function(_) {
        return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;
      };

      chord.sortChords = function(_) {
        return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;
      };

      return chord;
    }

    const pi$2 = Math.PI,
        tau$2 = 2 * pi$2,
        epsilon$2 = 1e-6,
        tauEpsilon = tau$2 - epsilon$2;

    function Path() {
      this._x0 = this._y0 = // start of current subpath
      this._x1 = this._y1 = null; // end of current subpath
      this._ = "";
    }

    function path() {
      return new Path;
    }

    Path.prototype = path.prototype = {
      constructor: Path,
      moveTo: function(x, y) {
        this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
      },
      closePath: function() {
        if (this._x1 !== null) {
          this._x1 = this._x0, this._y1 = this._y0;
          this._ += "Z";
        }
      },
      lineTo: function(x, y) {
        this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
      },
      quadraticCurveTo: function(x1, y1, x, y) {
        this._ += "Q" + (+x1) + "," + (+y1) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
      },
      bezierCurveTo: function(x1, y1, x2, y2, x, y) {
        this._ += "C" + (+x1) + "," + (+y1) + "," + (+x2) + "," + (+y2) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
      },
      arcTo: function(x1, y1, x2, y2, r) {
        x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
        var x0 = this._x1,
            y0 = this._y1,
            x21 = x2 - x1,
            y21 = y2 - y1,
            x01 = x0 - x1,
            y01 = y0 - y1,
            l01_2 = x01 * x01 + y01 * y01;

        // Is the radius negative? Error.
        if (r < 0) throw new Error("negative radius: " + r);

        // Is this path empty? Move to (x1,y1).
        if (this._x1 === null) {
          this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
        }

        // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
        else if (!(l01_2 > epsilon$2));

        // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
        // Equivalently, is (x1,y1) coincident with (x2,y2)?
        // Or, is the radius zero? Line to (x1,y1).
        else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon$2) || !r) {
          this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
        }

        // Otherwise, draw an arc!
        else {
          var x20 = x2 - x0,
              y20 = y2 - y0,
              l21_2 = x21 * x21 + y21 * y21,
              l20_2 = x20 * x20 + y20 * y20,
              l21 = Math.sqrt(l21_2),
              l01 = Math.sqrt(l01_2),
              l = r * Math.tan((pi$2 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
              t01 = l / l01,
              t21 = l / l21;

          // If the start tangent is not coincident with (x0,y0), line to.
          if (Math.abs(t01 - 1) > epsilon$2) {
            this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
          }

          this._ += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
        }
      },
      arc: function(x, y, r, a0, a1, ccw) {
        x = +x, y = +y, r = +r, ccw = !!ccw;
        var dx = r * Math.cos(a0),
            dy = r * Math.sin(a0),
            x0 = x + dx,
            y0 = y + dy,
            cw = 1 ^ ccw,
            da = ccw ? a0 - a1 : a1 - a0;

        // Is the radius negative? Error.
        if (r < 0) throw new Error("negative radius: " + r);

        // Is this path empty? Move to (x0,y0).
        if (this._x1 === null) {
          this._ += "M" + x0 + "," + y0;
        }

        // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
        else if (Math.abs(this._x1 - x0) > epsilon$2 || Math.abs(this._y1 - y0) > epsilon$2) {
          this._ += "L" + x0 + "," + y0;
        }

        // Is this arc empty? We’re done.
        if (!r) return;

        // Does the angle go the wrong way? Flip the direction.
        if (da < 0) da = da % tau$2 + tau$2;

        // Is this a complete circle? Draw two arcs to complete the circle.
        if (da > tauEpsilon) {
          this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
        }

        // Is this arc non-empty? Draw an arc!
        else if (da > epsilon$2) {
          this._ += "A" + r + "," + r + ",0," + (+(da >= pi$2)) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
        }
      },
      rect: function(x, y, w, h) {
        this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + (+w) + "v" + (+h) + "h" + (-w) + "Z";
      },
      toString: function() {
        return this._;
      }
    };

    var slice$2 = Array.prototype.slice;

    function constant$5(x) {
      return function() {
        return x;
      };
    }

    function defaultSource(d) {
      return d.source;
    }

    function defaultTarget(d) {
      return d.target;
    }

    function defaultRadius(d) {
      return d.radius;
    }

    function defaultStartAngle(d) {
      return d.startAngle;
    }

    function defaultEndAngle(d) {
      return d.endAngle;
    }

    function defaultPadAngle() {
      return 0;
    }

    function defaultArrowheadRadius() {
      return 10;
    }

    function ribbon(headRadius) {
      var source = defaultSource,
          target = defaultTarget,
          sourceRadius = defaultRadius,
          targetRadius = defaultRadius,
          startAngle = defaultStartAngle,
          endAngle = defaultEndAngle,
          padAngle = defaultPadAngle,
          context = null;

      function ribbon() {
        var buffer,
            s = source.apply(this, arguments),
            t = target.apply(this, arguments),
            ap = padAngle.apply(this, arguments) / 2,
            argv = slice$2.call(arguments),
            sr = +sourceRadius.apply(this, (argv[0] = s, argv)),
            sa0 = startAngle.apply(this, argv) - halfPi$1,
            sa1 = endAngle.apply(this, argv) - halfPi$1,
            tr = +targetRadius.apply(this, (argv[0] = t, argv)),
            ta0 = startAngle.apply(this, argv) - halfPi$1,
            ta1 = endAngle.apply(this, argv) - halfPi$1;

        if (!context) context = buffer = path();

        if (ap > epsilon$1) {
          if (abs$1(sa1 - sa0) > ap * 2 + epsilon$1) sa1 > sa0 ? (sa0 += ap, sa1 -= ap) : (sa0 -= ap, sa1 += ap);
          else sa0 = sa1 = (sa0 + sa1) / 2;
          if (abs$1(ta1 - ta0) > ap * 2 + epsilon$1) ta1 > ta0 ? (ta0 += ap, ta1 -= ap) : (ta0 -= ap, ta1 += ap);
          else ta0 = ta1 = (ta0 + ta1) / 2;
        }

        context.moveTo(sr * cos(sa0), sr * sin(sa0));
        context.arc(0, 0, sr, sa0, sa1);
        if (sa0 !== ta0 || sa1 !== ta1) {
          if (headRadius) {
            var hr = +headRadius.apply(this, arguments), tr2 = tr - hr, ta2 = (ta0 + ta1) / 2;
            context.quadraticCurveTo(0, 0, tr2 * cos(ta0), tr2 * sin(ta0));
            context.lineTo(tr * cos(ta2), tr * sin(ta2));
            context.lineTo(tr2 * cos(ta1), tr2 * sin(ta1));
          } else {
            context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));
            context.arc(0, 0, tr, ta0, ta1);
          }
        }
        context.quadraticCurveTo(0, 0, sr * cos(sa0), sr * sin(sa0));
        context.closePath();

        if (buffer) return context = null, buffer + "" || null;
      }

      if (headRadius) ribbon.headRadius = function(_) {
        return arguments.length ? (headRadius = typeof _ === "function" ? _ : constant$5(+_), ribbon) : headRadius;
      };

      ribbon.radius = function(_) {
        return arguments.length ? (sourceRadius = targetRadius = typeof _ === "function" ? _ : constant$5(+_), ribbon) : sourceRadius;
      };

      ribbon.sourceRadius = function(_) {
        return arguments.length ? (sourceRadius = typeof _ === "function" ? _ : constant$5(+_), ribbon) : sourceRadius;
      };

      ribbon.targetRadius = function(_) {
        return arguments.length ? (targetRadius = typeof _ === "function" ? _ : constant$5(+_), ribbon) : targetRadius;
      };

      ribbon.startAngle = function(_) {
        return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$5(+_), ribbon) : startAngle;
      };

      ribbon.endAngle = function(_) {
        return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$5(+_), ribbon) : endAngle;
      };

      ribbon.padAngle = function(_) {
        return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$5(+_), ribbon) : padAngle;
      };

      ribbon.source = function(_) {
        return arguments.length ? (source = _, ribbon) : source;
      };

      ribbon.target = function(_) {
        return arguments.length ? (target = _, ribbon) : target;
      };

      ribbon.context = function(_) {
        return arguments.length ? ((context = _ == null ? null : _), ribbon) : context;
      };

      return ribbon;
    }

    function ribbon$1() {
      return ribbon();
    }

    function ribbonArrow() {
      return ribbon(defaultArrowheadRadius);
    }

    var array$3 = Array.prototype;

    var slice$3 = array$3.slice;

    function ascending$2(a, b) {
      return a - b;
    }

    function area(ring) {
      var i = 0, n = ring.length, area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];
      while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];
      return area;
    }

    var constant$6 = x => () => x;

    function contains(ring, hole) {
      var i = -1, n = hole.length, c;
      while (++i < n) if (c = ringContains(ring, hole[i])) return c;
      return 0;
    }

    function ringContains(ring, point) {
      var x = point[0], y = point[1], contains = -1;
      for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
        var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];
        if (segmentContains(pi, pj, point)) return 0;
        if (((yi > y) !== (yj > y)) && ((x < (xj - xi) * (y - yi) / (yj - yi) + xi))) contains = -contains;
      }
      return contains;
    }

    function segmentContains(a, b, c) {
      var i; return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);
    }

    function collinear(a, b, c) {
      return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);
    }

    function within(p, q, r) {
      return p <= q && q <= r || r <= q && q <= p;
    }

    function noop$2() {}

    var cases = [
      [],
      [[[1.0, 1.5], [0.5, 1.0]]],
      [[[1.5, 1.0], [1.0, 1.5]]],
      [[[1.5, 1.0], [0.5, 1.0]]],
      [[[1.0, 0.5], [1.5, 1.0]]],
      [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]],
      [[[1.0, 0.5], [1.0, 1.5]]],
      [[[1.0, 0.5], [0.5, 1.0]]],
      [[[0.5, 1.0], [1.0, 0.5]]],
      [[[1.0, 1.5], [1.0, 0.5]]],
      [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]],
      [[[1.5, 1.0], [1.0, 0.5]]],
      [[[0.5, 1.0], [1.5, 1.0]]],
      [[[1.0, 1.5], [1.5, 1.0]]],
      [[[0.5, 1.0], [1.0, 1.5]]],
      []
    ];

    function contours() {
      var dx = 1,
          dy = 1,
          threshold = thresholdSturges,
          smooth = smoothLinear;

      function contours(values) {
        var tz = threshold(values);

        // Convert number of thresholds into uniform thresholds.
        if (!Array.isArray(tz)) {
          var domain = extent(values), start = domain[0], stop = domain[1];
          tz = tickStep(start, stop, tz);
          tz = sequence(Math.floor(start / tz) * tz, Math.floor(stop / tz) * tz, tz);
        } else {
          tz = tz.slice().sort(ascending$2);
        }

        return tz.map(function(value) {
          return contour(values, value);
        });
      }

      // Accumulate, smooth contour rings, assign holes to exterior rings.
      // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js
      function contour(values, value) {
        var polygons = [],
            holes = [];

        isorings(values, value, function(ring) {
          smooth(ring, values, value);
          if (area(ring) > 0) polygons.push([ring]);
          else holes.push(ring);
        });

        holes.forEach(function(hole) {
          for (var i = 0, n = polygons.length, polygon; i < n; ++i) {
            if (contains((polygon = polygons[i])[0], hole) !== -1) {
              polygon.push(hole);
              return;
            }
          }
        });

        return {
          type: "MultiPolygon",
          value: value,
          coordinates: polygons
        };
      }

      // Marching squares with isolines stitched into rings.
      // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js
      function isorings(values, value, callback) {
        var fragmentByStart = new Array,
            fragmentByEnd = new Array,
            x, y, t0, t1, t2, t3;

        // Special case for the first row (y = -1, t2 = t3 = 0).
        x = y = -1;
        t1 = values[0] >= value;
        cases[t1 << 1].forEach(stitch);
        while (++x < dx - 1) {
          t0 = t1, t1 = values[x + 1] >= value;
          cases[t0 | t1 << 1].forEach(stitch);
        }
        cases[t1 << 0].forEach(stitch);

        // General case for the intermediate rows.
        while (++y < dy - 1) {
          x = -1;
          t1 = values[y * dx + dx] >= value;
          t2 = values[y * dx] >= value;
          cases[t1 << 1 | t2 << 2].forEach(stitch);
          while (++x < dx - 1) {
            t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;
            t3 = t2, t2 = values[y * dx + x + 1] >= value;
            cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);
          }
          cases[t1 | t2 << 3].forEach(stitch);
        }

        // Special case for the last row (y = dy - 1, t0 = t1 = 0).
        x = -1;
        t2 = values[y * dx] >= value;
        cases[t2 << 2].forEach(stitch);
        while (++x < dx - 1) {
          t3 = t2, t2 = values[y * dx + x + 1] >= value;
          cases[t2 << 2 | t3 << 3].forEach(stitch);
        }
        cases[t2 << 3].forEach(stitch);

        function stitch(line) {
          var start = [line[0][0] + x, line[0][1] + y],
              end = [line[1][0] + x, line[1][1] + y],
              startIndex = index(start),
              endIndex = index(end),
              f, g;
          if (f = fragmentByEnd[startIndex]) {
            if (g = fragmentByStart[endIndex]) {
              delete fragmentByEnd[f.end];
              delete fragmentByStart[g.start];
              if (f === g) {
                f.ring.push(end);
                callback(f.ring);
              } else {
                fragmentByStart[f.start] = fragmentByEnd[g.end] = {start: f.start, end: g.end, ring: f.ring.concat(g.ring)};
              }
            } else {
              delete fragmentByEnd[f.end];
              f.ring.push(end);
              fragmentByEnd[f.end = endIndex] = f;
            }
          } else if (f = fragmentByStart[endIndex]) {
            if (g = fragmentByEnd[startIndex]) {
              delete fragmentByStart[f.start];
              delete fragmentByEnd[g.end];
              if (f === g) {
                f.ring.push(end);
                callback(f.ring);
              } else {
                fragmentByStart[g.start] = fragmentByEnd[f.end] = {start: g.start, end: f.end, ring: g.ring.concat(f.ring)};
              }
            } else {
              delete fragmentByStart[f.start];
              f.ring.unshift(start);
              fragmentByStart[f.start = startIndex] = f;
            }
          } else {
            fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {start: startIndex, end: endIndex, ring: [start, end]};
          }
        }
      }

      function index(point) {
        return point[0] * 2 + point[1] * (dx + 1) * 4;
      }

      function smoothLinear(ring, values, value) {
        ring.forEach(function(point) {
          var x = point[0],
              y = point[1],
              xt = x | 0,
              yt = y | 0,
              v0,
              v1 = values[yt * dx + xt];
          if (x > 0 && x < dx && xt === x) {
            v0 = values[yt * dx + xt - 1];
            point[0] = x + (value - v0) / (v1 - v0) - 0.5;
          }
          if (y > 0 && y < dy && yt === y) {
            v0 = values[(yt - 1) * dx + xt];
            point[1] = y + (value - v0) / (v1 - v0) - 0.5;
          }
        });
      }

      contours.contour = contour;

      contours.size = function(_) {
        if (!arguments.length) return [dx, dy];
        var _0 = Math.floor(_[0]), _1 = Math.floor(_[1]);
        if (!(_0 >= 0 && _1 >= 0)) throw new Error("invalid size");
        return dx = _0, dy = _1, contours;
      };

      contours.thresholds = function(_) {
        return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant$6(slice$3.call(_)) : constant$6(_), contours) : threshold;
      };

      contours.smooth = function(_) {
        return arguments.length ? (smooth = _ ? smoothLinear : noop$2, contours) : smooth === smoothLinear;
      };

      return contours;
    }

    // TODO Optimize edge cases.
    // TODO Optimize index calculation.
    // TODO Optimize arguments.
    function blurX(source, target, r) {
      var n = source.width,
          m = source.height,
          w = (r << 1) + 1;
      for (var j = 0; j < m; ++j) {
        for (var i = 0, sr = 0; i < n + r; ++i) {
          if (i < n) {
            sr += source.data[i + j * n];
          }
          if (i >= r) {
            if (i >= w) {
              sr -= source.data[i - w + j * n];
            }
            target.data[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);
          }
        }
      }
    }

    // TODO Optimize edge cases.
    // TODO Optimize index calculation.
    // TODO Optimize arguments.
    function blurY(source, target, r) {
      var n = source.width,
          m = source.height,
          w = (r << 1) + 1;
      for (var i = 0; i < n; ++i) {
        for (var j = 0, sr = 0; j < m + r; ++j) {
          if (j < m) {
            sr += source.data[i + j * n];
          }
          if (j >= r) {
            if (j >= w) {
              sr -= source.data[i + (j - w) * n];
            }
            target.data[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);
          }
        }
      }
    }

    function defaultX(d) {
      return d[0];
    }

    function defaultY(d) {
      return d[1];
    }

    function defaultWeight() {
      return 1;
    }

    function density() {
      var x = defaultX,
          y = defaultY,
          weight = defaultWeight,
          dx = 960,
          dy = 500,
          r = 20, // blur radius
          k = 2, // log2(grid cell size)
          o = r * 3, // grid offset, to pad for blur
          n = (dx + o * 2) >> k, // grid width
          m = (dy + o * 2) >> k, // grid height
          threshold = constant$6(20);

      function density(data) {
        var values0 = new Float32Array(n * m),
            values1 = new Float32Array(n * m);

        data.forEach(function(d, i, data) {
          var xi = (+x(d, i, data) + o) >> k,
              yi = (+y(d, i, data) + o) >> k,
              wi = +weight(d, i, data);
          if (xi >= 0 && xi < n && yi >= 0 && yi < m) {
            values0[xi + yi * n] += wi;
          }
        });

        // TODO Optimize.
        blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);
        blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);
        blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);
        blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);
        blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);
        blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);

        var tz = threshold(values0);

        // Convert number of thresholds into uniform thresholds.
        if (!Array.isArray(tz)) {
          var stop = max$1(values0);
          tz = tickStep(0, stop, tz);
          tz = sequence(0, Math.floor(stop / tz) * tz, tz);
          tz.shift();
        }

        return contours()
            .thresholds(tz)
            .size([n, m])
          (values0)
            .map(transform);
      }

      function transform(geometry) {
        geometry.value *= Math.pow(2, -2 * k); // Density in points per square pixel.
        geometry.coordinates.forEach(transformPolygon);
        return geometry;
      }

      function transformPolygon(coordinates) {
        coordinates.forEach(transformRing);
      }

      function transformRing(coordinates) {
        coordinates.forEach(transformPoint);
      }

      // TODO Optimize.
      function transformPoint(coordinates) {
        coordinates[0] = coordinates[0] * Math.pow(2, k) - o;
        coordinates[1] = coordinates[1] * Math.pow(2, k) - o;
      }

      function resize() {
        o = r * 3;
        n = (dx + o * 2) >> k;
        m = (dy + o * 2) >> k;
        return density;
      }

      density.x = function(_) {
        return arguments.length ? (x = typeof _ === "function" ? _ : constant$6(+_), density) : x;
      };

      density.y = function(_) {
        return arguments.length ? (y = typeof _ === "function" ? _ : constant$6(+_), density) : y;
      };

      density.weight = function(_) {
        return arguments.length ? (weight = typeof _ === "function" ? _ : constant$6(+_), density) : weight;
      };

      density.size = function(_) {
        if (!arguments.length) return [dx, dy];
        var _0 = +_[0], _1 = +_[1];
        if (!(_0 >= 0 && _1 >= 0)) throw new Error("invalid size");
        return dx = _0, dy = _1, resize();
      };

      density.cellSize = function(_) {
        if (!arguments.length) return 1 << k;
        if (!((_ = +_) >= 1)) throw new Error("invalid cell size");
        return k = Math.floor(Math.log(_) / Math.LN2), resize();
      };

      density.thresholds = function(_) {
        return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant$6(slice$3.call(_)) : constant$6(_), density) : threshold;
      };

      density.bandwidth = function(_) {
        if (!arguments.length) return Math.sqrt(r * (r + 1));
        if (!((_ = +_) >= 0)) throw new Error("invalid bandwidth");
        return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();
      };

      return density;
    }

    const EPSILON$2 = Math.pow(2, -52);
    const EDGE_STACK = new Uint32Array(512);

    class Delaunator {

        static from(points, getX = defaultGetX, getY = defaultGetY) {
            const n = points.length;
            const coords = new Float64Array(n * 2);

            for (let i = 0; i < n; i++) {
                const p = points[i];
                coords[2 * i] = getX(p);
                coords[2 * i + 1] = getY(p);
            }

            return new Delaunator(coords);
        }

        constructor(coords) {
            const n = coords.length >> 1;
            if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');

            this.coords = coords;

            // arrays that will store the triangulation graph
            const maxTriangles = Math.max(2 * n - 5, 0);
            this._triangles = new Uint32Array(maxTriangles * 3);
            this._halfedges = new Int32Array(maxTriangles * 3);

            // temporary arrays for tracking the edges of the advancing convex hull
            this._hashSize = Math.ceil(Math.sqrt(n));
            this._hullPrev = new Uint32Array(n); // edge to prev edge
            this._hullNext = new Uint32Array(n); // edge to next edge
            this._hullTri = new Uint32Array(n); // edge to adjacent triangle
            this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash

            // temporary arrays for sorting points
            this._ids = new Uint32Array(n);
            this._dists = new Float64Array(n);

            this.update();
        }

        update() {
            const {coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash} =  this;
            const n = coords.length >> 1;

            // populate an array of point indices; calculate input data bbox
            let minX = Infinity;
            let minY = Infinity;
            let maxX = -Infinity;
            let maxY = -Infinity;

            for (let i = 0; i < n; i++) {
                const x = coords[2 * i];
                const y = coords[2 * i + 1];
                if (x < minX) minX = x;
                if (y < minY) minY = y;
                if (x > maxX) maxX = x;
                if (y > maxY) maxY = y;
                this._ids[i] = i;
            }
            const cx = (minX + maxX) / 2;
            const cy = (minY + maxY) / 2;

            let minDist = Infinity;
            let i0, i1, i2;

            // pick a seed point close to the center
            for (let i = 0; i < n; i++) {
                const d = dist$1(cx, cy, coords[2 * i], coords[2 * i + 1]);
                if (d < minDist) {
                    i0 = i;
                    minDist = d;
                }
            }
            const i0x = coords[2 * i0];
            const i0y = coords[2 * i0 + 1];

            minDist = Infinity;

            // find the point closest to the seed
            for (let i = 0; i < n; i++) {
                if (i === i0) continue;
                const d = dist$1(i0x, i0y, coords[2 * i], coords[2 * i + 1]);
                if (d < minDist && d > 0) {
                    i1 = i;
                    minDist = d;
                }
            }
            let i1x = coords[2 * i1];
            let i1y = coords[2 * i1 + 1];

            let minRadius = Infinity;

            // find the third point which forms the smallest circumcircle with the first two
            for (let i = 0; i < n; i++) {
                if (i === i0 || i === i1) continue;
                const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);
                if (r < minRadius) {
                    i2 = i;
                    minRadius = r;
                }
            }
            let i2x = coords[2 * i2];
            let i2y = coords[2 * i2 + 1];

            if (minRadius === Infinity) {
                // order collinear points by dx (or dy if all x are identical)
                // and return the list as a hull
                for (let i = 0; i < n; i++) {
                    this._dists[i] = (coords[2 * i] - coords[0]) || (coords[2 * i + 1] - coords[1]);
                }
                quicksort(this._ids, this._dists, 0, n - 1);
                const hull = new Uint32Array(n);
                let j = 0;
                for (let i = 0, d0 = -Infinity; i < n; i++) {
                    const id = this._ids[i];
                    if (this._dists[id] > d0) {
                        hull[j++] = id;
                        d0 = this._dists[id];
                    }
                }
                this.hull = hull.subarray(0, j);
                this.triangles = new Uint32Array(0);
                this.halfedges = new Uint32Array(0);
                return;
            }

            // swap the order of the seed points for counter-clockwise orientation
            if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {
                const i = i1;
                const x = i1x;
                const y = i1y;
                i1 = i2;
                i1x = i2x;
                i1y = i2y;
                i2 = i;
                i2x = x;
                i2y = y;
            }

            const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
            this._cx = center.x;
            this._cy = center.y;

            for (let i = 0; i < n; i++) {
                this._dists[i] = dist$1(coords[2 * i], coords[2 * i + 1], center.x, center.y);
            }

            // sort the points by distance from the seed triangle circumcenter
            quicksort(this._ids, this._dists, 0, n - 1);

            // set up the seed triangle as the starting hull
            this._hullStart = i0;
            let hullSize = 3;

            hullNext[i0] = hullPrev[i2] = i1;
            hullNext[i1] = hullPrev[i0] = i2;
            hullNext[i2] = hullPrev[i1] = i0;

            hullTri[i0] = 0;
            hullTri[i1] = 1;
            hullTri[i2] = 2;

            hullHash.fill(-1);
            hullHash[this._hashKey(i0x, i0y)] = i0;
            hullHash[this._hashKey(i1x, i1y)] = i1;
            hullHash[this._hashKey(i2x, i2y)] = i2;

            this.trianglesLen = 0;
            this._addTriangle(i0, i1, i2, -1, -1, -1);

            for (let k = 0, xp, yp; k < this._ids.length; k++) {
                const i = this._ids[k];
                const x = coords[2 * i];
                const y = coords[2 * i + 1];

                // skip near-duplicate points
                if (k > 0 && Math.abs(x - xp) <= EPSILON$2 && Math.abs(y - yp) <= EPSILON$2) continue;
                xp = x;
                yp = y;

                // skip seed triangle points
                if (i === i0 || i === i1 || i === i2) continue;

                // find a visible edge on the convex hull using edge hash
                let start = 0;
                for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {
                    start = hullHash[(key + j) % this._hashSize];
                    if (start !== -1 && start !== hullNext[start]) break;
                }

                start = hullPrev[start];
                let e = start, q;
                while (q = hullNext[e], !orient(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1])) {
                    e = q;
                    if (e === start) {
                        e = -1;
                        break;
                    }
                }
                if (e === -1) continue; // likely a near-duplicate point; skip it

                // add the first triangle from the point
                let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);

                // recursively flip triangles from the point until they satisfy the Delaunay condition
                hullTri[i] = this._legalize(t + 2);
                hullTri[e] = t; // keep track of boundary triangles on the hull
                hullSize++;

                // walk forward through the hull, adding more triangles and flipping recursively
                let n = hullNext[e];
                while (q = hullNext[n], orient(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1])) {
                    t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);
                    hullTri[i] = this._legalize(t + 2);
                    hullNext[n] = n; // mark as removed
                    hullSize--;
                    n = q;
                }

                // walk backward from the other side, adding more triangles and flipping
                if (e === start) {
                    while (q = hullPrev[e], orient(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1])) {
                        t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);
                        this._legalize(t + 2);
                        hullTri[q] = t;
                        hullNext[e] = e; // mark as removed
                        hullSize--;
                        e = q;
                    }
                }

                // update the hull indices
                this._hullStart = hullPrev[i] = e;
                hullNext[e] = hullPrev[n] = i;
                hullNext[i] = n;

                // save the two new edges in the hash table
                hullHash[this._hashKey(x, y)] = i;
                hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;
            }

            this.hull = new Uint32Array(hullSize);
            for (let i = 0, e = this._hullStart; i < hullSize; i++) {
                this.hull[i] = e;
                e = hullNext[e];
            }

            // trim typed triangle mesh arrays
            this.triangles = this._triangles.subarray(0, this.trianglesLen);
            this.halfedges = this._halfedges.subarray(0, this.trianglesLen);
        }

        _hashKey(x, y) {
            return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;
        }

        _legalize(a) {
            const {_triangles: triangles, _halfedges: halfedges, coords} = this;

            let i = 0;
            let ar = 0;

            // recursion eliminated with a fixed-size stack
            while (true) {
                const b = halfedges[a];

                /* if the pair of triangles doesn't satisfy the Delaunay condition
                 * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,
                 * then do the same check/flip recursively for the new pair of triangles
                 *
                 *           pl                    pl
                 *          /||\                  /  \
                 *       al/ || \bl            al/    \a
                 *        /  ||  \              /      \
                 *       /  a||b  \    flip    /___ar___\
                 *     p0\   ||   /p1   =>   p0\---bl---/p1
                 *        \  ||  /              \      /
                 *       ar\ || /br             b\    /br
                 *          \||/                  \  /
                 *           pr                    pr
                 */
                const a0 = a - a % 3;
                ar = a0 + (a + 2) % 3;

                if (b === -1) { // convex hull edge
                    if (i === 0) break;
                    a = EDGE_STACK[--i];
                    continue;
                }

                const b0 = b - b % 3;
                const al = a0 + (a + 1) % 3;
                const bl = b0 + (b + 2) % 3;

                const p0 = triangles[ar];
                const pr = triangles[a];
                const pl = triangles[al];
                const p1 = triangles[bl];

                const illegal = inCircle(
                    coords[2 * p0], coords[2 * p0 + 1],
                    coords[2 * pr], coords[2 * pr + 1],
                    coords[2 * pl], coords[2 * pl + 1],
                    coords[2 * p1], coords[2 * p1 + 1]);

                if (illegal) {
                    triangles[a] = p1;
                    triangles[b] = p0;

                    const hbl = halfedges[bl];

                    // edge swapped on the other side of the hull (rare); fix the halfedge reference
                    if (hbl === -1) {
                        let e = this._hullStart;
                        do {
                            if (this._hullTri[e] === bl) {
                                this._hullTri[e] = a;
                                break;
                            }
                            e = this._hullPrev[e];
                        } while (e !== this._hullStart);
                    }
                    this._link(a, hbl);
                    this._link(b, halfedges[ar]);
                    this._link(ar, bl);

                    const br = b0 + (b + 1) % 3;

                    // don't worry about hitting the cap: it can only happen on extremely degenerate input
                    if (i < EDGE_STACK.length) {
                        EDGE_STACK[i++] = br;
                    }
                } else {
                    if (i === 0) break;
                    a = EDGE_STACK[--i];
                }
            }

            return ar;
        }

        _link(a, b) {
            this._halfedges[a] = b;
            if (b !== -1) this._halfedges[b] = a;
        }

        // add a new triangle given vertex indices and adjacent half-edge ids
        _addTriangle(i0, i1, i2, a, b, c) {
            const t = this.trianglesLen;

            this._triangles[t] = i0;
            this._triangles[t + 1] = i1;
            this._triangles[t + 2] = i2;

            this._link(t, a);
            this._link(t + 1, b);
            this._link(t + 2, c);

            this.trianglesLen += 3;

            return t;
        }
    }

    // monotonically increases with real angle, but doesn't need expensive trigonometry
    function pseudoAngle(dx, dy) {
        const p = dx / (Math.abs(dx) + Math.abs(dy));
        return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]
    }

    function dist$1(ax, ay, bx, by) {
        const dx = ax - bx;
        const dy = ay - by;
        return dx * dx + dy * dy;
    }

    // return 2d orientation sign if we're confident in it through J. Shewchuk's error bound check
    function orientIfSure(px, py, rx, ry, qx, qy) {
        const l = (ry - py) * (qx - px);
        const r = (rx - px) * (qy - py);
        return Math.abs(l - r) >= 3.3306690738754716e-16 * Math.abs(l + r) ? l - r : 0;
    }

    // a more robust orientation test that's stable in a given triangle (to fix robustness issues)
    function orient(rx, ry, qx, qy, px, py) {
        const sign = orientIfSure(px, py, rx, ry, qx, qy) ||
        orientIfSure(rx, ry, qx, qy, px, py) ||
        orientIfSure(qx, qy, px, py, rx, ry);
        return sign < 0;
    }

    function inCircle(ax, ay, bx, by, cx, cy, px, py) {
        const dx = ax - px;
        const dy = ay - py;
        const ex = bx - px;
        const ey = by - py;
        const fx = cx - px;
        const fy = cy - py;

        const ap = dx * dx + dy * dy;
        const bp = ex * ex + ey * ey;
        const cp = fx * fx + fy * fy;

        return dx * (ey * cp - bp * fy) -
               dy * (ex * cp - bp * fx) +
               ap * (ex * fy - ey * fx) < 0;
    }

    function circumradius(ax, ay, bx, by, cx, cy) {
        const dx = bx - ax;
        const dy = by - ay;
        const ex = cx - ax;
        const ey = cy - ay;

        const bl = dx * dx + dy * dy;
        const cl = ex * ex + ey * ey;
        const d = 0.5 / (dx * ey - dy * ex);

        const x = (ey * bl - dy * cl) * d;
        const y = (dx * cl - ex * bl) * d;

        return x * x + y * y;
    }

    function circumcenter(ax, ay, bx, by, cx, cy) {
        const dx = bx - ax;
        const dy = by - ay;
        const ex = cx - ax;
        const ey = cy - ay;

        const bl = dx * dx + dy * dy;
        const cl = ex * ex + ey * ey;
        const d = 0.5 / (dx * ey - dy * ex);

        const x = ax + (ey * bl - dy * cl) * d;
        const y = ay + (dx * cl - ex * bl) * d;

        return {x, y};
    }

    function quicksort(ids, dists, left, right) {
        if (right - left <= 20) {
            for (let i = left + 1; i <= right; i++) {
                const temp = ids[i];
                const tempDist = dists[temp];
                let j = i - 1;
                while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];
                ids[j + 1] = temp;
            }
        } else {
            const median = (left + right) >> 1;
            let i = left + 1;
            let j = right;
            swap$1(ids, median, i);
            if (dists[ids[left]] > dists[ids[right]]) swap$1(ids, left, right);
            if (dists[ids[i]] > dists[ids[right]]) swap$1(ids, i, right);
            if (dists[ids[left]] > dists[ids[i]]) swap$1(ids, left, i);

            const temp = ids[i];
            const tempDist = dists[temp];
            while (true) {
                do i++; while (dists[ids[i]] < tempDist);
                do j--; while (dists[ids[j]] > tempDist);
                if (j < i) break;
                swap$1(ids, i, j);
            }
            ids[left + 1] = ids[j];
            ids[j] = temp;

            if (right - i + 1 >= j - left) {
                quicksort(ids, dists, i, right);
                quicksort(ids, dists, left, j - 1);
            } else {
                quicksort(ids, dists, left, j - 1);
                quicksort(ids, dists, i, right);
            }
        }
    }

    function swap$1(arr, i, j) {
        const tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    function defaultGetX(p) {
        return p[0];
    }
    function defaultGetY(p) {
        return p[1];
    }

    const epsilon$3 = 1e-6;

    class Path$1 {
      constructor() {
        this._x0 = this._y0 = // start of current subpath
        this._x1 = this._y1 = null; // end of current subpath
        this._ = "";
      }
      moveTo(x, y) {
        this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;
      }
      closePath() {
        if (this._x1 !== null) {
          this._x1 = this._x0, this._y1 = this._y0;
          this._ += "Z";
        }
      }
      lineTo(x, y) {
        this._ += `L${this._x1 = +x},${this._y1 = +y}`;
      }
      arc(x, y, r) {
        x = +x, y = +y, r = +r;
        const x0 = x + r;
        const y0 = y;
        if (r < 0) throw new Error("negative radius");
        if (this._x1 === null) this._ += `M${x0},${y0}`;
        else if (Math.abs(this._x1 - x0) > epsilon$3 || Math.abs(this._y1 - y0) > epsilon$3) this._ += "L" + x0 + "," + y0;
        if (!r) return;
        this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;
      }
      rect(x, y, w, h) {
        this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;
      }
      value() {
        return this._ || null;
      }
    }

    class Polygon {
      constructor() {
        this._ = [];
      }
      moveTo(x, y) {
        this._.push([x, y]);
      }
      closePath() {
        this._.push(this._[0].slice());
      }
      lineTo(x, y) {
        this._.push([x, y]);
      }
      value() {
        return this._.length ? this._ : null;
      }
    }

    class Voronoi {
      constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {
        if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error("invalid bounds");
        this.delaunay = delaunay;
        this._circumcenters = new Float64Array(delaunay.points.length * 2);
        this.vectors = new Float64Array(delaunay.points.length * 2);
        this.xmax = xmax, this.xmin = xmin;
        this.ymax = ymax, this.ymin = ymin;
        this._init();
      }
      update() {
        this.delaunay.update();
        this._init();
        return this;
      }
      _init() {
        const {delaunay: {points, hull, triangles}, vectors} = this;

        // Compute circumcenters.
        const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);
        for (let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {
          const t1 = triangles[i] * 2;
          const t2 = triangles[i + 1] * 2;
          const t3 = triangles[i + 2] * 2;
          const x1 = points[t1];
          const y1 = points[t1 + 1];
          const x2 = points[t2];
          const y2 = points[t2 + 1];
          const x3 = points[t3];
          const y3 = points[t3 + 1];

          const dx = x2 - x1;
          const dy = y2 - y1;
          const ex = x3 - x1;
          const ey = y3 - y1;
          const bl = dx * dx + dy * dy;
          const cl = ex * ex + ey * ey;
          const ab = (dx * ey - dy * ex) * 2;

          if (!ab) {
            // degenerate case (collinear diagram)
            x = (x1 + x3) / 2 - 1e8 * ey;
            y = (y1 + y3) / 2 + 1e8 * ex;
          }
          else if (Math.abs(ab) < 1e-8) {
            // almost equal points (degenerate triangle)
            x = (x1 + x3) / 2;
            y = (y1 + y3) / 2;
          } else {
            const d = 1 / ab;
            x = x1 + (ey * bl - dy * cl) * d;
            y = y1 + (dx * cl - ex * bl) * d;
          }
          circumcenters[j] = x;
          circumcenters[j + 1] = y;
        }

        // Compute exterior cell rays.
        let h = hull[hull.length - 1];
        let p0, p1 = h * 4;
        let x0, x1 = points[2 * h];
        let y0, y1 = points[2 * h + 1];
        vectors.fill(0);
        for (let i = 0; i < hull.length; ++i) {
          h = hull[i];
          p0 = p1, x0 = x1, y0 = y1;
          p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];
          vectors[p0 + 2] = vectors[p1] = y0 - y1;
          vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;
        }
      }
      render(context) {
        const buffer = context == null ? context = new Path$1 : undefined;
        const {delaunay: {halfedges, inedges, hull}, circumcenters, vectors} = this;
        if (hull.length <= 1) return null;
        for (let i = 0, n = halfedges.length; i < n; ++i) {
          const j = halfedges[i];
          if (j < i) continue;
          const ti = Math.floor(i / 3) * 2;
          const tj = Math.floor(j / 3) * 2;
          const xi = circumcenters[ti];
          const yi = circumcenters[ti + 1];
          const xj = circumcenters[tj];
          const yj = circumcenters[tj + 1];
          this._renderSegment(xi, yi, xj, yj, context);
        }
        let h0, h1 = hull[hull.length - 1];
        for (let i = 0; i < hull.length; ++i) {
          h0 = h1, h1 = hull[i];
          const t = Math.floor(inedges[h1] / 3) * 2;
          const x = circumcenters[t];
          const y = circumcenters[t + 1];
          const v = h0 * 4;
          const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);
          if (p) this._renderSegment(x, y, p[0], p[1], context);
        }
        return buffer && buffer.value();
      }
      renderBounds(context) {
        const buffer = context == null ? context = new Path$1 : undefined;
        context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);
        return buffer && buffer.value();
      }
      renderCell(i, context) {
        const buffer = context == null ? context = new Path$1 : undefined;
        const points = this._clip(i);
        if (points === null || !points.length) return;
        context.moveTo(points[0], points[1]);
        let n = points.length;
        while (points[0] === points[n-2] && points[1] === points[n-1] && n > 1) n -= 2;
        for (let i = 2; i < n; i += 2) {
          if (points[i] !== points[i-2] || points[i+1] !== points[i-1])
            context.lineTo(points[i], points[i + 1]);
        }
        context.closePath();
        return buffer && buffer.value();
      }
      *cellPolygons() {
        const {delaunay: {points}} = this;
        for (let i = 0, n = points.length / 2; i < n; ++i) {
          const cell = this.cellPolygon(i);
          if (cell) cell.index = i, yield cell;
        }
      }
      cellPolygon(i) {
        const polygon = new Polygon;
        this.renderCell(i, polygon);
        return polygon.value();
      }
      _renderSegment(x0, y0, x1, y1, context) {
        let S;
        const c0 = this._regioncode(x0, y0);
        const c1 = this._regioncode(x1, y1);
        if (c0 === 0 && c1 === 0) {
          context.moveTo(x0, y0);
          context.lineTo(x1, y1);
        } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {
          context.moveTo(S[0], S[1]);
          context.lineTo(S[2], S[3]);
        }
      }
      contains(i, x, y) {
        if ((x = +x, x !== x) || (y = +y, y !== y)) return false;
        return this.delaunay._step(i, x, y) === i;
      }
      *neighbors(i) {
        const ci = this._clip(i);
        if (ci) for (const j of this.delaunay.neighbors(i)) {
          const cj = this._clip(j);
          // find the common edge
          if (cj) loop: for (let ai = 0, li = ci.length; ai < li; ai += 2) {
            for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {
              if (ci[ai] == cj[aj]
              && ci[ai + 1] == cj[aj + 1]
              && ci[(ai + 2) % li] == cj[(aj + lj - 2) % lj]
              && ci[(ai + 3) % li] == cj[(aj + lj - 1) % lj]
              ) {
                yield j;
                break loop;
              }
            }
          }
        }
      }
      _cell(i) {
        const {circumcenters, delaunay: {inedges, halfedges, triangles}} = this;
        const e0 = inedges[i];
        if (e0 === -1) return null; // coincident point
        const points = [];
        let e = e0;
        do {
          const t = Math.floor(e / 3);
          points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);
          e = e % 3 === 2 ? e - 2 : e + 1;
          if (triangles[e] !== i) break; // bad triangulation
          e = halfedges[e];
        } while (e !== e0 && e !== -1);
        return points;
      }
      _clip(i) {
        // degenerate case (1 valid point: return the box)
        if (i === 0 && this.delaunay.hull.length === 1) {
          return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
        }
        const points = this._cell(i);
        if (points === null) return null;
        const {vectors: V} = this;
        const v = i * 4;
        return V[v] || V[v + 1]
            ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3])
            : this._clipFinite(i, points);
      }
      _clipFinite(i, points) {
        const n = points.length;
        let P = null;
        let x0, y0, x1 = points[n - 2], y1 = points[n - 1];
        let c0, c1 = this._regioncode(x1, y1);
        let e0, e1;
        for (let j = 0; j < n; j += 2) {
          x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];
          c0 = c1, c1 = this._regioncode(x1, y1);
          if (c0 === 0 && c1 === 0) {
            e0 = e1, e1 = 0;
            if (P) P.push(x1, y1);
            else P = [x1, y1];
          } else {
            let S, sx0, sy0, sx1, sy1;
            if (c0 === 0) {
              if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;
              [sx0, sy0, sx1, sy1] = S;
            } else {
              if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;
              [sx1, sy1, sx0, sy0] = S;
              e0 = e1, e1 = this._edgecode(sx0, sy0);
              if (e0 && e1) this._edge(i, e0, e1, P, P.length);
              if (P) P.push(sx0, sy0);
              else P = [sx0, sy0];
            }
            e0 = e1, e1 = this._edgecode(sx1, sy1);
            if (e0 && e1) this._edge(i, e0, e1, P, P.length);
            if (P) P.push(sx1, sy1);
            else P = [sx1, sy1];
          }
        }
        if (P) {
          e0 = e1, e1 = this._edgecode(P[0], P[1]);
          if (e0 && e1) this._edge(i, e0, e1, P, P.length);
        } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
          return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
        }
        return P;
      }
      _clipSegment(x0, y0, x1, y1, c0, c1) {
        while (true) {
          if (c0 === 0 && c1 === 0) return [x0, y0, x1, y1];
          if (c0 & c1) return null;
          let x, y, c = c0 || c1;
          if (c & 0b1000) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;
          else if (c & 0b0100) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;
          else if (c & 0b0010) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;
          else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;
          if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);
          else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);
        }
      }
      _clipInfinite(i, points, vx0, vy0, vxn, vyn) {
        let P = Array.from(points), p;
        if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);
        if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);
        if (P = this._clipFinite(i, P)) {
          for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {
            c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);
            if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;
          }
        } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
          P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];
        }
        return P;
      }
      _edge(i, e0, e1, P, j) {
        while (e0 !== e1) {
          let x, y;
          switch (e0) {
            case 0b0101: e0 = 0b0100; continue; // top-left
            case 0b0100: e0 = 0b0110, x = this.xmax, y = this.ymin; break; // top
            case 0b0110: e0 = 0b0010; continue; // top-right
            case 0b0010: e0 = 0b1010, x = this.xmax, y = this.ymax; break; // right
            case 0b1010: e0 = 0b1000; continue; // bottom-right
            case 0b1000: e0 = 0b1001, x = this.xmin, y = this.ymax; break; // bottom
            case 0b1001: e0 = 0b0001; continue; // bottom-left
            case 0b0001: e0 = 0b0101, x = this.xmin, y = this.ymin; break; // left
          }
          if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {
            P.splice(j, 0, x, y), j += 2;
          }
        }
        if (P.length > 4) {
          for (let i = 0; i < P.length; i+= 2) {
            const j = (i + 2) % P.length, k = (i + 4) % P.length;
            if (P[i] === P[j] && P[j] === P[k]
            || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1])
              P.splice(j, 2), i -= 2;
          }
        }
        return j;
      }
      _project(x0, y0, vx, vy) {
        let t = Infinity, c, x, y;
        if (vy < 0) { // top
          if (y0 <= this.ymin) return null;
          if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;
        } else if (vy > 0) { // bottom
          if (y0 >= this.ymax) return null;
          if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;
        }
        if (vx > 0) { // right
          if (x0 >= this.xmax) return null;
          if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;
        } else if (vx < 0) { // left
          if (x0 <= this.xmin) return null;
          if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;
        }
        return [x, y];
      }
      _edgecode(x, y) {
        return (x === this.xmin ? 0b0001
            : x === this.xmax ? 0b0010 : 0b0000)
            | (y === this.ymin ? 0b0100
            : y === this.ymax ? 0b1000 : 0b0000);
      }
      _regioncode(x, y) {
        return (x < this.xmin ? 0b0001
            : x > this.xmax ? 0b0010 : 0b0000)
            | (y < this.ymin ? 0b0100
            : y > this.ymax ? 0b1000 : 0b0000);
      }
    }

    const tau$3 = 2 * Math.PI, pow$1 = Math.pow;

    function pointX(p) {
      return p[0];
    }

    function pointY(p) {
      return p[1];
    }

    // A triangulation is collinear if all its triangles have a non-null area
    function collinear$1(d) {
      const {triangles, coords} = d;
      for (let i = 0; i < triangles.length; i += 3) {
        const a = 2 * triangles[i],
              b = 2 * triangles[i + 1],
              c = 2 * triangles[i + 2],
              cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1])
                    - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);
        if (cross > 1e-10) return false;
      }
      return true;
    }

    function jitter(x, y, r) {
      return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];
    }

    class Delaunay {
      static from(points, fx = pointX, fy = pointY, that) {
        return new Delaunay("length" in points
            ? flatArray(points, fx, fy, that)
            : Float64Array.from(flatIterable(points, fx, fy, that)));
      }
      constructor(points) {
        this._delaunator = new Delaunator(points);
        this.inedges = new Int32Array(points.length / 2);
        this._hullIndex = new Int32Array(points.length / 2);
        this.points = this._delaunator.coords;
        this._init();
      }
      update() {
        this._delaunator.update();
        this._init();
        return this;
      }
      _init() {
        const d = this._delaunator, points = this.points;

        // check for collinear
        if (d.hull && d.hull.length > 2 && collinear$1(d)) {
          this.collinear = Int32Array.from({length: points.length/2}, (_,i) => i)
            .sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors
          const e = this.collinear[0], f = this.collinear[this.collinear.length - 1],
            bounds = [ points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1] ],
            r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);
          for (let i = 0, n = points.length / 2; i < n; ++i) {
            const p = jitter(points[2 * i], points[2 * i + 1], r);
            points[2 * i] = p[0];
            points[2 * i + 1] = p[1];
          }
          this._delaunator = new Delaunator(points);
        } else {
          delete this.collinear;
        }

        const halfedges = this.halfedges = this._delaunator.halfedges;
        const hull = this.hull = this._delaunator.hull;
        const triangles = this.triangles = this._delaunator.triangles;
        const inedges = this.inedges.fill(-1);
        const hullIndex = this._hullIndex.fill(-1);

        // Compute an index from each point to an (arbitrary) incoming halfedge
        // Used to give the first neighbor of each point; for this reason,
        // on the hull we give priority to exterior halfedges
        for (let e = 0, n = halfedges.length; e < n; ++e) {
          const p = triangles[e % 3 === 2 ? e - 2 : e + 1];
          if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;
        }
        for (let i = 0, n = hull.length; i < n; ++i) {
          hullIndex[hull[i]] = i;
        }

        // degenerate case: 1 or 2 (distinct) points
        if (hull.length <= 2 && hull.length > 0) {
          this.triangles = new Int32Array(3).fill(-1);
          this.halfedges = new Int32Array(3).fill(-1);
          this.triangles[0] = hull[0];
          this.triangles[1] = hull[1];
          this.triangles[2] = hull[1];
          inedges[hull[0]] = 1;
          if (hull.length === 2) inedges[hull[1]] = 0;
        }
      }
      voronoi(bounds) {
        return new Voronoi(this, bounds);
      }
      *neighbors(i) {
        const {inedges, hull, _hullIndex, halfedges, triangles, collinear} = this;

        // degenerate case with several collinear points
        if (collinear) {
          const l = collinear.indexOf(i);
          if (l > 0) yield collinear[l - 1];
          if (l < collinear.length - 1) yield collinear[l + 1];
          return;
        }

        const e0 = inedges[i];
        if (e0 === -1) return; // coincident point
        let e = e0, p0 = -1;
        do {
          yield p0 = triangles[e];
          e = e % 3 === 2 ? e - 2 : e + 1;
          if (triangles[e] !== i) return; // bad triangulation
          e = halfedges[e];
          if (e === -1) {
            const p = hull[(_hullIndex[i] + 1) % hull.length];
            if (p !== p0) yield p;
            return;
          }
        } while (e !== e0);
      }
      find(x, y, i = 0) {
        if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;
        const i0 = i;
        let c;
        while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) i = c;
        return c;
      }
      _step(i, x, y) {
        const {inedges, hull, _hullIndex, halfedges, triangles, points} = this;
        if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);
        let c = i;
        let dc = pow$1(x - points[i * 2], 2) + pow$1(y - points[i * 2 + 1], 2);
        const e0 = inedges[i];
        let e = e0;
        do {
          let t = triangles[e];
          const dt = pow$1(x - points[t * 2], 2) + pow$1(y - points[t * 2 + 1], 2);
          if (dt < dc) dc = dt, c = t;
          e = e % 3 === 2 ? e - 2 : e + 1;
          if (triangles[e] !== i) break; // bad triangulation
          e = halfedges[e];
          if (e === -1) {
            e = hull[(_hullIndex[i] + 1) % hull.length];
            if (e !== t) {
              if (pow$1(x - points[e * 2], 2) + pow$1(y - points[e * 2 + 1], 2) < dc) return e;
            }
            break;
          }
        } while (e !== e0);
        return c;
      }
      render(context) {
        const buffer = context == null ? context = new Path$1 : undefined;
        const {points, halfedges, triangles} = this;
        for (let i = 0, n = halfedges.length; i < n; ++i) {
          const j = halfedges[i];
          if (j < i) continue;
          const ti = triangles[i] * 2;
          const tj = triangles[j] * 2;
          context.moveTo(points[ti], points[ti + 1]);
          context.lineTo(points[tj], points[tj + 1]);
        }
        this.renderHull(context);
        return buffer && buffer.value();
      }
      renderPoints(context, r = 2) {
        const buffer = context == null ? context = new Path$1 : undefined;
        const {points} = this;
        for (let i = 0, n = points.length; i < n; i += 2) {
          const x = points[i], y = points[i + 1];
          context.moveTo(x + r, y);
          context.arc(x, y, r, 0, tau$3);
        }
        return buffer && buffer.value();
      }
      renderHull(context) {
        const buffer = context == null ? context = new Path$1 : undefined;
        const {hull, points} = this;
        const h = hull[0] * 2, n = hull.length;
        context.moveTo(points[h], points[h + 1]);
        for (let i = 1; i < n; ++i) {
          const h = 2 * hull[i];
          context.lineTo(points[h], points[h + 1]);
        }
        context.closePath();
        return buffer && buffer.value();
      }
      hullPolygon() {
        const polygon = new Polygon;
        this.renderHull(polygon);
        return polygon.value();
      }
      renderTriangle(i, context) {
        const buffer = context == null ? context = new Path$1 : undefined;
        const {points, triangles} = this;
        const t0 = triangles[i *= 3] * 2;
        const t1 = triangles[i + 1] * 2;
        const t2 = triangles[i + 2] * 2;
        context.moveTo(points[t0], points[t0 + 1]);
        context.lineTo(points[t1], points[t1 + 1]);
        context.lineTo(points[t2], points[t2 + 1]);
        context.closePath();
        return buffer && buffer.value();
      }
      *trianglePolygons() {
        const {triangles} = this;
        for (let i = 0, n = triangles.length / 3; i < n; ++i) {
          yield this.trianglePolygon(i);
        }
      }
      trianglePolygon(i) {
        const polygon = new Polygon;
        this.renderTriangle(i, polygon);
        return polygon.value();
      }
    }

    function flatArray(points, fx, fy, that) {
      const n = points.length;
      const array = new Float64Array(n * 2);
      for (let i = 0; i < n; ++i) {
        const p = points[i];
        array[i * 2] = fx.call(that, p, i, points);
        array[i * 2 + 1] = fy.call(that, p, i, points);
      }
      return array;
    }

    function* flatIterable(points, fx, fy, that) {
      let i = 0;
      for (const p of points) {
        yield fx.call(that, p, i, points);
        yield fy.call(that, p, i, points);
        ++i;
      }
    }

    var EOL = {},
        EOF = {},
        QUOTE = 34,
        NEWLINE = 10,
        RETURN = 13;

    function objectConverter(columns) {
      return new Function("d", "return {" + columns.map(function(name, i) {
        return JSON.stringify(name) + ": d[" + i + "] || \"\"";
      }).join(",") + "}");
    }

    function customConverter(columns, f) {
      var object = objectConverter(columns);
      return function(row, i) {
        return f(object(row), i, columns);
      };
    }

    // Compute unique columns in order of discovery.
    function inferColumns(rows) {
      var columnSet = Object.create(null),
          columns = [];

      rows.forEach(function(row) {
        for (var column in row) {
          if (!(column in columnSet)) {
            columns.push(columnSet[column] = column);
          }
        }
      });

      return columns;
    }

    function pad$1(value, width) {
      var s = value + "", length = s.length;
      return length < width ? new Array(width - length + 1).join(0) + s : s;
    }

    function formatYear(year) {
      return year < 0 ? "-" + pad$1(-year, 6)
        : year > 9999 ? "+" + pad$1(year, 6)
        : pad$1(year, 4);
    }

    function formatDate(date) {
      var hours = date.getUTCHours(),
          minutes = date.getUTCMinutes(),
          seconds = date.getUTCSeconds(),
          milliseconds = date.getUTCMilliseconds();
      return isNaN(date) ? "Invalid Date"
          : formatYear(date.getUTCFullYear()) + "-" + pad$1(date.getUTCMonth() + 1, 2) + "-" + pad$1(date.getUTCDate(), 2)
          + (milliseconds ? "T" + pad$1(hours, 2) + ":" + pad$1(minutes, 2) + ":" + pad$1(seconds, 2) + "." + pad$1(milliseconds, 3) + "Z"
          : seconds ? "T" + pad$1(hours, 2) + ":" + pad$1(minutes, 2) + ":" + pad$1(seconds, 2) + "Z"
          : minutes || hours ? "T" + pad$1(hours, 2) + ":" + pad$1(minutes, 2) + "Z"
          : "");
    }

    function dsvFormat(delimiter) {
      var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
          DELIMITER = delimiter.charCodeAt(0);

      function parse(text, f) {
        var convert, columns, rows = parseRows(text, function(row, i) {
          if (convert) return convert(row, i - 1);
          columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
        });
        rows.columns = columns || [];
        return rows;
      }

      function parseRows(text, f) {
        var rows = [], // output rows
            N = text.length,
            I = 0, // current character index
            n = 0, // current line number
            t, // current token
            eof = N <= 0, // current token followed by EOF?
            eol = false; // current token followed by EOL?

        // Strip the trailing newline.
        if (text.charCodeAt(N - 1) === NEWLINE) --N;
        if (text.charCodeAt(N - 1) === RETURN) --N;

        function token() {
          if (eof) return EOF;
          if (eol) return eol = false, EOL;

          // Unescape quotes.
          var i, j = I, c;
          if (text.charCodeAt(j) === QUOTE) {
            while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);
            if ((i = I) >= N) eof = true;
            else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;
            else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
            return text.slice(j + 1, i - 1).replace(/""/g, "\"");
          }

          // Find next delimiter or newline.
          while (I < N) {
            if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;
            else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
            else if (c !== DELIMITER) continue;
            return text.slice(j, i);
          }

          // Return last token before EOF.
          return eof = true, text.slice(j, N);
        }

        while ((t = token()) !== EOF) {
          var row = [];
          while (t !== EOL && t !== EOF) row.push(t), t = token();
          if (f && (row = f(row, n++)) == null) continue;
          rows.push(row);
        }

        return rows;
      }

      function preformatBody(rows, columns) {
        return rows.map(function(row) {
          return columns.map(function(column) {
            return formatValue(row[column]);
          }).join(delimiter);
        });
      }

      function format(rows, columns) {
        if (columns == null) columns = inferColumns(rows);
        return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join("\n");
      }

      function formatBody(rows, columns) {
        if (columns == null) columns = inferColumns(rows);
        return preformatBody(rows, columns).join("\n");
      }

      function formatRows(rows) {
        return rows.map(formatRow).join("\n");
      }

      function formatRow(row) {
        return row.map(formatValue).join(delimiter);
      }

      function formatValue(value) {
        return value == null ? ""
            : value instanceof Date ? formatDate(value)
            : reFormat.test(value += "") ? "\"" + value.replace(/"/g, "\"\"") + "\""
            : value;
      }

      return {
        parse: parse,
        parseRows: parseRows,
        format: format,
        formatBody: formatBody,
        formatRows: formatRows,
        formatRow: formatRow,
        formatValue: formatValue
      };
    }

    var csv = dsvFormat(",");

    var csvParse = csv.parse;
    var csvParseRows = csv.parseRows;
    var csvFormat = csv.format;
    var csvFormatBody = csv.formatBody;
    var csvFormatRows = csv.formatRows;
    var csvFormatRow = csv.formatRow;
    var csvFormatValue = csv.formatValue;

    var tsv = dsvFormat("\t");

    var tsvParse = tsv.parse;
    var tsvParseRows = tsv.parseRows;
    var tsvFormat = tsv.format;
    var tsvFormatBody = tsv.formatBody;
    var tsvFormatRows = tsv.formatRows;
    var tsvFormatRow = tsv.formatRow;
    var tsvFormatValue = tsv.formatValue;

    function autoType(object) {
      for (var key in object) {
        var value = object[key].trim(), number, m;
        if (!value) value = null;
        else if (value === "true") value = true;
        else if (value === "false") value = false;
        else if (value === "NaN") value = NaN;
        else if (!isNaN(number = +value)) value = number;
        else if (m = value.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/)) {
          if (fixtz && !!m[4] && !m[7]) value = value.replace(/-/g, "/").replace(/T/, " ");
          value = new Date(value);
        }
        else continue;
        object[key] = value;
      }
      return object;
    }

    // https://github.com/d3/d3-dsv/issues/45
    const fixtz = new Date("2019-01-01T00:00").getHours() || new Date("2019-07-01T00:00").getHours();

    function responseBlob(response) {
      if (!response.ok) throw new Error(response.status + " " + response.statusText);
      return response.blob();
    }

    function blob(input, init) {
      return fetch(input, init).then(responseBlob);
    }

    function responseArrayBuffer(response) {
      if (!response.ok) throw new Error(response.status + " " + response.statusText);
      return response.arrayBuffer();
    }

    function buffer(input, init) {
      return fetch(input, init).then(responseArrayBuffer);
    }

    function responseText(response) {
      if (!response.ok) throw new Error(response.status + " " + response.statusText);
      return response.text();
    }

    function text$1(input, init) {
      return fetch(input, init).then(responseText);
    }

    function dsvParse(parse) {
      return function(input, init, row) {
        if (arguments.length === 2 && typeof init === "function") row = init, init = undefined;
        return text$1(input, init).then(function(response) {
          return parse(response, row);
        });
      };
    }

    function dsv(delimiter, input, init, row) {
      if (arguments.length === 3 && typeof init === "function") row = init, init = undefined;
      var format = dsvFormat(delimiter);
      return text$1(input, init).then(function(response) {
        return format.parse(response, row);
      });
    }

    var csv$1 = dsvParse(csvParse);
    var tsv$1 = dsvParse(tsvParse);

    function image(input, init) {
      return new Promise(function(resolve, reject) {
        var image = new Image;
        for (var key in init) image[key] = init[key];
        image.onerror = reject;
        image.onload = function() { resolve(image); };
        image.src = input;
      });
    }

    function responseJson(response) {
      if (!response.ok) throw new Error(response.status + " " + response.statusText);
      if (response.status === 204 || response.status === 205) return;
      return response.json();
    }

    function json(input, init) {
      return fetch(input, init).then(responseJson);
    }

    function parser(type) {
      return (input, init) => text$1(input, init)
        .then(text => (new DOMParser).parseFromString(text, type));
    }

    var xml = parser("application/xml");

    var html = parser("text/html");

    var svg = parser("image/svg+xml");

    function center$1(x, y) {
      var nodes, strength = 1;

      if (x == null) x = 0;
      if (y == null) y = 0;

      function force() {
        var i,
            n = nodes.length,
            node,
            sx = 0,
            sy = 0;

        for (i = 0; i < n; ++i) {
          node = nodes[i], sx += node.x, sy += node.y;
        }

        for (sx = (sx / n - x) * strength, sy = (sy / n - y) * strength, i = 0; i < n; ++i) {
          node = nodes[i], node.x -= sx, node.y -= sy;
        }
      }

      force.initialize = function(_) {
        nodes = _;
      };

      force.x = function(_) {
        return arguments.length ? (x = +_, force) : x;
      };

      force.y = function(_) {
        return arguments.length ? (y = +_, force) : y;
      };

      force.strength = function(_) {
        return arguments.length ? (strength = +_, force) : strength;
      };

      return force;
    }

    function tree_add(d) {
      const x = +this._x.call(null, d),
          y = +this._y.call(null, d);
      return add$4(this.cover(x, y), x, y, d);
    }

    function add$4(tree, x, y, d) {
      if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points

      var parent,
          node = tree._root,
          leaf = {data: d},
          x0 = tree._x0,
          y0 = tree._y0,
          x1 = tree._x1,
          y1 = tree._y1,
          xm,
          ym,
          xp,
          yp,
          right,
          bottom,
          i,
          j;

      // If the tree is empty, initialize the root as a leaf.
      if (!node) return tree._root = leaf, tree;

      // Find the existing leaf for the new point, or add it.
      while (node.length) {
        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
        if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
      }

      // Is the new point is exactly coincident with the existing point?
      xp = +tree._x.call(null, node.data);
      yp = +tree._y.call(null, node.data);
      if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;

      // Otherwise, split the leaf node until the old and new point are separated.
      do {
        parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
      } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));
      return parent[j] = node, parent[i] = leaf, tree;
    }

    function addAll(data) {
      var d, i, n = data.length,
          x,
          y,
          xz = new Array(n),
          yz = new Array(n),
          x0 = Infinity,
          y0 = Infinity,
          x1 = -Infinity,
          y1 = -Infinity;

      // Compute the points and their extent.
      for (i = 0; i < n; ++i) {
        if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
        xz[i] = x;
        yz[i] = y;
        if (x < x0) x0 = x;
        if (x > x1) x1 = x;
        if (y < y0) y0 = y;
        if (y > y1) y1 = y;
      }

      // If there were no (valid) points, abort.
      if (x0 > x1 || y0 > y1) return this;

      // Expand the tree to cover the new points.
      this.cover(x0, y0).cover(x1, y1);

      // Add the new points.
      for (i = 0; i < n; ++i) {
        add$4(this, xz[i], yz[i], data[i]);
      }

      return this;
    }

    function tree_cover(x, y) {
      if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points

      var x0 = this._x0,
          y0 = this._y0,
          x1 = this._x1,
          y1 = this._y1;

      // If the quadtree has no extent, initialize them.
      // Integer extent are necessary so that if we later double the extent,
      // the existing quadrant boundaries don’t change due to floating point error!
      if (isNaN(x0)) {
        x1 = (x0 = Math.floor(x)) + 1;
        y1 = (y0 = Math.floor(y)) + 1;
      }

      // Otherwise, double repeatedly to cover.
      else {
        var z = x1 - x0 || 1,
            node = this._root,
            parent,
            i;

        while (x0 > x || x >= x1 || y0 > y || y >= y1) {
          i = (y < y0) << 1 | (x < x0);
          parent = new Array(4), parent[i] = node, node = parent, z *= 2;
          switch (i) {
            case 0: x1 = x0 + z, y1 = y0 + z; break;
            case 1: x0 = x1 - z, y1 = y0 + z; break;
            case 2: x1 = x0 + z, y0 = y1 - z; break;
            case 3: x0 = x1 - z, y0 = y1 - z; break;
          }
        }

        if (this._root && this._root.length) this._root = node;
      }

      this._x0 = x0;
      this._y0 = y0;
      this._x1 = x1;
      this._y1 = y1;
      return this;
    }

    function tree_data() {
      var data = [];
      this.visit(function(node) {
        if (!node.length) do data.push(node.data); while (node = node.next)
      });
      return data;
    }

    function tree_extent(_) {
      return arguments.length
          ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])
          : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
    }

    function Quad(node, x0, y0, x1, y1) {
      this.node = node;
      this.x0 = x0;
      this.y0 = y0;
      this.x1 = x1;
      this.y1 = y1;
    }

    function tree_find(x, y, radius) {
      var data,
          x0 = this._x0,
          y0 = this._y0,
          x1,
          y1,
          x2,
          y2,
          x3 = this._x1,
          y3 = this._y1,
          quads = [],
          node = this._root,
          q,
          i;

      if (node) quads.push(new Quad(node, x0, y0, x3, y3));
      if (radius == null) radius = Infinity;
      else {
        x0 = x - radius, y0 = y - radius;
        x3 = x + radius, y3 = y + radius;
        radius *= radius;
      }

      while (q = quads.pop()) {

        // Stop searching if this quadrant can’t contain a closer node.
        if (!(node = q.node)
            || (x1 = q.x0) > x3
            || (y1 = q.y0) > y3
            || (x2 = q.x1) < x0
            || (y2 = q.y1) < y0) continue;

        // Bisect the current quadrant.
        if (node.length) {
          var xm = (x1 + x2) / 2,
              ym = (y1 + y2) / 2;

          quads.push(
            new Quad(node[3], xm, ym, x2, y2),
            new Quad(node[2], x1, ym, xm, y2),
            new Quad(node[1], xm, y1, x2, ym),
            new Quad(node[0], x1, y1, xm, ym)
          );

          // Visit the closest quadrant first.
          if (i = (y >= ym) << 1 | (x >= xm)) {
            q = quads[quads.length - 1];
            quads[quads.length - 1] = quads[quads.length - 1 - i];
            quads[quads.length - 1 - i] = q;
          }
        }

        // Visit this point. (Visiting coincident points isn’t necessary!)
        else {
          var dx = x - +this._x.call(null, node.data),
              dy = y - +this._y.call(null, node.data),
              d2 = dx * dx + dy * dy;
          if (d2 < radius) {
            var d = Math.sqrt(radius = d2);
            x0 = x - d, y0 = y - d;
            x3 = x + d, y3 = y + d;
            data = node.data;
          }
        }
      }

      return data;
    }

    function tree_remove(d) {
      if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points

      var parent,
          node = this._root,
          retainer,
          previous,
          next,
          x0 = this._x0,
          y0 = this._y0,
          x1 = this._x1,
          y1 = this._y1,
          x,
          y,
          xm,
          ym,
          right,
          bottom,
          i,
          j;

      // If the tree is empty, initialize the root as a leaf.
      if (!node) return this;

      // Find the leaf node for the point.
      // While descending, also retain the deepest parent with a non-removed sibling.
      if (node.length) while (true) {
        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
        if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
        if (!node.length) break;
        if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;
      }

      // Find the point to remove.
      while (node.data !== d) if (!(previous = node, node = node.next)) return this;
      if (next = node.next) delete node.next;

      // If there are multiple coincident points, remove just the point.
      if (previous) return (next ? previous.next = next : delete previous.next), this;

      // If this is the root point, remove it.
      if (!parent) return this._root = next, this;

      // Remove this leaf.
      next ? parent[i] = next : delete parent[i];

      // If the parent now contains exactly one leaf, collapse superfluous parents.
      if ((node = parent[0] || parent[1] || parent[2] || parent[3])
          && node === (parent[3] || parent[2] || parent[1] || parent[0])
          && !node.length) {
        if (retainer) retainer[j] = node;
        else this._root = node;
      }

      return this;
    }

    function removeAll(data) {
      for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);
      return this;
    }

    function tree_root() {
      return this._root;
    }

    function tree_size() {
      var size = 0;
      this.visit(function(node) {
        if (!node.length) do ++size; while (node = node.next)
      });
      return size;
    }

    function tree_visit(callback) {
      var quads = [], q, node = this._root, child, x0, y0, x1, y1;
      if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));
      while (q = quads.pop()) {
        if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
          var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
          if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
          if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
          if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
          if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
        }
      }
      return this;
    }

    function tree_visitAfter(callback) {
      var quads = [], next = [], q;
      if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));
      while (q = quads.pop()) {
        var node = q.node;
        if (node.length) {
          var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
          if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
          if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
          if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
          if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
        }
        next.push(q);
      }
      while (q = next.pop()) {
        callback(q.node, q.x0, q.y0, q.x1, q.y1);
      }
      return this;
    }

    function defaultX$1(d) {
      return d[0];
    }

    function tree_x(_) {
      return arguments.length ? (this._x = _, this) : this._x;
    }

    function defaultY$1(d) {
      return d[1];
    }

    function tree_y(_) {
      return arguments.length ? (this._y = _, this) : this._y;
    }

    function quadtree(nodes, x, y) {
      var tree = new Quadtree(x == null ? defaultX$1 : x, y == null ? defaultY$1 : y, NaN, NaN, NaN, NaN);
      return nodes == null ? tree : tree.addAll(nodes);
    }

    function Quadtree(x, y, x0, y0, x1, y1) {
      this._x = x;
      this._y = y;
      this._x0 = x0;
      this._y0 = y0;
      this._x1 = x1;
      this._y1 = y1;
      this._root = undefined;
    }

    function leaf_copy(leaf) {
      var copy = {data: leaf.data}, next = copy;
      while (leaf = leaf.next) next = next.next = {data: leaf.data};
      return copy;
    }

    var treeProto = quadtree.prototype = Quadtree.prototype;

    treeProto.copy = function() {
      var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
          node = this._root,
          nodes,
          child;

      if (!node) return copy;

      if (!node.length) return copy._root = leaf_copy(node), copy;

      nodes = [{source: node, target: copy._root = new Array(4)}];
      while (node = nodes.pop()) {
        for (var i = 0; i < 4; ++i) {
          if (child = node.source[i]) {
            if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});
            else node.target[i] = leaf_copy(child);
          }
        }
      }

      return copy;
    };

    treeProto.add = tree_add;
    treeProto.addAll = addAll;
    treeProto.cover = tree_cover;
    treeProto.data = tree_data;
    treeProto.extent = tree_extent;
    treeProto.find = tree_find;
    treeProto.remove = tree_remove;
    treeProto.removeAll = removeAll;
    treeProto.root = tree_root;
    treeProto.size = tree_size;
    treeProto.visit = tree_visit;
    treeProto.visitAfter = tree_visitAfter;
    treeProto.x = tree_x;
    treeProto.y = tree_y;

    function constant$7(x) {
      return function() {
        return x;
      };
    }

    function jiggle(random) {
      return (random() - 0.5) * 1e-6;
    }

    function x(d) {
      return d.x + d.vx;
    }

    function y(d) {
      return d.y + d.vy;
    }

    function collide(radius) {
      var nodes,
          radii,
          random,
          strength = 1,
          iterations = 1;

      if (typeof radius !== "function") radius = constant$7(radius == null ? 1 : +radius);

      function force() {
        var i, n = nodes.length,
            tree,
            node,
            xi,
            yi,
            ri,
            ri2;

        for (var k = 0; k < iterations; ++k) {
          tree = quadtree(nodes, x, y).visitAfter(prepare);
          for (i = 0; i < n; ++i) {
            node = nodes[i];
            ri = radii[node.index], ri2 = ri * ri;
            xi = node.x + node.vx;
            yi = node.y + node.vy;
            tree.visit(apply);
          }
        }

        function apply(quad, x0, y0, x1, y1) {
          var data = quad.data, rj = quad.r, r = ri + rj;
          if (data) {
            if (data.index > node.index) {
              var x = xi - data.x - data.vx,
                  y = yi - data.y - data.vy,
                  l = x * x + y * y;
              if (l < r * r) {
                if (x === 0) x = jiggle(random), l += x * x;
                if (y === 0) y = jiggle(random), l += y * y;
                l = (r - (l = Math.sqrt(l))) / l * strength;
                node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
                node.vy += (y *= l) * r;
                data.vx -= x * (r = 1 - r);
                data.vy -= y * r;
              }
            }
            return;
          }
          return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
        }
      }

      function prepare(quad) {
        if (quad.data) return quad.r = radii[quad.data.index];
        for (var i = quad.r = 0; i < 4; ++i) {
          if (quad[i] && quad[i].r > quad.r) {
            quad.r = quad[i].r;
          }
        }
      }

      function initialize() {
        if (!nodes) return;
        var i, n = nodes.length, node;
        radii = new Array(n);
        for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);
      }

      force.initialize = function(_nodes, _random) {
        nodes = _nodes;
        random = _random;
        initialize();
      };

      force.iterations = function(_) {
        return arguments.length ? (iterations = +_, force) : iterations;
      };

      force.strength = function(_) {
        return arguments.length ? (strength = +_, force) : strength;
      };

      force.radius = function(_) {
        return arguments.length ? (radius = typeof _ === "function" ? _ : constant$7(+_), initialize(), force) : radius;
      };

      return force;
    }

    function index$2(d) {
      return d.index;
    }

    function find$1(nodeById, nodeId) {
      var node = nodeById.get(nodeId);
      if (!node) throw new Error("node not found: " + nodeId);
      return node;
    }

    function link(links) {
      var id = index$2,
          strength = defaultStrength,
          strengths,
          distance = constant$7(30),
          distances,
          nodes,
          count,
          bias,
          random,
          iterations = 1;

      if (links == null) links = [];

      function defaultStrength(link) {
        return 1 / Math.min(count[link.source.index], count[link.target.index]);
      }

      function force(alpha) {
        for (var k = 0, n = links.length; k < iterations; ++k) {
          for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
            link = links[i], source = link.source, target = link.target;
            x = target.x + target.vx - source.x - source.vx || jiggle(random);
            y = target.y + target.vy - source.y - source.vy || jiggle(random);
            l = Math.sqrt(x * x + y * y);
            l = (l - distances[i]) / l * alpha * strengths[i];
            x *= l, y *= l;
            target.vx -= x * (b = bias[i]);
            target.vy -= y * b;
            source.vx += x * (b = 1 - b);
            source.vy += y * b;
          }
        }
      }

      function initialize() {
        if (!nodes) return;

        var i,
            n = nodes.length,
            m = links.length,
            nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d])),
            link;

        for (i = 0, count = new Array(n); i < m; ++i) {
          link = links[i], link.index = i;
          if (typeof link.source !== "object") link.source = find$1(nodeById, link.source);
          if (typeof link.target !== "object") link.target = find$1(nodeById, link.target);
          count[link.source.index] = (count[link.source.index] || 0) + 1;
          count[link.target.index] = (count[link.target.index] || 0) + 1;
        }

        for (i = 0, bias = new Array(m); i < m; ++i) {
          link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
        }

        strengths = new Array(m), initializeStrength();
        distances = new Array(m), initializeDistance();
      }

      function initializeStrength() {
        if (!nodes) return;

        for (var i = 0, n = links.length; i < n; ++i) {
          strengths[i] = +strength(links[i], i, links);
        }
      }

      function initializeDistance() {
        if (!nodes) return;

        for (var i = 0, n = links.length; i < n; ++i) {
          distances[i] = +distance(links[i], i, links);
        }
      }

      force.initialize = function(_nodes, _random) {
        nodes = _nodes;
        random = _random;
        initialize();
      };

      force.links = function(_) {
        return arguments.length ? (links = _, initialize(), force) : links;
      };

      force.id = function(_) {
        return arguments.length ? (id = _, force) : id;
      };

      force.iterations = function(_) {
        return arguments.length ? (iterations = +_, force) : iterations;
      };

      force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : constant$7(+_), initializeStrength(), force) : strength;
      };

      force.distance = function(_) {
        return arguments.length ? (distance = typeof _ === "function" ? _ : constant$7(+_), initializeDistance(), force) : distance;
      };

      return force;
    }

    // https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use
    const a = 1664525;
    const c = 1013904223;
    const m = 4294967296; // 2^32

    function lcg() {
      let s = 1;
      return () => (s = (a * s + c) % m) / m;
    }

    function x$1(d) {
      return d.x;
    }

    function y$1(d) {
      return d.y;
    }

    var initialRadius = 10,
        initialAngle = Math.PI * (3 - Math.sqrt(5));

    function simulation(nodes) {
      var simulation,
          alpha = 1,
          alphaMin = 0.001,
          alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),
          alphaTarget = 0,
          velocityDecay = 0.6,
          forces = new Map(),
          stepper = timer(step),
          event = dispatch("tick", "end"),
          random = lcg();

      if (nodes == null) nodes = [];

      function step() {
        tick();
        event.call("tick", simulation);
        if (alpha < alphaMin) {
          stepper.stop();
          event.call("end", simulation);
        }
      }

      function tick(iterations) {
        var i, n = nodes.length, node;

        if (iterations === undefined) iterations = 1;

        for (var k = 0; k < iterations; ++k) {
          alpha += (alphaTarget - alpha) * alphaDecay;

          forces.forEach(function(force) {
            force(alpha);
          });

          for (i = 0; i < n; ++i) {
            node = nodes[i];
            if (node.fx == null) node.x += node.vx *= velocityDecay;
            else node.x = node.fx, node.vx = 0;
            if (node.fy == null) node.y += node.vy *= velocityDecay;
            else node.y = node.fy, node.vy = 0;
          }
        }

        return simulation;
      }

      function initializeNodes() {
        for (var i = 0, n = nodes.length, node; i < n; ++i) {
          node = nodes[i], node.index = i;
          if (node.fx != null) node.x = node.fx;
          if (node.fy != null) node.y = node.fy;
          if (isNaN(node.x) || isNaN(node.y)) {
            var radius = initialRadius * Math.sqrt(0.5 + i), angle = i * initialAngle;
            node.x = radius * Math.cos(angle);
            node.y = radius * Math.sin(angle);
          }
          if (isNaN(node.vx) || isNaN(node.vy)) {
            node.vx = node.vy = 0;
          }
        }
      }

      function initializeForce(force) {
        if (force.initialize) force.initialize(nodes, random);
        return force;
      }

      initializeNodes();

      return simulation = {
        tick: tick,

        restart: function() {
          return stepper.restart(step), simulation;
        },

        stop: function() {
          return stepper.stop(), simulation;
        },

        nodes: function(_) {
          return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;
        },

        alpha: function(_) {
          return arguments.length ? (alpha = +_, simulation) : alpha;
        },

        alphaMin: function(_) {
          return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
        },

        alphaDecay: function(_) {
          return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
        },

        alphaTarget: function(_) {
          return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
        },

        velocityDecay: function(_) {
          return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
        },

        randomSource: function(_) {
          return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;
        },

        force: function(name, _) {
          return arguments.length > 1 ? ((_ == null ? forces.delete(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);
        },

        find: function(x, y, radius) {
          var i = 0,
              n = nodes.length,
              dx,
              dy,
              d2,
              node,
              closest;

          if (radius == null) radius = Infinity;
          else radius *= radius;

          for (i = 0; i < n; ++i) {
            node = nodes[i];
            dx = x - node.x;
            dy = y - node.y;
            d2 = dx * dx + dy * dy;
            if (d2 < radius) closest = node, radius = d2;
          }

          return closest;
        },

        on: function(name, _) {
          return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
        }
      };
    }

    function manyBody() {
      var nodes,
          node,
          random,
          alpha,
          strength = constant$7(-30),
          strengths,
          distanceMin2 = 1,
          distanceMax2 = Infinity,
          theta2 = 0.81;

      function force(_) {
        var i, n = nodes.length, tree = quadtree(nodes, x$1, y$1).visitAfter(accumulate);
        for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);
      }

      function initialize() {
        if (!nodes) return;
        var i, n = nodes.length, node;
        strengths = new Array(n);
        for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);
      }

      function accumulate(quad) {
        var strength = 0, q, c, weight = 0, x, y, i;

        // For internal nodes, accumulate forces from child quadrants.
        if (quad.length) {
          for (x = y = i = 0; i < 4; ++i) {
            if ((q = quad[i]) && (c = Math.abs(q.value))) {
              strength += q.value, weight += c, x += c * q.x, y += c * q.y;
            }
          }
          quad.x = x / weight;
          quad.y = y / weight;
        }

        // For leaf nodes, accumulate forces from coincident quadrants.
        else {
          q = quad;
          q.x = q.data.x;
          q.y = q.data.y;
          do strength += strengths[q.data.index];
          while (q = q.next);
        }

        quad.value = strength;
      }

      function apply(quad, x1, _, x2) {
        if (!quad.value) return true;

        var x = quad.x - node.x,
            y = quad.y - node.y,
            w = x2 - x1,
            l = x * x + y * y;

        // Apply the Barnes-Hut approximation if possible.
        // Limit forces for very close nodes; randomize direction if coincident.
        if (w * w / theta2 < l) {
          if (l < distanceMax2) {
            if (x === 0) x = jiggle(random), l += x * x;
            if (y === 0) y = jiggle(random), l += y * y;
            if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
            node.vx += x * quad.value * alpha / l;
            node.vy += y * quad.value * alpha / l;
          }
          return true;
        }

        // Otherwise, process points directly.
        else if (quad.length || l >= distanceMax2) return;

        // Limit forces for very close nodes; randomize direction if coincident.
        if (quad.data !== node || quad.next) {
          if (x === 0) x = jiggle(random), l += x * x;
          if (y === 0) y = jiggle(random), l += y * y;
          if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
        }

        do if (quad.data !== node) {
          w = strengths[quad.data.index] * alpha / l;
          node.vx += x * w;
          node.vy += y * w;
        } while (quad = quad.next);
      }

      force.initialize = function(_nodes, _random) {
        nodes = _nodes;
        random = _random;
        initialize();
      };

      force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : constant$7(+_), initialize(), force) : strength;
      };

      force.distanceMin = function(_) {
        return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
      };

      force.distanceMax = function(_) {
        return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
      };

      force.theta = function(_) {
        return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
      };

      return force;
    }

    function radial(radius, x, y) {
      var nodes,
          strength = constant$7(0.1),
          strengths,
          radiuses;

      if (typeof radius !== "function") radius = constant$7(+radius);
      if (x == null) x = 0;
      if (y == null) y = 0;

      function force(alpha) {
        for (var i = 0, n = nodes.length; i < n; ++i) {
          var node = nodes[i],
              dx = node.x - x || 1e-6,
              dy = node.y - y || 1e-6,
              r = Math.sqrt(dx * dx + dy * dy),
              k = (radiuses[i] - r) * strengths[i] * alpha / r;
          node.vx += dx * k;
          node.vy += dy * k;
        }
      }

      function initialize() {
        if (!nodes) return;
        var i, n = nodes.length;
        strengths = new Array(n);
        radiuses = new Array(n);
        for (i = 0; i < n; ++i) {
          radiuses[i] = +radius(nodes[i], i, nodes);
          strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);
        }
      }

      force.initialize = function(_) {
        nodes = _, initialize();
      };

      force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : constant$7(+_), initialize(), force) : strength;
      };

      force.radius = function(_) {
        return arguments.length ? (radius = typeof _ === "function" ? _ : constant$7(+_), initialize(), force) : radius;
      };

      force.x = function(_) {
        return arguments.length ? (x = +_, force) : x;
      };

      force.y = function(_) {
        return arguments.length ? (y = +_, force) : y;
      };

      return force;
    }

    function x$2(x) {
      var strength = constant$7(0.1),
          nodes,
          strengths,
          xz;

      if (typeof x !== "function") x = constant$7(x == null ? 0 : +x);

      function force(alpha) {
        for (var i = 0, n = nodes.length, node; i < n; ++i) {
          node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
        }
      }

      function initialize() {
        if (!nodes) return;
        var i, n = nodes.length;
        strengths = new Array(n);
        xz = new Array(n);
        for (i = 0; i < n; ++i) {
          strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
        }
      }

      force.initialize = function(_) {
        nodes = _;
        initialize();
      };

      force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : constant$7(+_), initialize(), force) : strength;
      };

      force.x = function(_) {
        return arguments.length ? (x = typeof _ === "function" ? _ : constant$7(+_), initialize(), force) : x;
      };

      return force;
    }

    function y$2(y) {
      var strength = constant$7(0.1),
          nodes,
          strengths,
          yz;

      if (typeof y !== "function") y = constant$7(y == null ? 0 : +y);

      function force(alpha) {
        for (var i = 0, n = nodes.length, node; i < n; ++i) {
          node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
        }
      }

      function initialize() {
        if (!nodes) return;
        var i, n = nodes.length;
        strengths = new Array(n);
        yz = new Array(n);
        for (i = 0; i < n; ++i) {
          strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
        }
      }

      force.initialize = function(_) {
        nodes = _;
        initialize();
      };

      force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : constant$7(+_), initialize(), force) : strength;
      };

      force.y = function(_) {
        return arguments.length ? (y = typeof _ === "function" ? _ : constant$7(+_), initialize(), force) : y;
      };

      return force;
    }

    function formatDecimal(x) {
      return Math.abs(x = Math.round(x)) >= 1e21
          ? x.toLocaleString("en").replace(/,/g, "")
          : x.toString(10);
    }

    // Computes the decimal coefficient and exponent of the specified number x with
    // significant digits p, where x is positive and p is in [1, 21] or undefined.
    // For example, formatDecimalParts(1.23) returns ["123", 0].
    function formatDecimalParts(x, p) {
      if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
      var i, coefficient = x.slice(0, i);

      // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
      // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
      return [
        coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
        +x.slice(i + 1)
      ];
    }

    function exponent$1(x) {
      return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
    }

    function formatGroup(grouping, thousands) {
      return function(value, width) {
        var i = value.length,
            t = [],
            j = 0,
            g = grouping[0],
            length = 0;

        while (i > 0 && g > 0) {
          if (length + g + 1 > width) g = Math.max(1, width - length);
          t.push(value.substring(i -= g, i + g));
          if ((length += g + 1) > width) break;
          g = grouping[j = (j + 1) % grouping.length];
        }

        return t.reverse().join(thousands);
      };
    }

    function formatNumerals(numerals) {
      return function(value) {
        return value.replace(/[0-9]/g, function(i) {
          return numerals[+i];
        });
      };
    }

    // [[fill]align][sign][symbol][0][width][,][.precision][~][type]
    var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

    function formatSpecifier(specifier) {
      if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
      var match;
      return new FormatSpecifier({
        fill: match[1],
        align: match[2],
        sign: match[3],
        symbol: match[4],
        zero: match[5],
        width: match[6],
        comma: match[7],
        precision: match[8] && match[8].slice(1),
        trim: match[9],
        type: match[10]
      });
    }

    formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

    function FormatSpecifier(specifier) {
      this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
      this.align = specifier.align === undefined ? ">" : specifier.align + "";
      this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
      this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
      this.zero = !!specifier.zero;
      this.width = specifier.width === undefined ? undefined : +specifier.width;
      this.comma = !!specifier.comma;
      this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
      this.trim = !!specifier.trim;
      this.type = specifier.type === undefined ? "" : specifier.type + "";
    }

    FormatSpecifier.prototype.toString = function() {
      return this.fill
          + this.align
          + this.sign
          + this.symbol
          + (this.zero ? "0" : "")
          + (this.width === undefined ? "" : Math.max(1, this.width | 0))
          + (this.comma ? "," : "")
          + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0))
          + (this.trim ? "~" : "")
          + this.type;
    };

    // Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
    function formatTrim(s) {
      out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
        switch (s[i]) {
          case ".": i0 = i1 = i; break;
          case "0": if (i0 === 0) i0 = i; i1 = i; break;
          default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;
        }
      }
      return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
    }

    var prefixExponent;

    function formatPrefixAuto(x, p) {
      var d = formatDecimalParts(x, p);
      if (!d) return x + "";
      var coefficient = d[0],
          exponent = d[1],
          i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
          n = coefficient.length;
      return i === n ? coefficient
          : i > n ? coefficient + new Array(i - n + 1).join("0")
          : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
          : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!
    }

    function formatRounded(x, p) {
      var d = formatDecimalParts(x, p);
      if (!d) return x + "";
      var coefficient = d[0],
          exponent = d[1];
      return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
          : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
          : coefficient + new Array(exponent - coefficient.length + 2).join("0");
    }

    var formatTypes = {
      "%": (x, p) => (x * 100).toFixed(p),
      "b": (x) => Math.round(x).toString(2),
      "c": (x) => x + "",
      "d": formatDecimal,
      "e": (x, p) => x.toExponential(p),
      "f": (x, p) => x.toFixed(p),
      "g": (x, p) => x.toPrecision(p),
      "o": (x) => Math.round(x).toString(8),
      "p": (x, p) => formatRounded(x * 100, p),
      "r": formatRounded,
      "s": formatPrefixAuto,
      "X": (x) => Math.round(x).toString(16).toUpperCase(),
      "x": (x) => Math.round(x).toString(16)
    };

    function identity$5(x) {
      return x;
    }

    var map$1 = Array.prototype.map,
        prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

    function formatLocale(locale) {
      var group = locale.grouping === undefined || locale.thousands === undefined ? identity$5 : formatGroup(map$1.call(locale.grouping, Number), locale.thousands + ""),
          currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
          currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
          decimal = locale.decimal === undefined ? "." : locale.decimal + "",
          numerals = locale.numerals === undefined ? identity$5 : formatNumerals(map$1.call(locale.numerals, String)),
          percent = locale.percent === undefined ? "%" : locale.percent + "",
          minus = locale.minus === undefined ? "−" : locale.minus + "",
          nan = locale.nan === undefined ? "NaN" : locale.nan + "";

      function newFormat(specifier) {
        specifier = formatSpecifier(specifier);

        var fill = specifier.fill,
            align = specifier.align,
            sign = specifier.sign,
            symbol = specifier.symbol,
            zero = specifier.zero,
            width = specifier.width,
            comma = specifier.comma,
            precision = specifier.precision,
            trim = specifier.trim,
            type = specifier.type;

        // The "n" type is an alias for ",g".
        if (type === "n") comma = true, type = "g";

        // The "" type, and any invalid type, is an alias for ".12~g".
        else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g";

        // If zero fill is specified, padding goes after sign and before digits.
        if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

        // Compute the prefix and suffix.
        // For SI-prefix, the suffix is lazily computed.
        var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
            suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";

        // What format function should we use?
        // Is this an integer type?
        // Can this type generate exponential notation?
        var formatType = formatTypes[type],
            maybeSuffix = /[defgprs%]/.test(type);

        // Set the default precision if not specified,
        // or clamp the specified precision to the supported range.
        // For significant precision, it must be in [1, 21].
        // For fixed precision, it must be in [0, 20].
        precision = precision === undefined ? 6
            : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
            : Math.max(0, Math.min(20, precision));

        function format(value) {
          var valuePrefix = prefix,
              valueSuffix = suffix,
              i, n, c;

          if (type === "c") {
            valueSuffix = formatType(value) + valueSuffix;
            value = "";
          } else {
            value = +value;

            // Determine the sign. -0 is not less than 0, but 1 / -0 is!
            var valueNegative = value < 0 || 1 / value < 0;

            // Perform the initial formatting.
            value = isNaN(value) ? nan : formatType(Math.abs(value), precision);

            // Trim insignificant zeros.
            if (trim) value = formatTrim(value);

            // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
            if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;

            // Compute the prefix and suffix.
            valuePrefix = (valueNegative ? (sign === "(" ? sign : minus) : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
            valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

            // Break the formatted value into the integer “value” part that can be
            // grouped, and fractional or exponential “suffix” part that is not.
            if (maybeSuffix) {
              i = -1, n = value.length;
              while (++i < n) {
                if (c = value.charCodeAt(i), 48 > c || c > 57) {
                  valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                  value = value.slice(0, i);
                  break;
                }
              }
            }
          }

          // If the fill character is not "0", grouping is applied before padding.
          if (comma && !zero) value = group(value, Infinity);

          // Compute the padding.
          var length = valuePrefix.length + value.length + valueSuffix.length,
              padding = length < width ? new Array(width - length + 1).join(fill) : "";

          // If the fill character is "0", grouping is applied after padding.
          if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

          // Reconstruct the final output based on the desired alignment.
          switch (align) {
            case "<": value = valuePrefix + value + valueSuffix + padding; break;
            case "=": value = valuePrefix + padding + value + valueSuffix; break;
            case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
            default: value = padding + valuePrefix + value + valueSuffix; break;
          }

          return numerals(value);
        }

        format.toString = function() {
          return specifier + "";
        };

        return format;
      }

      function formatPrefix(specifier, value) {
        var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
            e = Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3,
            k = Math.pow(10, -e),
            prefix = prefixes[8 + e / 3];
        return function(value) {
          return f(k * value) + prefix;
        };
      }

      return {
        format: newFormat,
        formatPrefix: formatPrefix
      };
    }

    var locale;
    var format;
    var formatPrefix;

    defaultLocale({
      thousands: ",",
      grouping: [3],
      currency: ["$", ""]
    });

    function defaultLocale(definition) {
      locale = formatLocale(definition);
      format = locale.format;
      formatPrefix = locale.formatPrefix;
      return locale;
    }

    function precisionFixed(step) {
      return Math.max(0, -exponent$1(Math.abs(step)));
    }

    function precisionPrefix(step, value) {
      return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3 - exponent$1(Math.abs(step)));
    }

    function precisionRound(step, max) {
      step = Math.abs(step), max = Math.abs(max) - step;
      return Math.max(0, exponent$1(max) - exponent$1(step)) + 1;
    }

    var epsilon$4 = 1e-6;
    var epsilon2$1 = 1e-12;
    var pi$3 = Math.PI;
    var halfPi$2 = pi$3 / 2;
    var quarterPi = pi$3 / 4;
    var tau$4 = pi$3 * 2;

    var degrees$2 = 180 / pi$3;
    var radians$1 = pi$3 / 180;

    var abs$2 = Math.abs;
    var atan = Math.atan;
    var atan2 = Math.atan2;
    var cos$1 = Math.cos;
    var ceil$1 = Math.ceil;
    var exp$1 = Math.exp;
    var hypot = Math.hypot;
    var log = Math.log;
    var pow$2 = Math.pow;
    var sin$1 = Math.sin;
    var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };
    var sqrt = Math.sqrt;
    var tan = Math.tan;

    function acos(x) {
      return x > 1 ? 0 : x < -1 ? pi$3 : Math.acos(x);
    }

    function asin(x) {
      return x > 1 ? halfPi$2 : x < -1 ? -halfPi$2 : Math.asin(x);
    }

    function haversin(x) {
      return (x = sin$1(x / 2)) * x;
    }

    function noop$3() {}

    function streamGeometry(geometry, stream) {
      if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
        streamGeometryType[geometry.type](geometry, stream);
      }
    }

    var streamObjectType = {
      Feature: function(object, stream) {
        streamGeometry(object.geometry, stream);
      },
      FeatureCollection: function(object, stream) {
        var features = object.features, i = -1, n = features.length;
        while (++i < n) streamGeometry(features[i].geometry, stream);
      }
    };

    var streamGeometryType = {
      Sphere: function(object, stream) {
        stream.sphere();
      },
      Point: function(object, stream) {
        object = object.coordinates;
        stream.point(object[0], object[1], object[2]);
      },
      MultiPoint: function(object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
      },
      LineString: function(object, stream) {
        streamLine(object.coordinates, stream, 0);
      },
      MultiLineString: function(object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n) streamLine(coordinates[i], stream, 0);
      },
      Polygon: function(object, stream) {
        streamPolygon(object.coordinates, stream);
      },
      MultiPolygon: function(object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n) streamPolygon(coordinates[i], stream);
      },
      GeometryCollection: function(object, stream) {
        var geometries = object.geometries, i = -1, n = geometries.length;
        while (++i < n) streamGeometry(geometries[i], stream);
      }
    };

    function streamLine(coordinates, stream, closed) {
      var i = -1, n = coordinates.length - closed, coordinate;
      stream.lineStart();
      while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
      stream.lineEnd();
    }

    function streamPolygon(coordinates, stream) {
      var i = -1, n = coordinates.length;
      stream.polygonStart();
      while (++i < n) streamLine(coordinates[i], stream, 1);
      stream.polygonEnd();
    }

    function geoStream(object, stream) {
      if (object && streamObjectType.hasOwnProperty(object.type)) {
        streamObjectType[object.type](object, stream);
      } else {
        streamGeometry(object, stream);
      }
    }

    var areaRingSum = new Adder();

    // hello?

    var areaSum = new Adder(),
        lambda00,
        phi00,
        lambda0,
        cosPhi0,
        sinPhi0;

    var areaStream = {
      point: noop$3,
      lineStart: noop$3,
      lineEnd: noop$3,
      polygonStart: function() {
        areaRingSum = new Adder();
        areaStream.lineStart = areaRingStart;
        areaStream.lineEnd = areaRingEnd;
      },
      polygonEnd: function() {
        var areaRing = +areaRingSum;
        areaSum.add(areaRing < 0 ? tau$4 + areaRing : areaRing);
        this.lineStart = this.lineEnd = this.point = noop$3;
      },
      sphere: function() {
        areaSum.add(tau$4);
      }
    };

    function areaRingStart() {
      areaStream.point = areaPointFirst;
    }

    function areaRingEnd() {
      areaPoint(lambda00, phi00);
    }

    function areaPointFirst(lambda, phi) {
      areaStream.point = areaPoint;
      lambda00 = lambda, phi00 = phi;
      lambda *= radians$1, phi *= radians$1;
      lambda0 = lambda, cosPhi0 = cos$1(phi = phi / 2 + quarterPi), sinPhi0 = sin$1(phi);
    }

    function areaPoint(lambda, phi) {
      lambda *= radians$1, phi *= radians$1;
      phi = phi / 2 + quarterPi; // half the angular distance from south pole

      // Spherical excess E for a spherical triangle with vertices: south pole,
      // previous point, current point.  Uses a formula derived from Cagnoli’s
      // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
      var dLambda = lambda - lambda0,
          sdLambda = dLambda >= 0 ? 1 : -1,
          adLambda = sdLambda * dLambda,
          cosPhi = cos$1(phi),
          sinPhi = sin$1(phi),
          k = sinPhi0 * sinPhi,
          u = cosPhi0 * cosPhi + k * cos$1(adLambda),
          v = k * sdLambda * sin$1(adLambda);
      areaRingSum.add(atan2(v, u));

      // Advance the previous points.
      lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
    }

    function area$1(object) {
      areaSum = new Adder();
      geoStream(object, areaStream);
      return areaSum * 2;
    }

    function spherical(cartesian) {
      return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];
    }

    function cartesian(spherical) {
      var lambda = spherical[0], phi = spherical[1], cosPhi = cos$1(phi);
      return [cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi)];
    }

    function cartesianDot(a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    }

    function cartesianCross(a, b) {
      return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
    }

    // TODO return a
    function cartesianAddInPlace(a, b) {
      a[0] += b[0], a[1] += b[1], a[2] += b[2];
    }

    function cartesianScale(vector, k) {
      return [vector[0] * k, vector[1] * k, vector[2] * k];
    }

    // TODO return d
    function cartesianNormalizeInPlace(d) {
      var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
      d[0] /= l, d[1] /= l, d[2] /= l;
    }

    var lambda0$1, phi0, lambda1, phi1, // bounds
        lambda2, // previous lambda-coordinate
        lambda00$1, phi00$1, // first point
        p0, // previous 3D point
        deltaSum,
        ranges,
        range$1;

    var boundsStream = {
      point: boundsPoint,
      lineStart: boundsLineStart,
      lineEnd: boundsLineEnd,
      polygonStart: function() {
        boundsStream.point = boundsRingPoint;
        boundsStream.lineStart = boundsRingStart;
        boundsStream.lineEnd = boundsRingEnd;
        deltaSum = new Adder();
        areaStream.polygonStart();
      },
      polygonEnd: function() {
        areaStream.polygonEnd();
        boundsStream.point = boundsPoint;
        boundsStream.lineStart = boundsLineStart;
        boundsStream.lineEnd = boundsLineEnd;
        if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
        else if (deltaSum > epsilon$4) phi1 = 90;
        else if (deltaSum < -epsilon$4) phi0 = -90;
        range$1[0] = lambda0$1, range$1[1] = lambda1;
      },
      sphere: function() {
        lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
      }
    };

    function boundsPoint(lambda, phi) {
      ranges.push(range$1 = [lambda0$1 = lambda, lambda1 = lambda]);
      if (phi < phi0) phi0 = phi;
      if (phi > phi1) phi1 = phi;
    }

    function linePoint(lambda, phi) {
      var p = cartesian([lambda * radians$1, phi * radians$1]);
      if (p0) {
        var normal = cartesianCross(p0, p),
            equatorial = [normal[1], -normal[0], 0],
            inflection = cartesianCross(equatorial, normal);
        cartesianNormalizeInPlace(inflection);
        inflection = spherical(inflection);
        var delta = lambda - lambda2,
            sign = delta > 0 ? 1 : -1,
            lambdai = inflection[0] * degrees$2 * sign,
            phii,
            antimeridian = abs$2(delta) > 180;
        if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
          phii = inflection[1] * degrees$2;
          if (phii > phi1) phi1 = phii;
        } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
          phii = -inflection[1] * degrees$2;
          if (phii < phi0) phi0 = phii;
        } else {
          if (phi < phi0) phi0 = phi;
          if (phi > phi1) phi1 = phi;
        }
        if (antimeridian) {
          if (lambda < lambda2) {
            if (angle$1(lambda0$1, lambda) > angle$1(lambda0$1, lambda1)) lambda1 = lambda;
          } else {
            if (angle$1(lambda, lambda1) > angle$1(lambda0$1, lambda1)) lambda0$1 = lambda;
          }
        } else {
          if (lambda1 >= lambda0$1) {
            if (lambda < lambda0$1) lambda0$1 = lambda;
            if (lambda > lambda1) lambda1 = lambda;
          } else {
            if (lambda > lambda2) {
              if (angle$1(lambda0$1, lambda) > angle$1(lambda0$1, lambda1)) lambda1 = lambda;
            } else {
              if (angle$1(lambda, lambda1) > angle$1(lambda0$1, lambda1)) lambda0$1 = lambda;
            }
          }
        }
      } else {
        ranges.push(range$1 = [lambda0$1 = lambda, lambda1 = lambda]);
      }
      if (phi < phi0) phi0 = phi;
      if (phi > phi1) phi1 = phi;
      p0 = p, lambda2 = lambda;
    }

    function boundsLineStart() {
      boundsStream.point = linePoint;
    }

    function boundsLineEnd() {
      range$1[0] = lambda0$1, range$1[1] = lambda1;
      boundsStream.point = boundsPoint;
      p0 = null;
    }

    function boundsRingPoint(lambda, phi) {
      if (p0) {
        var delta = lambda - lambda2;
        deltaSum.add(abs$2(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
      } else {
        lambda00$1 = lambda, phi00$1 = phi;
      }
      areaStream.point(lambda, phi);
      linePoint(lambda, phi);
    }

    function boundsRingStart() {
      areaStream.lineStart();
    }

    function boundsRingEnd() {
      boundsRingPoint(lambda00$1, phi00$1);
      areaStream.lineEnd();
      if (abs$2(deltaSum) > epsilon$4) lambda0$1 = -(lambda1 = 180);
      range$1[0] = lambda0$1, range$1[1] = lambda1;
      p0 = null;
    }

    // Finds the left-right distance between two longitudes.
    // This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
    // the distance between ±180° to be 360°.
    function angle$1(lambda0, lambda1) {
      return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
    }

    function rangeCompare(a, b) {
      return a[0] - b[0];
    }

    function rangeContains(range, x) {
      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
    }

    function bounds(feature) {
      var i, n, a, b, merged, deltaMax, delta;

      phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);
      ranges = [];
      geoStream(feature, boundsStream);

      // First, sort ranges by their minimum longitudes.
      if (n = ranges.length) {
        ranges.sort(rangeCompare);

        // Then, merge any ranges that overlap.
        for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
          b = ranges[i];
          if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
            if (angle$1(a[0], b[1]) > angle$1(a[0], a[1])) a[1] = b[1];
            if (angle$1(b[0], a[1]) > angle$1(a[0], a[1])) a[0] = b[0];
          } else {
            merged.push(a = b);
          }
        }

        // Finally, find the largest gap between the merged ranges.
        // The final bounding box will be the inverse of this gap.
        for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
          b = merged[i];
          if ((delta = angle$1(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];
        }
      }

      ranges = range$1 = null;

      return lambda0$1 === Infinity || phi0 === Infinity
          ? [[NaN, NaN], [NaN, NaN]]
          : [[lambda0$1, phi0], [lambda1, phi1]];
    }

    var W0, W1,
        X0, Y0, Z0,
        X1, Y1, Z1,
        X2, Y2, Z2,
        lambda00$2, phi00$2, // first point
        x0, y0, z0; // previous point

    var centroidStream = {
      sphere: noop$3,
      point: centroidPoint,
      lineStart: centroidLineStart,
      lineEnd: centroidLineEnd,
      polygonStart: function() {
        centroidStream.lineStart = centroidRingStart;
        centroidStream.lineEnd = centroidRingEnd;
      },
      polygonEnd: function() {
        centroidStream.lineStart = centroidLineStart;
        centroidStream.lineEnd = centroidLineEnd;
      }
    };

    // Arithmetic mean of Cartesian vectors.
    function centroidPoint(lambda, phi) {
      lambda *= radians$1, phi *= radians$1;
      var cosPhi = cos$1(phi);
      centroidPointCartesian(cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi));
    }

    function centroidPointCartesian(x, y, z) {
      ++W0;
      X0 += (x - X0) / W0;
      Y0 += (y - Y0) / W0;
      Z0 += (z - Z0) / W0;
    }

    function centroidLineStart() {
      centroidStream.point = centroidLinePointFirst;
    }

    function centroidLinePointFirst(lambda, phi) {
      lambda *= radians$1, phi *= radians$1;
      var cosPhi = cos$1(phi);
      x0 = cosPhi * cos$1(lambda);
      y0 = cosPhi * sin$1(lambda);
      z0 = sin$1(phi);
      centroidStream.point = centroidLinePoint;
      centroidPointCartesian(x0, y0, z0);
    }

    function centroidLinePoint(lambda, phi) {
      lambda *= radians$1, phi *= radians$1;
      var cosPhi = cos$1(phi),
          x = cosPhi * cos$1(lambda),
          y = cosPhi * sin$1(lambda),
          z = sin$1(phi),
          w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
      W1 += w;
      X1 += w * (x0 + (x0 = x));
      Y1 += w * (y0 + (y0 = y));
      Z1 += w * (z0 + (z0 = z));
      centroidPointCartesian(x0, y0, z0);
    }

    function centroidLineEnd() {
      centroidStream.point = centroidPoint;
    }

    // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
    // J. Applied Mechanics 42, 239 (1975).
    function centroidRingStart() {
      centroidStream.point = centroidRingPointFirst;
    }

    function centroidRingEnd() {
      centroidRingPoint(lambda00$2, phi00$2);
      centroidStream.point = centroidPoint;
    }

    function centroidRingPointFirst(lambda, phi) {
      lambda00$2 = lambda, phi00$2 = phi;
      lambda *= radians$1, phi *= radians$1;
      centroidStream.point = centroidRingPoint;
      var cosPhi = cos$1(phi);
      x0 = cosPhi * cos$1(lambda);
      y0 = cosPhi * sin$1(lambda);
      z0 = sin$1(phi);
      centroidPointCartesian(x0, y0, z0);
    }

    function centroidRingPoint(lambda, phi) {
      lambda *= radians$1, phi *= radians$1;
      var cosPhi = cos$1(phi),
          x = cosPhi * cos$1(lambda),
          y = cosPhi * sin$1(lambda),
          z = sin$1(phi),
          cx = y0 * z - z0 * y,
          cy = z0 * x - x0 * z,
          cz = x0 * y - y0 * x,
          m = hypot(cx, cy, cz),
          w = asin(m), // line weight = angle
          v = m && -w / m; // area weight multiplier
      X2.add(v * cx);
      Y2.add(v * cy);
      Z2.add(v * cz);
      W1 += w;
      X1 += w * (x0 + (x0 = x));
      Y1 += w * (y0 + (y0 = y));
      Z1 += w * (z0 + (z0 = z));
      centroidPointCartesian(x0, y0, z0);
    }

    function centroid(object) {
      W0 = W1 =
      X0 = Y0 = Z0 =
      X1 = Y1 = Z1 = 0;
      X2 = new Adder();
      Y2 = new Adder();
      Z2 = new Adder();
      geoStream(object, centroidStream);

      var x = +X2,
          y = +Y2,
          z = +Z2,
          m = hypot(x, y, z);

      // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
      if (m < epsilon2$1) {
        x = X1, y = Y1, z = Z1;
        // If the feature has zero length, fall back to arithmetic mean of point vectors.
        if (W1 < epsilon$4) x = X0, y = Y0, z = Z0;
        m = hypot(x, y, z);
        // If the feature still has an undefined ccentroid, then return.
        if (m < epsilon2$1) return [NaN, NaN];
      }

      return [atan2(y, x) * degrees$2, asin(z / m) * degrees$2];
    }

    function constant$8(x) {
      return function() {
        return x;
      };
    }

    function compose(a, b) {

      function compose(x, y) {
        return x = a(x, y), b(x[0], x[1]);
      }

      if (a.invert && b.invert) compose.invert = function(x, y) {
        return x = b.invert(x, y), x && a.invert(x[0], x[1]);
      };

      return compose;
    }

    function rotationIdentity(lambda, phi) {
      return [abs$2(lambda) > pi$3 ? lambda + Math.round(-lambda / tau$4) * tau$4 : lambda, phi];
    }

    rotationIdentity.invert = rotationIdentity;

    function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
      return (deltaLambda %= tau$4) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))
        : rotationLambda(deltaLambda))
        : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)
        : rotationIdentity);
    }

    function forwardRotationLambda(deltaLambda) {
      return function(lambda, phi) {
        return lambda += deltaLambda, [lambda > pi$3 ? lambda - tau$4 : lambda < -pi$3 ? lambda + tau$4 : lambda, phi];
      };
    }

    function rotationLambda(deltaLambda) {
      var rotation = forwardRotationLambda(deltaLambda);
      rotation.invert = forwardRotationLambda(-deltaLambda);
      return rotation;
    }

    function rotationPhiGamma(deltaPhi, deltaGamma) {
      var cosDeltaPhi = cos$1(deltaPhi),
          sinDeltaPhi = sin$1(deltaPhi),
          cosDeltaGamma = cos$1(deltaGamma),
          sinDeltaGamma = sin$1(deltaGamma);

      function rotation(lambda, phi) {
        var cosPhi = cos$1(phi),
            x = cos$1(lambda) * cosPhi,
            y = sin$1(lambda) * cosPhi,
            z = sin$1(phi),
            k = z * cosDeltaPhi + x * sinDeltaPhi;
        return [
          atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
          asin(k * cosDeltaGamma + y * sinDeltaGamma)
        ];
      }

      rotation.invert = function(lambda, phi) {
        var cosPhi = cos$1(phi),
            x = cos$1(lambda) * cosPhi,
            y = sin$1(lambda) * cosPhi,
            z = sin$1(phi),
            k = z * cosDeltaGamma - y * sinDeltaGamma;
        return [
          atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
          asin(k * cosDeltaPhi - x * sinDeltaPhi)
        ];
      };

      return rotation;
    }

    function rotation(rotate) {
      rotate = rotateRadians(rotate[0] * radians$1, rotate[1] * radians$1, rotate.length > 2 ? rotate[2] * radians$1 : 0);

      function forward(coordinates) {
        coordinates = rotate(coordinates[0] * radians$1, coordinates[1] * radians$1);
        return coordinates[0] *= degrees$2, coordinates[1] *= degrees$2, coordinates;
      }

      forward.invert = function(coordinates) {
        coordinates = rotate.invert(coordinates[0] * radians$1, coordinates[1] * radians$1);
        return coordinates[0] *= degrees$2, coordinates[1] *= degrees$2, coordinates;
      };

      return forward;
    }

    // Generates a circle centered at [0°, 0°], with a given radius and precision.
    function circleStream(stream, radius, delta, direction, t0, t1) {
      if (!delta) return;
      var cosRadius = cos$1(radius),
          sinRadius = sin$1(radius),
          step = direction * delta;
      if (t0 == null) {
        t0 = radius + direction * tau$4;
        t1 = radius - step / 2;
      } else {
        t0 = circleRadius(cosRadius, t0);
        t1 = circleRadius(cosRadius, t1);
        if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$4;
      }
      for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
        point = spherical([cosRadius, -sinRadius * cos$1(t), -sinRadius * sin$1(t)]);
        stream.point(point[0], point[1]);
      }
    }

    // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
    function circleRadius(cosRadius, point) {
      point = cartesian(point), point[0] -= cosRadius;
      cartesianNormalizeInPlace(point);
      var radius = acos(-point[1]);
      return ((-point[2] < 0 ? -radius : radius) + tau$4 - epsilon$4) % tau$4;
    }

    function circle() {
      var center = constant$8([0, 0]),
          radius = constant$8(90),
          precision = constant$8(6),
          ring,
          rotate,
          stream = {point: point};

      function point(x, y) {
        ring.push(x = rotate(x, y));
        x[0] *= degrees$2, x[1] *= degrees$2;
      }

      function circle() {
        var c = center.apply(this, arguments),
            r = radius.apply(this, arguments) * radians$1,
            p = precision.apply(this, arguments) * radians$1;
        ring = [];
        rotate = rotateRadians(-c[0] * radians$1, -c[1] * radians$1, 0).invert;
        circleStream(stream, r, p, 1);
        c = {type: "Polygon", coordinates: [ring]};
        ring = rotate = null;
        return c;
      }

      circle.center = function(_) {
        return arguments.length ? (center = typeof _ === "function" ? _ : constant$8([+_[0], +_[1]]), circle) : center;
      };

      circle.radius = function(_) {
        return arguments.length ? (radius = typeof _ === "function" ? _ : constant$8(+_), circle) : radius;
      };

      circle.precision = function(_) {
        return arguments.length ? (precision = typeof _ === "function" ? _ : constant$8(+_), circle) : precision;
      };

      return circle;
    }

    function clipBuffer() {
      var lines = [],
          line;
      return {
        point: function(x, y, m) {
          line.push([x, y, m]);
        },
        lineStart: function() {
          lines.push(line = []);
        },
        lineEnd: noop$3,
        rejoin: function() {
          if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
        },
        result: function() {
          var result = lines;
          lines = [];
          line = null;
          return result;
        }
      };
    }

    function pointEqual(a, b) {
      return abs$2(a[0] - b[0]) < epsilon$4 && abs$2(a[1] - b[1]) < epsilon$4;
    }

    function Intersection(point, points, other, entry) {
      this.x = point;
      this.z = points;
      this.o = other; // another intersection
      this.e = entry; // is an entry?
      this.v = false; // visited
      this.n = this.p = null; // next & previous
    }

    // A generalized polygon clipping algorithm: given a polygon that has been cut
    // into its visible line segments, and rejoins the segments by interpolating
    // along the clip edge.
    function clipRejoin(segments, compareIntersection, startInside, interpolate, stream) {
      var subject = [],
          clip = [],
          i,
          n;

      segments.forEach(function(segment) {
        if ((n = segment.length - 1) <= 0) return;
        var n, p0 = segment[0], p1 = segment[n], x;

        if (pointEqual(p0, p1)) {
          if (!p0[2] && !p1[2]) {
            stream.lineStart();
            for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);
            stream.lineEnd();
            return;
          }
          // handle degenerate cases by moving the point
          p1[0] += 2 * epsilon$4;
        }

        subject.push(x = new Intersection(p0, segment, null, true));
        clip.push(x.o = new Intersection(p0, null, x, false));
        subject.push(x = new Intersection(p1, segment, null, false));
        clip.push(x.o = new Intersection(p1, null, x, true));
      });

      if (!subject.length) return;

      clip.sort(compareIntersection);
      link$1(subject);
      link$1(clip);

      for (i = 0, n = clip.length; i < n; ++i) {
        clip[i].e = startInside = !startInside;
      }

      var start = subject[0],
          points,
          point;

      while (1) {
        // Find first unvisited intersection.
        var current = start,
            isSubject = true;
        while (current.v) if ((current = current.n) === start) return;
        points = current.z;
        stream.lineStart();
        do {
          current.v = current.o.v = true;
          if (current.e) {
            if (isSubject) {
              for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
            } else {
              interpolate(current.x, current.n.x, 1, stream);
            }
            current = current.n;
          } else {
            if (isSubject) {
              points = current.p.z;
              for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
            } else {
              interpolate(current.x, current.p.x, -1, stream);
            }
            current = current.p;
          }
          current = current.o;
          points = current.z;
          isSubject = !isSubject;
        } while (!current.v);
        stream.lineEnd();
      }
    }

    function link$1(array) {
      if (!(n = array.length)) return;
      var n,
          i = 0,
          a = array[0],
          b;
      while (++i < n) {
        a.n = b = array[i];
        b.p = a;
        a = b;
      }
      a.n = b = array[0];
      b.p = a;
    }

    function longitude(point) {
      if (abs$2(point[0]) <= pi$3)
        return point[0];
      else
        return sign(point[0]) * ((abs$2(point[0]) + pi$3) % tau$4 - pi$3);
    }

    function polygonContains(polygon, point) {
      var lambda = longitude(point),
          phi = point[1],
          sinPhi = sin$1(phi),
          normal = [sin$1(lambda), -cos$1(lambda), 0],
          angle = 0,
          winding = 0;

      var sum = new Adder();

      if (sinPhi === 1) phi = halfPi$2 + epsilon$4;
      else if (sinPhi === -1) phi = -halfPi$2 - epsilon$4;

      for (var i = 0, n = polygon.length; i < n; ++i) {
        if (!(m = (ring = polygon[i]).length)) continue;
        var ring,
            m,
            point0 = ring[m - 1],
            lambda0 = longitude(point0),
            phi0 = point0[1] / 2 + quarterPi,
            sinPhi0 = sin$1(phi0),
            cosPhi0 = cos$1(phi0);

        for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
          var point1 = ring[j],
              lambda1 = longitude(point1),
              phi1 = point1[1] / 2 + quarterPi,
              sinPhi1 = sin$1(phi1),
              cosPhi1 = cos$1(phi1),
              delta = lambda1 - lambda0,
              sign = delta >= 0 ? 1 : -1,
              absDelta = sign * delta,
              antimeridian = absDelta > pi$3,
              k = sinPhi0 * sinPhi1;

          sum.add(atan2(k * sign * sin$1(absDelta), cosPhi0 * cosPhi1 + k * cos$1(absDelta)));
          angle += antimeridian ? delta + sign * tau$4 : delta;

          // Are the longitudes either side of the point’s meridian (lambda),
          // and are the latitudes smaller than the parallel (phi)?
          if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
            var arc = cartesianCross(cartesian(point0), cartesian(point1));
            cartesianNormalizeInPlace(arc);
            var intersection = cartesianCross(normal, arc);
            cartesianNormalizeInPlace(intersection);
            var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);
            if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
              winding += antimeridian ^ delta >= 0 ? 1 : -1;
            }
          }
        }
      }

      // First, determine whether the South pole is inside or outside:
      //
      // It is inside if:
      // * the polygon winds around it in a clockwise direction.
      // * the polygon does not (cumulatively) wind around it, but has a negative
      //   (counter-clockwise) area.
      //
      // Second, count the (signed) number of times a segment crosses a lambda
      // from the point to the South pole.  If it is zero, then the point is the
      // same side as the South pole.

      return (angle < -epsilon$4 || angle < epsilon$4 && sum < -epsilon2$1) ^ (winding & 1);
    }

    function clip(pointVisible, clipLine, interpolate, start) {
      return function(sink) {
        var line = clipLine(sink),
            ringBuffer = clipBuffer(),
            ringSink = clipLine(ringBuffer),
            polygonStarted = false,
            polygon,
            segments,
            ring;

        var clip = {
          point: point,
          lineStart: lineStart,
          lineEnd: lineEnd,
          polygonStart: function() {
            clip.point = pointRing;
            clip.lineStart = ringStart;
            clip.lineEnd = ringEnd;
            segments = [];
            polygon = [];
          },
          polygonEnd: function() {
            clip.point = point;
            clip.lineStart = lineStart;
            clip.lineEnd = lineEnd;
            segments = merge(segments);
            var startInside = polygonContains(polygon, start);
            if (segments.length) {
              if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
              clipRejoin(segments, compareIntersection, startInside, interpolate, sink);
            } else if (startInside) {
              if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
              sink.lineStart();
              interpolate(null, null, 1, sink);
              sink.lineEnd();
            }
            if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
            segments = polygon = null;
          },
          sphere: function() {
            sink.polygonStart();
            sink.lineStart();
            interpolate(null, null, 1, sink);
            sink.lineEnd();
            sink.polygonEnd();
          }
        };

        function point(lambda, phi) {
          if (pointVisible(lambda, phi)) sink.point(lambda, phi);
        }

        function pointLine(lambda, phi) {
          line.point(lambda, phi);
        }

        function lineStart() {
          clip.point = pointLine;
          line.lineStart();
        }

        function lineEnd() {
          clip.point = point;
          line.lineEnd();
        }

        function pointRing(lambda, phi) {
          ring.push([lambda, phi]);
          ringSink.point(lambda, phi);
        }

        function ringStart() {
          ringSink.lineStart();
          ring = [];
        }

        function ringEnd() {
          pointRing(ring[0][0], ring[0][1]);
          ringSink.lineEnd();

          var clean = ringSink.clean(),
              ringSegments = ringBuffer.result(),
              i, n = ringSegments.length, m,
              segment,
              point;

          ring.pop();
          polygon.push(ring);
          ring = null;

          if (!n) return;

          // No intersections.
          if (clean & 1) {
            segment = ringSegments[0];
            if ((m = segment.length - 1) > 0) {
              if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
              sink.lineStart();
              for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);
              sink.lineEnd();
            }
            return;
          }

          // Rejoin connected segments.
          // TODO reuse ringBuffer.rejoin()?
          if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));

          segments.push(ringSegments.filter(validSegment));
        }

        return clip;
      };
    }

    function validSegment(segment) {
      return segment.length > 1;
    }

    // Intersections are sorted along the clip edge. For both antimeridian cutting
    // and circle clipping, the same comparison is used.
    function compareIntersection(a, b) {
      return ((a = a.x)[0] < 0 ? a[1] - halfPi$2 - epsilon$4 : halfPi$2 - a[1])
           - ((b = b.x)[0] < 0 ? b[1] - halfPi$2 - epsilon$4 : halfPi$2 - b[1]);
    }

    var clipAntimeridian = clip(
      function() { return true; },
      clipAntimeridianLine,
      clipAntimeridianInterpolate,
      [-pi$3, -halfPi$2]
    );

    // Takes a line and cuts into visible segments. Return values: 0 - there were
    // intersections or the line was empty; 1 - no intersections; 2 - there were
    // intersections, and the first and last segments should be rejoined.
    function clipAntimeridianLine(stream) {
      var lambda0 = NaN,
          phi0 = NaN,
          sign0 = NaN,
          clean; // no intersections

      return {
        lineStart: function() {
          stream.lineStart();
          clean = 1;
        },
        point: function(lambda1, phi1) {
          var sign1 = lambda1 > 0 ? pi$3 : -pi$3,
              delta = abs$2(lambda1 - lambda0);
          if (abs$2(delta - pi$3) < epsilon$4) { // line crosses a pole
            stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$2 : -halfPi$2);
            stream.point(sign0, phi0);
            stream.lineEnd();
            stream.lineStart();
            stream.point(sign1, phi0);
            stream.point(lambda1, phi0);
            clean = 0;
          } else if (sign0 !== sign1 && delta >= pi$3) { // line crosses antimeridian
            if (abs$2(lambda0 - sign0) < epsilon$4) lambda0 -= sign0 * epsilon$4; // handle degeneracies
            if (abs$2(lambda1 - sign1) < epsilon$4) lambda1 -= sign1 * epsilon$4;
            phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
            stream.point(sign0, phi0);
            stream.lineEnd();
            stream.lineStart();
            stream.point(sign1, phi0);
            clean = 0;
          }
          stream.point(lambda0 = lambda1, phi0 = phi1);
          sign0 = sign1;
        },
        lineEnd: function() {
          stream.lineEnd();
          lambda0 = phi0 = NaN;
        },
        clean: function() {
          return 2 - clean; // if intersections, rejoin first and last segments
        }
      };
    }

    function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
      var cosPhi0,
          cosPhi1,
          sinLambda0Lambda1 = sin$1(lambda0 - lambda1);
      return abs$2(sinLambda0Lambda1) > epsilon$4
          ? atan((sin$1(phi0) * (cosPhi1 = cos$1(phi1)) * sin$1(lambda1)
              - sin$1(phi1) * (cosPhi0 = cos$1(phi0)) * sin$1(lambda0))
              / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))
          : (phi0 + phi1) / 2;
    }

    function clipAntimeridianInterpolate(from, to, direction, stream) {
      var phi;
      if (from == null) {
        phi = direction * halfPi$2;
        stream.point(-pi$3, phi);
        stream.point(0, phi);
        stream.point(pi$3, phi);
        stream.point(pi$3, 0);
        stream.point(pi$3, -phi);
        stream.point(0, -phi);
        stream.point(-pi$3, -phi);
        stream.point(-pi$3, 0);
        stream.point(-pi$3, phi);
      } else if (abs$2(from[0] - to[0]) > epsilon$4) {
        var lambda = from[0] < to[0] ? pi$3 : -pi$3;
        phi = direction * lambda / 2;
        stream.point(-lambda, phi);
        stream.point(0, phi);
        stream.point(lambda, phi);
      } else {
        stream.point(to[0], to[1]);
      }
    }

    function clipCircle(radius) {
      var cr = cos$1(radius),
          delta = 6 * radians$1,
          smallRadius = cr > 0,
          notHemisphere = abs$2(cr) > epsilon$4; // TODO optimise for this common case

      function interpolate(from, to, direction, stream) {
        circleStream(stream, radius, delta, direction, from, to);
      }

      function visible(lambda, phi) {
        return cos$1(lambda) * cos$1(phi) > cr;
      }

      // Takes a line and cuts into visible segments. Return values used for polygon
      // clipping: 0 - there were intersections or the line was empty; 1 - no
      // intersections 2 - there were intersections, and the first and last segments
      // should be rejoined.
      function clipLine(stream) {
        var point0, // previous point
            c0, // code for previous point
            v0, // visibility of previous point
            v00, // visibility of first point
            clean; // no intersections
        return {
          lineStart: function() {
            v00 = v0 = false;
            clean = 1;
          },
          point: function(lambda, phi) {
            var point1 = [lambda, phi],
                point2,
                v = visible(lambda, phi),
                c = smallRadius
                  ? v ? 0 : code(lambda, phi)
                  : v ? code(lambda + (lambda < 0 ? pi$3 : -pi$3), phi) : 0;
            if (!point0 && (v00 = v0 = v)) stream.lineStart();
            if (v !== v0) {
              point2 = intersect(point0, point1);
              if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2))
                point1[2] = 1;
            }
            if (v !== v0) {
              clean = 0;
              if (v) {
                // outside going in
                stream.lineStart();
                point2 = intersect(point1, point0);
                stream.point(point2[0], point2[1]);
              } else {
                // inside going out
                point2 = intersect(point0, point1);
                stream.point(point2[0], point2[1], 2);
                stream.lineEnd();
              }
              point0 = point2;
            } else if (notHemisphere && point0 && smallRadius ^ v) {
              var t;
              // If the codes for two points are different, or are both zero,
              // and there this segment intersects with the small circle.
              if (!(c & c0) && (t = intersect(point1, point0, true))) {
                clean = 0;
                if (smallRadius) {
                  stream.lineStart();
                  stream.point(t[0][0], t[0][1]);
                  stream.point(t[1][0], t[1][1]);
                  stream.lineEnd();
                } else {
                  stream.point(t[1][0], t[1][1]);
                  stream.lineEnd();
                  stream.lineStart();
                  stream.point(t[0][0], t[0][1], 3);
                }
              }
            }
            if (v && (!point0 || !pointEqual(point0, point1))) {
              stream.point(point1[0], point1[1]);
            }
            point0 = point1, v0 = v, c0 = c;
          },
          lineEnd: function() {
            if (v0) stream.lineEnd();
            point0 = null;
          },
          // Rejoin first and last segments if there were intersections and the first
          // and last points were visible.
          clean: function() {
            return clean | ((v00 && v0) << 1);
          }
        };
      }

      // Intersects the great circle between a and b with the clip circle.
      function intersect(a, b, two) {
        var pa = cartesian(a),
            pb = cartesian(b);

        // We have two planes, n1.p = d1 and n2.p = d2.
        // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
        var n1 = [1, 0, 0], // normal
            n2 = cartesianCross(pa, pb),
            n2n2 = cartesianDot(n2, n2),
            n1n2 = n2[0], // cartesianDot(n1, n2),
            determinant = n2n2 - n1n2 * n1n2;

        // Two polar points.
        if (!determinant) return !two && a;

        var c1 =  cr * n2n2 / determinant,
            c2 = -cr * n1n2 / determinant,
            n1xn2 = cartesianCross(n1, n2),
            A = cartesianScale(n1, c1),
            B = cartesianScale(n2, c2);
        cartesianAddInPlace(A, B);

        // Solve |p(t)|^2 = 1.
        var u = n1xn2,
            w = cartesianDot(A, u),
            uu = cartesianDot(u, u),
            t2 = w * w - uu * (cartesianDot(A, A) - 1);

        if (t2 < 0) return;

        var t = sqrt(t2),
            q = cartesianScale(u, (-w - t) / uu);
        cartesianAddInPlace(q, A);
        q = spherical(q);

        if (!two) return q;

        // Two intersection points.
        var lambda0 = a[0],
            lambda1 = b[0],
            phi0 = a[1],
            phi1 = b[1],
            z;

        if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;

        var delta = lambda1 - lambda0,
            polar = abs$2(delta - pi$3) < epsilon$4,
            meridian = polar || delta < epsilon$4;

        if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;

        // Check that the first point is between a and b.
        if (meridian
            ? polar
              ? phi0 + phi1 > 0 ^ q[1] < (abs$2(q[0] - lambda0) < epsilon$4 ? phi0 : phi1)
              : phi0 <= q[1] && q[1] <= phi1
            : delta > pi$3 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
          var q1 = cartesianScale(u, (-w + t) / uu);
          cartesianAddInPlace(q1, A);
          return [q, spherical(q1)];
        }
      }

      // Generates a 4-bit vector representing the location of a point relative to
      // the small circle's bounding box.
      function code(lambda, phi) {
        var r = smallRadius ? radius : pi$3 - radius,
            code = 0;
        if (lambda < -r) code |= 1; // left
        else if (lambda > r) code |= 2; // right
        if (phi < -r) code |= 4; // below
        else if (phi > r) code |= 8; // above
        return code;
      }

      return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi$3, radius - pi$3]);
    }

    function clipLine(a, b, x0, y0, x1, y1) {
      var ax = a[0],
          ay = a[1],
          bx = b[0],
          by = b[1],
          t0 = 0,
          t1 = 1,
          dx = bx - ax,
          dy = by - ay,
          r;

      r = x0 - ax;
      if (!dx && r > 0) return;
      r /= dx;
      if (dx < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dx > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }

      r = x1 - ax;
      if (!dx && r < 0) return;
      r /= dx;
      if (dx < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dx > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }

      r = y0 - ay;
      if (!dy && r > 0) return;
      r /= dy;
      if (dy < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dy > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }

      r = y1 - ay;
      if (!dy && r < 0) return;
      r /= dy;
      if (dy < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dy > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }

      if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
      if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
      return true;
    }

    var clipMax = 1e9, clipMin = -clipMax;

    // TODO Use d3-polygon’s polygonContains here for the ring check?
    // TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

    function clipRectangle(x0, y0, x1, y1) {

      function visible(x, y) {
        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
      }

      function interpolate(from, to, direction, stream) {
        var a = 0, a1 = 0;
        if (from == null
            || (a = corner(from, direction)) !== (a1 = corner(to, direction))
            || comparePoint(from, to) < 0 ^ direction > 0) {
          do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
          while ((a = (a + direction + 4) % 4) !== a1);
        } else {
          stream.point(to[0], to[1]);
        }
      }

      function corner(p, direction) {
        return abs$2(p[0] - x0) < epsilon$4 ? direction > 0 ? 0 : 3
            : abs$2(p[0] - x1) < epsilon$4 ? direction > 0 ? 2 : 1
            : abs$2(p[1] - y0) < epsilon$4 ? direction > 0 ? 1 : 0
            : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
      }

      function compareIntersection(a, b) {
        return comparePoint(a.x, b.x);
      }

      function comparePoint(a, b) {
        var ca = corner(a, 1),
            cb = corner(b, 1);
        return ca !== cb ? ca - cb
            : ca === 0 ? b[1] - a[1]
            : ca === 1 ? a[0] - b[0]
            : ca === 2 ? a[1] - b[1]
            : b[0] - a[0];
      }

      return function(stream) {
        var activeStream = stream,
            bufferStream = clipBuffer(),
            segments,
            polygon,
            ring,
            x__, y__, v__, // first point
            x_, y_, v_, // previous point
            first,
            clean;

        var clipStream = {
          point: point,
          lineStart: lineStart,
          lineEnd: lineEnd,
          polygonStart: polygonStart,
          polygonEnd: polygonEnd
        };

        function point(x, y) {
          if (visible(x, y)) activeStream.point(x, y);
        }

        function polygonInside() {
          var winding = 0;

          for (var i = 0, n = polygon.length; i < n; ++i) {
            for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
              a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
              if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }
              else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }
            }
          }

          return winding;
        }

        // Buffer geometry within a polygon and then clip it en masse.
        function polygonStart() {
          activeStream = bufferStream, segments = [], polygon = [], clean = true;
        }

        function polygonEnd() {
          var startInside = polygonInside(),
              cleanInside = clean && startInside,
              visible = (segments = merge(segments)).length;
          if (cleanInside || visible) {
            stream.polygonStart();
            if (cleanInside) {
              stream.lineStart();
              interpolate(null, null, 1, stream);
              stream.lineEnd();
            }
            if (visible) {
              clipRejoin(segments, compareIntersection, startInside, interpolate, stream);
            }
            stream.polygonEnd();
          }
          activeStream = stream, segments = polygon = ring = null;
        }

        function lineStart() {
          clipStream.point = linePoint;
          if (polygon) polygon.push(ring = []);
          first = true;
          v_ = false;
          x_ = y_ = NaN;
        }

        // TODO rather than special-case polygons, simply handle them separately.
        // Ideally, coincident intersection points should be jittered to avoid
        // clipping issues.
        function lineEnd() {
          if (segments) {
            linePoint(x__, y__);
            if (v__ && v_) bufferStream.rejoin();
            segments.push(bufferStream.result());
          }
          clipStream.point = point;
          if (v_) activeStream.lineEnd();
        }

        function linePoint(x, y) {
          var v = visible(x, y);
          if (polygon) ring.push([x, y]);
          if (first) {
            x__ = x, y__ = y, v__ = v;
            first = false;
            if (v) {
              activeStream.lineStart();
              activeStream.point(x, y);
            }
          } else {
            if (v && v_) activeStream.point(x, y);
            else {
              var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
                  b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
              if (clipLine(a, b, x0, y0, x1, y1)) {
                if (!v_) {
                  activeStream.lineStart();
                  activeStream.point(a[0], a[1]);
                }
                activeStream.point(b[0], b[1]);
                if (!v) activeStream.lineEnd();
                clean = false;
              } else if (v) {
                activeStream.lineStart();
                activeStream.point(x, y);
                clean = false;
              }
            }
          }
          x_ = x, y_ = y, v_ = v;
        }

        return clipStream;
      };
    }

    function extent$1() {
      var x0 = 0,
          y0 = 0,
          x1 = 960,
          y1 = 500,
          cache,
          cacheStream,
          clip;

      return clip = {
        stream: function(stream) {
          return cache && cacheStream === stream ? cache : cache = clipRectangle(x0, y0, x1, y1)(cacheStream = stream);
        },
        extent: function(_) {
          return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
        }
      };
    }

    var lengthSum,
        lambda0$2,
        sinPhi0$1,
        cosPhi0$1;

    var lengthStream = {
      sphere: noop$3,
      point: noop$3,
      lineStart: lengthLineStart,
      lineEnd: noop$3,
      polygonStart: noop$3,
      polygonEnd: noop$3
    };

    function lengthLineStart() {
      lengthStream.point = lengthPointFirst;
      lengthStream.lineEnd = lengthLineEnd;
    }

    function lengthLineEnd() {
      lengthStream.point = lengthStream.lineEnd = noop$3;
    }

    function lengthPointFirst(lambda, phi) {
      lambda *= radians$1, phi *= radians$1;
      lambda0$2 = lambda, sinPhi0$1 = sin$1(phi), cosPhi0$1 = cos$1(phi);
      lengthStream.point = lengthPoint;
    }

    function lengthPoint(lambda, phi) {
      lambda *= radians$1, phi *= radians$1;
      var sinPhi = sin$1(phi),
          cosPhi = cos$1(phi),
          delta = abs$2(lambda - lambda0$2),
          cosDelta = cos$1(delta),
          sinDelta = sin$1(delta),
          x = cosPhi * sinDelta,
          y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,
          z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;
      lengthSum.add(atan2(sqrt(x * x + y * y), z));
      lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;
    }

    function length$5(object) {
      lengthSum = new Adder();
      geoStream(object, lengthStream);
      return +lengthSum;
    }

    var coordinates = [null, null],
        object$1 = {type: "LineString", coordinates: coordinates};

    function distance$1(a, b) {
      coordinates[0] = a;
      coordinates[1] = b;
      return length$5(object$1);
    }

    var containsObjectType = {
      Feature: function(object, point) {
        return containsGeometry(object.geometry, point);
      },
      FeatureCollection: function(object, point) {
        var features = object.features, i = -1, n = features.length;
        while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;
        return false;
      }
    };

    var containsGeometryType = {
      Sphere: function() {
        return true;
      },
      Point: function(object, point) {
        return containsPoint(object.coordinates, point);
      },
      MultiPoint: function(object, point) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n) if (containsPoint(coordinates[i], point)) return true;
        return false;
      },
      LineString: function(object, point) {
        return containsLine(object.coordinates, point);
      },
      MultiLineString: function(object, point) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n) if (containsLine(coordinates[i], point)) return true;
        return false;
      },
      Polygon: function(object, point) {
        return containsPolygon(object.coordinates, point);
      },
      MultiPolygon: function(object, point) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n) if (containsPolygon(coordinates[i], point)) return true;
        return false;
      },
      GeometryCollection: function(object, point) {
        var geometries = object.geometries, i = -1, n = geometries.length;
        while (++i < n) if (containsGeometry(geometries[i], point)) return true;
        return false;
      }
    };

    function containsGeometry(geometry, point) {
      return geometry && containsGeometryType.hasOwnProperty(geometry.type)
          ? containsGeometryType[geometry.type](geometry, point)
          : false;
    }

    function containsPoint(coordinates, point) {
      return distance$1(coordinates, point) === 0;
    }

    function containsLine(coordinates, point) {
      var ao, bo, ab;
      for (var i = 0, n = coordinates.length; i < n; i++) {
        bo = distance$1(coordinates[i], point);
        if (bo === 0) return true;
        if (i > 0) {
          ab = distance$1(coordinates[i], coordinates[i - 1]);
          if (
            ab > 0 &&
            ao <= ab &&
            bo <= ab &&
            (ao + bo - ab) * (1 - Math.pow((ao - bo) / ab, 2)) < epsilon2$1 * ab
          )
            return true;
        }
        ao = bo;
      }
      return false;
    }

    function containsPolygon(coordinates, point) {
      return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));
    }

    function ringRadians(ring) {
      return ring = ring.map(pointRadians), ring.pop(), ring;
    }

    function pointRadians(point) {
      return [point[0] * radians$1, point[1] * radians$1];
    }

    function contains$1(object, point) {
      return (object && containsObjectType.hasOwnProperty(object.type)
          ? containsObjectType[object.type]
          : containsGeometry)(object, point);
    }

    function graticuleX(y0, y1, dy) {
      var y = sequence(y0, y1 - epsilon$4, dy).concat(y1);
      return function(x) { return y.map(function(y) { return [x, y]; }); };
    }

    function graticuleY(x0, x1, dx) {
      var x = sequence(x0, x1 - epsilon$4, dx).concat(x1);
      return function(y) { return x.map(function(x) { return [x, y]; }); };
    }

    function graticule() {
      var x1, x0, X1, X0,
          y1, y0, Y1, Y0,
          dx = 10, dy = dx, DX = 90, DY = 360,
          x, y, X, Y,
          precision = 2.5;

      function graticule() {
        return {type: "MultiLineString", coordinates: lines()};
      }

      function lines() {
        return sequence(ceil$1(X0 / DX) * DX, X1, DX).map(X)
            .concat(sequence(ceil$1(Y0 / DY) * DY, Y1, DY).map(Y))
            .concat(sequence(ceil$1(x0 / dx) * dx, x1, dx).filter(function(x) { return abs$2(x % DX) > epsilon$4; }).map(x))
            .concat(sequence(ceil$1(y0 / dy) * dy, y1, dy).filter(function(y) { return abs$2(y % DY) > epsilon$4; }).map(y));
      }

      graticule.lines = function() {
        return lines().map(function(coordinates) { return {type: "LineString", coordinates: coordinates}; });
      };

      graticule.outline = function() {
        return {
          type: "Polygon",
          coordinates: [
            X(X0).concat(
            Y(Y1).slice(1),
            X(X1).reverse().slice(1),
            Y(Y0).reverse().slice(1))
          ]
        };
      };

      graticule.extent = function(_) {
        if (!arguments.length) return graticule.extentMinor();
        return graticule.extentMajor(_).extentMinor(_);
      };

      graticule.extentMajor = function(_) {
        if (!arguments.length) return [[X0, Y0], [X1, Y1]];
        X0 = +_[0][0], X1 = +_[1][0];
        Y0 = +_[0][1], Y1 = +_[1][1];
        if (X0 > X1) _ = X0, X0 = X1, X1 = _;
        if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
        return graticule.precision(precision);
      };

      graticule.extentMinor = function(_) {
        if (!arguments.length) return [[x0, y0], [x1, y1]];
        x0 = +_[0][0], x1 = +_[1][0];
        y0 = +_[0][1], y1 = +_[1][1];
        if (x0 > x1) _ = x0, x0 = x1, x1 = _;
        if (y0 > y1) _ = y0, y0 = y1, y1 = _;
        return graticule.precision(precision);
      };

      graticule.step = function(_) {
        if (!arguments.length) return graticule.stepMinor();
        return graticule.stepMajor(_).stepMinor(_);
      };

      graticule.stepMajor = function(_) {
        if (!arguments.length) return [DX, DY];
        DX = +_[0], DY = +_[1];
        return graticule;
      };

      graticule.stepMinor = function(_) {
        if (!arguments.length) return [dx, dy];
        dx = +_[0], dy = +_[1];
        return graticule;
      };

      graticule.precision = function(_) {
        if (!arguments.length) return precision;
        precision = +_;
        x = graticuleX(y0, y1, 90);
        y = graticuleY(x0, x1, precision);
        X = graticuleX(Y0, Y1, 90);
        Y = graticuleY(X0, X1, precision);
        return graticule;
      };

      return graticule
          .extentMajor([[-180, -90 + epsilon$4], [180, 90 - epsilon$4]])
          .extentMinor([[-180, -80 - epsilon$4], [180, 80 + epsilon$4]]);
    }

    function graticule10() {
      return graticule()();
    }

    function interpolate$2(a, b) {
      var x0 = a[0] * radians$1,
          y0 = a[1] * radians$1,
          x1 = b[0] * radians$1,
          y1 = b[1] * radians$1,
          cy0 = cos$1(y0),
          sy0 = sin$1(y0),
          cy1 = cos$1(y1),
          sy1 = sin$1(y1),
          kx0 = cy0 * cos$1(x0),
          ky0 = cy0 * sin$1(x0),
          kx1 = cy1 * cos$1(x1),
          ky1 = cy1 * sin$1(x1),
          d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),
          k = sin$1(d);

      var interpolate = d ? function(t) {
        var B = sin$1(t *= d) / k,
            A = sin$1(d - t) / k,
            x = A * kx0 + B * kx1,
            y = A * ky0 + B * ky1,
            z = A * sy0 + B * sy1;
        return [
          atan2(y, x) * degrees$2,
          atan2(z, sqrt(x * x + y * y)) * degrees$2
        ];
      } : function() {
        return [x0 * degrees$2, y0 * degrees$2];
      };

      interpolate.distance = d;

      return interpolate;
    }

    var identity$6 = x => x;

    var areaSum$1 = new Adder(),
        areaRingSum$1 = new Adder(),
        x00,
        y00,
        x0$1,
        y0$1;

    var areaStream$1 = {
      point: noop$3,
      lineStart: noop$3,
      lineEnd: noop$3,
      polygonStart: function() {
        areaStream$1.lineStart = areaRingStart$1;
        areaStream$1.lineEnd = areaRingEnd$1;
      },
      polygonEnd: function() {
        areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop$3;
        areaSum$1.add(abs$2(areaRingSum$1));
        areaRingSum$1 = new Adder();
      },
      result: function() {
        var area = areaSum$1 / 2;
        areaSum$1 = new Adder();
        return area;
      }
    };

    function areaRingStart$1() {
      areaStream$1.point = areaPointFirst$1;
    }

    function areaPointFirst$1(x, y) {
      areaStream$1.point = areaPoint$1;
      x00 = x0$1 = x, y00 = y0$1 = y;
    }

    function areaPoint$1(x, y) {
      areaRingSum$1.add(y0$1 * x - x0$1 * y);
      x0$1 = x, y0$1 = y;
    }

    function areaRingEnd$1() {
      areaPoint$1(x00, y00);
    }

    var x0$2 = Infinity,
        y0$2 = x0$2,
        x1 = -x0$2,
        y1 = x1;

    var boundsStream$1 = {
      point: boundsPoint$1,
      lineStart: noop$3,
      lineEnd: noop$3,
      polygonStart: noop$3,
      polygonEnd: noop$3,
      result: function() {
        var bounds = [[x0$2, y0$2], [x1, y1]];
        x1 = y1 = -(y0$2 = x0$2 = Infinity);
        return bounds;
      }
    };

    function boundsPoint$1(x, y) {
      if (x < x0$2) x0$2 = x;
      if (x > x1) x1 = x;
      if (y < y0$2) y0$2 = y;
      if (y > y1) y1 = y;
    }

    // TODO Enforce positive area for exterior, negative area for interior?

    var X0$1 = 0,
        Y0$1 = 0,
        Z0$1 = 0,
        X1$1 = 0,
        Y1$1 = 0,
        Z1$1 = 0,
        X2$1 = 0,
        Y2$1 = 0,
        Z2$1 = 0,
        x00$1,
        y00$1,
        x0$3,
        y0$3;

    var centroidStream$1 = {
      point: centroidPoint$1,
      lineStart: centroidLineStart$1,
      lineEnd: centroidLineEnd$1,
      polygonStart: function() {
        centroidStream$1.lineStart = centroidRingStart$1;
        centroidStream$1.lineEnd = centroidRingEnd$1;
      },
      polygonEnd: function() {
        centroidStream$1.point = centroidPoint$1;
        centroidStream$1.lineStart = centroidLineStart$1;
        centroidStream$1.lineEnd = centroidLineEnd$1;
      },
      result: function() {
        var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]
            : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]
            : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]
            : [NaN, NaN];
        X0$1 = Y0$1 = Z0$1 =
        X1$1 = Y1$1 = Z1$1 =
        X2$1 = Y2$1 = Z2$1 = 0;
        return centroid;
      }
    };

    function centroidPoint$1(x, y) {
      X0$1 += x;
      Y0$1 += y;
      ++Z0$1;
    }

    function centroidLineStart$1() {
      centroidStream$1.point = centroidPointFirstLine;
    }

    function centroidPointFirstLine(x, y) {
      centroidStream$1.point = centroidPointLine;
      centroidPoint$1(x0$3 = x, y0$3 = y);
    }

    function centroidPointLine(x, y) {
      var dx = x - x0$3, dy = y - y0$3, z = sqrt(dx * dx + dy * dy);
      X1$1 += z * (x0$3 + x) / 2;
      Y1$1 += z * (y0$3 + y) / 2;
      Z1$1 += z;
      centroidPoint$1(x0$3 = x, y0$3 = y);
    }

    function centroidLineEnd$1() {
      centroidStream$1.point = centroidPoint$1;
    }

    function centroidRingStart$1() {
      centroidStream$1.point = centroidPointFirstRing;
    }

    function centroidRingEnd$1() {
      centroidPointRing(x00$1, y00$1);
    }

    function centroidPointFirstRing(x, y) {
      centroidStream$1.point = centroidPointRing;
      centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);
    }

    function centroidPointRing(x, y) {
      var dx = x - x0$3,
          dy = y - y0$3,
          z = sqrt(dx * dx + dy * dy);

      X1$1 += z * (x0$3 + x) / 2;
      Y1$1 += z * (y0$3 + y) / 2;
      Z1$1 += z;

      z = y0$3 * x - x0$3 * y;
      X2$1 += z * (x0$3 + x);
      Y2$1 += z * (y0$3 + y);
      Z2$1 += z * 3;
      centroidPoint$1(x0$3 = x, y0$3 = y);
    }

    function PathContext(context) {
      this._context = context;
    }

    PathContext.prototype = {
      _radius: 4.5,
      pointRadius: function(_) {
        return this._radius = _, this;
      },
      polygonStart: function() {
        this._line = 0;
      },
      polygonEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line === 0) this._context.closePath();
        this._point = NaN;
      },
      point: function(x, y) {
        switch (this._point) {
          case 0: {
            this._context.moveTo(x, y);
            this._point = 1;
            break;
          }
          case 1: {
            this._context.lineTo(x, y);
            break;
          }
          default: {
            this._context.moveTo(x + this._radius, y);
            this._context.arc(x, y, this._radius, 0, tau$4);
            break;
          }
        }
      },
      result: noop$3
    };

    var lengthSum$1 = new Adder(),
        lengthRing,
        x00$2,
        y00$2,
        x0$4,
        y0$4;

    var lengthStream$1 = {
      point: noop$3,
      lineStart: function() {
        lengthStream$1.point = lengthPointFirst$1;
      },
      lineEnd: function() {
        if (lengthRing) lengthPoint$1(x00$2, y00$2);
        lengthStream$1.point = noop$3;
      },
      polygonStart: function() {
        lengthRing = true;
      },
      polygonEnd: function() {
        lengthRing = null;
      },
      result: function() {
        var length = +lengthSum$1;
        lengthSum$1 = new Adder();
        return length;
      }
    };

    function lengthPointFirst$1(x, y) {
      lengthStream$1.point = lengthPoint$1;
      x00$2 = x0$4 = x, y00$2 = y0$4 = y;
    }

    function lengthPoint$1(x, y) {
      x0$4 -= x, y0$4 -= y;
      lengthSum$1.add(sqrt(x0$4 * x0$4 + y0$4 * y0$4));
      x0$4 = x, y0$4 = y;
    }

    function PathString() {
      this._string = [];
    }

    PathString.prototype = {
      _radius: 4.5,
      _circle: circle$1(4.5),
      pointRadius: function(_) {
        if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
        return this;
      },
      polygonStart: function() {
        this._line = 0;
      },
      polygonEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line === 0) this._string.push("Z");
        this._point = NaN;
      },
      point: function(x, y) {
        switch (this._point) {
          case 0: {
            this._string.push("M", x, ",", y);
            this._point = 1;
            break;
          }
          case 1: {
            this._string.push("L", x, ",", y);
            break;
          }
          default: {
            if (this._circle == null) this._circle = circle$1(this._radius);
            this._string.push("M", x, ",", y, this._circle);
            break;
          }
        }
      },
      result: function() {
        if (this._string.length) {
          var result = this._string.join("");
          this._string = [];
          return result;
        } else {
          return null;
        }
      }
    };

    function circle$1(radius) {
      return "m0," + radius
          + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius
          + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius
          + "z";
    }

    function index$3(projection, context) {
      var pointRadius = 4.5,
          projectionStream,
          contextStream;

      function path(object) {
        if (object) {
          if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
          geoStream(object, projectionStream(contextStream));
        }
        return contextStream.result();
      }

      path.area = function(object) {
        geoStream(object, projectionStream(areaStream$1));
        return areaStream$1.result();
      };

      path.measure = function(object) {
        geoStream(object, projectionStream(lengthStream$1));
        return lengthStream$1.result();
      };

      path.bounds = function(object) {
        geoStream(object, projectionStream(boundsStream$1));
        return boundsStream$1.result();
      };

      path.centroid = function(object) {
        geoStream(object, projectionStream(centroidStream$1));
        return centroidStream$1.result();
      };

      path.projection = function(_) {
        return arguments.length ? (projectionStream = _ == null ? (projection = null, identity$6) : (projection = _).stream, path) : projection;
      };

      path.context = function(_) {
        if (!arguments.length) return context;
        contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);
        if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
        return path;
      };

      path.pointRadius = function(_) {
        if (!arguments.length) return pointRadius;
        pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
        return path;
      };

      return path.projection(projection).context(context);
    }

    function transform(methods) {
      return {
        stream: transformer(methods)
      };
    }

    function transformer(methods) {
      return function(stream) {
        var s = new TransformStream;
        for (var key in methods) s[key] = methods[key];
        s.stream = stream;
        return s;
      };
    }

    function TransformStream() {}

    TransformStream.prototype = {
      constructor: TransformStream,
      point: function(x, y) { this.stream.point(x, y); },
      sphere: function() { this.stream.sphere(); },
      lineStart: function() { this.stream.lineStart(); },
      lineEnd: function() { this.stream.lineEnd(); },
      polygonStart: function() { this.stream.polygonStart(); },
      polygonEnd: function() { this.stream.polygonEnd(); }
    };

    function fit(projection, fitBounds, object) {
      var clip = projection.clipExtent && projection.clipExtent();
      projection.scale(150).translate([0, 0]);
      if (clip != null) projection.clipExtent(null);
      geoStream(object, projection.stream(boundsStream$1));
      fitBounds(boundsStream$1.result());
      if (clip != null) projection.clipExtent(clip);
      return projection;
    }

    function fitExtent(projection, extent, object) {
      return fit(projection, function(b) {
        var w = extent[1][0] - extent[0][0],
            h = extent[1][1] - extent[0][1],
            k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
            x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
            y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
        projection.scale(150 * k).translate([x, y]);
      }, object);
    }

    function fitSize(projection, size, object) {
      return fitExtent(projection, [[0, 0], size], object);
    }

    function fitWidth(projection, width, object) {
      return fit(projection, function(b) {
        var w = +width,
            k = w / (b[1][0] - b[0][0]),
            x = (w - k * (b[1][0] + b[0][0])) / 2,
            y = -k * b[0][1];
        projection.scale(150 * k).translate([x, y]);
      }, object);
    }

    function fitHeight(projection, height, object) {
      return fit(projection, function(b) {
        var h = +height,
            k = h / (b[1][1] - b[0][1]),
            x = -k * b[0][0],
            y = (h - k * (b[1][1] + b[0][1])) / 2;
        projection.scale(150 * k).translate([x, y]);
      }, object);
    }

    var maxDepth = 16, // maximum depth of subdivision
        cosMinDistance = cos$1(30 * radians$1); // cos(minimum angular distance)

    function resample(project, delta2) {
      return +delta2 ? resample$1(project, delta2) : resampleNone(project);
    }

    function resampleNone(project) {
      return transformer({
        point: function(x, y) {
          x = project(x, y);
          this.stream.point(x[0], x[1]);
        }
      });
    }

    function resample$1(project, delta2) {

      function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
        var dx = x1 - x0,
            dy = y1 - y0,
            d2 = dx * dx + dy * dy;
        if (d2 > 4 * delta2 && depth--) {
          var a = a0 + a1,
              b = b0 + b1,
              c = c0 + c1,
              m = sqrt(a * a + b * b + c * c),
              phi2 = asin(c /= m),
              lambda2 = abs$2(abs$2(c) - 1) < epsilon$4 || abs$2(lambda0 - lambda1) < epsilon$4 ? (lambda0 + lambda1) / 2 : atan2(b, a),
              p = project(lambda2, phi2),
              x2 = p[0],
              y2 = p[1],
              dx2 = x2 - x0,
              dy2 = y2 - y0,
              dz = dy * dx2 - dx * dy2;
          if (dz * dz / d2 > delta2 // perpendicular projected distance
              || abs$2((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
              || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance
            resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
            stream.point(x2, y2);
            resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
          }
        }
      }
      return function(stream) {
        var lambda00, x00, y00, a00, b00, c00, // first point
            lambda0, x0, y0, a0, b0, c0; // previous point

        var resampleStream = {
          point: point,
          lineStart: lineStart,
          lineEnd: lineEnd,
          polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },
          polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }
        };

        function point(x, y) {
          x = project(x, y);
          stream.point(x[0], x[1]);
        }

        function lineStart() {
          x0 = NaN;
          resampleStream.point = linePoint;
          stream.lineStart();
        }

        function linePoint(lambda, phi) {
          var c = cartesian([lambda, phi]), p = project(lambda, phi);
          resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
          stream.point(x0, y0);
        }

        function lineEnd() {
          resampleStream.point = point;
          stream.lineEnd();
        }

        function ringStart() {
          lineStart();
          resampleStream.point = ringPoint;
          resampleStream.lineEnd = ringEnd;
        }

        function ringPoint(lambda, phi) {
          linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
          resampleStream.point = linePoint;
        }

        function ringEnd() {
          resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
          resampleStream.lineEnd = lineEnd;
          lineEnd();
        }

        return resampleStream;
      };
    }

    var transformRadians = transformer({
      point: function(x, y) {
        this.stream.point(x * radians$1, y * radians$1);
      }
    });

    function transformRotate(rotate) {
      return transformer({
        point: function(x, y) {
          var r = rotate(x, y);
          return this.stream.point(r[0], r[1]);
        }
      });
    }

    function scaleTranslate(k, dx, dy, sx, sy) {
      function transform(x, y) {
        x *= sx; y *= sy;
        return [dx + k * x, dy - k * y];
      }
      transform.invert = function(x, y) {
        return [(x - dx) / k * sx, (dy - y) / k * sy];
      };
      return transform;
    }

    function scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {
      if (!alpha) return scaleTranslate(k, dx, dy, sx, sy);
      var cosAlpha = cos$1(alpha),
          sinAlpha = sin$1(alpha),
          a = cosAlpha * k,
          b = sinAlpha * k,
          ai = cosAlpha / k,
          bi = sinAlpha / k,
          ci = (sinAlpha * dy - cosAlpha * dx) / k,
          fi = (sinAlpha * dx + cosAlpha * dy) / k;
      function transform(x, y) {
        x *= sx; y *= sy;
        return [a * x - b * y + dx, dy - b * x - a * y];
      }
      transform.invert = function(x, y) {
        return [sx * (ai * x - bi * y + ci), sy * (fi - bi * x - ai * y)];
      };
      return transform;
    }

    function projection(project) {
      return projectionMutator(function() { return project; })();
    }

    function projectionMutator(projectAt) {
      var project,
          k = 150, // scale
          x = 480, y = 250, // translate
          lambda = 0, phi = 0, // center
          deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate
          alpha = 0, // post-rotate angle
          sx = 1, // reflectX
          sy = 1, // reflectX
          theta = null, preclip = clipAntimeridian, // pre-clip angle
          x0 = null, y0, x1, y1, postclip = identity$6, // post-clip extent
          delta2 = 0.5, // precision
          projectResample,
          projectTransform,
          projectRotateTransform,
          cache,
          cacheStream;

      function projection(point) {
        return projectRotateTransform(point[0] * radians$1, point[1] * radians$1);
      }

      function invert(point) {
        point = projectRotateTransform.invert(point[0], point[1]);
        return point && [point[0] * degrees$2, point[1] * degrees$2];
      }

      projection.stream = function(stream) {
        return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
      };

      projection.preclip = function(_) {
        return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
      };

      projection.postclip = function(_) {
        return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
      };

      projection.clipAngle = function(_) {
        return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians$1) : (theta = null, clipAntimeridian), reset()) : theta * degrees$2;
      };

      projection.clipExtent = function(_) {
        return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$6) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
      };

      projection.scale = function(_) {
        return arguments.length ? (k = +_, recenter()) : k;
      };

      projection.translate = function(_) {
        return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
      };

      projection.center = function(_) {
        return arguments.length ? (lambda = _[0] % 360 * radians$1, phi = _[1] % 360 * radians$1, recenter()) : [lambda * degrees$2, phi * degrees$2];
      };

      projection.rotate = function(_) {
        return arguments.length ? (deltaLambda = _[0] % 360 * radians$1, deltaPhi = _[1] % 360 * radians$1, deltaGamma = _.length > 2 ? _[2] % 360 * radians$1 : 0, recenter()) : [deltaLambda * degrees$2, deltaPhi * degrees$2, deltaGamma * degrees$2];
      };

      projection.angle = function(_) {
        return arguments.length ? (alpha = _ % 360 * radians$1, recenter()) : alpha * degrees$2;
      };

      projection.reflectX = function(_) {
        return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;
      };

      projection.reflectY = function(_) {
        return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;
      };

      projection.precision = function(_) {
        return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);
      };

      projection.fitExtent = function(extent, object) {
        return fitExtent(projection, extent, object);
      };

      projection.fitSize = function(size, object) {
        return fitSize(projection, size, object);
      };

      projection.fitWidth = function(width, object) {
        return fitWidth(projection, width, object);
      };

      projection.fitHeight = function(height, object) {
        return fitHeight(projection, height, object);
      };

      function recenter() {
        var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)),
            transform = scaleTranslateRotate(k, x - center[0], y - center[1], sx, sy, alpha);
        rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);
        projectTransform = compose(project, transform);
        projectRotateTransform = compose(rotate, projectTransform);
        projectResample = resample(projectTransform, delta2);
        return reset();
      }

      function reset() {
        cache = cacheStream = null;
        return projection;
      }

      return function() {
        project = projectAt.apply(this, arguments);
        projection.invert = project.invert && invert;
        return recenter();
      };
    }

    function conicProjection(projectAt) {
      var phi0 = 0,
          phi1 = pi$3 / 3,
          m = projectionMutator(projectAt),
          p = m(phi0, phi1);

      p.parallels = function(_) {
        return arguments.length ? m(phi0 = _[0] * radians$1, phi1 = _[1] * radians$1) : [phi0 * degrees$2, phi1 * degrees$2];
      };

      return p;
    }

    function cylindricalEqualAreaRaw(phi0) {
      var cosPhi0 = cos$1(phi0);

      function forward(lambda, phi) {
        return [lambda * cosPhi0, sin$1(phi) / cosPhi0];
      }

      forward.invert = function(x, y) {
        return [x / cosPhi0, asin(y * cosPhi0)];
      };

      return forward;
    }

    function conicEqualAreaRaw(y0, y1) {
      var sy0 = sin$1(y0), n = (sy0 + sin$1(y1)) / 2;

      // Are the parallels symmetrical around the Equator?
      if (abs$2(n) < epsilon$4) return cylindricalEqualAreaRaw(y0);

      var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;

      function project(x, y) {
        var r = sqrt(c - 2 * n * sin$1(y)) / n;
        return [r * sin$1(x *= n), r0 - r * cos$1(x)];
      }

      project.invert = function(x, y) {
        var r0y = r0 - y,
            l = atan2(x, abs$2(r0y)) * sign(r0y);
        if (r0y * n < 0)
          l -= pi$3 * sign(x) * sign(r0y);
        return [l / n, asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
      };

      return project;
    }

    function conicEqualArea() {
      return conicProjection(conicEqualAreaRaw)
          .scale(155.424)
          .center([0, 33.6442]);
    }

    function albers() {
      return conicEqualArea()
          .parallels([29.5, 45.5])
          .scale(1070)
          .translate([480, 250])
          .rotate([96, 0])
          .center([-0.6, 38.7]);
    }

    // The projections must have mutually exclusive clip regions on the sphere,
    // as this will avoid emitting interleaving lines and polygons.
    function multiplex(streams) {
      var n = streams.length;
      return {
        point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },
        sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },
        lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },
        lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },
        polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },
        polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }
      };
    }

    // A composite projection for the United States, configured by default for
    // 960×500. The projection also works quite well at 960×600 if you change the
    // scale to 1285 and adjust the translate accordingly. The set of standard
    // parallels for each region comes from USGS, which is published here:
    // http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
    function albersUsa() {
      var cache,
          cacheStream,
          lower48 = albers(), lower48Point,
          alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338
          hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007
          point, pointStream = {point: function(x, y) { point = [x, y]; }};

      function albersUsa(coordinates) {
        var x = coordinates[0], y = coordinates[1];
        return point = null,
            (lower48Point.point(x, y), point)
            || (alaskaPoint.point(x, y), point)
            || (hawaiiPoint.point(x, y), point);
      }

      albersUsa.invert = function(coordinates) {
        var k = lower48.scale(),
            t = lower48.translate(),
            x = (coordinates[0] - t[0]) / k,
            y = (coordinates[1] - t[1]) / k;
        return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska
            : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii
            : lower48).invert(coordinates);
      };

      albersUsa.stream = function(stream) {
        return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
      };

      albersUsa.precision = function(_) {
        if (!arguments.length) return lower48.precision();
        lower48.precision(_), alaska.precision(_), hawaii.precision(_);
        return reset();
      };

      albersUsa.scale = function(_) {
        if (!arguments.length) return lower48.scale();
        lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
        return albersUsa.translate(lower48.translate());
      };

      albersUsa.translate = function(_) {
        if (!arguments.length) return lower48.translate();
        var k = lower48.scale(), x = +_[0], y = +_[1];

        lower48Point = lower48
            .translate(_)
            .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])
            .stream(pointStream);

        alaskaPoint = alaska
            .translate([x - 0.307 * k, y + 0.201 * k])
            .clipExtent([[x - 0.425 * k + epsilon$4, y + 0.120 * k + epsilon$4], [x - 0.214 * k - epsilon$4, y + 0.234 * k - epsilon$4]])
            .stream(pointStream);

        hawaiiPoint = hawaii
            .translate([x - 0.205 * k, y + 0.212 * k])
            .clipExtent([[x - 0.214 * k + epsilon$4, y + 0.166 * k + epsilon$4], [x - 0.115 * k - epsilon$4, y + 0.234 * k - epsilon$4]])
            .stream(pointStream);

        return reset();
      };

      albersUsa.fitExtent = function(extent, object) {
        return fitExtent(albersUsa, extent, object);
      };

      albersUsa.fitSize = function(size, object) {
        return fitSize(albersUsa, size, object);
      };

      albersUsa.fitWidth = function(width, object) {
        return fitWidth(albersUsa, width, object);
      };

      albersUsa.fitHeight = function(height, object) {
        return fitHeight(albersUsa, height, object);
      };

      function reset() {
        cache = cacheStream = null;
        return albersUsa;
      }

      return albersUsa.scale(1070);
    }

    function azimuthalRaw(scale) {
      return function(x, y) {
        var cx = cos$1(x),
            cy = cos$1(y),
            k = scale(cx * cy);
            if (k === Infinity) return [2, 0];
        return [
          k * cy * sin$1(x),
          k * sin$1(y)
        ];
      }
    }

    function azimuthalInvert(angle) {
      return function(x, y) {
        var z = sqrt(x * x + y * y),
            c = angle(z),
            sc = sin$1(c),
            cc = cos$1(c);
        return [
          atan2(x * sc, z * cc),
          asin(z && y * sc / z)
        ];
      }
    }

    var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
      return sqrt(2 / (1 + cxcy));
    });

    azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {
      return 2 * asin(z / 2);
    });

    function azimuthalEqualArea() {
      return projection(azimuthalEqualAreaRaw)
          .scale(124.75)
          .clipAngle(180 - 1e-3);
    }

    var azimuthalEquidistantRaw = azimuthalRaw(function(c) {
      return (c = acos(c)) && c / sin$1(c);
    });

    azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {
      return z;
    });

    function azimuthalEquidistant() {
      return projection(azimuthalEquidistantRaw)
          .scale(79.4188)
          .clipAngle(180 - 1e-3);
    }

    function mercatorRaw(lambda, phi) {
      return [lambda, log(tan((halfPi$2 + phi) / 2))];
    }

    mercatorRaw.invert = function(x, y) {
      return [x, 2 * atan(exp$1(y)) - halfPi$2];
    };

    function mercator() {
      return mercatorProjection(mercatorRaw)
          .scale(961 / tau$4);
    }

    function mercatorProjection(project) {
      var m = projection(project),
          center = m.center,
          scale = m.scale,
          translate = m.translate,
          clipExtent = m.clipExtent,
          x0 = null, y0, x1, y1; // clip extent

      m.scale = function(_) {
        return arguments.length ? (scale(_), reclip()) : scale();
      };

      m.translate = function(_) {
        return arguments.length ? (translate(_), reclip()) : translate();
      };

      m.center = function(_) {
        return arguments.length ? (center(_), reclip()) : center();
      };

      m.clipExtent = function(_) {
        return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
      };

      function reclip() {
        var k = pi$3 * scale(),
            t = m(rotation(m.rotate()).invert([0, 0]));
        return clipExtent(x0 == null
            ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw
            ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]
            : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
      }

      return reclip();
    }

    function tany(y) {
      return tan((halfPi$2 + y) / 2);
    }

    function conicConformalRaw(y0, y1) {
      var cy0 = cos$1(y0),
          n = y0 === y1 ? sin$1(y0) : log(cy0 / cos$1(y1)) / log(tany(y1) / tany(y0)),
          f = cy0 * pow$2(tany(y0), n) / n;

      if (!n) return mercatorRaw;

      function project(x, y) {
        if (f > 0) { if (y < -halfPi$2 + epsilon$4) y = -halfPi$2 + epsilon$4; }
        else { if (y > halfPi$2 - epsilon$4) y = halfPi$2 - epsilon$4; }
        var r = f / pow$2(tany(y), n);
        return [r * sin$1(n * x), f - r * cos$1(n * x)];
      }

      project.invert = function(x, y) {
        var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy),
          l = atan2(x, abs$2(fy)) * sign(fy);
        if (fy * n < 0)
          l -= pi$3 * sign(x) * sign(fy);
        return [l / n, 2 * atan(pow$2(f / r, 1 / n)) - halfPi$2];
      };

      return project;
    }

    function conicConformal() {
      return conicProjection(conicConformalRaw)
          .scale(109.5)
          .parallels([30, 30]);
    }

    function equirectangularRaw(lambda, phi) {
      return [lambda, phi];
    }

    equirectangularRaw.invert = equirectangularRaw;

    function equirectangular() {
      return projection(equirectangularRaw)
          .scale(152.63);
    }

    function conicEquidistantRaw(y0, y1) {
      var cy0 = cos$1(y0),
          n = y0 === y1 ? sin$1(y0) : (cy0 - cos$1(y1)) / (y1 - y0),
          g = cy0 / n + y0;

      if (abs$2(n) < epsilon$4) return equirectangularRaw;

      function project(x, y) {
        var gy = g - y, nx = n * x;
        return [gy * sin$1(nx), g - gy * cos$1(nx)];
      }

      project.invert = function(x, y) {
        var gy = g - y,
            l = atan2(x, abs$2(gy)) * sign(gy);
        if (gy * n < 0)
          l -= pi$3 * sign(x) * sign(gy);
        return [l / n, g - sign(n) * sqrt(x * x + gy * gy)];
      };

      return project;
    }

    function conicEquidistant() {
      return conicProjection(conicEquidistantRaw)
          .scale(131.154)
          .center([0, 13.9389]);
    }

    var A1 = 1.340264,
        A2 = -0.081106,
        A3 = 0.000893,
        A4 = 0.003796,
        M = sqrt(3) / 2,
        iterations = 12;

    function equalEarthRaw(lambda, phi) {
      var l = asin(M * sin$1(phi)), l2 = l * l, l6 = l2 * l2 * l2;
      return [
        lambda * cos$1(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),
        l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))
      ];
    }

    equalEarthRaw.invert = function(x, y) {
      var l = y, l2 = l * l, l6 = l2 * l2 * l2;
      for (var i = 0, delta, fy, fpy; i < iterations; ++i) {
        fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;
        fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);
        l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;
        if (abs$2(delta) < epsilon2$1) break;
      }
      return [
        M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos$1(l),
        asin(sin$1(l) / M)
      ];
    };

    function equalEarth() {
      return projection(equalEarthRaw)
          .scale(177.158);
    }

    function gnomonicRaw(x, y) {
      var cy = cos$1(y), k = cos$1(x) * cy;
      return [cy * sin$1(x) / k, sin$1(y) / k];
    }

    gnomonicRaw.invert = azimuthalInvert(atan);

    function gnomonic() {
      return projection(gnomonicRaw)
          .scale(144.049)
          .clipAngle(60);
    }

    function identity$7() {
      var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, // scale, translate and reflect
          alpha = 0, ca, sa, // angle
          x0 = null, y0, x1, y1, // clip extent
          kx = 1, ky = 1,
          transform = transformer({
            point: function(x, y) {
              var p = projection([x, y]);
              this.stream.point(p[0], p[1]);
            }
          }),
          postclip = identity$6,
          cache,
          cacheStream;

      function reset() {
        kx = k * sx;
        ky = k * sy;
        cache = cacheStream = null;
        return projection;
      }

      function projection (p) {
        var x = p[0] * kx, y = p[1] * ky;
        if (alpha) {
          var t = y * ca - x * sa;
          x = x * ca + y * sa;
          y = t;
        }
        return [x + tx, y + ty];
      }
      projection.invert = function(p) {
        var x = p[0] - tx, y = p[1] - ty;
        if (alpha) {
          var t = y * ca + x * sa;
          x = x * ca - y * sa;
          y = t;
        }
        return [x / kx, y / ky];
      };
      projection.stream = function(stream) {
        return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));
      };
      projection.postclip = function(_) {
        return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
      };
      projection.clipExtent = function(_) {
        return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$6) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
      };
      projection.scale = function(_) {
        return arguments.length ? (k = +_, reset()) : k;
      };
      projection.translate = function(_) {
        return arguments.length ? (tx = +_[0], ty = +_[1], reset()) : [tx, ty];
      };
      projection.angle = function(_) {
        return arguments.length ? (alpha = _ % 360 * radians$1, sa = sin$1(alpha), ca = cos$1(alpha), reset()) : alpha * degrees$2;
      };
      projection.reflectX = function(_) {
        return arguments.length ? (sx = _ ? -1 : 1, reset()) : sx < 0;
      };
      projection.reflectY = function(_) {
        return arguments.length ? (sy = _ ? -1 : 1, reset()) : sy < 0;
      };
      projection.fitExtent = function(extent, object) {
        return fitExtent(projection, extent, object);
      };
      projection.fitSize = function(size, object) {
        return fitSize(projection, size, object);
      };
      projection.fitWidth = function(width, object) {
        return fitWidth(projection, width, object);
      };
      projection.fitHeight = function(height, object) {
        return fitHeight(projection, height, object);
      };

      return projection;
    }

    function naturalEarth1Raw(lambda, phi) {
      var phi2 = phi * phi, phi4 = phi2 * phi2;
      return [
        lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),
        phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))
      ];
    }

    naturalEarth1Raw.invert = function(x, y) {
      var phi = y, i = 25, delta;
      do {
        var phi2 = phi * phi, phi4 = phi2 * phi2;
        phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /
            (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));
      } while (abs$2(delta) > epsilon$4 && --i > 0);
      return [
        x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),
        phi
      ];
    };

    function naturalEarth1() {
      return projection(naturalEarth1Raw)
          .scale(175.295);
    }

    function orthographicRaw(x, y) {
      return [cos$1(y) * sin$1(x), sin$1(y)];
    }

    orthographicRaw.invert = azimuthalInvert(asin);

    function orthographic() {
      return projection(orthographicRaw)
          .scale(249.5)
          .clipAngle(90 + epsilon$4);
    }

    function stereographicRaw(x, y) {
      var cy = cos$1(y), k = 1 + cos$1(x) * cy;
      return [cy * sin$1(x) / k, sin$1(y) / k];
    }

    stereographicRaw.invert = azimuthalInvert(function(z) {
      return 2 * atan(z);
    });

    function stereographic() {
      return projection(stereographicRaw)
          .scale(250)
          .clipAngle(142);
    }

    function transverseMercatorRaw(lambda, phi) {
      return [log(tan((halfPi$2 + phi) / 2)), -lambda];
    }

    transverseMercatorRaw.invert = function(x, y) {
      return [-y, 2 * atan(exp$1(x)) - halfPi$2];
    };

    function transverseMercator() {
      var m = mercatorProjection(transverseMercatorRaw),
          center = m.center,
          rotate = m.rotate;

      m.center = function(_) {
        return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
      };

      m.rotate = function(_) {
        return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
      };

      return rotate([0, 0, 90])
          .scale(159.155);
    }

    function defaultSeparation(a, b) {
      return a.parent === b.parent ? 1 : 2;
    }

    function meanX(children) {
      return children.reduce(meanXReduce, 0) / children.length;
    }

    function meanXReduce(x, c) {
      return x + c.x;
    }

    function maxY(children) {
      return 1 + children.reduce(maxYReduce, 0);
    }

    function maxYReduce(y, c) {
      return Math.max(y, c.y);
    }

    function leafLeft(node) {
      var children;
      while (children = node.children) node = children[0];
      return node;
    }

    function leafRight(node) {
      var children;
      while (children = node.children) node = children[children.length - 1];
      return node;
    }

    function cluster() {
      var separation = defaultSeparation,
          dx = 1,
          dy = 1,
          nodeSize = false;

      function cluster(root) {
        var previousNode,
            x = 0;

        // First walk, computing the initial x & y values.
        root.eachAfter(function(node) {
          var children = node.children;
          if (children) {
            node.x = meanX(children);
            node.y = maxY(children);
          } else {
            node.x = previousNode ? x += separation(node, previousNode) : 0;
            node.y = 0;
            previousNode = node;
          }
        });

        var left = leafLeft(root),
            right = leafRight(root),
            x0 = left.x - separation(left, right) / 2,
            x1 = right.x + separation(right, left) / 2;

        // Second walk, normalizing x & y to the desired size.
        return root.eachAfter(nodeSize ? function(node) {
          node.x = (node.x - root.x) * dx;
          node.y = (root.y - node.y) * dy;
        } : function(node) {
          node.x = (node.x - x0) / (x1 - x0) * dx;
          node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
        });
      }

      cluster.separation = function(x) {
        return arguments.length ? (separation = x, cluster) : separation;
      };

      cluster.size = function(x) {
        return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);
      };

      cluster.nodeSize = function(x) {
        return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);
      };

      return cluster;
    }

    function count$1(node) {
      var sum = 0,
          children = node.children,
          i = children && children.length;
      if (!i) sum = 1;
      else while (--i >= 0) sum += children[i].value;
      node.value = sum;
    }

    function node_count() {
      return this.eachAfter(count$1);
    }

    function node_each(callback, that) {
      let index = -1;
      for (const node of this) {
        callback.call(that, node, ++index, this);
      }
      return this;
    }

    function node_eachBefore(callback, that) {
      var node = this, nodes = [node], children, i, index = -1;
      while (node = nodes.pop()) {
        callback.call(that, node, ++index, this);
        if (children = node.children) {
          for (i = children.length - 1; i >= 0; --i) {
            nodes.push(children[i]);
          }
        }
      }
      return this;
    }

    function node_eachAfter(callback, that) {
      var node = this, nodes = [node], next = [], children, i, n, index = -1;
      while (node = nodes.pop()) {
        next.push(node);
        if (children = node.children) {
          for (i = 0, n = children.length; i < n; ++i) {
            nodes.push(children[i]);
          }
        }
      }
      while (node = next.pop()) {
        callback.call(that, node, ++index, this);
      }
      return this;
    }

    function node_find(callback, that) {
      let index = -1;
      for (const node of this) {
        if (callback.call(that, node, ++index, this)) {
          return node;
        }
      }
    }

    function node_sum(value) {
      return this.eachAfter(function(node) {
        var sum = +value(node.data) || 0,
            children = node.children,
            i = children && children.length;
        while (--i >= 0) sum += children[i].value;
        node.value = sum;
      });
    }

    function node_sort(compare) {
      return this.eachBefore(function(node) {
        if (node.children) {
          node.children.sort(compare);
        }
      });
    }

    function node_path(end) {
      var start = this,
          ancestor = leastCommonAncestor(start, end),
          nodes = [start];
      while (start !== ancestor) {
        start = start.parent;
        nodes.push(start);
      }
      var k = nodes.length;
      while (end !== ancestor) {
        nodes.splice(k, 0, end);
        end = end.parent;
      }
      return nodes;
    }

    function leastCommonAncestor(a, b) {
      if (a === b) return a;
      var aNodes = a.ancestors(),
          bNodes = b.ancestors(),
          c = null;
      a = aNodes.pop();
      b = bNodes.pop();
      while (a === b) {
        c = a;
        a = aNodes.pop();
        b = bNodes.pop();
      }
      return c;
    }

    function node_ancestors() {
      var node = this, nodes = [node];
      while (node = node.parent) {
        nodes.push(node);
      }
      return nodes;
    }

    function node_descendants() {
      return Array.from(this);
    }

    function node_leaves() {
      var leaves = [];
      this.eachBefore(function(node) {
        if (!node.children) {
          leaves.push(node);
        }
      });
      return leaves;
    }

    function node_links() {
      var root = this, links = [];
      root.each(function(node) {
        if (node !== root) { // Don’t include the root’s parent, if any.
          links.push({source: node.parent, target: node});
        }
      });
      return links;
    }

    function* node_iterator() {
      var node = this, current, next = [node], children, i, n;
      do {
        current = next.reverse(), next = [];
        while (node = current.pop()) {
          yield node;
          if (children = node.children) {
            for (i = 0, n = children.length; i < n; ++i) {
              next.push(children[i]);
            }
          }
        }
      } while (next.length);
    }

    function hierarchy(data, children) {
      if (data instanceof Map) {
        data = [undefined, data];
        if (children === undefined) children = mapChildren;
      } else if (children === undefined) {
        children = objectChildren;
      }

      var root = new Node(data),
          node,
          nodes = [root],
          child,
          childs,
          i,
          n;

      while (node = nodes.pop()) {
        if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {
          node.children = childs;
          for (i = n - 1; i >= 0; --i) {
            nodes.push(child = childs[i] = new Node(childs[i]));
            child.parent = node;
            child.depth = node.depth + 1;
          }
        }
      }

      return root.eachBefore(computeHeight);
    }

    function node_copy() {
      return hierarchy(this).eachBefore(copyData);
    }

    function objectChildren(d) {
      return d.children;
    }

    function mapChildren(d) {
      return Array.isArray(d) ? d[1] : null;
    }

    function copyData(node) {
      if (node.data.value !== undefined) node.value = node.data.value;
      node.data = node.data.data;
    }

    function computeHeight(node) {
      var height = 0;
      do node.height = height;
      while ((node = node.parent) && (node.height < ++height));
    }

    function Node(data) {
      this.data = data;
      this.depth =
      this.height = 0;
      this.parent = null;
    }

    Node.prototype = hierarchy.prototype = {
      constructor: Node,
      count: node_count,
      each: node_each,
      eachAfter: node_eachAfter,
      eachBefore: node_eachBefore,
      find: node_find,
      sum: node_sum,
      sort: node_sort,
      path: node_path,
      ancestors: node_ancestors,
      descendants: node_descendants,
      leaves: node_leaves,
      links: node_links,
      copy: node_copy,
      [Symbol.iterator]: node_iterator
    };

    function array$4(x) {
      return typeof x === "object" && "length" in x
        ? x // Array, TypedArray, NodeList, array-like
        : Array.from(x); // Map, Set, iterable, string, or anything else
    }

    function shuffle$2(array) {
      var m = array.length,
          t,
          i;

      while (m) {
        i = Math.random() * m-- | 0;
        t = array[m];
        array[m] = array[i];
        array[i] = t;
      }

      return array;
    }

    function enclose(circles) {
      var i = 0, n = (circles = shuffle$2(Array.from(circles))).length, B = [], p, e;

      while (i < n) {
        p = circles[i];
        if (e && enclosesWeak(e, p)) ++i;
        else e = encloseBasis(B = extendBasis(B, p)), i = 0;
      }

      return e;
    }

    function extendBasis(B, p) {
      var i, j;

      if (enclosesWeakAll(p, B)) return [p];

      // If we get here then B must have at least one element.
      for (i = 0; i < B.length; ++i) {
        if (enclosesNot(p, B[i])
            && enclosesWeakAll(encloseBasis2(B[i], p), B)) {
          return [B[i], p];
        }
      }

      // If we get here then B must have at least two elements.
      for (i = 0; i < B.length - 1; ++i) {
        for (j = i + 1; j < B.length; ++j) {
          if (enclosesNot(encloseBasis2(B[i], B[j]), p)
              && enclosesNot(encloseBasis2(B[i], p), B[j])
              && enclosesNot(encloseBasis2(B[j], p), B[i])
              && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {
            return [B[i], B[j], p];
          }
        }
      }

      // If we get here then something is very wrong.
      throw new Error;
    }

    function enclosesNot(a, b) {
      var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;
      return dr < 0 || dr * dr < dx * dx + dy * dy;
    }

    function enclosesWeak(a, b) {
      var dr = a.r - b.r + Math.max(a.r, b.r, 1) * 1e-9, dx = b.x - a.x, dy = b.y - a.y;
      return dr > 0 && dr * dr > dx * dx + dy * dy;
    }

    function enclosesWeakAll(a, B) {
      for (var i = 0; i < B.length; ++i) {
        if (!enclosesWeak(a, B[i])) {
          return false;
        }
      }
      return true;
    }

    function encloseBasis(B) {
      switch (B.length) {
        case 1: return encloseBasis1(B[0]);
        case 2: return encloseBasis2(B[0], B[1]);
        case 3: return encloseBasis3(B[0], B[1], B[2]);
      }
    }

    function encloseBasis1(a) {
      return {
        x: a.x,
        y: a.y,
        r: a.r
      };
    }

    function encloseBasis2(a, b) {
      var x1 = a.x, y1 = a.y, r1 = a.r,
          x2 = b.x, y2 = b.y, r2 = b.r,
          x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,
          l = Math.sqrt(x21 * x21 + y21 * y21);
      return {
        x: (x1 + x2 + x21 / l * r21) / 2,
        y: (y1 + y2 + y21 / l * r21) / 2,
        r: (l + r1 + r2) / 2
      };
    }

    function encloseBasis3(a, b, c) {
      var x1 = a.x, y1 = a.y, r1 = a.r,
          x2 = b.x, y2 = b.y, r2 = b.r,
          x3 = c.x, y3 = c.y, r3 = c.r,
          a2 = x1 - x2,
          a3 = x1 - x3,
          b2 = y1 - y2,
          b3 = y1 - y3,
          c2 = r2 - r1,
          c3 = r3 - r1,
          d1 = x1 * x1 + y1 * y1 - r1 * r1,
          d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,
          d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,
          ab = a3 * b2 - a2 * b3,
          xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,
          xb = (b3 * c2 - b2 * c3) / ab,
          ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,
          yb = (a2 * c3 - a3 * c2) / ab,
          A = xb * xb + yb * yb - 1,
          B = 2 * (r1 + xa * xb + ya * yb),
          C = xa * xa + ya * ya - r1 * r1,
          r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);
      return {
        x: x1 + xa + xb * r,
        y: y1 + ya + yb * r,
        r: r
      };
    }

    function place(b, a, c) {
      var dx = b.x - a.x, x, a2,
          dy = b.y - a.y, y, b2,
          d2 = dx * dx + dy * dy;
      if (d2) {
        a2 = a.r + c.r, a2 *= a2;
        b2 = b.r + c.r, b2 *= b2;
        if (a2 > b2) {
          x = (d2 + b2 - a2) / (2 * d2);
          y = Math.sqrt(Math.max(0, b2 / d2 - x * x));
          c.x = b.x - x * dx - y * dy;
          c.y = b.y - x * dy + y * dx;
        } else {
          x = (d2 + a2 - b2) / (2 * d2);
          y = Math.sqrt(Math.max(0, a2 / d2 - x * x));
          c.x = a.x + x * dx - y * dy;
          c.y = a.y + x * dy + y * dx;
        }
      } else {
        c.x = a.x + c.r;
        c.y = a.y;
      }
    }

    function intersects(a, b) {
      var dr = a.r + b.r - 1e-6, dx = b.x - a.x, dy = b.y - a.y;
      return dr > 0 && dr * dr > dx * dx + dy * dy;
    }

    function score(node) {
      var a = node._,
          b = node.next._,
          ab = a.r + b.r,
          dx = (a.x * b.r + b.x * a.r) / ab,
          dy = (a.y * b.r + b.y * a.r) / ab;
      return dx * dx + dy * dy;
    }

    function Node$1(circle) {
      this._ = circle;
      this.next = null;
      this.previous = null;
    }

    function packEnclose(circles) {
      if (!(n = (circles = array$4(circles)).length)) return 0;

      var a, b, c, n, aa, ca, i, j, k, sj, sk;

      // Place the first circle.
      a = circles[0], a.x = 0, a.y = 0;
      if (!(n > 1)) return a.r;

      // Place the second circle.
      b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
      if (!(n > 2)) return a.r + b.r;

      // Place the third circle.
      place(b, a, c = circles[2]);

      // Initialize the front-chain using the first three circles a, b and c.
      a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);
      a.next = c.previous = b;
      b.next = a.previous = c;
      c.next = b.previous = a;

      // Attempt to place each remaining circle…
      pack: for (i = 3; i < n; ++i) {
        place(a._, b._, c = circles[i]), c = new Node$1(c);

        // Find the closest intersecting circle on the front-chain, if any.
        // “Closeness” is determined by linear distance along the front-chain.
        // “Ahead” or “behind” is likewise determined by linear distance.
        j = b.next, k = a.previous, sj = b._.r, sk = a._.r;
        do {
          if (sj <= sk) {
            if (intersects(j._, c._)) {
              b = j, a.next = b, b.previous = a, --i;
              continue pack;
            }
            sj += j._.r, j = j.next;
          } else {
            if (intersects(k._, c._)) {
              a = k, a.next = b, b.previous = a, --i;
              continue pack;
            }
            sk += k._.r, k = k.previous;
          }
        } while (j !== k.next);

        // Success! Insert the new circle c between a and b.
        c.previous = a, c.next = b, a.next = b.previous = b = c;

        // Compute the new closest circle pair to the centroid.
        aa = score(a);
        while ((c = c.next) !== b) {
          if ((ca = score(c)) < aa) {
            a = c, aa = ca;
          }
        }
        b = a.next;
      }

      // Compute the enclosing circle of the front chain.
      a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);

      // Translate the circles to put the enclosing circle around the origin.
      for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;

      return c.r;
    }

    function siblings(circles) {
      packEnclose(circles);
      return circles;
    }

    function optional(f) {
      return f == null ? null : required(f);
    }

    function required(f) {
      if (typeof f !== "function") throw new Error;
      return f;
    }

    function constantZero() {
      return 0;
    }

    function constant$9(x) {
      return function() {
        return x;
      };
    }

    function defaultRadius$1(d) {
      return Math.sqrt(d.value);
    }

    function index$4() {
      var radius = null,
          dx = 1,
          dy = 1,
          padding = constantZero;

      function pack(root) {
        root.x = dx / 2, root.y = dy / 2;
        if (radius) {
          root.eachBefore(radiusLeaf(radius))
              .eachAfter(packChildren(padding, 0.5))
              .eachBefore(translateChild(1));
        } else {
          root.eachBefore(radiusLeaf(defaultRadius$1))
              .eachAfter(packChildren(constantZero, 1))
              .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))
              .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
        }
        return root;
      }

      pack.radius = function(x) {
        return arguments.length ? (radius = optional(x), pack) : radius;
      };

      pack.size = function(x) {
        return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];
      };

      pack.padding = function(x) {
        return arguments.length ? (padding = typeof x === "function" ? x : constant$9(+x), pack) : padding;
      };

      return pack;
    }

    function radiusLeaf(radius) {
      return function(node) {
        if (!node.children) {
          node.r = Math.max(0, +radius(node) || 0);
        }
      };
    }

    function packChildren(padding, k) {
      return function(node) {
        if (children = node.children) {
          var children,
              i,
              n = children.length,
              r = padding(node) * k || 0,
              e;

          if (r) for (i = 0; i < n; ++i) children[i].r += r;
          e = packEnclose(children);
          if (r) for (i = 0; i < n; ++i) children[i].r -= r;
          node.r = e + r;
        }
      };
    }

    function translateChild(k) {
      return function(node) {
        var parent = node.parent;
        node.r *= k;
        if (parent) {
          node.x = parent.x + k * node.x;
          node.y = parent.y + k * node.y;
        }
      };
    }

    function roundNode(node) {
      node.x0 = Math.round(node.x0);
      node.y0 = Math.round(node.y0);
      node.x1 = Math.round(node.x1);
      node.y1 = Math.round(node.y1);
    }

    function treemapDice(parent, x0, y0, x1, y1) {
      var nodes = parent.children,
          node,
          i = -1,
          n = nodes.length,
          k = parent.value && (x1 - x0) / parent.value;

      while (++i < n) {
        node = nodes[i], node.y0 = y0, node.y1 = y1;
        node.x0 = x0, node.x1 = x0 += node.value * k;
      }
    }

    function partition() {
      var dx = 1,
          dy = 1,
          padding = 0,
          round = false;

      function partition(root) {
        var n = root.height + 1;
        root.x0 =
        root.y0 = padding;
        root.x1 = dx;
        root.y1 = dy / n;
        root.eachBefore(positionNode(dy, n));
        if (round) root.eachBefore(roundNode);
        return root;
      }

      function positionNode(dy, n) {
        return function(node) {
          if (node.children) {
            treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
          }
          var x0 = node.x0,
              y0 = node.y0,
              x1 = node.x1 - padding,
              y1 = node.y1 - padding;
          if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
          if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
          node.x0 = x0;
          node.y0 = y0;
          node.x1 = x1;
          node.y1 = y1;
        };
      }

      partition.round = function(x) {
        return arguments.length ? (round = !!x, partition) : round;
      };

      partition.size = function(x) {
        return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];
      };

      partition.padding = function(x) {
        return arguments.length ? (padding = +x, partition) : padding;
      };

      return partition;
    }

    var preroot = {depth: -1},
        ambiguous = {};

    function defaultId(d) {
      return d.id;
    }

    function defaultParentId(d) {
      return d.parentId;
    }

    function stratify() {
      var id = defaultId,
          parentId = defaultParentId;

      function stratify(data) {
        var nodes = Array.from(data),
            n = nodes.length,
            d,
            i,
            root,
            parent,
            node,
            nodeId,
            nodeKey,
            nodeByKey = new Map;

        for (i = 0; i < n; ++i) {
          d = nodes[i], node = nodes[i] = new Node(d);
          if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {
            nodeKey = node.id = nodeId;
            nodeByKey.set(nodeKey, nodeByKey.has(nodeKey) ? ambiguous : node);
          }
          if ((nodeId = parentId(d, i, data)) != null && (nodeId += "")) {
            node.parent = nodeId;
          }
        }

        for (i = 0; i < n; ++i) {
          node = nodes[i];
          if (nodeId = node.parent) {
            parent = nodeByKey.get(nodeId);
            if (!parent) throw new Error("missing: " + nodeId);
            if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
            if (parent.children) parent.children.push(node);
            else parent.children = [node];
            node.parent = parent;
          } else {
            if (root) throw new Error("multiple roots");
            root = node;
          }
        }

        if (!root) throw new Error("no root");
        root.parent = preroot;
        root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);
        root.parent = null;
        if (n > 0) throw new Error("cycle");

        return root;
      }

      stratify.id = function(x) {
        return arguments.length ? (id = required(x), stratify) : id;
      };

      stratify.parentId = function(x) {
        return arguments.length ? (parentId = required(x), stratify) : parentId;
      };

      return stratify;
    }

    function defaultSeparation$1(a, b) {
      return a.parent === b.parent ? 1 : 2;
    }

    // function radialSeparation(a, b) {
    //   return (a.parent === b.parent ? 1 : 2) / a.depth;
    // }

    // This function is used to traverse the left contour of a subtree (or
    // subforest). It returns the successor of v on this contour. This successor is
    // either given by the leftmost child of v or by the thread of v. The function
    // returns null if and only if v is on the highest level of its subtree.
    function nextLeft(v) {
      var children = v.children;
      return children ? children[0] : v.t;
    }

    // This function works analogously to nextLeft.
    function nextRight(v) {
      var children = v.children;
      return children ? children[children.length - 1] : v.t;
    }

    // Shifts the current subtree rooted at w+. This is done by increasing
    // prelim(w+) and mod(w+) by shift.
    function moveSubtree(wm, wp, shift) {
      var change = shift / (wp.i - wm.i);
      wp.c -= change;
      wp.s += shift;
      wm.c += change;
      wp.z += shift;
      wp.m += shift;
    }

    // All other shifts, applied to the smaller subtrees between w- and w+, are
    // performed by this function. To prepare the shifts, we have to adjust
    // change(w+), shift(w+), and change(w-).
    function executeShifts(v) {
      var shift = 0,
          change = 0,
          children = v.children,
          i = children.length,
          w;
      while (--i >= 0) {
        w = children[i];
        w.z += shift;
        w.m += shift;
        shift += w.s + (change += w.c);
      }
    }

    // If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
    // returns the specified (default) ancestor.
    function nextAncestor(vim, v, ancestor) {
      return vim.a.parent === v.parent ? vim.a : ancestor;
    }

    function TreeNode(node, i) {
      this._ = node;
      this.parent = null;
      this.children = null;
      this.A = null; // default ancestor
      this.a = this; // ancestor
      this.z = 0; // prelim
      this.m = 0; // mod
      this.c = 0; // change
      this.s = 0; // shift
      this.t = null; // thread
      this.i = i; // number
    }

    TreeNode.prototype = Object.create(Node.prototype);

    function treeRoot(root) {
      var tree = new TreeNode(root, 0),
          node,
          nodes = [tree],
          child,
          children,
          i,
          n;

      while (node = nodes.pop()) {
        if (children = node._.children) {
          node.children = new Array(n = children.length);
          for (i = n - 1; i >= 0; --i) {
            nodes.push(child = node.children[i] = new TreeNode(children[i], i));
            child.parent = node;
          }
        }
      }

      (tree.parent = new TreeNode(null, 0)).children = [tree];
      return tree;
    }

    // Node-link tree diagram using the Reingold-Tilford "tidy" algorithm
    function tree() {
      var separation = defaultSeparation$1,
          dx = 1,
          dy = 1,
          nodeSize = null;

      function tree(root) {
        var t = treeRoot(root);

        // Compute the layout using Buchheim et al.’s algorithm.
        t.eachAfter(firstWalk), t.parent.m = -t.z;
        t.eachBefore(secondWalk);

        // If a fixed node size is specified, scale x and y.
        if (nodeSize) root.eachBefore(sizeNode);

        // If a fixed tree size is specified, scale x and y based on the extent.
        // Compute the left-most, right-most, and depth-most nodes for extents.
        else {
          var left = root,
              right = root,
              bottom = root;
          root.eachBefore(function(node) {
            if (node.x < left.x) left = node;
            if (node.x > right.x) right = node;
            if (node.depth > bottom.depth) bottom = node;
          });
          var s = left === right ? 1 : separation(left, right) / 2,
              tx = s - left.x,
              kx = dx / (right.x + s + tx),
              ky = dy / (bottom.depth || 1);
          root.eachBefore(function(node) {
            node.x = (node.x + tx) * kx;
            node.y = node.depth * ky;
          });
        }

        return root;
      }

      // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
      // applied recursively to the children of v, as well as the function
      // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
      // node v is placed to the midpoint of its outermost children.
      function firstWalk(v) {
        var children = v.children,
            siblings = v.parent.children,
            w = v.i ? siblings[v.i - 1] : null;
        if (children) {
          executeShifts(v);
          var midpoint = (children[0].z + children[children.length - 1].z) / 2;
          if (w) {
            v.z = w.z + separation(v._, w._);
            v.m = v.z - midpoint;
          } else {
            v.z = midpoint;
          }
        } else if (w) {
          v.z = w.z + separation(v._, w._);
        }
        v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
      }

      // Computes all real x-coordinates by summing up the modifiers recursively.
      function secondWalk(v) {
        v._.x = v.z + v.parent.m;
        v.m += v.parent.m;
      }

      // The core of the algorithm. Here, a new subtree is combined with the
      // previous subtrees. Threads are used to traverse the inside and outside
      // contours of the left and right subtree up to the highest common level. The
      // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
      // superscript o means outside and i means inside, the subscript - means left
      // subtree and + means right subtree. For summing up the modifiers along the
      // contour, we use respective variables si+, si-, so-, and so+. Whenever two
      // nodes of the inside contours conflict, we compute the left one of the
      // greatest uncommon ancestors using the function ANCESTOR and call MOVE
      // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
      // Finally, we add a new thread (if necessary).
      function apportion(v, w, ancestor) {
        if (w) {
          var vip = v,
              vop = v,
              vim = w,
              vom = vip.parent.children[0],
              sip = vip.m,
              sop = vop.m,
              sim = vim.m,
              som = vom.m,
              shift;
          while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
            vom = nextLeft(vom);
            vop = nextRight(vop);
            vop.a = v;
            shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
            if (shift > 0) {
              moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
              sip += shift;
              sop += shift;
            }
            sim += vim.m;
            sip += vip.m;
            som += vom.m;
            sop += vop.m;
          }
          if (vim && !nextRight(vop)) {
            vop.t = vim;
            vop.m += sim - sop;
          }
          if (vip && !nextLeft(vom)) {
            vom.t = vip;
            vom.m += sip - som;
            ancestor = v;
          }
        }
        return ancestor;
      }

      function sizeNode(node) {
        node.x *= dx;
        node.y = node.depth * dy;
      }

      tree.separation = function(x) {
        return arguments.length ? (separation = x, tree) : separation;
      };

      tree.size = function(x) {
        return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);
      };

      tree.nodeSize = function(x) {
        return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);
      };

      return tree;
    }

    function treemapSlice(parent, x0, y0, x1, y1) {
      var nodes = parent.children,
          node,
          i = -1,
          n = nodes.length,
          k = parent.value && (y1 - y0) / parent.value;

      while (++i < n) {
        node = nodes[i], node.x0 = x0, node.x1 = x1;
        node.y0 = y0, node.y1 = y0 += node.value * k;
      }
    }

    var phi = (1 + Math.sqrt(5)) / 2;

    function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
      var rows = [],
          nodes = parent.children,
          row,
          nodeValue,
          i0 = 0,
          i1 = 0,
          n = nodes.length,
          dx, dy,
          value = parent.value,
          sumValue,
          minValue,
          maxValue,
          newRatio,
          minRatio,
          alpha,
          beta;

      while (i0 < n) {
        dx = x1 - x0, dy = y1 - y0;

        // Find the next non-empty node.
        do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);
        minValue = maxValue = sumValue;
        alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
        beta = sumValue * sumValue * alpha;
        minRatio = Math.max(maxValue / beta, beta / minValue);

        // Keep adding nodes while the aspect ratio maintains or improves.
        for (; i1 < n; ++i1) {
          sumValue += nodeValue = nodes[i1].value;
          if (nodeValue < minValue) minValue = nodeValue;
          if (nodeValue > maxValue) maxValue = nodeValue;
          beta = sumValue * sumValue * alpha;
          newRatio = Math.max(maxValue / beta, beta / minValue);
          if (newRatio > minRatio) { sumValue -= nodeValue; break; }
          minRatio = newRatio;
        }

        // Position and record the row orientation.
        rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});
        if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);
        else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
        value -= sumValue, i0 = i1;
      }

      return rows;
    }

    var squarify = (function custom(ratio) {

      function squarify(parent, x0, y0, x1, y1) {
        squarifyRatio(ratio, parent, x0, y0, x1, y1);
      }

      squarify.ratio = function(x) {
        return custom((x = +x) > 1 ? x : 1);
      };

      return squarify;
    })(phi);

    function index$5() {
      var tile = squarify,
          round = false,
          dx = 1,
          dy = 1,
          paddingStack = [0],
          paddingInner = constantZero,
          paddingTop = constantZero,
          paddingRight = constantZero,
          paddingBottom = constantZero,
          paddingLeft = constantZero;

      function treemap(root) {
        root.x0 =
        root.y0 = 0;
        root.x1 = dx;
        root.y1 = dy;
        root.eachBefore(positionNode);
        paddingStack = [0];
        if (round) root.eachBefore(roundNode);
        return root;
      }

      function positionNode(node) {
        var p = paddingStack[node.depth],
            x0 = node.x0 + p,
            y0 = node.y0 + p,
            x1 = node.x1 - p,
            y1 = node.y1 - p;
        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
        node.x0 = x0;
        node.y0 = y0;
        node.x1 = x1;
        node.y1 = y1;
        if (node.children) {
          p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
          x0 += paddingLeft(node) - p;
          y0 += paddingTop(node) - p;
          x1 -= paddingRight(node) - p;
          y1 -= paddingBottom(node) - p;
          if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
          if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
          tile(node, x0, y0, x1, y1);
        }
      }

      treemap.round = function(x) {
        return arguments.length ? (round = !!x, treemap) : round;
      };

      treemap.size = function(x) {
        return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];
      };

      treemap.tile = function(x) {
        return arguments.length ? (tile = required(x), treemap) : tile;
      };

      treemap.padding = function(x) {
        return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
      };

      treemap.paddingInner = function(x) {
        return arguments.length ? (paddingInner = typeof x === "function" ? x : constant$9(+x), treemap) : paddingInner;
      };

      treemap.paddingOuter = function(x) {
        return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
      };

      treemap.paddingTop = function(x) {
        return arguments.length ? (paddingTop = typeof x === "function" ? x : constant$9(+x), treemap) : paddingTop;
      };

      treemap.paddingRight = function(x) {
        return arguments.length ? (paddingRight = typeof x === "function" ? x : constant$9(+x), treemap) : paddingRight;
      };

      treemap.paddingBottom = function(x) {
        return arguments.length ? (paddingBottom = typeof x === "function" ? x : constant$9(+x), treemap) : paddingBottom;
      };

      treemap.paddingLeft = function(x) {
        return arguments.length ? (paddingLeft = typeof x === "function" ? x : constant$9(+x), treemap) : paddingLeft;
      };

      return treemap;
    }

    function binary(parent, x0, y0, x1, y1) {
      var nodes = parent.children,
          i, n = nodes.length,
          sum, sums = new Array(n + 1);

      for (sums[0] = sum = i = 0; i < n; ++i) {
        sums[i + 1] = sum += nodes[i].value;
      }

      partition(0, n, parent.value, x0, y0, x1, y1);

      function partition(i, j, value, x0, y0, x1, y1) {
        if (i >= j - 1) {
          var node = nodes[i];
          node.x0 = x0, node.y0 = y0;
          node.x1 = x1, node.y1 = y1;
          return;
        }

        var valueOffset = sums[i],
            valueTarget = (value / 2) + valueOffset,
            k = i + 1,
            hi = j - 1;

        while (k < hi) {
          var mid = k + hi >>> 1;
          if (sums[mid] < valueTarget) k = mid + 1;
          else hi = mid;
        }

        if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;

        var valueLeft = sums[k] - valueOffset,
            valueRight = value - valueLeft;

        if ((x1 - x0) > (y1 - y0)) {
          var xk = value ? (x0 * valueRight + x1 * valueLeft) / value : x1;
          partition(i, k, valueLeft, x0, y0, xk, y1);
          partition(k, j, valueRight, xk, y0, x1, y1);
        } else {
          var yk = value ? (y0 * valueRight + y1 * valueLeft) / value : y1;
          partition(i, k, valueLeft, x0, y0, x1, yk);
          partition(k, j, valueRight, x0, yk, x1, y1);
        }
      }
    }

    function sliceDice(parent, x0, y0, x1, y1) {
      (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);
    }

    var resquarify = (function custom(ratio) {

      function resquarify(parent, x0, y0, x1, y1) {
        if ((rows = parent._squarify) && (rows.ratio === ratio)) {
          var rows,
              row,
              nodes,
              i,
              j = -1,
              n,
              m = rows.length,
              value = parent.value;

          while (++j < m) {
            row = rows[j], nodes = row.children;
            for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;
            if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += (y1 - y0) * row.value / value : y1);
            else treemapSlice(row, x0, y0, value ? x0 += (x1 - x0) * row.value / value : x1, y1);
            value -= row.value;
          }
        } else {
          parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);
          rows.ratio = ratio;
        }
      }

      resquarify.ratio = function(x) {
        return custom((x = +x) > 1 ? x : 1);
      };

      return resquarify;
    })(phi);

    function area$2(polygon) {
      var i = -1,
          n = polygon.length,
          a,
          b = polygon[n - 1],
          area = 0;

      while (++i < n) {
        a = b;
        b = polygon[i];
        area += a[1] * b[0] - a[0] * b[1];
      }

      return area / 2;
    }

    function centroid$1(polygon) {
      var i = -1,
          n = polygon.length,
          x = 0,
          y = 0,
          a,
          b = polygon[n - 1],
          c,
          k = 0;

      while (++i < n) {
        a = b;
        b = polygon[i];
        k += c = a[0] * b[1] - b[0] * a[1];
        x += (a[0] + b[0]) * c;
        y += (a[1] + b[1]) * c;
      }

      return k *= 3, [x / k, y / k];
    }

    // Returns the 2D cross product of AB and AC vectors, i.e., the z-component of
    // the 3D cross product in a quadrant I Cartesian coordinate system (+x is
    // right, +y is up). Returns a positive value if ABC is counter-clockwise,
    // negative if clockwise, and zero if the points are collinear.
    function cross$2(a, b, c) {
      return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
    }

    function lexicographicOrder(a, b) {
      return a[0] - b[0] || a[1] - b[1];
    }

    // Computes the upper convex hull per the monotone chain algorithm.
    // Assumes points.length >= 3, is sorted by x, unique in y.
    // Returns an array of indices into points in left-to-right order.
    function computeUpperHullIndexes(points) {
      const n = points.length,
          indexes = [0, 1];
      let size = 2, i;

      for (i = 2; i < n; ++i) {
        while (size > 1 && cross$2(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;
        indexes[size++] = i;
      }

      return indexes.slice(0, size); // remove popped points
    }

    function hull(points) {
      if ((n = points.length) < 3) return null;

      var i,
          n,
          sortedPoints = new Array(n),
          flippedPoints = new Array(n);

      for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];
      sortedPoints.sort(lexicographicOrder);
      for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];

      var upperIndexes = computeUpperHullIndexes(sortedPoints),
          lowerIndexes = computeUpperHullIndexes(flippedPoints);

      // Construct the hull polygon, removing possible duplicate endpoints.
      var skipLeft = lowerIndexes[0] === upperIndexes[0],
          skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],
          hull = [];

      // Add upper hull in right-to-l order.
      // Then add lower hull in left-to-right order.
      for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);
      for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);

      return hull;
    }

    function contains$2(polygon, point) {
      var n = polygon.length,
          p = polygon[n - 1],
          x = point[0], y = point[1],
          x0 = p[0], y0 = p[1],
          x1, y1,
          inside = false;

      for (var i = 0; i < n; ++i) {
        p = polygon[i], x1 = p[0], y1 = p[1];
        if (((y1 > y) !== (y0 > y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;
        x0 = x1, y0 = y1;
      }

      return inside;
    }

    function length$6(polygon) {
      var i = -1,
          n = polygon.length,
          b = polygon[n - 1],
          xa,
          ya,
          xb = b[0],
          yb = b[1],
          perimeter = 0;

      while (++i < n) {
        xa = xb;
        ya = yb;
        b = polygon[i];
        xb = b[0];
        yb = b[1];
        xa -= xb;
        ya -= yb;
        perimeter += Math.hypot(xa, ya);
      }

      return perimeter;
    }

    var defaultSource$1 = Math.random;

    var uniform = (function sourceRandomUniform(source) {
      function randomUniform(min, max) {
        min = min == null ? 0 : +min;
        max = max == null ? 1 : +max;
        if (arguments.length === 1) max = min, min = 0;
        else max -= min;
        return function() {
          return source() * max + min;
        };
      }

      randomUniform.source = sourceRandomUniform;

      return randomUniform;
    })(defaultSource$1);

    var int = (function sourceRandomInt(source) {
      function randomInt(min, max) {
        if (arguments.length < 2) max = min, min = 0;
        min = Math.floor(min);
        max = Math.floor(max) - min;
        return function() {
          return Math.floor(source() * max + min);
        };
      }

      randomInt.source = sourceRandomInt;

      return randomInt;
    })(defaultSource$1);

    var normal = (function sourceRandomNormal(source) {
      function randomNormal(mu, sigma) {
        var x, r;
        mu = mu == null ? 0 : +mu;
        sigma = sigma == null ? 1 : +sigma;
        return function() {
          var y;

          // If available, use the second previously-generated uniform random.
          if (x != null) y = x, x = null;

          // Otherwise, generate a new x and y.
          else do {
            x = source() * 2 - 1;
            y = source() * 2 - 1;
            r = x * x + y * y;
          } while (!r || r > 1);

          return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);
        };
      }

      randomNormal.source = sourceRandomNormal;

      return randomNormal;
    })(defaultSource$1);

    var logNormal = (function sourceRandomLogNormal(source) {
      var N = normal.source(source);

      function randomLogNormal() {
        var randomNormal = N.apply(this, arguments);
        return function() {
          return Math.exp(randomNormal());
        };
      }

      randomLogNormal.source = sourceRandomLogNormal;

      return randomLogNormal;
    })(defaultSource$1);

    var irwinHall = (function sourceRandomIrwinHall(source) {
      function randomIrwinHall(n) {
        if ((n = +n) <= 0) return () => 0;
        return function() {
          for (var sum = 0, i = n; i > 1; --i) sum += source();
          return sum + i * source();
        };
      }

      randomIrwinHall.source = sourceRandomIrwinHall;

      return randomIrwinHall;
    })(defaultSource$1);

    var bates = (function sourceRandomBates(source) {
      var I = irwinHall.source(source);

      function randomBates(n) {
        // use limiting distribution at n === 0
        if ((n = +n) === 0) return source;
        var randomIrwinHall = I(n);
        return function() {
          return randomIrwinHall() / n;
        };
      }

      randomBates.source = sourceRandomBates;

      return randomBates;
    })(defaultSource$1);

    var exponential$1 = (function sourceRandomExponential(source) {
      function randomExponential(lambda) {
        return function() {
          return -Math.log1p(-source()) / lambda;
        };
      }

      randomExponential.source = sourceRandomExponential;

      return randomExponential;
    })(defaultSource$1);

    var pareto = (function sourceRandomPareto(source) {
      function randomPareto(alpha) {
        if ((alpha = +alpha) < 0) throw new RangeError("invalid alpha");
        alpha = 1 / -alpha;
        return function() {
          return Math.pow(1 - source(), alpha);
        };
      }

      randomPareto.source = sourceRandomPareto;

      return randomPareto;
    })(defaultSource$1);

    var bernoulli = (function sourceRandomBernoulli(source) {
      function randomBernoulli(p) {
        if ((p = +p) < 0 || p > 1) throw new RangeError("invalid p");
        return function() {
          return Math.floor(source() + p);
        };
      }

      randomBernoulli.source = sourceRandomBernoulli;

      return randomBernoulli;
    })(defaultSource$1);

    var geometric = (function sourceRandomGeometric(source) {
      function randomGeometric(p) {
        if ((p = +p) < 0 || p > 1) throw new RangeError("invalid p");
        if (p === 0) return () => Infinity;
        if (p === 1) return () => 1;
        p = Math.log1p(-p);
        return function() {
          return 1 + Math.floor(Math.log1p(-source()) / p);
        };
      }

      randomGeometric.source = sourceRandomGeometric;

      return randomGeometric;
    })(defaultSource$1);

    var gamma$1 = (function sourceRandomGamma(source) {
      var randomNormal = normal.source(source)();

      function randomGamma(k, theta) {
        if ((k = +k) < 0) throw new RangeError("invalid k");
        // degenerate distribution if k === 0
        if (k === 0) return () => 0;
        theta = theta == null ? 1 : +theta;
        // exponential distribution if k === 1
        if (k === 1) return () => -Math.log1p(-source()) * theta;

        var d = (k < 1 ? k + 1 : k) - 1 / 3,
            c = 1 / (3 * Math.sqrt(d)),
            multiplier = k < 1 ? () => Math.pow(source(), 1 / k) : () => 1;
        return function() {
          do {
            do {
              var x = randomNormal(),
                  v = 1 + c * x;
            } while (v <= 0);
            v *= v * v;
            var u = 1 - source();
          } while (u >= 1 - 0.0331 * x * x * x * x && Math.log(u) >= 0.5 * x * x + d * (1 - v + Math.log(v)));
          return d * v * multiplier() * theta;
        };
      }

      randomGamma.source = sourceRandomGamma;

      return randomGamma;
    })(defaultSource$1);

    var beta = (function sourceRandomBeta(source) {
      var G = gamma$1.source(source);

      function randomBeta(alpha, beta) {
        var X = G(alpha),
            Y = G(beta);
        return function() {
          var x = X();
          return x === 0 ? 0 : x / (x + Y());
        };
      }

      randomBeta.source = sourceRandomBeta;

      return randomBeta;
    })(defaultSource$1);

    var binomial = (function sourceRandomBinomial(source) {
      var G = geometric.source(source),
          B = beta.source(source);

      function randomBinomial(n, p) {
        n = +n;
        if ((p = +p) >= 1) return () => n;
        if (p <= 0) return () => 0;
        return function() {
          var acc = 0, nn = n, pp = p;
          while (nn * pp > 16 && nn * (1 - pp) > 16) {
            var i = Math.floor((nn + 1) * pp),
                y = B(i, nn - i + 1)();
            if (y <= pp) {
              acc += i;
              nn -= i;
              pp = (pp - y) / (1 - y);
            } else {
              nn = i - 1;
              pp /= y;
            }
          }
          var sign = pp < 0.5,
              pFinal = sign ? pp : 1 - pp,
              g = G(pFinal);
          for (var s = g(), k = 0; s <= nn; ++k) s += g();
          return acc + (sign ? k : nn - k);
        };
      }

      randomBinomial.source = sourceRandomBinomial;

      return randomBinomial;
    })(defaultSource$1);

    var weibull = (function sourceRandomWeibull(source) {
      function randomWeibull(k, a, b) {
        var outerFunc;
        if ((k = +k) === 0) {
          outerFunc = x => -Math.log(x);
        } else {
          k = 1 / k;
          outerFunc = x => Math.pow(x, k);
        }
        a = a == null ? 0 : +a;
        b = b == null ? 1 : +b;
        return function() {
          return a + b * outerFunc(-Math.log1p(-source()));
        };
      }

      randomWeibull.source = sourceRandomWeibull;

      return randomWeibull;
    })(defaultSource$1);

    var cauchy = (function sourceRandomCauchy(source) {
      function randomCauchy(a, b) {
        a = a == null ? 0 : +a;
        b = b == null ? 1 : +b;
        return function() {
          return a + b * Math.tan(Math.PI * source());
        };
      }

      randomCauchy.source = sourceRandomCauchy;

      return randomCauchy;
    })(defaultSource$1);

    var logistic = (function sourceRandomLogistic(source) {
      function randomLogistic(a, b) {
        a = a == null ? 0 : +a;
        b = b == null ? 1 : +b;
        return function() {
          var u = source();
          return a + b * Math.log(u / (1 - u));
        };
      }

      randomLogistic.source = sourceRandomLogistic;

      return randomLogistic;
    })(defaultSource$1);

    var poisson = (function sourceRandomPoisson(source) {
      var G = gamma$1.source(source),
          B = binomial.source(source);

      function randomPoisson(lambda) {
        return function() {
          var acc = 0, l = lambda;
          while (l > 16) {
            var n = Math.floor(0.875 * l),
                t = G(n)();
            if (t > l) return acc + B(n - 1, l / t)();
            acc += n;
            l -= t;
          }
          for (var s = -Math.log1p(-source()), k = 0; s <= l; ++k) s -= Math.log1p(-source());
          return acc + k;
        };
      }

      randomPoisson.source = sourceRandomPoisson;

      return randomPoisson;
    })(defaultSource$1);

    // https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use
    const mul$3 = 0x19660D;
    const inc = 0x3C6EF35F;
    const eps = 1 / 0x100000000;

    function lcg$1(seed = Math.random()) {
      let state = (0 <= seed && seed < 1 ? seed / eps : Math.abs(seed)) | 0;
      return () => (state = mul$3 * state + inc | 0, eps * (state >>> 0));
    }

    function initRange(domain, range) {
      switch (arguments.length) {
        case 0: break;
        case 1: this.range(domain); break;
        default: this.range(range).domain(domain); break;
      }
      return this;
    }

    function initInterpolator(domain, interpolator) {
      switch (arguments.length) {
        case 0: break;
        case 1: {
          if (typeof domain === "function") this.interpolator(domain);
          else this.range(domain);
          break;
        }
        default: {
          this.domain(domain);
          if (typeof interpolator === "function") this.interpolator(interpolator);
          else this.range(interpolator);
          break;
        }
      }
      return this;
    }

    const implicit = Symbol("implicit");

    function ordinal() {
      var index = new Map(),
          domain = [],
          range = [],
          unknown = implicit;

      function scale(d) {
        var key = d + "", i = index.get(key);
        if (!i) {
          if (unknown !== implicit) return unknown;
          index.set(key, i = domain.push(d));
        }
        return range[(i - 1) % range.length];
      }

      scale.domain = function(_) {
        if (!arguments.length) return domain.slice();
        domain = [], index = new Map();
        for (const value of _) {
          const key = value + "";
          if (index.has(key)) continue;
          index.set(key, domain.push(value));
        }
        return scale;
      };

      scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), scale) : range.slice();
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      scale.copy = function() {
        return ordinal(domain, range).unknown(unknown);
      };

      initRange.apply(scale, arguments);

      return scale;
    }

    function band() {
      var scale = ordinal().unknown(undefined),
          domain = scale.domain,
          ordinalRange = scale.range,
          r0 = 0,
          r1 = 1,
          step,
          bandwidth,
          round = false,
          paddingInner = 0,
          paddingOuter = 0,
          align = 0.5;

      delete scale.unknown;

      function rescale() {
        var n = domain().length,
            reverse = r1 < r0,
            start = reverse ? r1 : r0,
            stop = reverse ? r0 : r1;
        step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
        if (round) step = Math.floor(step);
        start += (stop - start - step * (n - paddingInner)) * align;
        bandwidth = step * (1 - paddingInner);
        if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
        var values = sequence(n).map(function(i) { return start + step * i; });
        return ordinalRange(reverse ? values.reverse() : values);
      }

      scale.domain = function(_) {
        return arguments.length ? (domain(_), rescale()) : domain();
      };

      scale.range = function(_) {
        return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
      };

      scale.rangeRound = function(_) {
        return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();
      };

      scale.bandwidth = function() {
        return bandwidth;
      };

      scale.step = function() {
        return step;
      };

      scale.round = function(_) {
        return arguments.length ? (round = !!_, rescale()) : round;
      };

      scale.padding = function(_) {
        return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
      };

      scale.paddingInner = function(_) {
        return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
      };

      scale.paddingOuter = function(_) {
        return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
      };

      scale.align = function(_) {
        return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
      };

      scale.copy = function() {
        return band(domain(), [r0, r1])
            .round(round)
            .paddingInner(paddingInner)
            .paddingOuter(paddingOuter)
            .align(align);
      };

      return initRange.apply(rescale(), arguments);
    }

    function pointish(scale) {
      var copy = scale.copy;

      scale.padding = scale.paddingOuter;
      delete scale.paddingInner;
      delete scale.paddingOuter;

      scale.copy = function() {
        return pointish(copy());
      };

      return scale;
    }

    function point() {
      return pointish(band.apply(null, arguments).paddingInner(1));
    }

    function constants(x) {
      return function() {
        return x;
      };
    }

    function number$2(x) {
      return +x;
    }

    var unit = [0, 1];

    function identity$8(x) {
      return x;
    }

    function normalize$4(a, b) {
      return (b -= (a = +a))
          ? function(x) { return (x - a) / b; }
          : constants(isNaN(b) ? NaN : 0.5);
    }

    function clamper(a, b) {
      var t;
      if (a > b) t = a, a = b, b = t;
      return function(x) { return Math.max(a, Math.min(b, x)); };
    }

    // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
    // interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
    function bimap(domain, range, interpolate) {
      var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
      if (d1 < d0) d0 = normalize$4(d1, d0), r0 = interpolate(r1, r0);
      else d0 = normalize$4(d0, d1), r0 = interpolate(r0, r1);
      return function(x) { return r0(d0(x)); };
    }

    function polymap(domain, range, interpolate) {
      var j = Math.min(domain.length, range.length) - 1,
          d = new Array(j),
          r = new Array(j),
          i = -1;

      // Reverse descending domains.
      if (domain[j] < domain[0]) {
        domain = domain.slice().reverse();
        range = range.slice().reverse();
      }

      while (++i < j) {
        d[i] = normalize$4(domain[i], domain[i + 1]);
        r[i] = interpolate(range[i], range[i + 1]);
      }

      return function(x) {
        var i = bisectRight(domain, x, 1, j) - 1;
        return r[i](d[i](x));
      };
    }

    function copy$4(source, target) {
      return target
          .domain(source.domain())
          .range(source.range())
          .interpolate(source.interpolate())
          .clamp(source.clamp())
          .unknown(source.unknown());
    }

    function transformer$1() {
      var domain = unit,
          range = unit,
          interpolate$1 = interpolate,
          transform,
          untransform,
          unknown,
          clamp = identity$8,
          piecewise,
          output,
          input;

      function rescale() {
        var n = Math.min(domain.length, range.length);
        if (clamp !== identity$8) clamp = clamper(domain[0], domain[n - 1]);
        piecewise = n > 2 ? polymap : bimap;
        output = input = null;
        return scale;
      }

      function scale(x) {
        return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate$1)))(transform(clamp(x)));
      }

      scale.invert = function(y) {
        return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));
      };

      scale.domain = function(_) {
        return arguments.length ? (domain = Array.from(_, number$2), rescale()) : domain.slice();
      };

      scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
      };

      scale.rangeRound = function(_) {
        return range = Array.from(_), interpolate$1 = interpolateRound, rescale();
      };

      scale.clamp = function(_) {
        return arguments.length ? (clamp = _ ? true : identity$8, rescale()) : clamp !== identity$8;
      };

      scale.interpolate = function(_) {
        return arguments.length ? (interpolate$1 = _, rescale()) : interpolate$1;
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      return function(t, u) {
        transform = t, untransform = u;
        return rescale();
      };
    }

    function continuous() {
      return transformer$1()(identity$8, identity$8);
    }

    function tickFormat(start, stop, count, specifier) {
      var step = tickStep(start, stop, count),
          precision;
      specifier = formatSpecifier(specifier == null ? ",f" : specifier);
      switch (specifier.type) {
        case "s": {
          var value = Math.max(Math.abs(start), Math.abs(stop));
          if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
          return formatPrefix(specifier, value);
        }
        case "":
        case "e":
        case "g":
        case "p":
        case "r": {
          if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
          break;
        }
        case "f":
        case "%": {
          if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
          break;
        }
      }
      return format(specifier);
    }

    function linearish(scale) {
      var domain = scale.domain;

      scale.ticks = function(count) {
        var d = domain();
        return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
      };

      scale.tickFormat = function(count, specifier) {
        var d = domain();
        return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
      };

      scale.nice = function(count) {
        if (count == null) count = 10;

        var d = domain();
        var i0 = 0;
        var i1 = d.length - 1;
        var start = d[i0];
        var stop = d[i1];
        var prestep;
        var step;
        var maxIter = 10;

        if (stop < start) {
          step = start, start = stop, stop = step;
          step = i0, i0 = i1, i1 = step;
        }

        while (maxIter-- > 0) {
          step = tickIncrement(start, stop, count);
          if (step === prestep) {
            d[i0] = start;
            d[i1] = stop;
            return domain(d);
          } else if (step > 0) {
            start = Math.floor(start / step) * step;
            stop = Math.ceil(stop / step) * step;
          } else if (step < 0) {
            start = Math.ceil(start * step) / step;
            stop = Math.floor(stop * step) / step;
          } else {
            break;
          }
          prestep = step;
        }

        return scale;
      };

      return scale;
    }

    function linear$3() {
      var scale = continuous();

      scale.copy = function() {
        return copy$4(scale, linear$3());
      };

      initRange.apply(scale, arguments);

      return linearish(scale);
    }

    function identity$9(domain) {
      var unknown;

      function scale(x) {
        return isNaN(x = +x) ? unknown : x;
      }

      scale.invert = scale;

      scale.domain = scale.range = function(_) {
        return arguments.length ? (domain = Array.from(_, number$2), scale) : domain.slice();
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      scale.copy = function() {
        return identity$9(domain).unknown(unknown);
      };

      domain = arguments.length ? Array.from(domain, number$2) : [0, 1];

      return linearish(scale);
    }

    function nice$1(domain, interval) {
      domain = domain.slice();

      var i0 = 0,
          i1 = domain.length - 1,
          x0 = domain[i0],
          x1 = domain[i1],
          t;

      if (x1 < x0) {
        t = i0, i0 = i1, i1 = t;
        t = x0, x0 = x1, x1 = t;
      }

      domain[i0] = interval.floor(x0);
      domain[i1] = interval.ceil(x1);
      return domain;
    }

    function transformLog(x) {
      return Math.log(x);
    }

    function transformExp(x) {
      return Math.exp(x);
    }

    function transformLogn(x) {
      return -Math.log(-x);
    }

    function transformExpn(x) {
      return -Math.exp(-x);
    }

    function pow10(x) {
      return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
    }

    function powp(base) {
      return base === 10 ? pow10
          : base === Math.E ? Math.exp
          : function(x) { return Math.pow(base, x); };
    }

    function logp(base) {
      return base === Math.E ? Math.log
          : base === 10 && Math.log10
          || base === 2 && Math.log2
          || (base = Math.log(base), function(x) { return Math.log(x) / base; });
    }

    function reflect(f) {
      return function(x) {
        return -f(-x);
      };
    }

    function loggish(transform) {
      var scale = transform(transformLog, transformExp),
          domain = scale.domain,
          base = 10,
          logs,
          pows;

      function rescale() {
        logs = logp(base), pows = powp(base);
        if (domain()[0] < 0) {
          logs = reflect(logs), pows = reflect(pows);
          transform(transformLogn, transformExpn);
        } else {
          transform(transformLog, transformExp);
        }
        return scale;
      }

      scale.base = function(_) {
        return arguments.length ? (base = +_, rescale()) : base;
      };

      scale.domain = function(_) {
        return arguments.length ? (domain(_), rescale()) : domain();
      };

      scale.ticks = function(count) {
        var d = domain(),
            u = d[0],
            v = d[d.length - 1],
            r;

        if (r = v < u) i = u, u = v, v = i;

        var i = logs(u),
            j = logs(v),
            p,
            k,
            t,
            n = count == null ? 10 : +count,
            z = [];

        if (!(base % 1) && j - i < n) {
          i = Math.floor(i), j = Math.ceil(j);
          if (u > 0) for (; i <= j; ++i) {
            for (k = 1, p = pows(i); k < base; ++k) {
              t = p * k;
              if (t < u) continue;
              if (t > v) break;
              z.push(t);
            }
          } else for (; i <= j; ++i) {
            for (k = base - 1, p = pows(i); k >= 1; --k) {
              t = p * k;
              if (t < u) continue;
              if (t > v) break;
              z.push(t);
            }
          }
          if (z.length * 2 < n) z = ticks(u, v, n);
        } else {
          z = ticks(i, j, Math.min(j - i, n)).map(pows);
        }

        return r ? z.reverse() : z;
      };

      scale.tickFormat = function(count, specifier) {
        if (specifier == null) specifier = base === 10 ? ".0e" : ",";
        if (typeof specifier !== "function") specifier = format(specifier);
        if (count === Infinity) return specifier;
        if (count == null) count = 10;
        var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
        return function(d) {
          var i = d / pows(Math.round(logs(d)));
          if (i * base < base - 0.5) i *= base;
          return i <= k ? specifier(d) : "";
        };
      };

      scale.nice = function() {
        return domain(nice$1(domain(), {
          floor: function(x) { return pows(Math.floor(logs(x))); },
          ceil: function(x) { return pows(Math.ceil(logs(x))); }
        }));
      };

      return scale;
    }

    function log$1() {
      var scale = loggish(transformer$1()).domain([1, 10]);

      scale.copy = function() {
        return copy$4(scale, log$1()).base(scale.base());
      };

      initRange.apply(scale, arguments);

      return scale;
    }

    function transformSymlog(c) {
      return function(x) {
        return Math.sign(x) * Math.log1p(Math.abs(x / c));
      };
    }

    function transformSymexp(c) {
      return function(x) {
        return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
      };
    }

    function symlogish(transform) {
      var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));

      scale.constant = function(_) {
        return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;
      };

      return linearish(scale);
    }

    function symlog() {
      var scale = symlogish(transformer$1());

      scale.copy = function() {
        return copy$4(scale, symlog()).constant(scale.constant());
      };

      return initRange.apply(scale, arguments);
    }

    function transformPow(exponent) {
      return function(x) {
        return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
      };
    }

    function transformSqrt(x) {
      return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
    }

    function transformSquare(x) {
      return x < 0 ? -x * x : x * x;
    }

    function powish(transform) {
      var scale = transform(identity$8, identity$8),
          exponent = 1;

      function rescale() {
        return exponent === 1 ? transform(identity$8, identity$8)
            : exponent === 0.5 ? transform(transformSqrt, transformSquare)
            : transform(transformPow(exponent), transformPow(1 / exponent));
      }

      scale.exponent = function(_) {
        return arguments.length ? (exponent = +_, rescale()) : exponent;
      };

      return linearish(scale);
    }

    function pow$3() {
      var scale = powish(transformer$1());

      scale.copy = function() {
        return copy$4(scale, pow$3()).exponent(scale.exponent());
      };

      initRange.apply(scale, arguments);

      return scale;
    }

    function sqrt$1() {
      return pow$3.apply(null, arguments).exponent(0.5);
    }

    function square(x) {
      return Math.sign(x) * x * x;
    }

    function unsquare(x) {
      return Math.sign(x) * Math.sqrt(Math.abs(x));
    }

    function radial$1() {
      var squared = continuous(),
          range = [0, 1],
          round = false,
          unknown;

      function scale(x) {
        var y = unsquare(squared(x));
        return isNaN(y) ? unknown : round ? Math.round(y) : y;
      }

      scale.invert = function(y) {
        return squared.invert(square(y));
      };

      scale.domain = function(_) {
        return arguments.length ? (squared.domain(_), scale) : squared.domain();
      };

      scale.range = function(_) {
        return arguments.length ? (squared.range((range = Array.from(_, number$2)).map(square)), scale) : range.slice();
      };

      scale.rangeRound = function(_) {
        return scale.range(_).round(true);
      };

      scale.round = function(_) {
        return arguments.length ? (round = !!_, scale) : round;
      };

      scale.clamp = function(_) {
        return arguments.length ? (squared.clamp(_), scale) : squared.clamp();
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      scale.copy = function() {
        return radial$1(squared.domain(), range)
            .round(round)
            .clamp(squared.clamp())
            .unknown(unknown);
      };

      initRange.apply(scale, arguments);

      return linearish(scale);
    }

    function quantile$1() {
      var domain = [],
          range = [],
          thresholds = [],
          unknown;

      function rescale() {
        var i = 0, n = Math.max(1, range.length);
        thresholds = new Array(n - 1);
        while (++i < n) thresholds[i - 1] = quantileSorted(domain, i / n);
        return scale;
      }

      function scale(x) {
        return isNaN(x = +x) ? unknown : range[bisectRight(thresholds, x)];
      }

      scale.invertExtent = function(y) {
        var i = range.indexOf(y);
        return i < 0 ? [NaN, NaN] : [
          i > 0 ? thresholds[i - 1] : domain[0],
          i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
        ];
      };

      scale.domain = function(_) {
        if (!arguments.length) return domain.slice();
        domain = [];
        for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);
        domain.sort(ascending);
        return rescale();
      };

      scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      scale.quantiles = function() {
        return thresholds.slice();
      };

      scale.copy = function() {
        return quantile$1()
            .domain(domain)
            .range(range)
            .unknown(unknown);
      };

      return initRange.apply(scale, arguments);
    }

    function quantize$1() {
      var x0 = 0,
          x1 = 1,
          n = 1,
          domain = [0.5],
          range = [0, 1],
          unknown;

      function scale(x) {
        return x <= x ? range[bisectRight(domain, x, 0, n)] : unknown;
      }

      function rescale() {
        var i = -1;
        domain = new Array(n);
        while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
        return scale;
      }

      scale.domain = function(_) {
        return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];
      };

      scale.range = function(_) {
        return arguments.length ? (n = (range = Array.from(_)).length - 1, rescale()) : range.slice();
      };

      scale.invertExtent = function(y) {
        var i = range.indexOf(y);
        return i < 0 ? [NaN, NaN]
            : i < 1 ? [x0, domain[0]]
            : i >= n ? [domain[n - 1], x1]
            : [domain[i - 1], domain[i]];
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : scale;
      };

      scale.thresholds = function() {
        return domain.slice();
      };

      scale.copy = function() {
        return quantize$1()
            .domain([x0, x1])
            .range(range)
            .unknown(unknown);
      };

      return initRange.apply(linearish(scale), arguments);
    }

    function threshold() {
      var domain = [0.5],
          range = [0, 1],
          unknown,
          n = 1;

      function scale(x) {
        return x <= x ? range[bisectRight(domain, x, 0, n)] : unknown;
      }

      scale.domain = function(_) {
        return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
      };

      scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
      };

      scale.invertExtent = function(y) {
        var i = range.indexOf(y);
        return [domain[i - 1], domain[i]];
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      scale.copy = function() {
        return threshold()
            .domain(domain)
            .range(range)
            .unknown(unknown);
      };

      return initRange.apply(scale, arguments);
    }

    var t0$1 = new Date,
        t1$1 = new Date;

    function newInterval(floori, offseti, count, field) {

      function interval(date) {
        return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;
      }

      interval.floor = function(date) {
        return floori(date = new Date(+date)), date;
      };

      interval.ceil = function(date) {
        return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
      };

      interval.round = function(date) {
        var d0 = interval(date),
            d1 = interval.ceil(date);
        return date - d0 < d1 - date ? d0 : d1;
      };

      interval.offset = function(date, step) {
        return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
      };

      interval.range = function(start, stop, step) {
        var range = [], previous;
        start = interval.ceil(start);
        step = step == null ? 1 : Math.floor(step);
        if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
        do range.push(previous = new Date(+start)), offseti(start, step), floori(start);
        while (previous < start && start < stop);
        return range;
      };

      interval.filter = function(test) {
        return newInterval(function(date) {
          if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
        }, function(date, step) {
          if (date >= date) {
            if (step < 0) while (++step <= 0) {
              while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty
            } else while (--step >= 0) {
              while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty
            }
          }
        });
      };

      if (count) {
        interval.count = function(start, end) {
          t0$1.setTime(+start), t1$1.setTime(+end);
          floori(t0$1), floori(t1$1);
          return Math.floor(count(t0$1, t1$1));
        };

        interval.every = function(step) {
          step = Math.floor(step);
          return !isFinite(step) || !(step > 0) ? null
              : !(step > 1) ? interval
              : interval.filter(field
                  ? function(d) { return field(d) % step === 0; }
                  : function(d) { return interval.count(0, d) % step === 0; });
        };
      }

      return interval;
    }

    var millisecond = newInterval(function() {
      // noop
    }, function(date, step) {
      date.setTime(+date + step);
    }, function(start, end) {
      return end - start;
    });

    // An optimized implementation for this simple case.
    millisecond.every = function(k) {
      k = Math.floor(k);
      if (!isFinite(k) || !(k > 0)) return null;
      if (!(k > 1)) return millisecond;
      return newInterval(function(date) {
        date.setTime(Math.floor(date / k) * k);
      }, function(date, step) {
        date.setTime(+date + step * k);
      }, function(start, end) {
        return (end - start) / k;
      });
    };
    var milliseconds = millisecond.range;

    var durationSecond = 1e3;
    var durationMinute = 6e4;
    var durationHour = 36e5;
    var durationDay = 864e5;
    var durationWeek = 6048e5;

    var second = newInterval(function(date) {
      date.setTime(date - date.getMilliseconds());
    }, function(date, step) {
      date.setTime(+date + step * durationSecond);
    }, function(start, end) {
      return (end - start) / durationSecond;
    }, function(date) {
      return date.getUTCSeconds();
    });
    var seconds = second.range;

    var minute = newInterval(function(date) {
      date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
    }, function(date, step) {
      date.setTime(+date + step * durationMinute);
    }, function(start, end) {
      return (end - start) / durationMinute;
    }, function(date) {
      return date.getMinutes();
    });
    var minutes = minute.range;

    var hour = newInterval(function(date) {
      date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
    }, function(date, step) {
      date.setTime(+date + step * durationHour);
    }, function(start, end) {
      return (end - start) / durationHour;
    }, function(date) {
      return date.getHours();
    });
    var hours = hour.range;

    var day = newInterval(
      date => date.setHours(0, 0, 0, 0),
      (date, step) => date.setDate(date.getDate() + step),
      (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,
      date => date.getDate() - 1
    );
    var days = day.range;

    function weekday(i) {
      return newInterval(function(date) {
        date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
        date.setHours(0, 0, 0, 0);
      }, function(date, step) {
        date.setDate(date.getDate() + step * 7);
      }, function(start, end) {
        return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
      });
    }

    var sunday = weekday(0);
    var monday = weekday(1);
    var tuesday = weekday(2);
    var wednesday = weekday(3);
    var thursday = weekday(4);
    var friday = weekday(5);
    var saturday = weekday(6);

    var sundays = sunday.range;
    var mondays = monday.range;
    var tuesdays = tuesday.range;
    var wednesdays = wednesday.range;
    var thursdays = thursday.range;
    var fridays = friday.range;
    var saturdays = saturday.range;

    var month = newInterval(function(date) {
      date.setDate(1);
      date.setHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setMonth(date.getMonth() + step);
    }, function(start, end) {
      return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
    }, function(date) {
      return date.getMonth();
    });
    var months = month.range;

    var year = newInterval(function(date) {
      date.setMonth(0, 1);
      date.setHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setFullYear(date.getFullYear() + step);
    }, function(start, end) {
      return end.getFullYear() - start.getFullYear();
    }, function(date) {
      return date.getFullYear();
    });

    // An optimized implementation for this simple case.
    year.every = function(k) {
      return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
        date.setFullYear(Math.floor(date.getFullYear() / k) * k);
        date.setMonth(0, 1);
        date.setHours(0, 0, 0, 0);
      }, function(date, step) {
        date.setFullYear(date.getFullYear() + step * k);
      });
    };
    var years = year.range;

    var utcMinute = newInterval(function(date) {
      date.setUTCSeconds(0, 0);
    }, function(date, step) {
      date.setTime(+date + step * durationMinute);
    }, function(start, end) {
      return (end - start) / durationMinute;
    }, function(date) {
      return date.getUTCMinutes();
    });
    var utcMinutes = utcMinute.range;

    var utcHour = newInterval(function(date) {
      date.setUTCMinutes(0, 0, 0);
    }, function(date, step) {
      date.setTime(+date + step * durationHour);
    }, function(start, end) {
      return (end - start) / durationHour;
    }, function(date) {
      return date.getUTCHours();
    });
    var utcHours = utcHour.range;

    var utcDay = newInterval(function(date) {
      date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setUTCDate(date.getUTCDate() + step);
    }, function(start, end) {
      return (end - start) / durationDay;
    }, function(date) {
      return date.getUTCDate() - 1;
    });
    var utcDays = utcDay.range;

    function utcWeekday(i) {
      return newInterval(function(date) {
        date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
        date.setUTCHours(0, 0, 0, 0);
      }, function(date, step) {
        date.setUTCDate(date.getUTCDate() + step * 7);
      }, function(start, end) {
        return (end - start) / durationWeek;
      });
    }

    var utcSunday = utcWeekday(0);
    var utcMonday = utcWeekday(1);
    var utcTuesday = utcWeekday(2);
    var utcWednesday = utcWeekday(3);
    var utcThursday = utcWeekday(4);
    var utcFriday = utcWeekday(5);
    var utcSaturday = utcWeekday(6);

    var utcSundays = utcSunday.range;
    var utcMondays = utcMonday.range;
    var utcTuesdays = utcTuesday.range;
    var utcWednesdays = utcWednesday.range;
    var utcThursdays = utcThursday.range;
    var utcFridays = utcFriday.range;
    var utcSaturdays = utcSaturday.range;

    var utcMonth = newInterval(function(date) {
      date.setUTCDate(1);
      date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setUTCMonth(date.getUTCMonth() + step);
    }, function(start, end) {
      return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
    }, function(date) {
      return date.getUTCMonth();
    });
    var utcMonths = utcMonth.range;

    var utcYear = newInterval(function(date) {
      date.setUTCMonth(0, 1);
      date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setUTCFullYear(date.getUTCFullYear() + step);
    }, function(start, end) {
      return end.getUTCFullYear() - start.getUTCFullYear();
    }, function(date) {
      return date.getUTCFullYear();
    });

    // An optimized implementation for this simple case.
    utcYear.every = function(k) {
      return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
        date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
        date.setUTCMonth(0, 1);
        date.setUTCHours(0, 0, 0, 0);
      }, function(date, step) {
        date.setUTCFullYear(date.getUTCFullYear() + step * k);
      });
    };
    var utcYears = utcYear.range;

    function localDate(d) {
      if (0 <= d.y && d.y < 100) {
        var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
        date.setFullYear(d.y);
        return date;
      }
      return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
    }

    function utcDate(d) {
      if (0 <= d.y && d.y < 100) {
        var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
        date.setUTCFullYear(d.y);
        return date;
      }
      return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
    }

    function newDate(y, m, d) {
      return {y: y, m: m, d: d, H: 0, M: 0, S: 0, L: 0};
    }

    function formatLocale$1(locale) {
      var locale_dateTime = locale.dateTime,
          locale_date = locale.date,
          locale_time = locale.time,
          locale_periods = locale.periods,
          locale_weekdays = locale.days,
          locale_shortWeekdays = locale.shortDays,
          locale_months = locale.months,
          locale_shortMonths = locale.shortMonths;

      var periodRe = formatRe(locale_periods),
          periodLookup = formatLookup(locale_periods),
          weekdayRe = formatRe(locale_weekdays),
          weekdayLookup = formatLookup(locale_weekdays),
          shortWeekdayRe = formatRe(locale_shortWeekdays),
          shortWeekdayLookup = formatLookup(locale_shortWeekdays),
          monthRe = formatRe(locale_months),
          monthLookup = formatLookup(locale_months),
          shortMonthRe = formatRe(locale_shortMonths),
          shortMonthLookup = formatLookup(locale_shortMonths);

      var formats = {
        "a": formatShortWeekday,
        "A": formatWeekday,
        "b": formatShortMonth,
        "B": formatMonth,
        "c": null,
        "d": formatDayOfMonth,
        "e": formatDayOfMonth,
        "f": formatMicroseconds,
        "g": formatYearISO,
        "G": formatFullYearISO,
        "H": formatHour24,
        "I": formatHour12,
        "j": formatDayOfYear,
        "L": formatMilliseconds,
        "m": formatMonthNumber,
        "M": formatMinutes,
        "p": formatPeriod,
        "q": formatQuarter,
        "Q": formatUnixTimestamp,
        "s": formatUnixTimestampSeconds,
        "S": formatSeconds,
        "u": formatWeekdayNumberMonday,
        "U": formatWeekNumberSunday,
        "V": formatWeekNumberISO,
        "w": formatWeekdayNumberSunday,
        "W": formatWeekNumberMonday,
        "x": null,
        "X": null,
        "y": formatYear$1,
        "Y": formatFullYear,
        "Z": formatZone,
        "%": formatLiteralPercent
      };

      var utcFormats = {
        "a": formatUTCShortWeekday,
        "A": formatUTCWeekday,
        "b": formatUTCShortMonth,
        "B": formatUTCMonth,
        "c": null,
        "d": formatUTCDayOfMonth,
        "e": formatUTCDayOfMonth,
        "f": formatUTCMicroseconds,
        "g": formatUTCYearISO,
        "G": formatUTCFullYearISO,
        "H": formatUTCHour24,
        "I": formatUTCHour12,
        "j": formatUTCDayOfYear,
        "L": formatUTCMilliseconds,
        "m": formatUTCMonthNumber,
        "M": formatUTCMinutes,
        "p": formatUTCPeriod,
        "q": formatUTCQuarter,
        "Q": formatUnixTimestamp,
        "s": formatUnixTimestampSeconds,
        "S": formatUTCSeconds,
        "u": formatUTCWeekdayNumberMonday,
        "U": formatUTCWeekNumberSunday,
        "V": formatUTCWeekNumberISO,
        "w": formatUTCWeekdayNumberSunday,
        "W": formatUTCWeekNumberMonday,
        "x": null,
        "X": null,
        "y": formatUTCYear,
        "Y": formatUTCFullYear,
        "Z": formatUTCZone,
        "%": formatLiteralPercent
      };

      var parses = {
        "a": parseShortWeekday,
        "A": parseWeekday,
        "b": parseShortMonth,
        "B": parseMonth,
        "c": parseLocaleDateTime,
        "d": parseDayOfMonth,
        "e": parseDayOfMonth,
        "f": parseMicroseconds,
        "g": parseYear,
        "G": parseFullYear,
        "H": parseHour24,
        "I": parseHour24,
        "j": parseDayOfYear,
        "L": parseMilliseconds,
        "m": parseMonthNumber,
        "M": parseMinutes,
        "p": parsePeriod,
        "q": parseQuarter,
        "Q": parseUnixTimestamp,
        "s": parseUnixTimestampSeconds,
        "S": parseSeconds,
        "u": parseWeekdayNumberMonday,
        "U": parseWeekNumberSunday,
        "V": parseWeekNumberISO,
        "w": parseWeekdayNumberSunday,
        "W": parseWeekNumberMonday,
        "x": parseLocaleDate,
        "X": parseLocaleTime,
        "y": parseYear,
        "Y": parseFullYear,
        "Z": parseZone,
        "%": parseLiteralPercent
      };

      // These recursive directive definitions must be deferred.
      formats.x = newFormat(locale_date, formats);
      formats.X = newFormat(locale_time, formats);
      formats.c = newFormat(locale_dateTime, formats);
      utcFormats.x = newFormat(locale_date, utcFormats);
      utcFormats.X = newFormat(locale_time, utcFormats);
      utcFormats.c = newFormat(locale_dateTime, utcFormats);

      function newFormat(specifier, formats) {
        return function(date) {
          var string = [],
              i = -1,
              j = 0,
              n = specifier.length,
              c,
              pad,
              format;

          if (!(date instanceof Date)) date = new Date(+date);

          while (++i < n) {
            if (specifier.charCodeAt(i) === 37) {
              string.push(specifier.slice(j, i));
              if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
              else pad = c === "e" ? " " : "0";
              if (format = formats[c]) c = format(date, pad);
              string.push(c);
              j = i + 1;
            }
          }

          string.push(specifier.slice(j, i));
          return string.join("");
        };
      }

      function newParse(specifier, Z) {
        return function(string) {
          var d = newDate(1900, undefined, 1),
              i = parseSpecifier(d, specifier, string += "", 0),
              week, day$1;
          if (i != string.length) return null;

          // If a UNIX timestamp is specified, return it.
          if ("Q" in d) return new Date(d.Q);
          if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0));

          // If this is utcParse, never use the local timezone.
          if (Z && !("Z" in d)) d.Z = 0;

          // The am-pm flag is 0 for AM, and 1 for PM.
          if ("p" in d) d.H = d.H % 12 + d.p * 12;

          // If the month was not specified, inherit from the quarter.
          if (d.m === undefined) d.m = "q" in d ? d.q : 0;

          // Convert day-of-week and week-of-year to day-of-year.
          if ("V" in d) {
            if (d.V < 1 || d.V > 53) return null;
            if (!("w" in d)) d.w = 1;
            if ("Z" in d) {
              week = utcDate(newDate(d.y, 0, 1)), day$1 = week.getUTCDay();
              week = day$1 > 4 || day$1 === 0 ? utcMonday.ceil(week) : utcMonday(week);
              week = utcDay.offset(week, (d.V - 1) * 7);
              d.y = week.getUTCFullYear();
              d.m = week.getUTCMonth();
              d.d = week.getUTCDate() + (d.w + 6) % 7;
            } else {
              week = localDate(newDate(d.y, 0, 1)), day$1 = week.getDay();
              week = day$1 > 4 || day$1 === 0 ? monday.ceil(week) : monday(week);
              week = day.offset(week, (d.V - 1) * 7);
              d.y = week.getFullYear();
              d.m = week.getMonth();
              d.d = week.getDate() + (d.w + 6) % 7;
            }
          } else if ("W" in d || "U" in d) {
            if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
            day$1 = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
            d.m = 0;
            d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day$1 + 5) % 7 : d.w + d.U * 7 - (day$1 + 6) % 7;
          }

          // If a time zone is specified, all fields are interpreted as UTC and then
          // offset according to the specified time zone.
          if ("Z" in d) {
            d.H += d.Z / 100 | 0;
            d.M += d.Z % 100;
            return utcDate(d);
          }

          // Otherwise, all fields are in local time.
          return localDate(d);
        };
      }

      function parseSpecifier(d, specifier, string, j) {
        var i = 0,
            n = specifier.length,
            m = string.length,
            c,
            parse;

        while (i < n) {
          if (j >= m) return -1;
          c = specifier.charCodeAt(i++);
          if (c === 37) {
            c = specifier.charAt(i++);
            parse = parses[c in pads ? specifier.charAt(i++) : c];
            if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
          } else if (c != string.charCodeAt(j++)) {
            return -1;
          }
        }

        return j;
      }

      function parsePeriod(d, string, i) {
        var n = periodRe.exec(string.slice(i));
        return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseShortWeekday(d, string, i) {
        var n = shortWeekdayRe.exec(string.slice(i));
        return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseWeekday(d, string, i) {
        var n = weekdayRe.exec(string.slice(i));
        return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseShortMonth(d, string, i) {
        var n = shortMonthRe.exec(string.slice(i));
        return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseMonth(d, string, i) {
        var n = monthRe.exec(string.slice(i));
        return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
      }

      function parseLocaleDateTime(d, string, i) {
        return parseSpecifier(d, locale_dateTime, string, i);
      }

      function parseLocaleDate(d, string, i) {
        return parseSpecifier(d, locale_date, string, i);
      }

      function parseLocaleTime(d, string, i) {
        return parseSpecifier(d, locale_time, string, i);
      }

      function formatShortWeekday(d) {
        return locale_shortWeekdays[d.getDay()];
      }

      function formatWeekday(d) {
        return locale_weekdays[d.getDay()];
      }

      function formatShortMonth(d) {
        return locale_shortMonths[d.getMonth()];
      }

      function formatMonth(d) {
        return locale_months[d.getMonth()];
      }

      function formatPeriod(d) {
        return locale_periods[+(d.getHours() >= 12)];
      }

      function formatQuarter(d) {
        return 1 + ~~(d.getMonth() / 3);
      }

      function formatUTCShortWeekday(d) {
        return locale_shortWeekdays[d.getUTCDay()];
      }

      function formatUTCWeekday(d) {
        return locale_weekdays[d.getUTCDay()];
      }

      function formatUTCShortMonth(d) {
        return locale_shortMonths[d.getUTCMonth()];
      }

      function formatUTCMonth(d) {
        return locale_months[d.getUTCMonth()];
      }

      function formatUTCPeriod(d) {
        return locale_periods[+(d.getUTCHours() >= 12)];
      }

      function formatUTCQuarter(d) {
        return 1 + ~~(d.getUTCMonth() / 3);
      }

      return {
        format: function(specifier) {
          var f = newFormat(specifier += "", formats);
          f.toString = function() { return specifier; };
          return f;
        },
        parse: function(specifier) {
          var p = newParse(specifier += "", false);
          p.toString = function() { return specifier; };
          return p;
        },
        utcFormat: function(specifier) {
          var f = newFormat(specifier += "", utcFormats);
          f.toString = function() { return specifier; };
          return f;
        },
        utcParse: function(specifier) {
          var p = newParse(specifier += "", true);
          p.toString = function() { return specifier; };
          return p;
        }
      };
    }

    var pads = {"-": "", "_": " ", "0": "0"},
        numberRe = /^\s*\d+/, // note: ignores next directive
        percentRe = /^%/,
        requoteRe = /[\\^$*+?|[\]().{}]/g;

    function pad$2(value, fill, width) {
      var sign = value < 0 ? "-" : "",
          string = (sign ? -value : value) + "",
          length = string.length;
      return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
    }

    function requote(s) {
      return s.replace(requoteRe, "\\$&");
    }

    function formatRe(names) {
      return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
    }

    function formatLookup(names) {
      return new Map(names.map((name, i) => [name.toLowerCase(), i]));
    }

    function parseWeekdayNumberSunday(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 1));
      return n ? (d.w = +n[0], i + n[0].length) : -1;
    }

    function parseWeekdayNumberMonday(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 1));
      return n ? (d.u = +n[0], i + n[0].length) : -1;
    }

    function parseWeekNumberSunday(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.U = +n[0], i + n[0].length) : -1;
    }

    function parseWeekNumberISO(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.V = +n[0], i + n[0].length) : -1;
    }

    function parseWeekNumberMonday(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.W = +n[0], i + n[0].length) : -1;
    }

    function parseFullYear(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 4));
      return n ? (d.y = +n[0], i + n[0].length) : -1;
    }

    function parseYear(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
    }

    function parseZone(d, string, i) {
      var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
      return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
    }

    function parseQuarter(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 1));
      return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
    }

    function parseMonthNumber(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
    }

    function parseDayOfMonth(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.d = +n[0], i + n[0].length) : -1;
    }

    function parseDayOfYear(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 3));
      return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
    }

    function parseHour24(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.H = +n[0], i + n[0].length) : -1;
    }

    function parseMinutes(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.M = +n[0], i + n[0].length) : -1;
    }

    function parseSeconds(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.S = +n[0], i + n[0].length) : -1;
    }

    function parseMilliseconds(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 3));
      return n ? (d.L = +n[0], i + n[0].length) : -1;
    }

    function parseMicroseconds(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 6));
      return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
    }

    function parseLiteralPercent(d, string, i) {
      var n = percentRe.exec(string.slice(i, i + 1));
      return n ? i + n[0].length : -1;
    }

    function parseUnixTimestamp(d, string, i) {
      var n = numberRe.exec(string.slice(i));
      return n ? (d.Q = +n[0], i + n[0].length) : -1;
    }

    function parseUnixTimestampSeconds(d, string, i) {
      var n = numberRe.exec(string.slice(i));
      return n ? (d.s = +n[0], i + n[0].length) : -1;
    }

    function formatDayOfMonth(d, p) {
      return pad$2(d.getDate(), p, 2);
    }

    function formatHour24(d, p) {
      return pad$2(d.getHours(), p, 2);
    }

    function formatHour12(d, p) {
      return pad$2(d.getHours() % 12 || 12, p, 2);
    }

    function formatDayOfYear(d, p) {
      return pad$2(1 + day.count(year(d), d), p, 3);
    }

    function formatMilliseconds(d, p) {
      return pad$2(d.getMilliseconds(), p, 3);
    }

    function formatMicroseconds(d, p) {
      return formatMilliseconds(d, p) + "000";
    }

    function formatMonthNumber(d, p) {
      return pad$2(d.getMonth() + 1, p, 2);
    }

    function formatMinutes(d, p) {
      return pad$2(d.getMinutes(), p, 2);
    }

    function formatSeconds(d, p) {
      return pad$2(d.getSeconds(), p, 2);
    }

    function formatWeekdayNumberMonday(d) {
      var day = d.getDay();
      return day === 0 ? 7 : day;
    }

    function formatWeekNumberSunday(d, p) {
      return pad$2(sunday.count(year(d) - 1, d), p, 2);
    }

    function dISO(d) {
      var day = d.getDay();
      return (day >= 4 || day === 0) ? thursday(d) : thursday.ceil(d);
    }

    function formatWeekNumberISO(d, p) {
      d = dISO(d);
      return pad$2(thursday.count(year(d), d) + (year(d).getDay() === 4), p, 2);
    }

    function formatWeekdayNumberSunday(d) {
      return d.getDay();
    }

    function formatWeekNumberMonday(d, p) {
      return pad$2(monday.count(year(d) - 1, d), p, 2);
    }

    function formatYear$1(d, p) {
      return pad$2(d.getFullYear() % 100, p, 2);
    }

    function formatYearISO(d, p) {
      d = dISO(d);
      return pad$2(d.getFullYear() % 100, p, 2);
    }

    function formatFullYear(d, p) {
      return pad$2(d.getFullYear() % 10000, p, 4);
    }

    function formatFullYearISO(d, p) {
      var day = d.getDay();
      d = (day >= 4 || day === 0) ? thursday(d) : thursday.ceil(d);
      return pad$2(d.getFullYear() % 10000, p, 4);
    }

    function formatZone(d) {
      var z = d.getTimezoneOffset();
      return (z > 0 ? "-" : (z *= -1, "+"))
          + pad$2(z / 60 | 0, "0", 2)
          + pad$2(z % 60, "0", 2);
    }

    function formatUTCDayOfMonth(d, p) {
      return pad$2(d.getUTCDate(), p, 2);
    }

    function formatUTCHour24(d, p) {
      return pad$2(d.getUTCHours(), p, 2);
    }

    function formatUTCHour12(d, p) {
      return pad$2(d.getUTCHours() % 12 || 12, p, 2);
    }

    function formatUTCDayOfYear(d, p) {
      return pad$2(1 + utcDay.count(utcYear(d), d), p, 3);
    }

    function formatUTCMilliseconds(d, p) {
      return pad$2(d.getUTCMilliseconds(), p, 3);
    }

    function formatUTCMicroseconds(d, p) {
      return formatUTCMilliseconds(d, p) + "000";
    }

    function formatUTCMonthNumber(d, p) {
      return pad$2(d.getUTCMonth() + 1, p, 2);
    }

    function formatUTCMinutes(d, p) {
      return pad$2(d.getUTCMinutes(), p, 2);
    }

    function formatUTCSeconds(d, p) {
      return pad$2(d.getUTCSeconds(), p, 2);
    }

    function formatUTCWeekdayNumberMonday(d) {
      var dow = d.getUTCDay();
      return dow === 0 ? 7 : dow;
    }

    function formatUTCWeekNumberSunday(d, p) {
      return pad$2(utcSunday.count(utcYear(d) - 1, d), p, 2);
    }

    function UTCdISO(d) {
      var day = d.getUTCDay();
      return (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);
    }

    function formatUTCWeekNumberISO(d, p) {
      d = UTCdISO(d);
      return pad$2(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);
    }

    function formatUTCWeekdayNumberSunday(d) {
      return d.getUTCDay();
    }

    function formatUTCWeekNumberMonday(d, p) {
      return pad$2(utcMonday.count(utcYear(d) - 1, d), p, 2);
    }

    function formatUTCYear(d, p) {
      return pad$2(d.getUTCFullYear() % 100, p, 2);
    }

    function formatUTCYearISO(d, p) {
      d = UTCdISO(d);
      return pad$2(d.getUTCFullYear() % 100, p, 2);
    }

    function formatUTCFullYear(d, p) {
      return pad$2(d.getUTCFullYear() % 10000, p, 4);
    }

    function formatUTCFullYearISO(d, p) {
      var day = d.getUTCDay();
      d = (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);
      return pad$2(d.getUTCFullYear() % 10000, p, 4);
    }

    function formatUTCZone() {
      return "+0000";
    }

    function formatLiteralPercent() {
      return "%";
    }

    function formatUnixTimestamp(d) {
      return +d;
    }

    function formatUnixTimestampSeconds(d) {
      return Math.floor(+d / 1000);
    }

    var locale$1;
    var timeFormat;
    var timeParse;
    var utcFormat;
    var utcParse;

    defaultLocale$1({
      dateTime: "%x, %X",
      date: "%-m/%-d/%Y",
      time: "%-I:%M:%S %p",
      periods: ["AM", "PM"],
      days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
      shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    });

    function defaultLocale$1(definition) {
      locale$1 = formatLocale$1(definition);
      timeFormat = locale$1.format;
      timeParse = locale$1.parse;
      utcFormat = locale$1.utcFormat;
      utcParse = locale$1.utcParse;
      return locale$1;
    }

    var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";

    function formatIsoNative(date) {
      return date.toISOString();
    }

    var formatIso = Date.prototype.toISOString
        ? formatIsoNative
        : utcFormat(isoSpecifier);

    function parseIsoNative(string) {
      var date = new Date(string);
      return isNaN(date) ? null : date;
    }

    var parseIso = +new Date("2000-01-01T00:00:00.000Z")
        ? parseIsoNative
        : utcParse(isoSpecifier);

    var durationSecond$1 = 1000,
        durationMinute$1 = durationSecond$1 * 60,
        durationHour$1 = durationMinute$1 * 60,
        durationDay$1 = durationHour$1 * 24,
        durationWeek$1 = durationDay$1 * 7,
        durationMonth = durationDay$1 * 30,
        durationYear = durationDay$1 * 365;

    function date$1(t) {
      return new Date(t);
    }

    function number$3(t) {
      return t instanceof Date ? +t : +new Date(+t);
    }

    function calendar(year, month, week, day, hour, minute, second, millisecond, format) {
      var scale = continuous(),
          invert = scale.invert,
          domain = scale.domain;

      var formatMillisecond = format(".%L"),
          formatSecond = format(":%S"),
          formatMinute = format("%I:%M"),
          formatHour = format("%I %p"),
          formatDay = format("%a %d"),
          formatWeek = format("%b %d"),
          formatMonth = format("%B"),
          formatYear = format("%Y");

      var tickIntervals = [
        [second,  1,      durationSecond$1],
        [second,  5,  5 * durationSecond$1],
        [second, 15, 15 * durationSecond$1],
        [second, 30, 30 * durationSecond$1],
        [minute,  1,      durationMinute$1],
        [minute,  5,  5 * durationMinute$1],
        [minute, 15, 15 * durationMinute$1],
        [minute, 30, 30 * durationMinute$1],
        [  hour,  1,      durationHour$1  ],
        [  hour,  3,  3 * durationHour$1  ],
        [  hour,  6,  6 * durationHour$1  ],
        [  hour, 12, 12 * durationHour$1  ],
        [   day,  1,      durationDay$1   ],
        [   day,  2,  2 * durationDay$1   ],
        [  week,  1,      durationWeek$1  ],
        [ month,  1,      durationMonth ],
        [ month,  3,  3 * durationMonth ],
        [  year,  1,      durationYear  ]
      ];

      function tickFormat(date) {
        return (second(date) < date ? formatMillisecond
            : minute(date) < date ? formatSecond
            : hour(date) < date ? formatMinute
            : day(date) < date ? formatHour
            : month(date) < date ? (week(date) < date ? formatDay : formatWeek)
            : year(date) < date ? formatMonth
            : formatYear)(date);
      }

      function tickInterval(interval, start, stop) {
        if (interval == null) interval = 10;

        // If a desired tick count is specified, pick a reasonable tick interval
        // based on the extent of the domain and a rough estimate of tick size.
        // Otherwise, assume interval is already a time interval and use it.
        if (typeof interval === "number") {
          var target = Math.abs(stop - start) / interval,
              i = bisector(function(i) { return i[2]; }).right(tickIntervals, target),
              step;
          if (i === tickIntervals.length) {
            step = tickStep(start / durationYear, stop / durationYear, interval);
            interval = year;
          } else if (i) {
            i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
            step = i[1];
            interval = i[0];
          } else {
            step = Math.max(tickStep(start, stop, interval), 1);
            interval = millisecond;
          }
          return interval.every(step);
        }

        return interval;
      }

      scale.invert = function(y) {
        return new Date(invert(y));
      };

      scale.domain = function(_) {
        return arguments.length ? domain(Array.from(_, number$3)) : domain().map(date$1);
      };

      scale.ticks = function(interval) {
        var d = domain(),
            t0 = d[0],
            t1 = d[d.length - 1],
            r = t1 < t0,
            t;
        if (r) t = t0, t0 = t1, t1 = t;
        t = tickInterval(interval, t0, t1);
        t = t ? t.range(t0, t1 + 1) : []; // inclusive stop
        return r ? t.reverse() : t;
      };

      scale.tickFormat = function(count, specifier) {
        return specifier == null ? tickFormat : format(specifier);
      };

      scale.nice = function(interval) {
        var d = domain();
        return (interval = tickInterval(interval, d[0], d[d.length - 1]))
            ? domain(nice$1(d, interval))
            : scale;
      };

      scale.copy = function() {
        return copy$4(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));
      };

      return scale;
    }

    function time() {
      return initRange.apply(calendar(year, month, sunday, day, hour, minute, second, millisecond, timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);
    }

    function utcTime() {
      return initRange.apply(calendar(utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, millisecond, utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);
    }

    function transformer$2() {
      var x0 = 0,
          x1 = 1,
          t0,
          t1,
          k10,
          transform,
          interpolator = identity$8,
          clamp = false,
          unknown;

      function scale(x) {
        return isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
      }

      scale.domain = function(_) {
        return arguments.length ? ([x0, x1] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];
      };

      scale.clamp = function(_) {
        return arguments.length ? (clamp = !!_, scale) : clamp;
      };

      scale.interpolator = function(_) {
        return arguments.length ? (interpolator = _, scale) : interpolator;
      };

      function range(interpolate) {
        return function(_) {
          var r0, r1;
          return arguments.length ? ([r0, r1] = _, interpolator = interpolate(r0, r1), scale) : [interpolator(0), interpolator(1)];
        };
      }

      scale.range = range(interpolate);

      scale.rangeRound = range(interpolateRound);

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      return function(t) {
        transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
        return scale;
      };
    }

    function copy$5(source, target) {
      return target
          .domain(source.domain())
          .interpolator(source.interpolator())
          .clamp(source.clamp())
          .unknown(source.unknown());
    }

    function sequential() {
      var scale = linearish(transformer$2()(identity$8));

      scale.copy = function() {
        return copy$5(scale, sequential());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function sequentialLog() {
      var scale = loggish(transformer$2()).domain([1, 10]);

      scale.copy = function() {
        return copy$5(scale, sequentialLog()).base(scale.base());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function sequentialSymlog() {
      var scale = symlogish(transformer$2());

      scale.copy = function() {
        return copy$5(scale, sequentialSymlog()).constant(scale.constant());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function sequentialPow() {
      var scale = powish(transformer$2());

      scale.copy = function() {
        return copy$5(scale, sequentialPow()).exponent(scale.exponent());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function sequentialSqrt() {
      return sequentialPow.apply(null, arguments).exponent(0.5);
    }

    function sequentialQuantile() {
      var domain = [],
          interpolator = identity$8;

      function scale(x) {
        if (!isNaN(x = +x)) return interpolator((bisectRight(domain, x, 1) - 1) / (domain.length - 1));
      }

      scale.domain = function(_) {
        if (!arguments.length) return domain.slice();
        domain = [];
        for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);
        domain.sort(ascending);
        return scale;
      };

      scale.interpolator = function(_) {
        return arguments.length ? (interpolator = _, scale) : interpolator;
      };

      scale.range = function() {
        return domain.map((d, i) => interpolator(i / (domain.length - 1)));
      };

      scale.quantiles = function(n) {
        return Array.from({length: n + 1}, (_, i) => quantile(domain, i / n));
      };

      scale.copy = function() {
        return sequentialQuantile(interpolator).domain(domain);
      };

      return initInterpolator.apply(scale, arguments);
    }

    function transformer$3() {
      var x0 = 0,
          x1 = 0.5,
          x2 = 1,
          s = 1,
          t0,
          t1,
          t2,
          k10,
          k21,
          interpolator = identity$8,
          transform,
          clamp = false,
          unknown;

      function scale(x) {
        return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (s * x < s * t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));
      }

      scale.domain = function(_) {
        return arguments.length ? ([x0, x1, x2] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), t2 = transform(x2 = +x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1, scale) : [x0, x1, x2];
      };

      scale.clamp = function(_) {
        return arguments.length ? (clamp = !!_, scale) : clamp;
      };

      scale.interpolator = function(_) {
        return arguments.length ? (interpolator = _, scale) : interpolator;
      };

      function range(interpolate) {
        return function(_) {
          var r0, r1, r2;
          return arguments.length ? ([r0, r1, r2] = _, interpolator = piecewise(interpolate, [r0, r1, r2]), scale) : [interpolator(0), interpolator(0.5), interpolator(1)];
        };
      }

      scale.range = range(interpolate);

      scale.rangeRound = range(interpolateRound);

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      return function(t) {
        transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1;
        return scale;
      };
    }

    function diverging() {
      var scale = linearish(transformer$3()(identity$8));

      scale.copy = function() {
        return copy$5(scale, diverging());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function divergingLog() {
      var scale = loggish(transformer$3()).domain([0.1, 1, 10]);

      scale.copy = function() {
        return copy$5(scale, divergingLog()).base(scale.base());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function divergingSymlog() {
      var scale = symlogish(transformer$3());

      scale.copy = function() {
        return copy$5(scale, divergingSymlog()).constant(scale.constant());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function divergingPow() {
      var scale = powish(transformer$3());

      scale.copy = function() {
        return copy$5(scale, divergingPow()).exponent(scale.exponent());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function divergingSqrt() {
      return divergingPow.apply(null, arguments).exponent(0.5);
    }

    function colors(specifier) {
      var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;
      while (i < n) colors[i] = "#" + specifier.slice(i * 6, ++i * 6);
      return colors;
    }

    var category10 = colors("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

    var Accent = colors("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

    var Dark2 = colors("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");

    var Paired = colors("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

    var Pastel1 = colors("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");

    var Pastel2 = colors("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");

    var Set1 = colors("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

    var Set2 = colors("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");

    var Set3 = colors("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");

    var Tableau10 = colors("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");

    var ramp = scheme => rgbBasis(scheme[scheme.length - 1]);

    var scheme = new Array(3).concat(
      "d8b365f5f5f55ab4ac",
      "a6611adfc27d80cdc1018571",
      "a6611adfc27df5f5f580cdc1018571",
      "8c510ad8b365f6e8c3c7eae55ab4ac01665e",
      "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e",
      "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e",
      "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e",
      "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30",
      "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30"
    ).map(colors);

    var BrBG = ramp(scheme);

    var scheme$1 = new Array(3).concat(
      "af8dc3f7f7f77fbf7b",
      "7b3294c2a5cfa6dba0008837",
      "7b3294c2a5cff7f7f7a6dba0008837",
      "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837",
      "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837",
      "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837",
      "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837",
      "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b",
      "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b"
    ).map(colors);

    var PRGn = ramp(scheme$1);

    var scheme$2 = new Array(3).concat(
      "e9a3c9f7f7f7a1d76a",
      "d01c8bf1b6dab8e1864dac26",
      "d01c8bf1b6daf7f7f7b8e1864dac26",
      "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221",
      "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221",
      "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221",
      "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221",
      "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419",
      "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419"
    ).map(colors);

    var PiYG = ramp(scheme$2);

    var scheme$3 = new Array(3).concat(
      "998ec3f7f7f7f1a340",
      "5e3c99b2abd2fdb863e66101",
      "5e3c99b2abd2f7f7f7fdb863e66101",
      "542788998ec3d8daebfee0b6f1a340b35806",
      "542788998ec3d8daebf7f7f7fee0b6f1a340b35806",
      "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806",
      "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806",
      "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08",
      "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08"
    ).map(colors);

    var PuOr = ramp(scheme$3);

    var scheme$4 = new Array(3).concat(
      "ef8a62f7f7f767a9cf",
      "ca0020f4a58292c5de0571b0",
      "ca0020f4a582f7f7f792c5de0571b0",
      "b2182bef8a62fddbc7d1e5f067a9cf2166ac",
      "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac",
      "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac",
      "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac",
      "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061",
      "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061"
    ).map(colors);

    var RdBu = ramp(scheme$4);

    var scheme$5 = new Array(3).concat(
      "ef8a62ffffff999999",
      "ca0020f4a582bababa404040",
      "ca0020f4a582ffffffbababa404040",
      "b2182bef8a62fddbc7e0e0e09999994d4d4d",
      "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d",
      "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d",
      "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d",
      "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a",
      "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a"
    ).map(colors);

    var RdGy = ramp(scheme$5);

    var scheme$6 = new Array(3).concat(
      "fc8d59ffffbf91bfdb",
      "d7191cfdae61abd9e92c7bb6",
      "d7191cfdae61ffffbfabd9e92c7bb6",
      "d73027fc8d59fee090e0f3f891bfdb4575b4",
      "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4",
      "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4",
      "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4",
      "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695",
      "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695"
    ).map(colors);

    var RdYlBu = ramp(scheme$6);

    var scheme$7 = new Array(3).concat(
      "fc8d59ffffbf91cf60",
      "d7191cfdae61a6d96a1a9641",
      "d7191cfdae61ffffbfa6d96a1a9641",
      "d73027fc8d59fee08bd9ef8b91cf601a9850",
      "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850",
      "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850",
      "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850",
      "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837",
      "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837"
    ).map(colors);

    var RdYlGn = ramp(scheme$7);

    var scheme$8 = new Array(3).concat(
      "fc8d59ffffbf99d594",
      "d7191cfdae61abdda42b83ba",
      "d7191cfdae61ffffbfabdda42b83ba",
      "d53e4ffc8d59fee08be6f59899d5943288bd",
      "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd",
      "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd",
      "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd",
      "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2",
      "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2"
    ).map(colors);

    var Spectral = ramp(scheme$8);

    var scheme$9 = new Array(3).concat(
      "e5f5f999d8c92ca25f",
      "edf8fbb2e2e266c2a4238b45",
      "edf8fbb2e2e266c2a42ca25f006d2c",
      "edf8fbccece699d8c966c2a42ca25f006d2c",
      "edf8fbccece699d8c966c2a441ae76238b45005824",
      "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824",
      "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b"
    ).map(colors);

    var BuGn = ramp(scheme$9);

    var scheme$a = new Array(3).concat(
      "e0ecf49ebcda8856a7",
      "edf8fbb3cde38c96c688419d",
      "edf8fbb3cde38c96c68856a7810f7c",
      "edf8fbbfd3e69ebcda8c96c68856a7810f7c",
      "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b",
      "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b",
      "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b"
    ).map(colors);

    var BuPu = ramp(scheme$a);

    var scheme$b = new Array(3).concat(
      "e0f3dba8ddb543a2ca",
      "f0f9e8bae4bc7bccc42b8cbe",
      "f0f9e8bae4bc7bccc443a2ca0868ac",
      "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac",
      "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e",
      "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e",
      "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081"
    ).map(colors);

    var GnBu = ramp(scheme$b);

    var scheme$c = new Array(3).concat(
      "fee8c8fdbb84e34a33",
      "fef0d9fdcc8afc8d59d7301f",
      "fef0d9fdcc8afc8d59e34a33b30000",
      "fef0d9fdd49efdbb84fc8d59e34a33b30000",
      "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000",
      "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000",
      "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000"
    ).map(colors);

    var OrRd = ramp(scheme$c);

    var scheme$d = new Array(3).concat(
      "ece2f0a6bddb1c9099",
      "f6eff7bdc9e167a9cf02818a",
      "f6eff7bdc9e167a9cf1c9099016c59",
      "f6eff7d0d1e6a6bddb67a9cf1c9099016c59",
      "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450",
      "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450",
      "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636"
    ).map(colors);

    var PuBuGn = ramp(scheme$d);

    var scheme$e = new Array(3).concat(
      "ece7f2a6bddb2b8cbe",
      "f1eef6bdc9e174a9cf0570b0",
      "f1eef6bdc9e174a9cf2b8cbe045a8d",
      "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d",
      "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b",
      "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b",
      "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858"
    ).map(colors);

    var PuBu = ramp(scheme$e);

    var scheme$f = new Array(3).concat(
      "e7e1efc994c7dd1c77",
      "f1eef6d7b5d8df65b0ce1256",
      "f1eef6d7b5d8df65b0dd1c77980043",
      "f1eef6d4b9dac994c7df65b0dd1c77980043",
      "f1eef6d4b9dac994c7df65b0e7298ace125691003f",
      "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f",
      "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f"
    ).map(colors);

    var PuRd = ramp(scheme$f);

    var scheme$g = new Array(3).concat(
      "fde0ddfa9fb5c51b8a",
      "feebe2fbb4b9f768a1ae017e",
      "feebe2fbb4b9f768a1c51b8a7a0177",
      "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177",
      "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177",
      "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177",
      "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a"
    ).map(colors);

    var RdPu = ramp(scheme$g);

    var scheme$h = new Array(3).concat(
      "edf8b17fcdbb2c7fb8",
      "ffffcca1dab441b6c4225ea8",
      "ffffcca1dab441b6c42c7fb8253494",
      "ffffccc7e9b47fcdbb41b6c42c7fb8253494",
      "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84",
      "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84",
      "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58"
    ).map(colors);

    var YlGnBu = ramp(scheme$h);

    var scheme$i = new Array(3).concat(
      "f7fcb9addd8e31a354",
      "ffffccc2e69978c679238443",
      "ffffccc2e69978c67931a354006837",
      "ffffccd9f0a3addd8e78c67931a354006837",
      "ffffccd9f0a3addd8e78c67941ab5d238443005a32",
      "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32",
      "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529"
    ).map(colors);

    var YlGn = ramp(scheme$i);

    var scheme$j = new Array(3).concat(
      "fff7bcfec44fd95f0e",
      "ffffd4fed98efe9929cc4c02",
      "ffffd4fed98efe9929d95f0e993404",
      "ffffd4fee391fec44ffe9929d95f0e993404",
      "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04",
      "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04",
      "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506"
    ).map(colors);

    var YlOrBr = ramp(scheme$j);

    var scheme$k = new Array(3).concat(
      "ffeda0feb24cf03b20",
      "ffffb2fecc5cfd8d3ce31a1c",
      "ffffb2fecc5cfd8d3cf03b20bd0026",
      "ffffb2fed976feb24cfd8d3cf03b20bd0026",
      "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026",
      "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026",
      "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026"
    ).map(colors);

    var YlOrRd = ramp(scheme$k);

    var scheme$l = new Array(3).concat(
      "deebf79ecae13182bd",
      "eff3ffbdd7e76baed62171b5",
      "eff3ffbdd7e76baed63182bd08519c",
      "eff3ffc6dbef9ecae16baed63182bd08519c",
      "eff3ffc6dbef9ecae16baed64292c62171b5084594",
      "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594",
      "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b"
    ).map(colors);

    var Blues = ramp(scheme$l);

    var scheme$m = new Array(3).concat(
      "e5f5e0a1d99b31a354",
      "edf8e9bae4b374c476238b45",
      "edf8e9bae4b374c47631a354006d2c",
      "edf8e9c7e9c0a1d99b74c47631a354006d2c",
      "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32",
      "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32",
      "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b"
    ).map(colors);

    var Greens = ramp(scheme$m);

    var scheme$n = new Array(3).concat(
      "f0f0f0bdbdbd636363",
      "f7f7f7cccccc969696525252",
      "f7f7f7cccccc969696636363252525",
      "f7f7f7d9d9d9bdbdbd969696636363252525",
      "f7f7f7d9d9d9bdbdbd969696737373525252252525",
      "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525",
      "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000"
    ).map(colors);

    var Greys = ramp(scheme$n);

    var scheme$o = new Array(3).concat(
      "efedf5bcbddc756bb1",
      "f2f0f7cbc9e29e9ac86a51a3",
      "f2f0f7cbc9e29e9ac8756bb154278f",
      "f2f0f7dadaebbcbddc9e9ac8756bb154278f",
      "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486",
      "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486",
      "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d"
    ).map(colors);

    var Purples = ramp(scheme$o);

    var scheme$p = new Array(3).concat(
      "fee0d2fc9272de2d26",
      "fee5d9fcae91fb6a4acb181d",
      "fee5d9fcae91fb6a4ade2d26a50f15",
      "fee5d9fcbba1fc9272fb6a4ade2d26a50f15",
      "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d",
      "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d",
      "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d"
    ).map(colors);

    var Reds = ramp(scheme$p);

    var scheme$q = new Array(3).concat(
      "fee6cefdae6be6550d",
      "feeddefdbe85fd8d3cd94701",
      "feeddefdbe85fd8d3ce6550da63603",
      "feeddefdd0a2fdae6bfd8d3ce6550da63603",
      "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04",
      "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04",
      "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704"
    ).map(colors);

    var Oranges = ramp(scheme$q);

    function cividis(t) {
      t = Math.max(0, Math.min(1, t));
      return "rgb("
          + Math.max(0, Math.min(255, Math.round(-4.54 - t * (35.34 - t * (2381.73 - t * (6402.7 - t * (7024.72 - t * 2710.57))))))) + ", "
          + Math.max(0, Math.min(255, Math.round(32.49 + t * (170.73 + t * (52.82 - t * (131.46 - t * (176.58 - t * 67.37))))))) + ", "
          + Math.max(0, Math.min(255, Math.round(81.24 + t * (442.36 - t * (2482.43 - t * (6167.24 - t * (6614.94 - t * 2475.67)))))))
          + ")";
    }

    var cubehelix$3 = cubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));

    var warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));

    var cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));

    var c$1 = cubehelix();

    function rainbow(t) {
      if (t < 0 || t > 1) t -= Math.floor(t);
      var ts = Math.abs(t - 0.5);
      c$1.h = 360 * t - 100;
      c$1.s = 1.5 - 1.5 * ts;
      c$1.l = 0.8 - 0.9 * ts;
      return c$1 + "";
    }

    var c$2 = rgb(),
        pi_1_3 = Math.PI / 3,
        pi_2_3 = Math.PI * 2 / 3;

    function sinebow(t) {
      var x;
      t = (0.5 - t) * Math.PI;
      c$2.r = 255 * (x = Math.sin(t)) * x;
      c$2.g = 255 * (x = Math.sin(t + pi_1_3)) * x;
      c$2.b = 255 * (x = Math.sin(t + pi_2_3)) * x;
      return c$2 + "";
    }

    function turbo(t) {
      t = Math.max(0, Math.min(1, t));
      return "rgb("
          + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + ", "
          + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + ", "
          + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66)))))))
          + ")";
    }

    function ramp$1(range) {
      var n = range.length;
      return function(t) {
        return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
      };
    }

    var viridis = ramp$1(colors("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));

    var magma = ramp$1(colors("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));

    var inferno = ramp$1(colors("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));

    var plasma = ramp$1(colors("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

    function constant$a(x) {
      return function constant() {
        return x;
      };
    }

    var abs$3 = Math.abs;
    var atan2$1 = Math.atan2;
    var cos$2 = Math.cos;
    var max$4 = Math.max;
    var min$3 = Math.min;
    var sin$2 = Math.sin;
    var sqrt$2 = Math.sqrt;

    var epsilon$5 = 1e-12;
    var pi$4 = Math.PI;
    var halfPi$3 = pi$4 / 2;
    var tau$5 = 2 * pi$4;

    function acos$1(x) {
      return x > 1 ? 0 : x < -1 ? pi$4 : Math.acos(x);
    }

    function asin$1(x) {
      return x >= 1 ? halfPi$3 : x <= -1 ? -halfPi$3 : Math.asin(x);
    }

    function arcInnerRadius(d) {
      return d.innerRadius;
    }

    function arcOuterRadius(d) {
      return d.outerRadius;
    }

    function arcStartAngle(d) {
      return d.startAngle;
    }

    function arcEndAngle(d) {
      return d.endAngle;
    }

    function arcPadAngle(d) {
      return d && d.padAngle; // Note: optional!
    }

    function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
      var x10 = x1 - x0, y10 = y1 - y0,
          x32 = x3 - x2, y32 = y3 - y2,
          t = y32 * x10 - x32 * y10;
      if (t * t < epsilon$5) return;
      t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
      return [x0 + t * x10, y0 + t * y10];
    }

    // Compute perpendicular offset line of length rc.
    // http://mathworld.wolfram.com/Circle-LineIntersection.html
    function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
      var x01 = x0 - x1,
          y01 = y0 - y1,
          lo = (cw ? rc : -rc) / sqrt$2(x01 * x01 + y01 * y01),
          ox = lo * y01,
          oy = -lo * x01,
          x11 = x0 + ox,
          y11 = y0 + oy,
          x10 = x1 + ox,
          y10 = y1 + oy,
          x00 = (x11 + x10) / 2,
          y00 = (y11 + y10) / 2,
          dx = x10 - x11,
          dy = y10 - y11,
          d2 = dx * dx + dy * dy,
          r = r1 - rc,
          D = x11 * y10 - x10 * y11,
          d = (dy < 0 ? -1 : 1) * sqrt$2(max$4(0, r * r * d2 - D * D)),
          cx0 = (D * dy - dx * d) / d2,
          cy0 = (-D * dx - dy * d) / d2,
          cx1 = (D * dy + dx * d) / d2,
          cy1 = (-D * dx + dy * d) / d2,
          dx0 = cx0 - x00,
          dy0 = cy0 - y00,
          dx1 = cx1 - x00,
          dy1 = cy1 - y00;

      // Pick the closer of the two intersection points.
      // TODO Is there a faster way to determine which intersection to use?
      if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;

      return {
        cx: cx0,
        cy: cy0,
        x01: -ox,
        y01: -oy,
        x11: cx0 * (r1 / r - 1),
        y11: cy0 * (r1 / r - 1)
      };
    }

    function arc() {
      var innerRadius = arcInnerRadius,
          outerRadius = arcOuterRadius,
          cornerRadius = constant$a(0),
          padRadius = null,
          startAngle = arcStartAngle,
          endAngle = arcEndAngle,
          padAngle = arcPadAngle,
          context = null;

      function arc() {
        var buffer,
            r,
            r0 = +innerRadius.apply(this, arguments),
            r1 = +outerRadius.apply(this, arguments),
            a0 = startAngle.apply(this, arguments) - halfPi$3,
            a1 = endAngle.apply(this, arguments) - halfPi$3,
            da = abs$3(a1 - a0),
            cw = a1 > a0;

        if (!context) context = buffer = path();

        // Ensure that the outer radius is always larger than the inner radius.
        if (r1 < r0) r = r1, r1 = r0, r0 = r;

        // Is it a point?
        if (!(r1 > epsilon$5)) context.moveTo(0, 0);

        // Or is it a circle or annulus?
        else if (da > tau$5 - epsilon$5) {
          context.moveTo(r1 * cos$2(a0), r1 * sin$2(a0));
          context.arc(0, 0, r1, a0, a1, !cw);
          if (r0 > epsilon$5) {
            context.moveTo(r0 * cos$2(a1), r0 * sin$2(a1));
            context.arc(0, 0, r0, a1, a0, cw);
          }
        }

        // Or is it a circular or annular sector?
        else {
          var a01 = a0,
              a11 = a1,
              a00 = a0,
              a10 = a1,
              da0 = da,
              da1 = da,
              ap = padAngle.apply(this, arguments) / 2,
              rp = (ap > epsilon$5) && (padRadius ? +padRadius.apply(this, arguments) : sqrt$2(r0 * r0 + r1 * r1)),
              rc = min$3(abs$3(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
              rc0 = rc,
              rc1 = rc,
              t0,
              t1;

          // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
          if (rp > epsilon$5) {
            var p0 = asin$1(rp / r0 * sin$2(ap)),
                p1 = asin$1(rp / r1 * sin$2(ap));
            if ((da0 -= p0 * 2) > epsilon$5) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;
            else da0 = 0, a00 = a10 = (a0 + a1) / 2;
            if ((da1 -= p1 * 2) > epsilon$5) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;
            else da1 = 0, a01 = a11 = (a0 + a1) / 2;
          }

          var x01 = r1 * cos$2(a01),
              y01 = r1 * sin$2(a01),
              x10 = r0 * cos$2(a10),
              y10 = r0 * sin$2(a10);

          // Apply rounded corners?
          if (rc > epsilon$5) {
            var x11 = r1 * cos$2(a11),
                y11 = r1 * sin$2(a11),
                x00 = r0 * cos$2(a00),
                y00 = r0 * sin$2(a00),
                oc;

            // Restrict the corner radius according to the sector angle.
            if (da < pi$4 && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
              var ax = x01 - oc[0],
                  ay = y01 - oc[1],
                  bx = x11 - oc[0],
                  by = y11 - oc[1],
                  kc = 1 / sin$2(acos$1((ax * bx + ay * by) / (sqrt$2(ax * ax + ay * ay) * sqrt$2(bx * bx + by * by))) / 2),
                  lc = sqrt$2(oc[0] * oc[0] + oc[1] * oc[1]);
              rc0 = min$3(rc, (r0 - lc) / (kc - 1));
              rc1 = min$3(rc, (r1 - lc) / (kc + 1));
            }
          }

          // Is the sector collapsed to a line?
          if (!(da1 > epsilon$5)) context.moveTo(x01, y01);

          // Does the sector’s outer ring have rounded corners?
          else if (rc1 > epsilon$5) {
            t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
            t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);

            context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);

            // Have the corners merged?
            if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2$1(t0.y01, t0.x01), atan2$1(t1.y01, t1.x01), !cw);

            // Otherwise, draw the two corners and the ring.
            else {
              context.arc(t0.cx, t0.cy, rc1, atan2$1(t0.y01, t0.x01), atan2$1(t0.y11, t0.x11), !cw);
              context.arc(0, 0, r1, atan2$1(t0.cy + t0.y11, t0.cx + t0.x11), atan2$1(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
              context.arc(t1.cx, t1.cy, rc1, atan2$1(t1.y11, t1.x11), atan2$1(t1.y01, t1.x01), !cw);
            }
          }

          // Or is the outer ring just a circular arc?
          else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);

          // Is there no inner ring, and it’s a circular sector?
          // Or perhaps it’s an annular sector collapsed due to padding?
          if (!(r0 > epsilon$5) || !(da0 > epsilon$5)) context.lineTo(x10, y10);

          // Does the sector’s inner ring (or point) have rounded corners?
          else if (rc0 > epsilon$5) {
            t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
            t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);

            context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);

            // Have the corners merged?
            if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2$1(t0.y01, t0.x01), atan2$1(t1.y01, t1.x01), !cw);

            // Otherwise, draw the two corners and the ring.
            else {
              context.arc(t0.cx, t0.cy, rc0, atan2$1(t0.y01, t0.x01), atan2$1(t0.y11, t0.x11), !cw);
              context.arc(0, 0, r0, atan2$1(t0.cy + t0.y11, t0.cx + t0.x11), atan2$1(t1.cy + t1.y11, t1.cx + t1.x11), cw);
              context.arc(t1.cx, t1.cy, rc0, atan2$1(t1.y11, t1.x11), atan2$1(t1.y01, t1.x01), !cw);
            }
          }

          // Or is the inner ring just a circular arc?
          else context.arc(0, 0, r0, a10, a00, cw);
        }

        context.closePath();

        if (buffer) return context = null, buffer + "" || null;
      }

      arc.centroid = function() {
        var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
            a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$4 / 2;
        return [cos$2(a) * r, sin$2(a) * r];
      };

      arc.innerRadius = function(_) {
        return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant$a(+_), arc) : innerRadius;
      };

      arc.outerRadius = function(_) {
        return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant$a(+_), arc) : outerRadius;
      };

      arc.cornerRadius = function(_) {
        return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant$a(+_), arc) : cornerRadius;
      };

      arc.padRadius = function(_) {
        return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant$a(+_), arc) : padRadius;
      };

      arc.startAngle = function(_) {
        return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$a(+_), arc) : startAngle;
      };

      arc.endAngle = function(_) {
        return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$a(+_), arc) : endAngle;
      };

      arc.padAngle = function(_) {
        return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$a(+_), arc) : padAngle;
      };

      arc.context = function(_) {
        return arguments.length ? ((context = _ == null ? null : _), arc) : context;
      };

      return arc;
    }

    var slice$4 = Array.prototype.slice;

    function array$5(x) {
      return typeof x === "object" && "length" in x
        ? x // Array, TypedArray, NodeList, array-like
        : Array.from(x); // Map, Set, iterable, string, or anything else
    }

    function Linear(context) {
      this._context = context;
    }

    Linear.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; // proceed
          default: this._context.lineTo(x, y); break;
        }
      }
    };

    function curveLinear(context) {
      return new Linear(context);
    }

    function x$3(p) {
      return p[0];
    }

    function y$3(p) {
      return p[1];
    }

    function line(x, y) {
      var defined = constant$a(true),
          context = null,
          curve = curveLinear,
          output = null;

      x = typeof x === "function" ? x : (x === undefined) ? x$3 : constant$a(x);
      y = typeof y === "function" ? y : (y === undefined) ? y$3 : constant$a(y);

      function line(data) {
        var i,
            n = (data = array$5(data)).length,
            d,
            defined0 = false,
            buffer;

        if (context == null) output = curve(buffer = path());

        for (i = 0; i <= n; ++i) {
          if (!(i < n && defined(d = data[i], i, data)) === defined0) {
            if (defined0 = !defined0) output.lineStart();
            else output.lineEnd();
          }
          if (defined0) output.point(+x(d, i, data), +y(d, i, data));
        }

        if (buffer) return output = null, buffer + "" || null;
      }

      line.x = function(_) {
        return arguments.length ? (x = typeof _ === "function" ? _ : constant$a(+_), line) : x;
      };

      line.y = function(_) {
        return arguments.length ? (y = typeof _ === "function" ? _ : constant$a(+_), line) : y;
      };

      line.defined = function(_) {
        return arguments.length ? (defined = typeof _ === "function" ? _ : constant$a(!!_), line) : defined;
      };

      line.curve = function(_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
      };

      line.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
      };

      return line;
    }

    function area$3(x0, y0, y1) {
      var x1 = null,
          defined = constant$a(true),
          context = null,
          curve = curveLinear,
          output = null;

      x0 = typeof x0 === "function" ? x0 : (x0 === undefined) ? x$3 : constant$a(+x0);
      y0 = typeof y0 === "function" ? y0 : (y0 === undefined) ? constant$a(0) : constant$a(+y0);
      y1 = typeof y1 === "function" ? y1 : (y1 === undefined) ? y$3 : constant$a(+y1);

      function area(data) {
        var i,
            j,
            k,
            n = (data = array$5(data)).length,
            d,
            defined0 = false,
            buffer,
            x0z = new Array(n),
            y0z = new Array(n);

        if (context == null) output = curve(buffer = path());

        for (i = 0; i <= n; ++i) {
          if (!(i < n && defined(d = data[i], i, data)) === defined0) {
            if (defined0 = !defined0) {
              j = i;
              output.areaStart();
              output.lineStart();
            } else {
              output.lineEnd();
              output.lineStart();
              for (k = i - 1; k >= j; --k) {
                output.point(x0z[k], y0z[k]);
              }
              output.lineEnd();
              output.areaEnd();
            }
          }
          if (defined0) {
            x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
            output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
          }
        }

        if (buffer) return output = null, buffer + "" || null;
      }

      function arealine() {
        return line().defined(defined).curve(curve).context(context);
      }

      area.x = function(_) {
        return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$a(+_), x1 = null, area) : x0;
      };

      area.x0 = function(_) {
        return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$a(+_), area) : x0;
      };

      area.x1 = function(_) {
        return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant$a(+_), area) : x1;
      };

      area.y = function(_) {
        return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$a(+_), y1 = null, area) : y0;
      };

      area.y0 = function(_) {
        return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$a(+_), area) : y0;
      };

      area.y1 = function(_) {
        return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant$a(+_), area) : y1;
      };

      area.lineX0 =
      area.lineY0 = function() {
        return arealine().x(x0).y(y0);
      };

      area.lineY1 = function() {
        return arealine().x(x0).y(y1);
      };

      area.lineX1 = function() {
        return arealine().x(x1).y(y0);
      };

      area.defined = function(_) {
        return arguments.length ? (defined = typeof _ === "function" ? _ : constant$a(!!_), area) : defined;
      };

      area.curve = function(_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
      };

      area.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
      };

      return area;
    }

    function descending$1(a, b) {
      return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
    }

    function identity$a(d) {
      return d;
    }

    function pie() {
      var value = identity$a,
          sortValues = descending$1,
          sort = null,
          startAngle = constant$a(0),
          endAngle = constant$a(tau$5),
          padAngle = constant$a(0);

      function pie(data) {
        var i,
            n = (data = array$5(data)).length,
            j,
            k,
            sum = 0,
            index = new Array(n),
            arcs = new Array(n),
            a0 = +startAngle.apply(this, arguments),
            da = Math.min(tau$5, Math.max(-tau$5, endAngle.apply(this, arguments) - a0)),
            a1,
            p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
            pa = p * (da < 0 ? -1 : 1),
            v;

        for (i = 0; i < n; ++i) {
          if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
            sum += v;
          }
        }

        // Optionally sort the arcs by previously-computed values or by data.
        if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });
        else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });

        // Compute the arcs! They are stored in the original data's order.
        for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
          j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
            data: data[j],
            index: i,
            value: v,
            startAngle: a0,
            endAngle: a1,
            padAngle: p
          };
        }

        return arcs;
      }

      pie.value = function(_) {
        return arguments.length ? (value = typeof _ === "function" ? _ : constant$a(+_), pie) : value;
      };

      pie.sortValues = function(_) {
        return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
      };

      pie.sort = function(_) {
        return arguments.length ? (sort = _, sortValues = null, pie) : sort;
      };

      pie.startAngle = function(_) {
        return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$a(+_), pie) : startAngle;
      };

      pie.endAngle = function(_) {
        return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$a(+_), pie) : endAngle;
      };

      pie.padAngle = function(_) {
        return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$a(+_), pie) : padAngle;
      };

      return pie;
    }

    var curveRadialLinear = curveRadial(curveLinear);

    function Radial(curve) {
      this._curve = curve;
    }

    Radial.prototype = {
      areaStart: function() {
        this._curve.areaStart();
      },
      areaEnd: function() {
        this._curve.areaEnd();
      },
      lineStart: function() {
        this._curve.lineStart();
      },
      lineEnd: function() {
        this._curve.lineEnd();
      },
      point: function(a, r) {
        this._curve.point(r * Math.sin(a), r * -Math.cos(a));
      }
    };

    function curveRadial(curve) {

      function radial(context) {
        return new Radial(curve(context));
      }

      radial._curve = curve;

      return radial;
    }

    function lineRadial(l) {
      var c = l.curve;

      l.angle = l.x, delete l.x;
      l.radius = l.y, delete l.y;

      l.curve = function(_) {
        return arguments.length ? c(curveRadial(_)) : c()._curve;
      };

      return l;
    }

    function lineRadial$1() {
      return lineRadial(line().curve(curveRadialLinear));
    }

    function areaRadial() {
      var a = area$3().curve(curveRadialLinear),
          c = a.curve,
          x0 = a.lineX0,
          x1 = a.lineX1,
          y0 = a.lineY0,
          y1 = a.lineY1;

      a.angle = a.x, delete a.x;
      a.startAngle = a.x0, delete a.x0;
      a.endAngle = a.x1, delete a.x1;
      a.radius = a.y, delete a.y;
      a.innerRadius = a.y0, delete a.y0;
      a.outerRadius = a.y1, delete a.y1;
      a.lineStartAngle = function() { return lineRadial(x0()); }, delete a.lineX0;
      a.lineEndAngle = function() { return lineRadial(x1()); }, delete a.lineX1;
      a.lineInnerRadius = function() { return lineRadial(y0()); }, delete a.lineY0;
      a.lineOuterRadius = function() { return lineRadial(y1()); }, delete a.lineY1;

      a.curve = function(_) {
        return arguments.length ? c(curveRadial(_)) : c()._curve;
      };

      return a;
    }

    function pointRadial(x, y) {
      return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];
    }

    function linkSource(d) {
      return d.source;
    }

    function linkTarget(d) {
      return d.target;
    }

    function link$2(curve) {
      var source = linkSource,
          target = linkTarget,
          x = x$3,
          y = y$3,
          context = null;

      function link() {
        var buffer, argv = slice$4.call(arguments), s = source.apply(this, argv), t = target.apply(this, argv);
        if (!context) context = buffer = path();
        curve(context, +x.apply(this, (argv[0] = s, argv)), +y.apply(this, argv), +x.apply(this, (argv[0] = t, argv)), +y.apply(this, argv));
        if (buffer) return context = null, buffer + "" || null;
      }

      link.source = function(_) {
        return arguments.length ? (source = _, link) : source;
      };

      link.target = function(_) {
        return arguments.length ? (target = _, link) : target;
      };

      link.x = function(_) {
        return arguments.length ? (x = typeof _ === "function" ? _ : constant$a(+_), link) : x;
      };

      link.y = function(_) {
        return arguments.length ? (y = typeof _ === "function" ? _ : constant$a(+_), link) : y;
      };

      link.context = function(_) {
        return arguments.length ? ((context = _ == null ? null : _), link) : context;
      };

      return link;
    }

    function curveHorizontal(context, x0, y0, x1, y1) {
      context.moveTo(x0, y0);
      context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);
    }

    function curveVertical(context, x0, y0, x1, y1) {
      context.moveTo(x0, y0);
      context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);
    }

    function curveRadial$1(context, x0, y0, x1, y1) {
      var p0 = pointRadial(x0, y0),
          p1 = pointRadial(x0, y0 = (y0 + y1) / 2),
          p2 = pointRadial(x1, y0),
          p3 = pointRadial(x1, y1);
      context.moveTo(p0[0], p0[1]);
      context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);
    }

    function linkHorizontal() {
      return link$2(curveHorizontal);
    }

    function linkVertical() {
      return link$2(curveVertical);
    }

    function linkRadial() {
      var l = link$2(curveRadial$1);
      l.angle = l.x, delete l.x;
      l.radius = l.y, delete l.y;
      return l;
    }

    var circle$2 = {
      draw: function(context, size) {
        var r = Math.sqrt(size / pi$4);
        context.moveTo(r, 0);
        context.arc(0, 0, r, 0, tau$5);
      }
    };

    var cross$3 = {
      draw: function(context, size) {
        var r = Math.sqrt(size / 5) / 2;
        context.moveTo(-3 * r, -r);
        context.lineTo(-r, -r);
        context.lineTo(-r, -3 * r);
        context.lineTo(r, -3 * r);
        context.lineTo(r, -r);
        context.lineTo(3 * r, -r);
        context.lineTo(3 * r, r);
        context.lineTo(r, r);
        context.lineTo(r, 3 * r);
        context.lineTo(-r, 3 * r);
        context.lineTo(-r, r);
        context.lineTo(-3 * r, r);
        context.closePath();
      }
    };

    var tan30 = Math.sqrt(1 / 3),
        tan30_2 = tan30 * 2;

    var diamond = {
      draw: function(context, size) {
        var y = Math.sqrt(size / tan30_2),
            x = y * tan30;
        context.moveTo(0, -y);
        context.lineTo(x, 0);
        context.lineTo(0, y);
        context.lineTo(-x, 0);
        context.closePath();
      }
    };

    var ka = 0.89081309152928522810,
        kr = Math.sin(pi$4 / 10) / Math.sin(7 * pi$4 / 10),
        kx = Math.sin(tau$5 / 10) * kr,
        ky = -Math.cos(tau$5 / 10) * kr;

    var star = {
      draw: function(context, size) {
        var r = Math.sqrt(size * ka),
            x = kx * r,
            y = ky * r;
        context.moveTo(0, -r);
        context.lineTo(x, y);
        for (var i = 1; i < 5; ++i) {
          var a = tau$5 * i / 5,
              c = Math.cos(a),
              s = Math.sin(a);
          context.lineTo(s * r, -c * r);
          context.lineTo(c * x - s * y, s * x + c * y);
        }
        context.closePath();
      }
    };

    var square$1 = {
      draw: function(context, size) {
        var w = Math.sqrt(size),
            x = -w / 2;
        context.rect(x, x, w, w);
      }
    };

    var sqrt3 = Math.sqrt(3);

    var triangle = {
      draw: function(context, size) {
        var y = -Math.sqrt(size / (sqrt3 * 3));
        context.moveTo(0, y * 2);
        context.lineTo(-sqrt3 * y, -y);
        context.lineTo(sqrt3 * y, -y);
        context.closePath();
      }
    };

    var c$3 = -0.5,
        s = Math.sqrt(3) / 2,
        k = 1 / Math.sqrt(12),
        a$1 = (k / 2 + 1) * 3;

    var wye = {
      draw: function(context, size) {
        var r = Math.sqrt(size / a$1),
            x0 = r / 2,
            y0 = r * k,
            x1 = x0,
            y1 = r * k + r,
            x2 = -x1,
            y2 = y1;
        context.moveTo(x0, y0);
        context.lineTo(x1, y1);
        context.lineTo(x2, y2);
        context.lineTo(c$3 * x0 - s * y0, s * x0 + c$3 * y0);
        context.lineTo(c$3 * x1 - s * y1, s * x1 + c$3 * y1);
        context.lineTo(c$3 * x2 - s * y2, s * x2 + c$3 * y2);
        context.lineTo(c$3 * x0 + s * y0, c$3 * y0 - s * x0);
        context.lineTo(c$3 * x1 + s * y1, c$3 * y1 - s * x1);
        context.lineTo(c$3 * x2 + s * y2, c$3 * y2 - s * x2);
        context.closePath();
      }
    };

    var symbols = [
      circle$2,
      cross$3,
      diamond,
      square$1,
      star,
      triangle,
      wye
    ];

    function symbol(type, size) {
      var context = null;
      type = typeof type === "function" ? type : constant$a(type || circle$2);
      size = typeof size === "function" ? size : constant$a(size === undefined ? 64 : +size);

      function symbol() {
        var buffer;
        if (!context) context = buffer = path();
        type.apply(this, arguments).draw(context, +size.apply(this, arguments));
        if (buffer) return context = null, buffer + "" || null;
      }

      symbol.type = function(_) {
        return arguments.length ? (type = typeof _ === "function" ? _ : constant$a(_), symbol) : type;
      };

      symbol.size = function(_) {
        return arguments.length ? (size = typeof _ === "function" ? _ : constant$a(+_), symbol) : size;
      };

      symbol.context = function(_) {
        return arguments.length ? (context = _ == null ? null : _, symbol) : context;
      };

      return symbol;
    }

    function noop$4() {}

    function point$1(that, x, y) {
      that._context.bezierCurveTo(
        (2 * that._x0 + that._x1) / 3,
        (2 * that._y0 + that._y1) / 3,
        (that._x0 + 2 * that._x1) / 3,
        (that._y0 + 2 * that._y1) / 3,
        (that._x0 + 4 * that._x1 + x) / 6,
        (that._y0 + 4 * that._y1 + y) / 6
      );
    }

    function Basis(context) {
      this._context = context;
    }

    Basis.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 =
        this._y0 = this._y1 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 3: point$1(this, this._x1, this._y1); // proceed
          case 2: this._context.lineTo(this._x1, this._y1); break;
        }
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; break;
          case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed
          default: point$1(this, x, y); break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
      }
    };

    function basis$2(context) {
      return new Basis(context);
    }

    function BasisClosed(context) {
      this._context = context;
    }

    BasisClosed.prototype = {
      areaStart: noop$4,
      areaEnd: noop$4,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =
        this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x2, this._y2);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
            this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x2, this._y2);
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            break;
          }
        }
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._x2 = x, this._y2 = y; break;
          case 1: this._point = 2; this._x3 = x, this._y3 = y; break;
          case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;
          default: point$1(this, x, y); break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
      }
    };

    function basisClosed$1(context) {
      return new BasisClosed(context);
    }

    function BasisOpen(context) {
      this._context = context;
    }

    BasisOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 =
        this._y0 = this._y1 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; break;
          case 1: this._point = 2; break;
          case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;
          case 3: this._point = 4; // proceed
          default: point$1(this, x, y); break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
      }
    };

    function basisOpen(context) {
      return new BasisOpen(context);
    }

    function Bundle(context, beta) {
      this._basis = new Basis(context);
      this._beta = beta;
    }

    Bundle.prototype = {
      lineStart: function() {
        this._x = [];
        this._y = [];
        this._basis.lineStart();
      },
      lineEnd: function() {
        var x = this._x,
            y = this._y,
            j = x.length - 1;

        if (j > 0) {
          var x0 = x[0],
              y0 = y[0],
              dx = x[j] - x0,
              dy = y[j] - y0,
              i = -1,
              t;

          while (++i <= j) {
            t = i / j;
            this._basis.point(
              this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),
              this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)
            );
          }
        }

        this._x = this._y = null;
        this._basis.lineEnd();
      },
      point: function(x, y) {
        this._x.push(+x);
        this._y.push(+y);
      }
    };

    var bundle = (function custom(beta) {

      function bundle(context) {
        return beta === 1 ? new Basis(context) : new Bundle(context, beta);
      }

      bundle.beta = function(beta) {
        return custom(+beta);
      };

      return bundle;
    })(0.85);

    function point$2(that, x, y) {
      that._context.bezierCurveTo(
        that._x1 + that._k * (that._x2 - that._x0),
        that._y1 + that._k * (that._y2 - that._y0),
        that._x2 + that._k * (that._x1 - x),
        that._y2 + that._k * (that._y1 - y),
        that._x2,
        that._y2
      );
    }

    function Cardinal(context, tension) {
      this._context = context;
      this._k = (1 - tension) / 6;
    }

    Cardinal.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 =
        this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2: this._context.lineTo(this._x2, this._y2); break;
          case 3: point$2(this, this._x1, this._y1); break;
        }
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; this._x1 = x, this._y1 = y; break;
          case 2: this._point = 3; // proceed
          default: point$2(this, x, y); break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
      }
    };

    var cardinal = (function custom(tension) {

      function cardinal(context) {
        return new Cardinal(context, tension);
      }

      cardinal.tension = function(tension) {
        return custom(+tension);
      };

      return cardinal;
    })(0);

    function CardinalClosed(context, tension) {
      this._context = context;
      this._k = (1 - tension) / 6;
    }

    CardinalClosed.prototype = {
      areaStart: noop$4,
      areaEnd: noop$4,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
        this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.lineTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            this.point(this._x5, this._y5);
            break;
          }
        }
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
          case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
          case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
          default: point$2(this, x, y); break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
      }
    };

    var cardinalClosed = (function custom(tension) {

      function cardinal(context) {
        return new CardinalClosed(context, tension);
      }

      cardinal.tension = function(tension) {
        return custom(+tension);
      };

      return cardinal;
    })(0);

    function CardinalOpen(context, tension) {
      this._context = context;
      this._k = (1 - tension) / 6;
    }

    CardinalOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 =
        this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; break;
          case 1: this._point = 2; break;
          case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
          case 3: this._point = 4; // proceed
          default: point$2(this, x, y); break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
      }
    };

    var cardinalOpen = (function custom(tension) {

      function cardinal(context) {
        return new CardinalOpen(context, tension);
      }

      cardinal.tension = function(tension) {
        return custom(+tension);
      };

      return cardinal;
    })(0);

    function point$3(that, x, y) {
      var x1 = that._x1,
          y1 = that._y1,
          x2 = that._x2,
          y2 = that._y2;

      if (that._l01_a > epsilon$5) {
        var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
            n = 3 * that._l01_a * (that._l01_a + that._l12_a);
        x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
        y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
      }

      if (that._l23_a > epsilon$5) {
        var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
            m = 3 * that._l23_a * (that._l23_a + that._l12_a);
        x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
        y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
      }

      that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
    }

    function CatmullRom(context, alpha) {
      this._context = context;
      this._alpha = alpha;
    }

    CatmullRom.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 =
        this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a =
        this._l01_2a = this._l12_2a = this._l23_2a =
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2: this._context.lineTo(this._x2, this._y2); break;
          case 3: this.point(this._x2, this._y2); break;
        }
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;

        if (this._point) {
          var x23 = this._x2 - x,
              y23 = this._y2 - y;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }

        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; break;
          case 2: this._point = 3; // proceed
          default: point$3(this, x, y); break;
        }

        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
      }
    };

    var catmullRom = (function custom(alpha) {

      function catmullRom(context) {
        return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
      }

      catmullRom.alpha = function(alpha) {
        return custom(+alpha);
      };

      return catmullRom;
    })(0.5);

    function CatmullRomClosed(context, alpha) {
      this._context = context;
      this._alpha = alpha;
    }

    CatmullRomClosed.prototype = {
      areaStart: noop$4,
      areaEnd: noop$4,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
        this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._l01_a = this._l12_a = this._l23_a =
        this._l01_2a = this._l12_2a = this._l23_2a =
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.lineTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            this.point(this._x5, this._y5);
            break;
          }
        }
      },
      point: function(x, y) {
        x = +x, y = +y;

        if (this._point) {
          var x23 = this._x2 - x,
              y23 = this._y2 - y;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }

        switch (this._point) {
          case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
          case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
          case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
          default: point$3(this, x, y); break;
        }

        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
      }
    };

    var catmullRomClosed = (function custom(alpha) {

      function catmullRom(context) {
        return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
      }

      catmullRom.alpha = function(alpha) {
        return custom(+alpha);
      };

      return catmullRom;
    })(0.5);

    function CatmullRomOpen(context, alpha) {
      this._context = context;
      this._alpha = alpha;
    }

    CatmullRomOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 =
        this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a =
        this._l01_2a = this._l12_2a = this._l23_2a =
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;

        if (this._point) {
          var x23 = this._x2 - x,
              y23 = this._y2 - y;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }

        switch (this._point) {
          case 0: this._point = 1; break;
          case 1: this._point = 2; break;
          case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
          case 3: this._point = 4; // proceed
          default: point$3(this, x, y); break;
        }

        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
      }
    };

    var catmullRomOpen = (function custom(alpha) {

      function catmullRom(context) {
        return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
      }

      catmullRom.alpha = function(alpha) {
        return custom(+alpha);
      };

      return catmullRom;
    })(0.5);

    function LinearClosed(context) {
      this._context = context;
    }

    LinearClosed.prototype = {
      areaStart: noop$4,
      areaEnd: noop$4,
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._point) this._context.closePath();
      },
      point: function(x, y) {
        x = +x, y = +y;
        if (this._point) this._context.lineTo(x, y);
        else this._point = 1, this._context.moveTo(x, y);
      }
    };

    function linearClosed(context) {
      return new LinearClosed(context);
    }

    function sign$1(x) {
      return x < 0 ? -1 : 1;
    }

    // Calculate the slopes of the tangents (Hermite-type interpolation) based on
    // the following paper: Steffen, M. 1990. A Simple Method for Monotonic
    // Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
    // NOV(II), P. 443, 1990.
    function slope3(that, x2, y2) {
      var h0 = that._x1 - that._x0,
          h1 = x2 - that._x1,
          s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
          s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
          p = (s0 * h1 + s1 * h0) / (h0 + h1);
      return (sign$1(s0) + sign$1(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
    }

    // Calculate a one-sided slope.
    function slope2(that, t) {
      var h = that._x1 - that._x0;
      return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
    }

    // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
    // "you can express cubic Hermite interpolation in terms of cubic Bézier curves
    // with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
    function point$4(that, t0, t1) {
      var x0 = that._x0,
          y0 = that._y0,
          x1 = that._x1,
          y1 = that._y1,
          dx = (x1 - x0) / 3;
      that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
    }

    function MonotoneX(context) {
      this._context = context;
    }

    MonotoneX.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 =
        this._y0 = this._y1 =
        this._t0 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2: this._context.lineTo(this._x1, this._y1); break;
          case 3: point$4(this, this._t0, slope2(this, this._t0)); break;
        }
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        var t1 = NaN;

        x = +x, y = +y;
        if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; break;
          case 2: this._point = 3; point$4(this, slope2(this, t1 = slope3(this, x, y)), t1); break;
          default: point$4(this, this._t0, t1 = slope3(this, x, y)); break;
        }

        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
        this._t0 = t1;
      }
    };

    function MonotoneY(context) {
      this._context = new ReflectContext(context);
    }

    (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {
      MonotoneX.prototype.point.call(this, y, x);
    };

    function ReflectContext(context) {
      this._context = context;
    }

    ReflectContext.prototype = {
      moveTo: function(x, y) { this._context.moveTo(y, x); },
      closePath: function() { this._context.closePath(); },
      lineTo: function(x, y) { this._context.lineTo(y, x); },
      bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }
    };

    function monotoneX(context) {
      return new MonotoneX(context);
    }

    function monotoneY(context) {
      return new MonotoneY(context);
    }

    function Natural(context) {
      this._context = context;
    }

    Natural.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x = [];
        this._y = [];
      },
      lineEnd: function() {
        var x = this._x,
            y = this._y,
            n = x.length;

        if (n) {
          this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
          if (n === 2) {
            this._context.lineTo(x[1], y[1]);
          } else {
            var px = controlPoints(x),
                py = controlPoints(y);
            for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
              this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
            }
          }
        }

        if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();
        this._line = 1 - this._line;
        this._x = this._y = null;
      },
      point: function(x, y) {
        this._x.push(+x);
        this._y.push(+y);
      }
    };

    // See https://www.particleincell.com/2012/bezier-splines/ for derivation.
    function controlPoints(x) {
      var i,
          n = x.length - 1,
          m,
          a = new Array(n),
          b = new Array(n),
          r = new Array(n);
      a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
      for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
      a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
      for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
      a[n - 1] = r[n - 1] / b[n - 1];
      for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];
      b[n - 1] = (x[n] + a[n - 1]) / 2;
      for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];
      return [a, b];
    }

    function natural(context) {
      return new Natural(context);
    }

    function Step(context, t) {
      this._context = context;
      this._t = t;
    }

    Step.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x = this._y = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; // proceed
          default: {
            if (this._t <= 0) {
              this._context.lineTo(this._x, y);
              this._context.lineTo(x, y);
            } else {
              var x1 = this._x * (1 - this._t) + x * this._t;
              this._context.lineTo(x1, this._y);
              this._context.lineTo(x1, y);
            }
            break;
          }
        }
        this._x = x, this._y = y;
      }
    };

    function step(context) {
      return new Step(context, 0.5);
    }

    function stepBefore(context) {
      return new Step(context, 0);
    }

    function stepAfter(context) {
      return new Step(context, 1);
    }

    function none$1(series, order) {
      if (!((n = series.length) > 1)) return;
      for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
        s0 = s1, s1 = series[order[i]];
        for (j = 0; j < m; ++j) {
          s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
        }
      }
    }

    function none$2(series) {
      var n = series.length, o = new Array(n);
      while (--n >= 0) o[n] = n;
      return o;
    }

    function stackValue(d, key) {
      return d[key];
    }

    function stackSeries(key) {
      const series = [];
      series.key = key;
      return series;
    }

    function stack() {
      var keys = constant$a([]),
          order = none$2,
          offset = none$1,
          value = stackValue;

      function stack(data) {
        var sz = Array.from(keys.apply(this, arguments), stackSeries),
            i, n = sz.length, j = -1,
            oz;

        for (const d of data) {
          for (i = 0, ++j; i < n; ++i) {
            (sz[i][j] = [0, +value(d, sz[i].key, j, data)]).data = d;
          }
        }

        for (i = 0, oz = array$5(order(sz)); i < n; ++i) {
          sz[oz[i]].index = i;
        }

        offset(sz, oz);
        return sz;
      }

      stack.keys = function(_) {
        return arguments.length ? (keys = typeof _ === "function" ? _ : constant$a(Array.from(_)), stack) : keys;
      };

      stack.value = function(_) {
        return arguments.length ? (value = typeof _ === "function" ? _ : constant$a(+_), stack) : value;
      };

      stack.order = function(_) {
        return arguments.length ? (order = _ == null ? none$2 : typeof _ === "function" ? _ : constant$a(Array.from(_)), stack) : order;
      };

      stack.offset = function(_) {
        return arguments.length ? (offset = _ == null ? none$1 : _, stack) : offset;
      };

      return stack;
    }

    function expand(series, order) {
      if (!((n = series.length) > 0)) return;
      for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
        for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;
        if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
      }
      none$1(series, order);
    }

    function diverging$1(series, order) {
      if (!((n = series.length) > 0)) return;
      for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {
        for (yp = yn = 0, i = 0; i < n; ++i) {
          if ((dy = (d = series[order[i]][j])[1] - d[0]) > 0) {
            d[0] = yp, d[1] = yp += dy;
          } else if (dy < 0) {
            d[1] = yn, d[0] = yn += dy;
          } else {
            d[0] = 0, d[1] = dy;
          }
        }
      }
    }

    function silhouette(series, order) {
      if (!((n = series.length) > 0)) return;
      for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
        for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;
        s0[j][1] += s0[j][0] = -y / 2;
      }
      none$1(series, order);
    }

    function wiggle(series, order) {
      if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
      for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
        for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
          var si = series[order[i]],
              sij0 = si[j][1] || 0,
              sij1 = si[j - 1][1] || 0,
              s3 = (sij0 - sij1) / 2;
          for (var k = 0; k < i; ++k) {
            var sk = series[order[k]],
                skj0 = sk[j][1] || 0,
                skj1 = sk[j - 1][1] || 0;
            s3 += skj0 - skj1;
          }
          s1 += sij0, s2 += s3 * sij0;
        }
        s0[j - 1][1] += s0[j - 1][0] = y;
        if (s1) y -= s2 / s1;
      }
      s0[j - 1][1] += s0[j - 1][0] = y;
      none$1(series, order);
    }

    function appearance(series) {
      var peaks = series.map(peak);
      return none$2(series).sort(function(a, b) { return peaks[a] - peaks[b]; });
    }

    function peak(series) {
      var i = -1, j = 0, n = series.length, vi, vj = -Infinity;
      while (++i < n) if ((vi = +series[i][1]) > vj) vj = vi, j = i;
      return j;
    }

    function ascending$3(series) {
      var sums = series.map(sum$1);
      return none$2(series).sort(function(a, b) { return sums[a] - sums[b]; });
    }

    function sum$1(series) {
      var s = 0, i = -1, n = series.length, v;
      while (++i < n) if (v = +series[i][1]) s += v;
      return s;
    }

    function descending$2(series) {
      return ascending$3(series).reverse();
    }

    function insideOut(series) {
      var n = series.length,
          i,
          j,
          sums = series.map(sum$1),
          order = appearance(series),
          top = 0,
          bottom = 0,
          tops = [],
          bottoms = [];

      for (i = 0; i < n; ++i) {
        j = order[i];
        if (top < bottom) {
          top += sums[j];
          tops.push(j);
        } else {
          bottom += sums[j];
          bottoms.push(j);
        }
      }

      return bottoms.reverse().concat(tops);
    }

    function reverse$1(series) {
      return none$2(series).reverse();
    }

    var constant$b = x => () => x;

    function ZoomEvent(type, {
      sourceEvent,
      target,
      transform,
      dispatch
    }) {
      Object.defineProperties(this, {
        type: {value: type, enumerable: true, configurable: true},
        sourceEvent: {value: sourceEvent, enumerable: true, configurable: true},
        target: {value: target, enumerable: true, configurable: true},
        transform: {value: transform, enumerable: true, configurable: true},
        _: {value: dispatch}
      });
    }

    function Transform(k, x, y) {
      this.k = k;
      this.x = x;
      this.y = y;
    }

    Transform.prototype = {
      constructor: Transform,
      scale: function(k) {
        return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
      },
      translate: function(x, y) {
        return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
      },
      apply: function(point) {
        return [point[0] * this.k + this.x, point[1] * this.k + this.y];
      },
      applyX: function(x) {
        return x * this.k + this.x;
      },
      applyY: function(y) {
        return y * this.k + this.y;
      },
      invert: function(location) {
        return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
      },
      invertX: function(x) {
        return (x - this.x) / this.k;
      },
      invertY: function(y) {
        return (y - this.y) / this.k;
      },
      rescaleX: function(x) {
        return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
      },
      rescaleY: function(y) {
        return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
      },
      toString: function() {
        return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
      }
    };

    var identity$b = new Transform(1, 0, 0);

    transform$1.prototype = Transform.prototype;

    function transform$1(node) {
      while (!node.__zoom) if (!(node = node.parentNode)) return identity$b;
      return node.__zoom;
    }

    function nopropagation$2(event) {
      event.stopImmediatePropagation();
    }

    function noevent$2(event) {
      event.preventDefault();
      event.stopImmediatePropagation();
    }

    // Ignore right-click, since that should open the context menu.
    // except for pinch-to-zoom, which is sent as a wheel+ctrlKey event
    function defaultFilter$2(event) {
      return (!event.ctrlKey || event.type === 'wheel') && !event.button;
    }

    function defaultExtent$1() {
      var e = this;
      if (e instanceof SVGElement) {
        e = e.ownerSVGElement || e;
        if (e.hasAttribute("viewBox")) {
          e = e.viewBox.baseVal;
          return [[e.x, e.y], [e.x + e.width, e.y + e.height]];
        }
        return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];
      }
      return [[0, 0], [e.clientWidth, e.clientHeight]];
    }

    function defaultTransform() {
      return this.__zoom || identity$b;
    }

    function defaultWheelDelta(event) {
      return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * (event.ctrlKey ? 10 : 1);
    }

    function defaultTouchable$2() {
      return navigator.maxTouchPoints || ("ontouchstart" in this);
    }

    function defaultConstrain(transform, extent, translateExtent) {
      var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],
          dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],
          dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],
          dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];
      return transform.translate(
        dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
        dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
      );
    }

    function zoom() {
      var filter = defaultFilter$2,
          extent = defaultExtent$1,
          constrain = defaultConstrain,
          wheelDelta = defaultWheelDelta,
          touchable = defaultTouchable$2,
          scaleExtent = [0, Infinity],
          translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]],
          duration = 250,
          interpolate = interpolateZoom,
          listeners = dispatch("start", "zoom", "end"),
          touchstarting,
          touchfirst,
          touchending,
          touchDelay = 500,
          wheelDelay = 150,
          clickDistance2 = 0,
          tapDistance = 10;

      function zoom(selection) {
        selection
            .property("__zoom", defaultTransform)
            .on("wheel.zoom", wheeled)
            .on("mousedown.zoom", mousedowned)
            .on("dblclick.zoom", dblclicked)
          .filter(touchable)
            .on("touchstart.zoom", touchstarted)
            .on("touchmove.zoom", touchmoved)
            .on("touchend.zoom touchcancel.zoom", touchended)
            .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
      }

      zoom.transform = function(collection, transform, point, event) {
        var selection = collection.selection ? collection.selection() : collection;
        selection.property("__zoom", defaultTransform);
        if (collection !== selection) {
          schedule(collection, transform, point, event);
        } else {
          selection.interrupt().each(function() {
            gesture(this, arguments)
              .event(event)
              .start()
              .zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform)
              .end();
          });
        }
      };

      zoom.scaleBy = function(selection, k, p, event) {
        zoom.scaleTo(selection, function() {
          var k0 = this.__zoom.k,
              k1 = typeof k === "function" ? k.apply(this, arguments) : k;
          return k0 * k1;
        }, p, event);
      };

      zoom.scaleTo = function(selection, k, p, event) {
        zoom.transform(selection, function() {
          var e = extent.apply(this, arguments),
              t0 = this.__zoom,
              p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p,
              p1 = t0.invert(p0),
              k1 = typeof k === "function" ? k.apply(this, arguments) : k;
          return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
        }, p, event);
      };

      zoom.translateBy = function(selection, x, y, event) {
        zoom.transform(selection, function() {
          return constrain(this.__zoom.translate(
            typeof x === "function" ? x.apply(this, arguments) : x,
            typeof y === "function" ? y.apply(this, arguments) : y
          ), extent.apply(this, arguments), translateExtent);
        }, null, event);
      };

      zoom.translateTo = function(selection, x, y, p, event) {
        zoom.transform(selection, function() {
          var e = extent.apply(this, arguments),
              t = this.__zoom,
              p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;
          return constrain(identity$b.translate(p0[0], p0[1]).scale(t.k).translate(
            typeof x === "function" ? -x.apply(this, arguments) : -x,
            typeof y === "function" ? -y.apply(this, arguments) : -y
          ), e, translateExtent);
        }, p, event);
      };

      function scale(transform, k) {
        k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
        return k === transform.k ? transform : new Transform(k, transform.x, transform.y);
      }

      function translate(transform, p0, p1) {
        var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;
        return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);
      }

      function centroid(extent) {
        return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];
      }

      function schedule(transition, transform, point, event) {
        transition
            .on("start.zoom", function() { gesture(this, arguments).event(event).start(); })
            .on("interrupt.zoom end.zoom", function() { gesture(this, arguments).event(event).end(); })
            .tween("zoom", function() {
              var that = this,
                  args = arguments,
                  g = gesture(that, args).event(event),
                  e = extent.apply(that, args),
                  p = point == null ? centroid(e) : typeof point === "function" ? point.apply(that, args) : point,
                  w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),
                  a = that.__zoom,
                  b = typeof transform === "function" ? transform.apply(that, args) : transform,
                  i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
              return function(t) {
                if (t === 1) t = b; // Avoid rounding error on end.
                else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }
                g.zoom(null, t);
              };
            });
      }

      function gesture(that, args, clean) {
        return (!clean && that.__zooming) || new Gesture(that, args);
      }

      function Gesture(that, args) {
        this.that = that;
        this.args = args;
        this.active = 0;
        this.sourceEvent = null;
        this.extent = extent.apply(that, args);
        this.taps = 0;
      }

      Gesture.prototype = {
        event: function(event) {
          if (event) this.sourceEvent = event;
          return this;
        },
        start: function() {
          if (++this.active === 1) {
            this.that.__zooming = this;
            this.emit("start");
          }
          return this;
        },
        zoom: function(key, transform) {
          if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);
          if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);
          if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);
          this.that.__zoom = transform;
          this.emit("zoom");
          return this;
        },
        end: function() {
          if (--this.active === 0) {
            delete this.that.__zooming;
            this.emit("end");
          }
          return this;
        },
        emit: function(type) {
          var d = select(this.that).datum();
          listeners.call(
            type,
            this.that,
            new ZoomEvent(type, {
              sourceEvent: this.sourceEvent,
              target: zoom,
              type,
              transform: this.that.__zoom,
              dispatch: listeners
            }),
            d
          );
        }
      };

      function wheeled(event, ...args) {
        if (!filter.apply(this, arguments)) return;
        var g = gesture(this, args).event(event),
            t = this.__zoom,
            k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),
            p = pointer(event);

        // If the mouse is in the same location as before, reuse it.
        // If there were recent wheel events, reset the wheel idle timeout.
        if (g.wheel) {
          if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
            g.mouse[1] = t.invert(g.mouse[0] = p);
          }
          clearTimeout(g.wheel);
        }

        // If this wheel event won’t trigger a transform change, ignore it.
        else if (t.k === k) return;

        // Otherwise, capture the mouse point and location at the start.
        else {
          g.mouse = [p, t.invert(p)];
          interrupt(this);
          g.start();
        }

        noevent$2(event);
        g.wheel = setTimeout(wheelidled, wheelDelay);
        g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));

        function wheelidled() {
          g.wheel = null;
          g.end();
        }
      }

      function mousedowned(event, ...args) {
        if (touchending || !filter.apply(this, arguments)) return;
        var g = gesture(this, args, true).event(event),
            v = select(event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),
            p = pointer(event, currentTarget),
            currentTarget = event.currentTarget,
            x0 = event.clientX,
            y0 = event.clientY;

        dragDisable(event.view);
        nopropagation$2(event);
        g.mouse = [p, this.__zoom.invert(p)];
        interrupt(this);
        g.start();

        function mousemoved(event) {
          noevent$2(event);
          if (!g.moved) {
            var dx = event.clientX - x0, dy = event.clientY - y0;
            g.moved = dx * dx + dy * dy > clickDistance2;
          }
          g.event(event)
           .zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = pointer(event, currentTarget), g.mouse[1]), g.extent, translateExtent));
        }

        function mouseupped(event) {
          v.on("mousemove.zoom mouseup.zoom", null);
          yesdrag(event.view, g.moved);
          noevent$2(event);
          g.event(event).end();
        }
      }

      function dblclicked(event, ...args) {
        if (!filter.apply(this, arguments)) return;
        var t0 = this.__zoom,
            p0 = pointer(event.changedTouches ? event.changedTouches[0] : event, this),
            p1 = t0.invert(p0),
            k1 = t0.k * (event.shiftKey ? 0.5 : 2),
            t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, args), translateExtent);

        noevent$2(event);
        if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0, event);
        else select(this).call(zoom.transform, t1, p0, event);
      }

      function touchstarted(event, ...args) {
        if (!filter.apply(this, arguments)) return;
        var touches = event.touches,
            n = touches.length,
            g = gesture(this, args, event.changedTouches.length === n).event(event),
            started, i, t, p;

        nopropagation$2(event);
        for (i = 0; i < n; ++i) {
          t = touches[i], p = pointer(t, this);
          p = [p, this.__zoom.invert(p), t.identifier];
          if (!g.touch0) g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;
          else if (!g.touch1 && g.touch0[2] !== p[2]) g.touch1 = p, g.taps = 0;
        }

        if (touchstarting) touchstarting = clearTimeout(touchstarting);

        if (started) {
          if (g.taps < 2) touchfirst = p[0], touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);
          interrupt(this);
          g.start();
        }
      }

      function touchmoved(event, ...args) {
        if (!this.__zooming) return;
        var g = gesture(this, args).event(event),
            touches = event.changedTouches,
            n = touches.length, i, t, p, l;

        noevent$2(event);
        for (i = 0; i < n; ++i) {
          t = touches[i], p = pointer(t, this);
          if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;
          else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
        }
        t = g.that.__zoom;
        if (g.touch1) {
          var p0 = g.touch0[0], l0 = g.touch0[1],
              p1 = g.touch1[0], l1 = g.touch1[1],
              dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,
              dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
          t = scale(t, Math.sqrt(dp / dl));
          p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
          l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
        }
        else if (g.touch0) p = g.touch0[0], l = g.touch0[1];
        else return;

        g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
      }

      function touchended(event, ...args) {
        if (!this.__zooming) return;
        var g = gesture(this, args).event(event),
            touches = event.changedTouches,
            n = touches.length, i, t;

        nopropagation$2(event);
        if (touchending) clearTimeout(touchending);
        touchending = setTimeout(function() { touchending = null; }, touchDelay);
        for (i = 0; i < n; ++i) {
          t = touches[i];
          if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;
          else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
        }
        if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
        if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);
        else {
          g.end();
          // If this was a dbltap, reroute to the (optional) dblclick.zoom handler.
          if (g.taps === 2) {
            t = pointer(t, this);
            if (Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance) {
              var p = select(this).on("dblclick.zoom");
              if (p) p.apply(this, arguments);
            }
          }
        }
      }

      zoom.wheelDelta = function(_) {
        return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : constant$b(+_), zoom) : wheelDelta;
      };

      zoom.filter = function(_) {
        return arguments.length ? (filter = typeof _ === "function" ? _ : constant$b(!!_), zoom) : filter;
      };

      zoom.touchable = function(_) {
        return arguments.length ? (touchable = typeof _ === "function" ? _ : constant$b(!!_), zoom) : touchable;
      };

      zoom.extent = function(_) {
        return arguments.length ? (extent = typeof _ === "function" ? _ : constant$b([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
      };

      zoom.scaleExtent = function(_) {
        return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];
      };

      zoom.translateExtent = function(_) {
        return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
      };

      zoom.constrain = function(_) {
        return arguments.length ? (constrain = _, zoom) : constrain;
      };

      zoom.duration = function(_) {
        return arguments.length ? (duration = +_, zoom) : duration;
      };

      zoom.interpolate = function(_) {
        return arguments.length ? (interpolate = _, zoom) : interpolate;
      };

      zoom.on = function() {
        var value = listeners.on.apply(listeners, arguments);
        return value === listeners ? zoom : value;
      };

      zoom.clickDistance = function(_) {
        return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
      };

      zoom.tapDistance = function(_) {
        return arguments.length ? (tapDistance = +_, zoom) : tapDistance;
      };

      return zoom;
    }

    var d3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        version: version,
        bisect: bisectRight,
        bisectRight: bisectRight,
        bisectLeft: bisectLeft,
        bisectCenter: bisectCenter,
        ascending: ascending,
        bisector: bisector,
        count: count,
        cross: cross$1,
        cumsum: cumsum,
        descending: descending,
        deviation: deviation,
        extent: extent,
        fsum: fsum,
        Adder: Adder,
        group: group,
        groups: groups,
        index: index$1,
        indexes: indexes,
        rollup: rollup,
        rollups: rollups,
        bin: bin,
        histogram: bin,
        thresholdFreedmanDiaconis: freedmanDiaconis,
        thresholdScott: scott,
        thresholdSturges: thresholdSturges,
        max: max$1,
        maxIndex: maxIndex,
        mean: mean,
        median: median,
        merge: merge,
        min: min$1,
        minIndex: minIndex,
        nice: nice,
        pairs: pairs,
        permute: permute,
        quantile: quantile,
        quantileSorted: quantileSorted,
        quickselect: quickselect,
        range: sequence,
        least: least,
        leastIndex: leastIndex,
        greatest: greatest,
        greatestIndex: greatestIndex,
        scan: scan,
        shuffle: shuffle$1,
        shuffler: shuffler,
        sum: sum,
        ticks: ticks,
        tickIncrement: tickIncrement,
        tickStep: tickStep,
        transpose: transpose$1,
        variance: variance,
        zip: zip,
        every: every,
        some: some,
        filter: filter,
        map: map,
        reduce: reduce,
        reverse: reverse,
        sort: sort,
        difference: difference,
        disjoint: disjoint,
        intersection: intersection,
        subset: subset,
        superset: superset,
        union: union,
        axisTop: axisTop,
        axisRight: axisRight,
        axisBottom: axisBottom,
        axisLeft: axisLeft,
        brush: brush,
        brushX: brushX,
        brushY: brushY,
        brushSelection: brushSelection,
        chord: chord,
        chordTranspose: chordTranspose,
        chordDirected: chordDirected,
        ribbon: ribbon$1,
        ribbonArrow: ribbonArrow,
        color: color,
        rgb: rgb,
        hsl: hsl,
        lab: lab,
        hcl: hcl,
        lch: lch,
        gray: gray,
        cubehelix: cubehelix,
        contours: contours,
        contourDensity: density,
        Delaunay: Delaunay,
        Voronoi: Voronoi,
        dispatch: dispatch,
        drag: drag,
        dragDisable: dragDisable,
        dragEnable: yesdrag,
        dsvFormat: dsvFormat,
        csvParse: csvParse,
        csvParseRows: csvParseRows,
        csvFormat: csvFormat,
        csvFormatBody: csvFormatBody,
        csvFormatRows: csvFormatRows,
        csvFormatRow: csvFormatRow,
        csvFormatValue: csvFormatValue,
        tsvParse: tsvParse,
        tsvParseRows: tsvParseRows,
        tsvFormat: tsvFormat,
        tsvFormatBody: tsvFormatBody,
        tsvFormatRows: tsvFormatRows,
        tsvFormatRow: tsvFormatRow,
        tsvFormatValue: tsvFormatValue,
        autoType: autoType,
        easeLinear: linear$2,
        easeQuad: quadInOut,
        easeQuadIn: quadIn,
        easeQuadOut: quadOut,
        easeQuadInOut: quadInOut,
        easeCubic: cubicInOut,
        easeCubicIn: cubicIn,
        easeCubicOut: cubicOut,
        easeCubicInOut: cubicInOut,
        easePoly: polyInOut,
        easePolyIn: polyIn,
        easePolyOut: polyOut,
        easePolyInOut: polyInOut,
        easeSin: sinInOut,
        easeSinIn: sinIn,
        easeSinOut: sinOut,
        easeSinInOut: sinInOut,
        easeExp: expInOut,
        easeExpIn: expIn,
        easeExpOut: expOut,
        easeExpInOut: expInOut,
        easeCircle: circleInOut,
        easeCircleIn: circleIn,
        easeCircleOut: circleOut,
        easeCircleInOut: circleInOut,
        easeBounce: bounceOut,
        easeBounceIn: bounceIn,
        easeBounceOut: bounceOut,
        easeBounceInOut: bounceInOut,
        easeBack: backInOut,
        easeBackIn: backIn,
        easeBackOut: backOut,
        easeBackInOut: backInOut,
        easeElastic: elasticOut,
        easeElasticIn: elasticIn,
        easeElasticOut: elasticOut,
        easeElasticInOut: elasticInOut,
        blob: blob,
        buffer: buffer,
        dsv: dsv,
        csv: csv$1,
        tsv: tsv$1,
        image: image,
        json: json,
        text: text$1,
        xml: xml,
        html: html,
        svg: svg,
        forceCenter: center$1,
        forceCollide: collide,
        forceLink: link,
        forceManyBody: manyBody,
        forceRadial: radial,
        forceSimulation: simulation,
        forceX: x$2,
        forceY: y$2,
        formatDefaultLocale: defaultLocale,
        get format () { return format; },
        get formatPrefix () { return formatPrefix; },
        formatLocale: formatLocale,
        formatSpecifier: formatSpecifier,
        FormatSpecifier: FormatSpecifier,
        precisionFixed: precisionFixed,
        precisionPrefix: precisionPrefix,
        precisionRound: precisionRound,
        geoArea: area$1,
        geoBounds: bounds,
        geoCentroid: centroid,
        geoCircle: circle,
        geoClipAntimeridian: clipAntimeridian,
        geoClipCircle: clipCircle,
        geoClipExtent: extent$1,
        geoClipRectangle: clipRectangle,
        geoContains: contains$1,
        geoDistance: distance$1,
        geoGraticule: graticule,
        geoGraticule10: graticule10,
        geoInterpolate: interpolate$2,
        geoLength: length$5,
        geoPath: index$3,
        geoAlbers: albers,
        geoAlbersUsa: albersUsa,
        geoAzimuthalEqualArea: azimuthalEqualArea,
        geoAzimuthalEqualAreaRaw: azimuthalEqualAreaRaw,
        geoAzimuthalEquidistant: azimuthalEquidistant,
        geoAzimuthalEquidistantRaw: azimuthalEquidistantRaw,
        geoConicConformal: conicConformal,
        geoConicConformalRaw: conicConformalRaw,
        geoConicEqualArea: conicEqualArea,
        geoConicEqualAreaRaw: conicEqualAreaRaw,
        geoConicEquidistant: conicEquidistant,
        geoConicEquidistantRaw: conicEquidistantRaw,
        geoEqualEarth: equalEarth,
        geoEqualEarthRaw: equalEarthRaw,
        geoEquirectangular: equirectangular,
        geoEquirectangularRaw: equirectangularRaw,
        geoGnomonic: gnomonic,
        geoGnomonicRaw: gnomonicRaw,
        geoIdentity: identity$7,
        geoProjection: projection,
        geoProjectionMutator: projectionMutator,
        geoMercator: mercator,
        geoMercatorRaw: mercatorRaw,
        geoNaturalEarth1: naturalEarth1,
        geoNaturalEarth1Raw: naturalEarth1Raw,
        geoOrthographic: orthographic,
        geoOrthographicRaw: orthographicRaw,
        geoStereographic: stereographic,
        geoStereographicRaw: stereographicRaw,
        geoTransverseMercator: transverseMercator,
        geoTransverseMercatorRaw: transverseMercatorRaw,
        geoRotation: rotation,
        geoStream: geoStream,
        geoTransform: transform,
        cluster: cluster,
        hierarchy: hierarchy,
        pack: index$4,
        packSiblings: siblings,
        packEnclose: enclose,
        partition: partition,
        stratify: stratify,
        tree: tree,
        treemap: index$5,
        treemapBinary: binary,
        treemapDice: treemapDice,
        treemapSlice: treemapSlice,
        treemapSliceDice: sliceDice,
        treemapSquarify: squarify,
        treemapResquarify: resquarify,
        interpolate: interpolate,
        interpolateArray: array$2,
        interpolateBasis: basis$1,
        interpolateBasisClosed: basisClosed,
        interpolateDate: date,
        interpolateDiscrete: discrete,
        interpolateHue: hue$1,
        interpolateNumber: interpolateNumber,
        interpolateNumberArray: numberArray,
        interpolateObject: object,
        interpolateRound: interpolateRound,
        interpolateString: interpolateString,
        interpolateTransformCss: interpolateTransformCss,
        interpolateTransformSvg: interpolateTransformSvg,
        interpolateZoom: interpolateZoom,
        interpolateRgb: interpolateRgb,
        interpolateRgbBasis: rgbBasis,
        interpolateRgbBasisClosed: rgbBasisClosed,
        interpolateHsl: hsl$2,
        interpolateHslLong: hslLong,
        interpolateLab: lab$1,
        interpolateHcl: hcl$2,
        interpolateHclLong: hclLong,
        interpolateCubehelix: cubehelix$2,
        interpolateCubehelixLong: cubehelixLong,
        piecewise: piecewise,
        quantize: quantize,
        path: path,
        polygonArea: area$2,
        polygonCentroid: centroid$1,
        polygonHull: hull,
        polygonContains: contains$2,
        polygonLength: length$6,
        quadtree: quadtree,
        randomUniform: uniform,
        randomInt: int,
        randomNormal: normal,
        randomLogNormal: logNormal,
        randomBates: bates,
        randomIrwinHall: irwinHall,
        randomExponential: exponential$1,
        randomPareto: pareto,
        randomBernoulli: bernoulli,
        randomGeometric: geometric,
        randomBinomial: binomial,
        randomGamma: gamma$1,
        randomBeta: beta,
        randomWeibull: weibull,
        randomCauchy: cauchy,
        randomLogistic: logistic,
        randomPoisson: poisson,
        randomLcg: lcg$1,
        scaleBand: band,
        scalePoint: point,
        scaleIdentity: identity$9,
        scaleLinear: linear$3,
        scaleLog: log$1,
        scaleSymlog: symlog,
        scaleOrdinal: ordinal,
        scaleImplicit: implicit,
        scalePow: pow$3,
        scaleSqrt: sqrt$1,
        scaleRadial: radial$1,
        scaleQuantile: quantile$1,
        scaleQuantize: quantize$1,
        scaleThreshold: threshold,
        scaleTime: time,
        scaleUtc: utcTime,
        scaleSequential: sequential,
        scaleSequentialLog: sequentialLog,
        scaleSequentialPow: sequentialPow,
        scaleSequentialSqrt: sequentialSqrt,
        scaleSequentialSymlog: sequentialSymlog,
        scaleSequentialQuantile: sequentialQuantile,
        scaleDiverging: diverging,
        scaleDivergingLog: divergingLog,
        scaleDivergingPow: divergingPow,
        scaleDivergingSqrt: divergingSqrt,
        scaleDivergingSymlog: divergingSymlog,
        tickFormat: tickFormat,
        schemeCategory10: category10,
        schemeAccent: Accent,
        schemeDark2: Dark2,
        schemePaired: Paired,
        schemePastel1: Pastel1,
        schemePastel2: Pastel2,
        schemeSet1: Set1,
        schemeSet2: Set2,
        schemeSet3: Set3,
        schemeTableau10: Tableau10,
        interpolateBrBG: BrBG,
        schemeBrBG: scheme,
        interpolatePRGn: PRGn,
        schemePRGn: scheme$1,
        interpolatePiYG: PiYG,
        schemePiYG: scheme$2,
        interpolatePuOr: PuOr,
        schemePuOr: scheme$3,
        interpolateRdBu: RdBu,
        schemeRdBu: scheme$4,
        interpolateRdGy: RdGy,
        schemeRdGy: scheme$5,
        interpolateRdYlBu: RdYlBu,
        schemeRdYlBu: scheme$6,
        interpolateRdYlGn: RdYlGn,
        schemeRdYlGn: scheme$7,
        interpolateSpectral: Spectral,
        schemeSpectral: scheme$8,
        interpolateBuGn: BuGn,
        schemeBuGn: scheme$9,
        interpolateBuPu: BuPu,
        schemeBuPu: scheme$a,
        interpolateGnBu: GnBu,
        schemeGnBu: scheme$b,
        interpolateOrRd: OrRd,
        schemeOrRd: scheme$c,
        interpolatePuBuGn: PuBuGn,
        schemePuBuGn: scheme$d,
        interpolatePuBu: PuBu,
        schemePuBu: scheme$e,
        interpolatePuRd: PuRd,
        schemePuRd: scheme$f,
        interpolateRdPu: RdPu,
        schemeRdPu: scheme$g,
        interpolateYlGnBu: YlGnBu,
        schemeYlGnBu: scheme$h,
        interpolateYlGn: YlGn,
        schemeYlGn: scheme$i,
        interpolateYlOrBr: YlOrBr,
        schemeYlOrBr: scheme$j,
        interpolateYlOrRd: YlOrRd,
        schemeYlOrRd: scheme$k,
        interpolateBlues: Blues,
        schemeBlues: scheme$l,
        interpolateGreens: Greens,
        schemeGreens: scheme$m,
        interpolateGreys: Greys,
        schemeGreys: scheme$n,
        interpolatePurples: Purples,
        schemePurples: scheme$o,
        interpolateReds: Reds,
        schemeReds: scheme$p,
        interpolateOranges: Oranges,
        schemeOranges: scheme$q,
        interpolateCividis: cividis,
        interpolateCubehelixDefault: cubehelix$3,
        interpolateRainbow: rainbow,
        interpolateWarm: warm,
        interpolateCool: cool,
        interpolateSinebow: sinebow,
        interpolateTurbo: turbo,
        interpolateViridis: viridis,
        interpolateMagma: magma,
        interpolateInferno: inferno,
        interpolatePlasma: plasma,
        create: create$5,
        creator: creator,
        local: local,
        matcher: matcher,
        namespace: namespace,
        namespaces: namespaces,
        pointer: pointer,
        pointers: pointers,
        select: select,
        selectAll: selectAll,
        selection: selection,
        selector: selector,
        selectorAll: selectorAll,
        style: styleValue,
        window: defaultView,
        arc: arc,
        area: area$3,
        line: line,
        pie: pie,
        areaRadial: areaRadial,
        radialArea: areaRadial,
        lineRadial: lineRadial$1,
        radialLine: lineRadial$1,
        pointRadial: pointRadial,
        linkHorizontal: linkHorizontal,
        linkVertical: linkVertical,
        linkRadial: linkRadial,
        symbol: symbol,
        symbols: symbols,
        symbolCircle: circle$2,
        symbolCross: cross$3,
        symbolDiamond: diamond,
        symbolSquare: square$1,
        symbolStar: star,
        symbolTriangle: triangle,
        symbolWye: wye,
        curveBasisClosed: basisClosed$1,
        curveBasisOpen: basisOpen,
        curveBasis: basis$2,
        curveBundle: bundle,
        curveCardinalClosed: cardinalClosed,
        curveCardinalOpen: cardinalOpen,
        curveCardinal: cardinal,
        curveCatmullRomClosed: catmullRomClosed,
        curveCatmullRomOpen: catmullRomOpen,
        curveCatmullRom: catmullRom,
        curveLinearClosed: linearClosed,
        curveLinear: curveLinear,
        curveMonotoneX: monotoneX,
        curveMonotoneY: monotoneY,
        curveNatural: natural,
        curveStep: step,
        curveStepAfter: stepAfter,
        curveStepBefore: stepBefore,
        stack: stack,
        stackOffsetExpand: expand,
        stackOffsetDiverging: diverging$1,
        stackOffsetNone: none$1,
        stackOffsetSilhouette: silhouette,
        stackOffsetWiggle: wiggle,
        stackOrderAppearance: appearance,
        stackOrderAscending: ascending$3,
        stackOrderDescending: descending$2,
        stackOrderInsideOut: insideOut,
        stackOrderNone: none$2,
        stackOrderReverse: reverse$1,
        timeInterval: newInterval,
        timeMillisecond: millisecond,
        timeMilliseconds: milliseconds,
        utcMillisecond: millisecond,
        utcMilliseconds: milliseconds,
        timeSecond: second,
        timeSeconds: seconds,
        utcSecond: second,
        utcSeconds: seconds,
        timeMinute: minute,
        timeMinutes: minutes,
        timeHour: hour,
        timeHours: hours,
        timeDay: day,
        timeDays: days,
        timeWeek: sunday,
        timeWeeks: sundays,
        timeSunday: sunday,
        timeSundays: sundays,
        timeMonday: monday,
        timeMondays: mondays,
        timeTuesday: tuesday,
        timeTuesdays: tuesdays,
        timeWednesday: wednesday,
        timeWednesdays: wednesdays,
        timeThursday: thursday,
        timeThursdays: thursdays,
        timeFriday: friday,
        timeFridays: fridays,
        timeSaturday: saturday,
        timeSaturdays: saturdays,
        timeMonth: month,
        timeMonths: months,
        timeYear: year,
        timeYears: years,
        utcMinute: utcMinute,
        utcMinutes: utcMinutes,
        utcHour: utcHour,
        utcHours: utcHours,
        utcDay: utcDay,
        utcDays: utcDays,
        utcWeek: utcSunday,
        utcWeeks: utcSundays,
        utcSunday: utcSunday,
        utcSundays: utcSundays,
        utcMonday: utcMonday,
        utcMondays: utcMondays,
        utcTuesday: utcTuesday,
        utcTuesdays: utcTuesdays,
        utcWednesday: utcWednesday,
        utcWednesdays: utcWednesdays,
        utcThursday: utcThursday,
        utcThursdays: utcThursdays,
        utcFriday: utcFriday,
        utcFridays: utcFridays,
        utcSaturday: utcSaturday,
        utcSaturdays: utcSaturdays,
        utcMonth: utcMonth,
        utcMonths: utcMonths,
        utcYear: utcYear,
        utcYears: utcYears,
        timeFormatDefaultLocale: defaultLocale$1,
        get timeFormat () { return timeFormat; },
        get timeParse () { return timeParse; },
        get utcFormat () { return utcFormat; },
        get utcParse () { return utcParse; },
        timeFormatLocale: formatLocale$1,
        isoFormat: formatIso,
        isoParse: parseIso,
        now: now,
        timer: timer,
        timerFlush: timerFlush,
        timeout: timeout$1,
        interval: interval$1,
        transition: transition,
        active: active,
        interrupt: interrupt,
        zoom: zoom,
        zoomTransform: transform$1,
        zoomIdentity: identity$b
    });

    /* src/apps/components/invoice/Emitter.svelte generated by Svelte v3.24.0 */
    const file$7 = "src/apps/components/invoice/Emitter.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[0] = list[i];
    	return child_ctx;
    }

    // (74:0) {#if (!!emitters && emitters.length > 0)}
    function create_if_block$4(ctx) {
    	let each_1_anchor;
    	let each_value = /*emitters*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*emitters*/ 2) {
    				each_value = /*emitters*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(74:0) {#if (!!emitters && emitters.length > 0)}",
    		ctx
    	});

    	return block;
    }

    // (75:0) {#each emitters as emitter}
    function create_each_block$3(ctx) {
    	let article;
    	let ul;
    	let li0;
    	let input;
    	let input_value_value;
    	let t0;
    	let li1;
    	let span0;
    	let t1_value = /*emitter*/ ctx[0].name + "";
    	let t1;
    	let t2;
    	let li2;
    	let span1;
    	let t3_value = /*emitter*/ ctx[0].first_name + "";
    	let t3;
    	let t4;
    	let li3;
    	let span2;
    	let t5_value = /*emitter*/ ctx[0].last_name + "";
    	let t5;
    	let t6;
    	let li4;
    	let div0;
    	let span3;
    	let t7_value = /*emitter*/ ctx[0].street_number + "";
    	let t7;
    	let t8;
    	let div1;
    	let span4;
    	let t9_value = /*emitter*/ ctx[0].street_name + "";
    	let t9;
    	let t10;
    	let li5;
    	let div2;
    	let span5;
    	let t11_value = /*emitter*/ ctx[0].city + "";
    	let t11;
    	let t12;
    	let div3;
    	let span6;
    	let t13_value = /*emitter*/ ctx[0].country + "";
    	let t13;
    	let t14;
    	let div4;
    	let span7;
    	let t15_value = /*emitter*/ ctx[0].zip_code + "";
    	let t15;
    	let t16;
    	let li6;
    	let span8;
    	let t17_value = /*emitter*/ ctx[0].phone + "";
    	let t17;
    	let t18;
    	let li7;
    	let span9;
    	let t19_value = /*emitter*/ ctx[0].mail + "";
    	let t19;
    	let t20;
    	let li8;
    	let span10;
    	let t21_value = /*emitter*/ ctx[0].website + "";
    	let t21;
    	let t22;

    	const block = {
    		c: function create() {
    			article = element("article");
    			ul = element("ul");
    			li0 = element("li");
    			input = element("input");
    			t0 = space();
    			li1 = element("li");
    			span0 = element("span");
    			t1 = text(t1_value);
    			t2 = space();
    			li2 = element("li");
    			span1 = element("span");
    			t3 = text(t3_value);
    			t4 = space();
    			li3 = element("li");
    			span2 = element("span");
    			t5 = text(t5_value);
    			t6 = space();
    			li4 = element("li");
    			div0 = element("div");
    			span3 = element("span");
    			t7 = text(t7_value);
    			t8 = text(" \n                ");
    			div1 = element("div");
    			span4 = element("span");
    			t9 = text(t9_value);
    			t10 = space();
    			li5 = element("li");
    			div2 = element("div");
    			span5 = element("span");
    			t11 = text(t11_value);
    			t12 = text(", \n                ");
    			div3 = element("div");
    			span6 = element("span");
    			t13 = text(t13_value);
    			t14 = text(" \n                ");
    			div4 = element("div");
    			span7 = element("span");
    			t15 = text(t15_value);
    			t16 = space();
    			li6 = element("li");
    			span8 = element("span");
    			t17 = text(t17_value);
    			t18 = space();
    			li7 = element("li");
    			span9 = element("span");
    			t19 = text(t19_value);
    			t20 = space();
    			li8 = element("li");
    			span10 = element("span");
    			t21 = text(t21_value);
    			t22 = space();
    			attr_dev(input, "class", "key");
    			attr_dev(input, "type", "hidden");
    			input.value = input_value_value = /*emitter*/ ctx[0].org;
    			add_location(input, file$7, 77, 16, 1642);
    			attr_dev(li0, "class", "svelte-xsj6d4");
    			add_location(li0, file$7, 77, 12, 1638);
    			attr_dev(span0, "class", "name svelte-xsj6d4");
    			add_location(span0, file$7, 78, 21, 1726);
    			attr_dev(li1, "flex", "");
    			attr_dev(li1, "class", "svelte-xsj6d4");
    			add_location(li1, file$7, 78, 12, 1717);
    			attr_dev(span1, "class", "first_name");
    			add_location(span1, file$7, 79, 21, 1793);
    			attr_dev(li2, "flex", "");
    			attr_dev(li2, "class", "svelte-xsj6d4");
    			add_location(li2, file$7, 79, 12, 1784);
    			attr_dev(span2, "class", "last_name");
    			add_location(span2, file$7, 80, 21, 1872);
    			attr_dev(li3, "flex", "");
    			attr_dev(li3, "class", "svelte-xsj6d4");
    			add_location(li3, file$7, 80, 12, 1863);
    			attr_dev(span3, "class", "street_number");
    			add_location(span3, file$7, 82, 26, 1988);
    			attr_dev(div0, "flex", "");
    			add_location(div0, file$7, 82, 16, 1978);
    			attr_dev(span4, "class", "street_number");
    			add_location(span4, file$7, 83, 26, 2085);
    			attr_dev(div1, "flex", "");
    			add_location(div1, file$7, 83, 16, 2075);
    			attr_dev(li4, "flex", "50");
    			attr_dev(li4, "layout", "");
    			attr_dev(li4, "class", "svelte-xsj6d4");
    			add_location(li4, file$7, 81, 12, 1940);
    			attr_dev(span5, "class", "street_number");
    			add_location(span5, file$7, 86, 26, 2226);
    			attr_dev(div2, "flex", "");
    			add_location(div2, file$7, 86, 16, 2216);
    			attr_dev(span6, "class", "street_number");
    			add_location(span6, file$7, 87, 26, 2315);
    			attr_dev(div3, "flex", "");
    			add_location(div3, file$7, 87, 16, 2305);
    			attr_dev(span7, "class", "street_number");
    			add_location(span7, file$7, 88, 26, 2406);
    			attr_dev(div4, "flex", "");
    			add_location(div4, file$7, 88, 16, 2396);
    			attr_dev(li5, "flex", "50");
    			attr_dev(li5, "layout", "");
    			attr_dev(li5, "class", "svelte-xsj6d4");
    			add_location(li5, file$7, 85, 12, 2178);
    			attr_dev(span8, "class", "phone");
    			add_location(span8, file$7, 92, 21, 2749);
    			attr_dev(li6, "flex", "");
    			attr_dev(li6, "class", "svelte-xsj6d4");
    			add_location(li6, file$7, 92, 12, 2740);
    			attr_dev(span9, "class", "mail");
    			add_location(span9, file$7, 93, 21, 2818);
    			attr_dev(li7, "flex", "");
    			attr_dev(li7, "class", "svelte-xsj6d4");
    			add_location(li7, file$7, 93, 12, 2809);
    			attr_dev(span10, "class", "website");
    			add_location(span10, file$7, 94, 21, 2885);
    			attr_dev(li8, "flex", "");
    			attr_dev(li8, "class", "svelte-xsj6d4");
    			add_location(li8, file$7, 94, 12, 2876);
    			attr_dev(ul, "class", "asset svelte-xsj6d4");
    			attr_dev(ul, "layout", "");
    			add_location(ul, file$7, 76, 8, 1600);
    			attr_dev(article, "class", "svelte-xsj6d4");
    			add_location(article, file$7, 75, 4, 1582);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, article, anchor);
    			append_dev(article, ul);
    			append_dev(ul, li0);
    			append_dev(li0, input);
    			append_dev(ul, t0);
    			append_dev(ul, li1);
    			append_dev(li1, span0);
    			append_dev(span0, t1);
    			append_dev(ul, t2);
    			append_dev(ul, li2);
    			append_dev(li2, span1);
    			append_dev(span1, t3);
    			append_dev(ul, t4);
    			append_dev(ul, li3);
    			append_dev(li3, span2);
    			append_dev(span2, t5);
    			append_dev(ul, t6);
    			append_dev(ul, li4);
    			append_dev(li4, div0);
    			append_dev(div0, span3);
    			append_dev(span3, t7);
    			append_dev(li4, t8);
    			append_dev(li4, div1);
    			append_dev(div1, span4);
    			append_dev(span4, t9);
    			append_dev(ul, t10);
    			append_dev(ul, li5);
    			append_dev(li5, div2);
    			append_dev(div2, span5);
    			append_dev(span5, t11);
    			append_dev(li5, t12);
    			append_dev(li5, div3);
    			append_dev(div3, span6);
    			append_dev(span6, t13);
    			append_dev(li5, t14);
    			append_dev(li5, div4);
    			append_dev(div4, span7);
    			append_dev(span7, t15);
    			append_dev(ul, t16);
    			append_dev(ul, li6);
    			append_dev(li6, span8);
    			append_dev(span8, t17);
    			append_dev(ul, t18);
    			append_dev(ul, li7);
    			append_dev(li7, span9);
    			append_dev(span9, t19);
    			append_dev(ul, t20);
    			append_dev(ul, li8);
    			append_dev(li8, span10);
    			append_dev(span10, t21);
    			append_dev(article, t22);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*emitters*/ 2 && input_value_value !== (input_value_value = /*emitter*/ ctx[0].org)) {
    				prop_dev(input, "value", input_value_value);
    			}

    			if (dirty & /*emitters*/ 2 && t1_value !== (t1_value = /*emitter*/ ctx[0].name + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*emitters*/ 2 && t3_value !== (t3_value = /*emitter*/ ctx[0].first_name + "")) set_data_dev(t3, t3_value);
    			if (dirty & /*emitters*/ 2 && t5_value !== (t5_value = /*emitter*/ ctx[0].last_name + "")) set_data_dev(t5, t5_value);
    			if (dirty & /*emitters*/ 2 && t7_value !== (t7_value = /*emitter*/ ctx[0].street_number + "")) set_data_dev(t7, t7_value);
    			if (dirty & /*emitters*/ 2 && t9_value !== (t9_value = /*emitter*/ ctx[0].street_name + "")) set_data_dev(t9, t9_value);
    			if (dirty & /*emitters*/ 2 && t11_value !== (t11_value = /*emitter*/ ctx[0].city + "")) set_data_dev(t11, t11_value);
    			if (dirty & /*emitters*/ 2 && t13_value !== (t13_value = /*emitter*/ ctx[0].country + "")) set_data_dev(t13, t13_value);
    			if (dirty & /*emitters*/ 2 && t15_value !== (t15_value = /*emitter*/ ctx[0].zip_code + "")) set_data_dev(t15, t15_value);
    			if (dirty & /*emitters*/ 2 && t17_value !== (t17_value = /*emitter*/ ctx[0].phone + "")) set_data_dev(t17, t17_value);
    			if (dirty & /*emitters*/ 2 && t19_value !== (t19_value = /*emitter*/ ctx[0].mail + "")) set_data_dev(t19, t19_value);
    			if (dirty & /*emitters*/ 2 && t21_value !== (t21_value = /*emitter*/ ctx[0].website + "")) set_data_dev(t21, t21_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(article);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(75:0) {#each emitters as emitter}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$j(ctx) {
    	let if_block_anchor;
    	let if_block = !!/*emitters*/ ctx[1] && /*emitters*/ ctx[1].length > 0 && create_if_block$4(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (!!/*emitters*/ ctx[1] && /*emitters*/ ctx[1].length > 0) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$4(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let { emitter } = $$props;

    	const getEmitters = async data => {
    		$$invalidate(1, emitters = await getEmitterData(data));
    		$$invalidate(0, emitter = emitters[0]);
    		return emitters;
    	};

    	let emitters;

    	async function getEmitterData(data) {
    		return (await csv$1(data)).map(d => ({
    			// TODO: validate field values...
    			org: d["org"],
    			name: d["name"],
    			first_name: d["first_name"],
    			last_name: d["last_name"],
    			street_number: d["street_number"],
    			street_name: d["street_name"],
    			city: d["city"],
    			country: d["country"], // state
    			zip_code: d["zip_code"],
    			phone: d["phone"],
    			mail: d["mail"],
    			website: d["website"]
    		}));
    	}

    	const writable_props = ["emitter"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Emitter> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Emitter", $$slots, []);

    	$$self.$set = $$props => {
    		if ("emitter" in $$props) $$invalidate(0, emitter = $$props.emitter);
    	};

    	$$self.$capture_state = () => ({
    		d3,
    		emitter,
    		getEmitters,
    		emitters,
    		getEmitterData
    	});

    	$$self.$inject_state = $$props => {
    		if ("emitter" in $$props) $$invalidate(0, emitter = $$props.emitter);
    		if ("emitters" in $$props) $$invalidate(1, emitters = $$props.emitters);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [emitter, emitters, getEmitters];
    }

    class Emitter extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$j, create_fragment$j, safe_not_equal, { emitter: 0, getEmitters: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Emitter",
    			options,
    			id: create_fragment$j.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*emitter*/ ctx[0] === undefined && !("emitter" in props)) {
    			console.warn("<Emitter> was created without expected prop 'emitter'");
    		}
    	}

    	get emitter() {
    		throw new Error("<Emitter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set emitter(value) {
    		throw new Error("<Emitter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getEmitters() {
    		return this.$$.ctx[2];
    	}

    	set getEmitters(value) {
    		throw new Error("<Emitter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/apps/components/invoice/Clients.svelte generated by Svelte v3.24.0 */
    const file$8 = "src/apps/components/invoice/Clients.svelte";

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[3] = list[i];
    	return child_ctx;
    }

    // (71:0) {#if (!!clients && clients.length > 0)}
    function create_if_block$5(ctx) {
    	let each_1_anchor;
    	let each_value = /*clients*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*clients*/ 1) {
    				each_value = /*clients*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$4(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(71:0) {#if (!!clients && clients.length > 0)}",
    		ctx
    	});

    	return block;
    }

    // (72:0) {#each clients as client}
    function create_each_block$4(ctx) {
    	let article;
    	let ul;
    	let li0;
    	let input;
    	let input_value_value;
    	let t0;
    	let li1;
    	let span0;
    	let t1_value = /*client*/ ctx[3].company_name + "";
    	let t1;
    	let t2;
    	let li2;
    	let span1;
    	let t3_value = /*client*/ ctx[3].first_name + "";
    	let t3;
    	let t4;
    	let li3;
    	let span2;
    	let t5_value = /*client*/ ctx[3].last_name + "";
    	let t5;
    	let t6;
    	let li4;
    	let div0;
    	let span3;
    	let t7_value = /*client*/ ctx[3].street_number + "";
    	let t7;
    	let t8;
    	let div1;
    	let span4;
    	let t9_value = /*client*/ ctx[3].street_name + "";
    	let t9;
    	let t10;
    	let li5;
    	let div2;
    	let span5;
    	let t11_value = /*client*/ ctx[3].city + "";
    	let t11;
    	let t12;
    	let div3;
    	let span6;
    	let t13_value = /*client*/ ctx[3].country + "";
    	let t13;
    	let t14;
    	let div4;
    	let span7;
    	let t15_value = /*client*/ ctx[3].zip_code + "";
    	let t15;
    	let t16;
    	let li6;
    	let span8;
    	let t17_value = /*client*/ ctx[3].phone + "";
    	let t17;
    	let t18;
    	let li7;
    	let span9;
    	let t19_value = /*client*/ ctx[3].mail + "";
    	let t19;
    	let t20;
    	let li8;
    	let span10;
    	let t21_value = /*client*/ ctx[3].website + "";
    	let t21;
    	let t22;

    	const block = {
    		c: function create() {
    			article = element("article");
    			ul = element("ul");
    			li0 = element("li");
    			input = element("input");
    			t0 = space();
    			li1 = element("li");
    			span0 = element("span");
    			t1 = text(t1_value);
    			t2 = space();
    			li2 = element("li");
    			span1 = element("span");
    			t3 = text(t3_value);
    			t4 = space();
    			li3 = element("li");
    			span2 = element("span");
    			t5 = text(t5_value);
    			t6 = space();
    			li4 = element("li");
    			div0 = element("div");
    			span3 = element("span");
    			t7 = text(t7_value);
    			t8 = text(" \n                ");
    			div1 = element("div");
    			span4 = element("span");
    			t9 = text(t9_value);
    			t10 = space();
    			li5 = element("li");
    			div2 = element("div");
    			span5 = element("span");
    			t11 = text(t11_value);
    			t12 = text(", \n                ");
    			div3 = element("div");
    			span6 = element("span");
    			t13 = text(t13_value);
    			t14 = text(" \n                ");
    			div4 = element("div");
    			span7 = element("span");
    			t15 = text(t15_value);
    			t16 = space();
    			li6 = element("li");
    			span8 = element("span");
    			t17 = text(t17_value);
    			t18 = space();
    			li7 = element("li");
    			span9 = element("span");
    			t19 = text(t19_value);
    			t20 = space();
    			li8 = element("li");
    			span10 = element("span");
    			t21 = text(t21_value);
    			t22 = space();
    			attr_dev(input, "class", "key");
    			attr_dev(input, "type", "hidden");
    			input.value = input_value_value = /*client*/ ctx[3].org;
    			add_location(input, file$8, 74, 16, 1599);
    			attr_dev(li0, "class", "svelte-xsj6d4");
    			add_location(li0, file$8, 74, 12, 1595);
    			attr_dev(span0, "class", "name svelte-xsj6d4");
    			add_location(span0, file$8, 75, 21, 1682);
    			attr_dev(li1, "flex", "");
    			attr_dev(li1, "class", "svelte-xsj6d4");
    			add_location(li1, file$8, 75, 12, 1673);
    			attr_dev(span1, "class", "first_name");
    			add_location(span1, file$8, 76, 21, 1756);
    			attr_dev(li2, "flex", "");
    			attr_dev(li2, "class", "svelte-xsj6d4");
    			add_location(li2, file$8, 76, 12, 1747);
    			attr_dev(span2, "class", "last_name");
    			add_location(span2, file$8, 77, 21, 1834);
    			attr_dev(li3, "flex", "");
    			attr_dev(li3, "class", "svelte-xsj6d4");
    			add_location(li3, file$8, 77, 12, 1825);
    			attr_dev(span3, "class", "street_number");
    			add_location(span3, file$8, 79, 26, 1949);
    			attr_dev(div0, "flex", "");
    			add_location(div0, file$8, 79, 16, 1939);
    			attr_dev(span4, "class", "street_number");
    			add_location(span4, file$8, 80, 26, 2045);
    			attr_dev(div1, "flex", "");
    			add_location(div1, file$8, 80, 16, 2035);
    			attr_dev(li4, "flex", "50");
    			attr_dev(li4, "layout", "");
    			attr_dev(li4, "class", "svelte-xsj6d4");
    			add_location(li4, file$8, 78, 12, 1901);
    			attr_dev(span5, "class", "street_number");
    			add_location(span5, file$8, 83, 26, 2185);
    			attr_dev(div2, "flex", "");
    			add_location(div2, file$8, 83, 16, 2175);
    			attr_dev(span6, "class", "street_number");
    			add_location(span6, file$8, 84, 26, 2273);
    			attr_dev(div3, "flex", "");
    			add_location(div3, file$8, 84, 16, 2263);
    			attr_dev(span7, "class", "street_number");
    			add_location(span7, file$8, 85, 26, 2363);
    			attr_dev(div4, "flex", "");
    			add_location(div4, file$8, 85, 16, 2353);
    			attr_dev(li5, "flex", "50");
    			attr_dev(li5, "layout", "");
    			attr_dev(li5, "class", "svelte-xsj6d4");
    			add_location(li5, file$8, 82, 12, 2137);
    			attr_dev(span8, "class", "phone");
    			add_location(span8, file$8, 89, 21, 2705);
    			attr_dev(li6, "flex", "");
    			attr_dev(li6, "class", "svelte-xsj6d4");
    			add_location(li6, file$8, 89, 12, 2696);
    			attr_dev(span9, "class", "mail");
    			add_location(span9, file$8, 90, 21, 2773);
    			attr_dev(li7, "flex", "");
    			attr_dev(li7, "class", "svelte-xsj6d4");
    			add_location(li7, file$8, 90, 12, 2764);
    			attr_dev(span10, "class", "website");
    			add_location(span10, file$8, 91, 21, 2839);
    			attr_dev(li8, "flex", "");
    			attr_dev(li8, "class", "svelte-xsj6d4");
    			add_location(li8, file$8, 91, 12, 2830);
    			attr_dev(ul, "class", "asset svelte-xsj6d4");
    			attr_dev(ul, "layout", "");
    			add_location(ul, file$8, 73, 8, 1557);
    			attr_dev(article, "class", "svelte-xsj6d4");
    			add_location(article, file$8, 72, 4, 1539);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, article, anchor);
    			append_dev(article, ul);
    			append_dev(ul, li0);
    			append_dev(li0, input);
    			append_dev(ul, t0);
    			append_dev(ul, li1);
    			append_dev(li1, span0);
    			append_dev(span0, t1);
    			append_dev(ul, t2);
    			append_dev(ul, li2);
    			append_dev(li2, span1);
    			append_dev(span1, t3);
    			append_dev(ul, t4);
    			append_dev(ul, li3);
    			append_dev(li3, span2);
    			append_dev(span2, t5);
    			append_dev(ul, t6);
    			append_dev(ul, li4);
    			append_dev(li4, div0);
    			append_dev(div0, span3);
    			append_dev(span3, t7);
    			append_dev(li4, t8);
    			append_dev(li4, div1);
    			append_dev(div1, span4);
    			append_dev(span4, t9);
    			append_dev(ul, t10);
    			append_dev(ul, li5);
    			append_dev(li5, div2);
    			append_dev(div2, span5);
    			append_dev(span5, t11);
    			append_dev(li5, t12);
    			append_dev(li5, div3);
    			append_dev(div3, span6);
    			append_dev(span6, t13);
    			append_dev(li5, t14);
    			append_dev(li5, div4);
    			append_dev(div4, span7);
    			append_dev(span7, t15);
    			append_dev(ul, t16);
    			append_dev(ul, li6);
    			append_dev(li6, span8);
    			append_dev(span8, t17);
    			append_dev(ul, t18);
    			append_dev(ul, li7);
    			append_dev(li7, span9);
    			append_dev(span9, t19);
    			append_dev(ul, t20);
    			append_dev(ul, li8);
    			append_dev(li8, span10);
    			append_dev(span10, t21);
    			append_dev(article, t22);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*clients*/ 1 && input_value_value !== (input_value_value = /*client*/ ctx[3].org)) {
    				prop_dev(input, "value", input_value_value);
    			}

    			if (dirty & /*clients*/ 1 && t1_value !== (t1_value = /*client*/ ctx[3].company_name + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*clients*/ 1 && t3_value !== (t3_value = /*client*/ ctx[3].first_name + "")) set_data_dev(t3, t3_value);
    			if (dirty & /*clients*/ 1 && t5_value !== (t5_value = /*client*/ ctx[3].last_name + "")) set_data_dev(t5, t5_value);
    			if (dirty & /*clients*/ 1 && t7_value !== (t7_value = /*client*/ ctx[3].street_number + "")) set_data_dev(t7, t7_value);
    			if (dirty & /*clients*/ 1 && t9_value !== (t9_value = /*client*/ ctx[3].street_name + "")) set_data_dev(t9, t9_value);
    			if (dirty & /*clients*/ 1 && t11_value !== (t11_value = /*client*/ ctx[3].city + "")) set_data_dev(t11, t11_value);
    			if (dirty & /*clients*/ 1 && t13_value !== (t13_value = /*client*/ ctx[3].country + "")) set_data_dev(t13, t13_value);
    			if (dirty & /*clients*/ 1 && t15_value !== (t15_value = /*client*/ ctx[3].zip_code + "")) set_data_dev(t15, t15_value);
    			if (dirty & /*clients*/ 1 && t17_value !== (t17_value = /*client*/ ctx[3].phone + "")) set_data_dev(t17, t17_value);
    			if (dirty & /*clients*/ 1 && t19_value !== (t19_value = /*client*/ ctx[3].mail + "")) set_data_dev(t19, t19_value);
    			if (dirty & /*clients*/ 1 && t21_value !== (t21_value = /*client*/ ctx[3].website + "")) set_data_dev(t21, t21_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(article);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(72:0) {#each clients as client}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$k(ctx) {
    	let if_block_anchor;
    	let if_block = !!/*clients*/ ctx[0] && /*clients*/ ctx[0].length > 0 && create_if_block$5(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (!!/*clients*/ ctx[0] && /*clients*/ ctx[0].length > 0) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$5(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let { clients } = $$props;

    	const getClients = async data => {
    		$$invalidate(0, clients = await getClientData(data));
    		return clients;
    	};

    	async function getClientData(data) {
    		return (await csv$1(data)).map(d => ({
    			// TODO: validate field values...
    			org: d["org"],
    			company_name: d["company_name"],
    			first_name: d["first_name"],
    			last_name: d["last_name"],
    			street_number: d["street_number"],
    			street_name: d["street_name"],
    			city: d["city"],
    			country: d["country"], // state
    			zip_code: d["zip_code"],
    			phone: d["phone"],
    			mail: d["mail"],
    			website: d["website"]
    		}));
    	}

    	const writable_props = ["clients"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Clients> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Clients", $$slots, []);

    	$$self.$set = $$props => {
    		if ("clients" in $$props) $$invalidate(0, clients = $$props.clients);
    	};

    	$$self.$capture_state = () => ({ d3, clients, getClients, getClientData });

    	$$self.$inject_state = $$props => {
    		if ("clients" in $$props) $$invalidate(0, clients = $$props.clients);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [clients, getClients];
    }

    class Clients extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$k, create_fragment$k, safe_not_equal, { clients: 0, getClients: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Clients",
    			options,
    			id: create_fragment$k.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*clients*/ ctx[0] === undefined && !("clients" in props)) {
    			console.warn("<Clients> was created without expected prop 'clients'");
    		}
    	}

    	get clients() {
    		throw new Error("<Clients>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set clients(value) {
    		throw new Error("<Clients>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getClients() {
    		return this.$$.ctx[1];
    	}

    	set getClients(value) {
    		throw new Error("<Clients>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/apps/components/invoice/Work.svelte generated by Svelte v3.24.0 */
    const file$9 = "src/apps/components/invoice/Work.svelte";

    function get_each_context$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[6] = list[i];
    	child_ctx[8] = i;
    	return child_ctx;
    }

    // (68:0) {#if (!!entries && entries.length > 0)}
    function create_if_block$6(ctx) {
    	let each_1_anchor;
    	let each_value = /*entries*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*entries, Date, selection*/ 3) {
    				each_value = /*entries*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$5(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(68:0) {#if (!!entries && entries.length > 0)}",
    		ctx
    	});

    	return block;
    }

    // (69:0) {#each entries as entry, idx}
    function create_each_block$5(ctx) {
    	let article;
    	let ul;
    	let li0;
    	let input0;
    	let input0_value_value;
    	let t0;
    	let li1;
    	let div0;
    	let input1;
    	let input1_name_value;
    	let input1_value_value;
    	let t1;
    	let li2;
    	let span0;
    	let t2_value = /*entry*/ ctx[6].code + "";
    	let t2;
    	let t3;
    	let li3;
    	let span1;
    	let t4_value = /*entry*/ ctx[6].description + "";
    	let t4;
    	let t5;
    	let li4;
    	let div1;
    	let span2;
    	let t6_value = new Date(/*entry*/ ctx[6].date).toDateString().replace(" ", ", ") + "";
    	let t6;
    	let t7;
    	let div2;
    	let span3;
    	let t8_value = /*entry*/ ctx[6].price + "";
    	let t8;
    	let t9;
    	let div3;
    	let span4;
    	let t10_value = /*entry*/ ctx[6].qt + "";
    	let t10;
    	let t11;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			article = element("article");
    			ul = element("ul");
    			li0 = element("li");
    			input0 = element("input");
    			t0 = space();
    			li1 = element("li");
    			div0 = element("div");
    			input1 = element("input");
    			t1 = space();
    			li2 = element("li");
    			span0 = element("span");
    			t2 = text(t2_value);
    			t3 = space();
    			li3 = element("li");
    			span1 = element("span");
    			t4 = text(t4_value);
    			t5 = space();
    			li4 = element("li");
    			div1 = element("div");
    			span2 = element("span");
    			t6 = text(t6_value);
    			t7 = text(", \n                ");
    			div2 = element("div");
    			span3 = element("span");
    			t8 = text(t8_value);
    			t9 = text(" \n                ");
    			div3 = element("div");
    			span4 = element("span");
    			t10 = text(t10_value);
    			t11 = space();
    			attr_dev(input0, "class", "key");
    			attr_dev(input0, "type", "hidden");
    			input0.value = input0_value_value = /*entry*/ ctx[6].code + "-" + /*idx*/ ctx[8];
    			add_location(input0, file$9, 71, 16, 1423);
    			attr_dev(li0, "class", "svelte-13kk8ax");
    			add_location(li0, file$9, 71, 12, 1419);
    			attr_dev(input1, "class", "action");
    			attr_dev(input1, "name", input1_name_value = /*entry*/ ctx[6].code + "-" + /*idx*/ ctx[8]);
    			attr_dev(input1, "type", "checkbox");
    			input1.__value = input1_value_value = /*entry*/ ctx[6];
    			input1.value = input1.__value;
    			/*$$binding_groups*/ ctx[4][0].push(input1);
    			add_location(input1, file$9, 74, 20, 1571);
    			attr_dev(div0, "flex", "");
    			add_location(div0, file$9, 73, 16, 1540);
    			attr_dev(li1, "flex", "25");
    			attr_dev(li1, "class", "svelte-13kk8ax");
    			add_location(li1, file$9, 72, 12, 1509);
    			attr_dev(span0, "class", "code");
    			add_location(span0, file$9, 81, 21, 1855);
    			attr_dev(li2, "flex", "");
    			attr_dev(li2, "class", "svelte-13kk8ax");
    			add_location(li2, file$9, 81, 12, 1846);
    			attr_dev(span1, "class", "description");
    			add_location(span1, file$9, 82, 21, 1920);
    			attr_dev(li3, "flex", "");
    			attr_dev(li3, "class", "svelte-13kk8ax");
    			add_location(li3, file$9, 82, 12, 1911);
    			attr_dev(span2, "class", "date");
    			add_location(span2, file$9, 84, 26, 2038);
    			attr_dev(div1, "flex", "");
    			add_location(div1, file$9, 84, 16, 2028);
    			attr_dev(span3, "class", "price");
    			add_location(span3, file$9, 85, 26, 2162);
    			attr_dev(div2, "flex", "");
    			add_location(div2, file$9, 85, 16, 2152);
    			attr_dev(span4, "class", "qt");
    			add_location(span4, file$9, 86, 26, 2241);
    			attr_dev(div3, "flex", "");
    			add_location(div3, file$9, 86, 16, 2231);
    			attr_dev(li4, "flex", "50");
    			attr_dev(li4, "layout", "");
    			attr_dev(li4, "class", "svelte-13kk8ax");
    			add_location(li4, file$9, 83, 12, 1990);
    			attr_dev(ul, "class", "asset svelte-13kk8ax");
    			attr_dev(ul, "layout", "");
    			add_location(ul, file$9, 70, 8, 1381);
    			attr_dev(article, "class", "svelte-13kk8ax");
    			add_location(article, file$9, 69, 4, 1363);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, article, anchor);
    			append_dev(article, ul);
    			append_dev(ul, li0);
    			append_dev(li0, input0);
    			append_dev(ul, t0);
    			append_dev(ul, li1);
    			append_dev(li1, div0);
    			append_dev(div0, input1);
    			input1.checked = ~/*selection*/ ctx[0].indexOf(input1.__value);
    			append_dev(ul, t1);
    			append_dev(ul, li2);
    			append_dev(li2, span0);
    			append_dev(span0, t2);
    			append_dev(ul, t3);
    			append_dev(ul, li3);
    			append_dev(li3, span1);
    			append_dev(span1, t4);
    			append_dev(ul, t5);
    			append_dev(ul, li4);
    			append_dev(li4, div1);
    			append_dev(div1, span2);
    			append_dev(span2, t6);
    			append_dev(li4, t7);
    			append_dev(li4, div2);
    			append_dev(div2, span3);
    			append_dev(span3, t8);
    			append_dev(li4, t9);
    			append_dev(li4, div3);
    			append_dev(div3, span4);
    			append_dev(span4, t10);
    			append_dev(article, t11);

    			if (!mounted) {
    				dispose = listen_dev(input1, "change", /*input1_change_handler*/ ctx[3]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*entries*/ 2 && input0_value_value !== (input0_value_value = /*entry*/ ctx[6].code + "-" + /*idx*/ ctx[8])) {
    				prop_dev(input0, "value", input0_value_value);
    			}

    			if (dirty & /*entries*/ 2 && input1_name_value !== (input1_name_value = /*entry*/ ctx[6].code + "-" + /*idx*/ ctx[8])) {
    				attr_dev(input1, "name", input1_name_value);
    			}

    			if (dirty & /*entries*/ 2 && input1_value_value !== (input1_value_value = /*entry*/ ctx[6])) {
    				prop_dev(input1, "__value", input1_value_value);
    				input1.value = input1.__value;
    			}

    			if (dirty & /*selection*/ 1) {
    				input1.checked = ~/*selection*/ ctx[0].indexOf(input1.__value);
    			}

    			if (dirty & /*entries*/ 2 && t2_value !== (t2_value = /*entry*/ ctx[6].code + "")) set_data_dev(t2, t2_value);
    			if (dirty & /*entries*/ 2 && t4_value !== (t4_value = /*entry*/ ctx[6].description + "")) set_data_dev(t4, t4_value);
    			if (dirty & /*entries*/ 2 && t6_value !== (t6_value = new Date(/*entry*/ ctx[6].date).toDateString().replace(" ", ", ") + "")) set_data_dev(t6, t6_value);
    			if (dirty & /*entries*/ 2 && t8_value !== (t8_value = /*entry*/ ctx[6].price + "")) set_data_dev(t8, t8_value);
    			if (dirty & /*entries*/ 2 && t10_value !== (t10_value = /*entry*/ ctx[6].qt + "")) set_data_dev(t10, t10_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(article);
    			/*$$binding_groups*/ ctx[4][0].splice(/*$$binding_groups*/ ctx[4][0].indexOf(input1), 1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$5.name,
    		type: "each",
    		source: "(69:0) {#each entries as entry, idx}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$l(ctx) {
    	let if_block_anchor;
    	let if_block = !!/*entries*/ ctx[1] && /*entries*/ ctx[1].length > 0 && create_if_block$6(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (!!/*entries*/ ctx[1] && /*entries*/ ctx[1].length > 0) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$6(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let { selection = [] } = $$props;

    	const getWorkEntries = async data => {
    		$$invalidate(1, entries = await getWorkData(data));
    		return entries;
    	};

    	let entries;

    	async function getWorkData(data) {
    		return (await csv$1(data)).map(d => ({
    			// TODO: validate field values...
    			org: d["org"],
    			code: d["code"],
    			description: d["description"],
    			date: d["date"],
    			price: +d["price"], // make number
    			qt: +d["qt"], // make number

    		}));
    	}

    	const writable_props = ["selection"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Work> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Work", $$slots, []);
    	const $$binding_groups = [[]];

    	function input1_change_handler() {
    		selection = get_binding_group_value($$binding_groups[0], this.__value, this.checked);
    		$$invalidate(0, selection);
    	}

    	$$self.$set = $$props => {
    		if ("selection" in $$props) $$invalidate(0, selection = $$props.selection);
    	};

    	$$self.$capture_state = () => ({
    		d3,
    		selection,
    		getWorkEntries,
    		entries,
    		getWorkData
    	});

    	$$self.$inject_state = $$props => {
    		if ("selection" in $$props) $$invalidate(0, selection = $$props.selection);
    		if ("entries" in $$props) $$invalidate(1, entries = $$props.entries);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [selection, entries, getWorkEntries, input1_change_handler, $$binding_groups];
    }

    class Work extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$l, create_fragment$l, safe_not_equal, { selection: 0, getWorkEntries: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Work",
    			options,
    			id: create_fragment$l.name
    		});
    	}

    	get selection() {
    		throw new Error("<Work>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selection(value) {
    		throw new Error("<Work>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get getWorkEntries() {
    		return this.$$.ctx[2];
    	}

    	set getWorkEntries(value) {
    		throw new Error("<Work>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/apps/InvoiceApp.svelte generated by Svelte v3.24.0 */

    const { console: console_1$5 } = globals;
    const file$a = "src/apps/InvoiceApp.svelte";

    function get_each_context$6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	return child_ctx;
    }

    // (150:4) {#if (!!workSelection && workSelection.length > 0)}
    function create_if_block_1$3(ctx) {
    	let each_1_anchor;
    	let each_value = /*workSelection*/ ctx[7];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*workSelection*/ 128) {
    				each_value = /*workSelection*/ ctx[7];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$6(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$6(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(150:4) {#if (!!workSelection && workSelection.length > 0)}",
    		ctx
    	});

    	return block;
    }

    // (151:8) {#each workSelection as selected}
    function create_each_block$6(ctx) {
    	let p;
    	let t0_value = /*selected*/ ctx[17].org + "";
    	let t0;
    	let t1;
    	let t2_value = /*selected*/ ctx[17].description + "";
    	let t2;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t0 = text(t0_value);
    			t1 = text(" - ");
    			t2 = text(t2_value);
    			add_location(p, file$a, 151, 12, 3735);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t0);
    			append_dev(p, t1);
    			append_dev(p, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*workSelection*/ 128 && t0_value !== (t0_value = /*selected*/ ctx[17].org + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*workSelection*/ 128 && t2_value !== (t2_value = /*selected*/ ctx[17].description + "")) set_data_dev(t2, t2_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$6.name,
    		type: "each",
    		source: "(151:8) {#each workSelection as selected}",
    		ctx
    	});

    	return block;
    }

    // (156:4) {#if (invoiceResult != null)}
    function create_if_block$7(ctx) {
    	let p;
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(/*invoiceResult*/ ctx[8]);
    			add_location(p, file$a, 156, 8, 3851);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*invoiceResult*/ 256) set_data_dev(t, /*invoiceResult*/ ctx[8]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(156:4) {#if (invoiceResult != null)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$m(ctx) {
    	let div3;
    	let h4;
    	let t0;
    	let t1;
    	let div0;
    	let emitter_1;
    	let updating_emitter;
    	let updating_getEmitters;
    	let t2;
    	let div1;
    	let clients_1;
    	let updating_clients;
    	let updating_getClients;
    	let t3;
    	let br0;
    	let br1;
    	let br2;
    	let t4;
    	let div2;
    	let work;
    	let updating_getWorkEntries;
    	let updating_selection;
    	let t5;
    	let input;
    	let t6;
    	let t7;
    	let t8;
    	let button;
    	let t9;
    	let current;
    	let mounted;
    	let dispose;

    	function emitter_1_emitter_binding(value) {
    		/*emitter_1_emitter_binding*/ ctx[11].call(null, value);
    	}

    	function emitter_1_getEmitters_binding(value) {
    		/*emitter_1_getEmitters_binding*/ ctx[12].call(null, value);
    	}

    	let emitter_1_props = {};

    	if (/*emitter*/ ctx[3] !== void 0) {
    		emitter_1_props.emitter = /*emitter*/ ctx[3];
    	}

    	if (/*getEmitters*/ ctx[2] !== void 0) {
    		emitter_1_props.getEmitters = /*getEmitters*/ ctx[2];
    	}

    	emitter_1 = new Emitter({ props: emitter_1_props, $$inline: true });
    	binding_callbacks.push(() => bind(emitter_1, "emitter", emitter_1_emitter_binding));
    	binding_callbacks.push(() => bind(emitter_1, "getEmitters", emitter_1_getEmitters_binding));

    	function clients_1_clients_binding(value) {
    		/*clients_1_clients_binding*/ ctx[13].call(null, value);
    	}

    	function clients_1_getClients_binding(value) {
    		/*clients_1_getClients_binding*/ ctx[14].call(null, value);
    	}

    	let clients_1_props = {};

    	if (/*clients*/ ctx[5] !== void 0) {
    		clients_1_props.clients = /*clients*/ ctx[5];
    	}

    	if (/*getClients*/ ctx[4] !== void 0) {
    		clients_1_props.getClients = /*getClients*/ ctx[4];
    	}

    	clients_1 = new Clients({ props: clients_1_props, $$inline: true });
    	binding_callbacks.push(() => bind(clients_1, "clients", clients_1_clients_binding));
    	binding_callbacks.push(() => bind(clients_1, "getClients", clients_1_getClients_binding));

    	function work_getWorkEntries_binding(value) {
    		/*work_getWorkEntries_binding*/ ctx[15].call(null, value);
    	}

    	function work_selection_binding(value) {
    		/*work_selection_binding*/ ctx[16].call(null, value);
    	}

    	let work_props = {};

    	if (/*getWork*/ ctx[6] !== void 0) {
    		work_props.getWorkEntries = /*getWork*/ ctx[6];
    	}

    	if (/*workSelection*/ ctx[7] !== void 0) {
    		work_props.selection = /*workSelection*/ ctx[7];
    	}

    	work = new Work({ props: work_props, $$inline: true });
    	binding_callbacks.push(() => bind(work, "getWorkEntries", work_getWorkEntries_binding));
    	binding_callbacks.push(() => bind(work, "selection", work_selection_binding));
    	let if_block0 = !!/*workSelection*/ ctx[7] && /*workSelection*/ ctx[7].length > 0 && create_if_block_1$3(ctx);
    	let if_block1 = /*invoiceResult*/ ctx[8] != null && create_if_block$7(ctx);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			h4 = element("h4");
    			t0 = text(/*title*/ ctx[0]);
    			t1 = space();
    			div0 = element("div");
    			create_component(emitter_1.$$.fragment);
    			t2 = space();
    			div1 = element("div");
    			create_component(clients_1.$$.fragment);
    			t3 = space();
    			br0 = element("br");
    			br1 = element("br");
    			br2 = element("br");
    			t4 = space();
    			div2 = element("div");
    			create_component(work.$$.fragment);
    			t5 = space();
    			input = element("input");
    			t6 = space();
    			if (if_block0) if_block0.c();
    			t7 = space();
    			if (if_block1) if_block1.c();
    			t8 = space();
    			button = element("button");
    			t9 = text(/*buttonText*/ ctx[1]);
    			attr_dev(h4, "class", "svelte-1qwp1dw");
    			add_location(h4, file$a, 131, 4, 3182);
    			attr_dev(div0, "class", "emitter svelte-1qwp1dw");
    			add_location(div0, file$a, 133, 4, 3204);
    			attr_dev(div1, "class", "clients svelte-1qwp1dw");
    			add_location(div1, file$a, 137, 4, 3320);
    			add_location(br0, file$a, 141, 4, 3434);
    			add_location(br1, file$a, 141, 10, 3440);
    			add_location(br2, file$a, 141, 16, 3446);
    			attr_dev(div2, "class", "work svelte-1qwp1dw");
    			add_location(div2, file$a, 143, 4, 3458);
    			attr_dev(input, "name", "note");
    			attr_dev(input, "type", "text");
    			input.value = /*note*/ ctx[9];
    			add_location(input, file$a, 147, 4, 3575);
    			attr_dev(button, "class", "svelte-1qwp1dw");
    			add_location(button, file$a, 159, 4, 3889);
    			attr_dev(div3, "class", "invoice-controls svelte-1qwp1dw");
    			add_location(div3, file$a, 129, 0, 3146);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, h4);
    			append_dev(h4, t0);
    			append_dev(div3, t1);
    			append_dev(div3, div0);
    			mount_component(emitter_1, div0, null);
    			append_dev(div3, t2);
    			append_dev(div3, div1);
    			mount_component(clients_1, div1, null);
    			append_dev(div3, t3);
    			append_dev(div3, br0);
    			append_dev(div3, br1);
    			append_dev(div3, br2);
    			append_dev(div3, t4);
    			append_dev(div3, div2);
    			mount_component(work, div2, null);
    			append_dev(div3, t5);
    			append_dev(div3, input);
    			append_dev(div3, t6);
    			if (if_block0) if_block0.m(div3, null);
    			append_dev(div3, t7);
    			if (if_block1) if_block1.m(div3, null);
    			append_dev(div3, t8);
    			append_dev(div3, button);
    			append_dev(button, t9);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*handleClick*/ ctx[10], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*title*/ 1) set_data_dev(t0, /*title*/ ctx[0]);
    			const emitter_1_changes = {};

    			if (!updating_emitter && dirty & /*emitter*/ 8) {
    				updating_emitter = true;
    				emitter_1_changes.emitter = /*emitter*/ ctx[3];
    				add_flush_callback(() => updating_emitter = false);
    			}

    			if (!updating_getEmitters && dirty & /*getEmitters*/ 4) {
    				updating_getEmitters = true;
    				emitter_1_changes.getEmitters = /*getEmitters*/ ctx[2];
    				add_flush_callback(() => updating_getEmitters = false);
    			}

    			emitter_1.$set(emitter_1_changes);
    			const clients_1_changes = {};

    			if (!updating_clients && dirty & /*clients*/ 32) {
    				updating_clients = true;
    				clients_1_changes.clients = /*clients*/ ctx[5];
    				add_flush_callback(() => updating_clients = false);
    			}

    			if (!updating_getClients && dirty & /*getClients*/ 16) {
    				updating_getClients = true;
    				clients_1_changes.getClients = /*getClients*/ ctx[4];
    				add_flush_callback(() => updating_getClients = false);
    			}

    			clients_1.$set(clients_1_changes);
    			const work_changes = {};

    			if (!updating_getWorkEntries && dirty & /*getWork*/ 64) {
    				updating_getWorkEntries = true;
    				work_changes.getWorkEntries = /*getWork*/ ctx[6];
    				add_flush_callback(() => updating_getWorkEntries = false);
    			}

    			if (!updating_selection && dirty & /*workSelection*/ 128) {
    				updating_selection = true;
    				work_changes.selection = /*workSelection*/ ctx[7];
    				add_flush_callback(() => updating_selection = false);
    			}

    			work.$set(work_changes);

    			if (!!/*workSelection*/ ctx[7] && /*workSelection*/ ctx[7].length > 0) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_1$3(ctx);
    					if_block0.c();
    					if_block0.m(div3, t7);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*invoiceResult*/ ctx[8] != null) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$7(ctx);
    					if_block1.c();
    					if_block1.m(div3, t8);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (!current || dirty & /*buttonText*/ 2) set_data_dev(t9, /*buttonText*/ ctx[1]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(emitter_1.$$.fragment, local);
    			transition_in(clients_1.$$.fragment, local);
    			transition_in(work.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(emitter_1.$$.fragment, local);
    			transition_out(clients_1.$$.fragment, local);
    			transition_out(work.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_component(emitter_1);
    			destroy_component(clients_1);
    			destroy_component(work);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$m($$self, $$props, $$invalidate) {
    	let { title } = $$props;
    	let buttonText = "Create Invoice";
    	let getEmitters;
    	let emitter;
    	let getClients;
    	let clients;
    	let getWork;
    	let workSelection;
    	let note = "";
    	let invoiceResult = null;

    	async function handleClick() {
    		$$invalidate(1, buttonText = "Building ...");

    		if (!!workSelection && workSelection.length > 0) {
    			let client;

    			workSelection.filter(w => clients.filter(c => {
    				if (c["org"] === w["org"]) {
    					client = c;
    					return true;
    				}
    			}).length > 0);

    			if (!!client) {
    				const invoiceData = {
    					emitter,
    					client,
    					workEntries: workSelection
    				};

    				if (!!note) {
    					invoiceData["note"] = note;
    				}

    				await fetch("/create-invoice", {
    					// headers: {},
    					method: "POST",
    					body: JSON.stringify(invoiceData)
    				}).then(res => res.json()).then(json => $$invalidate(8, invoiceResult = JSON.stringify(json)) && console.log("Response: ", json)).catch(err => $$invalidate(8, invoiceResult = err) && console.error(err));
    			} else {
    				window.alert("Work entries do not match any client!");
    			}
    		} else {
    			window.alert("Not work entries have been selected!");
    		}

    		$$invalidate(1, buttonText = "Create Invoice");
    	}

    	onMount(async () => {
    		if (typeof getEmitters === "function" && typeof getClients === "function" && typeof getWork === "function") {
    			console.log("Retrieving work data: ");
    			console.log(await getEmitters("shop/data/emitter.csv"));
    			console.log(await getClients("shop/data/clients.csv"));
    			console.log(await getWork("shop/data/work.csv"));
    		}
    	});

    	const writable_props = ["title"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$5.warn(`<InvoiceApp> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("InvoiceApp", $$slots, []);

    	function emitter_1_emitter_binding(value) {
    		emitter = value;
    		$$invalidate(3, emitter);
    	}

    	function emitter_1_getEmitters_binding(value) {
    		getEmitters = value;
    		$$invalidate(2, getEmitters);
    	}

    	function clients_1_clients_binding(value) {
    		clients = value;
    		$$invalidate(5, clients);
    	}

    	function clients_1_getClients_binding(value) {
    		getClients = value;
    		$$invalidate(4, getClients);
    	}

    	function work_getWorkEntries_binding(value) {
    		getWork = value;
    		$$invalidate(6, getWork);
    	}

    	function work_selection_binding(value) {
    		workSelection = value;
    		$$invalidate(7, workSelection);
    	}

    	$$self.$set = $$props => {
    		if ("title" in $$props) $$invalidate(0, title = $$props.title);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		Emitter,
    		Clients,
    		Work,
    		title,
    		buttonText,
    		getEmitters,
    		emitter,
    		getClients,
    		clients,
    		getWork,
    		workSelection,
    		note,
    		invoiceResult,
    		handleClick
    	});

    	$$self.$inject_state = $$props => {
    		if ("title" in $$props) $$invalidate(0, title = $$props.title);
    		if ("buttonText" in $$props) $$invalidate(1, buttonText = $$props.buttonText);
    		if ("getEmitters" in $$props) $$invalidate(2, getEmitters = $$props.getEmitters);
    		if ("emitter" in $$props) $$invalidate(3, emitter = $$props.emitter);
    		if ("getClients" in $$props) $$invalidate(4, getClients = $$props.getClients);
    		if ("clients" in $$props) $$invalidate(5, clients = $$props.clients);
    		if ("getWork" in $$props) $$invalidate(6, getWork = $$props.getWork);
    		if ("workSelection" in $$props) $$invalidate(7, workSelection = $$props.workSelection);
    		if ("note" in $$props) $$invalidate(9, note = $$props.note);
    		if ("invoiceResult" in $$props) $$invalidate(8, invoiceResult = $$props.invoiceResult);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		title,
    		buttonText,
    		getEmitters,
    		emitter,
    		getClients,
    		clients,
    		getWork,
    		workSelection,
    		invoiceResult,
    		note,
    		handleClick,
    		emitter_1_emitter_binding,
    		emitter_1_getEmitters_binding,
    		clients_1_clients_binding,
    		clients_1_getClients_binding,
    		work_getWorkEntries_binding,
    		work_selection_binding
    	];
    }

    class InvoiceApp extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$m, create_fragment$m, safe_not_equal, { title: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "InvoiceApp",
    			options,
    			id: create_fragment$m.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*title*/ ctx[0] === undefined && !("title" in props)) {
    			console_1$5.warn("<InvoiceApp> was created without expected prop 'title'");
    		}
    	}

    	get title() {
    		throw new Error("<InvoiceApp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<InvoiceApp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/apps/components/Keypad.svelte generated by Svelte v3.24.0 */

    const { console: console_1$6 } = globals;
    const file$b = "src/apps/components/Keypad.svelte";

    function create_fragment$n(ctx) {
    	let div;
    	let button0;
    	let t1;
    	let button1;
    	let t3;
    	let button2;
    	let t5;
    	let button3;
    	let t7;
    	let button4;
    	let t9;
    	let button5;
    	let t11;
    	let button6;
    	let t13;
    	let button7;
    	let t15;
    	let button8;
    	let t17;
    	let button9;
    	let t18;
    	let button9_disabled_value;
    	let t19;
    	let button10;
    	let t21;
    	let button11;
    	let t22;
    	let button11_disabled_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			button0 = element("button");
    			button0.textContent = "1";
    			t1 = space();
    			button1 = element("button");
    			button1.textContent = "2";
    			t3 = space();
    			button2 = element("button");
    			button2.textContent = "3";
    			t5 = space();
    			button3 = element("button");
    			button3.textContent = "4";
    			t7 = space();
    			button4 = element("button");
    			button4.textContent = "5";
    			t9 = space();
    			button5 = element("button");
    			button5.textContent = "6";
    			t11 = space();
    			button6 = element("button");
    			button6.textContent = "7";
    			t13 = space();
    			button7 = element("button");
    			button7.textContent = "8";
    			t15 = space();
    			button8 = element("button");
    			button8.textContent = "9";
    			t17 = space();
    			button9 = element("button");
    			t18 = text("clear");
    			t19 = space();
    			button10 = element("button");
    			button10.textContent = "0";
    			t21 = space();
    			button11 = element("button");
    			t22 = text("submit");
    			attr_dev(button0, "class", "svelte-el36x5");
    			add_location(button0, file$b, 57, 1, 1114);
    			attr_dev(button1, "class", "svelte-el36x5");
    			add_location(button1, file$b, 58, 1, 1155);
    			attr_dev(button2, "class", "svelte-el36x5");
    			add_location(button2, file$b, 59, 1, 1196);
    			attr_dev(button3, "class", "svelte-el36x5");
    			add_location(button3, file$b, 60, 1, 1237);
    			attr_dev(button4, "class", "svelte-el36x5");
    			add_location(button4, file$b, 61, 1, 1278);
    			attr_dev(button5, "class", "svelte-el36x5");
    			add_location(button5, file$b, 62, 1, 1319);
    			attr_dev(button6, "class", "svelte-el36x5");
    			add_location(button6, file$b, 63, 1, 1360);
    			attr_dev(button7, "class", "svelte-el36x5");
    			add_location(button7, file$b, 64, 1, 1401);
    			attr_dev(button8, "class", "svelte-el36x5");
    			add_location(button8, file$b, 65, 1, 1442);
    			button9.disabled = button9_disabled_value = !/*value*/ ctx[0];
    			attr_dev(button9, "class", "svelte-el36x5");
    			add_location(button9, file$b, 67, 1, 1484);
    			attr_dev(button10, "class", "svelte-el36x5");
    			add_location(button10, file$b, 68, 1, 1543);
    			button11.disabled = button11_disabled_value = !/*value*/ ctx[0];
    			attr_dev(button11, "class", "svelte-el36x5");
    			add_location(button11, file$b, 69, 1, 1584);
    			attr_dev(div, "class", "keypad svelte-el36x5");
    			add_location(div, file$b, 56, 0, 1092);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, button0);
    			append_dev(div, t1);
    			append_dev(div, button1);
    			append_dev(div, t3);
    			append_dev(div, button2);
    			append_dev(div, t5);
    			append_dev(div, button3);
    			append_dev(div, t7);
    			append_dev(div, button4);
    			append_dev(div, t9);
    			append_dev(div, button5);
    			append_dev(div, t11);
    			append_dev(div, button6);
    			append_dev(div, t13);
    			append_dev(div, button7);
    			append_dev(div, t15);
    			append_dev(div, button8);
    			append_dev(div, t17);
    			append_dev(div, button9);
    			append_dev(button9, t18);
    			append_dev(div, t19);
    			append_dev(div, button10);
    			append_dev(div, t21);
    			append_dev(div, button11);
    			append_dev(button11, t22);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*select*/ ctx[1](1), false, false, false),
    					listen_dev(button1, "click", /*select*/ ctx[1](2), false, false, false),
    					listen_dev(button2, "click", /*select*/ ctx[1](3), false, false, false),
    					listen_dev(button3, "click", /*select*/ ctx[1](4), false, false, false),
    					listen_dev(button4, "click", /*select*/ ctx[1](5), false, false, false),
    					listen_dev(button5, "click", /*select*/ ctx[1](6), false, false, false),
    					listen_dev(button6, "click", /*select*/ ctx[1](7), false, false, false),
    					listen_dev(button7, "click", /*select*/ ctx[1](8), false, false, false),
    					listen_dev(button8, "click", /*select*/ ctx[1](9), false, false, false),
    					listen_dev(button9, "click", /*clear*/ ctx[2], false, false, false),
    					listen_dev(button10, "click", /*select*/ ctx[1](0), false, false, false),
    					listen_dev(button11, "click", /*submit*/ ctx[3], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*value*/ 1 && button9_disabled_value !== (button9_disabled_value = !/*value*/ ctx[0])) {
    				prop_dev(button9, "disabled", button9_disabled_value);
    			}

    			if (dirty & /*value*/ 1 && button11_disabled_value !== (button11_disabled_value = !/*value*/ ctx[0])) {
    				prop_dev(button11, "disabled", button11_disabled_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$n($$self, $$props, $$invalidate) {
    	let { value = "" } = $$props;
    	const dispatch = createEventDispatcher();
    	const select = num => () => $$invalidate(0, value = `${value}${num}`);
    	const clear = () => $$invalidate(0, value = "");
    	const submit = () => dispatch("submit");

    	document.addEventListener("keydown", function (event) {
    		const kbEvent = event || window["event"]; // cross-browser shenanigans
    		console.log(kbEvent);

    		if (kbEvent["keyCode"] === 13) {
    			// Enter
    			submit();

    			kbEvent.preventDefault();
    		} else if (kbEvent["keyCode"] === 8 || kbEvent["keyCode"] === 46) {
    			// Backspace or Delete
    			clear();

    			kbEvent.preventDefault();
    		} else if (47 < kbEvent["keyCode"] && kbEvent["keyCode"] < 58) {
    			// numbers
    			$$invalidate(0, value = `${value}${kbEvent["key"]}`);

    			console.log(value);
    			kbEvent.preventDefault();
    		} else {
    			console.log("Keyboard Event: ", kbEvent["keyCode"]);
    		}

    		return true;
    	});

    	const writable_props = ["value"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$6.warn(`<Keypad> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Keypad", $$slots, []);

    	$$self.$set = $$props => {
    		if ("value" in $$props) $$invalidate(0, value = $$props.value);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		value,
    		dispatch,
    		select,
    		clear,
    		submit
    	});

    	$$self.$inject_state = $$props => {
    		if ("value" in $$props) $$invalidate(0, value = $$props.value);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [value, select, clear, submit];
    }

    class Keypad extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$n, create_fragment$n, safe_not_equal, { value: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Keypad",
    			options,
    			id: create_fragment$n.name
    		});
    	}

    	get value() {
    		throw new Error("<Keypad>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Keypad>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/apps/TechApp.svelte generated by Svelte v3.24.0 */
    const file$c = "src/apps/TechApp.svelte";

    // (70:1) <GL.OrbitControls maxPolarAngle={Math.PI / 2} {location} {target}>
    function create_default_slot_2$4(ctx) {
    	let t0_value = /*captureViewDirection*/ ctx[10](/*location*/ ctx[7], /*target*/ ctx[9]) + "";
    	let t0;
    	let t1;
    	let gl_perspectivecamera;
    	let updating_location;
    	let current;

    	function gl_perspectivecamera_location_binding(value) {
    		/*gl_perspectivecamera_location_binding*/ ctx[13].call(null, value);
    	}

    	let gl_perspectivecamera_props = { lookAt: "center", near: 0.01, far: 1000 };

    	if (/*location*/ ctx[7] !== void 0) {
    		gl_perspectivecamera_props.location = /*location*/ ctx[7];
    	}

    	gl_perspectivecamera = new PerspectiveCamera({
    			props: gl_perspectivecamera_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(gl_perspectivecamera, "location", gl_perspectivecamera_location_binding));

    	const block = {
    		c: function create() {
    			t0 = text(t0_value);
    			t1 = space();
    			create_component(gl_perspectivecamera.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(gl_perspectivecamera, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*location*/ 128) && t0_value !== (t0_value = /*captureViewDirection*/ ctx[10](/*location*/ ctx[7], /*target*/ ctx[9]) + "")) set_data_dev(t0, t0_value);
    			const gl_perspectivecamera_changes = {};

    			if (!updating_location && dirty & /*location*/ 128) {
    				updating_location = true;
    				gl_perspectivecamera_changes.location = /*location*/ ctx[7];
    				add_flush_callback(() => updating_location = false);
    			}

    			gl_perspectivecamera.$set(gl_perspectivecamera_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_perspectivecamera.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_perspectivecamera.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			destroy_component(gl_perspectivecamera, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$4.name,
    		type: "slot",
    		source: "(70:1) <GL.OrbitControls maxPolarAngle={Math.PI / 2} {location} {target}>",
    		ctx
    	});

    	return block;
    }

    // (150:1) <GL.Group location={[light.x,light.y,light.z]}>
    function create_default_slot_1$4(ctx) {
    	let gl_mesh;
    	let t;
    	let gl_pointlight;
    	let current;

    	gl_mesh = new Mesh({
    			props: {
    				geometry: sphere({ turns: 36, bands: 36 }),
    				location: [0, 0.2, 0],
    				scale: 0.1,
    				uniforms: { color: 16777215, emissive: 16711680 }
    			},
    			$$inline: true
    		});

    	gl_pointlight = new PointLight({
    			props: {
    				location: [0, 0, 0],
    				color: 16711680,
    				intensity: 0.6
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(gl_mesh.$$.fragment);
    			t = space();
    			create_component(gl_pointlight.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(gl_mesh, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(gl_pointlight, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_mesh.$$.fragment, local);
    			transition_in(gl_pointlight.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_mesh.$$.fragment, local);
    			transition_out(gl_pointlight.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gl_mesh, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(gl_pointlight, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$4.name,
    		type: "slot",
    		source: "(150:1) <GL.Group location={[light.x,light.y,light.z]}>",
    		ctx
    	});

    	return block;
    }

    // (67:0) <GL.Scene>
    function create_default_slot$5(ctx) {
    	let gl_target;
    	let t0;
    	let gl_orbitcontrols;
    	let t1;
    	let gl_ambientlight;
    	let t2;
    	let gl_directionallight;
    	let t3;
    	let gl_mesh0;
    	let t4;
    	let gl_mesh1;
    	let t5;
    	let gl_mesh2;
    	let t6;
    	let gl_mesh3;
    	let t7;
    	let gl_mesh4;
    	let t8;
    	let gl_mesh5;
    	let t9;
    	let gl_mesh6;
    	let t10;
    	let gl_mesh7;
    	let t11;
    	let gl_group;
    	let current;

    	gl_target = new Target({
    			props: {
    				id: "center",
    				location: [0, /*h*/ ctx[4] / 2, 0]
    			},
    			$$inline: true
    		});

    	gl_orbitcontrols = new OrbitControls({
    			props: {
    				maxPolarAngle: Math.PI / 2,
    				location: /*location*/ ctx[7],
    				target: /*target*/ ctx[9],
    				$$slots: { default: [create_default_slot_2$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	gl_ambientlight = new AmbientLight({
    			props: { intensity: 0.3 },
    			$$inline: true
    		});

    	gl_directionallight = new DirectionalLight({
    			props: { direction: [-1, -1, -1], intensity: 0.5 },
    			$$inline: true
    		});

    	gl_mesh0 = new Mesh({
    			props: {
    				geometry: box({}),
    				location: [0, /*h*/ ctx[4] / 2, 0],
    				rotation: [0, -20, 0],
    				scale: [/*w*/ ctx[3], /*h*/ ctx[4], /*d*/ ctx[5]],
    				uniforms: {
    					color: /*from_hex*/ ctx[11](/*color*/ ctx[0])
    				}
    			},
    			$$inline: true
    		});

    	gl_mesh1 = new Mesh({
    			props: {
    				geometry: sphere({ turns: 36, bands: 36 }),
    				location: [-0.5, 0.4, 1.2],
    				scale: 0.4,
    				uniforms: { color: 1193046, alpha: 0.9 },
    				transparent: true
    			},
    			$$inline: true
    		});

    	gl_mesh2 = new Mesh({
    			props: {
    				geometry: sphere({ turns: 36, bands: 36 }),
    				location: [-1.4, 0.6, 0.2],
    				scale: 0.6,
    				uniforms: { color: 3368516, alpha: 1 },
    				transparent: true
    			},
    			$$inline: true
    		});

    	gl_mesh3 = new Mesh({
    			props: {
    				geometry: plane(),
    				location: [0, -0.01, 0],
    				rotation: [-90, 0, 0],
    				scale: 10,
    				uniforms: { color: 16777215 }
    			},
    			$$inline: true
    		});

    	gl_mesh4 = new Mesh({
    			props: {
    				geometry: plane(),
    				location: [0, 5, 0],
    				rotation: [90, 0, 0],
    				scale: 10,
    				uniforms: { color: 16777215 }
    			},
    			$$inline: true
    		});

    	gl_mesh5 = new Mesh({
    			props: {
    				geometry: plane(),
    				location: [0, -0.01, -10],
    				rotation: [0, 0, 0],
    				scale: 10,
    				uniforms: { color: 16777215 }
    			},
    			$$inline: true
    		});

    	gl_mesh6 = new Mesh({
    			props: {
    				geometry: plane(),
    				location: [10, -0.01, 0],
    				rotation: [0, -90, 0],
    				scale: 10,
    				uniforms: { color: 16777215 }
    			},
    			$$inline: true
    		});

    	gl_mesh7 = new Mesh({
    			props: {
    				geometry: plane(),
    				location: [-10, -0.01, 0],
    				rotation: [0, 90, 0],
    				scale: 10,
    				uniforms: { color: 16777215 }
    			},
    			$$inline: true
    		});

    	gl_group = new Group({
    			props: {
    				location: [/*light*/ ctx[6].x, /*light*/ ctx[6].y, /*light*/ ctx[6].z],
    				$$slots: { default: [create_default_slot_1$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(gl_target.$$.fragment);
    			t0 = space();
    			create_component(gl_orbitcontrols.$$.fragment);
    			t1 = space();
    			create_component(gl_ambientlight.$$.fragment);
    			t2 = space();
    			create_component(gl_directionallight.$$.fragment);
    			t3 = space();
    			create_component(gl_mesh0.$$.fragment);
    			t4 = space();
    			create_component(gl_mesh1.$$.fragment);
    			t5 = space();
    			create_component(gl_mesh2.$$.fragment);
    			t6 = space();
    			create_component(gl_mesh3.$$.fragment);
    			t7 = space();
    			create_component(gl_mesh4.$$.fragment);
    			t8 = space();
    			create_component(gl_mesh5.$$.fragment);
    			t9 = space();
    			create_component(gl_mesh6.$$.fragment);
    			t10 = space();
    			create_component(gl_mesh7.$$.fragment);
    			t11 = space();
    			create_component(gl_group.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(gl_target, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(gl_orbitcontrols, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(gl_ambientlight, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(gl_directionallight, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(gl_mesh0, target, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(gl_mesh1, target, anchor);
    			insert_dev(target, t5, anchor);
    			mount_component(gl_mesh2, target, anchor);
    			insert_dev(target, t6, anchor);
    			mount_component(gl_mesh3, target, anchor);
    			insert_dev(target, t7, anchor);
    			mount_component(gl_mesh4, target, anchor);
    			insert_dev(target, t8, anchor);
    			mount_component(gl_mesh5, target, anchor);
    			insert_dev(target, t9, anchor);
    			mount_component(gl_mesh6, target, anchor);
    			insert_dev(target, t10, anchor);
    			mount_component(gl_mesh7, target, anchor);
    			insert_dev(target, t11, anchor);
    			mount_component(gl_group, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const gl_target_changes = {};
    			if (dirty & /*h*/ 16) gl_target_changes.location = [0, /*h*/ ctx[4] / 2, 0];
    			gl_target.$set(gl_target_changes);
    			const gl_orbitcontrols_changes = {};
    			if (dirty & /*location*/ 128) gl_orbitcontrols_changes.location = /*location*/ ctx[7];

    			if (dirty & /*$$scope, location*/ 524416) {
    				gl_orbitcontrols_changes.$$scope = { dirty, ctx };
    			}

    			gl_orbitcontrols.$set(gl_orbitcontrols_changes);
    			const gl_mesh0_changes = {};
    			if (dirty & /*h*/ 16) gl_mesh0_changes.location = [0, /*h*/ ctx[4] / 2, 0];
    			if (dirty & /*w, h, d*/ 56) gl_mesh0_changes.scale = [/*w*/ ctx[3], /*h*/ ctx[4], /*d*/ ctx[5]];

    			if (dirty & /*color*/ 1) gl_mesh0_changes.uniforms = {
    				color: /*from_hex*/ ctx[11](/*color*/ ctx[0])
    			};

    			gl_mesh0.$set(gl_mesh0_changes);
    			const gl_group_changes = {};
    			if (dirty & /*light*/ 64) gl_group_changes.location = [/*light*/ ctx[6].x, /*light*/ ctx[6].y, /*light*/ ctx[6].z];

    			if (dirty & /*$$scope*/ 524288) {
    				gl_group_changes.$$scope = { dirty, ctx };
    			}

    			gl_group.$set(gl_group_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_target.$$.fragment, local);
    			transition_in(gl_orbitcontrols.$$.fragment, local);
    			transition_in(gl_ambientlight.$$.fragment, local);
    			transition_in(gl_directionallight.$$.fragment, local);
    			transition_in(gl_mesh0.$$.fragment, local);
    			transition_in(gl_mesh1.$$.fragment, local);
    			transition_in(gl_mesh2.$$.fragment, local);
    			transition_in(gl_mesh3.$$.fragment, local);
    			transition_in(gl_mesh4.$$.fragment, local);
    			transition_in(gl_mesh5.$$.fragment, local);
    			transition_in(gl_mesh6.$$.fragment, local);
    			transition_in(gl_mesh7.$$.fragment, local);
    			transition_in(gl_group.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_target.$$.fragment, local);
    			transition_out(gl_orbitcontrols.$$.fragment, local);
    			transition_out(gl_ambientlight.$$.fragment, local);
    			transition_out(gl_directionallight.$$.fragment, local);
    			transition_out(gl_mesh0.$$.fragment, local);
    			transition_out(gl_mesh1.$$.fragment, local);
    			transition_out(gl_mesh2.$$.fragment, local);
    			transition_out(gl_mesh3.$$.fragment, local);
    			transition_out(gl_mesh4.$$.fragment, local);
    			transition_out(gl_mesh5.$$.fragment, local);
    			transition_out(gl_mesh6.$$.fragment, local);
    			transition_out(gl_mesh7.$$.fragment, local);
    			transition_out(gl_group.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gl_target, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(gl_orbitcontrols, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(gl_ambientlight, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(gl_directionallight, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(gl_mesh0, detaching);
    			if (detaching) detach_dev(t4);
    			destroy_component(gl_mesh1, detaching);
    			if (detaching) detach_dev(t5);
    			destroy_component(gl_mesh2, detaching);
    			if (detaching) detach_dev(t6);
    			destroy_component(gl_mesh3, detaching);
    			if (detaching) detach_dev(t7);
    			destroy_component(gl_mesh4, detaching);
    			if (detaching) detach_dev(t8);
    			destroy_component(gl_mesh5, detaching);
    			if (detaching) detach_dev(t9);
    			destroy_component(gl_mesh6, detaching);
    			if (detaching) detach_dev(t10);
    			destroy_component(gl_mesh7, detaching);
    			if (detaching) detach_dev(t11);
    			destroy_component(gl_group, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$5.name,
    		type: "slot",
    		source: "(67:0) <GL.Scene>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$o(ctx) {
    	let gl_scene;
    	let t0;
    	let div0;
    	let label0;
    	let input0;
    	let t1;
    	let label1;
    	let input1;
    	let input1_min_value;
    	let input1_max_value;
    	let input1_step_value;
    	let t2;
    	let t3;
    	let t4;
    	let t5;
    	let label2;
    	let input2;
    	let input2_min_value;
    	let input2_max_value;
    	let input2_step_value;
    	let t6;
    	let t7;
    	let t8;
    	let t9;
    	let label3;
    	let input3;
    	let input3_min_value;
    	let input3_max_value;
    	let input3_step_value;
    	let t10;
    	let t11;
    	let t12;
    	let t13;
    	let div1;
    	let h4;
    	let t14;
    	let t15;
    	let keypad;
    	let updating_value;
    	let current;
    	let mounted;
    	let dispose;

    	gl_scene = new Scene({
    			props: {
    				$$slots: { default: [create_default_slot$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	function keypad_value_binding(value) {
    		/*keypad_value_binding*/ ctx[18].call(null, value);
    	}

    	let keypad_props = {};

    	if (/*pin*/ ctx[1] !== void 0) {
    		keypad_props.value = /*pin*/ ctx[1];
    	}

    	keypad = new Keypad({ props: keypad_props, $$inline: true });
    	binding_callbacks.push(() => bind(keypad, "value", keypad_value_binding));
    	keypad.$on("submit", /*handleSubmit*/ ctx[8]);

    	const block = {
    		c: function create() {
    			create_component(gl_scene.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			label0 = element("label");
    			input0 = element("input");
    			t1 = space();
    			label1 = element("label");
    			input1 = element("input");
    			t2 = text(" width (");
    			t3 = text(/*w*/ ctx[3]);
    			t4 = text(")");
    			t5 = space();
    			label2 = element("label");
    			input2 = element("input");
    			t6 = text(" height (");
    			t7 = text(/*h*/ ctx[4]);
    			t8 = text(")");
    			t9 = space();
    			label3 = element("label");
    			input3 = element("input");
    			t10 = text(" depth (");
    			t11 = text(/*d*/ ctx[5]);
    			t12 = text(")");
    			t13 = space();
    			div1 = element("div");
    			h4 = element("h4");
    			t14 = text(/*view*/ ctx[2]);
    			t15 = space();
    			create_component(keypad.$$.fragment);
    			attr_dev(input0, "type", "color");
    			set_style(input0, "height", "40px");
    			add_location(input0, file$c, 167, 2, 3262);
    			add_location(label0, file$c, 166, 1, 3252);
    			attr_dev(input1, "type", "range");
    			attr_dev(input1, "min", input1_min_value = 0.1);
    			attr_dev(input1, "max", input1_max_value = 5);
    			attr_dev(input1, "step", input1_step_value = 0.1);
    			add_location(input1, file$c, 171, 2, 3345);
    			add_location(label1, file$c, 170, 1, 3335);
    			attr_dev(input2, "type", "range");
    			attr_dev(input2, "min", input2_min_value = 0.1);
    			attr_dev(input2, "max", input2_max_value = 5);
    			attr_dev(input2, "step", input2_step_value = 0.1);
    			add_location(input2, file$c, 175, 2, 3444);
    			add_location(label2, file$c, 174, 1, 3434);
    			attr_dev(input3, "type", "range");
    			attr_dev(input3, "min", input3_min_value = 0.1);
    			attr_dev(input3, "max", input3_max_value = 5);
    			attr_dev(input3, "step", input3_step_value = 0.1);
    			add_location(input3, file$c, 179, 2, 3544);
    			add_location(label3, file$c, 178, 1, 3534);
    			attr_dev(div0, "class", "controls");
    			add_location(div0, file$c, 165, 0, 3228);
    			set_style(h4, "color", /*pin*/ ctx[1] ? "#999" : "#fff");
    			attr_dev(h4, "class", "svelte-p9x91x");
    			add_location(h4, file$c, 184, 1, 3674);
    			attr_dev(div1, "class", "controls keys right svelte-p9x91x");
    			add_location(div1, file$c, 183, 0, 3639);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(gl_scene, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div0, anchor);
    			append_dev(div0, label0);
    			append_dev(label0, input0);
    			set_input_value(input0, /*color*/ ctx[0]);
    			append_dev(div0, t1);
    			append_dev(div0, label1);
    			append_dev(label1, input1);
    			set_input_value(input1, /*w*/ ctx[3]);
    			append_dev(label1, t2);
    			append_dev(label1, t3);
    			append_dev(label1, t4);
    			append_dev(div0, t5);
    			append_dev(div0, label2);
    			append_dev(label2, input2);
    			set_input_value(input2, /*h*/ ctx[4]);
    			append_dev(label2, t6);
    			append_dev(label2, t7);
    			append_dev(label2, t8);
    			append_dev(div0, t9);
    			append_dev(div0, label3);
    			append_dev(label3, input3);
    			set_input_value(input3, /*d*/ ctx[5]);
    			append_dev(label3, t10);
    			append_dev(label3, t11);
    			append_dev(label3, t12);
    			insert_dev(target, t13, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, h4);
    			append_dev(h4, t14);
    			append_dev(div1, t15);
    			mount_component(keypad, div1, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[14]),
    					listen_dev(input1, "change", /*input1_change_input_handler*/ ctx[15]),
    					listen_dev(input1, "input", /*input1_change_input_handler*/ ctx[15]),
    					listen_dev(input2, "change", /*input2_change_input_handler*/ ctx[16]),
    					listen_dev(input2, "input", /*input2_change_input_handler*/ ctx[16]),
    					listen_dev(input3, "change", /*input3_change_input_handler*/ ctx[17]),
    					listen_dev(input3, "input", /*input3_change_input_handler*/ ctx[17])
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const gl_scene_changes = {};

    			if (dirty & /*$$scope, light, h, w, d, color, location*/ 524537) {
    				gl_scene_changes.$$scope = { dirty, ctx };
    			}

    			gl_scene.$set(gl_scene_changes);

    			if (dirty & /*color*/ 1) {
    				set_input_value(input0, /*color*/ ctx[0]);
    			}

    			if (dirty & /*w*/ 8) {
    				set_input_value(input1, /*w*/ ctx[3]);
    			}

    			if (!current || dirty & /*w*/ 8) set_data_dev(t3, /*w*/ ctx[3]);

    			if (dirty & /*h*/ 16) {
    				set_input_value(input2, /*h*/ ctx[4]);
    			}

    			if (!current || dirty & /*h*/ 16) set_data_dev(t7, /*h*/ ctx[4]);

    			if (dirty & /*d*/ 32) {
    				set_input_value(input3, /*d*/ ctx[5]);
    			}

    			if (!current || dirty & /*d*/ 32) set_data_dev(t11, /*d*/ ctx[5]);
    			if (!current || dirty & /*view*/ 4) set_data_dev(t14, /*view*/ ctx[2]);

    			if (!current || dirty & /*pin*/ 2) {
    				set_style(h4, "color", /*pin*/ ctx[1] ? "#999" : "#fff");
    			}

    			const keypad_changes = {};

    			if (!updating_value && dirty & /*pin*/ 2) {
    				updating_value = true;
    				keypad_changes.value = /*pin*/ ctx[1];
    				add_flush_callback(() => updating_value = false);
    			}

    			keypad.$set(keypad_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_scene.$$.fragment, local);
    			transition_in(keypad.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_scene.$$.fragment, local);
    			transition_out(keypad.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gl_scene, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t13);
    			if (detaching) detach_dev(div1);
    			destroy_component(keypad);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$o($$self, $$props, $$invalidate) {
    	let { title } = $$props;
    	let pin;
    	let view;

    	function handleSubmit() {
    		alert(`submitted ${pin}`);
    	}

    	let { color = "#ff3e00" } = $$props;
    	let w = 1;
    	let h = 1;
    	let d = 1;
    	const light = {};

    	// initial view
    	let location = new Float32Array([0.25, 0.5, 2.5]);

    	let target = new Float32Array([0, 1, 0]);
    	const captureViewDirection = (loc, tgt) => "";
    	const from_hex = hex => parseInt(hex.slice(1), 16);

    	onMount(() => {
    		let frame;

    		const loop = () => {
    			frame = requestAnimationFrame(loop);
    			$$invalidate(6, light.x = 3 * Math.sin(Date.now() * 0.001), light);
    			$$invalidate(6, light.y = 2.5 + 2 * Math.sin(Date.now() * 0.0004), light);
    			$$invalidate(6, light.z = 3 * Math.cos(Date.now() * 0.002), light);
    		};

    		loop();
    		return () => cancelAnimationFrame(frame);
    	});

    	const writable_props = ["title", "color"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<TechApp> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("TechApp", $$slots, []);

    	function gl_perspectivecamera_location_binding(value) {
    		location = value;
    		$$invalidate(7, location);
    	}

    	function input0_input_handler() {
    		color = this.value;
    		$$invalidate(0, color);
    	}

    	function input1_change_input_handler() {
    		w = to_number(this.value);
    		$$invalidate(3, w);
    	}

    	function input2_change_input_handler() {
    		h = to_number(this.value);
    		$$invalidate(4, h);
    	}

    	function input3_change_input_handler() {
    		d = to_number(this.value);
    		$$invalidate(5, d);
    	}

    	function keypad_value_binding(value) {
    		pin = value;
    		$$invalidate(1, pin);
    	}

    	$$self.$set = $$props => {
    		if ("title" in $$props) $$invalidate(12, title = $$props.title);
    		if ("color" in $$props) $$invalidate(0, color = $$props.color);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		GL,
    		Keypad,
    		title,
    		pin,
    		view,
    		handleSubmit,
    		color,
    		w,
    		h,
    		d,
    		light,
    		location,
    		target,
    		captureViewDirection,
    		from_hex
    	});

    	$$self.$inject_state = $$props => {
    		if ("title" in $$props) $$invalidate(12, title = $$props.title);
    		if ("pin" in $$props) $$invalidate(1, pin = $$props.pin);
    		if ("view" in $$props) $$invalidate(2, view = $$props.view);
    		if ("color" in $$props) $$invalidate(0, color = $$props.color);
    		if ("w" in $$props) $$invalidate(3, w = $$props.w);
    		if ("h" in $$props) $$invalidate(4, h = $$props.h);
    		if ("d" in $$props) $$invalidate(5, d = $$props.d);
    		if ("location" in $$props) $$invalidate(7, location = $$props.location);
    		if ("target" in $$props) $$invalidate(9, target = $$props.target);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*pin*/ 2) {
    			 $$invalidate(2, view = pin ? pin.replace(/\d(?!$)/g, "*") : "enter your pin");
    		}
    	};

    	return [
    		color,
    		pin,
    		view,
    		w,
    		h,
    		d,
    		light,
    		location,
    		handleSubmit,
    		target,
    		captureViewDirection,
    		from_hex,
    		title,
    		gl_perspectivecamera_location_binding,
    		input0_input_handler,
    		input1_change_input_handler,
    		input2_change_input_handler,
    		input3_change_input_handler,
    		keypad_value_binding
    	];
    }

    class TechApp extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$o, create_fragment$o, safe_not_equal, { title: 12, color: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TechApp",
    			options,
    			id: create_fragment$o.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*title*/ ctx[12] === undefined && !("title" in props)) {
    			console.warn("<TechApp> was created without expected prop 'title'");
    		}
    	}

    	get title() {
    		throw new Error("<TechApp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<TechApp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<TechApp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<TechApp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/apps/components/Controls.svelte generated by Svelte v3.24.0 */

    const { console: console_1$7 } = globals;
    const file$d = "src/apps/components/Controls.svelte";

    function get_each_context$7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[21] = list[i];
    	child_ctx[22] = list;
    	child_ctx[23] = i;
    	return child_ctx;
    }

    function get_each_context_1$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[21] = list[i];
    	child_ctx[24] = list;
    	child_ctx[23] = i;
    	return child_ctx;
    }

    // (157:4) {#if (options['labels'].length > 0 && options['values'].length > 0)}
    function create_if_block_2$2(ctx) {
    	let each_1_anchor;
    	let each_value_1 = /*options*/ ctx[1]["values"];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$3(get_each_context_1$3(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*options*/ 2) {
    				each_value_1 = /*options*/ ctx[1]["values"];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$3(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(157:4) {#if (options['labels'].length > 0 && options['values'].length > 0)}",
    		ctx
    	});

    	return block;
    }

    // (158:8) {#each options['values'] as option, o}
    function create_each_block_1$3(ctx) {
    	let label;
    	let input;
    	let t0;
    	let t1_value = /*options*/ ctx[1]["labels"][/*o*/ ctx[23]] + "";
    	let t1;
    	let t2;
    	let br;
    	let mounted;
    	let dispose;

    	function input_change_handler() {
    		/*input_change_handler*/ ctx[10].call(input, /*each_value_1*/ ctx[24], /*o*/ ctx[23]);
    	}

    	const block = {
    		c: function create() {
    			label = element("label");
    			input = element("input");
    			t0 = space();
    			t1 = text(t1_value);
    			t2 = space();
    			br = element("br");
    			attr_dev(input, "type", "checkbox");
    			add_location(input, file$d, 159, 16, 4810);
    			add_location(label, file$d, 158, 12, 4786);
    			add_location(br, file$d, 160, 20, 4907);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    			append_dev(label, input);
    			input.checked = /*option*/ ctx[21].value;
    			append_dev(label, t0);
    			append_dev(label, t1);
    			append_dev(label, t2);
    			insert_dev(target, br, anchor);

    			if (!mounted) {
    				dispose = listen_dev(input, "change", input_change_handler);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*options*/ 2) {
    				input.checked = /*option*/ ctx[21].value;
    			}

    			if (dirty & /*options*/ 2 && t1_value !== (t1_value = /*options*/ ctx[1]["labels"][/*o*/ ctx[23]] + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			if (detaching) detach_dev(br);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$3.name,
    		type: "each",
    		source: "(158:8) {#each options['values'] as option, o}",
    		ctx
    	});

    	return block;
    }

    // (165:4) {#if (!!color)}
    function create_if_block_1$4(ctx) {
    	let label;
    	let input;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			label = element("label");
    			input = element("input");
    			attr_dev(input, "type", "color");
    			set_style(input, "height", "40px");
    			add_location(input, file$d, 166, 12, 4989);
    			add_location(label, file$d, 165, 8, 4969);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    			append_dev(label, input);
    			set_input_value(input, /*color*/ ctx[0]);

    			if (!mounted) {
    				dispose = listen_dev(input, "input", /*input_input_handler*/ ctx[11]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*color*/ 1) {
    				set_input_value(input, /*color*/ ctx[0]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(165:4) {#if (!!color)}",
    		ctx
    	});

    	return block;
    }

    // (171:4) {#if (rangeOptions['labels'].length > 0 && rangeValues.length > 0)}
    function create_if_block$8(ctx) {
    	let each_1_anchor;
    	let each_value = /*rangeValues*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*rangeValues, rangeOptions*/ 20) {
    				each_value = /*rangeValues*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$7(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$7(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(171:4) {#if (rangeOptions['labels'].length > 0 && rangeValues.length > 0)}",
    		ctx
    	});

    	return block;
    }

    // (172:8) {#each rangeValues as option, o}
    function create_each_block$7(ctx) {
    	let label;
    	let input;
    	let input_min_value;
    	let input_max_value;
    	let input_step_value;
    	let br0;
    	let t0;
    	let t1_value = /*rangeOptions*/ ctx[4]["labels"][/*o*/ ctx[23]] + "";
    	let t1;
    	let t2;
    	let t3_value = /*option*/ ctx[21] + "";
    	let t3;
    	let t4;
    	let br1;
    	let mounted;
    	let dispose;

    	function input_change_input_handler() {
    		/*input_change_input_handler*/ ctx[12].call(input, /*each_value*/ ctx[22], /*o*/ ctx[23]);
    	}

    	const block = {
    		c: function create() {
    			label = element("label");
    			input = element("input");
    			br0 = element("br");
    			t0 = space();
    			t1 = text(t1_value);
    			t2 = text("(");
    			t3 = text(t3_value);
    			t4 = text(")\n            ");
    			br1 = element("br");
    			attr_dev(input, "type", "range");
    			attr_dev(input, "min", input_min_value = /*rangeOptions*/ ctx[4]["min"][/*o*/ ctx[23]]);
    			attr_dev(input, "max", input_max_value = /*rangeOptions*/ ctx[4]["max"][/*o*/ ctx[23]]);
    			attr_dev(input, "step", input_step_value = /*rangeOptions*/ ctx[4]["step"][/*o*/ ctx[23]]);
    			add_location(input, file$d, 173, 16, 5227);
    			add_location(br0, file$d, 173, 147, 5358);
    			add_location(label, file$d, 172, 12, 5203);
    			add_location(br1, file$d, 175, 20, 5439);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    			append_dev(label, input);
    			set_input_value(input, /*option*/ ctx[21]);
    			append_dev(label, br0);
    			append_dev(label, t0);
    			append_dev(label, t1);
    			append_dev(label, t2);
    			append_dev(label, t3);
    			append_dev(label, t4);
    			insert_dev(target, br1, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "change", input_change_input_handler),
    					listen_dev(input, "input", input_change_input_handler)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*rangeOptions*/ 16 && input_min_value !== (input_min_value = /*rangeOptions*/ ctx[4]["min"][/*o*/ ctx[23]])) {
    				attr_dev(input, "min", input_min_value);
    			}

    			if (dirty & /*rangeOptions*/ 16 && input_max_value !== (input_max_value = /*rangeOptions*/ ctx[4]["max"][/*o*/ ctx[23]])) {
    				attr_dev(input, "max", input_max_value);
    			}

    			if (dirty & /*rangeOptions*/ 16 && input_step_value !== (input_step_value = /*rangeOptions*/ ctx[4]["step"][/*o*/ ctx[23]])) {
    				attr_dev(input, "step", input_step_value);
    			}

    			if (dirty & /*rangeValues*/ 4) {
    				set_input_value(input, /*option*/ ctx[21]);
    			}

    			if (dirty & /*rangeOptions*/ 16 && t1_value !== (t1_value = /*rangeOptions*/ ctx[4]["labels"][/*o*/ ctx[23]] + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*rangeValues*/ 4 && t3_value !== (t3_value = /*option*/ ctx[21] + "")) set_data_dev(t3, t3_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			if (detaching) detach_dev(br1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$7.name,
    		type: "each",
    		source: "(172:8) {#each rangeValues as option, o}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$p(ctx) {
    	let div;
    	let h4;
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let label;
    	let button;
    	let t5_value = (/*isFullscreen*/ ctx[5] ? "minimize" : "maximize") + "";
    	let t5;
    	let mounted;
    	let dispose;
    	let if_block0 = /*options*/ ctx[1]["labels"].length > 0 && /*options*/ ctx[1]["values"].length > 0 && create_if_block_2$2(ctx);
    	let if_block1 = !!/*color*/ ctx[0] && create_if_block_1$4(ctx);
    	let if_block2 = /*rangeOptions*/ ctx[4]["labels"].length > 0 && /*rangeValues*/ ctx[2].length > 0 && create_if_block$8(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			h4 = element("h4");
    			t0 = text(/*title*/ ctx[3]);
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = space();
    			if (if_block2) if_block2.c();
    			t4 = space();
    			label = element("label");
    			button = element("button");
    			t5 = text(t5_value);
    			attr_dev(h4, "class", "svelte-1ll3lt3");
    			add_location(h4, file$d, 154, 4, 4634);
    			add_location(button, file$d, 180, 8, 5493);
    			add_location(label, file$d, 179, 4, 5477);
    			attr_dev(div, "class", "controls right svelte-1ll3lt3");
    			add_location(div, file$d, 152, 0, 4600);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h4);
    			append_dev(h4, t0);
    			append_dev(div, t1);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t2);
    			if (if_block1) if_block1.m(div, null);
    			append_dev(div, t3);
    			if (if_block2) if_block2.m(div, null);
    			append_dev(div, t4);
    			append_dev(div, label);
    			append_dev(label, button);
    			append_dev(button, t5);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*toggleFullscreen*/ ctx[6])) /*toggleFullscreen*/ ctx[6].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			if (dirty & /*title*/ 8) set_data_dev(t0, /*title*/ ctx[3]);

    			if (/*options*/ ctx[1]["labels"].length > 0 && /*options*/ ctx[1]["values"].length > 0) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_2$2(ctx);
    					if_block0.c();
    					if_block0.m(div, t2);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (!!/*color*/ ctx[0]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1$4(ctx);
    					if_block1.c();
    					if_block1.m(div, t3);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*rangeOptions*/ ctx[4]["labels"].length > 0 && /*rangeValues*/ ctx[2].length > 0) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block$8(ctx);
    					if_block2.c();
    					if_block2.m(div, t4);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (dirty & /*isFullscreen*/ 32 && t5_value !== (t5_value = (/*isFullscreen*/ ctx[5] ? "minimize" : "maximize") + "")) set_data_dev(t5, t5_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$p($$self, $$props, $$invalidate) {
    	let { title } = $$props;
    	let { color = "#ff3e00" } = $$props;
    	let { options = [] } = $$props;
    	let { rangeOptions = [] } = $$props;
    	let { rangeValues = [] } = $$props;
    	let { viewLocation } = $$props, { viewTarget } = $$props;
    	let dispatch = createEventDispatcher();
    	let formatPlayTime = time => "" + new Date(time).toString();
    	let mouse_x = 0, mouse_y = 0, mouse_down = false, mouse_disabled = false;
    	let navContext;
    	let sinceLastMovementEvent = 0;
    	let isFullscreen = false;

    	let toggleFullscreen = function () {

    	};

    	const init = function () {
    		console.log("Initializing Controls...");

    		document.querySelectorAll(".controls h4").forEach(c => {
    			console.log(c);
    			const scrollLength = 3 * window.innerHeight / 4;

    			c.addEventListener("click", function (event) {
    				let scrollInterval = 33;
    				let scrollTime = 533;
    				let scrolled = 0;

    				const startScroll = setInterval(
    					function () {
    						if (scrolled < scrollLength) {
    							scroll({ top: scrolled, left: 0 });
    						}

    						scrolled += Math.floor(scrollLength / (scrollTime / scrollInterval));
    					},
    					scrollInterval
    				);
    			});

    			c.title = "Click To See Article";
    		});

    		document.querySelectorAll("canvas").forEach(c => {
    			console.log(c);

    			$$invalidate(6, toggleFullscreen = () => {
    				if (!isFullscreen) {
    					$$invalidate(5, isFullscreen = true);
    					c.parentElement.className += " fullscreen";

    					for (const control of document.getElementsByClassName("controls")) {
    						control.className += " fullscreen";
    					}
    				} else {
    					$$invalidate(5, isFullscreen = false);
    					c.parentElement.className = c.parentElement.className.replace("fullscreen", "");

    					for (const control of document.getElementsByClassName("controls")) {
    						control.className = control.className.replace("fullscreen", "");
    					}
    				}
    			});

    			c.addEventListener("keydown", function (event) {
    				const kbEvent = event || window["event"]; // cross-browser shenanigans

    				if (new Date().getTime() - sinceLastMovementEvent > 66) {
    					// console.log(kbEvent);
    					sinceLastMovementEvent = new Date().getTime();

    					if (kbEvent["keyCode"] === 32) {
    						// spacebar
    						kbEvent.preventDefault();

    						return true;
    					} else if (kbEvent["keyCode"] === 38 || kbEvent["keyCode"] === 87) {
    						// up || W
    						dispatch("forward");

    						kbEvent.preventDefault();
    						return true;
    					} else if (kbEvent["keyCode"] === 40 || kbEvent["keyCode"] === 83) {
    						// down || S
    						dispatch("backward");

    						kbEvent.preventDefault();
    						return true;
    					} else if (kbEvent["keyCode"] === 37 || kbEvent["keyCode"] === 65) {
    						// left || A
    						dispatch("left");

    						kbEvent.preventDefault();
    						return true;
    					} else if (kbEvent["keyCode"] === 39 || kbEvent["keyCode"] === 68) {
    						// right || D
    						dispatch("right");

    						kbEvent.preventDefault();
    						return true;
    					} else {
    						console.log("Keyboard Event: ", kbEvent["keyCode"]);
    						return false;
    					}
    				}
    			});

    			c.addEventListener("wheel", function (event) {
    				const wheelEvent = event || window["event"];

    				if (new Date().getTime() - sinceLastMovementEvent > 66) {
    					sinceLastMovementEvent = new Date().getTime();

    					if (wheelEvent.deltaY < 0) {
    						dispatch("up");
    					} else if (wheelEvent.deltaY > 0) {
    						dispatch("down");
    					}
    				}
    			}); // wheelEvent.preventDefault();
    		});
    	};

    	const writable_props = [
    		"title",
    		"color",
    		"options",
    		"rangeOptions",
    		"rangeValues",
    		"viewLocation",
    		"viewTarget"
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$7.warn(`<Controls> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("Controls", $$slots, []);

    	function input_change_handler(each_value_1, o) {
    		each_value_1[o].value = this.checked;
    		$$invalidate(1, options);
    	}

    	function input_input_handler() {
    		color = this.value;
    		$$invalidate(0, color);
    	}

    	function input_change_input_handler(each_value, o) {
    		each_value[o] = to_number(this.value);
    		$$invalidate(2, rangeValues);
    	}

    	$$self.$set = $$props => {
    		if ("title" in $$props) $$invalidate(3, title = $$props.title);
    		if ("color" in $$props) $$invalidate(0, color = $$props.color);
    		if ("options" in $$props) $$invalidate(1, options = $$props.options);
    		if ("rangeOptions" in $$props) $$invalidate(4, rangeOptions = $$props.rangeOptions);
    		if ("rangeValues" in $$props) $$invalidate(2, rangeValues = $$props.rangeValues);
    		if ("viewLocation" in $$props) $$invalidate(7, viewLocation = $$props.viewLocation);
    		if ("viewTarget" in $$props) $$invalidate(8, viewTarget = $$props.viewTarget);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		title,
    		color,
    		options,
    		rangeOptions,
    		rangeValues,
    		viewLocation,
    		viewTarget,
    		dispatch,
    		formatPlayTime,
    		mouse_x,
    		mouse_y,
    		mouse_down,
    		mouse_disabled,
    		navContext,
    		sinceLastMovementEvent,
    		isFullscreen,
    		toggleFullscreen,
    		init
    	});

    	$$self.$inject_state = $$props => {
    		if ("title" in $$props) $$invalidate(3, title = $$props.title);
    		if ("color" in $$props) $$invalidate(0, color = $$props.color);
    		if ("options" in $$props) $$invalidate(1, options = $$props.options);
    		if ("rangeOptions" in $$props) $$invalidate(4, rangeOptions = $$props.rangeOptions);
    		if ("rangeValues" in $$props) $$invalidate(2, rangeValues = $$props.rangeValues);
    		if ("viewLocation" in $$props) $$invalidate(7, viewLocation = $$props.viewLocation);
    		if ("viewTarget" in $$props) $$invalidate(8, viewTarget = $$props.viewTarget);
    		if ("dispatch" in $$props) dispatch = $$props.dispatch;
    		if ("formatPlayTime" in $$props) formatPlayTime = $$props.formatPlayTime;
    		if ("mouse_x" in $$props) mouse_x = $$props.mouse_x;
    		if ("mouse_y" in $$props) mouse_y = $$props.mouse_y;
    		if ("mouse_down" in $$props) mouse_down = $$props.mouse_down;
    		if ("mouse_disabled" in $$props) mouse_disabled = $$props.mouse_disabled;
    		if ("navContext" in $$props) navContext = $$props.navContext;
    		if ("sinceLastMovementEvent" in $$props) sinceLastMovementEvent = $$props.sinceLastMovementEvent;
    		if ("isFullscreen" in $$props) $$invalidate(5, isFullscreen = $$props.isFullscreen);
    		if ("toggleFullscreen" in $$props) $$invalidate(6, toggleFullscreen = $$props.toggleFullscreen);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		color,
    		options,
    		rangeValues,
    		title,
    		rangeOptions,
    		isFullscreen,
    		toggleFullscreen,
    		viewLocation,
    		viewTarget,
    		init,
    		input_change_handler,
    		input_input_handler,
    		input_change_input_handler
    	];
    }

    class Controls extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$p, create_fragment$p, safe_not_equal, {
    			title: 3,
    			color: 0,
    			options: 1,
    			rangeOptions: 4,
    			rangeValues: 2,
    			viewLocation: 7,
    			viewTarget: 8,
    			init: 9
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Controls",
    			options,
    			id: create_fragment$p.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*title*/ ctx[3] === undefined && !("title" in props)) {
    			console_1$7.warn("<Controls> was created without expected prop 'title'");
    		}

    		if (/*viewLocation*/ ctx[7] === undefined && !("viewLocation" in props)) {
    			console_1$7.warn("<Controls> was created without expected prop 'viewLocation'");
    		}

    		if (/*viewTarget*/ ctx[8] === undefined && !("viewTarget" in props)) {
    			console_1$7.warn("<Controls> was created without expected prop 'viewTarget'");
    		}
    	}

    	get title() {
    		throw new Error("<Controls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<Controls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<Controls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<Controls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get options() {
    		throw new Error("<Controls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set options(value) {
    		throw new Error("<Controls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rangeOptions() {
    		throw new Error("<Controls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rangeOptions(value) {
    		throw new Error("<Controls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rangeValues() {
    		throw new Error("<Controls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rangeValues(value) {
    		throw new Error("<Controls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get viewLocation() {
    		throw new Error("<Controls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set viewLocation(value) {
    		throw new Error("<Controls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get viewTarget() {
    		throw new Error("<Controls>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set viewTarget(value) {
    		throw new Error("<Controls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get init() {
    		return this.$$.ctx[9];
    	}

    	set init(value) {
    		throw new Error("<Controls>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/apps/VizRApp.svelte generated by Svelte v3.24.0 */

    const { Object: Object_1$2, console: console_1$8 } = globals;

    function get_each_context_1$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[26] = list[i];
    	child_ctx[30] = i;
    	return child_ctx;
    }

    function get_each_context$8(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[26] = list[i];
    	child_ctx[28] = i;
    	return child_ctx;
    }

    // (120:4) <GL.OrbitControls maxPolarAngle={Math.PI / 2} {location} {target}>
    function create_default_slot_2$5(ctx) {
    	let t0_value = /*captureViewDirection*/ ctx[13](/*location*/ ctx[9], /*target*/ ctx[10]) + "";
    	let t0;
    	let t1;
    	let gl_perspectivecamera;
    	let current;

    	gl_perspectivecamera = new PerspectiveCamera({
    			props: {
    				location: /*location*/ ctx[9],
    				lookAt: "center",
    				near: 0.01,
    				far: 1000
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			t0 = text(t0_value);
    			t1 = space();
    			create_component(gl_perspectivecamera.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(gl_perspectivecamera, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty[0] & /*location, target*/ 1536) && t0_value !== (t0_value = /*captureViewDirection*/ ctx[13](/*location*/ ctx[9], /*target*/ ctx[10]) + "")) set_data_dev(t0, t0_value);
    			const gl_perspectivecamera_changes = {};
    			if (dirty[0] & /*location*/ 512) gl_perspectivecamera_changes.location = /*location*/ ctx[9];
    			gl_perspectivecamera.$set(gl_perspectivecamera_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_perspectivecamera.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_perspectivecamera.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			destroy_component(gl_perspectivecamera, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$5.name,
    		type: "slot",
    		source: "(120:4) <GL.OrbitControls maxPolarAngle={Math.PI / 2} {location} {target}>",
    		ctx
    	});

    	return block;
    }

    // (129:8) {#each Array(heightmap[k].length) as _, i}
    function create_each_block_1$4(ctx) {
    	let gl_mesh;
    	let current;

    	gl_mesh = new Mesh({
    			props: {
    				geometry: box({
    					x: 0,
    					y: 0,
    					z: 0,
    					w: gridSizeX / /*heightmap*/ ctx[11][/*i*/ ctx[30]].length,
    					h: 1 * /*heightmap*/ ctx[11][/*k*/ ctx[28]][/*i*/ ctx[30]],
    					d: gridSizeZ / /*heightmap*/ ctx[11].length
    				}),
    				location: [
    					-(gridSizeX / 2) + /*i*/ ctx[30] * (gridSizeX / /*heightmap*/ ctx[11][0].length),
    					0,
    					-(gridSizeZ / 2) + /*k*/ ctx[28] * (gridSizeZ / /*heightmap*/ ctx[11].length)
    				],
    				rotation: [0, 0, 0],
    				scale: [/*w*/ ctx[5], /*h*/ ctx[6], /*d*/ ctx[7]],
    				uniforms: {
    					color: adjustColor$4(/*color*/ ctx[3], /*heightmap*/ ctx[11][/*k*/ ctx[28]][/*i*/ ctx[30]])
    				}
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(gl_mesh.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(gl_mesh, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const gl_mesh_changes = {};

    			if (dirty[0] & /*heightmap*/ 2048) gl_mesh_changes.geometry = box({
    				x: 0,
    				y: 0,
    				z: 0,
    				w: gridSizeX / /*heightmap*/ ctx[11][/*i*/ ctx[30]].length,
    				h: 1 * /*heightmap*/ ctx[11][/*k*/ ctx[28]][/*i*/ ctx[30]],
    				d: gridSizeZ / /*heightmap*/ ctx[11].length
    			});

    			if (dirty[0] & /*heightmap*/ 2048) gl_mesh_changes.location = [
    				-(gridSizeX / 2) + /*i*/ ctx[30] * (gridSizeX / /*heightmap*/ ctx[11][0].length),
    				0,
    				-(gridSizeZ / 2) + /*k*/ ctx[28] * (gridSizeZ / /*heightmap*/ ctx[11].length)
    			];

    			if (dirty[0] & /*w, h, d*/ 224) gl_mesh_changes.scale = [/*w*/ ctx[5], /*h*/ ctx[6], /*d*/ ctx[7]];

    			if (dirty[0] & /*color, heightmap*/ 2056) gl_mesh_changes.uniforms = {
    				color: adjustColor$4(/*color*/ ctx[3], /*heightmap*/ ctx[11][/*k*/ ctx[28]][/*i*/ ctx[30]])
    			};

    			gl_mesh.$set(gl_mesh_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_mesh.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_mesh.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gl_mesh, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$4.name,
    		type: "each",
    		source: "(129:8) {#each Array(heightmap[k].length) as _, i}",
    		ctx
    	});

    	return block;
    }

    // (128:4) {#each Array(heightmap.length) as _, k}
    function create_each_block$8(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value_1 = Array(/*heightmap*/ ctx[11][/*k*/ ctx[28]].length);
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$4(get_each_context_1$4(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*heightmap, w, h, d, color*/ 2280) {
    				each_value_1 = Array(/*heightmap*/ ctx[11][/*k*/ ctx[28]].length);
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$4(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_1$4(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$8.name,
    		type: "each",
    		source: "(128:4) {#each Array(heightmap.length) as _, k}",
    		ctx
    	});

    	return block;
    }

    // (141:4) <GL.Group location={[light.x,light.y,light.z]}>
    function create_default_slot_1$5(ctx) {
    	let gl_mesh;
    	let t;
    	let gl_pointlight;
    	let current;

    	gl_mesh = new Mesh({
    			props: {
    				geometry: sphere({ turns: 36, bands: 36 }),
    				location: [0, 0.2, 0],
    				scale: 0.1,
    				uniforms: { color: 16777215, emissive: 16711680 }
    			},
    			$$inline: true
    		});

    	gl_pointlight = new PointLight({
    			props: {
    				location: [0, 0, 0],
    				color: 16711680,
    				intensity: 0.6
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(gl_mesh.$$.fragment);
    			t = space();
    			create_component(gl_pointlight.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(gl_mesh, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(gl_pointlight, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_mesh.$$.fragment, local);
    			transition_in(gl_pointlight.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_mesh.$$.fragment, local);
    			transition_out(gl_pointlight.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gl_mesh, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(gl_pointlight, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$5.name,
    		type: "slot",
    		source: "(141:4) <GL.Group location={[light.x,light.y,light.z]}>",
    		ctx
    	});

    	return block;
    }

    // (117:0) <GL.Scene bind:gl={webgl} backgroundOpacity=1.0 process_extra_shader_components={process_extra_shader_components}>
    function create_default_slot$6(ctx) {
    	let gl_target;
    	let t0;
    	let gl_orbitcontrols;
    	let t1;
    	let gl_ambientlight;
    	let t2;
    	let gl_directionallight;
    	let t3;
    	let t4;
    	let gl_group;
    	let current;

    	gl_target = new Target({
    			props: {
    				id: "center",
    				location: [0, /*h*/ ctx[6] / 2, 0]
    			},
    			$$inline: true
    		});

    	gl_orbitcontrols = new OrbitControls({
    			props: {
    				maxPolarAngle: Math.PI / 2,
    				location: /*location*/ ctx[9],
    				target: /*target*/ ctx[10],
    				$$slots: { default: [create_default_slot_2$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	gl_ambientlight = new AmbientLight({
    			props: { intensity: 0.3 },
    			$$inline: true
    		});

    	gl_directionallight = new DirectionalLight({
    			props: { direction: [-1, -1, -1], intensity: 0.5 },
    			$$inline: true
    		});

    	let each_value = Array(/*heightmap*/ ctx[11].length);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$8(get_each_context$8(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	gl_group = new Group({
    			props: {
    				location: [/*light*/ ctx[4].x, /*light*/ ctx[4].y, /*light*/ ctx[4].z],
    				$$slots: { default: [create_default_slot_1$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(gl_target.$$.fragment);
    			t0 = space();
    			create_component(gl_orbitcontrols.$$.fragment);
    			t1 = space();
    			create_component(gl_ambientlight.$$.fragment);
    			t2 = space();
    			create_component(gl_directionallight.$$.fragment);
    			t3 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t4 = space();
    			create_component(gl_group.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(gl_target, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(gl_orbitcontrols, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(gl_ambientlight, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(gl_directionallight, target, anchor);
    			insert_dev(target, t3, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, t4, anchor);
    			mount_component(gl_group, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const gl_target_changes = {};
    			if (dirty[0] & /*h*/ 64) gl_target_changes.location = [0, /*h*/ ctx[6] / 2, 0];
    			gl_target.$set(gl_target_changes);
    			const gl_orbitcontrols_changes = {};
    			if (dirty[0] & /*location*/ 512) gl_orbitcontrols_changes.location = /*location*/ ctx[9];
    			if (dirty[0] & /*target*/ 1024) gl_orbitcontrols_changes.target = /*target*/ ctx[10];

    			if (dirty[0] & /*location, target*/ 1536 | dirty[1] & /*$$scope*/ 1) {
    				gl_orbitcontrols_changes.$$scope = { dirty, ctx };
    			}

    			gl_orbitcontrols.$set(gl_orbitcontrols_changes);

    			if (dirty[0] & /*heightmap, w, h, d, color*/ 2280) {
    				each_value = Array(/*heightmap*/ ctx[11].length);
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$8(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$8(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(t4.parentNode, t4);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			const gl_group_changes = {};
    			if (dirty[0] & /*light*/ 16) gl_group_changes.location = [/*light*/ ctx[4].x, /*light*/ ctx[4].y, /*light*/ ctx[4].z];

    			if (dirty[1] & /*$$scope*/ 1) {
    				gl_group_changes.$$scope = { dirty, ctx };
    			}

    			gl_group.$set(gl_group_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_target.$$.fragment, local);
    			transition_in(gl_orbitcontrols.$$.fragment, local);
    			transition_in(gl_ambientlight.$$.fragment, local);
    			transition_in(gl_directionallight.$$.fragment, local);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(gl_group.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_target.$$.fragment, local);
    			transition_out(gl_orbitcontrols.$$.fragment, local);
    			transition_out(gl_ambientlight.$$.fragment, local);
    			transition_out(gl_directionallight.$$.fragment, local);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(gl_group.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gl_target, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(gl_orbitcontrols, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(gl_ambientlight, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(gl_directionallight, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(t4);
    			destroy_component(gl_group, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$6.name,
    		type: "slot",
    		source: "(117:0) <GL.Scene bind:gl={webgl} backgroundOpacity=1.0 process_extra_shader_components={process_extra_shader_components}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$q(ctx) {
    	let gl_scene;
    	let updating_gl;
    	let t;
    	let controls;
    	let updating_init;
    	let updating_color;
    	let updating_options;
    	let updating_rangeOptions;
    	let updating_rangeValues;
    	let updating_viewLocation;
    	let updating_viewTarget;
    	let current;

    	function gl_scene_gl_binding(value) {
    		/*gl_scene_gl_binding*/ ctx[16].call(null, value);
    	}

    	let gl_scene_props = {
    		backgroundOpacity: "1.0",
    		process_extra_shader_components: /*process_extra_shader_components*/ ctx[14],
    		$$slots: { default: [create_default_slot$6] },
    		$$scope: { ctx }
    	};

    	if (/*webgl*/ ctx[8] !== void 0) {
    		gl_scene_props.gl = /*webgl*/ ctx[8];
    	}

    	gl_scene = new Scene({ props: gl_scene_props, $$inline: true });
    	binding_callbacks.push(() => bind(gl_scene, "gl", gl_scene_gl_binding));

    	function controls_init_binding(value) {
    		/*controls_init_binding*/ ctx[17].call(null, value);
    	}

    	function controls_color_binding(value) {
    		/*controls_color_binding*/ ctx[18].call(null, value);
    	}

    	function controls_options_binding(value) {
    		/*controls_options_binding*/ ctx[19].call(null, value);
    	}

    	function controls_rangeOptions_binding(value) {
    		/*controls_rangeOptions_binding*/ ctx[20].call(null, value);
    	}

    	function controls_rangeValues_binding(value) {
    		/*controls_rangeValues_binding*/ ctx[21].call(null, value);
    	}

    	function controls_viewLocation_binding(value) {
    		/*controls_viewLocation_binding*/ ctx[22].call(null, value);
    	}

    	function controls_viewTarget_binding(value) {
    		/*controls_viewTarget_binding*/ ctx[23].call(null, value);
    	}

    	let controls_props = { title: /*title*/ ctx[2] };

    	if (/*controlInit*/ ctx[12] !== void 0) {
    		controls_props.init = /*controlInit*/ ctx[12];
    	}

    	if (/*color*/ ctx[3] !== void 0) {
    		controls_props.color = /*color*/ ctx[3];
    	}

    	if (/*options*/ ctx[0] !== void 0) {
    		controls_props.options = /*options*/ ctx[0];
    	}

    	if (/*ranges*/ ctx[1] !== void 0) {
    		controls_props.rangeOptions = /*ranges*/ ctx[1];
    	}

    	if (/*ranges*/ ctx[1].values !== void 0) {
    		controls_props.rangeValues = /*ranges*/ ctx[1].values;
    	}

    	if (/*location*/ ctx[9] !== void 0) {
    		controls_props.viewLocation = /*location*/ ctx[9];
    	}

    	if (/*target*/ ctx[10] !== void 0) {
    		controls_props.viewTarget = /*target*/ ctx[10];
    	}

    	controls = new Controls({ props: controls_props, $$inline: true });
    	binding_callbacks.push(() => bind(controls, "init", controls_init_binding));
    	binding_callbacks.push(() => bind(controls, "color", controls_color_binding));
    	binding_callbacks.push(() => bind(controls, "options", controls_options_binding));
    	binding_callbacks.push(() => bind(controls, "rangeOptions", controls_rangeOptions_binding));
    	binding_callbacks.push(() => bind(controls, "rangeValues", controls_rangeValues_binding));
    	binding_callbacks.push(() => bind(controls, "viewLocation", controls_viewLocation_binding));
    	binding_callbacks.push(() => bind(controls, "viewTarget", controls_viewTarget_binding));
    	controls.$on("move", /*move_handler*/ ctx[24]);

    	const block = {
    		c: function create() {
    			create_component(gl_scene.$$.fragment);
    			t = space();
    			create_component(controls.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(gl_scene, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(controls, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const gl_scene_changes = {};

    			if (dirty[0] & /*light, heightmap, w, h, d, color, location, target*/ 3832 | dirty[1] & /*$$scope*/ 1) {
    				gl_scene_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_gl && dirty[0] & /*webgl*/ 256) {
    				updating_gl = true;
    				gl_scene_changes.gl = /*webgl*/ ctx[8];
    				add_flush_callback(() => updating_gl = false);
    			}

    			gl_scene.$set(gl_scene_changes);
    			const controls_changes = {};
    			if (dirty[0] & /*title*/ 4) controls_changes.title = /*title*/ ctx[2];

    			if (!updating_init && dirty[0] & /*controlInit*/ 4096) {
    				updating_init = true;
    				controls_changes.init = /*controlInit*/ ctx[12];
    				add_flush_callback(() => updating_init = false);
    			}

    			if (!updating_color && dirty[0] & /*color*/ 8) {
    				updating_color = true;
    				controls_changes.color = /*color*/ ctx[3];
    				add_flush_callback(() => updating_color = false);
    			}

    			if (!updating_options && dirty[0] & /*options*/ 1) {
    				updating_options = true;
    				controls_changes.options = /*options*/ ctx[0];
    				add_flush_callback(() => updating_options = false);
    			}

    			if (!updating_rangeOptions && dirty[0] & /*ranges*/ 2) {
    				updating_rangeOptions = true;
    				controls_changes.rangeOptions = /*ranges*/ ctx[1];
    				add_flush_callback(() => updating_rangeOptions = false);
    			}

    			if (!updating_rangeValues && dirty[0] & /*ranges*/ 2) {
    				updating_rangeValues = true;
    				controls_changes.rangeValues = /*ranges*/ ctx[1].values;
    				add_flush_callback(() => updating_rangeValues = false);
    			}

    			if (!updating_viewLocation && dirty[0] & /*location*/ 512) {
    				updating_viewLocation = true;
    				controls_changes.viewLocation = /*location*/ ctx[9];
    				add_flush_callback(() => updating_viewLocation = false);
    			}

    			if (!updating_viewTarget && dirty[0] & /*target*/ 1024) {
    				updating_viewTarget = true;
    				controls_changes.viewTarget = /*target*/ ctx[10];
    				add_flush_callback(() => updating_viewTarget = false);
    			}

    			controls.$set(controls_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(gl_scene.$$.fragment, local);
    			transition_in(controls.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(gl_scene.$$.fragment, local);
    			transition_out(controls.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(gl_scene, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(controls, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const gridSizeX = 10;
    const gridSizeZ = 10;

    function adjustColor$4(clr, height = 1) {
    	const r = parseInt("0x" + clr.substr(1, 2), 16),
    		g = parseInt("0x" + clr.substr(3, 2), 16),
    		b = parseInt("0x" + clr.substr(5, 2), 16);

    	const hr = Math.floor(r * (height / 0.25)), hb = Math.floor(b * (height / 0.25));
    	return Math.abs(((hr < 255 ? hr : r) << 16) + (g << 8) + (hb < 255 ? hb : b));
    }

    function instance$q($$self, $$props, $$invalidate) {
    	let { title } = $$props;
    	let color = "#ff3e00";
    	const light = {};
    	let w = 1;
    	let h = 1;
    	let d = 1;
    	let webgl;
    	let { options = { labels: [], values: [] } } = $$props;

    	let { ranges = {
    		labels: ["width", "height", "depth"],
    		min: [0.1, 0.1, 0.1],
    		max: [5, 5, 5],
    		step: [0.1, 0.1, 0.1],
    		values: []
    	} } = $$props;

    	// initial view
    	let location = new Float32Array([0, 10, 5]);

    	let target = new Float32Array([0, 1, 0]);

    	const captureViewDirection = (loc, tgt) => {
    		console.log("location: ", loc, "\n", "target: ", tgt);
    		return "";
    	};

    	const data = JSON.parse(document.getElementById("gl_data_in_html").children[0].innerHTML);
    	const heightmap = [];

    	for (let z = 0; z < data.length; z++) {
    		const xx = [];

    		for (const x of Object.getOwnPropertyNames(data[z])) {
    			xx.push(data[z][x]);
    		}

    		heightmap[z] = xx;
    	}

    	console.log(heightmap);
    	let controlInit;

    	/* This is a helper callback to bind custom uniforms/attributes
     * and to pass custom buffers. I inserted a hook directly in the
     * @sveltejs/gl source for this purpose:
     * https://github.com/Real-Currents/SvelteGL/tree/real/currents
     */
    	let process_extra_shader_components = (gl, material, model) => {
    		// console.log("Process Extra Shader Components");
    		const program = material.program;
    	};

    	let updateWorld = event => {

    	}; // console.log(event);

    	onMount(() => {
    		let frame;

    		if (typeof controlInit === "function") {
    			controlInit();
    		}

    		const loop = () => {
    			frame = requestAnimationFrame(loop);
    			$$invalidate(4, light.x = 3 * Math.sin(Date.now() * 0.001), light);
    			$$invalidate(4, light.y = 2.5 + 2 * Math.sin(Date.now() * 0.0004), light);
    			$$invalidate(4, light.z = 3 * Math.cos(Date.now() * 0.002), light);

    			if (ranges["values"].length > 0) {
    				$$invalidate(5, w = ranges["values"][0]);
    				$$invalidate(6, h = ranges["values"][1]);
    				$$invalidate(7, d = ranges["values"][2]);
    			} else {
    				$$invalidate(1, ranges["values"] = [w, h, d], ranges);
    			}
    		};

    		loop();
    		return () => cancelAnimationFrame(frame);
    	});

    	const writable_props = ["title", "options", "ranges"];

    	Object_1$2.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$8.warn(`<VizRApp> was created with unknown prop '${key}'`);
    	});

    	let { $$slots = {}, $$scope } = $$props;
    	validate_slots("VizRApp", $$slots, []);

    	function gl_scene_gl_binding(value) {
    		webgl = value;
    		$$invalidate(8, webgl);
    	}

    	function controls_init_binding(value) {
    		controlInit = value;
    		$$invalidate(12, controlInit);
    	}

    	function controls_color_binding(value) {
    		color = value;
    		$$invalidate(3, color);
    	}

    	function controls_options_binding(value) {
    		options = value;
    		$$invalidate(0, options);
    	}

    	function controls_rangeOptions_binding(value) {
    		ranges = value;
    		$$invalidate(1, ranges);
    	}

    	function controls_rangeValues_binding(value) {
    		ranges.values = value;
    		$$invalidate(1, ranges);
    	}

    	function controls_viewLocation_binding(value) {
    		location = value;
    		$$invalidate(9, location);
    	}

    	function controls_viewTarget_binding(value) {
    		target = value;
    		$$invalidate(10, target);
    	}

    	const move_handler = event => updateWorld(event);

    	$$self.$set = $$props => {
    		if ("title" in $$props) $$invalidate(2, title = $$props.title);
    		if ("options" in $$props) $$invalidate(0, options = $$props.options);
    		if ("ranges" in $$props) $$invalidate(1, ranges = $$props.ranges);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		GL,
    		Controls,
    		title,
    		color,
    		light,
    		w,
    		h,
    		d,
    		webgl,
    		options,
    		ranges,
    		location,
    		target,
    		captureViewDirection,
    		adjustColor: adjustColor$4,
    		data,
    		heightmap,
    		gridSizeX,
    		gridSizeZ,
    		controlInit,
    		process_extra_shader_components,
    		updateWorld
    	});

    	$$self.$inject_state = $$props => {
    		if ("title" in $$props) $$invalidate(2, title = $$props.title);
    		if ("color" in $$props) $$invalidate(3, color = $$props.color);
    		if ("w" in $$props) $$invalidate(5, w = $$props.w);
    		if ("h" in $$props) $$invalidate(6, h = $$props.h);
    		if ("d" in $$props) $$invalidate(7, d = $$props.d);
    		if ("webgl" in $$props) $$invalidate(8, webgl = $$props.webgl);
    		if ("options" in $$props) $$invalidate(0, options = $$props.options);
    		if ("ranges" in $$props) $$invalidate(1, ranges = $$props.ranges);
    		if ("location" in $$props) $$invalidate(9, location = $$props.location);
    		if ("target" in $$props) $$invalidate(10, target = $$props.target);
    		if ("controlInit" in $$props) $$invalidate(12, controlInit = $$props.controlInit);
    		if ("process_extra_shader_components" in $$props) $$invalidate(14, process_extra_shader_components = $$props.process_extra_shader_components);
    		if ("updateWorld" in $$props) $$invalidate(15, updateWorld = $$props.updateWorld);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		options,
    		ranges,
    		title,
    		color,
    		light,
    		w,
    		h,
    		d,
    		webgl,
    		location,
    		target,
    		heightmap,
    		controlInit,
    		captureViewDirection,
    		process_extra_shader_components,
    		updateWorld,
    		gl_scene_gl_binding,
    		controls_init_binding,
    		controls_color_binding,
    		controls_options_binding,
    		controls_rangeOptions_binding,
    		controls_rangeValues_binding,
    		controls_viewLocation_binding,
    		controls_viewTarget_binding,
    		move_handler
    	];
    }

    class VizRApp extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$q, create_fragment$q, safe_not_equal, { title: 2, options: 0, ranges: 1 }, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "VizRApp",
    			options,
    			id: create_fragment$q.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*title*/ ctx[2] === undefined && !("title" in props)) {
    			console_1$8.warn("<VizRApp> was created without expected prop 'title'");
    		}
    	}

    	get title() {
    		throw new Error("<VizRApp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<VizRApp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get options() {
    		throw new Error("<VizRApp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set options(value) {
    		throw new Error("<VizRApp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ranges() {
    		throw new Error("<VizRApp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ranges(value) {
    		throw new Error("<VizRApp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const appId = 'svelte-app';
    const appElement = document.getElementById(appId);
    var main = ( // Check if app id exists in DOM
        appElement !== null &&
        (appElement.constructor.name === 'HTMLElement' ||
            appElement.constructor.name === 'HTMLDivElement')
    ) ?
        new App({
            target: appElement,
            props: {
                greeting:
                    `Hooray 🎉 - you've built this with <a href='https://github.com/dancingfrog/sveltr' target='_blank'>SveltR</a>!`
            }
        }) : {};


    const glslAppId = "glsl-app";
    const glslAppElement = document.getElementById(glslAppId);
    const glslApp = (
        glslAppElement !== null &&
        (glslAppElement.constructor.name === 'HTMLElement' ||
            glslAppElement.constructor.name === 'HTMLDivElement')
    ) ?
        new GLSLApp({
            target: glslAppElement,
            props: {
                title: "🦊 Hello SvelteGL!"
            }
        }) : {};


    const simulationAppId = "simulation-app";
    const simulationAppElement = document.getElementById(simulationAppId);
    const simulationApp = (
        simulationAppElement !== null &&
        (simulationAppElement.constructor.name === 'HTMLElement' ||
            simulationAppElement.constructor.name === 'HTMLDivElement')
    ) ?
        new SimulationApp({
            target: simulationAppElement,
            props: {
                title: "Event Simulation 1"
            }
        }) : {};


    const simulationApp2Id = "simulation-app-2";
    const simulationApp2Element = document.getElementById(simulationApp2Id);
    const simulationApp2 = (
        simulationApp2Element !== null &&
        (simulationApp2Element.constructor.name === 'HTMLElement' ||
            simulationApp2Element.constructor.name === 'HTMLDivElement')
    ) ?
        new SimulationApp2({
            target: simulationApp2Element,
            props: {
                title: "Event Simulation 2"
            }
        }) : {};


    const terrainAppId = "terrain-app";
    const terrainAppElement = document.getElementById(terrainAppId);
    const terrainApp = (
        terrainAppElement !== null &&
        (terrainAppElement.constructor.name === 'HTMLElement' ||
            terrainAppElement.constructor.name === 'HTMLDivElement')
    ) ?
        new TerrainApp({
            target: terrainAppElement,
            props: {
                title: "🦊 Hello SvelteGL!"
            }
        }) : {};


    const invoiceAppId = 'invoice-app';
    const invoiceAppElement = document.getElementById(invoiceAppId);
    const invoiceApp = (
        invoiceAppElement !== null &&
        (invoiceAppElement.constructor.name === 'HTMLElement' ||
            invoiceAppElement.constructor.name === 'HTMLDivElement')
        ) ?
        new InvoiceApp({
            target: invoiceAppElement,
            props: {
                title: 'Invoicing'
            }
        }) : {};


    const techAppId = 'tech-app';
    const techAppElement = document.getElementById(techAppId);
    const techApp = (
        techAppElement !== null &&
        (techAppElement.constructor.name === 'HTMLElement' ||
            techAppElement.constructor.name === 'HTMLDivElement')
        ) ?
        new TechApp({
            target: techAppElement,
            props: {
                title: '🎉 Built with <a href="https://github.com/Real-Currents/SveltR" target="_blank">SveltR</a>! 🦊'
            }
        }) : {};


    const vizrAppId = 'vizr-app';
    const vizrAppElement = document.getElementById(vizrAppId);
    const vizrApp = (
        vizrAppElement !== null &&
        (vizrAppElement.constructor.name === 'HTMLElement' ||
            vizrAppElement.constructor.name === 'HTMLDivElement')
    ) ?
        new VizRApp({
            target: vizrAppElement,
            props: {
                title: 'Visualizing R Data with SveltR 🦊'
            }
        }) : {};

    exports.default = main;
    exports.glslApp = glslApp;
    exports.invoiceApp = invoiceApp;
    exports.simulationApp = simulationApp;
    exports.simulationApp2 = simulationApp2;
    exports.techApp = techApp;
    exports.terrainApp = terrainApp;
    exports.vizrApp = vizrApp;

    Object.defineProperty(exports, '__esModule', { value: true });

    return exports;

}({}));
//# sourceMappingURL=main.js.map
